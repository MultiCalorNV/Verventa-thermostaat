
out/Verventa-thermostaat.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002c6:	f1a4 0401 	sub.w	r4, r4, #1
 80002ca:	d1e9      	bne.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f092 0f00 	teq	r2, #0
 8000472:	bf14      	ite	ne
 8000474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e720      	b.n	80002cc <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aedc 	beq.w	800027a <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6c1      	b.n	800027a <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_frsub>:
 8000acc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ad0:	e002      	b.n	8000ad8 <__addsf3>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fsub>:
 8000ad4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad8 <__addsf3>:
 8000ad8:	0042      	lsls	r2, r0, #1
 8000ada:	bf1f      	itttt	ne
 8000adc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae0:	ea92 0f03 	teqne	r2, r3
 8000ae4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aec:	d06a      	beq.n	8000bc4 <__addsf3+0xec>
 8000aee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af6:	bfc1      	itttt	gt
 8000af8:	18d2      	addgt	r2, r2, r3
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	4048      	eorgt	r0, r1
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	2b19      	cmp	r3, #25
 8000b06:	bf88      	it	hi
 8000b08:	4770      	bxhi	lr
 8000b0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4249      	negne	r1, r1
 8000b2a:	ea92 0f03 	teq	r2, r3
 8000b2e:	d03f      	beq.n	8000bb0 <__addsf3+0xd8>
 8000b30:	f1a2 0201 	sub.w	r2, r2, #1
 8000b34:	fa41 fc03 	asr.w	ip, r1, r3
 8000b38:	eb10 000c 	adds.w	r0, r0, ip
 8000b3c:	f1c3 0320 	rsb	r3, r3, #32
 8000b40:	fa01 f103 	lsl.w	r1, r1, r3
 8000b44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__addsf3+0x78>
 8000b4a:	4249      	negs	r1, r1
 8000b4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b54:	d313      	bcc.n	8000b7e <__addsf3+0xa6>
 8000b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5a:	d306      	bcc.n	8000b6a <__addsf3+0x92>
 8000b5c:	0840      	lsrs	r0, r0, #1
 8000b5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b62:	f102 0201 	add.w	r2, r2, #1
 8000b66:	2afe      	cmp	r2, #254	; 0xfe
 8000b68:	d251      	bcs.n	8000c0e <__addsf3+0x136>
 8000b6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b72:	bf08      	it	eq
 8000b74:	f020 0001 	biceq.w	r0, r0, #1
 8000b78:	ea40 0003 	orr.w	r0, r0, r3
 8000b7c:	4770      	bx	lr
 8000b7e:	0049      	lsls	r1, r1, #1
 8000b80:	eb40 0000 	adc.w	r0, r0, r0
 8000b84:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	d1ed      	bne.n	8000b6a <__addsf3+0x92>
 8000b8e:	fab0 fc80 	clz	ip, r0
 8000b92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b96:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9e:	bfaa      	itet	ge
 8000ba0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba4:	4252      	neglt	r2, r2
 8000ba6:	4318      	orrge	r0, r3
 8000ba8:	bfbc      	itt	lt
 8000baa:	40d0      	lsrlt	r0, r2
 8000bac:	4318      	orrlt	r0, r3
 8000bae:	4770      	bx	lr
 8000bb0:	f092 0f00 	teq	r2, #0
 8000bb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb8:	bf06      	itte	eq
 8000bba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bbe:	3201      	addeq	r2, #1
 8000bc0:	3b01      	subne	r3, #1
 8000bc2:	e7b5      	b.n	8000b30 <__addsf3+0x58>
 8000bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	bf18      	it	ne
 8000bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd2:	d021      	beq.n	8000c18 <__addsf3+0x140>
 8000bd4:	ea92 0f03 	teq	r2, r3
 8000bd8:	d004      	beq.n	8000be4 <__addsf3+0x10c>
 8000bda:	f092 0f00 	teq	r2, #0
 8000bde:	bf08      	it	eq
 8000be0:	4608      	moveq	r0, r1
 8000be2:	4770      	bx	lr
 8000be4:	ea90 0f01 	teq	r0, r1
 8000be8:	bf1c      	itt	ne
 8000bea:	2000      	movne	r0, #0
 8000bec:	4770      	bxne	lr
 8000bee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bf2:	d104      	bne.n	8000bfe <__addsf3+0x126>
 8000bf4:	0040      	lsls	r0, r0, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	4770      	bx	lr
 8000bfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c02:	bf3c      	itt	cc
 8000c04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bxcc	lr
 8000c0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	4770      	bx	lr
 8000c18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c1c:	bf16      	itet	ne
 8000c1e:	4608      	movne	r0, r1
 8000c20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c24:	4601      	movne	r1, r0
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	bf06      	itte	eq
 8000c2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2e:	ea90 0f01 	teqeq	r0, r1
 8000c32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_ui2f>:
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e004      	b.n	8000c48 <__aeabi_i2f+0x8>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_i2f>:
 8000c40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c44:	bf48      	it	mi
 8000c46:	4240      	negmi	r0, r0
 8000c48:	ea5f 0c00 	movs.w	ip, r0
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c54:	4601      	mov	r1, r0
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	e01c      	b.n	8000c96 <__aeabi_l2f+0x2a>

08000c5c <__aeabi_ul2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e00a      	b.n	8000c80 <__aeabi_l2f+0x14>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_l2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c78:	d502      	bpl.n	8000c80 <__aeabi_l2f+0x14>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	ea5f 0c01 	movs.w	ip, r1
 8000c84:	bf02      	ittt	eq
 8000c86:	4684      	moveq	ip, r0
 8000c88:	4601      	moveq	r1, r0
 8000c8a:	2000      	moveq	r0, #0
 8000c8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c90:	bf08      	it	eq
 8000c92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c9a:	fabc f28c 	clz	r2, ip
 8000c9e:	3a08      	subs	r2, #8
 8000ca0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca4:	db10      	blt.n	8000cc8 <__aeabi_l2f+0x5c>
 8000ca6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f102 0220 	add.w	r2, r2, #32
 8000ccc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_fmul>:
 8000ce8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf0:	bf1e      	ittt	ne
 8000cf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf6:	ea92 0f0c 	teqne	r2, ip
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d06f      	beq.n	8000de0 <__aeabi_fmul+0xf8>
 8000d00:	441a      	add	r2, r3
 8000d02:	ea80 0c01 	eor.w	ip, r0, r1
 8000d06:	0240      	lsls	r0, r0, #9
 8000d08:	bf18      	it	ne
 8000d0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0e:	d01e      	beq.n	8000d4e <__aeabi_fmul+0x66>
 8000d10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d28:	bf3e      	ittt	cc
 8000d2a:	0049      	lslcc	r1, r1, #1
 8000d2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d30:	005b      	lslcc	r3, r3, #1
 8000d32:	ea40 0001 	orr.w	r0, r0, r1
 8000d36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d3a:	2afd      	cmp	r2, #253	; 0xfd
 8000d3c:	d81d      	bhi.n	8000d7a <__aeabi_fmul+0x92>
 8000d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d46:	bf08      	it	eq
 8000d48:	f020 0001 	biceq.w	r0, r0, #1
 8000d4c:	4770      	bx	lr
 8000d4e:	f090 0f00 	teq	r0, #0
 8000d52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d56:	bf08      	it	eq
 8000d58:	0249      	lsleq	r1, r1, #9
 8000d5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d62:	3a7f      	subs	r2, #127	; 0x7f
 8000d64:	bfc2      	ittt	gt
 8000d66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6e:	4770      	bxgt	lr
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	dc5d      	bgt.n	8000e38 <__aeabi_fmul+0x150>
 8000d7c:	f112 0f19 	cmn.w	r2, #25
 8000d80:	bfdc      	itt	le
 8000d82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d86:	4770      	bxle	lr
 8000d88:	f1c2 0200 	rsb	r2, r2, #0
 8000d8c:	0041      	lsls	r1, r0, #1
 8000d8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d92:	f1c2 0220 	rsb	r2, r2, #32
 8000d96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9e:	f140 0000 	adc.w	r0, r0, #0
 8000da2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da6:	bf08      	it	eq
 8000da8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dac:	4770      	bx	lr
 8000dae:	f092 0f00 	teq	r2, #0
 8000db2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db6:	bf02      	ittt	eq
 8000db8:	0040      	lsleq	r0, r0, #1
 8000dba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dbe:	3a01      	subeq	r2, #1
 8000dc0:	d0f9      	beq.n	8000db6 <__aeabi_fmul+0xce>
 8000dc2:	ea40 000c 	orr.w	r0, r0, ip
 8000dc6:	f093 0f00 	teq	r3, #0
 8000dca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0049      	lsleq	r1, r1, #1
 8000dd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd6:	3b01      	subeq	r3, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fmul+0xe6>
 8000dda:	ea41 010c 	orr.w	r1, r1, ip
 8000dde:	e78f      	b.n	8000d00 <__aeabi_fmul+0x18>
 8000de0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	bf18      	it	ne
 8000dea:	ea93 0f0c 	teqne	r3, ip
 8000dee:	d00a      	beq.n	8000e06 <__aeabi_fmul+0x11e>
 8000df0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df4:	bf18      	it	ne
 8000df6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	d1d8      	bne.n	8000dae <__aeabi_fmul+0xc6>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	4770      	bx	lr
 8000e06:	f090 0f00 	teq	r0, #0
 8000e0a:	bf17      	itett	ne
 8000e0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e10:	4608      	moveq	r0, r1
 8000e12:	f091 0f00 	teqne	r1, #0
 8000e16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e1a:	d014      	beq.n	8000e46 <__aeabi_fmul+0x15e>
 8000e1c:	ea92 0f0c 	teq	r2, ip
 8000e20:	d101      	bne.n	8000e26 <__aeabi_fmul+0x13e>
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	d10f      	bne.n	8000e46 <__aeabi_fmul+0x15e>
 8000e26:	ea93 0f0c 	teq	r3, ip
 8000e2a:	d103      	bne.n	8000e34 <__aeabi_fmul+0x14c>
 8000e2c:	024b      	lsls	r3, r1, #9
 8000e2e:	bf18      	it	ne
 8000e30:	4608      	movne	r0, r1
 8000e32:	d108      	bne.n	8000e46 <__aeabi_fmul+0x15e>
 8000e34:	ea80 0001 	eor.w	r0, r0, r1
 8000e38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e44:	4770      	bx	lr
 8000e46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4e:	4770      	bx	lr

08000e50 <__aeabi_fdiv>:
 8000e50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e58:	bf1e      	ittt	ne
 8000e5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5e:	ea92 0f0c 	teqne	r2, ip
 8000e62:	ea93 0f0c 	teqne	r3, ip
 8000e66:	d069      	beq.n	8000f3c <__aeabi_fdiv+0xec>
 8000e68:	eba2 0203 	sub.w	r2, r2, r3
 8000e6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e70:	0249      	lsls	r1, r1, #9
 8000e72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e76:	d037      	beq.n	8000ee8 <__aeabi_fdiv+0x98>
 8000e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	bf38      	it	cc
 8000e8c:	005b      	lslcc	r3, r3, #1
 8000e8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e96:	428b      	cmp	r3, r1
 8000e98:	bf24      	itt	cs
 8000e9a:	1a5b      	subcs	r3, r3, r1
 8000e9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ea0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea4:	bf24      	itt	cs
 8000ea6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eaa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eb2:	bf24      	itt	cs
 8000eb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ebc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	bf18      	it	ne
 8000ece:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ed2:	d1e0      	bne.n	8000e96 <__aeabi_fdiv+0x46>
 8000ed4:	2afd      	cmp	r2, #253	; 0xfd
 8000ed6:	f63f af50 	bhi.w	8000d7a <__aeabi_fmul+0x92>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ee0:	bf08      	it	eq
 8000ee2:	f020 0001 	biceq.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ef0:	327f      	adds	r2, #127	; 0x7f
 8000ef2:	bfc2      	ittt	gt
 8000ef4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efc:	4770      	bxgt	lr
 8000efe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	3a01      	subs	r2, #1
 8000f08:	e737      	b.n	8000d7a <__aeabi_fmul+0x92>
 8000f0a:	f092 0f00 	teq	r2, #0
 8000f0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f12:	bf02      	ittt	eq
 8000f14:	0040      	lsleq	r0, r0, #1
 8000f16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f1a:	3a01      	subeq	r2, #1
 8000f1c:	d0f9      	beq.n	8000f12 <__aeabi_fdiv+0xc2>
 8000f1e:	ea40 000c 	orr.w	r0, r0, ip
 8000f22:	f093 0f00 	teq	r3, #0
 8000f26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0049      	lsleq	r1, r1, #1
 8000f2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f32:	3b01      	subeq	r3, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fdiv+0xda>
 8000f36:	ea41 010c 	orr.w	r1, r1, ip
 8000f3a:	e795      	b.n	8000e68 <__aeabi_fdiv+0x18>
 8000f3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f40:	ea92 0f0c 	teq	r2, ip
 8000f44:	d108      	bne.n	8000f58 <__aeabi_fdiv+0x108>
 8000f46:	0242      	lsls	r2, r0, #9
 8000f48:	f47f af7d 	bne.w	8000e46 <__aeabi_fmul+0x15e>
 8000f4c:	ea93 0f0c 	teq	r3, ip
 8000f50:	f47f af70 	bne.w	8000e34 <__aeabi_fmul+0x14c>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e776      	b.n	8000e46 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	d104      	bne.n	8000f68 <__aeabi_fdiv+0x118>
 8000f5e:	024b      	lsls	r3, r1, #9
 8000f60:	f43f af4c 	beq.w	8000dfc <__aeabi_fmul+0x114>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e76e      	b.n	8000e46 <__aeabi_fmul+0x15e>
 8000f68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f6c:	bf18      	it	ne
 8000f6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f72:	d1ca      	bne.n	8000f0a <__aeabi_fdiv+0xba>
 8000f74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f78:	f47f af5c 	bne.w	8000e34 <__aeabi_fmul+0x14c>
 8000f7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f80:	f47f af3c 	bne.w	8000dfc <__aeabi_fmul+0x114>
 8000f84:	e75f      	b.n	8000e46 <__aeabi_fmul+0x15e>
 8000f86:	bf00      	nop

08000f88 <__aeabi_f2iz>:
 8000f88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f90:	d30f      	bcc.n	8000fb2 <__aeabi_f2iz+0x2a>
 8000f92:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f9a:	d90d      	bls.n	8000fb8 <__aeabi_f2iz+0x30>
 8000f9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fac:	bf18      	it	ne
 8000fae:	4240      	negne	r0, r0
 8000fb0:	4770      	bx	lr
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	4770      	bx	lr
 8000fb8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fbc:	d101      	bne.n	8000fc2 <__aeabi_f2iz+0x3a>
 8000fbe:	0242      	lsls	r2, r0, #9
 8000fc0:	d105      	bne.n	8000fce <__aeabi_f2iz+0x46>
 8000fc2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc6:	bf08      	it	eq
 8000fc8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_f2uiz>:
 8000fd4:	0042      	lsls	r2, r0, #1
 8000fd6:	d20e      	bcs.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30b      	bcc.n	8000ff6 <__aeabi_f2uiz+0x22>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d409      	bmi.n	8000ffc <__aeabi_f2uiz+0x28>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4770      	bx	lr
 8000ffc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001000:	d101      	bne.n	8001006 <__aeabi_f2uiz+0x32>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	d102      	bne.n	800100c <__aeabi_f2uiz+0x38>
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	4770      	bx	lr
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <memcpy>:
 8001014:	4684      	mov	ip, r0
 8001016:	ea41 0300 	orr.w	r3, r1, r0
 800101a:	f013 0303 	ands.w	r3, r3, #3
 800101e:	d16d      	bne.n	80010fc <memcpy+0xe8>
 8001020:	3a40      	subs	r2, #64	; 0x40
 8001022:	d341      	bcc.n	80010a8 <memcpy+0x94>
 8001024:	f851 3b04 	ldr.w	r3, [r1], #4
 8001028:	f840 3b04 	str.w	r3, [r0], #4
 800102c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001030:	f840 3b04 	str.w	r3, [r0], #4
 8001034:	f851 3b04 	ldr.w	r3, [r1], #4
 8001038:	f840 3b04 	str.w	r3, [r0], #4
 800103c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001040:	f840 3b04 	str.w	r3, [r0], #4
 8001044:	f851 3b04 	ldr.w	r3, [r1], #4
 8001048:	f840 3b04 	str.w	r3, [r0], #4
 800104c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001050:	f840 3b04 	str.w	r3, [r0], #4
 8001054:	f851 3b04 	ldr.w	r3, [r1], #4
 8001058:	f840 3b04 	str.w	r3, [r0], #4
 800105c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001060:	f840 3b04 	str.w	r3, [r0], #4
 8001064:	f851 3b04 	ldr.w	r3, [r1], #4
 8001068:	f840 3b04 	str.w	r3, [r0], #4
 800106c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001070:	f840 3b04 	str.w	r3, [r0], #4
 8001074:	f851 3b04 	ldr.w	r3, [r1], #4
 8001078:	f840 3b04 	str.w	r3, [r0], #4
 800107c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001080:	f840 3b04 	str.w	r3, [r0], #4
 8001084:	f851 3b04 	ldr.w	r3, [r1], #4
 8001088:	f840 3b04 	str.w	r3, [r0], #4
 800108c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001090:	f840 3b04 	str.w	r3, [r0], #4
 8001094:	f851 3b04 	ldr.w	r3, [r1], #4
 8001098:	f840 3b04 	str.w	r3, [r0], #4
 800109c:	f851 3b04 	ldr.w	r3, [r1], #4
 80010a0:	f840 3b04 	str.w	r3, [r0], #4
 80010a4:	3a40      	subs	r2, #64	; 0x40
 80010a6:	d2bd      	bcs.n	8001024 <memcpy+0x10>
 80010a8:	3230      	adds	r2, #48	; 0x30
 80010aa:	d311      	bcc.n	80010d0 <memcpy+0xbc>
 80010ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80010b0:	f840 3b04 	str.w	r3, [r0], #4
 80010b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80010b8:	f840 3b04 	str.w	r3, [r0], #4
 80010bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80010c0:	f840 3b04 	str.w	r3, [r0], #4
 80010c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80010c8:	f840 3b04 	str.w	r3, [r0], #4
 80010cc:	3a10      	subs	r2, #16
 80010ce:	d2ed      	bcs.n	80010ac <memcpy+0x98>
 80010d0:	320c      	adds	r2, #12
 80010d2:	d305      	bcc.n	80010e0 <memcpy+0xcc>
 80010d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80010d8:	f840 3b04 	str.w	r3, [r0], #4
 80010dc:	3a04      	subs	r2, #4
 80010de:	d2f9      	bcs.n	80010d4 <memcpy+0xc0>
 80010e0:	3204      	adds	r2, #4
 80010e2:	d008      	beq.n	80010f6 <memcpy+0xe2>
 80010e4:	07d2      	lsls	r2, r2, #31
 80010e6:	bf1c      	itt	ne
 80010e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80010ec:	f800 3b01 	strbne.w	r3, [r0], #1
 80010f0:	d301      	bcc.n	80010f6 <memcpy+0xe2>
 80010f2:	880b      	ldrh	r3, [r1, #0]
 80010f4:	8003      	strh	r3, [r0, #0]
 80010f6:	4660      	mov	r0, ip
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2a08      	cmp	r2, #8
 80010fe:	d313      	bcc.n	8001128 <memcpy+0x114>
 8001100:	078b      	lsls	r3, r1, #30
 8001102:	d08d      	beq.n	8001020 <memcpy+0xc>
 8001104:	f010 0303 	ands.w	r3, r0, #3
 8001108:	d08a      	beq.n	8001020 <memcpy+0xc>
 800110a:	f1c3 0304 	rsb	r3, r3, #4
 800110e:	1ad2      	subs	r2, r2, r3
 8001110:	07db      	lsls	r3, r3, #31
 8001112:	bf1c      	itt	ne
 8001114:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001118:	f800 3b01 	strbne.w	r3, [r0], #1
 800111c:	d380      	bcc.n	8001020 <memcpy+0xc>
 800111e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001122:	f820 3b02 	strh.w	r3, [r0], #2
 8001126:	e77b      	b.n	8001020 <memcpy+0xc>
 8001128:	3a04      	subs	r2, #4
 800112a:	d3d9      	bcc.n	80010e0 <memcpy+0xcc>
 800112c:	3a01      	subs	r2, #1
 800112e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001132:	f800 3b01 	strb.w	r3, [r0], #1
 8001136:	d2f9      	bcs.n	800112c <memcpy+0x118>
 8001138:	780b      	ldrb	r3, [r1, #0]
 800113a:	7003      	strb	r3, [r0, #0]
 800113c:	784b      	ldrb	r3, [r1, #1]
 800113e:	7043      	strb	r3, [r0, #1]
 8001140:	788b      	ldrb	r3, [r1, #2]
 8001142:	7083      	strb	r3, [r0, #2]
 8001144:	4660      	mov	r0, ip
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2iz>:
 8001148:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800114c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001150:	d215      	bcs.n	800117e <__aeabi_d2iz+0x36>
 8001152:	d511      	bpl.n	8001178 <__aeabi_d2iz+0x30>
 8001154:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001158:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800115c:	d912      	bls.n	8001184 <__aeabi_d2iz+0x3c>
 800115e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001166:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800116a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800116e:	fa23 f002 	lsr.w	r0, r3, r2
 8001172:	bf18      	it	ne
 8001174:	4240      	negne	r0, r0
 8001176:	4770      	bx	lr
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	4770      	bx	lr
 800117e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001182:	d105      	bne.n	8001190 <__aeabi_d2iz+0x48>
 8001184:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001188:	bf08      	it	eq
 800118a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800118e:	4770      	bx	lr
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <__aeabi_uldivmod>:
 8001198:	b94b      	cbnz	r3, 80011ae <__aeabi_uldivmod+0x16>
 800119a:	b942      	cbnz	r2, 80011ae <__aeabi_uldivmod+0x16>
 800119c:	2900      	cmp	r1, #0
 800119e:	bf08      	it	eq
 80011a0:	2800      	cmpeq	r0, #0
 80011a2:	d002      	beq.n	80011aa <__aeabi_uldivmod+0x12>
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	4608      	mov	r0, r1
 80011aa:	f000 b83b 	b.w	8001224 <__aeabi_idiv0>
 80011ae:	b082      	sub	sp, #8
 80011b0:	46ec      	mov	ip, sp
 80011b2:	e92d 5000 	stmdb	sp!, {ip, lr}
 80011b6:	f000 f81d 	bl	80011f4 <__gnu_uldivmod_helper>
 80011ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011be:	b002      	add	sp, #8
 80011c0:	bc0c      	pop	{r2, r3}
 80011c2:	4770      	bx	lr

080011c4 <__gnu_ldivmod_helper>:
 80011c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c8:	9c06      	ldr	r4, [sp, #24]
 80011ca:	4615      	mov	r5, r2
 80011cc:	4606      	mov	r6, r0
 80011ce:	460f      	mov	r7, r1
 80011d0:	4698      	mov	r8, r3
 80011d2:	f000 f829 	bl	8001228 <__divdi3>
 80011d6:	fb05 f301 	mul.w	r3, r5, r1
 80011da:	fb00 3808 	mla	r8, r0, r8, r3
 80011de:	fba5 2300 	umull	r2, r3, r5, r0
 80011e2:	1ab2      	subs	r2, r6, r2
 80011e4:	4443      	add	r3, r8
 80011e6:	eb67 0303 	sbc.w	r3, r7, r3
 80011ea:	e9c4 2300 	strd	r2, r3, [r4]
 80011ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011f2:	bf00      	nop

080011f4 <__gnu_uldivmod_helper>:
 80011f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f8:	9c06      	ldr	r4, [sp, #24]
 80011fa:	4690      	mov	r8, r2
 80011fc:	4606      	mov	r6, r0
 80011fe:	460f      	mov	r7, r1
 8001200:	461d      	mov	r5, r3
 8001202:	f000 f95f 	bl	80014c4 <__udivdi3>
 8001206:	fb00 f505 	mul.w	r5, r0, r5
 800120a:	fba0 2308 	umull	r2, r3, r0, r8
 800120e:	fb08 5501 	mla	r5, r8, r1, r5
 8001212:	1ab2      	subs	r2, r6, r2
 8001214:	442b      	add	r3, r5
 8001216:	eb67 0303 	sbc.w	r3, r7, r3
 800121a:	e9c4 2300 	strd	r2, r3, [r4]
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001222:	bf00      	nop

08001224 <__aeabi_idiv0>:
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <__divdi3>:
 8001228:	2900      	cmp	r1, #0
 800122a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800122e:	f2c0 80a6 	blt.w	800137e <__divdi3+0x156>
 8001232:	2600      	movs	r6, #0
 8001234:	2b00      	cmp	r3, #0
 8001236:	f2c0 809c 	blt.w	8001372 <__divdi3+0x14a>
 800123a:	4688      	mov	r8, r1
 800123c:	4694      	mov	ip, r2
 800123e:	469e      	mov	lr, r3
 8001240:	4615      	mov	r5, r2
 8001242:	4604      	mov	r4, r0
 8001244:	460f      	mov	r7, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d13d      	bne.n	80012c6 <__divdi3+0x9e>
 800124a:	428a      	cmp	r2, r1
 800124c:	d959      	bls.n	8001302 <__divdi3+0xda>
 800124e:	fab2 f382 	clz	r3, r2
 8001252:	b13b      	cbz	r3, 8001264 <__divdi3+0x3c>
 8001254:	f1c3 0220 	rsb	r2, r3, #32
 8001258:	409f      	lsls	r7, r3
 800125a:	fa20 f202 	lsr.w	r2, r0, r2
 800125e:	409d      	lsls	r5, r3
 8001260:	4317      	orrs	r7, r2
 8001262:	409c      	lsls	r4, r3
 8001264:	0c29      	lsrs	r1, r5, #16
 8001266:	0c22      	lsrs	r2, r4, #16
 8001268:	fbb7 fef1 	udiv	lr, r7, r1
 800126c:	b2a8      	uxth	r0, r5
 800126e:	fb01 771e 	mls	r7, r1, lr, r7
 8001272:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8001276:	fb00 f30e 	mul.w	r3, r0, lr
 800127a:	42bb      	cmp	r3, r7
 800127c:	d90a      	bls.n	8001294 <__divdi3+0x6c>
 800127e:	197f      	adds	r7, r7, r5
 8001280:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001284:	f080 8105 	bcs.w	8001492 <__divdi3+0x26a>
 8001288:	42bb      	cmp	r3, r7
 800128a:	f240 8102 	bls.w	8001492 <__divdi3+0x26a>
 800128e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001292:	442f      	add	r7, r5
 8001294:	1aff      	subs	r7, r7, r3
 8001296:	b2a4      	uxth	r4, r4
 8001298:	fbb7 f3f1 	udiv	r3, r7, r1
 800129c:	fb01 7713 	mls	r7, r1, r3, r7
 80012a0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80012a4:	fb00 f003 	mul.w	r0, r0, r3
 80012a8:	42b8      	cmp	r0, r7
 80012aa:	d908      	bls.n	80012be <__divdi3+0x96>
 80012ac:	197f      	adds	r7, r7, r5
 80012ae:	f103 32ff 	add.w	r2, r3, #4294967295
 80012b2:	f080 80f0 	bcs.w	8001496 <__divdi3+0x26e>
 80012b6:	42b8      	cmp	r0, r7
 80012b8:	f240 80ed 	bls.w	8001496 <__divdi3+0x26e>
 80012bc:	3b02      	subs	r3, #2
 80012be:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80012c2:	2200      	movs	r2, #0
 80012c4:	e003      	b.n	80012ce <__divdi3+0xa6>
 80012c6:	428b      	cmp	r3, r1
 80012c8:	d90f      	bls.n	80012ea <__divdi3+0xc2>
 80012ca:	2200      	movs	r2, #0
 80012cc:	4613      	mov	r3, r2
 80012ce:	1c34      	adds	r4, r6, #0
 80012d0:	bf18      	it	ne
 80012d2:	2401      	movne	r4, #1
 80012d4:	4260      	negs	r0, r4
 80012d6:	f04f 0500 	mov.w	r5, #0
 80012da:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80012de:	4058      	eors	r0, r3
 80012e0:	4051      	eors	r1, r2
 80012e2:	1900      	adds	r0, r0, r4
 80012e4:	4169      	adcs	r1, r5
 80012e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ea:	fab3 f283 	clz	r2, r3
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	f040 8086 	bne.w	8001400 <__divdi3+0x1d8>
 80012f4:	428b      	cmp	r3, r1
 80012f6:	d302      	bcc.n	80012fe <__divdi3+0xd6>
 80012f8:	4584      	cmp	ip, r0
 80012fa:	f200 80db 	bhi.w	80014b4 <__divdi3+0x28c>
 80012fe:	2301      	movs	r3, #1
 8001300:	e7e5      	b.n	80012ce <__divdi3+0xa6>
 8001302:	b912      	cbnz	r2, 800130a <__divdi3+0xe2>
 8001304:	2301      	movs	r3, #1
 8001306:	fbb3 f5f2 	udiv	r5, r3, r2
 800130a:	fab5 f085 	clz	r0, r5
 800130e:	2800      	cmp	r0, #0
 8001310:	d13b      	bne.n	800138a <__divdi3+0x162>
 8001312:	1b78      	subs	r0, r7, r5
 8001314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001318:	fa1f fc85 	uxth.w	ip, r5
 800131c:	2201      	movs	r2, #1
 800131e:	fbb0 f8fe 	udiv	r8, r0, lr
 8001322:	0c21      	lsrs	r1, r4, #16
 8001324:	fb0e 0718 	mls	r7, lr, r8, r0
 8001328:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800132c:	fb0c f308 	mul.w	r3, ip, r8
 8001330:	42bb      	cmp	r3, r7
 8001332:	d907      	bls.n	8001344 <__divdi3+0x11c>
 8001334:	197f      	adds	r7, r7, r5
 8001336:	f108 31ff 	add.w	r1, r8, #4294967295
 800133a:	d202      	bcs.n	8001342 <__divdi3+0x11a>
 800133c:	42bb      	cmp	r3, r7
 800133e:	f200 80bd 	bhi.w	80014bc <__divdi3+0x294>
 8001342:	4688      	mov	r8, r1
 8001344:	1aff      	subs	r7, r7, r3
 8001346:	b2a4      	uxth	r4, r4
 8001348:	fbb7 f3fe 	udiv	r3, r7, lr
 800134c:	fb0e 7713 	mls	r7, lr, r3, r7
 8001350:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8001354:	fb0c fc03 	mul.w	ip, ip, r3
 8001358:	45bc      	cmp	ip, r7
 800135a:	d907      	bls.n	800136c <__divdi3+0x144>
 800135c:	197f      	adds	r7, r7, r5
 800135e:	f103 31ff 	add.w	r1, r3, #4294967295
 8001362:	d202      	bcs.n	800136a <__divdi3+0x142>
 8001364:	45bc      	cmp	ip, r7
 8001366:	f200 80a7 	bhi.w	80014b8 <__divdi3+0x290>
 800136a:	460b      	mov	r3, r1
 800136c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001370:	e7ad      	b.n	80012ce <__divdi3+0xa6>
 8001372:	4252      	negs	r2, r2
 8001374:	ea6f 0606 	mvn.w	r6, r6
 8001378:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800137c:	e75d      	b.n	800123a <__divdi3+0x12>
 800137e:	4240      	negs	r0, r0
 8001380:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001384:	f04f 36ff 	mov.w	r6, #4294967295
 8001388:	e754      	b.n	8001234 <__divdi3+0xc>
 800138a:	f1c0 0220 	rsb	r2, r0, #32
 800138e:	fa24 f102 	lsr.w	r1, r4, r2
 8001392:	fa07 f300 	lsl.w	r3, r7, r0
 8001396:	4085      	lsls	r5, r0
 8001398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800139c:	40d7      	lsrs	r7, r2
 800139e:	4319      	orrs	r1, r3
 80013a0:	fbb7 f2fe 	udiv	r2, r7, lr
 80013a4:	0c0b      	lsrs	r3, r1, #16
 80013a6:	fb0e 7712 	mls	r7, lr, r2, r7
 80013aa:	fa1f fc85 	uxth.w	ip, r5
 80013ae:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80013b2:	fb0c f702 	mul.w	r7, ip, r2
 80013b6:	429f      	cmp	r7, r3
 80013b8:	fa04 f400 	lsl.w	r4, r4, r0
 80013bc:	d907      	bls.n	80013ce <__divdi3+0x1a6>
 80013be:	195b      	adds	r3, r3, r5
 80013c0:	f102 30ff 	add.w	r0, r2, #4294967295
 80013c4:	d274      	bcs.n	80014b0 <__divdi3+0x288>
 80013c6:	429f      	cmp	r7, r3
 80013c8:	d972      	bls.n	80014b0 <__divdi3+0x288>
 80013ca:	3a02      	subs	r2, #2
 80013cc:	442b      	add	r3, r5
 80013ce:	1bdf      	subs	r7, r3, r7
 80013d0:	b289      	uxth	r1, r1
 80013d2:	fbb7 f8fe 	udiv	r8, r7, lr
 80013d6:	fb0e 7318 	mls	r3, lr, r8, r7
 80013da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80013de:	fb0c f708 	mul.w	r7, ip, r8
 80013e2:	429f      	cmp	r7, r3
 80013e4:	d908      	bls.n	80013f8 <__divdi3+0x1d0>
 80013e6:	195b      	adds	r3, r3, r5
 80013e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80013ec:	d25c      	bcs.n	80014a8 <__divdi3+0x280>
 80013ee:	429f      	cmp	r7, r3
 80013f0:	d95a      	bls.n	80014a8 <__divdi3+0x280>
 80013f2:	f1a8 0802 	sub.w	r8, r8, #2
 80013f6:	442b      	add	r3, r5
 80013f8:	1bd8      	subs	r0, r3, r7
 80013fa:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80013fe:	e78e      	b.n	800131e <__divdi3+0xf6>
 8001400:	f1c2 0320 	rsb	r3, r2, #32
 8001404:	fa2c f103 	lsr.w	r1, ip, r3
 8001408:	fa0e fe02 	lsl.w	lr, lr, r2
 800140c:	fa20 f703 	lsr.w	r7, r0, r3
 8001410:	ea41 0e0e 	orr.w	lr, r1, lr
 8001414:	fa08 f002 	lsl.w	r0, r8, r2
 8001418:	fa28 f103 	lsr.w	r1, r8, r3
 800141c:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8001420:	4338      	orrs	r0, r7
 8001422:	fbb1 f8f5 	udiv	r8, r1, r5
 8001426:	0c03      	lsrs	r3, r0, #16
 8001428:	fb05 1118 	mls	r1, r5, r8, r1
 800142c:	fa1f f78e 	uxth.w	r7, lr
 8001430:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001434:	fb07 f308 	mul.w	r3, r7, r8
 8001438:	428b      	cmp	r3, r1
 800143a:	fa0c fc02 	lsl.w	ip, ip, r2
 800143e:	d909      	bls.n	8001454 <__divdi3+0x22c>
 8001440:	eb11 010e 	adds.w	r1, r1, lr
 8001444:	f108 39ff 	add.w	r9, r8, #4294967295
 8001448:	d230      	bcs.n	80014ac <__divdi3+0x284>
 800144a:	428b      	cmp	r3, r1
 800144c:	d92e      	bls.n	80014ac <__divdi3+0x284>
 800144e:	f1a8 0802 	sub.w	r8, r8, #2
 8001452:	4471      	add	r1, lr
 8001454:	1ac9      	subs	r1, r1, r3
 8001456:	b280      	uxth	r0, r0
 8001458:	fbb1 f3f5 	udiv	r3, r1, r5
 800145c:	fb05 1113 	mls	r1, r5, r3, r1
 8001460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001464:	fb07 f703 	mul.w	r7, r7, r3
 8001468:	428f      	cmp	r7, r1
 800146a:	d908      	bls.n	800147e <__divdi3+0x256>
 800146c:	eb11 010e 	adds.w	r1, r1, lr
 8001470:	f103 30ff 	add.w	r0, r3, #4294967295
 8001474:	d216      	bcs.n	80014a4 <__divdi3+0x27c>
 8001476:	428f      	cmp	r7, r1
 8001478:	d914      	bls.n	80014a4 <__divdi3+0x27c>
 800147a:	3b02      	subs	r3, #2
 800147c:	4471      	add	r1, lr
 800147e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001482:	1bc9      	subs	r1, r1, r7
 8001484:	fba3 890c 	umull	r8, r9, r3, ip
 8001488:	4549      	cmp	r1, r9
 800148a:	d309      	bcc.n	80014a0 <__divdi3+0x278>
 800148c:	d005      	beq.n	800149a <__divdi3+0x272>
 800148e:	2200      	movs	r2, #0
 8001490:	e71d      	b.n	80012ce <__divdi3+0xa6>
 8001492:	4696      	mov	lr, r2
 8001494:	e6fe      	b.n	8001294 <__divdi3+0x6c>
 8001496:	4613      	mov	r3, r2
 8001498:	e711      	b.n	80012be <__divdi3+0x96>
 800149a:	4094      	lsls	r4, r2
 800149c:	4544      	cmp	r4, r8
 800149e:	d2f6      	bcs.n	800148e <__divdi3+0x266>
 80014a0:	3b01      	subs	r3, #1
 80014a2:	e7f4      	b.n	800148e <__divdi3+0x266>
 80014a4:	4603      	mov	r3, r0
 80014a6:	e7ea      	b.n	800147e <__divdi3+0x256>
 80014a8:	4688      	mov	r8, r1
 80014aa:	e7a5      	b.n	80013f8 <__divdi3+0x1d0>
 80014ac:	46c8      	mov	r8, r9
 80014ae:	e7d1      	b.n	8001454 <__divdi3+0x22c>
 80014b0:	4602      	mov	r2, r0
 80014b2:	e78c      	b.n	80013ce <__divdi3+0x1a6>
 80014b4:	4613      	mov	r3, r2
 80014b6:	e70a      	b.n	80012ce <__divdi3+0xa6>
 80014b8:	3b02      	subs	r3, #2
 80014ba:	e757      	b.n	800136c <__divdi3+0x144>
 80014bc:	f1a8 0802 	sub.w	r8, r8, #2
 80014c0:	442f      	add	r7, r5
 80014c2:	e73f      	b.n	8001344 <__divdi3+0x11c>

080014c4 <__udivdi3>:
 80014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d144      	bne.n	8001556 <__udivdi3+0x92>
 80014cc:	428a      	cmp	r2, r1
 80014ce:	4615      	mov	r5, r2
 80014d0:	4604      	mov	r4, r0
 80014d2:	d94f      	bls.n	8001574 <__udivdi3+0xb0>
 80014d4:	fab2 f782 	clz	r7, r2
 80014d8:	460e      	mov	r6, r1
 80014da:	b14f      	cbz	r7, 80014f0 <__udivdi3+0x2c>
 80014dc:	f1c7 0320 	rsb	r3, r7, #32
 80014e0:	40b9      	lsls	r1, r7
 80014e2:	fa20 f603 	lsr.w	r6, r0, r3
 80014e6:	fa02 f507 	lsl.w	r5, r2, r7
 80014ea:	430e      	orrs	r6, r1
 80014ec:	fa00 f407 	lsl.w	r4, r0, r7
 80014f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80014f4:	0c23      	lsrs	r3, r4, #16
 80014f6:	fbb6 f0fe 	udiv	r0, r6, lr
 80014fa:	b2af      	uxth	r7, r5
 80014fc:	fb0e 6110 	mls	r1, lr, r0, r6
 8001500:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001504:	fb07 f100 	mul.w	r1, r7, r0
 8001508:	4299      	cmp	r1, r3
 800150a:	d909      	bls.n	8001520 <__udivdi3+0x5c>
 800150c:	195b      	adds	r3, r3, r5
 800150e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001512:	f080 80ec 	bcs.w	80016ee <__udivdi3+0x22a>
 8001516:	4299      	cmp	r1, r3
 8001518:	f240 80e9 	bls.w	80016ee <__udivdi3+0x22a>
 800151c:	3802      	subs	r0, #2
 800151e:	442b      	add	r3, r5
 8001520:	1a5a      	subs	r2, r3, r1
 8001522:	b2a4      	uxth	r4, r4
 8001524:	fbb2 f3fe 	udiv	r3, r2, lr
 8001528:	fb0e 2213 	mls	r2, lr, r3, r2
 800152c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8001530:	fb07 f703 	mul.w	r7, r7, r3
 8001534:	4297      	cmp	r7, r2
 8001536:	d908      	bls.n	800154a <__udivdi3+0x86>
 8001538:	1952      	adds	r2, r2, r5
 800153a:	f103 31ff 	add.w	r1, r3, #4294967295
 800153e:	f080 80d8 	bcs.w	80016f2 <__udivdi3+0x22e>
 8001542:	4297      	cmp	r7, r2
 8001544:	f240 80d5 	bls.w	80016f2 <__udivdi3+0x22e>
 8001548:	3b02      	subs	r3, #2
 800154a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800154e:	2600      	movs	r6, #0
 8001550:	4631      	mov	r1, r6
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001556:	428b      	cmp	r3, r1
 8001558:	d847      	bhi.n	80015ea <__udivdi3+0x126>
 800155a:	fab3 f683 	clz	r6, r3
 800155e:	2e00      	cmp	r6, #0
 8001560:	d148      	bne.n	80015f4 <__udivdi3+0x130>
 8001562:	428b      	cmp	r3, r1
 8001564:	d302      	bcc.n	800156c <__udivdi3+0xa8>
 8001566:	4282      	cmp	r2, r0
 8001568:	f200 80cd 	bhi.w	8001706 <__udivdi3+0x242>
 800156c:	2001      	movs	r0, #1
 800156e:	4631      	mov	r1, r6
 8001570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001574:	b912      	cbnz	r2, 800157c <__udivdi3+0xb8>
 8001576:	2501      	movs	r5, #1
 8001578:	fbb5 f5f2 	udiv	r5, r5, r2
 800157c:	fab5 f885 	clz	r8, r5
 8001580:	f1b8 0f00 	cmp.w	r8, #0
 8001584:	d177      	bne.n	8001676 <__udivdi3+0x1b2>
 8001586:	1b4a      	subs	r2, r1, r5
 8001588:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800158c:	b2af      	uxth	r7, r5
 800158e:	2601      	movs	r6, #1
 8001590:	fbb2 f0fe 	udiv	r0, r2, lr
 8001594:	0c23      	lsrs	r3, r4, #16
 8001596:	fb0e 2110 	mls	r1, lr, r0, r2
 800159a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800159e:	fb07 f300 	mul.w	r3, r7, r0
 80015a2:	428b      	cmp	r3, r1
 80015a4:	d907      	bls.n	80015b6 <__udivdi3+0xf2>
 80015a6:	1949      	adds	r1, r1, r5
 80015a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80015ac:	d202      	bcs.n	80015b4 <__udivdi3+0xf0>
 80015ae:	428b      	cmp	r3, r1
 80015b0:	f200 80ba 	bhi.w	8001728 <__udivdi3+0x264>
 80015b4:	4610      	mov	r0, r2
 80015b6:	1ac9      	subs	r1, r1, r3
 80015b8:	b2a4      	uxth	r4, r4
 80015ba:	fbb1 f3fe 	udiv	r3, r1, lr
 80015be:	fb0e 1113 	mls	r1, lr, r3, r1
 80015c2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80015c6:	fb07 f703 	mul.w	r7, r7, r3
 80015ca:	42a7      	cmp	r7, r4
 80015cc:	d908      	bls.n	80015e0 <__udivdi3+0x11c>
 80015ce:	1964      	adds	r4, r4, r5
 80015d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80015d4:	f080 808f 	bcs.w	80016f6 <__udivdi3+0x232>
 80015d8:	42a7      	cmp	r7, r4
 80015da:	f240 808c 	bls.w	80016f6 <__udivdi3+0x232>
 80015de:	3b02      	subs	r3, #2
 80015e0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80015e4:	4631      	mov	r1, r6
 80015e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ea:	2600      	movs	r6, #0
 80015ec:	4630      	mov	r0, r6
 80015ee:	4631      	mov	r1, r6
 80015f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f4:	f1c6 0420 	rsb	r4, r6, #32
 80015f8:	fa22 f504 	lsr.w	r5, r2, r4
 80015fc:	40b3      	lsls	r3, r6
 80015fe:	432b      	orrs	r3, r5
 8001600:	fa20 fc04 	lsr.w	ip, r0, r4
 8001604:	fa01 f706 	lsl.w	r7, r1, r6
 8001608:	fa21 f504 	lsr.w	r5, r1, r4
 800160c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001610:	ea4c 0707 	orr.w	r7, ip, r7
 8001614:	fbb5 f8fe 	udiv	r8, r5, lr
 8001618:	0c39      	lsrs	r1, r7, #16
 800161a:	fb0e 5518 	mls	r5, lr, r8, r5
 800161e:	fa1f fc83 	uxth.w	ip, r3
 8001622:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8001626:	fb0c f108 	mul.w	r1, ip, r8
 800162a:	42a9      	cmp	r1, r5
 800162c:	fa02 f206 	lsl.w	r2, r2, r6
 8001630:	d904      	bls.n	800163c <__udivdi3+0x178>
 8001632:	18ed      	adds	r5, r5, r3
 8001634:	f108 34ff 	add.w	r4, r8, #4294967295
 8001638:	d367      	bcc.n	800170a <__udivdi3+0x246>
 800163a:	46a0      	mov	r8, r4
 800163c:	1a6d      	subs	r5, r5, r1
 800163e:	b2bf      	uxth	r7, r7
 8001640:	fbb5 f4fe 	udiv	r4, r5, lr
 8001644:	fb0e 5514 	mls	r5, lr, r4, r5
 8001648:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800164c:	fb0c fc04 	mul.w	ip, ip, r4
 8001650:	458c      	cmp	ip, r1
 8001652:	d904      	bls.n	800165e <__udivdi3+0x19a>
 8001654:	18c9      	adds	r1, r1, r3
 8001656:	f104 35ff 	add.w	r5, r4, #4294967295
 800165a:	d35c      	bcc.n	8001716 <__udivdi3+0x252>
 800165c:	462c      	mov	r4, r5
 800165e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8001662:	ebcc 0101 	rsb	r1, ip, r1
 8001666:	fba4 2302 	umull	r2, r3, r4, r2
 800166a:	4299      	cmp	r1, r3
 800166c:	d348      	bcc.n	8001700 <__udivdi3+0x23c>
 800166e:	d044      	beq.n	80016fa <__udivdi3+0x236>
 8001670:	4620      	mov	r0, r4
 8001672:	2600      	movs	r6, #0
 8001674:	e76c      	b.n	8001550 <__udivdi3+0x8c>
 8001676:	f1c8 0420 	rsb	r4, r8, #32
 800167a:	fa01 f308 	lsl.w	r3, r1, r8
 800167e:	fa05 f508 	lsl.w	r5, r5, r8
 8001682:	fa20 f704 	lsr.w	r7, r0, r4
 8001686:	40e1      	lsrs	r1, r4
 8001688:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800168c:	431f      	orrs	r7, r3
 800168e:	fbb1 f6fe 	udiv	r6, r1, lr
 8001692:	0c3a      	lsrs	r2, r7, #16
 8001694:	fb0e 1116 	mls	r1, lr, r6, r1
 8001698:	fa1f fc85 	uxth.w	ip, r5
 800169c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80016a0:	fb0c f206 	mul.w	r2, ip, r6
 80016a4:	429a      	cmp	r2, r3
 80016a6:	fa00 f408 	lsl.w	r4, r0, r8
 80016aa:	d907      	bls.n	80016bc <__udivdi3+0x1f8>
 80016ac:	195b      	adds	r3, r3, r5
 80016ae:	f106 31ff 	add.w	r1, r6, #4294967295
 80016b2:	d237      	bcs.n	8001724 <__udivdi3+0x260>
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d935      	bls.n	8001724 <__udivdi3+0x260>
 80016b8:	3e02      	subs	r6, #2
 80016ba:	442b      	add	r3, r5
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	b2bf      	uxth	r7, r7
 80016c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80016c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80016c8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80016cc:	fb0c f100 	mul.w	r1, ip, r0
 80016d0:	4299      	cmp	r1, r3
 80016d2:	d907      	bls.n	80016e4 <__udivdi3+0x220>
 80016d4:	195b      	adds	r3, r3, r5
 80016d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80016da:	d221      	bcs.n	8001720 <__udivdi3+0x25c>
 80016dc:	4299      	cmp	r1, r3
 80016de:	d91f      	bls.n	8001720 <__udivdi3+0x25c>
 80016e0:	3802      	subs	r0, #2
 80016e2:	442b      	add	r3, r5
 80016e4:	1a5a      	subs	r2, r3, r1
 80016e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80016ea:	4667      	mov	r7, ip
 80016ec:	e750      	b.n	8001590 <__udivdi3+0xcc>
 80016ee:	4610      	mov	r0, r2
 80016f0:	e716      	b.n	8001520 <__udivdi3+0x5c>
 80016f2:	460b      	mov	r3, r1
 80016f4:	e729      	b.n	800154a <__udivdi3+0x86>
 80016f6:	4613      	mov	r3, r2
 80016f8:	e772      	b.n	80015e0 <__udivdi3+0x11c>
 80016fa:	40b0      	lsls	r0, r6
 80016fc:	4290      	cmp	r0, r2
 80016fe:	d2b7      	bcs.n	8001670 <__udivdi3+0x1ac>
 8001700:	1e60      	subs	r0, r4, #1
 8001702:	2600      	movs	r6, #0
 8001704:	e724      	b.n	8001550 <__udivdi3+0x8c>
 8001706:	4630      	mov	r0, r6
 8001708:	e722      	b.n	8001550 <__udivdi3+0x8c>
 800170a:	42a9      	cmp	r1, r5
 800170c:	d995      	bls.n	800163a <__udivdi3+0x176>
 800170e:	f1a8 0802 	sub.w	r8, r8, #2
 8001712:	441d      	add	r5, r3
 8001714:	e792      	b.n	800163c <__udivdi3+0x178>
 8001716:	458c      	cmp	ip, r1
 8001718:	d9a0      	bls.n	800165c <__udivdi3+0x198>
 800171a:	3c02      	subs	r4, #2
 800171c:	4419      	add	r1, r3
 800171e:	e79e      	b.n	800165e <__udivdi3+0x19a>
 8001720:	4610      	mov	r0, r2
 8001722:	e7df      	b.n	80016e4 <__udivdi3+0x220>
 8001724:	460e      	mov	r6, r1
 8001726:	e7c9      	b.n	80016bc <__udivdi3+0x1f8>
 8001728:	3802      	subs	r0, #2
 800172a:	4429      	add	r1, r5
 800172c:	e743      	b.n	80015b6 <__udivdi3+0xf2>
 800172e:	bf00      	nop

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001730:	f8df d030 	ldr.w	sp, [pc, #48]	; 8001764 <LoopFillZerobss+0x10>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001734:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001736:	e003      	b.n	8001740 <LoopCopyDataInit>

08001738 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800173a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800173c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800173e:	3104      	adds	r1, #4

08001740 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001744:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001746:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001748:	d3f6      	bcc.n	8001738 <CopyDataInit>
  ldr  r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800174c:	e002      	b.n	8001754 <LoopFillZerobss>

0800174e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800174e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001750:	f842 3b04 	str.w	r3, [r2], #4

08001754 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001756:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001758:	d3f9      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800175a:	f000 f811 	bl	8001780 <SystemInit>
/* Call static constructors */
   /* bl __libc_init_array */
/* Call the application's entry point.*/
  bl  main
 800175e:	f000 f9b5 	bl	8001acc <main>
  bx  lr    
 8001762:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001764:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001768:	080357bc 	.word	0x080357bc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001770:	20000c0c 	.word	0x20000c0c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001774:	2000d410 	.word	0x2000d410
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001778:	2000ec60 	.word	0x2000ec60

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
	printf("FPU used");
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <SystemInit+0x34>)
 8001782:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001784:	2100      	movs	r1, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
	printf("FPU used");
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800178c:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001794:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001798:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <SystemInit+0x38>)
 800179c:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017a6:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SystemInit+0x3c>)
 80017aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	24003010 	.word	0x24003010
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <delay_msec>:
  * @retval	None
  */
void delay_msec(uint32_t msec){
  uint32_t target;
  
  target = msec_counter + msec;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <delay_msec+0x10>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4410      	add	r0, r2
  while(msec_counter < target){
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4282      	cmp	r2, r0
 80017ca:	d3fc      	bcc.n	80017c6 <delay_msec+0x6>
  	;
  }
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000d41c 	.word	0x2000d41c

080017d4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80017d4:	4770      	bx	lr

080017d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler>

080017d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler>

080017da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80017da:	e7fe      	b.n	80017da <BusFault_Handler>

080017dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler>

080017de <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80017e4:	b508      	push	{r3, lr}
	HAL_IncTick();
 80017e6:	f007 f947 	bl	8008a78 <HAL_IncTick>
	
	Timeout_Timer_0++;
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <SysTick_Handler+0x68>)
 80017ec:	6813      	ldr	r3, [r2, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	6013      	str	r3, [r2, #0]
  
	//---------------------------
	// msec counter
	//---------------------------
	msec_counter++;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <SysTick_Handler+0x6c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	3201      	adds	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
	switch(msec_counter % 25){
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	2219      	movs	r2, #25
 80017fe:	fbb0 f1f2 	udiv	r1, r0, r2
 8001802:	fb02 0211 	mls	r2, r2, r1, r0
 8001806:	b912      	cbnz	r2, 800180e <SysTick_Handler+0x2a>
		case 0:
			gui_Exec = true;
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <SysTick_Handler+0x70>)
 800180a:	2101      	movs	r1, #1
 800180c:	7011      	strb	r1, [r2, #0]
			break;
			
		default:
			break;
	}
	switch(msec_counter % 50){
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	2232      	movs	r2, #50	; 0x32
 8001812:	fbb0 f1f2 	udiv	r1, r0, r2
 8001816:	fb02 0211 	mls	r2, r2, r1, r0
 800181a:	b912      	cbnz	r2, 8001822 <SysTick_Handler+0x3e>
		case 0:
			modbus_Exec = true;
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <SysTick_Handler+0x74>)
 800181e:	2101      	movs	r1, #1
 8001820:	7011      	strb	r1, [r2, #0]
			break;
			
		default:
			break;
	}
	switch(msec_counter % 1000){
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001828:	fbb1 f2f3 	udiv	r2, r1, r3
 800182c:	fb03 1312 	mls	r3, r3, r2, r1
 8001830:	b913      	cbnz	r3, 8001838 <SysTick_Handler+0x54>
		case 0:
			log_exec = true;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <SysTick_Handler+0x78>)
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
	}

	//---------------------------
	// Touch-Timer
	//---------------------------
	touch_timer++;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <SysTick_Handler+0x7c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	3201      	adds	r2, #1
 800183e:	601a      	str	r2, [r3, #0]
	switch(touch_timer % 1){
 8001840:	681b      	ldr	r3, [r3, #0]
		case 0:
			Update_Touch = true;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <SysTick_Handler+0x80>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	bd08      	pop	{r3, pc}
 800184a:	bf00      	nop
 800184c:	2000d414 	.word	0x2000d414
 8001850:	2000d41c 	.word	0x2000d41c
 8001854:	2000d421 	.word	0x2000d421
 8001858:	2000d420 	.word	0x2000d420
 800185c:	2000d422 	.word	0x2000d422
 8001860:	2000d418 	.word	0x2000d418
 8001864:	2000d410 	.word	0x2000d410

08001868 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
	BSP_SD_DMA_Rx_IRQHandler();
 8001868:	f000 bcc6 	b.w	80021f8 <BSP_SD_DMA_Rx_IRQHandler>

0800186c <DMA2_Stream6_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
	BSP_SD_DMA_Tx_IRQHandler(); 
 800186c:	f000 bcbe 	b.w	80021ec <BSP_SD_DMA_Tx_IRQHandler>

08001870 <SDIO_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDIO_IRQHandler(void)
{
	BSP_SD_IRQHandler();
 8001870:	f000 bcb6 	b.w	80021e0 <BSP_SD_IRQHandler>

08001874 <EXTI2_IRQHandler>:

/**
* @brief This function handles EXTI Line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
 8001874:	b508      	push	{r3, lr}
	Touch_Flagged = true;
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <EXTI2_IRQHandler+0x18>)
 8001878:	2201      	movs	r2, #1
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800187a:	2004      	movs	r0, #4
/**
* @brief This function handles EXTI Line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
	Touch_Flagged = true;
 800187c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800187e:	f007 f8c7 	bl	8008a10 <HAL_GPIO_EXTI_IRQHandler>
	
	printf("Touched...\n");
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <EXTI2_IRQHandler+0x1c>)
}
 8001884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void EXTI2_IRQHandler(void)
{
	Touch_Flagged = true;
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
	
	printf("Touched...\n");
 8001888:	f017 bf44 	b.w	8019714 <puts>
 800188c:	2000d423 	.word	0x2000d423
 8001890:	0801fe20 	.word	0x0801fe20

08001894 <Debug_ITMDebugEnable>:
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      	= (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;
	
	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <Debug_ITMDebugEnable+0x24>)
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800189c:	6013      	str	r3, [r2, #0]
	
	if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <Debug_ITMDebugEnable+0x28>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	07da      	lsls	r2, r3, #31
 80018a4:	d506      	bpl.n	80018b4 <Debug_ITMDebugEnable+0x20>
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <Debug_ITMDebugEnable+0x2c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	07db      	lsls	r3, r3, #31
    Debug_ITMDebug = 1;
 80018ac:	bf42      	ittt	mi
 80018ae:	4b05      	ldrmi	r3, [pc, #20]	; (80018c4 <Debug_ITMDebugEnable+0x30>)
 80018b0:	2201      	movmi	r2, #1
 80018b2:	601a      	strmi	r2, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e0042004 	.word	0xe0042004
 80018bc:	e000edf0 	.word	0xe000edf0
 80018c0:	e0000e00 	.word	0xe0000e00
 80018c4:	2000d470 	.word	0x2000d470

080018c8 <Debug_ITMDebugOutputChar>:

void Debug_ITMDebugOutputChar(char ch){
	static volatile unsigned int *ITM_STIM0 = (volatile unsigned int *)0xE0000000; // ITM Port 0
	static volatile unsigned int *SCB_DEMCR = (volatile unsigned int *)0xE000EDFC;
	
	if (Debug_ITMDebug && (*SCB_DEMCR & 0x01000000))
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <Debug_ITMDebugOutputChar+0x1c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b14b      	cbz	r3, 80018e2 <Debug_ITMDebugOutputChar+0x1a>
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <Debug_ITMDebugOutputChar+0x20>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	01db      	lsls	r3, r3, #7
 80018d4:	d505      	bpl.n	80018e2 <Debug_ITMDebugOutputChar+0x1a>
	{
		while(*ITM_STIM0 == 0);
 80018d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d0fa      	beq.n	80018d6 <Debug_ITMDebugOutputChar+0xe>
		*((volatile char *)ITM_STIM0) = ch;
 80018e0:	7018      	strb	r0, [r3, #0]
 80018e2:	4770      	bx	lr
 80018e4:	2000d470 	.word	0x2000d470
 80018e8:	e000edfc 	.word	0xe000edfc

080018ec <Debug_ITMDebugOutputString>:
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <Debug_ITMDebugOutputString+0x18>)
 80018ee:	681b      	ldr	r3, [r3, #0]
	}
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
 80018f0:	b510      	push	{r4, lr}
	if (Debug_ITMDebug)
 80018f2:	b133      	cbz	r3, 8001902 <Debug_ITMDebugOutputString+0x16>
 80018f4:	1e44      	subs	r4, r0, #1
	while(*Buffer)
 80018f6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80018fa:	b110      	cbz	r0, 8001902 <Debug_ITMDebugOutputString+0x16>
	Debug_ITMDebugOutputChar(*Buffer++);
 80018fc:	f7ff ffe4 	bl	80018c8 <Debug_ITMDebugOutputChar>
 8001900:	e7f9      	b.n	80018f6 <Debug_ITMDebugOutputString+0xa>
 8001902:	bd10      	pop	{r4, pc}
 8001904:	2000d470 	.word	0x2000d470

08001908 <eMBRegInputCB>:
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;
	
	/* it already plus one in modbus function method. */
    usAddress--;
 8001908:	3901      	subs	r1, #1
 800190a:	b289      	uxth	r1, r1
	
    if( (usAddress >= S_REG_INPUT_START)
	&& (usAddress + usNRegs <= S_REG_INPUT_START + S_REG_INPUT_NREGS))
 800190c:	188b      	adds	r3, r1, r2
    int             iRegIndex;
	
	/* it already plus one in modbus function method. */
    usAddress--;
	
    if( (usAddress >= S_REG_INPUT_START)
 800190e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
	* @param	usNRegs
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
 8001912:	b530      	push	{r4, r5, lr}
    int             iRegIndex;
	
	/* it already plus one in modbus function method. */
    usAddress--;
	
    if( (usAddress >= S_REG_INPUT_START)
 8001914:	dc11      	bgt.n	800193a <eMBRegInputCB+0x32>
 8001916:	2300      	movs	r3, #0
	&& (usAddress + usNRegs <= S_REG_INPUT_START + S_REG_INPUT_NREGS))
    {
        iRegIndex = (int)(usAddress - usRegInputStart);
        while( usNRegs > 0 )
 8001918:	4293      	cmp	r3, r2
 800191a:	f100 0002 	add.w	r0, r0, #2
 800191e:	d00a      	beq.n	8001936 <eMBRegInputCB+0x2e>
 8001920:	185d      	adds	r5, r3, r1
        {
            *pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] >> 8);
 8001922:	4c07      	ldr	r4, [pc, #28]	; (8001940 <eMBRegInputCB+0x38>)
 8001924:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
            *pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] & 0xFF);
 8001928:	f800 4c01 	strb.w	r4, [r0, #-1]
	&& (usAddress + usNRegs <= S_REG_INPUT_START + S_REG_INPUT_NREGS))
    {
        iRegIndex = (int)(usAddress - usRegInputStart);
        while( usNRegs > 0 )
        {
            *pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] >> 8);
 800192c:	0a25      	lsrs	r5, r4, #8
 800192e:	f800 5c02 	strb.w	r5, [r0, #-2]
 8001932:	3301      	adds	r3, #1
 8001934:	e7f0      	b.n	8001918 <eMBRegInputCB+0x10>
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8001936:	2000      	movs	r0, #0
 8001938:	bd30      	pop	{r4, r5, pc}
            usNRegs--;
		}
	}
    else
    {
        eStatus = MB_ENOREG;
 800193a:	2001      	movs	r0, #1
	}
	
    return eStatus;
}
 800193c:	bd30      	pop	{r4, r5, pc}
 800193e:	bf00      	nop
 8001940:	2000d924 	.word	0x2000d924

08001944 <eMBRegHoldingCB>:
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 8001944:	b570      	push	{r4, r5, r6, lr}
    REG_HOLDING_START = S_REG_HOLDING_START;
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
    usRegHoldStart = usSRegHoldStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 8001946:	1e4c      	subs	r4, r1, #1
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 8001948:	461d      	mov	r5, r3
    REG_HOLDING_START = S_REG_HOLDING_START;
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
    usRegHoldStart = usSRegHoldStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 800194a:	b2a3      	uxth	r3, r4
	
    if ((usAddress >= REG_HOLDING_START)
	&& (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 800194c:	189c      	adds	r4, r3, r2
 800194e:	f5b4 7f16 	cmp.w	r4, #600	; 0x258
 8001952:	dc2c      	bgt.n	80019ae <eMBRegHoldingCB+0x6a>
    {
        iRegIndex = usAddress - usRegHoldStart;
        switch (eMode)
 8001954:	b125      	cbz	r5, 8001960 <eMBRegHoldingCB+0x1c>
 8001956:	2d01      	cmp	r5, #1
 8001958:	d12b      	bne.n	80019b2 <eMBRegHoldingCB+0x6e>
 800195a:	440a      	add	r2, r1
 800195c:	b292      	uxth	r2, r2
 800195e:	e013      	b.n	8001988 <eMBRegHoldingCB+0x44>
 8001960:	440a      	add	r2, r1
 8001962:	b292      	uxth	r2, r2
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	b289      	uxth	r1, r1
        {
			/* read current register values from the protocol stack. */
			case MB_REG_READ:
            while (usNRegs > 0)
 8001968:	4291      	cmp	r1, r2
 800196a:	f100 0002 	add.w	r0, r0, #2
 800196e:	d020      	beq.n	80019b2 <eMBRegHoldingCB+0x6e>
            {
                *pucRegBuffer++ = (uint8_t) (pusRegHoldingBuf[iRegIndex] >> 8);
 8001970:	4d11      	ldr	r5, [pc, #68]	; (80019b8 <eMBRegHoldingCB+0x74>)
 8001972:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8001976:	0a24      	lsrs	r4, r4, #8
 8001978:	f800 4c02 	strb.w	r4, [r0, #-2]
                *pucRegBuffer++ = (uint8_t) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 800197c:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8001980:	f800 3c01 	strb.w	r3, [r0, #-1]
 8001984:	460b      	mov	r3, r1
 8001986:	e7ed      	b.n	8001964 <eMBRegHoldingCB+0x20>
 8001988:	1c59      	adds	r1, r3, #1
 800198a:	b289      	uxth	r1, r1
			}
            break;
			
			/* write current register values with new values from the protocol stack. */
			case MB_REG_WRITE:
            while (usNRegs > 0)
 800198c:	4291      	cmp	r1, r2
 800198e:	f100 0002 	add.w	r0, r0, #2
 8001992:	d00e      	beq.n	80019b2 <eMBRegHoldingCB+0x6e>
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001994:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001998:	4e07      	ldr	r6, [pc, #28]	; (80019b8 <eMBRegHoldingCB+0x74>)
 800199a:	0224      	lsls	r4, r4, #8
 800199c:	f826 4013 	strh.w	r4, [r6, r3, lsl #1]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 80019a0:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80019a4:	432c      	orrs	r4, r5
 80019a6:	f826 4013 	strh.w	r4, [r6, r3, lsl #1]
 80019aa:	460b      	mov	r3, r1
 80019ac:	e7ec      	b.n	8001988 <eMBRegHoldingCB+0x44>
            break;
		}
	}
    else
    {
        eStatus = MB_ENOREG;
 80019ae:	2001      	movs	r0, #1
 80019b0:	bd70      	pop	{r4, r5, r6, pc}
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 80019b2:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_ENOREG;
	}
    return eStatus;
}
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
 80019b6:	bf00      	nop
 80019b8:	2000d474 	.word	0x2000d474

080019bc <eMBRegCoilsCB>:
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 80019bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t          iRegIndex , iRegBitIndex , iNReg;
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
 80019c0:	ea4f 09d2 	mov.w	r9, r2, lsr #3
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 80019c4:	460d      	mov	r5, r1
 80019c6:	4607      	mov	r7, r0
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
	printf("usNCoils: %d\n", usNCoils);
 80019c8:	4611      	mov	r1, r2
 80019ca:	4832      	ldr	r0, [pc, #200]	; (8001a94 <eMBRegCoilsCB+0xd8>)
    uint16_t          iRegIndex , iRegBitIndex , iNReg;
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
 80019cc:	f109 0801 	add.w	r8, r9, #1
    COIL_START = S_COIL_START;
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 80019d0:	3d01      	subs	r5, #1
	* @param	eMode
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 80019d2:	4614      	mov	r4, r2
 80019d4:	469a      	mov	sl, r3
    COIL_START = S_COIL_START;
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
 80019d6:	b2ad      	uxth	r5, r5
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
    iNReg =  (usNCoils / 8) + 1;
	printf("usNCoils: %d\n", usNCoils);
 80019d8:	f017 fe5a 	bl	8019690 <printf>
	printf("iNReg: %d\n", iNReg);
 80019dc:	fa1f f188 	uxth.w	r1, r8
 80019e0:	482d      	ldr	r0, [pc, #180]	; (8001a98 <eMBRegCoilsCB+0xdc>)
 80019e2:	f017 fe55 	bl	8019690 <printf>
    COIL_NCOILS = S_COIL_NCOILS;
    usCoilStart = usSCoilStart;
	
    /* it already plus one in modbus function method. */
    usAddress--;
	printf("usAddress: %d\n", usAddress);
 80019e6:	482d      	ldr	r0, [pc, #180]	; (8001a9c <eMBRegCoilsCB+0xe0>)
 80019e8:	4629      	mov	r1, r5
 80019ea:	f017 fe51 	bl	8019690 <printf>
	
    if( (usAddress >= COIL_START) &&
	(usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 80019ee:	192b      	adds	r3, r5, r4
	
    /* it already plus one in modbus function method. */
    usAddress--;
	printf("usAddress: %d\n", usAddress);
	
    if( (usAddress >= COIL_START) &&
 80019f0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80019f4:	dc4b      	bgt.n	8001a8e <eMBRegCoilsCB+0xd2>
	(usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
 80019f6:	08ee      	lsrs	r6, r5, #3
        iRegBitIndex = (uint16_t) (usAddress - usCoilStart) % 8;
		printf("iRegIndex: %d\n", iRegIndex);
 80019f8:	4631      	mov	r1, r6
 80019fa:	4829      	ldr	r0, [pc, #164]	; (8001aa0 <eMBRegCoilsCB+0xe4>)
		printf("iRegBitIndex: %d\n", iRegBitIndex);
 80019fc:	f005 0507 	and.w	r5, r5, #7
    if( (usAddress >= COIL_START) &&
	(usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
        iRegBitIndex = (uint16_t) (usAddress - usCoilStart) % 8;
		printf("iRegIndex: %d\n", iRegIndex);
 8001a00:	f017 fe46 	bl	8019690 <printf>
		printf("iRegBitIndex: %d\n", iRegBitIndex);
 8001a04:	4827      	ldr	r0, [pc, #156]	; (8001aa4 <eMBRegCoilsCB+0xe8>)
 8001a06:	4629      	mov	r1, r5
 8001a08:	f017 fe42 	bl	8019690 <printf>
        switch (eMode)
 8001a0c:	f1ba 0f00 	cmp.w	sl, #0
 8001a10:	d006      	beq.n	8001a20 <eMBRegCoilsCB+0x64>
 8001a12:	f1ba 0f01 	cmp.w	sl, #1
 8001a16:	d11c      	bne.n	8001a52 <eMBRegCoilsCB+0x96>
 8001a18:	eb09 0b06 	add.w	fp, r9, r6
 8001a1c:	46ba      	mov	sl, r7
 8001a1e:	e01b      	b.n	8001a58 <eMBRegCoilsCB+0x9c>
 8001a20:	44b8      	add	r8, r7
 8001a22:	46b9      	mov	r9, r7
 8001a24:	1bf3      	subs	r3, r6, r7
        {
			/* read current coil values from the protocol stack. */
			case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8001a26:	4820      	ldr	r0, [pc, #128]	; (8001aa8 <eMBRegCoilsCB+0xec>)
 8001a28:	444b      	add	r3, r9
 8001a2a:	fa10 f083 	uxtah	r0, r0, r3
 8001a2e:	4629      	mov	r1, r5
 8001a30:	2208      	movs	r2, #8
 8001a32:	f002 f957 	bl	8003ce4 <xMBUtilGetBits>
 8001a36:	b2c0      	uxtb	r0, r0
 8001a38:	f809 0b01 	strb.w	r0, [r9], #1
		printf("iRegBitIndex: %d\n", iRegBitIndex);
        switch (eMode)
        {
			/* read current coil values from the protocol stack. */
			case MB_REG_READ:
            while (iNReg > 0)
 8001a3c:	45c1      	cmp	r9, r8
 8001a3e:	d1f1      	bne.n	8001a24 <eMBRegCoilsCB+0x68>
			}
            pucRegBuffer--;
            /* last coils */
            usNCoils = usNCoils % 8;
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8001a40:	f004 0407 	and.w	r4, r4, #7
 8001a44:	f1c4 0408 	rsb	r4, r4, #8
 8001a48:	40a0      	lsls	r0, r4
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8001a4a:	b2c0      	uxtb	r0, r0
 8001a4c:	4120      	asrs	r0, r4
 8001a4e:	f809 0c01 	strb.w	r0, [r9, #-1]
	* @retval	eMBErrorCode
*/
eMBErrorCode
eMBRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8001a52:	2000      	movs	r0, #0
            /* last coils */
            usNCoils = usNCoils % 8;
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;
 8001a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			
            /* write current coil values with new values from the protocol stack. */
			case MB_REG_WRITE:
            while (iNReg > 1)
 8001a58:	455e      	cmp	r6, fp
 8001a5a:	d00d      	beq.n	8001a78 <eMBRegCoilsCB+0xbc>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8001a5c:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <eMBRegCoilsCB+0xec>)
 8001a5e:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8001a62:	f106 0801 	add.w	r8, r6, #1
 8001a66:	4430      	add	r0, r6
 8001a68:	fa1f f888 	uxth.w	r8, r8
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	2208      	movs	r2, #8
 8001a70:	f002 f912 	bl	8003c98 <xMBUtilSetBits>
 8001a74:	4646      	mov	r6, r8
 8001a76:	e7ef      	b.n	8001a58 <eMBRegCoilsCB+0x9c>
                iNReg--;
			}
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8001a78:	f014 0207 	ands.w	r2, r4, #7
 8001a7c:	d0e9      	beq.n	8001a52 <eMBRegCoilsCB+0x96>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8001a7e:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <eMBRegCoilsCB+0xec>)
 8001a80:	f817 3009 	ldrb.w	r3, [r7, r9]
 8001a84:	4430      	add	r0, r6
 8001a86:	4629      	mov	r1, r5
 8001a88:	f002 f906 	bl	8003c98 <xMBUtilSetBits>
 8001a8c:	e7e1      	b.n	8001a52 <eMBRegCoilsCB+0x96>
            break;
		}
	}
    else
    {
        eStatus = MB_ENOREG;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a94:	0801fe2b 	.word	0x0801fe2b
 8001a98:	0801fe39 	.word	0x0801fe39
 8001a9c:	0801fe44 	.word	0x0801fe44
 8001aa0:	0801fe53 	.word	0x0801fe53
 8001aa4:	0801fe62 	.word	0x0801fe62
 8001aa8:	2000d424 	.word	0x2000d424

08001aac <eMBRegDiscreteCB>:
{
    ( void )pucRegBuffer;
    ( void )usAddress;
    ( void )usNDiscrete;
    return MB_ENOREG;
}
 8001aac:	2001      	movs	r0, #1
 8001aae:	4770      	bx	lr

08001ab0 <Error_Handler>:
/**
	* @brief	Handles general errors.
	* @param	None
	* @retval	None
*/
void Error_Handler(void){
 8001ab0:	b508      	push	{r3, lr}
	
	while(1){
		/* Put error on LED3 */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001ab2:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <Error_Handler+0x14>)
 8001ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab8:	f006 ff98 	bl	80089ec <HAL_GPIO_TogglePin>
		printf("Peripheral config error\n");
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <Error_Handler+0x18>)
 8001abe:	f017 fe29 	bl	8019714 <puts>
	}
 8001ac2:	e7f6      	b.n	8001ab2 <Error_Handler+0x2>
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	0801fe74 	.word	0x0801fe74

08001acc <main>:
	* 			Update GUI every 10ms
	* 			Update Touch every 1ms
	* 			return from callee.
	* @retval	None
*/
int main(void){
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b0a5      	sub	sp, #148	; 0x94
	/* STM32f4xx HAL library initialization:
		- Cofigure Flash prefetch, flash preread and Buffer caches
		- Systick timer config
		- Low level init
	*/
	HAL_Init();
 8001ad0:	f006 ffbc 	bl	8008a4c <HAL_Init>
static void SystemClock_Config(void){
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	
	/* Enable Power control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <main+0x208>)
 8001ad6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
	
	/* The voltage scaling allows optimizing the power consumption when the
		device is clocked below the maximum system frequency, to update the
		voltage scaling value regarding system frequency refer to product
	datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ade:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
	
	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae2:	2402      	movs	r4, #2
	
	/* The voltage scaling allows optimizing the power consumption when the
		device is clocked below the maximum system frequency, to update the
		voltage scaling value regarding system frequency refer to product
	datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aea:	6013      	str	r3, [r2, #0]
	
	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af0:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001af6:	931f      	str	r3, [sp, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001af8:	2319      	movs	r3, #25
 8001afa:	9320      	str	r3, [sp, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001afc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b00:	9321      	str	r3, [sp, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001b02:	a818      	add	r0, sp, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b04:	2307      	movs	r3, #7
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	
	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	941e      	str	r4, [sp, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b08:	9422      	str	r4, [sp, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b0a:	9323      	str	r3, [sp, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001b0c:	f002 fbd4 	bl	80042b8 <HAL_RCC_OscConfig>
 8001b10:	b108      	cbz	r0, 8001b16 <main+0x4a>
		/* Initialization Error */
		Error_Handler();
 8001b12:	f7ff ffcd 	bl	8001ab0 <Error_Handler>
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001b16:	230f      	movs	r3, #15
 8001b18:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1e:	9009      	str	r0, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b20:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8001b22:	a807      	add	r0, sp, #28
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8001b28:	2105      	movs	r1, #5
		Error_Handler();
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1
	and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2a:	9408      	str	r4, [sp, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b2c:	930b      	str	r3, [sp, #44]	; 0x2c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 8001b2e:	f002 fdc5 	bl	80046bc <HAL_RCC_ClockConfig>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d1ed      	bne.n	8001b12 <main+0x46>
		/* Initialization Error */
		Error_Handler();
	}
	
	/* STM32F407x Revision Z devices: prefetch is supported */
	if(HAL_GetREVID() == 0x1001){
 8001b36:	f006 ffbb 	bl	8008ab0 <HAL_GetREVID>
 8001b3a:	f241 0301 	movw	r3, #4097	; 0x1001
 8001b3e:	4298      	cmp	r0, r3
		/* Enable the Flash prefetch */
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	bf01      	itttt	eq
 8001b42:	4a65      	ldreq	r2, [pc, #404]	; (8001cd8 <main+0x20c>)
 8001b44:	6813      	ldreq	r3, [r2, #0]
 8001b46:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	streq	r3, [r2, #0]
	
	/* configure the system clock to 168 MHz */
	SystemClock_Config();
	
	/* Enable TRACE debug -----------------------------------------------*/
	Debug_ITMDebugEnable();
 8001b4c:	f7ff fea2 	bl	8001894 <Debug_ITMDebugEnable>
 	Debug_ITMDebugOutputString("SWV Enabled\n");
 8001b50:	4862      	ldr	r0, [pc, #392]	; (8001cdc <main+0x210>)
 8001b52:	f7ff fecb 	bl	80018ec <Debug_ITMDebugOutputString>
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
 8001b56:	4862      	ldr	r0, [pc, #392]	; (8001ce0 <main+0x214>)
	
	SRAM_Timing.AddressSetupTime       = 2;
 8001b58:	4962      	ldr	r1, [pc, #392]	; (8001ce4 <main+0x218>)
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
 8001b5a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
	
	hsram.Init.NSBank				= FMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux		= FMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType			= FMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b5e:	2210      	movs	r2, #16
	* @param None
	* @retval None
*/
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
 8001b60:	6003      	str	r3, [r0, #0]
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
	
	hsram.Init.NSBank				= FMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux		= FMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType			= FMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b62:	6142      	str	r2, [r0, #20]
	SRAM_Timing.AddressHoldTime        = 1;
	SRAM_Timing.DataSetupTime          = 2;
	SRAM_Timing.BusTurnAroundDuration  = 1;
	SRAM_Timing.CLKDivision            = 2;
	SRAM_Timing.DataLatency            = 2;
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
 8001b64:	2300      	movs	r3, #0
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode		= FMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity	= FMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode				= FMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive		= FMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation		= FMC_WRITE_OPERATION_ENABLE;
 8001b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
	
	SRAM_Timing.AddressSetupTime       = 2;
	SRAM_Timing.AddressHoldTime        = 1;
 8001b6a:	2502      	movs	r5, #2
 8001b6c:	2601      	movs	r6, #1
	SRAM_Timing.DataSetupTime          = 2;
	SRAM_Timing.BusTurnAroundDuration  = 1;
	SRAM_Timing.CLKDivision            = 2;
	SRAM_Timing.DataLatency            = 2;
	SRAM_Timing.AccessMode             = FMC_ACCESS_MODE_A;
 8001b6e:	618b      	str	r3, [r1, #24]
	
	hsram.Init.NSBank				= FMC_NORSRAM_BANK1;
 8001b70:	6083      	str	r3, [r0, #8]
	hsram.Init.DataAddressMux		= FMC_DATA_ADDRESS_MUX_DISABLE;
 8001b72:	60c3      	str	r3, [r0, #12]
	hsram.Init.MemoryType			= FMC_MEMORY_TYPE_SRAM;
 8001b74:	6103      	str	r3, [r0, #16]
	hsram.Init.MemoryDataWidth		= FMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode		= FMC_BURST_ACCESS_MODE_DISABLE;
 8001b76:	6183      	str	r3, [r0, #24]
	hsram.Init.WaitSignalPolarity	= FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b78:	61c3      	str	r3, [r0, #28]
	hsram.Init.WrapMode				= FMC_WRAP_MODE_DISABLE;
 8001b7a:	6203      	str	r3, [r0, #32]
	hsram.Init.WaitSignalActive		= FMC_WAIT_TIMING_BEFORE_WS;
 8001b7c:	6243      	str	r3, [r0, #36]	; 0x24
	hsram.Init.WriteOperation		= FMC_WRITE_OPERATION_ENABLE;
 8001b7e:	6282      	str	r2, [r0, #40]	; 0x28
	hsram.Init.WaitSignal			= FMC_WAIT_SIGNAL_DISABLE;
 8001b80:	62c3      	str	r3, [r0, #44]	; 0x2c
	hsram.Init.ExtendedMode			= FMC_EXTENDED_MODE_DISABLE;
 8001b82:	6303      	str	r3, [r0, #48]	; 0x30
	hsram.Init.AsynchronousWait		= FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001b84:	6343      	str	r3, [r0, #52]	; 0x34
	hsram.Init.WriteBurst			= FMC_WRITE_BURST_DISABLE;
 8001b86:	6383      	str	r3, [r0, #56]	; 0x38
	hsram.Init.ContinuousClock    	= FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
	
	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 8001b88:	460a      	mov	r2, r1
	hsram.Init.WriteOperation		= FMC_WRITE_OPERATION_ENABLE;
	hsram.Init.WaitSignal			= FMC_WAIT_SIGNAL_DISABLE;
	hsram.Init.ExtendedMode			= FMC_EXTENDED_MODE_DISABLE;
	hsram.Init.AsynchronousWait		= FMC_ASYNCHRONOUS_WAIT_DISABLE;
	hsram.Init.WriteBurst			= FMC_WRITE_BURST_DISABLE;
	hsram.Init.ContinuousClock    	= FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 8001b8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
static void sram_init(void){
	/*	Configure the FMC bus ---------------------------*/
	hsram.Instance  = FMC_NORSRAM_DEVICE;
	
	SRAM_Timing.AddressSetupTime       = 2;
	SRAM_Timing.AddressHoldTime        = 1;
 8001b8e:	e881 0060 	stmia.w	r1, {r5, r6}
	SRAM_Timing.DataSetupTime          = 2;
 8001b92:	608d      	str	r5, [r1, #8]
	SRAM_Timing.BusTurnAroundDuration  = 1;
 8001b94:	60ce      	str	r6, [r1, #12]
	SRAM_Timing.CLKDivision            = 2;
 8001b96:	610d      	str	r5, [r1, #16]
	SRAM_Timing.DataLatency            = 2;
 8001b98:	614d      	str	r5, [r1, #20]
	hsram.Init.WriteOperation		= FMC_WRITE_OPERATION_ENABLE;
	hsram.Init.WaitSignal			= FMC_WAIT_SIGNAL_DISABLE;
	hsram.Init.ExtendedMode			= FMC_EXTENDED_MODE_DISABLE;
	hsram.Init.AsynchronousWait		= FMC_ASYNCHRONOUS_WAIT_DISABLE;
	hsram.Init.WriteBurst			= FMC_WRITE_BURST_DISABLE;
	hsram.Init.ContinuousClock    	= FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 8001b9a:	63c3      	str	r3, [r0, #60]	; 0x3c
	
	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 8001b9c:	f004 fd54 	bl	8006648 <HAL_SRAM_Init>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d1b6      	bne.n	8001b12 <main+0x46>
	* @param None
	* @retval None
*/
static void I2C_init(void){
	/*	Configure the I2C peripheral ---------------------------*/
	I2cHandle.Instance             = I2Cx;
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <main+0x21c>)
 8001ba6:	4a51      	ldr	r2, [pc, #324]	; (8001cec <main+0x220>)
 8001ba8:	601a      	str	r2, [r3, #0]
	
	I2cHandle.Init.AddressingMode	= I2C_ADDRESSINGMODE_7BIT;
 8001baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bae:	611a      	str	r2, [r3, #16]
	I2cHandle.Init.ClockSpeed		= 400000;
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <main+0x224>)
 8001bb2:	605a      	str	r2, [r3, #4]
	I2cHandle.Init.DualAddressMode	= I2C_DUALADDRESS_DISABLE;
	I2cHandle.Init.DutyCycle		= I2C_DUTYCYCLE_2;
	I2cHandle.Init.GeneralCallMode	= I2C_GENERALCALL_ENABLE;
 8001bb4:	2240      	movs	r2, #64	; 0x40
	/*	Configure the I2C peripheral ---------------------------*/
	I2cHandle.Instance             = I2Cx;
	
	I2cHandle.Init.AddressingMode	= I2C_ADDRESSINGMODE_7BIT;
	I2cHandle.Init.ClockSpeed		= 400000;
	I2cHandle.Init.DualAddressMode	= I2C_DUALADDRESS_DISABLE;
 8001bb6:	6158      	str	r0, [r3, #20]
	I2cHandle.Init.DutyCycle		= I2C_DUTYCYCLE_2;
 8001bb8:	6098      	str	r0, [r3, #8]
	I2cHandle.Init.GeneralCallMode	= I2C_GENERALCALL_ENABLE;
 8001bba:	61da      	str	r2, [r3, #28]
	I2cHandle.Init.NoStretchMode	= I2C_NOSTRETCH_DISABLE;
 8001bbc:	6218      	str	r0, [r3, #32]
	I2cHandle.Init.OwnAddress1		= I2C_ADDRESS;
 8001bbe:	22fe      	movs	r2, #254	; 0xfe
	I2cHandle.Init.OwnAddress2		= I2C_ADDRESS;
	
	if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 8001bc0:	4618      	mov	r0, r3
	I2cHandle.Init.ClockSpeed		= 400000;
	I2cHandle.Init.DualAddressMode	= I2C_DUALADDRESS_DISABLE;
	I2cHandle.Init.DutyCycle		= I2C_DUTYCYCLE_2;
	I2cHandle.Init.GeneralCallMode	= I2C_GENERALCALL_ENABLE;
	I2cHandle.Init.NoStretchMode	= I2C_NOSTRETCH_DISABLE;
	I2cHandle.Init.OwnAddress1		= I2C_ADDRESS;
 8001bc2:	60da      	str	r2, [r3, #12]
	I2cHandle.Init.OwnAddress2		= I2C_ADDRESS;
 8001bc4:	619a      	str	r2, [r3, #24]
	
	if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 8001bc6:	f003 ffa1 	bl	8005b0c <HAL_I2C_Init>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d1a1      	bne.n	8001b12 <main+0x46>
		- Word Length	= 8 Bits
		- Stop Bit		= One Stop bit
		- Parity		= None
		- BaudRate		= 115200 baud
		- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <main+0x228>)
	
	UartHandle.Init.BaudRate     = baudrate;
 8001bd0:	4949      	ldr	r1, [pc, #292]	; (8001cf8 <main+0x22c>)
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8001bd2:	6098      	str	r0, [r3, #8]
		- Parity		= None
		- BaudRate		= 115200 baud
		- Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
	
	UartHandle.Init.BaudRate     = baudrate;
 8001bd4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001bd8:	e883 0006 	stmia.w	r3, {r1, r2}
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8001bdc:	60d8      	str	r0, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_NONE;
 8001bde:	6118      	str	r0, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001be0:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001be2:	220c      	movs	r2, #12
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	61d8      	str	r0, [r3, #28]
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8001be6:	4618      	mov	r0, r3
	UartHandle.Init.BaudRate     = baudrate;
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001be8:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8001bea:	f004 fcab 	bl	8006544 <HAL_UART_Init>
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d18f      	bne.n	8001b12 <main+0x46>
	* @retval None
*/
static void ADC1_init(void){
	ADC_ChannelConfTypeDef sConfig;
	
	AdcHandle.Instance = ADCx;
 8001bf2:	4c42      	ldr	r4, [pc, #264]	; (8001cfc <main+0x230>)
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <main+0x234>)
	
	AdcHandle.Init.ClockPrescaler			= ADC_CLOCKPRESCALER_PCLK_DIV2;
 8001bf6:	6060      	str	r0, [r4, #4]
	AdcHandle.Init.Resolution				= ADC_RESOLUTION_12B;
 8001bf8:	60a0      	str	r0, [r4, #8]
	AdcHandle.Init.ScanConvMode				= DISABLE;
 8001bfa:	6120      	str	r0, [r4, #16]
	AdcHandle.Init.ContinuousConvMode		= DISABLE;
 8001bfc:	61a0      	str	r0, [r4, #24]
	AdcHandle.Init.DiscontinuousConvMode	= DISABLE;
 8001bfe:	6260      	str	r0, [r4, #36]	; 0x24
	AdcHandle.Init.NbrOfDiscConversion		= 0;
 8001c00:	62a0      	str	r0, [r4, #40]	; 0x28
	AdcHandle.Init.ExternalTrigConvEdge		= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c02:	62e0      	str	r0, [r4, #44]	; 0x2c
	AdcHandle.Init.ExternalTrigConv			= ADC_EXTERNALTRIGCONV_T1_CC1;
 8001c04:	6320      	str	r0, [r4, #48]	; 0x30
	AdcHandle.Init.DataAlign				= ADC_DATAALIGN_RIGHT;
 8001c06:	60e0      	str	r0, [r4, #12]
	AdcHandle.Init.NbrOfConversion			= 1;
	AdcHandle.Init.DMAContinuousRequests	= DISABLE;
 8001c08:	61e0      	str	r0, [r4, #28]
	AdcHandle.Init.EOCSelection				= DISABLE;
 8001c0a:	6160      	str	r0, [r4, #20]
		  
	if(HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8001c0c:	4620      	mov	r0, r4
	* @retval None
*/
static void ADC1_init(void){
	ADC_ChannelConfTypeDef sConfig;
	
	AdcHandle.Instance = ADCx;
 8001c0e:	6023      	str	r3, [r4, #0]
	AdcHandle.Init.DiscontinuousConvMode	= DISABLE;
	AdcHandle.Init.NbrOfDiscConversion		= 0;
	AdcHandle.Init.ExternalTrigConvEdge		= ADC_EXTERNALTRIGCONVEDGE_NONE;
	AdcHandle.Init.ExternalTrigConv			= ADC_EXTERNALTRIGCONV_T1_CC1;
	AdcHandle.Init.DataAlign				= ADC_DATAALIGN_RIGHT;
	AdcHandle.Init.NbrOfConversion			= 1;
 8001c10:	6226      	str	r6, [r4, #32]
	AdcHandle.Init.DMAContinuousRequests	= DISABLE;
	AdcHandle.Init.EOCSelection				= DISABLE;
		  
	if(HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8001c12:	f005 fd5b 	bl	80076cc <HAL_ADC_Init>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	f47f af7b 	bne.w	8001b12 <main+0x46>
	}
	
	sConfig.Channel			= ADCx_CHANNEL;
	sConfig.Rank 			= 1;
	sConfig.SamplingTime 	= ADC_SAMPLETIME_28CYCLES;
	sConfig.Offset 			= 0;
 8001c1c:	9006      	str	r0, [sp, #24]
	{
		/* Initialization Error */
		Error_Handler();
	}
	
	sConfig.Channel			= ADCx_CHANNEL;
 8001c1e:	2708      	movs	r7, #8
	sConfig.Rank 			= 1;
	sConfig.SamplingTime 	= ADC_SAMPLETIME_28CYCLES;
	sConfig.Offset 			= 0;
	
	if(HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8001c20:	4620      	mov	r0, r4
 8001c22:	a903      	add	r1, sp, #12
		/* Initialization Error */
		Error_Handler();
	}
	
	sConfig.Channel			= ADCx_CHANNEL;
	sConfig.Rank 			= 1;
 8001c24:	9604      	str	r6, [sp, #16]
	{
		/* Initialization Error */
		Error_Handler();
	}
	
	sConfig.Channel			= ADCx_CHANNEL;
 8001c26:	9703      	str	r7, [sp, #12]
	sConfig.Rank 			= 1;
	sConfig.SamplingTime 	= ADC_SAMPLETIME_28CYCLES;
 8001c28:	9505      	str	r5, [sp, #20]
	sConfig.Offset 			= 0;
	
	if(HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8001c2a:	f005 fec5 	bl	80079b8 <HAL_ADC_ConfigChannel>
 8001c2e:	4606      	mov	r6, r0
 8001c30:	2800      	cmp	r0, #0
 8001c32:	f47f af6e 	bne.w	8001b12 <main+0x46>
static void EXTILine2_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <main+0x208>)
	TIM_OC_InitTypeDef sConfig;
	uint32_t uwPrescalerValue = 0;
	
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
	
	TimHandle_9.Instance = TIMx;
 8001c38:	4c32      	ldr	r4, [pc, #200]	; (8001d04 <main+0x238>)
static void EXTILine2_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Configure PC2 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <main+0x23c>)
 8001c44:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c46:	901a      	str	r0, [sp, #104]	; 0x68
  GPIO_InitStructure.Pin = GPIO_PIN_2;
 8001c48:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c4a:	4830      	ldr	r0, [pc, #192]	; (8001d0c <main+0x240>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  
  /* Configure PC2 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Pin = GPIO_PIN_2;
 8001c4c:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c4e:	a918      	add	r1, sp, #96	; 0x60
 8001c50:	f006 fd62 	bl	8008718 <HAL_GPIO_Init>

  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8001c54:	4629      	mov	r1, r5
 8001c56:	4632      	mov	r2, r6
 8001c58:	4638      	mov	r0, r7
 8001c5a:	f004 f987 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c5e:	4638      	mov	r0, r7
 8001c60:	f004 f9c6 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
*/
static void Timer9_Init(void){
	TIM_OC_InitTypeDef sConfig;
	uint32_t uwPrescalerValue = 0;
	
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <main+0x244>)
 8001c66:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <main+0x248>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fbb3 f3f2 	udiv	r3, r3, r2
	
	TimHandle_9.Instance = TIMx;
 8001c6e:	4a2a      	ldr	r2, [pc, #168]	; (8001d18 <main+0x24c>)
	
	TimHandle_9.Init.Prescaler     = uwPrescalerValue;
	TimHandle_9.Init.Period        = PERIOD_VALUE;
	TimHandle_9.Init.ClockDivision = 0;
 8001c70:	6126      	str	r6, [r4, #16]
*/
static void Timer9_Init(void){
	TIM_OC_InitTypeDef sConfig;
	uint32_t uwPrescalerValue = 0;
	
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
 8001c72:	3b01      	subs	r3, #1
	
	TimHandle_9.Instance = TIMx;
	
	TimHandle_9.Init.Prescaler     = uwPrescalerValue;
 8001c74:	e884 000c 	stmia.w	r4, {r2, r3}
	TimHandle_9.Init.Period        = PERIOD_VALUE;
	TimHandle_9.Init.ClockDivision = 0;
	TimHandle_9.Init.CounterMode   = TIM_COUNTERMODE_UP;
	if(HAL_TIM_PWM_Init(&TimHandle_9) != HAL_OK)
 8001c78:	4620      	mov	r0, r4
	uwPrescalerValue = ((SystemCoreClock /2) / 18000000) - 1;
	
	TimHandle_9.Instance = TIMx;
	
	TimHandle_9.Init.Prescaler     = uwPrescalerValue;
	TimHandle_9.Init.Period        = PERIOD_VALUE;
 8001c7a:	f240 7307 	movw	r3, #1799	; 0x707
 8001c7e:	60e3      	str	r3, [r4, #12]
	TimHandle_9.Init.ClockDivision = 0;
	TimHandle_9.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8001c80:	60a6      	str	r6, [r4, #8]
	if(HAL_TIM_PWM_Init(&TimHandle_9) != HAL_OK)
 8001c82:	f006 fa11 	bl	80080a8 <HAL_TIM_PWM_Init>
 8001c86:	4602      	mov	r2, r0
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	f47f af42 	bne.w	8001b12 <main+0x46>
	{
		/* Initialization Error */
		Error_Handler();
	}
	
	sConfig.OCMode			= TIM_OCMODE_PWM1;
 8001c8e:	2360      	movs	r3, #96	; 0x60
 8001c90:	9311      	str	r3, [sp, #68]	; 0x44
	sConfig.OCPolarity		= TIM_OCPOLARITY_HIGH;
 8001c92:	9013      	str	r0, [sp, #76]	; 0x4c
	sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
 8001c94:	9014      	str	r0, [sp, #80]	; 0x50
	sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
 8001c96:	9017      	str	r0, [sp, #92]	; 0x5c
	sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
 8001c98:	9016      	str	r0, [sp, #88]	; 0x58
	sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
 8001c9a:	9015      	str	r0, [sp, #84]	; 0x54
	
	sConfig.Pulse = PULSE1_VALUE;  
 8001c9c:	f240 5346 	movw	r3, #1350	; 0x546
	if(HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8001ca0:	a911      	add	r1, sp, #68	; 0x44
 8001ca2:	4620      	mov	r0, r4
	sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
	sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
	sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
	sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
	
	sConfig.Pulse = PULSE1_VALUE;  
 8001ca4:	9312      	str	r3, [sp, #72]	; 0x48
	if(HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 8001ca6:	f006 facb 	bl	8008240 <HAL_TIM_PWM_ConfigChannel>
 8001caa:	4601      	mov	r1, r0
 8001cac:	2800      	cmp	r0, #0
 8001cae:	f47f af30 	bne.w	8001b12 <main+0x46>
	{
		/* Configuration Error */
		Error_Handler();
	}
	
	if(HAL_TIM_PWM_Start(&TimHandle_9, TIM_CHANNEL_1) != HAL_OK)
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f006 fc5c 	bl	8008570 <HAL_TIM_PWM_Start>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	f47f af2a 	bne.w	8001b12 <main+0x46>
	RCC_ClkInitTypeDef sClokConfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0;
	uint32_t uwPrescalerValue = 0;
	uint32_t pFLatency;
	
	HAL_RCC_GetClockConfig(&sClokConfig, &pFLatency);
 8001cbe:	a80c      	add	r0, sp, #48	; 0x30
 8001cc0:	eb0d 0107 	add.w	r1, sp, r7
 8001cc4:	f002 fee0 	bl	8004a88 <HAL_RCC_GetClockConfig>
	
	uwAPB1Prescaler = sClokConfig.APB1CLKDivider;
	if (uwAPB1Prescaler == 0) 
 8001cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001cca:	bb3b      	cbnz	r3, 8001d1c <main+0x250>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ccc:	f002 feac 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	e027      	b.n	8001d22 <main+0x256>
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40023c00 	.word	0x40023c00
 8001cdc:	0801fe95 	.word	0x0801fe95
 8001ce0:	2000e890 	.word	0x2000e890
 8001ce4:	2000e874 	.word	0x2000e874
 8001ce8:	2000e914 	.word	0x2000e914
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	00061a80 	.word	0x00061a80
 8001cf4:	2000e2bc 	.word	0x2000e2bc
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	2000e830 	.word	0x2000e830
 8001d00:	40012000 	.word	0x40012000
 8001d04:	2000e398 	.word	0x2000e398
 8001d08:	10210000 	.word	0x10210000
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	20000000 	.word	0x20000000
 8001d14:	02255100 	.word	0x02255100
 8001d18:	40014000 	.word	0x40014000
	}
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001d1c:	f002 fe84 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8001d20:	0040      	lsls	r0, r0, #1
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_5.Instance = TIMx_5;
 8001d22:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <main+0x408>)
 8001d24:	4a6c      	ldr	r2, [pc, #432]	; (8001ed8 <main+0x40c>)
 8001d26:	601a      	str	r2, [r3, #0]
	
	TimHandle_5.Init.Period			= 70 - 1;
 8001d28:	2245      	movs	r2, #69	; 0x45
 8001d2a:	60da      	str	r2, [r3, #12]
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
 8001d2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d30:	fbb0 f0f2 	udiv	r0, r0, r2
 8001d34:	3801      	subs	r0, #1
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period			= 70 - 1;
	TimHandle_5.Init.Prescaler		= uwPrescalerValue;
	TimHandle_5.Init.ClockDivision	= 0;
 8001d36:	2200      	movs	r2, #0
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period			= 70 - 1;
	TimHandle_5.Init.Prescaler		= uwPrescalerValue;
 8001d38:	6058      	str	r0, [r3, #4]
	TimHandle_5.Init.ClockDivision	= 0;
	TimHandle_5.Init.CounterMode	= TIM_COUNTERMODE_UP;
	if(HAL_TIM_Base_Init(&TimHandle_5) != HAL_OK)
 8001d3a:	4618      	mov	r0, r3
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period			= 70 - 1;
	TimHandle_5.Init.Prescaler		= uwPrescalerValue;
	TimHandle_5.Init.ClockDivision	= 0;
 8001d3c:	611a      	str	r2, [r3, #16]
	TimHandle_5.Init.CounterMode	= TIM_COUNTERMODE_UP;
 8001d3e:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_Base_Init(&TimHandle_5) != HAL_OK)
 8001d40:	f006 f942 	bl	8007fc8 <HAL_TIM_Base_Init>
 8001d44:	4604      	mov	r4, r0
 8001d46:	2800      	cmp	r0, #0
 8001d48:	f47f aee3 	bne.w	8001b12 <main+0x46>
*/
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
 8001d4c:	4a63      	ldr	r2, [pc, #396]	; (8001edc <main+0x410>)
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d4e:	4864      	ldr	r0, [pc, #400]	; (8001ee0 <main+0x414>)
*/
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
 8001d50:	6b13      	ldr	r3, [r2, #48]	; 0x30
	
	/*********************************************************************/
	
	/*	Init modbus	slave -----------------------------------------------*/
	eStatus = eMBInit(MB_RTU, 0x0B, 0, 115200, MB_PAR_NONE);
	printf("MB init status: %s\n", eStatus ? "error": "no'error");
 8001d52:	4d64      	ldr	r5, [pc, #400]	; (8001ee4 <main+0x418>)
*/
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
	
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
 8001d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
 8001d5e:	2203      	movs	r2, #3
	
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
	
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
 8001d60:	9318      	str	r3, [sp, #96]	; 0x60
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d62:	a918      	add	r1, sp, #96	; 0x60
	// Enable AHB1per Clock
	__GPIOD_CLK_ENABLE();
	
	//Config pins
	GPIO_InitStructure.Pin		= GPIO_PIN_13;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStructure.Speed	= GPIO_SPEED_HIGH;
 8001d68:	921b      	str	r2, [sp, #108]	; 0x6c
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
 8001d6a:	931a      	str	r3, [sp, #104]	; 0x68
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d6c:	f006 fcd4 	bl	8008718 <HAL_GPIO_Init>
	init_leds();
	
	/*********************************************************************/
	
	/*	Init modbus	slave -----------------------------------------------*/
	eStatus = eMBInit(MB_RTU, 0x0B, 0, 115200, MB_PAR_NONE);
 8001d70:	4622      	mov	r2, r4
 8001d72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d76:	9400      	str	r4, [sp, #0]
 8001d78:	4620      	mov	r0, r4
 8001d7a:	210b      	movs	r1, #11
 8001d7c:	f001 fd10 	bl	80037a0 <eMBInit>
	printf("MB init status: %s\n", eStatus ? "error": "no'error");
 8001d80:	4c59      	ldr	r4, [pc, #356]	; (8001ee8 <main+0x41c>)
 8001d82:	2800      	cmp	r0, #0
 8001d84:	bf14      	ite	ne
 8001d86:	4621      	movne	r1, r4
 8001d88:	4629      	moveq	r1, r5
 8001d8a:	4858      	ldr	r0, [pc, #352]	; (8001eec <main+0x420>)
 8001d8c:	f017 fc80 	bl	8019690 <printf>
	
	/*	Enable the Modbus Protocol Stack --------------------------------*/
	eStatus = eMBEnable();
 8001d90:	f001 fd62 	bl	8003858 <eMBEnable>
	printf("MB enable status: %s\n", eStatus ? "error": "no'error");
 8001d94:	2800      	cmp	r0, #0
 8001d96:	bf14      	ite	ne
 8001d98:	4621      	movne	r1, r4
 8001d9a:	4629      	moveq	r1, r5
 8001d9c:	4854      	ldr	r0, [pc, #336]	; (8001ef0 <main+0x424>)
 8001d9e:	f017 fc77 	bl	8019690 <printf>
	
	/*********************************************************************/
	
	/*	Init STemWin V5.2.6 and GUI -------------------------------------*/
	if((UB_STemWIN_init()) != SUCCESS){
 8001da2:	f001 fadd 	bl	8003360 <UB_STemWIN_init>
 8001da6:	2801      	cmp	r0, #1
 8001da8:	d002      	beq.n	8001db0 <main+0x2e4>
		printf("emWin INIT error...");
 8001daa:	4852      	ldr	r0, [pc, #328]	; (8001ef4 <main+0x428>)
 8001dac:	f017 fc70 	bl	8019690 <printf>
	}
	
	/*	Init Verventa GUI -----------------------------------------------*/
	if(( Init_GUI_verventa()) != SUCCESS){
 8001db0:	f001 f810 	bl	8002dd4 <Init_GUI_verventa>
 8001db4:	2801      	cmp	r0, #1
 8001db6:	d002      	beq.n	8001dbe <main+0x2f2>
		printf("can't INIT verventa GUI...");
 8001db8:	484f      	ldr	r0, [pc, #316]	; (8001ef8 <main+0x42c>)
 8001dba:	f017 fc69 	bl	8019690 <printf>
	}
	
	/*	Link disk drive to filesystem */
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0){
 8001dbe:	484f      	ldr	r0, [pc, #316]	; (8001efc <main+0x430>)
 8001dc0:	494f      	ldr	r1, [pc, #316]	; (8001f00 <main+0x434>)
 8001dc2:	f006 febd 	bl	8008b40 <FATFS_LinkDriver>
 8001dc6:	bb28      	cbnz	r0, 8001e14 <main+0x348>
		printf("SD driver linked...\n");
 8001dc8:	484e      	ldr	r0, [pc, #312]	; (8001f04 <main+0x438>)
 8001dca:	f017 fca3 	bl	8019714 <puts>
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)
 8001dce:	494c      	ldr	r1, [pc, #304]	; (8001f00 <main+0x434>)
 8001dd0:	484d      	ldr	r0, [pc, #308]	; (8001f08 <main+0x43c>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f007 fde6 	bl	80099a4 <f_mount>
 8001dd8:	4601      	mov	r1, r0
 8001dda:	b118      	cbz	r0, 8001de4 <main+0x318>
		{
			printf("No sd card!\n");
 8001ddc:	484b      	ldr	r0, [pc, #300]	; (8001f0c <main+0x440>)
 8001dde:	f017 fc99 	bl	8019714 <puts>
 8001de2:	e017      	b.n	8001e14 <main+0x348>
			//FatFs Initialization Error
			//Error_Handler();
		}
		else
		{
			if(f_mkfs((TCHAR const*)SDPath, 0, 0) != FR_OK)
 8001de4:	4846      	ldr	r0, [pc, #280]	; (8001f00 <main+0x434>)
 8001de6:	460a      	mov	r2, r1
 8001de8:	f008 f8ee 	bl	8009fc8 <f_mkfs>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	f47f ae90 	bne.w	8001b12 <main+0x46>
			{
				//FatFs Format Error
				Error_Handler();
			}
			if(f_setlabel("LOG DISK") != FR_OK)
 8001df2:	4847      	ldr	r0, [pc, #284]	; (8001f10 <main+0x444>)
 8001df4:	f008 f852 	bl	8009e9c <f_setlabel>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	f47f ae89 	bne.w	8001b12 <main+0x46>
					Error_Handler();
				}*/
				/*else{
					printf("Disk Label: %s\n", Disk_label);
				}*/
				create_logger("march.log");
 8001e00:	4844      	ldr	r0, [pc, #272]	; (8001f14 <main+0x448>)
 8001e02:	f000 fbe1 	bl	80025c8 <create_logger>
			}
			Disk_State = disk_status(0);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f006 fe66 	bl	8008ad8 <disk_status>
 8001e0c:	4601      	mov	r1, r0
			printf("Disk_State: %d\n", Disk_State);
 8001e0e:	4842      	ldr	r0, [pc, #264]	; (8001f18 <main+0x44c>)
 8001e10:	f017 fc3e 	bl	8019690 <printf>
		
		//	printf("Compiled HAL\n");
		
		//	test_Cplusplus();
		
		if(xtNeedPoll == true){
 8001e14:	4c41      	ldr	r4, [pc, #260]	; (8001f1c <main+0x450>)
 8001e16:	7823      	ldrb	r3, [r4, #0]
 8001e18:	b3b3      	cbz	r3, 8001e88 <main+0x3bc>
			printf("xtNeedPoll: %s\n", xtNeedPoll ? "true" : "false");
 8001e1a:	4841      	ldr	r0, [pc, #260]	; (8001f20 <main+0x454>)
 8001e1c:	4941      	ldr	r1, [pc, #260]	; (8001f24 <main+0x458>)
 8001e1e:	f017 fc37 	bl	8019690 <printf>
			usRegInputBuf[499]++;
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <main+0x45c>)
 8001e24:	f8b3 23e6 	ldrh.w	r2, [r3, #998]	; 0x3e6
 8001e28:	3201      	adds	r2, #1
 8001e2a:	f8a3 23e6 	strh.w	r2, [r3, #998]	; 0x3e6
			usRegInputBuf[500]++;
 8001e2e:	f8b3 23e8 	ldrh.w	r2, [r3, #1000]	; 0x3e8
 8001e32:	3201      	adds	r2, #1
 8001e34:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
			usRegInputBuf[501]++;
 8001e38:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8001e3c:	3201      	adds	r2, #1
 8001e3e:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
			usRegInputBuf[502]++;
 8001e42:	f8b3 23ec 	ldrh.w	r2, [r3, #1004]	; 0x3ec
 8001e46:	3201      	adds	r2, #1
 8001e48:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
			usSRegHoldBuf[149]++;
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <main+0x460>)
 8001e4e:	f8b3 212a 	ldrh.w	r2, [r3, #298]	; 0x12a
 8001e52:	3201      	adds	r2, #1
 8001e54:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
			usSRegHoldBuf[150]++;
 8001e58:	f8b3 212c 	ldrh.w	r2, [r3, #300]	; 0x12c
 8001e5c:	3201      	adds	r2, #1
 8001e5e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
			usSRegHoldBuf[151]++;
 8001e62:	f8b3 212e 	ldrh.w	r2, [r3, #302]	; 0x12e
 8001e66:	3201      	adds	r2, #1
 8001e68:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
			usSRegHoldBuf[152]++;
 8001e6c:	f8b3 2130 	ldrh.w	r2, [r3, #304]	; 0x130
 8001e70:	3201      	adds	r2, #1
 8001e72:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
			ucSCoilBuf[10] = 0b00010001;
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <main+0x464>)
 8001e78:	2211      	movs	r2, #17
 8001e7a:	729a      	strb	r2, [r3, #10]
			ucSCoilBuf[11] = 0b10010001;
 8001e7c:	2291      	movs	r2, #145	; 0x91
 8001e7e:	72da      	strb	r2, [r3, #11]
			ucSCoilBuf[12] = 0b11010001;
 8001e80:	22d1      	movs	r2, #209	; 0xd1
 8001e82:	731a      	strb	r2, [r3, #12]
			xtNeedPoll = false;
 8001e84:	2300      	movs	r3, #0
 8001e86:	7023      	strb	r3, [r4, #0]
		}
		
		if(modbus_Exec == true){
 8001e88:	4c2a      	ldr	r4, [pc, #168]	; (8001f34 <main+0x468>)
 8001e8a:	7823      	ldrb	r3, [r4, #0]
 8001e8c:	b13b      	cbz	r3, 8001e9e <main+0x3d2>
			eStatus = eMBPoll();
 8001e8e:	f001 fcf5 	bl	800387c <eMBPoll>
 8001e92:	4601      	mov	r1, r0
			printf("MB status: %d\n", eStatus);
 8001e94:	4828      	ldr	r0, [pc, #160]	; (8001f38 <main+0x46c>)
 8001e96:	f017 fbfb 	bl	8019690 <printf>
			
			/*	Clear Flag */
			modbus_Exec = false;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	7023      	strb	r3, [r4, #0]
		}
		
		if(gui_Exec == true){
 8001e9e:	4c27      	ldr	r4, [pc, #156]	; (8001f3c <main+0x470>)
 8001ea0:	7823      	ldrb	r3, [r4, #0]
 8001ea2:	b13b      	cbz	r3, 8001eb4 <main+0x3e8>
			WM_InvalidateWindow(hWinFanImg);
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <main+0x474>)
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	f00c fc8c 	bl	800e7c4 <WM_InvalidateWindow>
			GUI_Exec();
 8001eac:	f010 fe5c 	bl	8012b68 <GUI_Exec>
			
			//printf("SystemCoreClock: %d\n", SystemCoreClock);
			
			/*	Clear Flag */
			gui_Exec = false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	7023      	strb	r3, [r4, #0]
		}
		
		if(log_exec == true){
 8001eb4:	4c23      	ldr	r4, [pc, #140]	; (8001f44 <main+0x478>)
 8001eb6:	7823      	ldrb	r3, [r4, #0]
 8001eb8:	b11b      	cbz	r3, 8001ec2 <main+0x3f6>
			set_Temperature();
 8001eba:	f000 fb9d 	bl	80025f8 <set_Temperature>
			
			/*	Clear Flag */
			log_exec = false;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	7023      	strb	r3, [r4, #0]
		}
		
		if(Update_Touch == true){
 8001ec2:	4c21      	ldr	r4, [pc, #132]	; (8001f48 <main+0x47c>)
 8001ec4:	7823      	ldrb	r3, [r4, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0a4      	beq.n	8001e14 <main+0x348>
			UB_STemWIN_updateTouch();
 8001eca:	f001 fa61 	bl	8003390 <UB_STemWIN_updateTouch>
			
			/*	Clear Flag */
			Update_Touch = false;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	7023      	strb	r3, [r4, #0]
 8001ed2:	e79f      	b.n	8001e14 <main+0x348>
 8001ed4:	2000e358 	.word	0x2000e358
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	0801fe8c 	.word	0x0801fe8c
 8001ee8:	0801fe86 	.word	0x0801fe86
 8001eec:	0801fea2 	.word	0x0801fea2
 8001ef0:	0801feb6 	.word	0x0801feb6
 8001ef4:	0801fecc 	.word	0x0801fecc
 8001ef8:	0801fee0 	.word	0x0801fee0
 8001efc:	2000008c 	.word	0x2000008c
 8001f00:	2000e394 	.word	0x2000e394
 8001f04:	0801fefb 	.word	0x0801fefb
 8001f08:	2000e3d4 	.word	0x2000e3d4
 8001f0c:	0801ff0f 	.word	0x0801ff0f
 8001f10:	0801ff1b 	.word	0x0801ff1b
 8001f14:	0801ff24 	.word	0x0801ff24
 8001f18:	0801ff2e 	.word	0x0801ff2e
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	0801ff3e 	.word	0x0801ff3e
 8001f24:	0801ff4e 	.word	0x0801ff4e
 8001f28:	2000d924 	.word	0x2000d924
 8001f2c:	2000d474 	.word	0x2000d474
 8001f30:	2000d424 	.word	0x2000d424
 8001f34:	2000d420 	.word	0x2000d420
 8001f38:	0801ff53 	.word	0x0801ff53
 8001f3c:	2000d421 	.word	0x2000d421
 8001f40:	2000e968 	.word	0x2000e968
 8001f44:	2000d422 	.word	0x2000d422
 8001f48:	2000d410 	.word	0x2000d410

08001f4c <__io_putchar>:
/**
	* @brief  Retargets the C library printf function to the USART (GNU)
	* @param  None
	* @retval None
*/
int __io_putchar(int ch){
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	4604      	mov	r4, r0
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART */
	
	Debug_ITMDebugOutputChar(ch); // SWV
 8001f50:	b2c0      	uxtb	r0, r0
 8001f52:	f7ff fcb9 	bl	80018c8 <Debug_ITMDebugOutputChar>
	
	return(ch);
}
 8001f56:	4620      	mov	r0, r4
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <__io_getchar>:
int __io_getchar(void){
	/* Place your implementation of fgetc here */
	/* e.g. read a character from the USART */
	
	return((int)-1);
}
 8001f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5e:	4770      	bx	lr

08001f60 <assert_failed>:
		*         where the assert_param error has occurred.
		* @param  file: pointer to the source file name
		* @param  line: assert_param error line source number
		* @retval None
	*/
	void assert_failed(uint8_t* file, uint32_t line){
 8001f60:	b508      	push	{r3, lr}
 8001f62:	4603      	mov	r3, r0
 8001f64:	460a      	mov	r2, r1
		printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8001f66:	4802      	ldr	r0, [pc, #8]	; (8001f70 <assert_failed+0x10>)
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f017 fb91 	bl	8019690 <printf>
		
		while(1); /* Infinite loop */
 8001f6e:	e7fe      	b.n	8001f6e <assert_failed+0xe>
 8001f70:	0801ff62 	.word	0x0801ff62

08001f74 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8001f74:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t	status = SD_PRESENT;
 8001f76:	2301      	movs	r3, #1
  __IO uint8_t	pin_stat = 1;
  
  /* Check SD card detect pin */
  pin_stat = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8001f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7c:	480a      	ldr	r0, [pc, #40]	; (8001fa8 <BSP_SD_IsDetected+0x34>)
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t	status = SD_PRESENT;
 8001f7e:	f88d 3006 	strb.w	r3, [sp, #6]
  __IO uint8_t	pin_stat = 1;
 8001f82:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Check SD card detect pin */
  pin_stat = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8001f86:	f006 fd07 	bl	8008998 <HAL_GPIO_ReadPin>
 8001f8a:	f88d 0007 	strb.w	r0, [sp, #7]
  if(pin_stat == 1){
 8001f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f92:	2b01      	cmp	r3, #1
	  status = SD_NOT_PRESENT;
 8001f94:	bf04      	itt	eq
 8001f96:	2300      	moveq	r3, #0
 8001f98:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }
  //printf("sd detect status: %d\n", status);
  
  return status;
 8001f9c:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8001fa0:	b003      	add	sp, #12
 8001fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fa6:	bf00      	nop
 8001fa8:	40020400 	.word	0x40020400

08001fac <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8001fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t SD_state = MSD_OK;
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001fb0:	4b62      	ldr	r3, [pc, #392]	; (800213c <BSP_SD_Init+0x190>)
uint8_t BSP_SD_Init(void)
{ 
  uint8_t SD_state = MSD_OK;
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;
 8001fb2:	4d63      	ldr	r5, [pc, #396]	; (8002140 <BSP_SD_Init+0x194>)

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001fb4:	2600      	movs	r6, #0
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8001fb6:	b08b      	sub	sp, #44	; 0x2c
  uint8_t SD_state = MSD_OK;
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001fb8:	e885 0048 	stmia.w	r5, {r3, r6}
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001fbc:	60ae      	str	r6, [r5, #8]
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001fbe:	60ee      	str	r6, [r5, #12]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001fc0:	612e      	str	r6, [r5, #16]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fc2:	616e      	str	r6, [r5, #20]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 8001fc4:	61ae      	str	r6, [r5, #24]
  
  /* Configure IO functionalities for SD detect pin */
  //BSP_IO_Init(); 
  
  /* Check if the SD card is plugged in the slot */
  if(BSP_SD_IsDetected() != SD_PRESENT)
 8001fc6:	f7ff ffd5 	bl	8001f74 <BSP_SD_IsDetected>
 8001fca:	2801      	cmp	r0, #1
 8001fcc:	4604      	mov	r4, r0
 8001fce:	d001      	beq.n	8001fd4 <BSP_SD_Init+0x28>
  {
    return MSD_ERROR;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e0b0      	b.n	8002136 <BSP_SD_Init+0x18a>
  }
  
  printf("SD msp init\n");
 8001fd4:	485b      	ldr	r0, [pc, #364]	; (8002144 <BSP_SD_Init+0x198>)
 8001fd6:	f017 fb9d 	bl	8019714 <puts>
  static DMA_HandleTypeDef dmaTxHandle;
  GPIO_InitTypeDef GPIO_Init_Structure;
  SD_HandleTypeDef *hsd = &uSdHandle;
  
  /* Enable SDIO clock */
  __SDIO_CLK_ENABLE();
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <BSP_SD_Init+0x19c>)
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8001fdc:	485b      	ldr	r0, [pc, #364]	; (800214c <BSP_SD_Init+0x1a0>)
  static DMA_HandleTypeDef dmaTxHandle;
  GPIO_InitTypeDef GPIO_Init_Structure;
  SD_HandleTypeDef *hsd = &uSdHandle;
  
  /* Enable SDIO clock */
  __SDIO_CLK_ENABLE();
 8001fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8001fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable GPIOs clock */
  __GPIOC_CLK_ENABLE();
 8001fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff0:	f042 0204 	orr.w	r2, r2, #4
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
  __GPIOD_CLK_ENABLE();
 8001ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	9306      	str	r3, [sp, #24]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8002002:	9407      	str	r4, [sp, #28]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
 8002004:	230c      	movs	r3, #12
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002006:	ac0a      	add	r4, sp, #40	; 0x28
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
 8002008:	9309      	str	r3, [sp, #36]	; 0x24
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800200a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800200e:	f844 3d14 	str.w	r3, [r4, #-20]!
  __GPIOD_CLK_ENABLE();
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 8002012:	2703      	movs	r7, #3
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8002014:	4621      	mov	r1, r4

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
 8002016:	f04f 0804 	mov.w	r8, #4
  __GPIOD_CLK_ENABLE();
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 800201a:	9708      	str	r7, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 800201c:	f006 fb7c 	bl	8008718 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8002020:	4621      	mov	r1, r4
 8002022:	484b      	ldr	r0, [pc, #300]	; (8002150 <BSP_SD_Init+0x1a4>)
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
 8002024:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8002028:	f006 fb76 	bl	8008718 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202c:	4638      	mov	r0, r7
 800202e:	f003 ff81 	bl	8005f34 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002032:	2105      	movs	r1, #5
 8002034:	4632      	mov	r2, r6
 8002036:	2031      	movs	r0, #49	; 0x31
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002038:	4c46      	ldr	r4, [pc, #280]	; (8002154 <BSP_SD_Init+0x1a8>)
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800203a:	f003 ff97 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800203e:	2031      	movs	r0, #49	; 0x31
 8002040:	f003 ffd6 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
 8002048:	4843      	ldr	r0, [pc, #268]	; (8002158 <BSP_SD_Init+0x1ac>)
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800204a:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800204c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002050:	f44f 6180 	mov.w	r1, #1024	; 0x400
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
 8002058:	6020      	str	r0, [r4, #0]
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800205a:	9300      	str	r3, [sp, #0]
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
 800205c:	f04f 0b20 	mov.w	fp, #32
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002064:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
 8002068:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dmaRxHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaRxHandle);
 800206c:	4620      	mov	r0, r4
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800206e:	f8c4 c004 	str.w	ip, [r4, #4]
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002072:	6121      	str	r1, [r4, #16]
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002074:	6162      	str	r2, [r4, #20]
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002076:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002078:	f8cd c00c 	str.w	ip, [sp, #12]
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800207c:	9102      	str	r1, [sp, #8]
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800207e:	9201      	str	r2, [sp, #4]
  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002080:	60a6      	str	r6, [r4, #8]
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002082:	60e6      	str	r6, [r4, #12]
  dmaRxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaRxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
 8002084:	f8c4 b01c 	str.w	fp, [r4, #28]
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002088:	f8c4 a020 	str.w	sl, [r4, #32]
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800208c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002090:	62a7      	str	r7, [r4, #40]	; 0x28
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
 8002092:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dmaRxHandle);
 8002096:	65ac      	str	r4, [r5, #88]	; 0x58
 8002098:	63a5      	str	r5, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaRxHandle);
 800209a:	f004 fbdd 	bl	8006858 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
 800209e:	4620      	mov	r0, r4
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80020a0:	4c2e      	ldr	r4, [pc, #184]	; (800215c <BSP_SD_Init+0x1b0>)
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaRxHandle);
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
 80020a2:	f004 faf7 	bl	8006694 <HAL_DMA_Init>
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaTxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80020a6:	9b00      	ldr	r3, [sp, #0]
 80020a8:	61a3      	str	r3, [r4, #24]
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80020aa:	2040      	movs	r0, #64	; 0x40
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
  dmaTxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80020ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80020b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80020b4:	9902      	ldr	r1, [sp, #8]
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020b6:	9a01      	ldr	r2, [sp, #4]
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80020b8:	60a0      	str	r0, [r4, #8]
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
  dmaTxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80020ba:	6323      	str	r3, [r4, #48]	; 0x30
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dmaTxHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaTxHandle);
 80020bc:	4620      	mov	r0, r4
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaTxHandle.Instance = SD_DMAx_Tx_STREAM;
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <BSP_SD_Init+0x1b4>)
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80020c0:	f8c4 c004 	str.w	ip, [r4, #4]
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaTxHandle.Instance = SD_DMAx_Tx_STREAM;
 80020c4:	6023      	str	r3, [r4, #0]
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80020c6:	6121      	str	r1, [r4, #16]
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020c8:	6162      	str	r2, [r4, #20]
  HAL_DMA_Init(&dmaRxHandle);
  
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80020ca:	60e6      	str	r6, [r4, #12]
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaTxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
 80020cc:	f8c4 b01c 	str.w	fp, [r4, #28]
  dmaTxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80020d0:	f8c4 a020 	str.w	sl, [r4, #32]
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80020d4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80020d8:	62a7      	str	r7, [r4, #40]	; 0x28
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
 80020da:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaTxHandle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dmaTxHandle);
 80020de:	65ec      	str	r4, [r5, #92]	; 0x5c
 80020e0:	63a5      	str	r5, [r4, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaTxHandle);
 80020e2:	f004 fbb9 	bl	8006858 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaTxHandle); 
 80020e6:	4620      	mov	r0, r4
 80020e8:	f004 fad4 	bl	8006694 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	4638      	mov	r0, r7
 80020ee:	f003 ff21 	bl	8005f34 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 6, 0);
 80020f2:	2106      	movs	r1, #6
 80020f4:	4632      	mov	r2, r6
 80020f6:	203b      	movs	r0, #59	; 0x3b
 80020f8:	f003 ff38 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80020fc:	203b      	movs	r0, #59	; 0x3b
 80020fe:	f003 ff77 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002102:	4638      	mov	r0, r7
 8002104:	f003 ff16 	bl	8005f34 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 6, 0);
 8002108:	2106      	movs	r1, #6
 800210a:	2045      	movs	r0, #69	; 0x45
 800210c:	4632      	mov	r2, r6
 800210e:	f003 ff2d 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8002112:	2045      	movs	r0, #69	; 0x45
 8002114:	f003 ff6c 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
  }
  
  printf("SD msp init\n");
  /* HAL SD initialization */
  SD_MspInit();
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 8002118:	4628      	mov	r0, r5
 800211a:	4912      	ldr	r1, [pc, #72]	; (8002164 <BSP_SD_Init+0x1b8>)
 800211c:	f003 f8b2 	bl	8005284 <HAL_SD_Init>
 8002120:	2800      	cmp	r0, #0
 8002122:	f47f af55 	bne.w	8001fd0 <BSP_SD_Init+0x24>
  
  /* Configure SD Bus width */
  if(SD_state == MSD_OK)
  {
    /* Enable wide operation */
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDIO_BUS_WIDE_4B) != SD_OK)
 8002126:	4628      	mov	r0, r5
 8002128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212c:	f003 fa8c 	bl	8005648 <HAL_SD_WideBusOperation_Config>
  //BSP_IO_Init(); 
  
  /* Check if the SD card is plugged in the slot */
  if(BSP_SD_IsDetected() != SD_PRESENT)
  {
    return MSD_ERROR;
 8002130:	3000      	adds	r0, #0
 8002132:	bf18      	it	ne
 8002134:	2001      	movne	r0, #1
      SD_state = MSD_OK;
    }
  }
  
  return  SD_state;
}
 8002136:	b00b      	add	sp, #44	; 0x2c
 8002138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800213c:	40012c00 	.word	0x40012c00
 8002140:	2000de80 	.word	0x2000de80
 8002144:	0801ff8f 	.word	0x0801ff8f
 8002148:	40023800 	.word	0x40023800
 800214c:	40020800 	.word	0x40020800
 8002150:	40020c00 	.word	0x40020c00
 8002154:	2000de30 	.word	0x2000de30
 8002158:	40026458 	.word	0x40026458
 800215c:	2000dee0 	.word	0x2000dee0
 8002160:	400264a0 	.word	0x400264a0
 8002164:	2000ddd8 	.word	0x2000ddd8

08002168 <BSP_SD_ReadBlocks_DMA>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8002168:	b507      	push	{r0, r1, r2, lr}
 800216a:	4601      	mov	r1, r0
  uint8_t SD_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 800216c:	9804      	ldr	r0, [sp, #16]
 800216e:	9000      	str	r0, [sp, #0]
 8002170:	9805      	ldr	r0, [sp, #20]
 8002172:	9001      	str	r0, [sp, #4]
 8002174:	4807      	ldr	r0, [pc, #28]	; (8002194 <BSP_SD_ReadBlocks_DMA+0x2c>)
 8002176:	f002 fdb1 	bl	8004cdc <HAL_SD_ReadBlocks_DMA>
 800217a:	b108      	cbz	r0, 8002180 <BSP_SD_ReadBlocks_DMA+0x18>
 800217c:	2001      	movs	r0, #1
 800217e:	e006      	b.n	800218e <BSP_SD_ReadBlocks_DMA+0x26>
  }
  
  /* Wait until transfer is complete */
  if(SD_state == MSD_OK)
  {
    if(HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) != SD_OK)
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <BSP_SD_ReadBlocks_DMA+0x2c>)
 8002182:	4905      	ldr	r1, [pc, #20]	; (8002198 <BSP_SD_ReadBlocks_DMA+0x30>)
 8002184:	f003 fb0d 	bl	80057a2 <HAL_SD_CheckReadOperation>
    {
      SD_state = MSD_ERROR;
 8002188:	3000      	adds	r0, #0
 800218a:	bf18      	it	ne
 800218c:	2001      	movne	r0, #1
      SD_state = MSD_OK;
    }
  }
  
  return SD_state; 
}
 800218e:	b003      	add	sp, #12
 8002190:	f85d fb04 	ldr.w	pc, [sp], #4
 8002194:	2000de80 	.word	0x2000de80
 8002198:	05f5e100 	.word	0x05f5e100

0800219c <BSP_SD_WriteBlocks_DMA>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 800219c:	b513      	push	{r0, r1, r4, lr}
 800219e:	4601      	mov	r1, r0
  uint8_t SD_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)
 80021a0:	9804      	ldr	r0, [sp, #16]
 80021a2:	9000      	str	r0, [sp, #0]
 80021a4:	9805      	ldr	r0, [sp, #20]
 80021a6:	9001      	str	r0, [sp, #4]
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <BSP_SD_WriteBlocks_DMA+0x38>)
 80021aa:	f002 fe0b 	bl	8004dc4 <HAL_SD_WriteBlocks_DMA>
 80021ae:	1c04      	adds	r4, r0, #0
 80021b0:	bf18      	it	ne
 80021b2:	2401      	movne	r4, #1
  {
    SD_state = MSD_ERROR;
  }
  
  printf("SD state: %d\n", SD_state);
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <BSP_SD_WriteBlocks_DMA+0x3c>)
 80021b6:	4621      	mov	r1, r4
 80021b8:	f017 fa6a 	bl	8019690 <printf>
  
  /* Wait until transfer is complete */
  if(SD_state == MSD_OK)
 80021bc:	b93c      	cbnz	r4, 80021ce <BSP_SD_WriteBlocks_DMA+0x32>
  {
    if(HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) != SD_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <BSP_SD_WriteBlocks_DMA+0x38>)
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <BSP_SD_WriteBlocks_DMA+0x40>)
 80021c2:	f003 fb43 	bl	800584c <HAL_SD_CheckWriteOperation>
    {
      SD_state = MSD_ERROR;
 80021c6:	3000      	adds	r0, #0
 80021c8:	bf18      	it	ne
 80021ca:	2001      	movne	r0, #1
 80021cc:	e000      	b.n	80021d0 <BSP_SD_WriteBlocks_DMA+0x34>
 80021ce:	2001      	movs	r0, #1
      SD_state = MSD_OK;
    }
  }
  
  return SD_state;  
}
 80021d0:	b002      	add	sp, #8
 80021d2:	bd10      	pop	{r4, pc}
 80021d4:	2000de80 	.word	0x2000de80
 80021d8:	0801ff9b 	.word	0x0801ff9b
 80021dc:	05f5e100 	.word	0x05f5e100

080021e0 <BSP_SD_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <BSP_SD_IRQHandler+0x8>)
 80021e2:	f002 be99 	b.w	8004f18 <HAL_SD_IRQHandler>
 80021e6:	bf00      	nop
 80021e8:	2000de80 	.word	0x2000de80

080021ec <BSP_SD_DMA_Tx_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx); 
 80021ec:	4b01      	ldr	r3, [pc, #4]	; (80021f4 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 80021ee:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80021f0:	f004 bd5e 	b.w	8006cb0 <HAL_DMA_IRQHandler>
 80021f4:	2000de80 	.word	0x2000de80

080021f8 <BSP_SD_DMA_Rx_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80021fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80021fc:	f004 bd58 	b.w	8006cb0 <HAL_DMA_IRQHandler>
 8002200:	2000de80 	.word	0x2000de80

08002204 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 8002204:	4801      	ldr	r0, [pc, #4]	; (800220c <BSP_SD_GetStatus+0x8>)
 8002206:	f003 bafe 	b.w	8005806 <HAL_SD_GetStatus>
 800220a:	bf00      	nop
 800220c:	2000de80 	.word	0x2000de80

08002210 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
 8002210:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 8002212:	4801      	ldr	r0, [pc, #4]	; (8002218 <BSP_SD_GetCardInfo+0x8>)
 8002214:	f002 beef 	b.w	8004ff6 <HAL_SD_Get_CardInfo>
 8002218:	2000de80 	.word	0x2000de80

0800221c <HAL_ADC_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800221c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;
  
  /* Enable GPIO clock */
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_ADC_MspInit+0x30>)
  
  /* ADC3 Channel8 GPIO pin configuration */
  GPIO_InitStruct.Pin	= ADCx_CHANNEL_PIN;
  GPIO_InitStruct.Mode	= GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull	= GPIO_NOPULL;
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <HAL_ADC_MspInit+0x34>)
{
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;
  
  /* Enable GPIO clock */
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8002222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002224:	f042 0202 	orr.w	r2, r2, #2
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
  /* ADC3 Periph clock enable */
  ADCx_CLK_ENABLE();
 800222a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
  /* Enable DMA2 clock */
  //DMAx_CLK_ENABLE(); 
  
  /* ADC3 Channel8 GPIO pin configuration */
  GPIO_InitStruct.Pin	= ADCx_CHANNEL_PIN;
 8002232:	2301      	movs	r3, #1
 8002234:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode	= GPIO_MODE_ANALOG;
 8002236:	2303      	movs	r3, #3
 8002238:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull	= GPIO_NOPULL;
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 800223a:	a901      	add	r1, sp, #4
  //DMAx_CLK_ENABLE(); 
  
  /* ADC3 Channel8 GPIO pin configuration */
  GPIO_InitStruct.Pin	= ADCx_CHANNEL_PIN;
  GPIO_InitStruct.Mode	= GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull	= GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002240:	f006 fa6a 	bl	8008718 <HAL_GPIO_Init>
  //__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);

  /* NVIC configuration for DMA transfer complete interrupt */
  //HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 15, 15);   
  //HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
}
 8002244:	b007      	add	sp, #28
 8002246:	f85d fb04 	ldr.w	pc, [sp], #4
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_TIM_Base_MspInit>:
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* TIMx Peripheral clock enable */
  //TIMx_4_CLK_ENABLE();
  TIMx_5_CLK_ENABLE();
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_TIM_Base_MspInit+0x1c>)
  *           - Peripheral's GPIO Configuration  
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002256:	b508      	push	{r3, lr}
  /* TIMx Peripheral clock enable */
  //TIMx_4_CLK_ENABLE();
  TIMx_5_CLK_ENABLE();
 8002258:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
  /* Set Interrupt Group Priority */
  //HAL_NVIC_SetPriority(TIMx_4_IRQn, 4, 0);
  //HAL_NVIC_SetPriority(TIMx_5_IRQn, 4, 1);
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_4_IRQn);
 8002260:	201e      	movs	r0, #30
 8002262:	f003 fec5 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIMx_5_IRQn);
 8002266:	2032      	movs	r0, #50	; 0x32
}
 8002268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //HAL_NVIC_SetPriority(TIMx_4_IRQn, 4, 0);
  //HAL_NVIC_SetPriority(TIMx_5_IRQn, 4, 1);
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_4_IRQn);
  HAL_NVIC_EnableIRQ(TIMx_5_IRQn);
 800226c:	f003 bec0 	b.w	8005ff0 <HAL_NVIC_EnableIRQ>
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param htim: TIM handle pointer
  * @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef   GPIO_InitStruct;
	
	/* TIMx Peripheral clock enable */
	TIMx_CLK_ENABLE();
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_TIM_PWM_MspInit+0x38>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
	
	GPIO_InitStruct.Pin = GPIO_PIN_CHANNEL1;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <HAL_TIM_PWM_MspInit+0x3c>)
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
	GPIO_InitTypeDef   GPIO_InitStruct;
	
	/* TIMx Peripheral clock enable */
	TIMx_CLK_ENABLE();
 800227a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800227c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    
	/* Enable GPIO Channels Clock */
	TIMx_CHANNEL_GPIO_PORT();
 8002282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002284:	f042 0210 	orr.w	r2, r2, #16
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Configure PE.9 (TIM1_Channel1) in output, push-pull, alternate function mode
	*/
	/* Common configuration for all channels */
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228e:	2301      	movs	r3, #1
 8002290:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
	
	GPIO_InitStruct.Pin = GPIO_PIN_CHANNEL1;
 8002292:	a906      	add	r1, sp, #24
	/* Configure PE.9 (TIM1_Channel1) in output, push-pull, alternate function mode
	*/
	/* Common configuration for all channels */
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002298:	9305      	str	r3, [sp, #20]
	
	GPIO_InitStruct.Pin = GPIO_PIN_CHANNEL1;
 800229a:	2320      	movs	r3, #32
 800229c:	f841 3d14 	str.w	r3, [r1, #-20]!
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a0:	f006 fa3a 	bl	8008718 <HAL_GPIO_Init>
}
 80022a4:	b007      	add	sp, #28
 80022a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_UART_MspInit>:
	//static DMA_HandleTypeDef hdma_rx;
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_UART_MspInit+0x9c>)
 80022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b8:	f042 0201 	orr.w	r2, r2, #1
	*           - NVIC configuration for DMA interrupt request enable
	* @param huart: UART handle pointer
	* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	//static DMA_HandleTypeDef hdma_rx;
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
	USARTx_RX_GPIO_CLK_ENABLE();
 80022c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80022c2:	4c24      	ldr	r4, [pc, #144]	; (8002354 <HAL_UART_MspInit+0xa0>)
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
	USARTx_RX_GPIO_CLK_ENABLE();
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Enable USART2 clock */
	USARTx_CLK_ENABLE();
 80022ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022cc:	f042 0210 	orr.w	r2, r2, #16
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
	/*	Enable RS485 dir clock */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	*           - NVIC configuration for DMA interrupt request enable
	* @param huart: UART handle pointer
	* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80022d4:	b087      	sub	sp, #28
	USARTx_TX_GPIO_CLK_ENABLE();
	USARTx_RX_GPIO_CLK_ENABLE();
	/* Enable USART2 clock */
	USARTx_CLK_ENABLE();
	/*	Enable RS485 dir clock */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	f042 0204 	orr.w	r2, r2, #4
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
	/* Enable DMA1 clock */
	//DMAx_CLK_ENABLE();   
	
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80022dc:	2602      	movs	r6, #2
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80022de:	2500      	movs	r5, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
	/* Enable DMA1 clock */
	//DMAx_CLK_ENABLE();   
	
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80022e0:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80022e4:	2707      	movs	r7, #7
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80022e6:	4620      	mov	r0, r4
 80022e8:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOC_CLK_ENABLE();
	/* Enable DMA1 clock */
	//DMAx_CLK_ENABLE();   
	
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80022ea:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80022ec:	9705      	str	r7, [sp, #20]
	/* Enable DMA1 clock */
	//DMAx_CLK_ENABLE();   
	
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = USARTx_TX_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80022ee:	9602      	str	r6, [sp, #8]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80022f0:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80022f2:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80022f4:	f006 fa10 	bl	8008718 <HAL_GPIO_Init>
    
	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80022f8:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	4f17      	ldr	r7, [pc, #92]	; (8002358 <HAL_UART_MspInit+0xa4>)
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80022fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002300:	4620      	mov	r0, r4
 8002302:	a901      	add	r1, sp, #4
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
 8002304:	2401      	movs	r4, #1
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
	
	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002306:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002308:	f006 fa06 	bl	8008718 <HAL_GPIO_Init>
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
 800230c:	2303      	movs	r3, #3
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230e:	4638      	mov	r0, r7
 8002310:	a901      	add	r1, sp, #4
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
 8002312:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
	
	/* RS485 dir pin */
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
 8002314:	9402      	str	r4, [sp, #8]
	GPIO_InitStruct.Speed	= GPIO_SPEED_HIGH;
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
 8002316:	9403      	str	r4, [sp, #12]
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
 8002318:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231a:	f006 f9fd 	bl	8008718 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin		= GPIO_PIN_1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231e:	4638      	mov	r0, r7
 8002320:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
	
	GPIO_InitStruct.Pin		= GPIO_PIN_0;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	
	GPIO_InitStruct.Pin		= GPIO_PIN_1;
 8002322:	9601      	str	r6, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002324:	f006 f9f8 	bl	8008718 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002328:	4638      	mov	r0, r7
 800232a:	4621      	mov	r1, r4
 800232c:	462a      	mov	r2, r5
 800232e:	f006 fb45 	bl	80089bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002332:	4638      	mov	r0, r7
 8002334:	4631      	mov	r1, r6
 8002336:	462a      	mov	r2, r5
 8002338:	f006 fb40 	bl	80089bc <HAL_GPIO_WritePin>
	/* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
	//HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 2, 0);   
	//HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
	
	/* NVIC configuration for USART TC interrupt */
	HAL_NVIC_SetPriority(USARTx_IRQn, 1, 0);
 800233c:	4621      	mov	r1, r4
 800233e:	462a      	mov	r2, r5
 8002340:	2025      	movs	r0, #37	; 0x25
 8002342:	f003 fe13 	bl	8005f6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002346:	2025      	movs	r0, #37	; 0x25
 8002348:	f003 fe52 	bl	8005ff0 <HAL_NVIC_EnableIRQ>
}
 800234c:	b007      	add	sp, #28
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020800 	.word	0x40020800

0800235c <HAL_I2C_MspInit>:
	*           - DMA configuration for transmission request by peripheral 
	*           - NVIC configuration for DMA interrupt request enable
	* @param hi2c: I2C handle pointer
	* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 800235c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/*##-1- Enable GPIO Clocks #################################################*/
	/* Enable GPIO TX/RX clock */
	I2Cx_SCL_GPIO_CLK_ENABLE();
 8002360:	4c26      	ldr	r4, [pc, #152]	; (80023fc <HAL_I2C_MspInit+0xa0>)
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002362:	4e27      	ldr	r6, [pc, #156]	; (8002400 <HAL_I2C_MspInit+0xa4>)
	
	GPIO_InitTypeDef  GPIO_InitStruct;
	
	/*##-1- Enable GPIO Clocks #################################################*/
	/* Enable GPIO TX/RX clock */
	I2Cx_SCL_GPIO_CLK_ENABLE();
 8002364:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	6323      	str	r3, [r4, #48]	; 0x30
	I2Cx_SDA_GPIO_CLK_ENABLE();
 800236c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	6323      	str	r3, [r4, #48]	; 0x30
	/* PORTC-Reset pin bus enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002374:	6b23      	ldr	r3, [r4, #48]	; 0x30
	*           - DMA configuration for transmission request by peripheral 
	*           - NVIC configuration for DMA interrupt request enable
	* @param hi2c: I2C handle pointer
	* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8002376:	b087      	sub	sp, #28
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8002378:	f04f 0904 	mov.w	r9, #4
	/*##-1- Enable GPIO Clocks #################################################*/
	/* Enable GPIO TX/RX clock */
	I2Cx_SCL_GPIO_CLK_ENABLE();
	I2Cx_SDA_GPIO_CLK_ENABLE();
	/* PORTC-Reset pin bus enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6323      	str	r3, [r4, #48]	; 0x30
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002382:	2501      	movs	r5, #1
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002384:	2312      	movs	r3, #18
	__HAL_RCC_GPIOC_CLK_ENABLE();
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002386:	f04f 0840 	mov.w	r8, #64	; 0x40
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800238a:	2702      	movs	r7, #2
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800238c:	4630      	mov	r0, r6
 800238e:	eb0d 0109 	add.w	r1, sp, r9
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002392:	9302      	str	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
	
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002394:	f8cd 8004 	str.w	r8, [sp, #4]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002398:	9704      	str	r7, [sp, #16]
	
	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800239a:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 800239c:	f8cd 9014 	str.w	r9, [sp, #20]
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80023a0:	f006 f9ba 	bl	8008718 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80023a4:	462a      	mov	r2, r5
 80023a6:	4630      	mov	r0, r6
 80023a8:	4641      	mov	r1, r8
 80023aa:	f006 fb07 	bl	80089bc <HAL_GPIO_WritePin>
	
	/* I2C RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 80023ae:	f44f 7800 	mov.w	r8, #512	; 0x200
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80023b2:	4630      	mov	r0, r6
 80023b4:	eb0d 0109 	add.w	r1, sp, r9
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	
	/* I2C RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 80023b8:	f8cd 8004 	str.w	r8, [sp, #4]
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 80023bc:	f8cd 9014 	str.w	r9, [sp, #20]
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80023c0:	f006 f9aa 	bl	8008718 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80023c4:	462a      	mov	r2, r5
 80023c6:	4630      	mov	r0, r6
 80023c8:	4641      	mov	r1, r8
 80023ca:	f006 faf7 	bl	80089bc <HAL_GPIO_WritePin>
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_FAST;
 80023ce:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d0:	4f0c      	ldr	r7, [pc, #48]	; (8002404 <HAL_I2C_MspInit+0xa8>)
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
 80023d2:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
 80023d4:	2608      	movs	r6, #8
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	4638      	mov	r0, r7
 80023d8:	eb0d 0109 	add.w	r1, sp, r9
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	
	/* Init Reset Pin Touch */
	GPIO_InitStruct.Pin		= GPIO_PIN_3;
 80023dc:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Mode	= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStruct.Pull	= GPIO_PULLUP;
 80023de:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e0:	f006 f99a 	bl	8008718 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80023e4:	4638      	mov	r0, r7
 80023e6:	4631      	mov	r1, r6
 80023e8:	462a      	mov	r2, r5
 80023ea:	f006 fae7 	bl	80089bc <HAL_GPIO_WritePin>
	
	/*##-3- Enable peripheral Clock ############################################*/
	/* Enable I2C1 clock */
	I2Cx_CLK_ENABLE();
 80023ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023f4:	6423      	str	r3, [r4, #64]	; 0x40
	
}
 80023f6:	b007      	add	sp, #28
 80023f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020400 	.word	0x40020400
 8002404:	40020800 	.word	0x40020800

08002408 <HAL_SRAM_MspInit>:
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_SRAM_MspInit+0x78>)
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800240a:	481e      	ldr	r0, [pc, #120]	; (8002484 <HAL_SRAM_MspInit+0x7c>)
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
 800240c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240e:	f042 0201 	orr.w	r2, r2, #1
/**
	* @brief SRAM MSP Initialization
	* @param  handle to sram
	* @retval None
*/
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 8002412:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
	
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin		= GPIO_PIN_1;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002418:	4f1b      	ldr	r7, [pc, #108]	; (8002488 <HAL_SRAM_MspInit+0x80>)
	
	// Clock Enable FSMC
	__HAL_RCC_FMC_CLK_ENABLE();
	
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	f042 0208 	orr.w	r2, r2, #8
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002422:	f042 0210 	orr.w	r2, r2, #16
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
/**
	* @brief SRAM MSP Initialization
	* @param  handle to sram
	* @retval None
*/
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 800242a:	b087      	sub	sp, #28
	__HAL_RCC_FMC_CLK_ENABLE();
	
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800242c:	f042 0202 	orr.w	r2, r2, #2
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
	GPIO_InitStructure.Speed     = GPIO_SPEED_HIGH;
 8002432:	2303      	movs	r3, #3
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
 8002434:	ac06      	add	r4, sp, #24
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
	GPIO_InitStructure.Speed     = GPIO_SPEED_HIGH;
 8002436:	9304      	str	r3, [sp, #16]
	GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002438:	230c      	movs	r3, #12
 800243a:	9305      	str	r3, [sp, #20]
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
 800243c:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002440:	f844 3d14 	str.w	r3, [r4, #-20]!
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 8002444:	2602      	movs	r6, #2
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
 8002446:	2501      	movs	r5, #1
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002448:	4621      	mov	r1, r4
	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	
	GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800244a:	9602      	str	r6, [sp, #8]
	GPIO_InitStructure.Pull      = GPIO_PULLUP;
 800244c:	9503      	str	r5, [sp, #12]
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | /*GPIO_PIN_11 |*/ GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800244e:	f006 f963 	bl	8008718 <HAL_GPIO_Init>
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002452:	f64f 7388 	movw	r3, #65416	; 0xff88
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002456:	4621      	mov	r1, r4
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <HAL_SRAM_MspInit+0x84>)
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800245a:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800245c:	f006 f95c 	bl	8008718 <HAL_GPIO_Init>
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin		= GPIO_PIN_1;
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed	= GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002460:	4638      	mov	r0, r7
 8002462:	4621      	mov	r1, r4
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
	
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin		= GPIO_PIN_1;
 8002464:	9601      	str	r6, [sp, #4]
	GPIO_InitStructure.Mode		= GPIO_MODE_OUTPUT_PP;
 8002466:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.Speed	= GPIO_SPEED_FAST;
 8002468:	9604      	str	r6, [sp, #16]
	GPIO_InitStructure.Pull		= GPIO_PULLUP;
 800246a:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800246c:	f006 f954 	bl	8008718 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002470:	4638      	mov	r0, r7
 8002472:	4631      	mov	r1, r6
 8002474:	462a      	mov	r2, r5
 8002476:	f006 faa1 	bl	80089bc <HAL_GPIO_WritePin>
	
}
 800247a:	b007      	add	sp, #28
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40020400 	.word	0x40020400
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
*/
void HAL_MspInit(void)
{
 8002490:	4770      	bx	lr

08002492 <_close>:
    }
}

int _close(int file) {
    return -1;
}
 8002492:	f04f 30ff 	mov.w	r0, #4294967295
 8002496:	4770      	bx	lr

08002498 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 8002498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249c:	604b      	str	r3, [r1, #4]
    return 0;
}
 800249e:	2000      	movs	r0, #0
 80024a0:	4770      	bx	lr

080024a2 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
    return 1;
}
 80024a2:	2001      	movs	r0, #1
 80024a4:	4770      	bx	lr
	...

080024a8 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
    switch (file){
 80024a8:	2802      	cmp	r0, #2
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 80024aa:	bf81      	itttt	hi
 80024ac:	4b03      	ldrhi	r3, [pc, #12]	; (80024bc <_isatty+0x14>)
 80024ae:	2209      	movhi	r2, #9
        return 0;
 80024b0:	2000      	movhi	r0, #0
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 80024b2:	601a      	strhi	r2, [r3, #0]
int _isatty(int file) {
    switch (file){
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 80024b4:	bf98      	it	ls
 80024b6:	2001      	movls	r0, #1
    default:
        //errno = ENOTTY;
        errno = EBADF;
        return 0;
    }
}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2000ec5c 	.word	0x2000ec5c

080024c0 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
    errno = EINVAL;
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <_kill+0xc>)
 80024c2:	2216      	movs	r2, #22
 80024c4:	601a      	str	r2, [r3, #0]
    return (-1);
}
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	4770      	bx	lr
 80024cc:	2000ec5c 	.word	0x2000ec5c

080024d0 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
    return 0;
}
 80024d0:	2000      	movs	r0, #0
 80024d2:	4770      	bx	lr

080024d4 <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	460e      	mov	r6, r1
 80024d8:	4614      	mov	r4, r2
    int n;
    int num = 0;
    switch (file) {
 80024da:	b940      	cbnz	r0, 80024ee <_read+0x1a>
 80024dc:	460d      	mov	r5, r1
 80024de:	1bab      	subs	r3, r5, r6
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 80024e0:	42a3      	cmp	r3, r4
 80024e2:	da0a      	bge.n	80024fa <_read+0x26>
            *ptr++ = __io_getchar();
 80024e4:	f7ff fd39 	bl	8001f5a <__io_getchar>
 80024e8:	f805 0b01 	strb.w	r0, [r5], #1
 80024ec:	e7f7      	b.n	80024de <_read+0xa>
            num++;
        }
        break;
    default:
        errno = EBADF;
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <_read+0x2c>)
 80024f0:	2209      	movs	r2, #9
 80024f2:	601a      	str	r2, [r3, #0]
        return -1;
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
 80024fa:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    }
    return num;
}
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	2000ec5c 	.word	0x2000ec5c

08002504 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
 8002504:	3801      	subs	r0, #1
 8002506:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	460e      	mov	r6, r1
 800250c:	4614      	mov	r4, r2
    int n;
    switch (file) {
 800250e:	d80a      	bhi.n	8002526 <_write+0x22>
 8002510:	460d      	mov	r5, r1
 8002512:	1bab      	subs	r3, r5, r6
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8002514:	42a3      	cmp	r3, r4
 8002516:	da04      	bge.n	8002522 <_write+0x1e>
					__io_putchar(*ptr++);
 8002518:	f815 0b01 	ldrb.w	r0, [r5], #1
 800251c:	f7ff fd16 	bl	8001f4c <__io_putchar>
 8002520:	e7f7      	b.n	8002512 <_write+0xe>
 8002522:	4620      	mov	r0, r4
 8002524:	bd70      	pop	{r4, r5, r6, pc}
        }
        break;
    default:
        errno = EBADF;
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <_write+0x30>)
 8002528:	2209      	movs	r2, #9
 800252a:	601a      	str	r2, [r3, #0]
        return -1;
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return len;
}
 8002530:	bd70      	pop	{r4, r5, r6, pc}
 8002532:	bf00      	nop
 8002534:	2000ec5c 	.word	0x2000ec5c

08002538 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002538:	b508      	push	{r3, lr}
    _write(1, "exit", 4);
 800253a:	2001      	movs	r0, #1
 800253c:	4902      	ldr	r1, [pc, #8]	; (8002548 <_exit+0x10>)
 800253e:	2204      	movs	r2, #4
 8002540:	f7ff ffe0 	bl	8002504 <_write>
    while (1) {
        ;
    }
 8002544:	e7fe      	b.n	8002544 <_exit+0xc>
 8002546:	bf00      	nop
 8002548:	0801ffa9 	.word	0x0801ffa9

0800254c <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 800254c:	b508      	push	{r3, lr}

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <_sbrk+0x38>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	b90a      	cbnz	r2, 8002558 <_sbrk+0xc>
        heap_end = &_ebss;
 8002554:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <_sbrk+0x3c>)
 8002556:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8002558:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 800255a:	f3ef 8208 	mrs	r2, MSP

char * stack = (char*) __get_MSP();

     if (heap_end + incr >  stack)
 800255e:	4418      	add	r0, r3
 8002560:	4290      	cmp	r0, r2
 8002562:	d90a      	bls.n	800257a <_sbrk+0x2e>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <_sbrk+0x40>)
 8002566:	2219      	movs	r2, #25
 8002568:	2002      	movs	r0, #2
 800256a:	f7ff ffcb 	bl	8002504 <_write>
         errno = ENOMEM;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_sbrk+0x44>)
 8002570:	220c      	movs	r2, #12
 8002572:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	bd08      	pop	{r3, pc}
         //abort ();
     }

    heap_end += incr;
 800257a:	4a02      	ldr	r2, [pc, #8]	; (8002584 <_sbrk+0x38>)
 800257c:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap_end;
 800257e:	4618      	mov	r0, r3

}
 8002580:	bd08      	pop	{r3, pc}
 8002582:	bf00      	nop
 8002584:	2000df30 	.word	0x2000df30
 8002588:	2000ec60 	.word	0x2000ec60
 800258c:	0801ffae 	.word	0x0801ffae
 8002590:	2000ec5c 	.word	0x2000ec5c

08002594 <__logger_info>:
  * @brief  Log all info
  * @param  *info string
  *	@param	args
  * @retval None
  */
void __logger_info(uint8_t *info, ...){	
 8002594:	b40f      	push	{r0, r1, r2, r3}
 8002596:	b513      	push	{r0, r1, r4, lr}
 8002598:	ab04      	add	r3, sp, #16
	va_list arp;
	
	va_start(arp, info);
	
	f_printf(&MyFile, "%s: %d C\n", info, (uint8_t)va_arg(arp, int));
 800259a:	4c09      	ldr	r4, [pc, #36]	; (80025c0 <__logger_info+0x2c>)
  * @brief  Log all info
  * @param  *info string
  *	@param	args
  * @retval None
  */
void __logger_info(uint8_t *info, ...){	
 800259c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list arp;
	
	va_start(arp, info);
 80025a0:	9301      	str	r3, [sp, #4]
	
	f_printf(&MyFile, "%s: %d C\n", info, (uint8_t)va_arg(arp, int));
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__logger_info+0x30>)
 80025a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80025a8:	4620      	mov	r0, r4
 80025aa:	f007 ffcb 	bl	800a544 <f_printf>
	
	va_end(arp);
	
	f_sync(&MyFile);
 80025ae:	4620      	mov	r0, r4
 80025b0:	f007 fc0d 	bl	8009dce <f_sync>
}
 80025b4:	b002      	add	sp, #8
 80025b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ba:	b004      	add	sp, #16
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000e604 	.word	0x2000e604
 80025c4:	0801ffc8 	.word	0x0801ffc8

080025c8 <create_logger>:
/**
  * @brief  Create a logger
  * @param  *filename -> long filename support Fatfs
  * @retval None
  */
void create_logger(uint8_t *filename){
 80025c8:	b508      	push	{r3, lr}
 80025ca:	4601      	mov	r1, r0
	if(f_open(&MyFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK){
 80025cc:	220a      	movs	r2, #10
 80025ce:	4807      	ldr	r0, [pc, #28]	; (80025ec <create_logger+0x24>)
 80025d0:	f007 fa22 	bl	8009a18 <f_open>
 80025d4:	b108      	cbz	r0, 80025da <create_logger+0x12>
		Error_Handler();
 80025d6:	f7ff fa6b 	bl	8001ab0 <Error_Handler>
	}
	
	printf("File created\n");
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <create_logger+0x28>)
 80025dc:	f017 f89a 	bl	8019714 <puts>
	
	f_sync(&MyFile);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <create_logger+0x24>)
 80025e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
	}
	
	printf("File created\n");
	
	f_sync(&MyFile);
 80025e6:	f007 bbf2 	b.w	8009dce <f_sync>
 80025ea:	bf00      	nop
 80025ec:	2000e604 	.word	0x2000e604
 80025f0:	0801ffd2 	.word	0x0801ffd2
 80025f4:	00000000 	.word	0x00000000

080025f8 <set_Temperature>:
	* @param	None
	* @note		API for temperature
	*	
	* @retval	None
*/
void set_Temperature(void){
 80025f8:	b538      	push	{r3, r4, r5, lr}
	*			polled.
	* @retval	None
*/

static void get_vADC(void){
	if(HAL_ADC_Start(&AdcHandle) != HAL_OK)
 80025fa:	4831      	ldr	r0, [pc, #196]	; (80026c0 <set_Temperature+0xc8>)
 80025fc:	f005 f968 	bl	80078d0 <HAL_ADC_Start>
 8002600:	b108      	cbz	r0, 8002606 <set_Temperature+0xe>
	{
		/* Start Conversation Error */
		Error_Handler();
 8002602:	f7ff fa55 	bl	8001ab0 <Error_Handler>
		//printf("conversion error\n");
	}
			
	HAL_ADC_PollForConversion(&AdcHandle, 1);
 8002606:	2101      	movs	r1, #1
 8002608:	482d      	ldr	r0, [pc, #180]	; (80026c0 <set_Temperature+0xc8>)
 800260a:	4c2e      	ldr	r4, [pc, #184]	; (80026c4 <set_Temperature+0xcc>)
 800260c:	f005 f9ac 	bl	8007968 <HAL_ADC_PollForConversion>
			
	if(HAL_ADC_GetState(&AdcHandle) == HAL_ADC_STATE_EOC_REG)
 8002610:	482b      	ldr	r0, [pc, #172]	; (80026c0 <set_Temperature+0xc8>)
 8002612:	f005 fa6b 	bl	8007aec <HAL_ADC_GetState>
 8002616:	2815      	cmp	r0, #21
 8002618:	d105      	bne.n	8002626 <set_Temperature+0x2e>
	{
		uhADCxConvertedValue = HAL_ADC_GetValue(&AdcHandle);
 800261a:	4829      	ldr	r0, [pc, #164]	; (80026c0 <set_Temperature+0xc8>)
 800261c:	f005 f9c8 	bl	80079b0 <HAL_ADC_GetValue>
 8002620:	f7fe fb0a 	bl	8000c38 <__aeabi_ui2f>
 8002624:	6020      	str	r0, [r4, #0]
	uint32_t	pad_res 	= 100000;
	float		therm_res;
	float		temp_val;
	float		temperature;
	
	therm_res = pad_res / ((ADC_res / uhADCxConvertedValue) - 1);
 8002626:	6821      	ldr	r1, [r4, #0]
 8002628:	f04f 408b 	mov.w	r0, #1166016512	; 0x45800000
 800262c:	f7fe fc10 	bl	8000e50 <__aeabi_fdiv>
 8002630:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002634:	f7fe fa4e 	bl	8000ad4 <__aeabi_fsub>
 8002638:	4601      	mov	r1, r0
 800263a:	4823      	ldr	r0, [pc, #140]	; (80026c8 <set_Temperature+0xd0>)
 800263c:	f7fe fc08 	bl	8000e50 <__aeabi_fdiv>
	
	temp_val = log(therm_res);
 8002640:	f7fd ff06 	bl	8000450 <__aeabi_f2d>
 8002644:	f016 fc6e 	bl	8018f24 <log>
 8002648:	f7fe f9f0 	bl	8000a2c <__aeabi_d2f>
	
	temperature = 1 / (a + (b * temp_val) + (c * temp_val * temp_val * temp_val));
 800264c:	491f      	ldr	r1, [pc, #124]	; (80026cc <set_Temperature+0xd4>)
	float		temp_val;
	float		temperature;
	
	therm_res = pad_res / ((ADC_res / uhADCxConvertedValue) - 1);
	
	temp_val = log(therm_res);
 800264e:	4604      	mov	r4, r0
	
	temperature = 1 / (a + (b * temp_val) + (c * temp_val * temp_val * temp_val));
 8002650:	f7fe fb4a 	bl	8000ce8 <__aeabi_fmul>
 8002654:	491e      	ldr	r1, [pc, #120]	; (80026d0 <set_Temperature+0xd8>)
 8002656:	f7fe fa3f 	bl	8000ad8 <__addsf3>
 800265a:	491e      	ldr	r1, [pc, #120]	; (80026d4 <set_Temperature+0xdc>)
 800265c:	4605      	mov	r5, r0
 800265e:	4620      	mov	r0, r4
 8002660:	f7fe fb42 	bl	8000ce8 <__aeabi_fmul>
 8002664:	4621      	mov	r1, r4
 8002666:	f7fe fb3f 	bl	8000ce8 <__aeabi_fmul>
 800266a:	4621      	mov	r1, r4
 800266c:	f7fe fb3c 	bl	8000ce8 <__aeabi_fmul>
 8002670:	4601      	mov	r1, r0
 8002672:	4628      	mov	r0, r5
 8002674:	f7fe fa30 	bl	8000ad8 <__addsf3>
 8002678:	4601      	mov	r1, r0
 800267a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800267e:	f7fe fbe7 	bl	8000e50 <__aeabi_fdiv>
	temperature = temperature - 273.15;
 8002682:	f7fd fee5 	bl	8000450 <__aeabi_f2d>
 8002686:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <set_Temperature+0xc0>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd fd80 	bl	8000190 <__aeabi_dsub>
 8002690:	f7fe f9cc 	bl	8000a2c <__aeabi_d2f>
 8002694:	4604      	mov	r4, r0

	logger_info("Temperature", (uint8_t)temperature);
 8002696:	f7fe fc9d 	bl	8000fd4 <__aeabi_f2uiz>
 800269a:	b2c1      	uxtb	r1, r0
 800269c:	480e      	ldr	r0, [pc, #56]	; (80026d8 <set_Temperature+0xe0>)
 800269e:	f7ff ff79 	bl	8002594 <__logger_info>
	AGUI_UpdateCurTemperature((int8_t)temperature);
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7fe fc70 	bl	8000f88 <__aeabi_f2iz>
*/
void set_Temperature(void){
	get_vADC();
	
	convert_cTemperature();
}
 80026a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	
	temperature = 1 / (a + (b * temp_val) + (c * temp_val * temp_val * temp_val));
	temperature = temperature - 273.15;

	logger_info("Temperature", (uint8_t)temperature);
	AGUI_UpdateCurTemperature((int8_t)temperature);
 80026ac:	b240      	sxtb	r0, r0
 80026ae:	f000 ba37 	b.w	8002b20 <AGUI_UpdateCurTemperature>
 80026b2:	bf00      	nop
 80026b4:	f3af 8000 	nop.w
 80026b8:	66666666 	.word	0x66666666
 80026bc:	40711266 	.word	0x40711266
 80026c0:	2000e830 	.word	0x2000e830
 80026c4:	2000df34 	.word	0x2000df34
 80026c8:	47c35000 	.word	0x47c35000
 80026cc:	395e178d 	.word	0x395e178d
 80026d0:	3a5573fc 	.word	0x3a5573fc
 80026d4:	338e8708 	.word	0x338e8708
 80026d8:	0801ffdf 	.word	0x0801ffdf
 80026dc:	f3af 8000 	nop.w

080026e0 <UpdateSetToTemperature>:
*       Static code
*
**********************************************************************
*/

static void UpdateSetToTemperature(void){
 80026e0:	b507      	push	{r0, r1, r2, lr}
	char buf[8];
	WM_HWIN h;
	h = WM_GetDialogItem(hWinThermostat, ID_TEXT_1);	
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <UpdateSetToTemperature+0x1c>)
 80026e4:	f640 0109 	movw	r1, #2057	; 0x809
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	f00b fb4b 	bl	800dd84 <WM_GetDialogItem>
	//sprintf(buf,"%2d",g_manSetTmp);
	TEXT_SetText(h, buf);
 80026ee:	4669      	mov	r1, sp
 80026f0:	f008 fa6c 	bl	800abcc <TEXT_SetText>
}
 80026f4:	b003      	add	sp, #12
 80026f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026fa:	bf00      	nop
 80026fc:	2000e97c 	.word	0x2000e97c

08002700 <_cbFanImg>:
	GUI_DrawRect(0, 0, 62, 62);
	GUI_DrawRect(1, 1, 61, 61);
}

void _cbFanImg(WM_MESSAGE *pMsg){
	switch (pMsg->MsgId){
 8002700:	6803      	ldr	r3, [r0, #0]
 8002702:	2b0f      	cmp	r3, #15
	}	
	GUI_DrawRect(0, 0, 62, 62);
	GUI_DrawRect(1, 1, 61, 61);
}

void _cbFanImg(WM_MESSAGE *pMsg){
 8002704:	b510      	push	{r4, lr}
	switch (pMsg->MsgId){
 8002706:	d139      	bne.n	800277c <_cbFanImg+0x7c>
*/
#ifdef SHOW_FAN
static void _prv_AppDrawFun(void){
	static int idx;
	
	if (g_fanCtlVal == fanctl_off)
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <_cbFanImg+0x84>)
 800270a:	4c1f      	ldr	r4, [pc, #124]	; (8002788 <_cbFanImg+0x88>)
 800270c:	7819      	ldrb	r1, [r3, #0]
 800270e:	2902      	cmp	r1, #2
 8002710:	d101      	bne.n	8002716 <_cbFanImg+0x16>
	{
		GUI_DrawBitmap(&bmfan_Stop0, 2, 2);
 8002712:	481e      	ldr	r0, [pc, #120]	; (800278c <_cbFanImg+0x8c>)
 8002714:	e014      	b.n	8002740 <_cbFanImg+0x40>
		idx = 0;
	}
	else
	{	
		switch(idx++)
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	6022      	str	r2, [r4, #0]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d812      	bhi.n	8002746 <_cbFanImg+0x46>
 8002720:	e8df f003 	tbb	[pc, r3]
 8002724:	0c060402 	.word	0x0c060402
		{
		case 0:
			GUI_DrawBitmap(&bmfan_Rot0, 2, 2);
 8002728:	4819      	ldr	r0, [pc, #100]	; (8002790 <_cbFanImg+0x90>)
 800272a:	e002      	b.n	8002732 <_cbFanImg+0x32>
			break;
		case 1:
			GUI_DrawBitmap(&bmfan_Rot1, 2, 2);
 800272c:	4819      	ldr	r0, [pc, #100]	; (8002794 <_cbFanImg+0x94>)
 800272e:	e000      	b.n	8002732 <_cbFanImg+0x32>
			break;
		case 2:
			GUI_DrawBitmap(&bmfan_Rot2, 2, 2);
 8002730:	4819      	ldr	r0, [pc, #100]	; (8002798 <_cbFanImg+0x98>)
 8002732:	2102      	movs	r1, #2
 8002734:	460a      	mov	r2, r1
 8002736:	f010 fc3d 	bl	8012fb4 <GUI_DrawBitmap>
 800273a:	e006      	b.n	800274a <_cbFanImg+0x4a>
			break;		
		case 3:
			GUI_DrawBitmap(&bmfan_Rot3, 2, 2);
 800273c:	4817      	ldr	r0, [pc, #92]	; (800279c <_cbFanImg+0x9c>)
 800273e:	2102      	movs	r1, #2
 8002740:	460a      	mov	r2, r1
 8002742:	f010 fc37 	bl	8012fb4 <GUI_DrawBitmap>
			idx = 0;
			break;		
		default:
			idx = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	6023      	str	r3, [r4, #0]
		}
	}
	switch (g_airCtlVal)
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <_cbFanImg+0xa0>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d003      	beq.n	800275a <_cbFanImg+0x5a>
 8002752:	2b02      	cmp	r3, #2
 8002754:	d101      	bne.n	800275a <_cbFanImg+0x5a>
	{
	case airctl_cooler:
		GUI_SetColor(0x00DFA000);
		break;
	case airctl_heater:
		GUI_SetColor(GUI_LIGHTRED);
 8002756:	4813      	ldr	r0, [pc, #76]	; (80027a4 <_cbFanImg+0xa4>)
 8002758:	e000      	b.n	800275c <_cbFanImg+0x5c>
		break;
	default:
		GUI_SetColor(0x00DFA000);
 800275a:	4813      	ldr	r0, [pc, #76]	; (80027a8 <_cbFanImg+0xa8>)
 800275c:	f010 f806 	bl	801276c <GUI_SetColor>
		break;
	}	
	GUI_DrawRect(0, 0, 62, 62);
 8002760:	2000      	movs	r0, #0
 8002762:	223e      	movs	r2, #62	; 0x3e
 8002764:	4601      	mov	r1, r0
 8002766:	4613      	mov	r3, r2
 8002768:	f011 fe6a 	bl	8014440 <GUI_DrawRect>
	GUI_DrawRect(1, 1, 61, 61);
 800276c:	2001      	movs	r0, #1
 800276e:	223d      	movs	r2, #61	; 0x3d
 8002770:	4601      	mov	r1, r0
 8002772:	4613      	mov	r3, r2
			_prv_AppDrawFun();
			break;
		default:
			WM_DefaultProc(pMsg);
	}
}
 8002774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	default:
		GUI_SetColor(0x00DFA000);
		break;
	}	
	GUI_DrawRect(0, 0, 62, 62);
	GUI_DrawRect(1, 1, 61, 61);
 8002778:	f011 be62 	b.w	8014440 <GUI_DrawRect>
			_prv_AppDrawFun();
			break;
		default:
			WM_DefaultProc(pMsg);
	}
}
 800277c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	switch (pMsg->MsgId){
		case WM_PAINT:
			_prv_AppDrawFun();
			break;
		default:
			WM_DefaultProc(pMsg);
 8002780:	f00c bc4a 	b.w	800f018 <WM_DefaultProc>
 8002784:	2000e958 	.word	0x2000e958
 8002788:	2000df38 	.word	0x2000df38
 800278c:	08022004 	.word	0x08022004
 8002790:	08021fb4 	.word	0x08021fb4
 8002794:	08021fc8 	.word	0x08021fc8
 8002798:	08021fdc 	.word	0x08021fdc
 800279c:	08021ff0 	.word	0x08021ff0
 80027a0:	2000e980 	.word	0x2000e980
 80027a4:	008080ff 	.word	0x008080ff
 80027a8:	00dfa000 	.word	0x00dfa000

080027ac <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 80027ac:	b538      	push	{r3, r4, r5, lr}
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	2b26      	cmp	r3, #38	; 0x26

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 80027b2:	4604      	mov	r4, r0
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 80027b4:	f000 812a 	beq.w	8002a0c <_cbDialog+0x260>
 80027b8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80027bc:	f000 816f 	beq.w	8002a9e <_cbDialog+0x2f2>
 80027c0:	2b1d      	cmp	r3, #29
 80027c2:	f040 8168 	bne.w	8002a96 <_cbDialog+0x2ea>
	  case WM_INIT_DIALOG:
		// Initialization of 'Thermostat'
		hItem = pMsg->hWin;
 80027c6:	6845      	ldr	r5, [r0, #4]
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
 80027c8:	49b5      	ldr	r1, [pc, #724]	; (8002aa0 <_cbDialog+0x2f4>)
 80027ca:	4628      	mov	r0, r5
 80027cc:	f009 fd7a 	bl	800c2c4 <FRAMEWIN_SetFont>
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 80027d0:	4628      	mov	r0, r5
 80027d2:	210e      	movs	r1, #14
 80027d4:	f00a f836 	bl	800c844 <FRAMEWIN_SetTextAlign>
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
 80027d8:	4628      	mov	r0, r5
 80027da:	2100      	movs	r1, #0
 80027dc:	f009 fda4 	bl	800c328 <FRAMEWIN_SetTextColor>
		// Initialization of 'txtCurRTC'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 80027e0:	f640 0108 	movw	r1, #2056	; 0x808
 80027e4:	6860      	ldr	r0, [r4, #4]
 80027e6:	f00b facd 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "72");
 80027ea:	49ae      	ldr	r1, [pc, #696]	; (8002aa4 <_cbDialog+0x2f8>)
		hItem = pMsg->hWin;
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
		// Initialization of 'txtCurRTC'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 80027ec:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "72");
 80027ee:	f008 f9ed 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D64);
 80027f2:	4628      	mov	r0, r5
 80027f4:	49ac      	ldr	r1, [pc, #688]	; (8002aa8 <_cbDialog+0x2fc>)
 80027f6:	f008 fa11 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 80027fa:	4628      	mov	r0, r5
 80027fc:	210c      	movs	r1, #12
 80027fe:	f008 f9d3 	bl	800aba8 <TEXT_SetTextAlign>
		TEXT_SetTextColor(hItem, 0x00258D52);
 8002802:	4628      	mov	r0, r5
 8002804:	49a9      	ldr	r1, [pc, #676]	; (8002aac <_cbDialog+0x300>)
 8002806:	f008 f9bd 	bl	800ab84 <TEXT_SetTextColor>
		// Initialization of 'SetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 800280a:	f640 0109 	movw	r1, #2057	; 0x809
 800280e:	6860      	ldr	r0, [r4, #4]
 8002810:	f00b fab8 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
 8002814:	49a6      	ldr	r1, [pc, #664]	; (8002ab0 <_cbDialog+0x304>)
		TEXT_SetText(hItem, "72");
		TEXT_SetFont(hItem, GUI_FONT_D64);
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetTextColor(hItem, 0x00258D52);
		// Initialization of 'SetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 8002816:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
 8002818:	f008 fa00 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetText(hItem, "75");
 800281c:	4628      	mov	r0, r5
 800281e:	49a5      	ldr	r1, [pc, #660]	; (8002ab4 <_cbDialog+0x308>)
 8002820:	f008 f9d4 	bl	800abcc <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8002824:	4628      	mov	r0, r5
 8002826:	210e      	movs	r1, #14
 8002828:	f008 f9be 	bl	800aba8 <TEXT_SetTextAlign>
		// Initialization of 'txtEffSetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1B);
 800282c:	f641 0109 	movw	r1, #6153	; 0x1809
 8002830:	6860      	ldr	r0, [r4, #4]
 8002832:	f00b faa7 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "81");
 8002836:	49a0      	ldr	r1, [pc, #640]	; (8002ab8 <_cbDialog+0x30c>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
		TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
		TEXT_SetText(hItem, "75");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'txtEffSetToTmprt'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1B);
 8002838:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "81");
 800283a:	f008 f9c7 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D48);
 800283e:	4628      	mov	r0, r5
 8002840:	499e      	ldr	r1, [pc, #632]	; (8002abc <_cbDialog+0x310>)
 8002842:	f008 f9eb 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
 8002846:	4628      	mov	r0, r5
 8002848:	210c      	movs	r1, #12
 800284a:	f008 f9ad 	bl	800aba8 <TEXT_SetTextAlign>
		TEXT_SetTextColor(hItem, 0x008D2552);
 800284e:	4628      	mov	r0, r5
 8002850:	499b      	ldr	r1, [pc, #620]	; (8002ac0 <_cbDialog+0x314>)
 8002852:	f008 f997 	bl	800ab84 <TEXT_SetTextColor>
		// Initialization of 'txtFanCtl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 8002856:	f44f 6103 	mov.w	r1, #2096	; 0x830
 800285a:	6860      	ldr	r0, [r4, #4]
 800285c:	f00b fa92 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_TOP);
 8002860:	2102      	movs	r1, #2
		TEXT_SetText(hItem, "81");
		TEXT_SetFont(hItem, GUI_FONT_D48);
		TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetTextColor(hItem, 0x008D2552);
		// Initialization of 'txtFanCtl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 8002862:	4605      	mov	r5, r0
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_TOP);
 8002864:	f008 f9a0 	bl	800aba8 <TEXT_SetTextAlign>
		TEXT_SetText(hItem, "Fan");
 8002868:	4628      	mov	r0, r5
 800286a:	4996      	ldr	r1, [pc, #600]	; (8002ac4 <_cbDialog+0x318>)
 800286c:	f008 f9ae 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
 8002870:	4628      	mov	r0, r5
 8002872:	4995      	ldr	r1, [pc, #596]	; (8002ac8 <_cbDialog+0x31c>)
 8002874:	f008 f9d2 	bl	800ac1c <TEXT_SetFont>
		// Initialization of 'FanControl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_0);
 8002878:	f640 0131 	movw	r1, #2097	; 0x831
 800287c:	6860      	ldr	r0, [r4, #4]
 800287e:	f00b fa81 	bl	800dd84 <WM_GetDialogItem>
		RADIO_SetText(hItem, "Auto", 0);
 8002882:	4992      	ldr	r1, [pc, #584]	; (8002acc <_cbDialog+0x320>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_TOP);
		TEXT_SetText(hItem, "Fan");
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		// Initialization of 'FanControl'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_0);
 8002884:	4605      	mov	r5, r0
		RADIO_SetText(hItem, "Auto", 0);
 8002886:	2200      	movs	r2, #0
 8002888:	f008 fc55 	bl	800b136 <RADIO_SetText>
		RADIO_SetText(hItem, "On", 1);
 800288c:	4628      	mov	r0, r5
 800288e:	2201      	movs	r2, #1
 8002890:	498f      	ldr	r1, [pc, #572]	; (8002ad0 <_cbDialog+0x324>)
 8002892:	f008 fc50 	bl	800b136 <RADIO_SetText>
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
 8002896:	4628      	mov	r0, r5
 8002898:	498e      	ldr	r1, [pc, #568]	; (8002ad4 <_cbDialog+0x328>)
 800289a:	f008 fc71 	bl	800b180 <RADIO_SetFont>
		RADIO_SetText(hItem, "Off", 2);
 800289e:	4628      	mov	r0, r5
 80028a0:	2202      	movs	r2, #2
 80028a2:	498d      	ldr	r1, [pc, #564]	; (8002ad8 <_cbDialog+0x32c>)
 80028a4:	f008 fc47 	bl	800b136 <RADIO_SetText>
		// Initialization of 'rdo_Cndtnr'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_1);
 80028a8:	f640 0133 	movw	r1, #2099	; 0x833
 80028ac:	6860      	ldr	r0, [r4, #4]
 80028ae:	f00b fa69 	bl	800dd84 <WM_GetDialogItem>
		RADIO_SetText(hItem, "Auto", 0);
 80028b2:	4986      	ldr	r1, [pc, #536]	; (8002acc <_cbDialog+0x320>)
		RADIO_SetText(hItem, "Auto", 0);
		RADIO_SetText(hItem, "On", 1);
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
		RADIO_SetText(hItem, "Off", 2);
		// Initialization of 'rdo_Cndtnr'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_1);
 80028b4:	4605      	mov	r5, r0
		RADIO_SetText(hItem, "Auto", 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	f008 fc3d 	bl	800b136 <RADIO_SetText>
		RADIO_SetText(hItem, "Cooler", 1);
 80028bc:	4628      	mov	r0, r5
 80028be:	2201      	movs	r2, #1
 80028c0:	4986      	ldr	r1, [pc, #536]	; (8002adc <_cbDialog+0x330>)
 80028c2:	f008 fc38 	bl	800b136 <RADIO_SetText>
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
 80028c6:	4628      	mov	r0, r5
 80028c8:	4982      	ldr	r1, [pc, #520]	; (8002ad4 <_cbDialog+0x328>)
 80028ca:	f008 fc59 	bl	800b180 <RADIO_SetFont>
		RADIO_SetText(hItem, "Heater", 2);
 80028ce:	4628      	mov	r0, r5
 80028d0:	4983      	ldr	r1, [pc, #524]	; (8002ae0 <_cbDialog+0x334>)
 80028d2:	2202      	movs	r2, #2
 80028d4:	f008 fc2f 	bl	800b136 <RADIO_SetText>
		RADIO_SetText(hItem, "Off", 3);
 80028d8:	2203      	movs	r2, #3
 80028da:	4628      	mov	r0, r5
 80028dc:	497e      	ldr	r1, [pc, #504]	; (8002ad8 <_cbDialog+0x32c>)
 80028de:	f008 fc2a 	bl	800b136 <RADIO_SetText>
		// Initialization of 'txtRTCH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 80028e2:	f640 0134 	movw	r1, #2100	; 0x834
 80028e6:	6860      	ldr	r0, [r4, #4]
 80028e8:	f00b fa4c 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "12");
 80028ec:	497d      	ldr	r1, [pc, #500]	; (8002ae4 <_cbDialog+0x338>)
		RADIO_SetText(hItem, "Cooler", 1);
		RADIO_SetFont(hItem, GUI_FONT_16B_ASCII);
		RADIO_SetText(hItem, "Heater", 2);
		RADIO_SetText(hItem, "Off", 3);
		// Initialization of 'txtRTCH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 80028ee:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "12");
 80028f0:	f008 f96c 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
 80028f4:	4628      	mov	r0, r5
 80028f6:	497c      	ldr	r1, [pc, #496]	; (8002ae8 <_cbDialog+0x33c>)
 80028f8:	f008 f990 	bl	800ac1c <TEXT_SetFont>
		// Initialization of 'txtRTCMH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4MH);
 80028fc:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8002900:	6860      	ldr	r0, [r4, #4]
 8002902:	f00b fa3f 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, ":");
 8002906:	4979      	ldr	r1, [pc, #484]	; (8002aec <_cbDialog+0x340>)
		// Initialization of 'txtRTCH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
		TEXT_SetText(hItem, "12");
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
		// Initialization of 'txtRTCMH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4MH);
 8002908:	4605      	mov	r5, r0
		TEXT_SetText(hItem, ":");
 800290a:	f008 f95f 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
 800290e:	4628      	mov	r0, r5
 8002910:	4975      	ldr	r1, [pc, #468]	; (8002ae8 <_cbDialog+0x33c>)
 8002912:	f008 f983 	bl	800ac1c <TEXT_SetFont>
		// Initialization of 'txtRTCM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4M);
 8002916:	f640 21a1 	movw	r1, #2721	; 0xaa1
 800291a:	6860      	ldr	r0, [r4, #4]
 800291c:	f00b fa32 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "00");
 8002920:	4973      	ldr	r1, [pc, #460]	; (8002af0 <_cbDialog+0x344>)
		// Initialization of 'txtRTCMH'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4MH);
		TEXT_SetText(hItem, ":");
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
		// Initialization of 'txtRTCM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4M);
 8002922:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "00");
 8002924:	f008 f952 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
 8002928:	4628      	mov	r0, r5
 800292a:	496f      	ldr	r1, [pc, #444]	; (8002ae8 <_cbDialog+0x33c>)
 800292c:	f008 f976 	bl	800ac1c <TEXT_SetFont>
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
 8002930:	f640 011e 	movw	r1, #2078	; 0x81e
 8002934:	6860      	ldr	r0, [r4, #4]
 8002936:	f00b fa25 	bl	800dd84 <WM_GetDialogItem>
		BUTTON_SetText(hItem, "main");
 800293a:	496e      	ldr	r1, [pc, #440]	; (8002af4 <_cbDialog+0x348>)
		// Initialization of 'txtRTCM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4M);
		TEXT_SetText(hItem, "00");
		TEXT_SetFont(hItem, GUI_FONT_D24X32);
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
 800293c:	4605      	mov	r5, r0
		BUTTON_SetText(hItem, "main");
 800293e:	f00a fd77 	bl	800d430 <BUTTON_SetText>
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 8002942:	4628      	mov	r0, r5
 8002944:	4963      	ldr	r1, [pc, #396]	; (8002ad4 <_cbDialog+0x328>)
 8002946:	f00a fd9b 	bl	800d480 <BUTTON_SetFont>
		// Initialization of 'txtPM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
 800294a:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800294e:	6860      	ldr	r0, [r4, #4]
 8002950:	f00b fa18 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "PM");
 8002954:	4968      	ldr	r1, [pc, #416]	; (8002af8 <_cbDialog+0x34c>)
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
		BUTTON_SetText(hItem, "main");
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
		// Initialization of 'txtPM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
 8002956:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "PM");
 8002958:	f008 f938 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 800295c:	4628      	mov	r0, r5
 800295e:	4967      	ldr	r1, [pc, #412]	; (8002afc <_cbDialog+0x350>)
 8002960:	f008 f95c 	bl	800ac1c <TEXT_SetFont>
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
 8002964:	f640 0121 	movw	r1, #2081	; 0x821
 8002968:	6860      	ldr	r0, [r4, #4]
 800296a:	f00b fa0b 	bl	800dd84 <WM_GetDialogItem>
		CHECKBOX_SetText(hItem, "Manual control");
 800296e:	4964      	ldr	r1, [pc, #400]	; (8002b00 <_cbDialog+0x354>)
		// Initialization of 'txtPM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
		TEXT_SetText(hItem, "PM");
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
 8002970:	4605      	mov	r5, r0
		CHECKBOX_SetText(hItem, "Manual control");
 8002972:	f00a f910 	bl	800cb96 <CHECKBOX_SetText>
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
 8002976:	4628      	mov	r0, r5
 8002978:	4956      	ldr	r1, [pc, #344]	; (8002ad4 <_cbDialog+0x328>)
 800297a:	f00a f94b 	bl	800cc14 <CHECKBOX_SetFont>
		CHECKBOX_SetState(hItem, 1);
 800297e:	4628      	mov	r0, r5
 8002980:	2101      	movs	r1, #1
 8002982:	f00a f92a 	bl	800cbda <CHECKBOX_SetState>
		g_manCtl.isEn = true;
 8002986:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <_cbDialog+0x358>)
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 8002988:	6860      	ldr	r0, [r4, #4]
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
		CHECKBOX_SetText(hItem, "Manual control");
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
		CHECKBOX_SetState(hItem, 1);
		g_manCtl.isEn = true;
 800298a:	2201      	movs	r2, #1
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 800298c:	f640 0124 	movw	r1, #2084	; 0x824
		// Initialization of 'chkManual'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_CHECKBOX_0);
		CHECKBOX_SetText(hItem, "Manual control");
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
		CHECKBOX_SetState(hItem, 1);
		g_manCtl.isEn = true;
 8002990:	701a      	strb	r2, [r3, #0]
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 8002992:	f00b f9f7 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 8002996:	4959      	ldr	r1, [pc, #356]	; (8002afc <_cbDialog+0x350>)
		CHECKBOX_SetText(hItem, "Manual control");
		CHECKBOX_SetFont(hItem, GUI_FONT_16B_ASCII);
		CHECKBOX_SetState(hItem, 1);
		g_manCtl.isEn = true;
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
 8002998:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 800299a:	f008 f93f 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetText(hItem, "Wed");
 800299e:	4628      	mov	r0, r5
 80029a0:	4959      	ldr	r1, [pc, #356]	; (8002b08 <_cbDialog+0x35c>)
 80029a2:	f008 f913 	bl	800abcc <TEXT_SetText>
		// Initialization of 'Text'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
 80029a6:	f640 0126 	movw	r1, #2086	; 0x826
 80029aa:	6860      	ldr	r0, [r4, #4]
 80029ac:	f00b f9ea 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "Adjust");
 80029b0:	4956      	ldr	r1, [pc, #344]	; (8002b0c <_cbDialog+0x360>)
		// Initialization of 'txtWeekday'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		TEXT_SetText(hItem, "Wed");
		// Initialization of 'Text'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
 80029b2:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "Adjust");
 80029b4:	f008 f90a 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
 80029b8:	4628      	mov	r0, r5
 80029ba:	4943      	ldr	r1, [pc, #268]	; (8002ac8 <_cbDialog+0x31c>)
 80029bc:	f008 f92e 	bl	800ac1c <TEXT_SetFont>
		// Initialization of 'txtAM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
 80029c0:	f640 0128 	movw	r1, #2088	; 0x828
 80029c4:	6860      	ldr	r0, [r4, #4]
 80029c6:	f00b f9dd 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "AM");
 80029ca:	4951      	ldr	r1, [pc, #324]	; (8002b10 <_cbDialog+0x364>)
		// Initialization of 'Text'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
		TEXT_SetText(hItem, "Adjust");
		TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
		// Initialization of 'txtAM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
 80029cc:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "AM");
 80029ce:	f008 f8fd 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
 80029d2:	4628      	mov	r0, r5
 80029d4:	4949      	ldr	r1, [pc, #292]	; (8002afc <_cbDialog+0x350>)
 80029d6:	f008 f921 	bl	800ac1c <TEXT_SetFont>
		// Slider Init
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
 80029da:	f640 0132 	movw	r1, #2098	; 0x832
 80029de:	6860      	ldr	r0, [r4, #4]
 80029e0:	f00b f9d0 	bl	800dd84 <WM_GetDialogItem>
		SLIDER_SetRange(hItem, 0, TEMP_MAX - TEMP_MIN);
 80029e4:	221e      	movs	r2, #30
 80029e6:	2100      	movs	r1, #0
		// Initialization of 'txtAM'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
		TEXT_SetText(hItem, "AM");
		TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
		// Slider Init
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
 80029e8:	4605      	mov	r5, r0
		SLIDER_SetRange(hItem, 0, TEMP_MAX - TEMP_MIN);
 80029ea:	f008 fb79 	bl	800b0e0 <SLIDER_SetRange>
		SLIDER_SetValue(hItem, TEMP_MAX - g_manSetTmp);
 80029ee:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <_cbDialog+0x368>)
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	4628      	mov	r0, r5
 80029f4:	f1c1 015f 	rsb	r1, r1, #95	; 0x5f
 80029f8:	f008 fa9c 	bl	800af34 <SLIDER_SetValue>
		
		s_hCurTemp = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 80029fc:	6860      	ldr	r0, [r4, #4]
 80029fe:	f640 0108 	movw	r1, #2056	; 0x808
 8002a02:	f00b f9bf 	bl	800dd84 <WM_GetDialogItem>
 8002a06:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <_cbDialog+0x36c>)
 8002a08:	6018      	str	r0, [r3, #0]
 8002a0a:	e02e      	b.n	8002a6a <_cbDialog+0x2be>
	  
	  case WM_TOUCH:
		break;
		
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 8002a0c:	6880      	ldr	r0, [r0, #8]
 8002a0e:	f00b f978 	bl	800dd02 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 8002a12:	f640 0231 	movw	r2, #2097	; 0x831
 8002a16:	4290      	cmp	r0, r2
	  
	  case WM_TOUCH:
		break;
		
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 8002a18:	4601      	mov	r1, r0
		NCode = pMsg->Data.v;
 8002a1a:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 8002a1c:	d00e      	beq.n	8002a3c <_cbDialog+0x290>
 8002a1e:	dc04      	bgt.n	8002a2a <_cbDialog+0x27e>
 8002a20:	f640 021e 	movw	r2, #2078	; 0x81e
 8002a24:	4290      	cmp	r0, r2
 8002a26:	d02e      	beq.n	8002a86 <_cbDialog+0x2da>
 8002a28:	bd38      	pop	{r3, r4, r5, pc}
 8002a2a:	f640 0232 	movw	r2, #2098	; 0x832
 8002a2e:	4290      	cmp	r0, r2
 8002a30:	d00e      	beq.n	8002a50 <_cbDialog+0x2a4>
 8002a32:	f640 0233 	movw	r2, #2099	; 0x833
 8002a36:	4290      	cmp	r0, r2
 8002a38:	d01b      	beq.n	8002a72 <_cbDialog+0x2c6>
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
			case ID_RADIO_0: // Notifications sent by 'FanControl'
			  switch(NCode) {
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d12e      	bne.n	8002a9e <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_0);
 8002a40:	6860      	ldr	r0, [r4, #4]
 8002a42:	f00b f99f 	bl	800dd84 <WM_GetDialogItem>
					t1 = RADIO_GetValue(hItem);
 8002a46:	f008 fd5e 	bl	800b506 <RADIO_GetValue>
					g_manCtl.fanCtl = (enm_FanCtl) t1;        
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <_cbDialog+0x358>)
 8002a4c:	7098      	strb	r0, [r3, #2]
					break;
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
				  }
			break;
			case ID_SLIDER_0: // Notifications sent by 'SetToSlider'
			  switch(NCode) {
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d124      	bne.n	8002a9e <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
 8002a54:	6860      	ldr	r0, [r4, #4]
 8002a56:	f00b f995 	bl	800dd84 <WM_GetDialogItem>
					g_manSetTmp = TEMP_MAX - SLIDER_GetValue(hItem);
 8002a5a:	f008 fb5e 	bl	800b11a <SLIDER_GetValue>
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <_cbDialog+0x368>)
 8002a60:	f1c0 005f 	rsb	r0, r0, #95	; 0x5f
 8002a64:	6018      	str	r0, [r3, #0]
					g_manCtl.cx16setTmp = g_manSetTmp;
 8002a66:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <_cbDialog+0x358>)
 8002a68:	6058      	str	r0, [r3, #4]
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 8002a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
					g_manSetTmp = TEMP_MAX - SLIDER_GetValue(hItem);
					g_manCtl.cx16setTmp = g_manSetTmp;
					UpdateSetToTemperature();
 8002a6e:	f7ff be37 	b.w	80026e0 <UpdateSetToTemperature>
					break;
			  }
			break;
			case ID_RADIO_1: // Notifications sent by 'rdo_Cndtnr'
			  switch(NCode) {
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d113      	bne.n	8002a9e <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					break;
				  case WM_NOTIFICATION_VALUE_CHANGED:
					hItem = WM_GetDialogItem(pMsg->hWin, ID_RADIO_1);
 8002a76:	6860      	ldr	r0, [r4, #4]
 8002a78:	f00b f984 	bl	800dd84 <WM_GetDialogItem>
					t1 = RADIO_GetValue(hItem);
 8002a7c:	f008 fd43 	bl	800b506 <RADIO_GetValue>
					g_manCtl.airCtl = (enm_AirCtl) t1;
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <_cbDialog+0x358>)
 8002a82:	7058      	strb	r0, [r3, #1]
					break;
 8002a84:	bd38      	pop	{r3, r4, r5, pc}
			  }
			break;
			case ID_BUTTON_9: // Notifications sent by 'btnSetup'
			  switch(NCode) {
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d109      	bne.n	8002a9e <_cbDialog+0x2f2>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <_cbDialog+0x370>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 8002a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			case ID_BUTTON_9: // Notifications sent by 'btnSetup'
			  switch(NCode) {
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 8002a92:	f000 b8d3 	b.w	8002c3c <ShowWindow>
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 8002a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			  }
			break;*/
		}
	  break;
	  default:
		WM_DefaultProc(pMsg);
 8002a9a:	f00c babd 	b.w	800f018 <WM_DefaultProc>
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	0802ca60 	.word	0x0802ca60
 8002aa4:	0801ffeb 	.word	0x0801ffeb
 8002aa8:	0802aa84 	.word	0x0802aa84
 8002aac:	00258d52 	.word	0x00258d52
 8002ab0:	0802eb3c 	.word	0x0802eb3c
 8002ab4:	0801ffee 	.word	0x0801ffee
 8002ab8:	0801fff1 	.word	0x0801fff1
 8002abc:	0802b840 	.word	0x0802b840
 8002ac0:	008d2552 	.word	0x008d2552
 8002ac4:	0801fff4 	.word	0x0801fff4
 8002ac8:	08031b98 	.word	0x08031b98
 8002acc:	0801fff8 	.word	0x0801fff8
 8002ad0:	0801fffd 	.word	0x0801fffd
 8002ad4:	080328c0 	.word	0x080328c0
 8002ad8:	08020000 	.word	0x08020000
 8002adc:	08020004 	.word	0x08020004
 8002ae0:	0802000b 	.word	0x0802000b
 8002ae4:	08020012 	.word	0x08020012
 8002ae8:	0802c00c 	.word	0x0802c00c
 8002aec:	08020015 	.word	0x08020015
 8002af0:	08020017 	.word	0x08020017
 8002af4:	0802001a 	.word	0x0802001a
 8002af8:	080200fc 	.word	0x080200fc
 8002afc:	08030c58 	.word	0x08030c58
 8002b00:	0802001f 	.word	0x0802001f
 8002b04:	2000e95c 	.word	0x2000e95c
 8002b08:	0802002e 	.word	0x0802002e
 8002b0c:	08020032 	.word	0x08020032
 8002b10:	080200f6 	.word	0x080200f6
 8002b14:	2000e970 	.word	0x2000e970
 8002b18:	2000df3c 	.word	0x2000df3c
 8002b1c:	2000e99c 	.word	0x2000e99c

08002b20 <AGUI_UpdateCurTemperature>:
	h = WM_GetDialogItem(hWinThermostat, ID_TEXT_1);	
	//sprintf(buf,"%2d",g_manSetTmp);
	TEXT_SetText(h, buf);
}

void AGUI_UpdateCurTemperature(int8_t f){
 8002b20:	b513      	push	{r0, r1, r4, lr}
 8002b22:	4602      	mov	r2, r0
	WM_HWIN h;
	char buf[8];
	sprintf(buf,"%2d", f);
 8002b24:	4917      	ldr	r1, [pc, #92]	; (8002b84 <AGUI_UpdateCurTemperature+0x64>)
 8002b26:	4668      	mov	r0, sp
 8002b28:	f016 fdfc 	bl	8019724 <sprintf>
	TEXT_SetText(s_hCurTemp, buf);
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <AGUI_UpdateCurTemperature+0x68>)
 8002b2e:	4669      	mov	r1, sp
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	f008 f84b 	bl	800abcc <TEXT_SetText>

	// update current effective set temperature (manual/program)
	h = WM_GetDialogItem(hWinThermostat, ID_TEXT_1B);
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <AGUI_UpdateCurTemperature+0x6c>)
 8002b38:	f641 0109 	movw	r1, #6153	; 0x1809
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	f00b f921 	bl	800dd84 <WM_GetDialogItem>
	if (g_manCtl.isEn)
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <AGUI_UpdateCurTemperature+0x70>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
	char buf[8];
	sprintf(buf,"%2d", f);
	TEXT_SetText(s_hCurTemp, buf);

	// update current effective set temperature (manual/program)
	h = WM_GetDialogItem(hWinThermostat, ID_TEXT_1B);
 8002b46:	4604      	mov	r4, r0
	if (g_manCtl.isEn)
 8002b48:	b153      	cbz	r3, 8002b60 <AGUI_UpdateCurTemperature+0x40>
	{
		sprintf(buf,"%2d",g_manSetTmp);
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <AGUI_UpdateCurTemperature+0x74>)
 8002b4c:	490d      	ldr	r1, [pc, #52]	; (8002b84 <AGUI_UpdateCurTemperature+0x64>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4668      	mov	r0, sp
 8002b52:	f016 fde7 	bl	8019724 <sprintf>
		TEXT_SetText(h, buf);
 8002b56:	4620      	mov	r0, r4
 8002b58:	4669      	mov	r1, sp
 8002b5a:	f008 f837 	bl	800abcc <TEXT_SetText>
 8002b5e:	e00b      	b.n	8002b78 <AGUI_UpdateCurTemperature+0x58>
	}
	else
	{
		if (g_pEffPgm)
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <AGUI_UpdateCurTemperature+0x78>)
 8002b62:	681b      	ldr	r3, [r3, #0]
			sprintf(buf, "%2d", g_pEffPgm->temp);
 8002b64:	4668      	mov	r0, sp
		sprintf(buf,"%2d",g_manSetTmp);
		TEXT_SetText(h, buf);
	}
	else
	{
		if (g_pEffPgm)
 8002b66:	b123      	cbz	r3, 8002b72 <AGUI_UpdateCurTemperature+0x52>
			sprintf(buf, "%2d", g_pEffPgm->temp);
 8002b68:	4906      	ldr	r1, [pc, #24]	; (8002b84 <AGUI_UpdateCurTemperature+0x64>)
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	f016 fdda 	bl	8019724 <sprintf>
 8002b70:	e002      	b.n	8002b78 <AGUI_UpdateCurTemperature+0x58>
		else
			sprintf(buf, "  ");
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <AGUI_UpdateCurTemperature+0x7c>)
 8002b74:	f016 fdfc 	bl	8019770 <strcpy>
	}
	TEXT_SetText(h, buf);
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4669      	mov	r1, sp
 8002b7c:	f008 f826 	bl	800abcc <TEXT_SetText>
}
 8002b80:	b002      	add	sp, #8
 8002b82:	bd10      	pop	{r4, pc}
 8002b84:	08020039 	.word	0x08020039
 8002b88:	2000df3c 	.word	0x2000df3c
 8002b8c:	2000e97c 	.word	0x2000e97c
 8002b90:	2000e95c 	.word	0x2000e95c
 8002b94:	2000e970 	.word	0x2000e970
 8002b98:	2000e950 	.word	0x2000e950
 8002b9c:	08029549 	.word	0x08029549

08002ba0 <CreateThermostat>:
*
*       CreateThermostat
**********************************************************************
*/

WM_HWIN CreateThermostat(void) {
 8002ba0:	b530      	push	{r4, r5, lr}
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
 8002ba2:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <CreateThermostat+0x50>)
*
*       CreateThermostat
**********************************************************************
*/

WM_HWIN CreateThermostat(void) {
 8002ba4:	b085      	sub	sp, #20
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
 8002ba6:	f009 fb77 	bl	800c298 <FRAMEWIN_SetDefaultSkin>
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
 8002baa:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <CreateThermostat+0x54>)
 8002bac:	f00a faf8 	bl	800d1a0 <BUTTON_SetDefaultSkin>

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), &_cbDialog, WM_HBKWIN, 0, 0);
 8002bb0:	f00b f8ec 	bl	800dd8c <WM_GetDesktopWindow>
 8002bb4:	2500      	movs	r5, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	9500      	str	r5, [sp, #0]
 8002bba:	9501      	str	r5, [sp, #4]
 8002bbc:	2111      	movs	r1, #17
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <CreateThermostat+0x58>)
 8002bc0:	480e      	ldr	r0, [pc, #56]	; (8002bfc <CreateThermostat+0x5c>)
 8002bc2:	f009 ff99 	bl	800caf8 <GUI_CreateDialogBox>
  #ifdef SHOW_FAN
	hWinFanImg = WM_CreateWindowAsChild(114, 104, 63, 63, 
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	223f      	movs	r2, #63	; 0x3f
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <CreateThermostat+0x60>)
 8002bce:	9000      	str	r0, [sp, #0]
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), &_cbDialog, WM_HBKWIN, 0, 0);
 8002bd0:	4604      	mov	r4, r0
  #ifdef SHOW_FAN
	hWinFanImg = WM_CreateWindowAsChild(114, 104, 63, 63, 
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	2168      	movs	r1, #104	; 0x68
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	9503      	str	r5, [sp, #12]
 8002bda:	2072      	movs	r0, #114	; 0x72
 8002bdc:	f00b feae 	bl	800e93c <WM_CreateWindowAsChild>
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <CreateThermostat+0x64>)
 8002be2:	6018      	str	r0, [r3, #0]
		hWin,
		WM_CF_FGND | WM_CF_MEMDEV | WM_CF_SHOW,
		_cbFanImg, 0
	);
  #endif
  WM_HideWindow(hWin);
 8002be4:	4620      	mov	r0, r4
 8002be6:	f00b f80a 	bl	800dbfe <WM_HideWindow>
  
  return hWin;
}
 8002bea:	4620      	mov	r0, r4
 8002bec:	b005      	add	sp, #20
 8002bee:	bd30      	pop	{r4, r5, pc}
 8002bf0:	0800bdc9 	.word	0x0800bdc9
 8002bf4:	0800ce81 	.word	0x0800ce81
 8002bf8:	080027ad 	.word	0x080027ad
 8002bfc:	08020100 	.word	0x08020100
 8002c00:	08002701 	.word	0x08002701
 8002c04:	2000e968 	.word	0x2000e968

08002c08 <_cbBkWindow>:
/*********************************************************************
	*	_cbBkWindow
	*		:CallBack for BkWindow
	**********************************************************************
*/
static void _cbBkWindow(WM_MESSAGE *pMsg){
 8002c08:	b508      	push	{r3, lr}
	switch(pMsg->MsgId){
 8002c0a:	6803      	ldr	r3, [r0, #0]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d10d      	bne.n	8002c2c <_cbBkWindow+0x24>
		case WM_PAINT:
		GUI_SetColor(GUI_WHITE);
 8002c10:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002c14:	f00f fdaa 	bl	801276c <GUI_SetColor>
		GUI_SetFont(&GUI_Font24_ASCII);
 8002c18:	4806      	ldr	r0, [pc, #24]	; (8002c34 <_cbBkWindow+0x2c>)
 8002c1a:	f00f fd79 	bl	8012710 <GUI_SetFont>
		GUI_DispStringAt(_acInfoText, 5, 40);
 8002c1e:	4806      	ldr	r0, [pc, #24]	; (8002c38 <_cbBkWindow+0x30>)
 8002c20:	2105      	movs	r1, #5
 8002c22:	2228      	movs	r2, #40	; 0x28
		break;
		default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 8002c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static void _cbBkWindow(WM_MESSAGE *pMsg){
	switch(pMsg->MsgId){
		case WM_PAINT:
		GUI_SetColor(GUI_WHITE);
		GUI_SetFont(&GUI_Font24_ASCII);
		GUI_DispStringAt(_acInfoText, 5, 40);
 8002c28:	f010 bb84 	b.w	8013334 <GUI_DispStringAt>
		break;
		default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 8002c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_SetColor(GUI_WHITE);
		GUI_SetFont(&GUI_Font24_ASCII);
		GUI_DispStringAt(_acInfoText, 5, 40);
		break;
		default:
		WM_DefaultProc(pMsg);
 8002c30:	f00c b9f2 	b.w	800f018 <WM_DefaultProc>
 8002c34:	0802fafc 	.word	0x0802fafc
 8002c38:	2000df44 	.word	0x2000df44

08002c3c <ShowWindow>:
	*		:Hide all windows and then show 'Window'
	**********************************************************************
*/
void ShowWindow(WM_HWIN window)
{
	WM_HideWindow(hWinThermostat);
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <ShowWindow+0x3c>)
	*	ShowWindow
	*		:Hide all windows and then show 'Window'
	**********************************************************************
*/
void ShowWindow(WM_HWIN window)
{
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	4604      	mov	r4, r0
	WM_HideWindow(hWinThermostat);
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f00a ffdb 	bl	800dbfe <WM_HideWindow>
	WM_HideWindow(hWinModbusStats);
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <ShowWindow+0x40>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	f00a ffd7 	bl	800dbfe <WM_HideWindow>
	WM_HideWindow(_hWindow4);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <ShowWindow+0x44>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	f00a ffd3 	bl	800dbfe <WM_HideWindow>
	WM_HideWindow(_hWindow5);
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <ShowWindow+0x48>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f00a ffcf 	bl	800dbfe <WM_HideWindow>
	WM_HideWindow(_hWindow6);
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <ShowWindow+0x4c>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	f00a ffcb 	bl	800dbfe <WM_HideWindow>
	//WM_HideWindow(hWinProgramTime);
	WM_ShowWindow(window);
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f00a fc92 	bl	800d592 <WM_ShowWindow>
	GUI_Exec();
}
 8002c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	WM_HideWindow(_hWindow4);
	WM_HideWindow(_hWindow5);
	WM_HideWindow(_hWindow6);
	//WM_HideWindow(hWinProgramTime);
	WM_ShowWindow(window);
	GUI_Exec();
 8002c72:	f00f bf79 	b.w	8012b68 <GUI_Exec>
 8002c76:	bf00      	nop
 8002c78:	2000e97c 	.word	0x2000e97c
 8002c7c:	2000e9a8 	.word	0x2000e9a8
 8002c80:	2000e99c 	.word	0x2000e99c
 8002c84:	2000e988 	.word	0x2000e988
 8002c88:	2000e998 	.word	0x2000e998

08002c8c <_cbWindow2>:
	**********************************************************************
*/
static void _cbWindow2(WM_MESSAGE *pMsg){
	GUI_COLOR Color;
	int Id, NCode;
	switch(pMsg->MsgId){
 8002c8c:	6803      	ldr	r3, [r0, #0]
 8002c8e:	2b0f      	cmp	r3, #15
/*********************************************************************
	*	_cbWindow2
	*		:CallBack for BkWindow
	**********************************************************************
*/
static void _cbWindow2(WM_MESSAGE *pMsg){
 8002c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c92:	4604      	mov	r4, r0
	GUI_COLOR Color;
	int Id, NCode;
	switch(pMsg->MsgId){
 8002c94:	d027      	beq.n	8002ce6 <_cbWindow2+0x5a>
 8002c96:	2b26      	cmp	r3, #38	; 0x26
 8002c98:	d130      	bne.n	8002cfc <_cbWindow2+0x70>
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 8002c9a:	6880      	ldr	r0, [r0, #8]
 8002c9c:	f00b f831 	bl	800dd02 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 8002ca0:	f640 0211 	movw	r2, #2065	; 0x811
 8002ca4:	4290      	cmp	r0, r2
	GUI_COLOR Color;
	int Id, NCode;
	switch(pMsg->MsgId){
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
		NCode = pMsg->Data.v;
 8002ca6:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 8002ca8:	d004      	beq.n	8002cb4 <_cbWindow2+0x28>
 8002caa:	f640 0212 	movw	r2, #2066	; 0x812
 8002cae:	4290      	cmp	r0, r2
 8002cb0:	d00c      	beq.n	8002ccc <_cbWindow2+0x40>
 8002cb2:	e025      	b.n	8002d00 <_cbWindow2+0x74>
			case ID_BUTTON_6: // Notifications sent by 'btnSetup'
			switch(NCode) {
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d123      	bne.n	8002d00 <_cbWindow2+0x74>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(_hWindow4);
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <_cbWindow2+0x78>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	f7ff ffbe 	bl	8002c3c <ShowWindow>
				PROGBAR_SetValue(_hProgBar_1, 0);
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <_cbWindow2+0x7c>)
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	f008 fecf 	bl	800ba68 <PROGBAR_SetValue>
 8002cca:	e019      	b.n	8002d00 <_cbWindow2+0x74>
				break;
			}
			break;
			case ID_BUTTON_7: // Notifications sent by 'btnSetup'
			switch(NCode) {
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d117      	bne.n	8002d00 <_cbWindow2+0x74>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				_ProgBarStat(_hProgBar_1);
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <_cbWindow2+0x7c>)
 8002cd2:	681d      	ldr	r5, [r3, #0]
*/
static void _ProgBarStat(PROGBAR_Handle _hProgBar){
	int n;
	
	//PROGBAR_SetValue(_hProgBar, -16383);
	for(n=0; n <= 100; n++){
 8002cd4:	2400      	movs	r4, #0
		PROGBAR_SetValue(_hProgBar, n);
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	4628      	mov	r0, r5
*/
static void _ProgBarStat(PROGBAR_Handle _hProgBar){
	int n;
	
	//PROGBAR_SetValue(_hProgBar, -16383);
	for(n=0; n <= 100; n++){
 8002cda:	3401      	adds	r4, #1
		PROGBAR_SetValue(_hProgBar, n);
 8002cdc:	f008 fec4 	bl	800ba68 <PROGBAR_SetValue>
*/
static void _ProgBarStat(PROGBAR_Handle _hProgBar){
	int n;
	
	//PROGBAR_SetValue(_hProgBar, -16383);
	for(n=0; n <= 100; n++){
 8002ce0:	2c65      	cmp	r4, #101	; 0x65
 8002ce2:	d1f8      	bne.n	8002cd6 <_cbWindow2+0x4a>
 8002ce4:	e00c      	b.n	8002d00 <_cbWindow2+0x74>
			}
			break;
		}
		break;
		case WM_PAINT:
		WM_GetUserData(pMsg->hWin, &Color, 4);
 8002ce6:	a901      	add	r1, sp, #4
 8002ce8:	2204      	movs	r2, #4
 8002cea:	6840      	ldr	r0, [r0, #4]
 8002cec:	f00a fc3b 	bl	800d566 <WM_GetUserData>
		GUI_SetBkColor(Color);
 8002cf0:	9801      	ldr	r0, [sp, #4]
 8002cf2:	f00f fd39 	bl	8012768 <GUI_SetBkColor>
		GUI_Clear();
 8002cf6:	f010 fced 	bl	80136d4 <GUI_Clear>
		break;
 8002cfa:	e001      	b.n	8002d00 <_cbWindow2+0x74>
		default:
		WM_DefaultProc(pMsg);
 8002cfc:	f00c f98c 	bl	800f018 <WM_DefaultProc>
		break;
	}
}
 8002d00:	b003      	add	sp, #12
 8002d02:	bd30      	pop	{r4, r5, pc}
 8002d04:	2000e99c 	.word	0x2000e99c
 8002d08:	2000df74 	.word	0x2000df74

08002d0c <_cbWindow1>:
/*********************************************************************
	*	_cbWindow1
	*		:CallBack for BkWindow
	**********************************************************************
*/
void _cbWindow1(WM_MESSAGE *pMsg){
 8002d0c:	b530      	push	{r4, r5, lr}
	WM_HWIN hWindow;
	GUI_COLOR Color;
	int Id, NCode;
	hWindow = pMsg->hWin;
	switch(pMsg->MsgId){
 8002d0e:	6803      	ldr	r3, [r0, #0]
 8002d10:	2b0f      	cmp	r3, #15
/*********************************************************************
	*	_cbWindow1
	*		:CallBack for BkWindow
	**********************************************************************
*/
void _cbWindow1(WM_MESSAGE *pMsg){
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	4604      	mov	r4, r0
	WM_HWIN hWindow;
	GUI_COLOR Color;
	int Id, NCode;
	hWindow = pMsg->hWin;
	switch(pMsg->MsgId){
 8002d16:	d043      	beq.n	8002da0 <_cbWindow1+0x94>
 8002d18:	2b26      	cmp	r3, #38	; 0x26
 8002d1a:	d14c      	bne.n	8002db6 <_cbWindow1+0xaa>
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 8002d1c:	6880      	ldr	r0, [r0, #8]
 8002d1e:	f00a fff0 	bl	800dd02 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 8002d22:	f6a0 000b 	subw	r0, r0, #2059	; 0x80b
	int Id, NCode;
	hWindow = pMsg->hWin;
	switch(pMsg->MsgId){
		case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
		NCode = pMsg->Data.v;
 8002d26:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	d846      	bhi.n	8002dba <_cbWindow1+0xae>
 8002d2c:	e8df f000 	tbb	[pc, r0]
 8002d30:	110a4506 	.word	0x110a4506
 8002d34:	45454545 	.word	0x45454545
 8002d38:	4545      	.short	0x4545
 8002d3a:	15          	.byte	0x15
 8002d3b:	00          	.byte	0x00
			case ID_BUTTON_0: // Notifications sent by 'btnSetup'
			switch(NCode) {
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d13c      	bne.n	8002dba <_cbWindow1+0xae>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(_hWindow5);
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <_cbWindow1+0xb4>)
 8002d42:	e002      	b.n	8002d4a <_cbWindow1+0x3e>
				break;
			}
			break;
			case ID_BUTTON_2: // Notifications sent by 'btnSetup'
			switch(NCode) {
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d138      	bne.n	8002dba <_cbWindow1+0xae>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(hWinModbusStats);
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <_cbWindow1+0xb8>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	f7ff ff76 	bl	8002c3c <ShowWindow>
 8002d50:	e033      	b.n	8002dba <_cbWindow1+0xae>
				break;
			}
			break;
			case ID_BUTTON_3: // Notifications sent by 'btnSetup'
			switch(NCode) {
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d131      	bne.n	8002dba <_cbWindow1+0xae>
				case WM_NOTIFICATION_CLICKED:
				break;
				case WM_NOTIFICATION_RELEASED:
				ShowWindow(hWinThermostat);
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <_cbWindow1+0xbc>)
 8002d58:	e7f7      	b.n	8002d4a <_cbWindow1+0x3e>
				break;
			}
			break;
			case ID_SLIDER_1:
			switch(NCode) {
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d12d      	bne.n	8002dba <_cbWindow1+0xae>
*/
static void _OnValueChanged(WM_HWIN hWindow, int Id){
	TIM_OC_InitTypeDef sConfig;
	uint16_t v;
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <_cbWindow1+0xc0>)
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	f008 f9da 	bl	800b11a <SLIDER_GetValue>
 8002d66:	4604      	mov	r4, r0
 8002d68:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8002d6c:	0064      	lsls	r4, r4, #1
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
		
		sConfig.OCMode			= TIM_OCMODE_PWM1;
		sConfig.OCPolarity		= TIM_OCPOLARITY_HIGH;
 8002d6e:	2500      	movs	r5, #0
	TIM_OC_InitTypeDef sConfig;
	uint16_t v;
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
 8002d70:	2100      	movs	r1, #0
 8002d72:	4817      	ldr	r0, [pc, #92]	; (8002dd0 <_cbWindow1+0xc4>)
*/
static void _OnValueChanged(WM_HWIN hWindow, int Id){
	TIM_OC_InitTypeDef sConfig;
	uint16_t v;
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
 8002d74:	3405      	adds	r4, #5
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
 8002d76:	f005 fc59 	bl	800862c <HAL_TIM_PWM_Stop>
		sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
		sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
		sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
		sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
		
		sConfig.Pulse = v;
 8002d7a:	b2a4      	uxth	r4, r4
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
		
		sConfig.OCMode			= TIM_OCMODE_PWM1;
 8002d7c:	2360      	movs	r3, #96	; 0x60
		sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
		sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
		sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
		
		sConfig.Pulse = v;
		HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1);
 8002d7e:	a901      	add	r1, sp, #4
 8002d80:	462a      	mov	r2, r5
 8002d82:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <_cbWindow1+0xc4>)
	if(Id == ID_SLIDER_1){
		v = SLIDER_GetValue(_hSlider_1) * 18 +5;
		
		HAL_TIM_PWM_Stop(&TimHandle_9, TIM_CHANNEL_1);
		
		sConfig.OCMode			= TIM_OCMODE_PWM1;
 8002d84:	9301      	str	r3, [sp, #4]
		sConfig.OCPolarity		= TIM_OCPOLARITY_HIGH;
 8002d86:	9503      	str	r5, [sp, #12]
		sConfig.OCNPolarity		= TIM_OCNPOLARITY_HIGH;
 8002d88:	9504      	str	r5, [sp, #16]
		sConfig.OCNIdleState	= TIM_OCNIDLESTATE_RESET;
 8002d8a:	9507      	str	r5, [sp, #28]
		sConfig.OCIdleState		= TIM_OCIDLESTATE_RESET;
 8002d8c:	9506      	str	r5, [sp, #24]
		sConfig.OCFastMode		= TIM_OCFAST_DISABLE;
 8002d8e:	9505      	str	r5, [sp, #20]
		
		sConfig.Pulse = v;
 8002d90:	9402      	str	r4, [sp, #8]
		HAL_TIM_PWM_ConfigChannel(&TimHandle_9, &sConfig, TIM_CHANNEL_1);
 8002d92:	f005 fa55 	bl	8008240 <HAL_TIM_PWM_ConfigChannel>
		
		HAL_TIM_PWM_Start(&TimHandle_9, TIM_CHANNEL_1);
 8002d96:	4629      	mov	r1, r5
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <_cbWindow1+0xc4>)
 8002d9a:	f005 fbe9 	bl	8008570 <HAL_TIM_PWM_Start>
 8002d9e:	e00c      	b.n	8002dba <_cbWindow1+0xae>
			}
			break;
		}
		break;
		case WM_PAINT:
		WM_GetUserData(pMsg->hWin, &Color, 4);
 8002da0:	a901      	add	r1, sp, #4
 8002da2:	2204      	movs	r2, #4
 8002da4:	6840      	ldr	r0, [r0, #4]
 8002da6:	f00a fbde 	bl	800d566 <WM_GetUserData>
		GUI_SetBkColor(Color);
 8002daa:	9801      	ldr	r0, [sp, #4]
 8002dac:	f00f fcdc 	bl	8012768 <GUI_SetBkColor>
		GUI_Clear();
 8002db0:	f010 fc90 	bl	80136d4 <GUI_Clear>
		break;
 8002db4:	e001      	b.n	8002dba <_cbWindow1+0xae>
		default:
		WM_DefaultProc(pMsg);
 8002db6:	f00c f92f 	bl	800f018 <WM_DefaultProc>
		break;
	}
}
 8002dba:	b009      	add	sp, #36	; 0x24
 8002dbc:	bd30      	pop	{r4, r5, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000e988 	.word	0x2000e988
 8002dc4:	2000e9a8 	.word	0x2000e9a8
 8002dc8:	2000e97c 	.word	0x2000e97c
 8002dcc:	2000df70 	.word	0x2000df70
 8002dd0:	2000e398 	.word	0x2000e398

08002dd4 <Init_GUI_verventa>:
/*********************************************************************
	*	Init_GUI_calor
	*		:Init all windows and callbacks for the GUI
	**********************************************************************
*/
ErrorStatus Init_GUI_verventa(void){
 8002dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*	_SetDesktopColor
	*		:Set Color for desktop Black
	**********************************************************************
*/
static void _SetDesktopColor(void){
	GUI_SetBkColor(GUI_BLUE);
 8002dd8:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
/*********************************************************************
	*	Init_GUI_calor
	*		:Init all windows and callbacks for the GUI
	**********************************************************************
*/
ErrorStatus Init_GUI_verventa(void){
 8002ddc:	b087      	sub	sp, #28
	*	_SetDesktopColor
	*		:Set Color for desktop Black
	**********************************************************************
*/
static void _SetDesktopColor(void){
	GUI_SetBkColor(GUI_BLUE);
 8002dde:	f00f fcc3 	bl	8012768 <GUI_SetBkColor>
	GUI_Clear();
 8002de2:	f010 fc77 	bl	80136d4 <GUI_Clear>
	*	_DrawInfoText
	*		:Drawes the info text directly on the display
	**********************************************************************
*/
static void _DrawInfoText(char *pStr){
	GUI_SetColor(GUI_WHITE);
 8002de6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	GUI_SetFont(&GUI_Font24_ASCII);
	GUI_DispStringHCenterAt("WindowManager - MultiCalor", 160, 5);
	GUI_SetFont(&GUI_Font8x16);
 8002dea:	f8df 83b8 	ldr.w	r8, [pc, #952]	; 80031a4 <Init_GUI_verventa+0x3d0>
	*	_CreateWindow
	*		:Create all windows
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002dee:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 80031a8 <Init_GUI_verventa+0x3d4>
 8002df2:	4fda      	ldr	r7, [pc, #872]	; (800315c <Init_GUI_verventa+0x388>)
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 8002df4:	4eda      	ldr	r6, [pc, #872]	; (8003160 <Init_GUI_verventa+0x38c>)
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002df6:	f8df b3b4 	ldr.w	fp, [pc, #948]	; 80031ac <Init_GUI_verventa+0x3d8>
 8002dfa:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80031b0 <Init_GUI_verventa+0x3dc>
	*	_DrawInfoText
	*		:Drawes the info text directly on the display
	**********************************************************************
*/
static void _DrawInfoText(char *pStr){
	GUI_SetColor(GUI_WHITE);
 8002dfe:	f00f fcb5 	bl	801276c <GUI_SetColor>
	GUI_SetFont(&GUI_Font24_ASCII);
 8002e02:	48d8      	ldr	r0, [pc, #864]	; (8003164 <Init_GUI_verventa+0x390>)
 8002e04:	f00f fc84 	bl	8012710 <GUI_SetFont>
	GUI_DispStringHCenterAt("WindowManager - MultiCalor", 160, 5);
 8002e08:	21a0      	movs	r1, #160	; 0xa0
 8002e0a:	2205      	movs	r2, #5
 8002e0c:	48d6      	ldr	r0, [pc, #856]	; (8003168 <Init_GUI_verventa+0x394>)
 8002e0e:	f010 fa6f 	bl	80132f0 <GUI_DispStringHCenterAt>
	GUI_SetFont(&GUI_Font8x16);
 8002e12:	4640      	mov	r0, r8
 8002e14:	f00f fc7c 	bl	8012710 <GUI_SetFont>
	GUI_DispStringAtCEOL(pStr, 5, 40);
 8002e18:	2228      	movs	r2, #40	; 0x28
 8002e1a:	2105      	movs	r1, #5
 8002e1c:	48d3      	ldr	r0, [pc, #844]	; (800316c <Init_GUI_verventa+0x398>)
 8002e1e:	f010 fa81 	bl	8013324 <GUI_DispStringAtCEOL>
*/
static void _SetDesktopColor(void){
	GUI_SetBkColor(GUI_BLUE);
	GUI_Clear();
	_DrawInfoText("WM_SetDesktopColor()");
	GUI_Exec();
 8002e22:	f00f fea1 	bl	8012b68 <GUI_Exec>
	//GUI_Delay(SPEED/2);
	WM_SetDesktopColor(GUI_BLACK);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f00a fcf2 	bl	800d810 <WM_SetDesktopColor>
	GUI_Exec();
 8002e2c:	f00f fe9c 	bl	8012b68 <GUI_Exec>
	//GUI_Delay(SPEED/2);
	GUI_SetBkColor(GUI_BLACK);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f00f fc99 	bl	8012768 <GUI_SetBkColor>
	WM_SetDesktopColor(GUI_INVALID_COLOR);
 8002e36:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 8002e3a:	f00a fce9 	bl	800d810 <WM_SetDesktopColor>
	*	_CreateWindow
	*		:Create all windows
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002e3e:	f00a ffa5 	bl	800dd8c <WM_GetDesktopWindow>
 8002e42:	4651      	mov	r1, sl
 8002e44:	f00a fd70 	bl	800d928 <WM_SetCallback>
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 8002e48:	2400      	movs	r4, #0
 8002e4a:	2506      	movs	r5, #6
 8002e4c:	4bc8      	ldr	r3, [pc, #800]	; (8003170 <Init_GUI_verventa+0x39c>)
	*	_CreateWindow
	*		:Create all windows
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002e4e:	6038      	str	r0, [r7, #0]
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 8002e50:	4621      	mov	r1, r4
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	9500      	str	r5, [sp, #0]
 8002e56:	9402      	str	r4, [sp, #8]
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e5e:	23f0      	movs	r3, #240	; 0xf0
 8002e60:	f00b fe1c 	bl	800ea9c <WM_CreateWindow>
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002e64:	f8cd b004 	str.w	fp, [sp, #4]
	**********************************************************************
*/
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
 8002e68:	6030      	str	r0, [r6, #0]
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	9500      	str	r5, [sp, #0]
 8002e6e:	9402      	str	r4, [sp, #8]
 8002e70:	4620      	mov	r0, r4
 8002e72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e76:	23f0      	movs	r3, #240	; 0xf0
 8002e78:	f00b fe10 	bl	800ea9c <WM_CreateWindow>
	//GUI_Delay(SPEED/3);
	_hWindow6 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e82:	23f0      	movs	r3, #240	; 0xf0
static void _CreateWindow(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
	
	_hWindow4 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow1, 0);
	//GUI_Delay(SPEED/3);
	_hWindow5 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002e84:	f8c9 0000 	str.w	r0, [r9]
	//GUI_Delay(SPEED/3);
	_hWindow6 = WM_CreateWindow(0, 0, 320, 240, WM_CF_SHOW | WM_CF_MEMDEV, _cbWindow2, 0);
 8002e88:	e88d 0820 	stmia.w	sp, {r5, fp}
 8002e8c:	9402      	str	r4, [sp, #8]
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f00b fe04 	bl	800ea9c <WM_CreateWindow>
 8002e94:	f8df b31c 	ldr.w	fp, [pc, #796]	; 80031b4 <Init_GUI_verventa+0x3e0>
 8002e98:	f8cb 0000 	str.w	r0, [fp]
	//GUI_Delay(SPEED/3);
	
	ShowWindow(_hWindow4);
 8002e9c:	6830      	ldr	r0, [r6, #0]
 8002e9e:	f7ff fecd 	bl	8002c3c <ShowWindow>
	*	_CreateWindowAsChild
	*		:Create all child windows
	**********************************************************************
*/
static void _CreateWindowAsChild(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002ea2:	f00a ff73 	bl	800dd8c <WM_GetDesktopWindow>
 8002ea6:	4651      	mov	r1, sl
 8002ea8:	f00a fd3e 	bl	800d928 <WM_SetCallback>
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
 8002eac:	6833      	ldr	r3, [r6, #0]
	*	_CreateWindowAsChild
	*		:Create all child windows
	**********************************************************************
*/
static void _CreateWindowAsChild(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
 8002eae:	6038      	str	r0, [r7, #0]
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f640 030b 	movw	r3, #2059	; 0x80b
 8002eb6:	2296      	movs	r2, #150	; 0x96
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	4621      	mov	r1, r4
 8002ebc:	2332      	movs	r3, #50	; 0x32
 8002ebe:	9502      	str	r5, [sp, #8]
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f00a f99e 	bl	800d202 <BUTTON_CreateAsChild>
 8002ec6:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 80031b8 <Init_GUI_verventa+0x3e4>
	BUTTON_SetFont(_hButton_button1, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button1, "Menu Load");
	BUTTON_SetFocussable(_hButton_button1, 1);
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
 8002eca:	4faa      	ldr	r7, [pc, #680]	; (8003174 <Init_GUI_verventa+0x3a0>)
	**********************************************************************
*/
static void _CreateWindowAsChild(void){
	_cbBkWindowOld = WM_SetCallback(WM_HBKWIN, _cbBkWindow);
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
 8002ecc:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button1, &GUI_Font8x16);
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	f00a fad5 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button1, "Menu Load");
 8002ed6:	f8da 0000 	ldr.w	r0, [sl]
 8002eda:	49a7      	ldr	r1, [pc, #668]	; (8003178 <Init_GUI_verventa+0x3a4>)
 8002edc:	f00a faa8 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button1, 1);
 8002ee0:	f8da 0000 	ldr.w	r0, [sl]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	f00a fadc 	bl	800d4a2 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
 8002eea:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
 8002eee:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 80031bc <Init_GUI_verventa+0x3e8>
	
	_hButton_button1 = BUTTON_CreateAsChild(0, 0, 150, 50, _hWindow4, ID_BUTTON_0, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button1, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button1, "Menu Load");
	BUTTON_SetFocussable(_hButton_button1, 1);
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
 8002ef2:	4639      	mov	r1, r7
 8002ef4:	f00a f940 	bl	800d178 <BUTTON_SetSkin>
	
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
 8002ef8:	6833      	ldr	r3, [r6, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f640 030c 	movw	r3, #2060	; 0x80c
 8002f00:	2296      	movs	r2, #150	; 0x96
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	9502      	str	r5, [sp, #8]
 8002f06:	2332      	movs	r3, #50	; 0x32
 8002f08:	4620      	mov	r0, r4
 8002f0a:	213c      	movs	r1, #60	; 0x3c
 8002f0c:	f00a f979 	bl	800d202 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button2, &GUI_Font8x16);
 8002f10:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button1, "Menu Load");
	BUTTON_SetFocussable(_hButton_button1, 1);
	BUTTON_SetSkin(_hButton_button1, BUTTON_SKIN_FLEX);
	
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
 8002f12:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button2, &GUI_Font8x16);
 8002f16:	f00a fab3 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button2, "Menu Reserve");
 8002f1a:	f8da 0000 	ldr.w	r0, [sl]
 8002f1e:	4997      	ldr	r1, [pc, #604]	; (800317c <Init_GUI_verventa+0x3a8>)
 8002f20:	f00a fa86 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button2, 1);
 8002f24:	f8da 0000 	ldr.w	r0, [sl]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	f00a faba 	bl	800d4a2 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button2, BUTTON_SKIN_FLEX);
 8002f2e:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
 8002f32:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80031c0 <Init_GUI_verventa+0x3ec>
	
	_hButton_button2 = BUTTON_CreateAsChild(0, 60, 150, 50, _hWindow4, ID_BUTTON_1, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button2, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button2, "Menu Reserve");
	BUTTON_SetFocussable(_hButton_button2, 1);
	BUTTON_SetSkin(_hButton_button2, BUTTON_SKIN_FLEX);
 8002f36:	4639      	mov	r1, r7
 8002f38:	f00a f91e 	bl	800d178 <BUTTON_SetSkin>
	
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
 8002f3c:	6833      	ldr	r3, [r6, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	f640 030d 	movw	r3, #2061	; 0x80d
 8002f44:	2296      	movs	r2, #150	; 0x96
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	9502      	str	r5, [sp, #8]
 8002f4a:	2332      	movs	r3, #50	; 0x32
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	2178      	movs	r1, #120	; 0x78
 8002f50:	f00a f957 	bl	800d202 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button3, &GUI_Font8x16);
 8002f54:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button2, "Menu Reserve");
	BUTTON_SetFocussable(_hButton_button2, 1);
	BUTTON_SetSkin(_hButton_button2, BUTTON_SKIN_FLEX);
	
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
 8002f56:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button3, &GUI_Font8x16);
 8002f5a:	f00a fa91 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button3, "Modbus Stats");
 8002f5e:	f8da 0000 	ldr.w	r0, [sl]
 8002f62:	4987      	ldr	r1, [pc, #540]	; (8003180 <Init_GUI_verventa+0x3ac>)
 8002f64:	f00a fa64 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button3, 1);
 8002f68:	f8da 0000 	ldr.w	r0, [sl]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	f00a fa98 	bl	800d4a2 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button3, BUTTON_SKIN_FLEX);
 8002f72:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
 8002f76:	f8df a24c 	ldr.w	sl, [pc, #588]	; 80031c4 <Init_GUI_verventa+0x3f0>
	
	_hButton_button3 = BUTTON_CreateAsChild(0, 120, 150, 50, _hWindow4, ID_BUTTON_2, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button3, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button3, "Modbus Stats");
	BUTTON_SetFocussable(_hButton_button3, 1);
	BUTTON_SetSkin(_hButton_button3, BUTTON_SKIN_FLEX);
 8002f7a:	4639      	mov	r1, r7
 8002f7c:	f00a f8fc 	bl	800d178 <BUTTON_SetSkin>
	
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
 8002f80:	6833      	ldr	r3, [r6, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f640 030e 	movw	r3, #2062	; 0x80e
 8002f88:	2296      	movs	r2, #150	; 0x96
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	2332      	movs	r3, #50	; 0x32
 8002f90:	9502      	str	r5, [sp, #8]
 8002f92:	20a0      	movs	r0, #160	; 0xa0
 8002f94:	f00a f935 	bl	800d202 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button4, &GUI_Font8x16);
 8002f98:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button3, "Modbus Stats");
	BUTTON_SetFocussable(_hButton_button3, 1);
	BUTTON_SetSkin(_hButton_button3, BUTTON_SKIN_FLEX);
	
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
 8002f9a:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button4, &GUI_Font8x16);
 8002f9e:	f00a fa6f 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button4, "Menu Vent");
 8002fa2:	f8da 0000 	ldr.w	r0, [sl]
 8002fa6:	4977      	ldr	r1, [pc, #476]	; (8003184 <Init_GUI_verventa+0x3b0>)
 8002fa8:	f00a fa42 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button4, 1);
 8002fac:	f8da 0000 	ldr.w	r0, [sl]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	f00a fa76 	bl	800d4a2 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button4, BUTTON_SKIN_FLEX);
 8002fb6:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
 8002fba:	f8df a20c 	ldr.w	sl, [pc, #524]	; 80031c8 <Init_GUI_verventa+0x3f4>
	
	_hButton_button4 = BUTTON_CreateAsChild(160, 0, 150, 50, _hWindow4, ID_BUTTON_3, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button4, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button4, "Menu Vent");
	BUTTON_SetFocussable(_hButton_button4, 1);
	BUTTON_SetSkin(_hButton_button4, BUTTON_SKIN_FLEX);
 8002fbe:	4639      	mov	r1, r7
 8002fc0:	f00a f8da 	bl	800d178 <BUTTON_SetSkin>
	
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
 8002fc4:	6833      	ldr	r3, [r6, #0]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fcc:	2296      	movs	r2, #150	; 0x96
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	9502      	str	r5, [sp, #8]
 8002fd2:	2332      	movs	r3, #50	; 0x32
 8002fd4:	213c      	movs	r1, #60	; 0x3c
 8002fd6:	20a0      	movs	r0, #160	; 0xa0
 8002fd8:	f00a f913 	bl	800d202 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button5, &GUI_Font8x16);
 8002fdc:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button4, "Menu Vent");
	BUTTON_SetFocussable(_hButton_button4, 1);
	BUTTON_SetSkin(_hButton_button4, BUTTON_SKIN_FLEX);
	
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
 8002fde:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button5, &GUI_Font8x16);
 8002fe2:	f00a fa4d 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button5, "Touch Up");
 8002fe6:	f8da 0000 	ldr.w	r0, [sl]
 8002fea:	4967      	ldr	r1, [pc, #412]	; (8003188 <Init_GUI_verventa+0x3b4>)
 8002fec:	f00a fa20 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button5, 1);
 8002ff0:	f8da 0000 	ldr.w	r0, [sl]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	f00a fa54 	bl	800d4a2 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
 8002ffa:	f8da 0000 	ldr.w	r0, [sl]
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
 8002ffe:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80031cc <Init_GUI_verventa+0x3f8>
	
	_hButton_button5 = BUTTON_CreateAsChild(160, 60, 150, 50, _hWindow4, ID_BUTTON_4, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button5, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button5, "Touch Up");
	BUTTON_SetFocussable(_hButton_button5, 1);
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
 8003002:	4639      	mov	r1, r7
 8003004:	f00a f8b8 	bl	800d178 <BUTTON_SetSkin>
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
 8003008:	6833      	ldr	r3, [r6, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8003010:	2296      	movs	r2, #150	; 0x96
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	9502      	str	r5, [sp, #8]
 8003016:	2332      	movs	r3, #50	; 0x32
 8003018:	2178      	movs	r1, #120	; 0x78
 800301a:	20a0      	movs	r0, #160	; 0xa0
 800301c:	f00a f8f1 	bl	800d202 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
 8003020:	4641      	mov	r1, r8
	BUTTON_SetText(_hButton_button5, "Touch Up");
	BUTTON_SetFocussable(_hButton_button5, 1);
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
 8003022:	f8ca 0000 	str.w	r0, [sl]
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
 8003026:	f00a fa2b 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button6, "Touch Down");
 800302a:	f8da 0000 	ldr.w	r0, [sl]
 800302e:	4957      	ldr	r1, [pc, #348]	; (800318c <Init_GUI_verventa+0x3b8>)
	BUTTON_SetFocussable(_hButton_button6, 1);
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
 8003030:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80031d0 <Init_GUI_verventa+0x3fc>
	BUTTON_SetSkin(_hButton_button5, BUTTON_SKIN_FLEX);
	
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button6, "Touch Down");
 8003034:	f00a f9fc 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button6, 1);
 8003038:	f8da 0000 	ldr.w	r0, [sl]
 800303c:	2101      	movs	r1, #1
 800303e:	f00a fa30 	bl	800d4a2 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
 8003042:	f8da 0000 	ldr.w	r0, [sl]
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
 8003046:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80031d4 <Init_GUI_verventa+0x400>
	
	_hButton_button6 = BUTTON_CreateAsChild(160, 120, 150, 50, _hWindow4, ID_BUTTON_5, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button6, &GUI_Font8x16);
	BUTTON_SetText(_hButton_button6, "Touch Down");
	BUTTON_SetFocussable(_hButton_button6, 1);
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
 800304a:	4639      	mov	r1, r7
 800304c:	f00a f894 	bl	800d178 <BUTTON_SetSkin>
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
 8003050:	f8d9 3000 	ldr.w	r3, [r9]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2132      	movs	r1, #50	; 0x32
 8003058:	f640 0311 	movw	r3, #2065	; 0x811
 800305c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	9502      	str	r5, [sp, #8]
 8003064:	460b      	mov	r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	f00a f8cb 	bl	800d202 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
 800306c:	4651      	mov	r1, sl
	BUTTON_SetFocussable(_hButton_button6, 1);
	BUTTON_SetSkin(_hButton_button6, BUTTON_SKIN_FLEX);
	
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
 800306e:	f8c8 0000 	str.w	r0, [r8]
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
 8003072:	f00a fa05 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button7, "MAIN");
 8003076:	f8df c160 	ldr.w	ip, [pc, #352]	; 80031d8 <Init_GUI_verventa+0x404>
 800307a:	f8d8 0000 	ldr.w	r0, [r8]
 800307e:	f8cd c014 	str.w	ip, [sp, #20]
 8003082:	4661      	mov	r1, ip
 8003084:	f00a f9d4 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button7, 1);
 8003088:	f8d8 0000 	ldr.w	r0, [r8]
	
	
	_hButton_button8 = BUTTON_CreateAsChild(0, 110, 320, 50, _hWindow5, ID_BUTTON_7, WM_CF_SHOW | WM_CF_MEMDEV);
 800308c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80031dc <Init_GUI_verventa+0x408>
	
	
	_hButton_button7 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow5, ID_BUTTON_6, WM_CF_SHOW | WM_CF_MEMDEV);
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
	BUTTON_SetText(_hButton_button7, "MAIN");
	BUTTON_SetFocussable(_hButton_button7, 1);
 8003090:	2101      	movs	r1, #1
 8003092:	f00a fa06 	bl	800d4a2 <BUTTON_SetFocussable>
	
	
	_hButton_button8 = BUTTON_CreateAsChild(0, 110, 320, 50, _hWindow5, ID_BUTTON_7, WM_CF_SHOW | WM_CF_MEMDEV);
 8003096:	f8d9 3000 	ldr.w	r3, [r9]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	f640 0312 	movw	r3, #2066	; 0x812
 80030a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	9502      	str	r5, [sp, #8]
 80030a8:	2332      	movs	r3, #50	; 0x32
 80030aa:	4620      	mov	r0, r4
 80030ac:	216e      	movs	r1, #110	; 0x6e
 80030ae:	f00a f8a8 	bl	800d202 <BUTTON_CreateAsChild>
	BUTTON_SetFont(_hButton_button8, &GUI_Font24B_ASCII);
 80030b2:	4651      	mov	r1, sl
	BUTTON_SetFont(_hButton_button7, &GUI_Font24B_ASCII);
	BUTTON_SetText(_hButton_button7, "MAIN");
	BUTTON_SetFocussable(_hButton_button7, 1);
	
	
	_hButton_button8 = BUTTON_CreateAsChild(0, 110, 320, 50, _hWindow5, ID_BUTTON_7, WM_CF_SHOW | WM_CF_MEMDEV);
 80030b4:	f8c8 0000 	str.w	r0, [r8]
	BUTTON_SetFont(_hButton_button8, &GUI_Font24B_ASCII);
 80030b8:	f00a f9e2 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button8, "Load Temp");
 80030bc:	f8d8 0000 	ldr.w	r0, [r8]
 80030c0:	4933      	ldr	r1, [pc, #204]	; (8003190 <Init_GUI_verventa+0x3bc>)
 80030c2:	f00a f9b5 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button8, 1);
 80030c6:	f8d8 0000 	ldr.w	r0, [r8]
 80030ca:	2101      	movs	r1, #1
 80030cc:	f00a f9e9 	bl	800d4a2 <BUTTON_SetFocussable>
	BUTTON_SetSkin(_hButton_button8, BUTTON_SKIN_FLEX);
 80030d0:	f8d8 0000 	ldr.w	r0, [r8]
 80030d4:	4639      	mov	r1, r7
 80030d6:	f00a f84f 	bl	800d178 <BUTTON_SetSkin>
	
	
	_hProgBar_1 = PROGBAR_CreateAsChild(20, 200, 200, 25, _hWindow5, ID_PROGBAR_1, WM_CF_SHOW | WM_CF_MEMDEV);
 80030da:	f8d9 3000 	ldr.w	r3, [r9]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	21c8      	movs	r1, #200	; 0xc8
 80030e2:	f640 0314 	movw	r3, #2068	; 0x814
 80030e6:	460a      	mov	r2, r1
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	9502      	str	r5, [sp, #8]
 80030ec:	2319      	movs	r3, #25
 80030ee:	2014      	movs	r0, #20
 80030f0:	f008 fb90 	bl	800b814 <PROGBAR_CreateAsChild>
 80030f4:	4b27      	ldr	r3, [pc, #156]	; (8003194 <Init_GUI_verventa+0x3c0>)
	//PROGBAR_SetMinMax(_hProgBar_1, -16383, 16383);
	//PROGBAR_SetText(_hProgBar_1, "Load in temp...");
	PROGBAR_SetSkin(_hProgBar_1, PROGBAR_SKIN_FLEX);
 80030f6:	4928      	ldr	r1, [pc, #160]	; (8003198 <Init_GUI_verventa+0x3c4>)
	BUTTON_SetText(_hButton_button8, "Load Temp");
	BUTTON_SetFocussable(_hButton_button8, 1);
	BUTTON_SetSkin(_hButton_button8, BUTTON_SKIN_FLEX);
	
	
	_hProgBar_1 = PROGBAR_CreateAsChild(20, 200, 200, 25, _hWindow5, ID_PROGBAR_1, WM_CF_SHOW | WM_CF_MEMDEV);
 80030f8:	6018      	str	r0, [r3, #0]
	//PROGBAR_SetMinMax(_hProgBar_1, -16383, 16383);
	//PROGBAR_SetText(_hProgBar_1, "Load in temp...");
	PROGBAR_SetSkin(_hProgBar_1, PROGBAR_SKIN_FLEX);
 80030fa:	f008 fb77 	bl	800b7ec <PROGBAR_SetSkin>
	//PROGBAR_SetValue(_hProgBar_1, 50);
	
	_hButton_button9 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow6, ID_BUTTON_8, WM_CF_SHOW | WM_CF_MEMDEV);
 80030fe:	f8db 3000 	ldr.w	r3, [fp]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2132      	movs	r1, #50	; 0x32
 8003106:	f640 0313 	movw	r3, #2067	; 0x813
 800310a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	9502      	str	r5, [sp, #8]
 8003112:	460b      	mov	r3, r1
 8003114:	4620      	mov	r0, r4
 8003116:	f00a f874 	bl	800d202 <BUTTON_CreateAsChild>
 800311a:	4f20      	ldr	r7, [pc, #128]	; (800319c <Init_GUI_verventa+0x3c8>)
	BUTTON_SetFont(_hButton_button9, &GUI_Font24B_ASCII);
 800311c:	4651      	mov	r1, sl
	//PROGBAR_SetMinMax(_hProgBar_1, -16383, 16383);
	//PROGBAR_SetText(_hProgBar_1, "Load in temp...");
	PROGBAR_SetSkin(_hProgBar_1, PROGBAR_SKIN_FLEX);
	//PROGBAR_SetValue(_hProgBar_1, 50);
	
	_hButton_button9 = BUTTON_CreateAsChild(0, 50, 320, 50, _hWindow6, ID_BUTTON_8, WM_CF_SHOW | WM_CF_MEMDEV);
 800311e:	6038      	str	r0, [r7, #0]
	BUTTON_SetFont(_hButton_button9, &GUI_Font24B_ASCII);
 8003120:	f00a f9ae 	bl	800d480 <BUTTON_SetFont>
	BUTTON_SetText(_hButton_button9, "MAIN");
 8003124:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003128:	6838      	ldr	r0, [r7, #0]
 800312a:	4661      	mov	r1, ip
 800312c:	f00a f980 	bl	800d430 <BUTTON_SetText>
	BUTTON_SetFocussable(_hButton_button9, 1);
 8003130:	6838      	ldr	r0, [r7, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	f00a f9b5 	bl	800d4a2 <BUTTON_SetFocussable>
	
	_hSlider_1 = SLIDER_CreateEx(20, 180, 150, 35, _hWindow4, WM_CF_SHOW | WM_CF_MEMDEV, 0, ID_SLIDER_1);
 8003138:	6833      	ldr	r3, [r6, #0]
 800313a:	9402      	str	r4, [sp, #8]
 800313c:	e88d 0028 	stmia.w	sp, {r3, r5}
 8003140:	f640 0315 	movw	r3, #2069	; 0x815
 8003144:	21b4      	movs	r1, #180	; 0xb4
 8003146:	2296      	movs	r2, #150	; 0x96
 8003148:	9303      	str	r3, [sp, #12]
 800314a:	2014      	movs	r0, #20
 800314c:	2323      	movs	r3, #35	; 0x23
 800314e:	f007 fea7 	bl	800aea0 <SLIDER_CreateEx>
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <Init_GUI_verventa+0x3cc>)
 8003154:	6018      	str	r0, [r3, #0]
	
	GUI_Exec();
 8003156:	f00f fd07 	bl	8012b68 <GUI_Exec>
 800315a:	e041      	b.n	80031e0 <Init_GUI_verventa+0x40c>
 800315c:	2000df88 	.word	0x2000df88
 8003160:	2000e99c 	.word	0x2000e99c
 8003164:	0802fafc 	.word	0x0802fafc
 8003168:	080202dc 	.word	0x080202dc
 800316c:	080202f7 	.word	0x080202f7
 8003170:	08002d0d 	.word	0x08002d0d
 8003174:	0800ce81 	.word	0x0800ce81
 8003178:	0802030c 	.word	0x0802030c
 800317c:	08020316 	.word	0x08020316
 8003180:	08020323 	.word	0x08020323
 8003184:	08020330 	.word	0x08020330
 8003188:	0802033a 	.word	0x0802033a
 800318c:	08020343 	.word	0x08020343
 8003190:	08020353 	.word	0x08020353
 8003194:	2000df74 	.word	0x2000df74
 8003198:	0800b525 	.word	0x0800b525
 800319c:	2000df80 	.word	0x2000df80
 80031a0:	2000df70 	.word	0x2000df70
 80031a4:	0802ca60 	.word	0x0802ca60
 80031a8:	08002c09 	.word	0x08002c09
 80031ac:	08002c8d 	.word	0x08002c8d
 80031b0:	2000e988 	.word	0x2000e988
 80031b4:	2000e998 	.word	0x2000e998
 80031b8:	2000df40 	.word	0x2000df40
 80031bc:	2000df84 	.word	0x2000df84
 80031c0:	2000df6c 	.word	0x2000df6c
 80031c4:	2000df8c 	.word	0x2000df8c
 80031c8:	2000df90 	.word	0x2000df90
 80031cc:	2000df94 	.word	0x2000df94
 80031d0:	2000df78 	.word	0x2000df78
 80031d4:	08030c58 	.word	0x08030c58
 80031d8:	0802034e 	.word	0x0802034e
 80031dc:	2000df7c 	.word	0x2000df7c
*/
ErrorStatus Init_GUI_verventa(void){
	_SetDesktopColor();
	_CreateWindow();
	_CreateWindowAsChild();
	hWinThermostat	= CreateThermostat();
 80031e0:	f7ff fcde 	bl	8002ba0 <CreateThermostat>
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <Init_GUI_verventa+0x424>)
 80031e6:	6018      	str	r0, [r3, #0]
	hWinModbusStats	= CreateModbusStats();
 80031e8:	f000 f89a 	bl	8003320 <CreateModbusStats>
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <Init_GUI_verventa+0x428>)
 80031ee:	6018      	str	r0, [r3, #0]
	
	return(SUCCESS);
 80031f0:	2001      	movs	r0, #1
 80031f2:	b007      	add	sp, #28
 80031f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f8:	2000e97c 	.word	0x2000e97c
 80031fc:	2000e9a8 	.word	0x2000e9a8

08003200 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 8003200:	b538      	push	{r3, r4, r5, lr}
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 8003202:	6803      	ldr	r3, [r0, #0]
 8003204:	2b26      	cmp	r3, #38	; 0x26

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg){
 8003206:	4604      	mov	r4, r0
  WM_HWIN hItem;
  int Id, NCode, t1;

  switch (pMsg->MsgId) {
 8003208:	d064      	beq.n	80032d4 <_cbDialog+0xd4>
 800320a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800320e:	d075      	beq.n	80032fc <_cbDialog+0xfc>
 8003210:	2b1d      	cmp	r3, #29
 8003212:	d16f      	bne.n	80032f4 <_cbDialog+0xf4>
	  case WM_INIT_DIALOG:
		// Initialization of 'Thermostat'
		hItem = pMsg->hWin;
 8003214:	6845      	ldr	r5, [r0, #4]
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
 8003216:	493a      	ldr	r1, [pc, #232]	; (8003300 <_cbDialog+0x100>)
 8003218:	4628      	mov	r0, r5
 800321a:	f009 f853 	bl	800c2c4 <FRAMEWIN_SetFont>
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 800321e:	4628      	mov	r0, r5
 8003220:	210e      	movs	r1, #14
 8003222:	f009 fb0f 	bl	800c844 <FRAMEWIN_SetTextAlign>
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
 8003226:	4628      	mov	r0, r5
 8003228:	2100      	movs	r1, #0
 800322a:	f009 f87d 	bl	800c328 <FRAMEWIN_SetTextColor>
		// Initialization of 'modbus_TimeOut'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
 800322e:	6860      	ldr	r0, [r4, #4]
 8003230:	f640 0117 	movw	r1, #2071	; 0x817
 8003234:	f00a fda6 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetText(hItem, "modbus timeout");
 8003238:	4932      	ldr	r1, [pc, #200]	; (8003304 <_cbDialog+0x104>)
		hItem = pMsg->hWin;
		FRAMEWIN_SetFont(hItem, &GUI_Font8x16);
		FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		FRAMEWIN_SetTextColor(hItem, 0x00000000);
		// Initialization of 'modbus_TimeOut'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
 800323a:	4605      	mov	r5, r0
		TEXT_SetText(hItem, "modbus timeout");
 800323c:	f007 fcc6 	bl	800abcc <TEXT_SetText>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8003240:	4628      	mov	r0, r5
 8003242:	492f      	ldr	r1, [pc, #188]	; (8003300 <_cbDialog+0x100>)
 8003244:	f007 fcea 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 8003248:	4628      	mov	r0, r5
 800324a:	210e      	movs	r1, #14
 800324c:	f007 fcac 	bl	800aba8 <TEXT_SetTextAlign>
		// Initialization of 'modbus_Slaves'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
 8003250:	6860      	ldr	r0, [r4, #4]
 8003252:	f640 0118 	movw	r1, #2072	; 0x818
 8003256:	f00a fd95 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 800325a:	4929      	ldr	r1, [pc, #164]	; (8003300 <_cbDialog+0x100>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
		TEXT_SetText(hItem, "modbus timeout");
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'modbus_Slaves'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
 800325c:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 800325e:	f007 fcdd 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetText(hItem, "modbus slaves");
 8003262:	4628      	mov	r0, r5
 8003264:	4928      	ldr	r1, [pc, #160]	; (8003308 <_cbDialog+0x108>)
 8003266:	f007 fcb1 	bl	800abcc <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 800326a:	4628      	mov	r0, r5
 800326c:	210e      	movs	r1, #14
 800326e:	f007 fc9b 	bl	800aba8 <TEXT_SetTextAlign>
		// Initialization of 'modbus_connects'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_21);
 8003272:	6860      	ldr	r0, [r4, #4]
 8003274:	f641 0109 	movw	r1, #6153	; 0x1809
 8003278:	f00a fd84 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 800327c:	4920      	ldr	r1, [pc, #128]	; (8003300 <_cbDialog+0x100>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetText(hItem, "modbus slaves");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'modbus_connects'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_21);
 800327e:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 8003280:	f007 fccc 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetText(hItem, "modbus connections");
 8003284:	4628      	mov	r0, r5
 8003286:	4921      	ldr	r1, [pc, #132]	; (800330c <_cbDialog+0x10c>)
 8003288:	f007 fca0 	bl	800abcc <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 800328c:	4628      	mov	r0, r5
 800328e:	210e      	movs	r1, #14
 8003290:	f007 fc8a 	bl	800aba8 <TEXT_SetTextAlign>
		// Initialization of 'modbus_reserve'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_31);
 8003294:	6860      	ldr	r0, [r4, #4]
 8003296:	f640 0119 	movw	r1, #2073	; 0x819
 800329a:	f00a fd73 	bl	800dd84 <WM_GetDialogItem>
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 800329e:	4918      	ldr	r1, [pc, #96]	; (8003300 <_cbDialog+0x100>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_21);
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetText(hItem, "modbus connections");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'modbus_reserve'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_31);
 80032a0:	4605      	mov	r5, r0
		TEXT_SetFont(hItem, GUI_FONT_8X16);
 80032a2:	f007 fcbb 	bl	800ac1c <TEXT_SetFont>
		TEXT_SetText(hItem, "modbus stats");
 80032a6:	4628      	mov	r0, r5
 80032a8:	4919      	ldr	r1, [pc, #100]	; (8003310 <_cbDialog+0x110>)
 80032aa:	f007 fc8f 	bl	800abcc <TEXT_SetText>
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
 80032ae:	4628      	mov	r0, r5
 80032b0:	210e      	movs	r1, #14
 80032b2:	f007 fc79 	bl	800aba8 <TEXT_SetTextAlign>
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
 80032b6:	6860      	ldr	r0, [r4, #4]
 80032b8:	f640 011f 	movw	r1, #2079	; 0x81f
 80032bc:	f00a fd62 	bl	800dd84 <WM_GetDialogItem>
		BUTTON_SetText(hItem, "main");
 80032c0:	4914      	ldr	r1, [pc, #80]	; (8003314 <_cbDialog+0x114>)
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_31);
		TEXT_SetFont(hItem, GUI_FONT_8X16);
		TEXT_SetText(hItem, "modbus stats");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
 80032c2:	4604      	mov	r4, r0
		BUTTON_SetText(hItem, "main");
 80032c4:	f00a f8b4 	bl	800d430 <BUTTON_SetText>
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 80032c8:	4620      	mov	r0, r4
 80032ca:	4913      	ldr	r1, [pc, #76]	; (8003318 <_cbDialog+0x118>)
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80032cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TEXT_SetText(hItem, "modbus stats");
		TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		// Initialization of 'btnSetup'
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
		BUTTON_SetText(hItem, "main");
		BUTTON_SetFont(hItem, GUI_FONT_16B_ASCII);
 80032d0:	f00a b8d6 	b.w	800d480 <BUTTON_SetFont>
		break;
	  case WM_TOUCH:
		break;
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
 80032d4:	6880      	ldr	r0, [r0, #8]
 80032d6:	f00a fd14 	bl	800dd02 <WM_GetId>
		NCode = pMsg->Data.v;
		switch(Id) {
 80032da:	f640 021f 	movw	r2, #2079	; 0x81f
 80032de:	4290      	cmp	r0, r2
		break;
	  case WM_TOUCH:
		break;
	  case WM_NOTIFY_PARENT:
		Id    = WM_GetId(pMsg->hWinSrc);
		NCode = pMsg->Data.v;
 80032e0:	68e3      	ldr	r3, [r4, #12]
		switch(Id) {
 80032e2:	d10b      	bne.n	80032fc <_cbDialog+0xfc>
			case ID_BUTTON_10: // Notifications sent by 'btnSetup'
			  switch(NCode) {
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d109      	bne.n	80032fc <_cbDialog+0xfc>
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <_cbDialog+0x11c>)
 80032ea:	6818      	ldr	r0, [r3, #0]
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80032ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			case ID_BUTTON_10: // Notifications sent by 'btnSetup'
			  switch(NCode) {
				  case WM_NOTIFICATION_CLICKED:
					break;
				  case WM_NOTIFICATION_RELEASED:
					ShowWindow(_hWindow4);
 80032f0:	f7ff bca4 	b.w	8002c3c <ShowWindow>
	  break;
	  default:
		WM_DefaultProc(pMsg);
		break;
	}
}
 80032f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			  }
			break;
		}
	  break;
	  default:
		WM_DefaultProc(pMsg);
 80032f8:	f00b be8e 	b.w	800f018 <WM_DefaultProc>
 80032fc:	bd38      	pop	{r3, r4, r5, pc}
 80032fe:	bf00      	nop
 8003300:	0802ca60 	.word	0x0802ca60
 8003304:	0802035d 	.word	0x0802035d
 8003308:	0802036c 	.word	0x0802036c
 800330c:	0802037a 	.word	0x0802037a
 8003310:	0802038d 	.word	0x0802038d
 8003314:	0802001a 	.word	0x0802001a
 8003318:	080328c0 	.word	0x080328c0
 800331c:	2000e99c 	.word	0x2000e99c

08003320 <CreateModbusStats>:
*
*       CreateThermostat
**********************************************************************
*/

WM_HWIN CreateModbusStats(void) {
 8003320:	b513      	push	{r0, r1, r4, lr}
  WM_HWIN hWin;
  
  FRAMEWIN_SetDefaultSkin(FRAMEWIN_SKIN_FLEX);
 8003322:	480b      	ldr	r0, [pc, #44]	; (8003350 <CreateModbusStats+0x30>)
 8003324:	f008 ffb8 	bl	800c298 <FRAMEWIN_SetDefaultSkin>
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
 8003328:	480a      	ldr	r0, [pc, #40]	; (8003354 <CreateModbusStats+0x34>)
 800332a:	f009 ff39 	bl	800d1a0 <BUTTON_SetDefaultSkin>

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), &_cbDialog, WM_HBKWIN, 0, 0);
 800332e:	f00a fd2d 	bl	800dd8c <WM_GetDesktopWindow>
 8003332:	2200      	movs	r2, #0
 8003334:	4603      	mov	r3, r0
 8003336:	9200      	str	r2, [sp, #0]
 8003338:	9201      	str	r2, [sp, #4]
 800333a:	2106      	movs	r1, #6
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <CreateModbusStats+0x38>)
 800333e:	4807      	ldr	r0, [pc, #28]	; (800335c <CreateModbusStats+0x3c>)
 8003340:	f009 fbda 	bl	800caf8 <GUI_CreateDialogBox>
 8003344:	4604      	mov	r4, r0
  
  WM_HideWindow(hWin);
 8003346:	f00a fc5a 	bl	800dbfe <WM_HideWindow>
  
  return hWin;
}
 800334a:	4620      	mov	r0, r4
 800334c:	b002      	add	sp, #8
 800334e:	bd10      	pop	{r4, pc}
 8003350:	0800bdc9 	.word	0x0800bdc9
 8003354:	0800ce81 	.word	0x0800ce81
 8003358:	08003201 	.word	0x08003201
 800335c:	080203d8 	.word	0x080203d8

08003360 <UB_STemWIN_init>:
/**
  * @brief  This function Init STemWin Display Touchpanel.
  * @param  None
  * @retval ErrorStatus
  */
ErrorStatus UB_STemWIN_init(void){
 8003360:	b508      	push	{r3, lr}
  int16_t error_stat;
  uint8_t threshhold = 0;
  RCC_ClocksTypeDef RCC_Clocks;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE); // Don't forget!!
 8003362:	2101      	movs	r1, #1
 8003364:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003368:	f000 f8ae 	bl	80034c8 <RCC_AHB1PeriphClockCmd>
  
  /*	Display Init	*/
  init_ili9341();
 800336c:	f007 fa62 	bl	800a834 <init_ili9341>
  HAL_Delay(2);
 8003370:	2002      	movs	r0, #2
 8003372:	f005 fb8f 	bl	8008a94 <HAL_Delay>

  /*	Touch Init	*/
  FT6206_begin(threshhold);
 8003376:	2000      	movs	r0, #0
 8003378:	f007 fb7e 	bl	800aa78 <FT6206_begin>
  HAL_Delay(5);
 800337c:	2005      	movs	r0, #5
 800337e:	f005 fb89 	bl	8008a94 <HAL_Delay>

  /*	STemWin-GUI Init	*/
  if(GUI_Init()!=0) {
 8003382:	f010 f9e5 	bl	8013750 <GUI_Init>
    return(ERROR);
  }
  
  return(SUCCESS);
}
 8003386:	fab0 f080 	clz	r0, r0
 800338a:	0940      	lsrs	r0, r0, #5
 800338c:	bd08      	pop	{r3, pc}
	...

08003390 <UB_STemWIN_updateTouch>:
/**
  * @brief  This function updates Touch every 3ms.
  * @param  None
  * @retval None
  */
void UB_STemWIN_updateTouch(void){
 8003390:	b530      	push	{r4, r5, lr}
  GUI_PID_STATE TS_State;
  static uint8_t prev_state = 0;
  uint32_t TS_Orientation = 1;  // LandScape Mode
  
  if(Touch_Flagged == true){
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <UB_STemWIN_updateTouch+0x50>)
 8003394:	4c13      	ldr	r4, [pc, #76]	; (80033e4 <UB_STemWIN_updateTouch+0x54>)
 8003396:	781a      	ldrb	r2, [r3, #0]
/**
  * @brief  This function updates Touch every 3ms.
  * @param  None
  * @retval None
  */
void UB_STemWIN_updateTouch(void){
 8003398:	b085      	sub	sp, #20
 800339a:	461d      	mov	r5, r3
  GUI_PID_STATE TS_State;
  static uint8_t prev_state = 0;
  uint32_t TS_Orientation = 1;  // LandScape Mode
  
  if(Touch_Flagged == true){
 800339c:	b13a      	cbz	r2, 80033ae <UB_STemWIN_updateTouch+0x1e>
	  /*	Call Touches	*/
	  FT6206_read_data();
 800339e:	f007 fbbb 	bl	800ab18 <FT6206_read_data>
	  if(TS_Orientation == 0){
		TS_State.x = FT6206.touch_01_xpos;
		TS_State.y = FT6206.touch_01_ypos;
	  }
	  else{
		TS_State.y = 240 - FT6206.touch_01_xpos;
 80033a2:	88a3      	ldrh	r3, [r4, #4]
 80033a4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80033a8:	9302      	str	r3, [sp, #8]
		TS_State.x = FT6206.touch_01_ypos;
 80033aa:	8923      	ldrh	r3, [r4, #8]
 80033ac:	9301      	str	r3, [sp, #4]
	  }
  }
	
  if((FT6206.touch_points) != 0){
 80033ae:	7863      	ldrb	r3, [r4, #1]
 80033b0:	b103      	cbz	r3, 80033b4 <UB_STemWIN_updateTouch+0x24>
	TS_State.Pressed = 1;
 80033b2:	2301      	movs	r3, #1
  }
  else{
	TS_State.Pressed = 0;
 80033b4:	f88d 300c 	strb.w	r3, [sp, #12]
  }

  if(prev_state != TS_State.Pressed ){
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <UB_STemWIN_updateTouch+0x58>)
 80033ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80033be:	7819      	ldrb	r1, [r3, #0]
 80033c0:	4291      	cmp	r1, r2
 80033c2:	d006      	beq.n	80033d2 <UB_STemWIN_updateTouch+0x42>
	prev_state = TS_State.Pressed;
 80033c4:	701a      	strb	r2, [r3, #0]
	TS_State.Layer = 0;
	GUI_TOUCH_StoreStateEx(&TS_State);
 80033c6:	a801      	add	r0, sp, #4
	TS_State.Pressed = 0;
  }

  if(prev_state != TS_State.Pressed ){
	prev_state = TS_State.Pressed;
	TS_State.Layer = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f88d 300d 	strb.w	r3, [sp, #13]
	GUI_TOUCH_StoreStateEx(&TS_State);
 80033ce:	f00f f981 	bl	80126d4 <GUI_TOUCH_StoreStateEx>
  }
  GUI_Exec();
 80033d2:	f00f fbc9 	bl	8012b68 <GUI_Exec>
  
  Touch_Flagged = false;
 80033d6:	2300      	movs	r3, #0
 80033d8:	702b      	strb	r3, [r5, #0]
}
 80033da:	b005      	add	sp, #20
 80033dc:	bd30      	pop	{r4, r5, pc}
 80033de:	bf00      	nop
 80033e0:	2000d423 	.word	0x2000d423
 80033e4:	2000eac2 	.word	0x2000eac2
 80033e8:	2000df98 	.word	0x2000df98

080033ec <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U16 Data) {
  LCD_REG_ADDRESS = Data;
 80033ec:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80033f0:	8018      	strh	r0, [r3, #0]
 80033f2:	4770      	bx	lr

080033f4 <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U16 Data) {
  LCD_DATA_ADDRESS = Data;
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <LcdWriteData+0x8>)
 80033f6:	8018      	strh	r0, [r3, #0]
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	60100000 	.word	0x60100000

08003400 <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U16 * pData, int NumItems) {
 8003400:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  while (NumItems--) {
 8003404:	4288      	cmp	r0, r1
 8003406:	d004      	beq.n	8003412 <LcdWriteDataMultiple+0x12>
    LCD_DATA_ADDRESS = *pData++;
 8003408:	4b02      	ldr	r3, [pc, #8]	; (8003414 <LcdWriteDataMultiple+0x14>)
 800340a:	f830 2b02 	ldrh.w	r2, [r0], #2
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	e7f8      	b.n	8003404 <LcdWriteDataMultiple+0x4>
  }
}
 8003412:	4770      	bx	lr
 8003414:	60100000 	.word	0x60100000

08003418 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U16 * pData, int NumItems) {
 8003418:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  while (NumItems--) {
 800341c:	4288      	cmp	r0, r1
 800341e:	d004      	beq.n	800342a <LcdReadDataMultiple+0x12>
    *pData++ = LCD_DATA_ADDRESS;
 8003420:	4b02      	ldr	r3, [pc, #8]	; (800342c <LcdReadDataMultiple+0x14>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f820 3b02 	strh.w	r3, [r0], #2
 8003428:	e7f8      	b.n	800341c <LcdReadDataMultiple+0x4>
  }
}
 800342a:	4770      	bx	lr
 800342c:	60100000 	.word	0x60100000

08003430 <LCD_X_Config>:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/

void LCD_X_Config(void) {
 8003430:	b510      	push	{r4, lr}
 8003432:	b0a0      	sub	sp, #128	; 0x80
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8003434:	a801      	add	r0, sp, #4
 8003436:	2100      	movs	r1, #0
 8003438:	2214      	movs	r2, #20
 800343a:	f016 f8db 	bl	80195f4 <memset>
  GUI_PORT_API PortAPI = {0};
 800343e:	a806      	add	r0, sp, #24
 8003440:	2100      	movs	r1, #0
 8003442:	2268      	movs	r2, #104	; 0x68
 8003444:	f016 f8d6 	bl	80195f4 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	4613      	mov	r3, r2
 800344c:	4913      	ldr	r1, [pc, #76]	; (800349c <LCD_X_Config+0x6c>)
 800344e:	4814      	ldr	r0, [pc, #80]	; (80034a0 <LCD_X_Config+0x70>)
 8003450:	f010 f8a2 	bl	8013598 <GUI_DEVICE_CreateAndLink>
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8003454:	21f0      	movs	r1, #240	; 0xf0
  CONFIG_FLEXCOLOR Config = {0};
  GUI_PORT_API PortAPI = {0};
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);
 8003456:	4604      	mov	r4, r0
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8003458:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800345c:	2000      	movs	r0, #0
 800345e:	f00d ff26 	bl	80112ae <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8003462:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003466:	21f0      	movs	r1, #240	; 0xf0
 8003468:	2000      	movs	r0, #0
 800346a:	f00d ff09 	bl	8011280 <LCD_SetVSizeEx>

  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_MIRROR_Y; // Landscape
 800346e:	2306      	movs	r3, #6

  GUIDRV_FlexColor_Config(pDevice, &Config);
 8003470:	4620      	mov	r0, r4
 8003472:	a901      	add	r1, sp, #4
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);

  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_MIRROR_Y; // Landscape
 8003474:	9303      	str	r3, [sp, #12]

  GUIDRV_FlexColor_Config(pDevice, &Config);
 8003476:	f00d fea2 	bl	80111be <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = LcdWriteReg;
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <LCD_X_Config+0x74>)
 800347c:	930e      	str	r3, [sp, #56]	; 0x38
  PortAPI.pfWrite16_A1  = LcdWriteData;
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <LCD_X_Config+0x78>)
 8003480:	930f      	str	r3, [sp, #60]	; 0x3c
  PortAPI.pfWriteM16_A1 = LcdWriteDataMultiple;
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <LCD_X_Config+0x7c>)
 8003484:	9311      	str	r3, [sp, #68]	; 0x44
  PortAPI.pfReadM16_A1  = LcdReadDataMultiple;
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <LCD_X_Config+0x80>)
 8003488:	9315      	str	r3, [sp, #84]	; 0x54
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B16);
 800348a:	4620      	mov	r0, r4
 800348c:	a906      	add	r1, sp, #24
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <LCD_X_Config+0x84>)
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <LCD_X_Config+0x88>)
 8003492:	f00d feb2 	bl	80111fa <GUIDRV_FlexColor_SetFunc>
}
 8003496:	b020      	add	sp, #128	; 0x80
 8003498:	bd10      	pop	{r4, pc}
 800349a:	bf00      	nop
 800349c:	080342c0 	.word	0x080342c0
 80034a0:	08034150 	.word	0x08034150
 80034a4:	080033ed 	.word	0x080033ed
 80034a8:	080033f5 	.word	0x080033f5
 80034ac:	08003401 	.word	0x08003401
 80034b0:	08003419 	.word	0x08003419
 80034b4:	08010525 	.word	0x08010525
 80034b8:	08010bc1 	.word	0x08010bc1

080034bc <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;

  switch (Cmd) {
 80034bc:	2901      	cmp	r1, #1
  }
  default:
    r = -1;
  }
  return r;
}
 80034be:	bf14      	ite	ne
 80034c0:	f04f 30ff 	movne.w	r0, #4294967295
 80034c4:	2000      	moveq	r0, #0
 80034c6:	4770      	bx	lr

080034c8 <RCC_AHB1PeriphClockCmd>:
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <RCC_AHB1PeriphClockCmd+0x3c>)
 80034ca:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	4605      	mov	r5, r0
 80034d0:	460e      	mov	r6, r1
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 80034d2:	b903      	cbnz	r3, 80034d6 <RCC_AHB1PeriphClockCmd+0xe>
 80034d4:	b920      	cbnz	r0, 80034e0 <RCC_AHB1PeriphClockCmd+0x18>
 80034d6:	480c      	ldr	r0, [pc, #48]	; (8003508 <RCC_AHB1PeriphClockCmd+0x40>)
 80034d8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80034dc:	f7fe fd40 	bl	8001f60 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80034e0:	2e01      	cmp	r6, #1
 80034e2:	4c0a      	ldr	r4, [pc, #40]	; (800350c <RCC_AHB1PeriphClockCmd+0x44>)
 80034e4:	d905      	bls.n	80034f2 <RCC_AHB1PeriphClockCmd+0x2a>
 80034e6:	4808      	ldr	r0, [pc, #32]	; (8003508 <RCC_AHB1PeriphClockCmd+0x40>)
 80034e8:	f240 4142 	movw	r1, #1090	; 0x442
 80034ec:	f7fe fd38 	bl	8001f60 <assert_failed>
 80034f0:	e000      	b.n	80034f4 <RCC_AHB1PeriphClockCmd+0x2c>
  if (NewState != DISABLE)
 80034f2:	b116      	cbz	r6, 80034fa <RCC_AHB1PeriphClockCmd+0x32>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80034f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034f6:	431d      	orrs	r5, r3
 80034f8:	e002      	b.n	8003500 <RCC_AHB1PeriphClockCmd+0x38>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80034fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034fc:	ea23 0505 	bic.w	r5, r3, r5
 8003500:	6325      	str	r5, [r4, #48]	; 0x30
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	818bee00 	.word	0x818bee00
 8003508:	08028ce0 	.word	0x08028ce0
 800350c:	40023800 	.word	0x40023800

08003510 <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <GUI_X_Config+0xc>)
 8003512:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8003516:	f010 bd15 	b.w	8013f44 <GUI_ALLOC_AssignMemory>
 800351a:	bf00      	nop
 800351c:	20000c0c 	.word	0x20000c0c

08003520 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8003520:	4770      	bx	lr
	...

08003524 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <xMBPortEventInit+0xc>)
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 800352a:	2001      	movs	r0, #1
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000df99 	.word	0x2000df99

08003534 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8003534:	4a03      	ldr	r2, [pc, #12]	; (8003544 <xMBPortEventPost+0x10>)
 8003536:	2301      	movs	r3, #1
 8003538:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 800353a:	4a03      	ldr	r2, [pc, #12]	; (8003548 <xMBPortEventPost+0x14>)
 800353c:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 800353e:	4618      	mov	r0, r3
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2000df99 	.word	0x2000df99
 8003548:	2000df9a 	.word	0x2000df9a

0800354c <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 800354c:	4a05      	ldr	r2, [pc, #20]	; (8003564 <xMBPortEventGet+0x18>)
 800354e:	7813      	ldrb	r3, [r2, #0]
 8003550:	b133      	cbz	r3, 8003560 <xMBPortEventGet+0x14>
    {
        *eEvent = eQueuedEvent;
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <xMBPortEventGet+0x1c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 8003558:	2300      	movs	r3, #0
 800355a:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 800355c:	2001      	movs	r0, #1
 800355e:	4770      	bx	lr
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
 8003560:	4618      	mov	r0, r3
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
 8003562:	4770      	bx	lr
 8003564:	2000df99 	.word	0x2000df99
 8003568:	2000df9a 	.word	0x2000df9a

0800356c <vMBPortSerialEnable>:
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4c17      	ldr	r4, [pc, #92]	; (80035cc <vMBPortSerialEnable+0x60>)
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8003570:	6822      	ldr	r2, [r4, #0]
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8003572:	460d      	mov	r5, r1
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8003574:	68d3      	ldr	r3, [r2, #12]
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
    if( xRxEnable )
 8003576:	b130      	cbz	r0, 8003586 <vMBPortSerialEnable+0x1a>
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8003578:	f043 0320 	orr.w	r3, r3, #32
 800357c:	60d3      	str	r3, [r2, #12]
		printf("Receive enabled\n");
 800357e:	4814      	ldr	r0, [pc, #80]	; (80035d0 <vMBPortSerialEnable+0x64>)
 8003580:	f016 f8c8 	bl	8019714 <puts>
 8003584:	e002      	b.n	800358c <vMBPortSerialEnable+0x20>
    }
    else
    {
		/* Disable the UART Data Register not empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_RXNE);
 8003586:	f023 0320 	bic.w	r3, r3, #32
 800358a:	60d3      	str	r3, [r2, #12]
    }
    if( xTxEnable )
 800358c:	b19d      	cbz	r5, 80035b6 <vMBPortSerialEnable+0x4a>
    {
		/*	Enable DE transmit signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800358e:	2101      	movs	r1, #1
 8003590:	460a      	mov	r2, r1
 8003592:	4810      	ldr	r0, [pc, #64]	; (80035d4 <vMBPortSerialEnable+0x68>)
 8003594:	f005 fa12 	bl	80089bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003598:	2201      	movs	r2, #1
 800359a:	480e      	ldr	r0, [pc, #56]	; (80035d4 <vMBPortSerialEnable+0x68>)
 800359c:	2102      	movs	r1, #2
 800359e:	f005 fa0d 	bl	80089bc <HAL_GPIO_WritePin>
		/* Enable the UART Transmit data register empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TXE);
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	68d3      	ldr	r3, [r2, #12]
 80035a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035aa:	60d3      	str	r3, [r2, #12]
 * xMBPortSerialPutByte( ) to send the character.
 */
static void
prvvUARTTxReadyISR( void )
{
    pxMBFrameCBTransmitterEmpty();
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <vMBPortSerialEnable+0x6c>)
		/* Disable the UART Transmit data register empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_TXE);
		/* Enable the UART Transmit Complete Interrupt */    
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TC);
    }
}
 80035ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * xMBPortSerialPutByte( ) to send the character.
 */
static void
prvvUARTTxReadyISR( void )
{
    pxMBFrameCBTransmitterEmpty();
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4718      	bx	r3
        prvvUARTTxReadyISR();
    }
    else
    {
		/* Disable the UART Transmit data register empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_TXE);
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035be:	60da      	str	r2, [r3, #12]
		/* Enable the UART Transmit Complete Interrupt */    
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TC);
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	bd70      	pop	{r4, r5, r6, pc}
 80035ca:	bf00      	nop
 80035cc:	2000e2bc 	.word	0x2000e2bc
 80035d0:	08028cfd 	.word	0x08028cfd
 80035d4:	40020800 	.word	0x40020800
 80035d8:	2000e9ac 	.word	0x2000e9ac

080035dc <xMBPortSerialInit>:
	
	//Uart_Error = HAL_UART_GetError(&UartHandle);
	//printf("Uart_Error: %d\n", Uart_Error);

    return bInitialized;
}
 80035dc:	2001      	movs	r0, #1
 80035de:	4770      	bx	lr

080035e0 <xMBPortSerialPutByte>:
{
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	huart->Instance->DR = (uint8_t)ucByte;
 80035e0:	4b02      	ldr	r3, [pc, #8]	; (80035ec <xMBPortSerialPutByte+0xc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6058      	str	r0, [r3, #4]
    return TRUE;
}
 80035e6:	2001      	movs	r0, #1
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	2000e2bc 	.word	0x2000e2bc

080035f0 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte(CHAR * pucByte)
{
 80035f0:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	*pucByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <xMBPortSerialGetByte+0x18>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	7001      	strb	r1, [r0, #0]
	
	printf("*pucByte: %s\n", *pucByte);
 80035fa:	b2c9      	uxtb	r1, r1
 80035fc:	4803      	ldr	r0, [pc, #12]	; (800360c <xMBPortSerialGetByte+0x1c>)
 80035fe:	f016 f847 	bl	8019690 <printf>
	
    return TRUE;
}
 8003602:	2001      	movs	r0, #1
 8003604:	bd08      	pop	{r3, pc}
 8003606:	bf00      	nop
 8003608:	2000e2bc 	.word	0x2000e2bc
 800360c:	08028d0d 	.word	0x08028d0d

08003610 <HAL_UART_ErrorCallback>:
  * @param  UartHandle: UART handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
 8003610:	b510      	push	{r4, lr}
 8003612:	4604      	mov	r4, r0
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
 8003614:	4804      	ldr	r0, [pc, #16]	; (8003628 <HAL_UART_ErrorCallback+0x18>)
 8003616:	f016 f87d 	bl	8019714 <puts>
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 800361a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800361c:	4803      	ldr	r0, [pc, #12]	; (800362c <HAL_UART_ErrorCallback+0x1c>)
}
 800361e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 8003622:	f016 b835 	b.w	8019690 <printf>
 8003626:	bf00      	nop
 8003628:	08028d36 	.word	0x08028d36
 800362c:	08028d46 	.word	0x08028d46

08003630 <USART1_IRQHandler>:
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8003630:	b530      	push	{r4, r5, lr}
	UART_HandleTypeDef *huart;
	//printf("IRQ event\n");
	//HAL_UART_IRQHandler(&UartHandle);
	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003632:	4c3d      	ldr	r4, [pc, #244]	; (8003728 <USART1_IRQHandler+0xf8>)
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8003638:	68da      	ldr	r2, [r3, #12]
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 800363a:	07c9      	lsls	r1, r1, #31
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 800363c:	b085      	sub	sp, #20
	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 800363e:	d50a      	bpl.n	8003656 <USART1_IRQHandler+0x26>
 8003640:	05d2      	lsls	r2, r2, #23
 8003642:	d508      	bpl.n	8003656 <USART1_IRQHandler+0x26>
	{
		__HAL_UART_CLEAR_PEFLAG(huart);
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	9200      	str	r2, [sp, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	9200      	str	r2, [sp, #0]
 800364c:	9a00      	ldr	r2, [sp, #0]
		
		huart->ErrorCode |= HAL_UART_ERROR_PE;
 800364e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8003656:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003658:	695a      	ldr	r2, [r3, #20]
	/* UART frame error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 800365a:	078d      	lsls	r5, r1, #30
 800365c:	d50a      	bpl.n	8003674 <USART1_IRQHandler+0x44>
 800365e:	07d0      	lsls	r0, r2, #31
 8003660:	d508      	bpl.n	8003674 <USART1_IRQHandler+0x44>
	{
		__HAL_UART_CLEAR_FEFLAG(huart);
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	9201      	str	r2, [sp, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	9201      	str	r2, [sp, #4]
 800366a:	9a01      	ldr	r2, [sp, #4]

		huart->ErrorCode |= HAL_UART_ERROR_FE;
 800366c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800366e:	f042 0204 	orr.w	r2, r2, #4
 8003672:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8003674:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003676:	695a      	ldr	r2, [r3, #20]
	/* UART noise error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8003678:	0749      	lsls	r1, r1, #29
 800367a:	d50a      	bpl.n	8003692 <USART1_IRQHandler+0x62>
 800367c:	07d5      	lsls	r5, r2, #31
 800367e:	d508      	bpl.n	8003692 <USART1_IRQHandler+0x62>
	{ 
		__HAL_UART_CLEAR_NEFLAG(huart);
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	9202      	str	r2, [sp, #8]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	9202      	str	r2, [sp, #8]
 8003688:	9a02      	ldr	r2, [sp, #8]

		huart->ErrorCode |= HAL_UART_ERROR_NE;
 800368a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800368c:	f042 0202 	orr.w	r2, r2, #2
 8003690:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
  
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8003692:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003694:	695a      	ldr	r2, [r3, #20]
	/* UART Over-Run interrupt occurred ----------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8003696:	0708      	lsls	r0, r1, #28
 8003698:	d50a      	bpl.n	80036b0 <USART1_IRQHandler+0x80>
 800369a:	07d1      	lsls	r1, r2, #31
 800369c:	d508      	bpl.n	80036b0 <USART1_IRQHandler+0x80>
	{ 
		__HAL_UART_CLEAR_OREFLAG(huart);
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	9203      	str	r2, [sp, #12]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	9203      	str	r2, [sp, #12]
 80036a6:	9a03      	ldr	r2, [sp, #12]

		huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80036aa:	f042 0208 	orr.w	r2, r2, #8
 80036ae:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE);
 80036b0:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(&UartHandle, UART_IT_RXNE);
 80036b2:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Receiver ---------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 80036b4:	0692      	lsls	r2, r2, #26
 80036b6:	d504      	bpl.n	80036c2 <USART1_IRQHandler+0x92>
 80036b8:	069d      	lsls	r5, r3, #26
 80036ba:	d502      	bpl.n	80036c2 <USART1_IRQHandler+0x92>
	{
		pxMBFrameCBByteReceived();
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <USART1_IRQHandler+0xfc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4798      	blx	r3
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80036c6:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter ------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 80036c8:	0610      	lsls	r0, r2, #24
 80036ca:	d509      	bpl.n	80036e0 <USART1_IRQHandler+0xb0>
 80036cc:	0619      	lsls	r1, r3, #24
 80036ce:	d507      	bpl.n	80036e0 <USART1_IRQHandler+0xb0>
	{
		xtNeedPoll = pxMBFrameCBTransmitterEmpty();
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <USART1_IRQHandler+0x100>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4798      	blx	r3
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <USART1_IRQHandler+0x104>)
 80036d8:	3000      	adds	r0, #0
 80036da:	bf18      	it	ne
 80036dc:	2001      	movne	r0, #1
 80036de:	7018      	strb	r0, [r3, #0]
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80036e4:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter end --------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 80036e6:	0652      	lsls	r2, r2, #25
 80036e8:	d511      	bpl.n	800370e <USART1_IRQHandler+0xde>
 80036ea:	065b      	lsls	r3, r3, #25
 80036ec:	d50f      	bpl.n	800370e <USART1_IRQHandler+0xde>
	{
		/*	Enable DE receive signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80036ee:	4812      	ldr	r0, [pc, #72]	; (8003738 <USART1_IRQHandler+0x108>)
 80036f0:	2101      	movs	r1, #1
 80036f2:	2200      	movs	r2, #0
 80036f4:	f005 f962 	bl	80089bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80036f8:	2200      	movs	r2, #0
 80036fa:	480f      	ldr	r0, [pc, #60]	; (8003738 <USART1_IRQHandler+0x108>)
 80036fc:	2102      	movs	r1, #2
 80036fe:	f005 f95d 	bl	80089bc <HAL_GPIO_WritePin>
		/* Disable the UART Transmit Complete Interrupt */    
		__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <USART1_IRQHandler+0xf8>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68d3      	ldr	r3, [r2, #12]
 8003708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800370c:	60d3      	str	r3, [r2, #12]
	}
	
	if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800370e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003710:	4d05      	ldr	r5, [pc, #20]	; (8003728 <USART1_IRQHandler+0xf8>)
 8003712:	b133      	cbz	r3, 8003722 <USART1_IRQHandler+0xf2>
	{
		HAL_UART_ErrorCallback(huart);
 8003714:	4628      	mov	r0, r5
 8003716:	f7ff ff7b 	bl	8003610 <HAL_UART_ErrorCallback>
		printf("Uart_ErrCode: %d\n", huart->ErrorCode);
 800371a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800371c:	4807      	ldr	r0, [pc, #28]	; (800373c <USART1_IRQHandler+0x10c>)
 800371e:	f015 ffb7 	bl	8019690 <printf>
	}
}
 8003722:	b005      	add	sp, #20
 8003724:	bd30      	pop	{r4, r5, pc}
 8003726:	bf00      	nop
 8003728:	2000e2bc 	.word	0x2000e2bc
 800372c:	2000e9b4 	.word	0x2000e9b4
 8003730:	2000e9ac 	.word	0x2000e9ac
 8003734:	20000004 	.word	0x20000004
 8003738:	40020800 	.word	0x40020800
 800373c:	08028d5b 	.word	0x08028d5b

08003740 <xMBPortTimersInit>:
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    return TRUE;
}
 8003740:	2001      	movs	r0, #1
 8003742:	4770      	bx	lr

08003744 <vMBPortTimersEnable>:


void
vMBPortTimersEnable(  )
{
 8003744:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer and Reset Counter
 8003746:	4c06      	ldr	r4, [pc, #24]	; (8003760 <vMBPortTimersEnable+0x1c>)
 8003748:	4620      	mov	r0, r4
 800374a:	f004 fadb 	bl	8007d04 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	2200      	movs	r2, #0
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer
 8003752:	4620      	mov	r0, r4

void
vMBPortTimersEnable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
 8003754:	625a      	str	r2, [r3, #36]	; 0x24
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer
}
 8003756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
vMBPortTimersEnable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer
 800375a:	f004 ba85 	b.w	8007c68 <HAL_TIM_Base_Start_IT>
 800375e:	bf00      	nop
 8003760:	2000e358 	.word	0x2000e358

08003764 <vMBPortTimersDisable>:
}

void
vMBPortTimersDisable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer and Reset Counter
 8003764:	4801      	ldr	r0, [pc, #4]	; (800376c <vMBPortTimersDisable+0x8>)
 8003766:	f004 bacd 	b.w	8007d04 <HAL_TIM_Base_Stop_IT>
 800376a:	bf00      	nop
 800376c:	2000e358 	.word	0x2000e358

08003770 <TIM5_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_5_IRQHandler(void)
{
 8003770:	b508      	push	{r3, lr}
	printf("Timer 5 elapsed...\n");
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <TIM5_IRQHandler+0x14>)
 8003774:	f015 ffce 	bl	8019714 <puts>
	HAL_TIM_IRQHandler(&TimHandle_5);
 8003778:	4803      	ldr	r0, [pc, #12]	; (8003788 <TIM5_IRQHandler+0x18>)
}
 800377a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void TIMx_5_IRQHandler(void)
{
	printf("Timer 5 elapsed...\n");
	HAL_TIM_IRQHandler(&TimHandle_5);
 800377e:	f004 bb1d 	b.w	8007dbc <HAL_TIM_IRQHandler>
 8003782:	bf00      	nop
 8003784:	08028d6d 	.word	0x08028d6d
 8003788:	2000e358 	.word	0x2000e358

0800378c <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	pxMBPortCBTimerExpired();
 800378c:	4b01      	ldr	r3, [pc, #4]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0x8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4718      	bx	r3
 8003792:	bf00      	nop
 8003794:	2000e9b0 	.word	0x2000e9b0

08003798 <EnterCriticalSection>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003798:	b672      	cpsid	i
 800379a:	4770      	bx	lr

0800379c <ExitCriticalSection>:
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800379c:	b662      	cpsie	i
 800379e:	4770      	bx	lr

080037a0 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80037a0:	b538      	push	{r3, r4, r5, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80037a2:	1e4c      	subs	r4, r1, #1
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80037a4:	b2e4      	uxtb	r4, r4
 80037a6:	2cf6      	cmp	r4, #246	; 0xf6
 80037a8:	d82c      	bhi.n	8003804 <eMBInit+0x64>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80037aa:	4c19      	ldr	r4, [pc, #100]	; (8003810 <eMBInit+0x70>)
 80037ac:	7021      	strb	r1, [r4, #0]

        switch ( eMode )
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d128      	bne.n	8003804 <eMBInit+0x64>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80037b2:	4c18      	ldr	r4, [pc, #96]	; (8003814 <eMBInit+0x74>)
 80037b4:	4d18      	ldr	r5, [pc, #96]	; (8003818 <eMBInit+0x78>)
 80037b6:	6025      	str	r5, [r4, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80037b8:	4c18      	ldr	r4, [pc, #96]	; (800381c <eMBInit+0x7c>)
 80037ba:	4d19      	ldr	r5, [pc, #100]	; (8003820 <eMBInit+0x80>)
 80037bc:	6025      	str	r5, [r4, #0]
            peMBFrameSendCur = eMBRTUSend;
 80037be:	4c19      	ldr	r4, [pc, #100]	; (8003824 <eMBInit+0x84>)
 80037c0:	4d19      	ldr	r5, [pc, #100]	; (8003828 <eMBInit+0x88>)
 80037c2:	6025      	str	r5, [r4, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80037c4:	4c19      	ldr	r4, [pc, #100]	; (800382c <eMBInit+0x8c>)
 80037c6:	4d1a      	ldr	r5, [pc, #104]	; (8003830 <eMBInit+0x90>)
 80037c8:	6025      	str	r5, [r4, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80037ca:	4c1a      	ldr	r4, [pc, #104]	; (8003834 <eMBInit+0x94>)
 80037cc:	6020      	str	r0, [r4, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80037ce:	481a      	ldr	r0, [pc, #104]	; (8003838 <eMBInit+0x98>)
 80037d0:	4c1a      	ldr	r4, [pc, #104]	; (800383c <eMBInit+0x9c>)
 80037d2:	6004      	str	r4, [r0, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80037d4:	481a      	ldr	r0, [pc, #104]	; (8003840 <eMBInit+0xa0>)
 80037d6:	4c1b      	ldr	r4, [pc, #108]	; (8003844 <eMBInit+0xa4>)
 80037d8:	6004      	str	r4, [r0, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80037da:	481b      	ldr	r0, [pc, #108]	; (8003848 <eMBInit+0xa8>)
 80037dc:	4c1b      	ldr	r4, [pc, #108]	; (800384c <eMBInit+0xac>)
 80037de:	6004      	str	r4, [r0, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80037e0:	4608      	mov	r0, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80037ea:	f000 f8bf 	bl	800396c <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 80037ee:	4604      	mov	r4, r0
 80037f0:	b958      	cbnz	r0, 800380a <eMBInit+0x6a>
        {
            if( !xMBPortEventInit(  ) )
 80037f2:	f7ff fe97 	bl	8003524 <xMBPortEventInit>
 80037f6:	b138      	cbz	r0, 8003808 <eMBInit+0x68>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <eMBInit+0xb0>)
 80037fa:	701c      	strb	r4, [r3, #0]
                eMBState = STATE_DISABLED;
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <eMBInit+0xb4>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e002      	b.n	800380a <eMBInit+0x6a>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8003804:	2402      	movs	r4, #2
 8003806:	e000      	b.n	800380a <eMBInit+0x6a>
        if( eStatus == MB_ENOERR )
        {
            if( !xMBPortEventInit(  ) )
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8003808:	2403      	movs	r4, #3
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
 800380a:	4620      	mov	r0, r4
 800380c:	bd38      	pop	{r3, r4, r5, pc}
 800380e:	bf00      	nop
 8003810:	2000dfb8 	.word	0x2000dfb8
 8003814:	2000dfa8 	.word	0x2000dfa8
 8003818:	080039b9 	.word	0x080039b9
 800381c:	2000df9c 	.word	0x2000df9c
 8003820:	080039dd 	.word	0x080039dd
 8003824:	2000dfac 	.word	0x2000dfac
 8003828:	08003a69 	.word	0x08003a69
 800382c:	2000dfa4 	.word	0x2000dfa4
 8003830:	080039f9 	.word	0x080039f9
 8003834:	2000dfbc 	.word	0x2000dfbc
 8003838:	2000e9b4 	.word	0x2000e9b4
 800383c:	08003af1 	.word	0x08003af1
 8003840:	2000e9ac 	.word	0x2000e9ac
 8003844:	08003b81 	.word	0x08003b81
 8003848:	2000e9b0 	.word	0x2000e9b0
 800384c:	08003c09 	.word	0x08003c09
 8003850:	2000dfb0 	.word	0x2000dfb0
 8003854:	20000088 	.word	0x20000088

08003858 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8003858:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 800385a:	4c06      	ldr	r4, [pc, #24]	; (8003874 <eMBEnable+0x1c>)
 800385c:	7823      	ldrb	r3, [r4, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <eMBEnable+0x20>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8003868:	2000      	movs	r0, #0
 800386a:	7020      	strb	r0, [r4, #0]
 800386c:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800386e:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop
 8003874:	20000088 	.word	0x20000088
 8003878:	2000dfa8 	.word	0x2000dfa8

0800387c <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800387c:	4b31      	ldr	r3, [pc, #196]	; (8003944 <eMBPoll+0xc8>)
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800387e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8003882:	781c      	ldrb	r4, [r3, #0]
 8003884:	2c00      	cmp	r4, #0
 8003886:	d156      	bne.n	8003936 <eMBPoll+0xba>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8003888:	f10d 0007 	add.w	r0, sp, #7
 800388c:	f7ff fe5e 	bl	800354c <xMBPortEventGet>
 8003890:	2801      	cmp	r0, #1
 8003892:	4603      	mov	r3, r0
 8003894:	d14d      	bne.n	8003932 <eMBPoll+0xb6>
    {
        switch ( eEvent )
 8003896:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800389a:	2a01      	cmp	r2, #1
 800389c:	d00c      	beq.n	80038b8 <eMBPoll+0x3c>
 800389e:	2a02      	cmp	r2, #2
 80038a0:	d14b      	bne.n	800393a <eMBPoll+0xbe>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80038a2:	4e29      	ldr	r6, [pc, #164]	; (8003948 <eMBPoll+0xcc>)
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <eMBPoll+0xd0>)
 80038a6:	6830      	ldr	r0, [r6, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80038a8:	4d29      	ldr	r5, [pc, #164]	; (8003950 <eMBPoll+0xd4>)
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80038aa:	7801      	ldrb	r1, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80038ac:	702b      	strb	r3, [r5, #0]
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80038ae:	7011      	strb	r1, [r2, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80038b0:	4623      	mov	r3, r4
 80038b2:	4690      	mov	r8, r2
 80038b4:	4634      	mov	r4, r6
 80038b6:	e016      	b.n	80038e6 <eMBPoll+0x6a>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80038b8:	4c26      	ldr	r4, [pc, #152]	; (8003954 <eMBPoll+0xd8>)
 80038ba:	4b27      	ldr	r3, [pc, #156]	; (8003958 <eMBPoll+0xdc>)
 80038bc:	4922      	ldr	r1, [pc, #136]	; (8003948 <eMBPoll+0xcc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <eMBPoll+0xe0>)
 80038c2:	4620      	mov	r0, r4
 80038c4:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d133      	bne.n	8003932 <eMBPoll+0xb6>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80038ca:	4a25      	ldr	r2, [pc, #148]	; (8003960 <eMBPoll+0xe4>)
 80038cc:	7823      	ldrb	r3, [r4, #0]
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <eMBPoll+0x5c>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d12c      	bne.n	8003932 <eMBPoll+0xb6>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80038d8:	2002      	movs	r0, #2
 80038da:	f7ff fe2b 	bl	8003534 <xMBPortEventPost>
 80038de:	e028      	b.n	8003932 <eMBPoll+0xb6>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80038e0:	3301      	adds	r3, #1
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d00b      	beq.n	80038fe <eMBPoll+0x82>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80038e6:	4e1f      	ldr	r6, [pc, #124]	; (8003964 <eMBPoll+0xe8>)
 80038e8:	f816 7033 	ldrb.w	r7, [r6, r3, lsl #3]
 80038ec:	00da      	lsls	r2, r3, #3
 80038ee:	b137      	cbz	r7, 80038fe <eMBPoll+0x82>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80038f0:	428f      	cmp	r7, r1
 80038f2:	d1f5      	bne.n	80038e0 <eMBPoll+0x64>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80038f4:	18b3      	adds	r3, r6, r2
 80038f6:	4919      	ldr	r1, [pc, #100]	; (800395c <eMBPoll+0xe0>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4798      	blx	r3
 80038fc:	7028      	strb	r0, [r5, #0]
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <eMBPoll+0xd8>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b1b3      	cbz	r3, 8003932 <eMBPoll+0xb6>
            {
                if( eException != MB_EX_NONE )
 8003904:	782a      	ldrb	r2, [r5, #0]
 8003906:	4d15      	ldr	r5, [pc, #84]	; (800395c <eMBPoll+0xe0>)
 8003908:	b162      	cbz	r2, 8003924 <eMBPoll+0xa8>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800390a:	2301      	movs	r3, #1
 800390c:	802b      	strh	r3, [r5, #0]
 800390e:	f898 3000 	ldrb.w	r3, [r8]
 8003912:	6821      	ldr	r1, [r4, #0]
 8003914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003918:	700b      	strb	r3, [r1, #0]
                    ucMBFrame[usLength++] = eException;
 800391a:	882b      	ldrh	r3, [r5, #0]
 800391c:	6821      	ldr	r1, [r4, #0]
 800391e:	1c58      	adds	r0, r3, #1
 8003920:	8028      	strh	r0, [r5, #0]
 8003922:	54ca      	strb	r2, [r1, r3]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003924:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <eMBPoll+0xe4>)
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <eMBPoll+0xec>)
 8003928:	7810      	ldrb	r0, [r2, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	882a      	ldrh	r2, [r5, #0]
 8003930:	4798      	blx	r3

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8003932:	2000      	movs	r0, #0
 8003934:	e002      	b.n	800393c <eMBPoll+0xc0>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
 8003936:	2006      	movs	r0, #6
 8003938:	e000      	b.n	800393c <eMBPoll+0xc0>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 800393a:	4620      	mov	r0, r4
}
 800393c:	b002      	add	sp, #8
 800393e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003942:	bf00      	nop
 8003944:	20000088 	.word	0x20000088
 8003948:	2000dfb4 	.word	0x2000dfb4
 800394c:	2000dfc0 	.word	0x2000dfc0
 8003950:	2000dfb2 	.word	0x2000dfb2
 8003954:	2000dfb1 	.word	0x2000dfb1
 8003958:	2000dfa4 	.word	0x2000dfa4
 800395c:	2000dfa0 	.word	0x2000dfa0
 8003960:	2000dfb8 	.word	0x2000dfb8
 8003964:	20000008 	.word	0x20000008
 8003968:	2000dfac 	.word	0x2000dfac

0800396c <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	460e      	mov	r6, r1
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8003974:	f7ff ff10 	bl	8003798 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8003978:	4630      	mov	r0, r6
 800397a:	4621      	mov	r1, r4
 800397c:	2208      	movs	r2, #8
 800397e:	462b      	mov	r3, r5
 8003980:	f7ff fe2c 	bl	80035dc <xMBPortSerialInit>
 8003984:	2801      	cmp	r0, #1
 8003986:	d10f      	bne.n	80039a8 <eMBRTUInit+0x3c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8003988:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800398c:	bf97      	itett	ls
 800398e:	4809      	ldrls	r0, [pc, #36]	; (80039b4 <eMBRTUInit+0x48>)
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8003990:	2023      	movhi	r0, #35	; 0x23
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8003992:	0064      	lslls	r4, r4, #1
 8003994:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8003998:	b280      	uxth	r0, r0
 800399a:	f7ff fed1 	bl	8003740 <xMBPortTimersInit>
 800399e:	2801      	cmp	r0, #1
        {
            eStatus = MB_EPORTERR;
 80039a0:	bf0c      	ite	eq
 80039a2:	2400      	moveq	r4, #0
 80039a4:	2403      	movne	r4, #3
 80039a6:	e000      	b.n	80039aa <eMBRTUInit+0x3e>
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
 80039a8:	2403      	movs	r4, #3
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80039aa:	f7ff fef7 	bl	800379c <ExitCriticalSection>

    return eStatus;
}
 80039ae:	4620      	mov	r0, r4
 80039b0:	bd70      	pop	{r4, r5, r6, pc}
 80039b2:	bf00      	nop
 80039b4:	00177fa0 	.word	0x00177fa0

080039b8 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80039b8:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 80039ba:	f7ff feed 	bl	8003798 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <eMBRTUStart+0x20>)
 80039c0:	2100      	movs	r1, #0
    vMBPortSerialEnable( TRUE, FALSE );
 80039c2:	2001      	movs	r0, #1
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80039c4:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80039c6:	f7ff fdd1 	bl	800356c <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80039ca:	f7ff febb 	bl	8003744 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
}
 80039ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     */
    eRcvState = STATE_RX_INIT;
    vMBPortSerialEnable( TRUE, FALSE );
    vMBPortTimersEnable(  );

    EXIT_CRITICAL_SECTION(  );
 80039d2:	f7ff bee3 	b.w	800379c <ExitCriticalSection>
 80039d6:	bf00      	nop
 80039d8:	2000dfcd 	.word	0x2000dfcd

080039dc <eMBRTUStop>:
}

void
eMBRTUStop( void )
{
 80039dc:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 80039de:	f7ff fedb 	bl	8003798 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 80039e2:	2000      	movs	r0, #0
 80039e4:	4601      	mov	r1, r0
 80039e6:	f7ff fdc1 	bl	800356c <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 80039ea:	f7ff febb 	bl	8003764 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
}
 80039ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
    vMBPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
 80039f2:	f7ff bed3 	b.w	800379c <ExitCriticalSection>
	...

080039f8 <eMBRTUReceive>:
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80039fc:	4d16      	ldr	r5, [pc, #88]	; (8003a58 <eMBRTUReceive+0x60>)
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80039fe:	4680      	mov	r8, r0
 8003a00:	460e      	mov	r6, r1
 8003a02:	4617      	mov	r7, r2
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8003a04:	f7ff fec8 	bl	8003798 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003a08:	882b      	ldrh	r3, [r5, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2bff      	cmp	r3, #255	; 0xff
 8003a0e:	d905      	bls.n	8003a1c <eMBRTUReceive+0x24>
 8003a10:	4812      	ldr	r0, [pc, #72]	; (8003a5c <eMBRTUReceive+0x64>)
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <eMBRTUReceive+0x68>)
 8003a14:	219d      	movs	r1, #157	; 0x9d
 8003a16:	2200      	movs	r2, #0
 8003a18:	f015 fd1e 	bl	8019458 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003a1c:	882b      	ldrh	r3, [r5, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d801      	bhi.n	8003a28 <eMBRTUReceive+0x30>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 8003a24:	2405      	movs	r4, #5
 8003a26:	e011      	b.n	8003a4c <eMBRTUReceive+0x54>
    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8003a28:	8829      	ldrh	r1, [r5, #0]
 8003a2a:	4c0e      	ldr	r4, [pc, #56]	; (8003a64 <eMBRTUReceive+0x6c>)
 8003a2c:	b289      	uxth	r1, r1
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f000 f918 	bl	8003c64 <usMBCRC16>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d1f5      	bne.n	8003a24 <eMBRTUReceive+0x2c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8003a38:	4623      	mov	r3, r4

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
 8003a3a:	4604      	mov	r4, r0
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8003a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a40:	f888 2000 	strb.w	r2, [r8]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003a44:	882a      	ldrh	r2, [r5, #0]
 8003a46:	3a03      	subs	r2, #3
 8003a48:	803a      	strh	r2, [r7, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8003a4a:	6033      	str	r3, [r6, #0]
    else
    {
        eStatus = MB_EIO;
    }

    EXIT_CRITICAL_SECTION(  );
 8003a4c:	f7ff fea6 	bl	800379c <ExitCriticalSection>
    return eStatus;
}
 8003a50:	4620      	mov	r0, r4
 8003a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a56:	bf00      	nop
 8003a58:	2000dfca 	.word	0x2000dfca
 8003a5c:	08028d80 	.word	0x08028d80
 8003a60:	08028da5 	.word	0x08028da5
 8003a64:	2000e9c0 	.word	0x2000e9c0

08003a68 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	4680      	mov	r8, r0
 8003a6e:	460e      	mov	r6, r1
 8003a70:	4617      	mov	r7, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8003a72:	f7ff fe91 	bl	8003798 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8003a76:	4b19      	ldr	r3, [pc, #100]	; (8003adc <eMBRTUSend+0x74>)
 8003a78:	781d      	ldrb	r5, [r3, #0]
 8003a7a:	b2ed      	uxtb	r5, r5
 8003a7c:	2d01      	cmp	r5, #1
 8003a7e:	d127      	bne.n	8003ad0 <eMBRTUSend+0x68>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
        usSndBufferCount = 1;
 8003a80:	4c17      	ldr	r4, [pc, #92]	; (8003ae0 <eMBRTUSend+0x78>)
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003a82:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <eMBRTUSend+0x7c>)
        usSndBufferCount = 1;
 8003a84:	8025      	strh	r5, [r4, #0]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003a86:	1e70      	subs	r0, r6, #1
        usSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003a88:	f806 8c01 	strb.w	r8, [r6, #-1]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003a8c:	6018      	str	r0, [r3, #0]
        usSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usSndBufferCount += usLength;
 8003a8e:	8823      	ldrh	r3, [r4, #0]
 8003a90:	fa17 f283 	uxtah	r2, r7, r3
 8003a94:	b292      	uxth	r2, r2
 8003a96:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003a98:	8821      	ldrh	r1, [r4, #0]
 8003a9a:	b289      	uxth	r1, r1
 8003a9c:	f000 f8e2 	bl	8003c64 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003aa0:	8823      	ldrh	r3, [r4, #0]
 8003aa2:	4911      	ldr	r1, [pc, #68]	; (8003ae8 <eMBRTUSend+0x80>)
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	8022      	strh	r2, [r4, #0]
 8003aac:	b2c2      	uxtb	r2, r0
 8003aae:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8003ab0:	8823      	ldrh	r3, [r4, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	b292      	uxth	r2, r2
 8003ab8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003abc:	8022      	strh	r2, [r4, #0]
 8003abe:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <eMBRTUSend+0x84>)
        vMBPortSerialEnable( FALSE, TRUE );
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	4629      	mov	r1, r5
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8003ac6:	701d      	strb	r5, [r3, #0]
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8003ac8:	2400      	movs	r4, #0
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
 8003aca:	f7ff fd4f 	bl	800356c <vMBPortSerialEnable>
 8003ace:	e000      	b.n	8003ad2 <eMBRTUSend+0x6a>
    }
    else
    {
        eStatus = MB_EIO;
 8003ad0:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 8003ad2:	f7ff fe63 	bl	800379c <ExitCriticalSection>
    return eStatus;
}
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003adc:	2000dfcd 	.word	0x2000dfcd
 8003ae0:	2000dfc8 	.word	0x2000dfc8
 8003ae4:	2000dfc4 	.word	0x2000dfc4
 8003ae8:	2000e9c0 	.word	0x2000e9c0
 8003aec:	2000dfcc 	.word	0x2000dfcc

08003af0 <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <xMBRTUReceiveFSM+0x78>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
    return eStatus;
}

BOOL
xMBRTUReceiveFSM( void )
{
 8003af4:	b507      	push	{r0, r1, r2, lr}
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8003af6:	b12b      	cbz	r3, 8003b04 <xMBRTUReceiveFSM+0x14>
 8003af8:	481c      	ldr	r0, [pc, #112]	; (8003b6c <xMBRTUReceiveFSM+0x7c>)
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <xMBRTUReceiveFSM+0x80>)
 8003afc:	21e7      	movs	r1, #231	; 0xe7
 8003afe:	2200      	movs	r2, #0
 8003b00:	f015 fcaa 	bl	8019458 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8003b04:	f10d 0007 	add.w	r0, sp, #7
 8003b08:	f7ff fd72 	bl	80035f0 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <xMBRTUReceiveFSM+0x84>)
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	2a03      	cmp	r2, #3
 8003b12:	d824      	bhi.n	8003b5e <xMBRTUReceiveFSM+0x6e>
 8003b14:	e8df f002 	tbb	[pc, r2]
 8003b18:	21100221 	.word	0x21100221
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8003b1c:	4916      	ldr	r1, [pc, #88]	; (8003b78 <xMBRTUReceiveFSM+0x88>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	800a      	strh	r2, [r1, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003b22:	880a      	ldrh	r2, [r1, #0]
 8003b24:	b292      	uxth	r2, r2
 8003b26:	1c50      	adds	r0, r2, #1
 8003b28:	b280      	uxth	r0, r0
 8003b2a:	8008      	strh	r0, [r1, #0]
 8003b2c:	4913      	ldr	r1, [pc, #76]	; (8003b7c <xMBRTUReceiveFSM+0x8c>)
 8003b2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003b32:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 8003b34:	2202      	movs	r2, #2
 8003b36:	e00f      	b.n	8003b58 <xMBRTUReceiveFSM+0x68>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8003b38:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <xMBRTUReceiveFSM+0x88>)
 8003b3a:	8811      	ldrh	r1, [r2, #0]
 8003b3c:	b289      	uxth	r1, r1
 8003b3e:	29ff      	cmp	r1, #255	; 0xff
 8003b40:	d809      	bhi.n	8003b56 <xMBRTUReceiveFSM+0x66>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003b42:	8813      	ldrh	r3, [r2, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	b289      	uxth	r1, r1
 8003b4a:	8011      	strh	r1, [r2, #0]
 8003b4c:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <xMBRTUReceiveFSM+0x8c>)
 8003b4e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003b52:	54d1      	strb	r1, [r2, r3]
 8003b54:	e001      	b.n	8003b5a <xMBRTUReceiveFSM+0x6a>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8003b56:	2203      	movs	r2, #3
 8003b58:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8003b5a:	f7ff fdf3 	bl	8003744 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 8003b5e:	2000      	movs	r0, #0
 8003b60:	b003      	add	sp, #12
 8003b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b66:	bf00      	nop
 8003b68:	2000dfcc 	.word	0x2000dfcc
 8003b6c:	08028d80 	.word	0x08028d80
 8003b70:	08028dca 	.word	0x08028dca
 8003b74:	2000dfcd 	.word	0x2000dfcd
 8003b78:	2000dfca 	.word	0x2000dfca
 8003b7c:	2000e9c0 	.word	0x2000e9c0

08003b80 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <xMBRTUTransmitFSM+0x70>)
 8003b84:	7818      	ldrb	r0, [r3, #0]
 8003b86:	b2c0      	uxtb	r0, r0
 8003b88:	2801      	cmp	r0, #1
 8003b8a:	d006      	beq.n	8003b9a <xMBRTUTransmitFSM+0x1a>
 8003b8c:	4819      	ldr	r0, [pc, #100]	; (8003bf4 <xMBRTUTransmitFSM+0x74>)
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <xMBRTUTransmitFSM+0x78>)
 8003b90:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003b94:	2200      	movs	r2, #0
 8003b96:	f015 fc5f 	bl	8019458 <__assert_func>

    switch ( eSndState )
 8003b9a:	4f18      	ldr	r7, [pc, #96]	; (8003bfc <xMBRTUTransmitFSM+0x7c>)
 8003b9c:	783b      	ldrb	r3, [r7, #0]
 8003b9e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003ba2:	b113      	cbz	r3, 8003baa <xMBRTUTransmitFSM+0x2a>
 8003ba4:	2e01      	cmp	r6, #1
 8003ba6:	d005      	beq.n	8003bb4 <xMBRTUTransmitFSM+0x34>
 8003ba8:	e01f      	b.n	8003bea <xMBRTUTransmitFSM+0x6a>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8003baa:	4631      	mov	r1, r6
 8003bac:	f7ff fcde 	bl	800356c <vMBPortSerialEnable>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
 8003bb0:	4635      	mov	r5, r6
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
 8003bb2:	e01b      	b.n	8003bec <xMBRTUTransmitFSM+0x6c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8003bb4:	4d12      	ldr	r5, [pc, #72]	; (8003c00 <xMBRTUTransmitFSM+0x80>)
 8003bb6:	882c      	ldrh	r4, [r5, #0]
 8003bb8:	b2a4      	uxth	r4, r4
 8003bba:	b164      	cbz	r4, 8003bd6 <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8003bbc:	4c11      	ldr	r4, [pc, #68]	; (8003c04 <xMBRTUTransmitFSM+0x84>)
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	7818      	ldrb	r0, [r3, #0]
 8003bc2:	f7ff fd0d 	bl	80035e0 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	6023      	str	r3, [r4, #0]
            usSndBufferCount--;
 8003bcc:	882b      	ldrh	r3, [r5, #0]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	802b      	strh	r3, [r5, #0]
 8003bd4:	e009      	b.n	8003bea <xMBRTUTransmitFSM+0x6a>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003bd6:	2003      	movs	r0, #3
 8003bd8:	f7ff fcac 	bl	8003534 <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 8003bdc:	4621      	mov	r1, r4
            pucSndBufferCur++;  /* next byte in sendbuffer. */
            usSndBufferCount--;
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003bde:	4605      	mov	r5, r0
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
 8003be0:	4630      	mov	r0, r6
 8003be2:	f7ff fcc3 	bl	800356c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003be6:	703c      	strb	r4, [r7, #0]
 8003be8:	e000      	b.n	8003bec <xMBRTUTransmitFSM+0x6c>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
 8003bea:	2500      	movs	r5, #0
        }
        break;
    }

    return xNeedPoll;
}
 8003bec:	4628      	mov	r0, r5
 8003bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf0:	2000dfcd 	.word	0x2000dfcd
 8003bf4:	08028d80 	.word	0x08028d80
 8003bf8:	08028de5 	.word	0x08028de5
 8003bfc:	2000dfcc 	.word	0x2000dfcc
 8003c00:	2000dfc8 	.word	0x2000dfc8
 8003c04:	2000dfc4 	.word	0x2000dfc4

08003c08 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003c08:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <xMBRTUTimerT35Expired+0x50>)
 8003c0c:	7818      	ldrb	r0, [r3, #0]
 8003c0e:	b2c0      	uxtb	r0, r0
 8003c10:	2802      	cmp	r0, #2
 8003c12:	461d      	mov	r5, r3
 8003c14:	d003      	beq.n	8003c1e <xMBRTUTimerT35Expired+0x16>
 8003c16:	2803      	cmp	r0, #3
 8003c18:	d017      	beq.n	8003c4a <xMBRTUTimerT35Expired+0x42>
 8003c1a:	b928      	cbnz	r0, 8003c28 <xMBRTUTimerT35Expired+0x20>
 8003c1c:	e000      	b.n	8003c20 <xMBRTUTimerT35Expired+0x18>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f7ff fc88 	bl	8003534 <xMBPortEventPost>
 8003c24:	4604      	mov	r4, r0
        break;
 8003c26:	e011      	b.n	8003c4c <xMBRTUTimerT35Expired+0x44>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8003c2e:	b16a      	cbz	r2, 8003c4c <xMBRTUTimerT35Expired+0x44>
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	2a02      	cmp	r2, #2
 8003c34:	d009      	beq.n	8003c4a <xMBRTUTimerT35Expired+0x42>
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d006      	beq.n	8003c4a <xMBRTUTimerT35Expired+0x42>
 8003c3c:	4807      	ldr	r0, [pc, #28]	; (8003c5c <xMBRTUTimerT35Expired+0x54>)
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <xMBRTUTimerT35Expired+0x58>)
 8003c40:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003c44:	2200      	movs	r2, #0
 8003c46:	f015 fc07 	bl	8019458 <__assert_func>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
 8003c4a:	2400      	movs	r4, #0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8003c4c:	f7ff fd8a 	bl	8003764 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	702b      	strb	r3, [r5, #0]

    return xNeedPoll;
}
 8003c54:	4620      	mov	r0, r4
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	2000dfcd 	.word	0x2000dfcd
 8003c5c:	08028d80 	.word	0x08028d80
 8003c60:	08028e00 	.word	0x08028e00

08003c64 <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 8003c64:	23ff      	movs	r3, #255	; 0xff
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8003c66:	b510      	push	{r4, lr}
    UCHAR           ucCRCHi = 0xFF;
 8003c68:	461c      	mov	r4, r3
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 8003c6a:	3901      	subs	r1, #1
 8003c6c:	b289      	uxth	r1, r1
 8003c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c72:	4291      	cmp	r1, r2
 8003c74:	d008      	beq.n	8003c88 <usMBCRC16+0x24>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8003c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c7a:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <usMBCRC16+0x2c>)
 8003c7e:	5c9b      	ldrb	r3, [r3, r2]
 8003c80:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 8003c82:	4c04      	ldr	r4, [pc, #16]	; (8003c94 <usMBCRC16+0x30>)
 8003c84:	5ca4      	ldrb	r4, [r4, r2]
 8003c86:	e7f0      	b.n	8003c6a <usMBCRC16+0x6>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8003c88:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	08028f63 	.word	0x08028f63
 8003c94:	08028e63 	.word	0x08028e63

08003c98 <xMBUtilSetBits>:
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8003c98:	2a08      	cmp	r2, #8

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8003c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9c:	4616      	mov	r6, r2
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8003c9e:	d905      	bls.n	8003cac <xMBUtilSetBits+0x14>
 8003ca0:	480e      	ldr	r0, [pc, #56]	; (8003cdc <xMBUtilSetBits+0x44>)
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <xMBUtilSetBits+0x48>)
 8003ca4:	2138      	movs	r1, #56	; 0x38
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f015 fbd6 	bl	8019458 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8003cac:	08cd      	lsrs	r5, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003cae:	1c6c      	adds	r4, r5, #1

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	40b2      	lsls	r2, r6
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003cb4:	5d07      	ldrb	r7, [r0, r4]
 8003cb6:	5d46      	ldrb	r6, [r0, r5]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003cb8:	3a01      	subs	r2, #1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8003cba:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
 8003cbe:	b292      	uxth	r2, r2
 8003cc0:	408a      	lsls	r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003cc2:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8003cc6:	b289      	uxth	r1, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8003cc8:	ea26 0202 	bic.w	r2, r6, r2

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8003ccc:	408b      	lsls	r3, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b29b      	uxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8003cd2:	5543      	strb	r3, [r0, r5]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	5503      	strb	r3, [r0, r4]
 8003cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	0802906b 	.word	0x0802906b
 8003ce0:	08029098 	.word	0x08029098

08003ce4 <xMBUtilGetBits>:
}

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8003ce4:	b530      	push	{r4, r5, lr}
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8003ce6:	08cc      	lsrs	r4, r1, #3
    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003ce8:	1903      	adds	r3, r0, r4
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8003cea:	eba1 01c4 	sub.w	r1, r1, r4, lsl #3
    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003cee:	785d      	ldrb	r5, [r3, #1]
 8003cf0:	5d03      	ldrb	r3, [r0, r4]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8003cf2:	ea43 2005 	orr.w	r0, r3, r5, lsl #8

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003cf6:	2301      	movs	r3, #1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8003cf8:	b289      	uxth	r1, r1

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003cfa:	4093      	lsls	r3, r2
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8003cfc:	4108      	asrs	r0, r1

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003cfe:	3b01      	subs	r3, #1

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8003d00:	4018      	ands	r0, r3

    return ( UCHAR ) usWordBuf;
}
 8003d02:	b2c0      	uxtb	r0, r0
 8003d04:	bd30      	pop	{r4, r5, pc}
	...

08003d08 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003d08:	2807      	cmp	r0, #7
 8003d0a:	bf9a      	itte	ls
 8003d0c:	4b01      	ldrls	r3, [pc, #4]	; (8003d14 <prveMBError2Exception+0xc>)
 8003d0e:	5c18      	ldrbls	r0, [r3, r0]
 8003d10:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8003d12:	4770      	bx	lr
 8003d14:	08029063 	.word	0x08029063

08003d18 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003d18:	880b      	ldrh	r3, [r1, #0]
 8003d1a:	2b05      	cmp	r3, #5

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	460c      	mov	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003d20:	d12e      	bne.n	8003d80 <eMBFuncReadCoils+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8003d22:	78c5      	ldrb	r5, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8003d24:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003d26:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003d28:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8003d2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8003d2e:	1e55      	subs	r5, r2, #1
 8003d30:	b2ad      	uxth	r5, r5
 8003d32:	f240 76ce 	movw	r6, #1998	; 0x7ce
 8003d36:	42b5      	cmp	r5, r6
 8003d38:	d822      	bhi.n	8003d80 <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	8025      	strh	r5, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8003d3e:	2501      	movs	r5, #1
 8003d40:	7005      	strb	r5, [r0, #0]
            *usLen += 1;
 8003d42:	8825      	ldrh	r5, [r4, #0]
 8003d44:	3501      	adds	r5, #1
 8003d46:	8025      	strh	r5, [r4, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8003d48:	f012 0f07 	tst.w	r2, #7
 8003d4c:	ea4f 05d2 	mov.w	r5, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8003d50:	bf18      	it	ne
 8003d52:	3501      	addne	r5, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8003d54:	b2ed      	uxtb	r5, r5
            }
            *pucFrameCur++ = ucNBytes;
 8003d56:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8003d58:	8826      	ldrh	r6, [r4, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003d5a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 8003d5e:	3601      	adds	r6, #1

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 8003d60:	3101      	adds	r1, #1
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 8003d62:	8026      	strh	r6, [r4, #0]

            eRegStatus =
 8003d64:	3002      	adds	r0, #2
 8003d66:	b289      	uxth	r1, r1
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f7fd fe27 	bl	80019bc <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003d6e:	b118      	cbz	r0, 8003d78 <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003d74:	f7ff bfc8 	b.w	8003d08 <prveMBError2Exception>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8003d78:	8822      	ldrh	r2, [r4, #0]
 8003d7a:	4415      	add	r5, r2
 8003d7c:	8025      	strh	r5, [r4, #0]
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003d80:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8003d82:	bd70      	pop	{r4, r5, r6, pc}

08003d84 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003d84:	880b      	ldrh	r3, [r1, #0]
 8003d86:	2b05      	cmp	r3, #5
}

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8003d88:	b513      	push	{r0, r1, r4, lr}
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003d8a:	d11c      	bne.n	8003dc6 <eMBFuncWriteCoil+0x42>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003d8c:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003d8e:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003d90:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003d92:	b9c2      	cbnz	r2, 8003dc6 <eMBFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003d94:	78c4      	ldrb	r4, [r0, #3]
 8003d96:	1e60      	subs	r0, r4, #1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003d98:	b2c0      	uxtb	r0, r0
 8003d9a:	28fd      	cmp	r0, #253	; 0xfd
 8003d9c:	d913      	bls.n	8003dc6 <eMBFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8003d9e:	2cff      	cmp	r4, #255	; 0xff

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 8003da0:	f88d 2005 	strb.w	r2, [sp, #5]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003da4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
            {
                ucBuf[0] = 1;
 8003da8:	bf08      	it	eq
 8003daa:	2201      	moveq	r2, #1
            }
            else
            {
                ucBuf[0] = 0;
 8003dac:	f88d 2004 	strb.w	r2, [sp, #4]

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;
 8003db0:	3101      	adds	r1, #1
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
 8003db2:	2201      	movs	r2, #1
 8003db4:	a801      	add	r0, sp, #4
 8003db6:	b289      	uxth	r1, r1
 8003db8:	4613      	mov	r3, r2
 8003dba:	f7fd fdff 	bl	80019bc <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003dbe:	b120      	cbz	r0, 8003dca <eMBFuncWriteCoil+0x46>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003dc0:	f7ff ffa2 	bl	8003d08 <prveMBError2Exception>
 8003dc4:	e001      	b.n	8003dca <eMBFuncWriteCoil+0x46>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003dc6:	2003      	movs	r0, #3
 8003dc8:	e7ff      	b.n	8003dca <eMBFuncWriteCoil+0x46>
    }
    return eStatus;
}
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd10      	pop	{r4, pc}

08003dce <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003dd0:	880b      	ldrh	r3, [r1, #0]
 8003dd2:	2b05      	cmp	r3, #5
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003dd4:	460c      	mov	r4, r1
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003dd6:	d924      	bls.n	8003e22 <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8003dd8:	7903      	ldrb	r3, [r0, #4]
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8003dda:	78c2      	ldrb	r2, [r0, #3]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8003ddc:	7845      	ldrb	r5, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003dde:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8003de0:	7946      	ldrb	r6, [r0, #5]
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8003de2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8003de6:	f012 0f07 	tst.w	r2, #7
 8003dea:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8003dee:	f102 37ff 	add.w	r7, r2, #4294967295
        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8003df2:	bf18      	it	ne
 8003df4:	3301      	addne	r3, #1
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8003df6:	f5b7 6ff6 	cmp.w	r7, #1968	; 0x7b0
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8003dfa:	b2db      	uxtb	r3, r3
        }

        if( ( usCoilCnt >= 1 ) &&
 8003dfc:	d211      	bcs.n	8003e22 <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8003dfe:	42b3      	cmp	r3, r6
 8003e00:	d10f      	bne.n	8003e22 <eMBFuncWriteMultipleCoils+0x54>
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003e02:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
        usRegAddress++;
 8003e06:	3101      	adds	r1, #1

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8003e08:	3006      	adds	r0, #6
 8003e0a:	b289      	uxth	r1, r1
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f7fd fdd5 	bl	80019bc <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003e12:	b118      	cbz	r0, 8003e1c <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003e14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003e18:	f7ff bf76 	b.w	8003d08 <prveMBError2Exception>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	8022      	strh	r2, [r4, #0]
 8003e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003e22:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8003e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e28 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003e28:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <eMBFuncReportSlaveID+0x1c>)
 8003e2c:	881c      	ldrh	r4, [r3, #0]
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003e2e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003e30:	4622      	mov	r2, r4
 8003e32:	4905      	ldr	r1, [pc, #20]	; (8003e48 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003e34:	3401      	adds	r4, #1
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003e36:	3001      	adds	r0, #1
 8003e38:	f7fd f8ec 	bl	8001014 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003e3c:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8003e3e:	2000      	movs	r0, #0
 8003e40:	bd38      	pop	{r3, r4, r5, pc}
 8003e42:	bf00      	nop
 8003e44:	2000dfce 	.word	0x2000dfce
 8003e48:	2000dfd0 	.word	0x2000dfd0

08003e4c <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003e4c:	880b      	ldrh	r3, [r1, #0]
 8003e4e:	2b05      	cmp	r3, #5

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460c      	mov	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003e54:	d12d      	bne.n	8003eb2 <eMBFuncReadDiscreteInputs+0x66>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8003e56:	78c5      	ldrb	r5, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8003e58:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003e5a:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003e5c:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8003e5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8003e62:	1e55      	subs	r5, r2, #1
 8003e64:	b2ad      	uxth	r5, r5
 8003e66:	f240 76ce 	movw	r6, #1998	; 0x7ce
 8003e6a:	42b5      	cmp	r5, r6
 8003e6c:	d821      	bhi.n	8003eb2 <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8003e6e:	2500      	movs	r5, #0
 8003e70:	8025      	strh	r5, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8003e72:	2502      	movs	r5, #2
 8003e74:	7005      	strb	r5, [r0, #0]
            *usLen += 1;
 8003e76:	8825      	ldrh	r5, [r4, #0]
 8003e78:	3501      	adds	r5, #1
 8003e7a:	8025      	strh	r5, [r4, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8003e7c:	f012 0f07 	tst.w	r2, #7
 8003e80:	ea4f 05d2 	mov.w	r5, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8003e84:	bf18      	it	ne
 8003e86:	3501      	addne	r5, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8003e88:	b2ed      	uxtb	r5, r5
            }
            *pucFrameCur++ = ucNBytes;
 8003e8a:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8003e8c:	8826      	ldrh	r6, [r4, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003e8e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 8003e92:	3601      	adds	r6, #1

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 8003e94:	3101      	adds	r1, #1
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;
 8003e96:	8026      	strh	r6, [r4, #0]

            eRegStatus =
 8003e98:	3002      	adds	r0, #2
 8003e9a:	b289      	uxth	r1, r1
 8003e9c:	f7fd fe06 	bl	8001aac <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003ea0:	b118      	cbz	r0, 8003eaa <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003ea6:	f7ff bf2f 	b.w	8003d08 <prveMBError2Exception>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8003eaa:	8822      	ldrh	r2, [r4, #0]
 8003eac:	4415      	add	r5, r2
 8003eae:	8025      	strh	r5, [r4, #0]
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003eb2:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}

08003eb6 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003eb6:	880b      	ldrh	r3, [r1, #0]
 8003eb8:	2b05      	cmp	r3, #5
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003eba:	b570      	push	{r4, r5, r6, lr}
 8003ebc:	460c      	mov	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003ebe:	d124      	bne.n	8003f0a <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003ec0:	78c5      	ldrb	r5, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003ec2:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003ec4:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003ec6:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003ec8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8003ecc:	1e55      	subs	r5, r2, #1
 8003ece:	2d7b      	cmp	r5, #123	; 0x7b
 8003ed0:	d81b      	bhi.n	8003f0a <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	8025      	strh	r5, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8003ed6:	2504      	movs	r5, #4
 8003ed8:	7005      	strb	r5, [r0, #0]
            *usLen += 1;
 8003eda:	8825      	ldrh	r5, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8003edc:	0056      	lsls	r6, r2, #1
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
            *usLen += 1;
 8003ede:	3501      	adds	r5, #1
 8003ee0:	8025      	strh	r5, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8003ee2:	7046      	strb	r6, [r0, #1]
            *usLen += 1;
 8003ee4:	8825      	ldrh	r5, [r4, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003ee6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;
 8003eea:	3501      	adds	r5, #1

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 8003eec:	3101      	adds	r1, #1
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;
 8003eee:	8025      	strh	r5, [r4, #0]

            eRegStatus =
 8003ef0:	3002      	adds	r0, #2
 8003ef2:	b289      	uxth	r1, r1
 8003ef4:	f7fd fd08 	bl	8001908 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003ef8:	b118      	cbz	r0, 8003f02 <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003efe:	f7ff bf03 	b.w	8003d08 <prveMBError2Exception>
            }
            else
            {
                *usLen += usRegCount * 2;
 8003f02:	8822      	ldrh	r2, [r4, #0]
 8003f04:	4432      	add	r2, r6
 8003f06:	8022      	strh	r2, [r4, #0]
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003f0a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}

08003f0e <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003f0e:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003f10:	880b      	ldrh	r3, [r1, #0]
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d10f      	bne.n	8003f36 <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003f16:	7883      	ldrb	r3, [r0, #2]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003f18:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003f1a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegAddress++;
 8003f1e:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003f20:	2201      	movs	r2, #1
 8003f22:	3003      	adds	r0, #3
 8003f24:	b289      	uxth	r1, r1
 8003f26:	4613      	mov	r3, r2
 8003f28:	f7fd fd0c 	bl	8001944 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8003f2c:	b128      	cbz	r0, 8003f3a <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8003f32:	f7ff bee9 	b.w	8003d08 <prveMBError2Exception>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003f36:	2003      	movs	r0, #3
 8003f38:	bd08      	pop	{r3, pc}
    }
    return eStatus;
}
 8003f3a:	bd08      	pop	{r3, pc}

08003f3c <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003f3c:	880b      	ldrh	r3, [r1, #0]
 8003f3e:	2b05      	cmp	r3, #5
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	460c      	mov	r4, r1
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003f44:	d91d      	bls.n	8003f82 <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8003f46:	7903      	ldrb	r3, [r0, #4]
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8003f48:	78c2      	ldrb	r2, [r0, #3]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8003f4a:	7845      	ldrb	r5, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003f4c:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8003f4e:	7946      	ldrb	r6, [r0, #5]
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8003f50:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 8003f54:	1e53      	subs	r3, r2, #1
 8003f56:	2b77      	cmp	r3, #119	; 0x77
 8003f58:	d813      	bhi.n	8003f82 <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8003f5a:	0053      	lsls	r3, r2, #1
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	429e      	cmp	r6, r3
 8003f60:	d10f      	bne.n	8003f82 <eMBFuncWriteMultipleHoldingRegister+0x46>
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003f62:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
        usRegAddress++;
 8003f66:	3101      	adds	r1, #1
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8003f68:	3006      	adds	r0, #6
 8003f6a:	b289      	uxth	r1, r1
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f7fd fce9 	bl	8001944 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003f72:	b118      	cbz	r0, 8003f7c <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003f78:	f7ff bec6 	b.w	8003d08 <prveMBError2Exception>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	8022      	strh	r2, [r4, #0]
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003f82:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8003f84:	bd70      	pop	{r4, r5, r6, pc}

08003f86 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003f88:	880b      	ldrh	r3, [r1, #0]
 8003f8a:	2b05      	cmp	r3, #5

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003f8c:	460c      	mov	r4, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003f8e:	d125      	bne.n	8003fdc <eMBFuncReadHoldingRegister+0x56>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003f90:	7905      	ldrb	r5, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003f92:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003f94:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003f96:	b2ae      	uxth	r6, r5

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8003f98:	1e73      	subs	r3, r6, #1
 8003f9a:	2b7c      	cmp	r3, #124	; 0x7c
 8003f9c:	f04f 0203 	mov.w	r2, #3
 8003fa0:	d81c      	bhi.n	8003fdc <eMBFuncReadHoldingRegister+0x56>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8003fa6:	7002      	strb	r2, [r0, #0]
            *usLen += 1;
 8003fa8:	8822      	ldrh	r2, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003faa:	006d      	lsls	r5, r5, #1
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
            *usLen += 1;
 8003fac:	3201      	adds	r2, #1
 8003fae:	8022      	strh	r2, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003fb0:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8003fb2:	8822      	ldrh	r2, [r4, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003fb4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;
 8003fb8:	3201      	adds	r2, #1

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;
 8003fba:	3101      	adds	r1, #1
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
            *usLen += 1;

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;
 8003fbc:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8003fbe:	3002      	adds	r0, #2
 8003fc0:	b289      	uxth	r1, r1
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	f7fd fcbe 	bl	8001944 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003fc8:	b118      	cbz	r0, 8003fd2 <eMBFuncReadHoldingRegister+0x4c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8003fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003fce:	f7ff be9b 	b.w	8003d08 <prveMBError2Exception>
            }
            else
            {
                *usLen += usRegCount * 2;
 8003fd2:	8822      	ldrh	r2, [r4, #0]
 8003fd4:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8003fd8:	8026      	strh	r6, [r4, #0]
 8003fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003fdc:	2003      	movs	r0, #3
 8003fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fe0 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003fe4:	880b      	ldrh	r3, [r1, #0]
 8003fe6:	2b09      	cmp	r3, #9

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003fe8:	4604      	mov	r4, r0
 8003fea:	460d      	mov	r5, r1
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003fec:	d940      	bls.n	8004070 <eMBFuncReadWriteMultipleHoldingRegister+0x90>
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8003fee:	7903      	ldrb	r3, [r0, #4]
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8003ff0:	78c6      	ldrb	r6, [r0, #3]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003ff2:	f890 8001 	ldrb.w	r8, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003ff6:	7887      	ldrb	r7, [r0, #2]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8003ff8:	79a1      	ldrb	r1, [r4, #6]
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003ffa:	7940      	ldrb	r0, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8003ffc:	79e2      	ldrb	r2, [r4, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8003ffe:	f894 e009 	ldrb.w	lr, [r4, #9]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8004002:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004006:	f106 3cff 	add.w	ip, r6, #4294967295
 800400a:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800400e:	7a23      	ldrb	r3, [r4, #8]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004010:	d831      	bhi.n	8004076 <eMBFuncReadWriteMultipleHoldingRegister+0x96>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8004012:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8004016:	1e53      	subs	r3, r2, #1
 8004018:	2b78      	cmp	r3, #120	; 0x78
 800401a:	d82c      	bhi.n	8004076 <eMBFuncReadWriteMultipleHoldingRegister+0x96>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800401c:	ebbe 0f42 	cmp.w	lr, r2, lsl #1
 8004020:	d129      	bne.n	8004076 <eMBFuncReadWriteMultipleHoldingRegister+0x96>

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8004022:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegWriteAddress++;
 8004026:	3101      	adds	r1, #1
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8004028:	2301      	movs	r3, #1
 800402a:	f104 000a 	add.w	r0, r4, #10
 800402e:	b289      	uxth	r1, r1
 8004030:	f7fd fc88 	bl	8001944 <eMBRegHoldingCB>
 8004034:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8004036:	bb0b      	cbnz	r3, 800407c <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8004038:	2217      	movs	r2, #23

            if( eRegStatus == MB_ENOERR )
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
 800403a:	802b      	strh	r3, [r5, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 800403c:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 800403e:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004040:	ea4f 0946 	mov.w	r9, r6, lsl #1
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
                *usLen += 1;
 8004044:	3201      	adds	r2, #1
 8004046:	802a      	strh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8004048:	f884 9001 	strb.w	r9, [r4, #1]
                *usLen += 1;
 800404c:	882a      	ldrh	r2, [r5, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800404e:	ea47 2108 	orr.w	r1, r7, r8, lsl #8
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
                *usLen += 1;

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;
 8004052:	3201      	adds	r2, #1

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;
 8004054:	3101      	adds	r1, #1
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
                *usLen += 1;

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;
 8004056:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 8004058:	1ca0      	adds	r0, r4, #2
 800405a:	b289      	uxth	r1, r1
 800405c:	4632      	mov	r2, r6
 800405e:	f7fd fc71 	bl	8001944 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8004062:	b958      	cbnz	r0, 800407c <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
                {
                    *usLen += 2 * usRegReadCount;
 8004064:	882b      	ldrh	r3, [r5, #0]
 8004066:	4499      	add	r9, r3
 8004068:	f8a5 9000 	strh.w	r9, [r5]
 800406c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004070:	2000      	movs	r0, #0
 8004072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004076:	2003      	movs	r0, #3
 8004078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
    }
    return eStatus;
}
 800407c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004080:	f7ff be42 	b.w	8003d08 <prveMBError2Exception>

08004084 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  Init: SDIO initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004084:	b084      	sub	sp, #16
 8004086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800408a:	4606      	mov	r6, r0
 800408c:	a809      	add	r0, sp, #36	; 0x24
 800408e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0; 

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 8004092:	4b27      	ldr	r3, [pc, #156]	; (8004130 <SDIO_Init+0xac>)
 8004094:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004098:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800409c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800409e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80040a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80040a2:	429e      	cmp	r6, r3
 80040a4:	4689      	mov	r9, r1
 80040a6:	d003      	beq.n	80040b0 <SDIO_Init+0x2c>
 80040a8:	4822      	ldr	r0, [pc, #136]	; (8004134 <SDIO_Init+0xb0>)
 80040aa:	21da      	movs	r1, #218	; 0xda
 80040ac:	f7fd ff58 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 80040b0:	f439 5300 	bics.w	r3, r9, #8192	; 0x2000
 80040b4:	d003      	beq.n	80040be <SDIO_Init+0x3a>
 80040b6:	481f      	ldr	r0, [pc, #124]	; (8004134 <SDIO_Init+0xb0>)
 80040b8:	21db      	movs	r1, #219	; 0xdb
 80040ba:	f7fd ff51 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 80040be:	f43a 6380 	bics.w	r3, sl, #1024	; 0x400
 80040c2:	d003      	beq.n	80040cc <SDIO_Init+0x48>
 80040c4:	481b      	ldr	r0, [pc, #108]	; (8004134 <SDIO_Init+0xb0>)
 80040c6:	21dc      	movs	r1, #220	; 0xdc
 80040c8:	f7fd ff4a 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 80040cc:	f438 7300 	bics.w	r3, r8, #512	; 0x200
 80040d0:	d003      	beq.n	80040da <SDIO_Init+0x56>
 80040d2:	4818      	ldr	r0, [pc, #96]	; (8004134 <SDIO_Init+0xb0>)
 80040d4:	21dd      	movs	r1, #221	; 0xdd
 80040d6:	f7fd ff43 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 80040da:	f434 6300 	bics.w	r3, r4, #2048	; 0x800
 80040de:	d006      	beq.n	80040ee <SDIO_Init+0x6a>
 80040e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80040e4:	d003      	beq.n	80040ee <SDIO_Init+0x6a>
 80040e6:	4813      	ldr	r0, [pc, #76]	; (8004134 <SDIO_Init+0xb0>)
 80040e8:	21de      	movs	r1, #222	; 0xde
 80040ea:	f7fd ff39 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 80040ee:	f437 4380 	bics.w	r3, r7, #16384	; 0x4000
 80040f2:	d003      	beq.n	80040fc <SDIO_Init+0x78>
 80040f4:	480f      	ldr	r0, [pc, #60]	; (8004134 <SDIO_Init+0xb0>)
 80040f6:	21df      	movs	r1, #223	; 0xdf
 80040f8:	f7fd ff32 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 80040fc:	2dff      	cmp	r5, #255	; 0xff
 80040fe:	d903      	bls.n	8004108 <SDIO_Init+0x84>
 8004100:	480c      	ldr	r0, [pc, #48]	; (8004134 <SDIO_Init+0xb0>)
 8004102:	21e0      	movs	r1, #224	; 0xe0
 8004104:	f7fd ff2c 	bl	8001f60 <assert_failed>
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004108:	ea4a 0909 	orr.w	r9, sl, r9
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800410c:	6872      	ldr	r2, [r6, #4]
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
 800410e:	ea49 0808 	orr.w	r8, r9, r8
             Init.ClockPowerSave      |\
 8004112:	ea48 0404 	orr.w	r4, r8, r4
             Init.BusWide             |\
 8004116:	433c      	orrs	r4, r7
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004118:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
  /* Set SDIO configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
             Init.HardwareFlowControl |\
 800411c:	4325      	orrs	r5, r4
             Init.ClockDiv
             ); 
  
  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800411e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004122:	432b      	orrs	r3, r5
 8004124:	6073      	str	r3, [r6, #4]

  return HAL_OK;
}
 8004126:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800412a:	2000      	movs	r0, #0
 800412c:	b004      	add	sp, #16
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	080290a5 	.word	0x080290a5

08004138 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004138:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800413c:	4770      	bx	lr

0800413e <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800413e:	2303      	movs	r3, #3
 8004140:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 8004142:	2000      	movs	r0, #0
 8004144:	4770      	bx	lr

08004146 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004146:	6800      	ldr	r0, [r0, #0]
}
 8004148:	f000 0003 	and.w	r0, r0, #3
 800414c:	4770      	bx	lr
	...

08004150 <SDIO_SendCommand>:
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8004150:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->CmdIndex));
 8004152:	684b      	ldr	r3, [r1, #4]
 8004154:	2b3f      	cmp	r3, #63	; 0x3f
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8004156:	4605      	mov	r5, r0
 8004158:	460c      	mov	r4, r1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->CmdIndex));
 800415a:	d904      	bls.n	8004166 <SDIO_SendCommand+0x16>
 800415c:	481b      	ldr	r0, [pc, #108]	; (80041cc <SDIO_SendCommand+0x7c>)
 800415e:	f240 1165 	movw	r1, #357	; 0x165
 8004162:	f7fd fefd 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->Response));
 8004166:	68a3      	ldr	r3, [r4, #8]
 8004168:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800416c:	d006      	beq.n	800417c <SDIO_SendCommand+0x2c>
 800416e:	2bc0      	cmp	r3, #192	; 0xc0
 8004170:	d004      	beq.n	800417c <SDIO_SendCommand+0x2c>
 8004172:	4816      	ldr	r0, [pc, #88]	; (80041cc <SDIO_SendCommand+0x7c>)
 8004174:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8004178:	f7fd fef2 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->WaitForInterrupt));
 800417c:	68e3      	ldr	r3, [r4, #12]
 800417e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004182:	d007      	beq.n	8004194 <SDIO_SendCommand+0x44>
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d004      	beq.n	8004194 <SDIO_SendCommand+0x44>
 800418a:	4810      	ldr	r0, [pc, #64]	; (80041cc <SDIO_SendCommand+0x7c>)
 800418c:	f240 1167 	movw	r1, #359	; 0x167
 8004190:	f7fd fee6 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->CPSM));
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800419a:	d004      	beq.n	80041a6 <SDIO_SendCommand+0x56>
 800419c:	480b      	ldr	r0, [pc, #44]	; (80041cc <SDIO_SendCommand+0x7c>)
 800419e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80041a2:	f7fd fedd 	bl	8001f60 <assert_failed>

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	60ab      	str	r3, [r5, #8]

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 80041aa:	68a1      	ldr	r1, [r4, #8]
 80041ac:	6863      	ldr	r3, [r4, #4]
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
  
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80041ae:	68ea      	ldr	r2, [r5, #12]

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 80041b0:	4319      	orrs	r1, r3
                       SDIO_CmdInitStruct->Response         |\
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	430b      	orrs	r3, r1

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;

  /* Set SDIO command parameters */
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 80041b6:	6921      	ldr	r1, [r4, #16]
 80041b8:	4319      	orrs	r1, r3
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);
  
  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80041ba:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
 80041be:	f023 030f 	bic.w	r3, r3, #15
 80041c2:	430b      	orrs	r3, r1
 80041c4:	60eb      	str	r3, [r5, #12]
  
  return HAL_OK;  
}
 80041c6:	2000      	movs	r0, #0
 80041c8:	bd38      	pop	{r3, r4, r5, pc}
 80041ca:	bf00      	nop
 80041cc:	080290a5 	.word	0x080290a5

080041d0 <SDIO_GetCommandResponse>:
  * @param  SDIOx: Pointer to SDIO register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
  return (uint8_t)(SDIOx->RESPCMD);
 80041d0:	6900      	ldr	r0, [r0, #16]
}
 80041d2:	b2c0      	uxtb	r0, r0
 80041d4:	4770      	bx	lr
	...

080041d8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80041d8:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));
 80041de:	f030 030c 	bics.w	r3, r0, #12
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80041e2:	4604      	mov	r4, r0
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));
 80041e4:	d004      	beq.n	80041f0 <SDIO_GetResponse+0x18>
 80041e6:	4806      	ldr	r0, [pc, #24]	; (8004200 <SDIO_GetResponse+0x28>)
 80041e8:	f240 1193 	movw	r1, #403	; 0x193
 80041ec:	f7fd feb8 	bl	8001f60 <assert_failed>

  /* Get the response */
  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <SDIO_GetResponse+0x2c>)
 80041f2:	4423      	add	r3, r4
 80041f4:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
}  
 80041fa:	b002      	add	sp, #8
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	bf00      	nop
 8004200:	080290a5 	.word	0x080290a5
 8004204:	40012c14 	.word	0x40012c14

08004208 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8004208:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->DataLength));
 800420a:	684b      	ldr	r3, [r1, #4]
 800420c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8004210:	4605      	mov	r5, r0
 8004212:	460c      	mov	r4, r1
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->DataLength));
 8004214:	d304      	bcc.n	8004220 <SDIO_DataConfig+0x18>
 8004216:	4825      	ldr	r0, [pc, #148]	; (80042ac <SDIO_DataConfig+0xa4>)
 8004218:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800421c:	f7fd fea0 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->DataBlockSize));
 8004220:	68a3      	ldr	r3, [r4, #8]
 8004222:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 8004226:	f023 0110 	bic.w	r1, r3, #16
 800422a:	d00c      	beq.n	8004246 <SDIO_DataConfig+0x3e>
 800422c:	2a40      	cmp	r2, #64	; 0x40
 800422e:	d00a      	beq.n	8004246 <SDIO_DataConfig+0x3e>
 8004230:	2a80      	cmp	r2, #128	; 0x80
 8004232:	d008      	beq.n	8004246 <SDIO_DataConfig+0x3e>
 8004234:	29c0      	cmp	r1, #192	; 0xc0
 8004236:	d006      	beq.n	8004246 <SDIO_DataConfig+0x3e>
 8004238:	2be0      	cmp	r3, #224	; 0xe0
 800423a:	d004      	beq.n	8004246 <SDIO_DataConfig+0x3e>
 800423c:	481b      	ldr	r0, [pc, #108]	; (80042ac <SDIO_DataConfig+0xa4>)
 800423e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8004242:	f7fd fe8d 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
 8004246:	68e3      	ldr	r3, [r4, #12]
 8004248:	f033 0302 	bics.w	r3, r3, #2
 800424c:	d004      	beq.n	8004258 <SDIO_DataConfig+0x50>
 800424e:	4817      	ldr	r0, [pc, #92]	; (80042ac <SDIO_DataConfig+0xa4>)
 8004250:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004254:	f7fd fe84 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	f033 0304 	bics.w	r3, r3, #4
 800425e:	d004      	beq.n	800426a <SDIO_DataConfig+0x62>
 8004260:	4812      	ldr	r0, [pc, #72]	; (80042ac <SDIO_DataConfig+0xa4>)
 8004262:	f240 11ab 	movw	r1, #427	; 0x1ab
 8004266:	f7fd fe7b 	bl	8001f60 <assert_failed>
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));
 800426a:	6963      	ldr	r3, [r4, #20]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d904      	bls.n	800427a <SDIO_DataConfig+0x72>
 8004270:	480e      	ldr	r0, [pc, #56]	; (80042ac <SDIO_DataConfig+0xa4>)
 8004272:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004276:	f7fd fe73 	bl	8001f60 <assert_failed>

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	626b      	str	r3, [r5, #36]	; 0x24

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 800427e:	68e2      	ldr	r2, [r4, #12]
 8004280:	68a3      	ldr	r3, [r4, #8]

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
 8004282:	6861      	ldr	r1, [r4, #4]
 8004284:	62a9      	str	r1, [r5, #40]	; 0x28

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8004286:	431a      	orrs	r2, r3
                       SDIO_DataInitStruct->TransferDir   |\
 8004288:	6923      	ldr	r3, [r4, #16]
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
					   
  printf("DataBlockSize: %d\n", SDIO_DataInitStruct->DataLength);
 800428a:	4809      	ldr	r0, [pc, #36]	; (80042b0 <SDIO_DataConfig+0xa8>)
  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
                       SDIO_DataInitStruct->TransferDir   |\
 800428c:	4313      	orrs	r3, r2

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;

  /* Set the SDIO data configuration parameters */
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 800428e:	6962      	ldr	r2, [r4, #20]
 8004290:	ea43 0402 	orr.w	r4, r3, r2
                       SDIO_DataInitStruct->TransferDir   |\
                       SDIO_DataInitStruct->TransferMode  |\
                       SDIO_DataInitStruct->DPSM);
					   
  printf("DataBlockSize: %d\n", SDIO_DataInitStruct->DataLength);
 8004294:	f015 f9fc 	bl	8019690 <printf>
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004298:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  
  printf("Config finish\n");
 800429a:	4806      	ldr	r0, [pc, #24]	; (80042b4 <SDIO_DataConfig+0xac>)
                       SDIO_DataInitStruct->DPSM);
					   
  printf("DataBlockSize: %d\n", SDIO_DataInitStruct->DataLength);
  
  /* Write to SDIO DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800429c:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 80042a0:	4323      	orrs	r3, r4
 80042a2:	62eb      	str	r3, [r5, #44]	; 0x2c
  
  printf("Config finish\n");
 80042a4:	f015 fa36 	bl	8019714 <puts>

  return HAL_OK;

}
 80042a8:	2000      	movs	r0, #0
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	080290a5 	.word	0x080290a5
 80042b0:	080290f5 	.word	0x080290f5
 80042b4:	08029108 	.word	0x08029108

080042b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80042ba:	6803      	ldr	r3, [r0, #0]
 80042bc:	2b0f      	cmp	r3, #15
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042be:	4604      	mov	r4, r0
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80042c0:	d904      	bls.n	80042cc <HAL_RCC_OscConfig+0x14>
 80042c2:	48a2      	ldr	r0, [pc, #648]	; (800454c <HAL_RCC_OscConfig+0x294>)
 80042c4:	f240 1115 	movw	r1, #277	; 0x115
 80042c8:	f7fd fe4a 	bl	8001f60 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	07d8      	lsls	r0, r3, #31
 80042d0:	d403      	bmi.n	80042da <HAL_RCC_OscConfig+0x22>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	0799      	lsls	r1, r3, #30
 80042d6:	d456      	bmi.n	8004386 <HAL_RCC_OscConfig+0xce>
 80042d8:	e0b7      	b.n	800444a <HAL_RCC_OscConfig+0x192>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d906      	bls.n	80042ee <HAL_RCC_OscConfig+0x36>
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d004      	beq.n	80042ee <HAL_RCC_OscConfig+0x36>
 80042e4:	4899      	ldr	r0, [pc, #612]	; (800454c <HAL_RCC_OscConfig+0x294>)
 80042e6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80042ea:	f7fd fe39 	bl	8001f60 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4b98      	ldr	r3, [pc, #608]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	f002 020c 	and.w	r2, r2, #12
 80042f6:	2a04      	cmp	r2, #4
 80042f8:	d007      	beq.n	800430a <HAL_RCC_OscConfig+0x52>
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	f002 020c 	and.w	r2, r2, #12
 8004300:	2a08      	cmp	r2, #8
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x64>
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	025a      	lsls	r2, r3, #9
 8004308:	d508      	bpl.n	800431c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430a:	4b91      	ldr	r3, [pc, #580]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	039b      	lsls	r3, r3, #14
 8004310:	d5df      	bpl.n	80042d2 <HAL_RCC_OscConfig+0x1a>
 8004312:	6863      	ldr	r3, [r4, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1dc      	bne.n	80042d2 <HAL_RCC_OscConfig+0x1a>
      {
        return HAL_ERROR;
 8004318:	2001      	movs	r0, #1
 800431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800431c:	4d8d      	ldr	r5, [pc, #564]	; (8004554 <HAL_RCC_OscConfig+0x29c>)
 800431e:	2300      	movs	r3, #0
 8004320:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f004 fbb1 	bl	8008a88 <HAL_GetTick>
 8004326:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004328:	4b89      	ldr	r3, [pc, #548]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	039f      	lsls	r7, r3, #14
 800432e:	d508      	bpl.n	8004342 <HAL_RCC_OscConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004330:	f004 fbaa 	bl	8008a88 <HAL_GetTick>
 8004334:	f241 3388 	movw	r3, #5000	; 0x1388
 8004338:	1b80      	subs	r0, r0, r6
 800433a:	4298      	cmp	r0, r3
 800433c:	d9f4      	bls.n	8004328 <HAL_RCC_OscConfig+0x70>
        {
          return HAL_TIMEOUT;
 800433e:	2003      	movs	r0, #3
 8004340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004342:	7923      	ldrb	r3, [r4, #4]
 8004344:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004346:	6863      	ldr	r3, [r4, #4]
 8004348:	b173      	cbz	r3, 8004368 <HAL_RCC_OscConfig+0xb0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f004 fb9d 	bl	8008a88 <HAL_GetTick>
 800434e:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004350:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0398      	lsls	r0, r3, #14
 8004356:	d4bc      	bmi.n	80042d2 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f004 fb96 	bl	8008a88 <HAL_GetTick>
 800435c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004360:	1b40      	subs	r0, r0, r5
 8004362:	4298      	cmp	r0, r3
 8004364:	d9f4      	bls.n	8004350 <HAL_RCC_OscConfig+0x98>
 8004366:	e7ea      	b.n	800433e <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f004 fb8e 	bl	8008a88 <HAL_GetTick>
 800436c:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	4b78      	ldr	r3, [pc, #480]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0399      	lsls	r1, r3, #14
 8004374:	d5ad      	bpl.n	80042d2 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004376:	f004 fb87 	bl	8008a88 <HAL_GetTick>
 800437a:	f241 3388 	movw	r3, #5000	; 0x1388
 800437e:	1b40      	subs	r0, r0, r5
 8004380:	4298      	cmp	r0, r3
 8004382:	d9f4      	bls.n	800436e <HAL_RCC_OscConfig+0xb6>
 8004384:	e7db      	b.n	800433e <HAL_RCC_OscConfig+0x86>
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d904      	bls.n	8004396 <HAL_RCC_OscConfig+0xde>
 800438c:	486f      	ldr	r0, [pc, #444]	; (800454c <HAL_RCC_OscConfig+0x294>)
 800438e:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004392:	f7fd fde5 	bl	8001f60 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	2b1f      	cmp	r3, #31
 800439a:	d904      	bls.n	80043a6 <HAL_RCC_OscConfig+0xee>
 800439c:	486b      	ldr	r0, [pc, #428]	; (800454c <HAL_RCC_OscConfig+0x294>)
 800439e:	f240 115b 	movw	r1, #347	; 0x15b
 80043a2:	f7fd fddd 	bl	8001f60 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a6:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	f012 0f0c 	tst.w	r2, #12
 80043ae:	d007      	beq.n	80043c0 <HAL_RCC_OscConfig+0x108>
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	f002 020c 	and.w	r2, r2, #12
 80043b6:	2a08      	cmp	r2, #8
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x134>
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	025a      	lsls	r2, r3, #9
 80043be:	d415      	bmi.n	80043ec <HAL_RCC_OscConfig+0x134>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c0:	4a63      	ldr	r2, [pc, #396]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	079b      	lsls	r3, r3, #30
 80043c6:	d502      	bpl.n	80043ce <HAL_RCC_OscConfig+0x116>
 80043c8:	68e3      	ldr	r3, [r4, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d1a4      	bne.n	8004318 <HAL_RCC_OscConfig+0x60>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	6811      	ldr	r1, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	23f8      	movs	r3, #248	; 0xf8
 80043d2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	fab3 f383 	clz	r3, r3
 80043da:	6920      	ldr	r0, [r4, #16]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4098      	lsls	r0, r3
 80043e0:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80043e4:	ea40 0301 	orr.w	r3, r0, r1
 80043e8:	6013      	str	r3, [r2, #0]
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	e02e      	b.n	800444a <HAL_RCC_OscConfig+0x192>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ec:	68e2      	ldr	r2, [r4, #12]
 80043ee:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <HAL_RCC_OscConfig+0x2a0>)
 80043f0:	b1ea      	cbz	r2, 800442e <HAL_RCC_OscConfig+0x176>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f004 fb47 	bl	8008a88 <HAL_GetTick>
 80043fa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fc:	4954      	ldr	r1, [pc, #336]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 80043fe:	680b      	ldr	r3, [r1, #0]
 8004400:	079f      	lsls	r7, r3, #30
 8004402:	d405      	bmi.n	8004410 <HAL_RCC_OscConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004404:	f004 fb40 	bl	8008a88 <HAL_GetTick>
 8004408:	1b40      	subs	r0, r0, r5
 800440a:	2864      	cmp	r0, #100	; 0x64
 800440c:	d9f6      	bls.n	80043fc <HAL_RCC_OscConfig+0x144>
 800440e:	e796      	b.n	800433e <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	680a      	ldr	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	23f8      	movs	r3, #248	; 0xf8
 8004414:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	6920      	ldr	r0, [r4, #16]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	4098      	lsls	r0, r3
 8004422:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004426:	ea40 0302 	orr.w	r3, r0, r2
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	e00d      	b.n	800444a <HAL_RCC_OscConfig+0x192>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f004 fb2a 	bl	8008a88 <HAL_GetTick>
 8004434:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004436:	4b46      	ldr	r3, [pc, #280]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	079e      	lsls	r6, r3, #30
 800443c:	d505      	bpl.n	800444a <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f004 fb23 	bl	8008a88 <HAL_GetTick>
 8004442:	1b40      	subs	r0, r0, r5
 8004444:	2864      	cmp	r0, #100	; 0x64
 8004446:	d9f6      	bls.n	8004436 <HAL_RCC_OscConfig+0x17e>
 8004448:	e779      	b.n	800433e <HAL_RCC_OscConfig+0x86>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	071d      	lsls	r5, r3, #28
 800444e:	d403      	bmi.n	8004458 <HAL_RCC_OscConfig+0x1a0>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	0758      	lsls	r0, r3, #29
 8004454:	d428      	bmi.n	80044a8 <HAL_RCC_OscConfig+0x1f0>
 8004456:	e052      	b.n	80044fe <HAL_RCC_OscConfig+0x246>
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004458:	6963      	ldr	r3, [r4, #20]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d904      	bls.n	8004468 <HAL_RCC_OscConfig+0x1b0>
 800445e:	483b      	ldr	r0, [pc, #236]	; (800454c <HAL_RCC_OscConfig+0x294>)
 8004460:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8004464:	f7fd fd7c 	bl	8001f60 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004468:	6962      	ldr	r2, [r4, #20]
 800446a:	4b3c      	ldr	r3, [pc, #240]	; (800455c <HAL_RCC_OscConfig+0x2a4>)
 800446c:	b172      	cbz	r2, 800448c <HAL_RCC_OscConfig+0x1d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f004 fb09 	bl	8008a88 <HAL_GetTick>
 8004476:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 800447a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447c:	0799      	lsls	r1, r3, #30
 800447e:	d4e7      	bmi.n	8004450 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004480:	f004 fb02 	bl	8008a88 <HAL_GetTick>
 8004484:	1b40      	subs	r0, r0, r5
 8004486:	2864      	cmp	r0, #100	; 0x64
 8004488:	d9f6      	bls.n	8004478 <HAL_RCC_OscConfig+0x1c0>
 800448a:	e758      	b.n	800433e <HAL_RCC_OscConfig+0x86>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f004 fafb 	bl	8008a88 <HAL_GetTick>
 8004492:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 8004496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004498:	079a      	lsls	r2, r3, #30
 800449a:	d5d9      	bpl.n	8004450 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800449c:	f004 faf4 	bl	8008a88 <HAL_GetTick>
 80044a0:	1b40      	subs	r0, r0, r5
 80044a2:	2864      	cmp	r0, #100	; 0x64
 80044a4:	d9f6      	bls.n	8004494 <HAL_RCC_OscConfig+0x1dc>
 80044a6:	e74a      	b.n	800433e <HAL_RCC_OscConfig+0x86>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80044a8:	68a3      	ldr	r3, [r4, #8]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d830      	bhi.n	8004510 <HAL_RCC_OscConfig+0x258>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	4a28      	ldr	r2, [pc, #160]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 80044b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b6:	6413      	str	r3, [r2, #64]	; 0x40
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044b8:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 80044bc:	6813      	ldr	r3, [r2, #0]
 80044be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c2:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c4:	f004 fae0 	bl	8008a88 <HAL_GetTick>
 80044c8:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_RCC_OscConfig+0x2a8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	05db      	lsls	r3, r3, #23
 80044d0:	d526      	bpl.n	8004520 <HAL_RCC_OscConfig+0x268>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80044d2:	4d24      	ldr	r5, [pc, #144]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	2300      	movs	r3, #0
 80044d6:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f004 fad6 	bl	8008a88 <HAL_GetTick>
 80044dc:	4606      	mov	r6, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	079f      	lsls	r7, r3, #30
 80044e4:	d422      	bmi.n	800452c <HAL_RCC_OscConfig+0x274>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e6:	7a23      	ldrb	r3, [r4, #8]
 80044e8:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d13b      	bne.n	8004568 <HAL_RCC_OscConfig+0x2b0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f004 faca 	bl	8008a88 <HAL_GetTick>
 80044f4:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_RCC_OscConfig+0x298>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	079e      	lsls	r6, r3, #30
 80044fc:	d51e      	bpl.n	800453c <HAL_RCC_OscConfig+0x284>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80044fe:	69a3      	ldr	r3, [r4, #24]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d940      	bls.n	8004586 <HAL_RCC_OscConfig+0x2ce>
 8004504:	4811      	ldr	r0, [pc, #68]	; (800454c <HAL_RCC_OscConfig+0x294>)
 8004506:	f44f 7102 	mov.w	r1, #520	; 0x208
 800450a:	f7fd fd29 	bl	8001f60 <assert_failed>
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x2ce>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004510:	2b05      	cmp	r3, #5
 8004512:	d0cc      	beq.n	80044ae <HAL_RCC_OscConfig+0x1f6>
 8004514:	480d      	ldr	r0, [pc, #52]	; (800454c <HAL_RCC_OscConfig+0x294>)
 8004516:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800451a:	f7fd fd21 	bl	8001f60 <assert_failed>
 800451e:	e7c6      	b.n	80044ae <HAL_RCC_OscConfig+0x1f6>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f004 fab2 	bl	8008a88 <HAL_GetTick>
 8004524:	1b40      	subs	r0, r0, r5
 8004526:	2864      	cmp	r0, #100	; 0x64
 8004528:	d9cf      	bls.n	80044ca <HAL_RCC_OscConfig+0x212>
 800452a:	e708      	b.n	800433e <HAL_RCC_OscConfig+0x86>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f004 faac 	bl	8008a88 <HAL_GetTick>
 8004530:	f241 3388 	movw	r3, #5000	; 0x1388
 8004534:	1b80      	subs	r0, r0, r6
 8004536:	4298      	cmp	r0, r3
 8004538:	d9d1      	bls.n	80044de <HAL_RCC_OscConfig+0x226>
 800453a:	e700      	b.n	800433e <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f004 faa4 	bl	8008a88 <HAL_GetTick>
 8004540:	f241 3388 	movw	r3, #5000	; 0x1388
 8004544:	1b40      	subs	r0, r0, r5
 8004546:	4298      	cmp	r0, r3
 8004548:	d9d5      	bls.n	80044f6 <HAL_RCC_OscConfig+0x23e>
 800454a:	e6f8      	b.n	800433e <HAL_RCC_OscConfig+0x86>
 800454c:	08029126 	.word	0x08029126
 8004550:	40023800 	.word	0x40023800
 8004554:	40023802 	.word	0x40023802
 8004558:	42470000 	.word	0x42470000
 800455c:	42470e80 	.word	0x42470e80
 8004560:	40007000 	.word	0x40007000
 8004564:	40023870 	.word	0x40023870
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f004 fa8e 	bl	8008a88 <HAL_GetTick>
 800456c:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456e:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_RCC_OscConfig+0x3f8>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	0798      	lsls	r0, r3, #30
 8004574:	d5c3      	bpl.n	80044fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f004 fa87 	bl	8008a88 <HAL_GetTick>
 800457a:	f241 3388 	movw	r3, #5000	; 0x1388
 800457e:	1b40      	subs	r0, r0, r5
 8004580:	4298      	cmp	r0, r3
 8004582:	d9f4      	bls.n	800456e <HAL_RCC_OscConfig+0x2b6>
 8004584:	e6db      	b.n	800433e <HAL_RCC_OscConfig+0x86>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004586:	69a2      	ldr	r2, [r4, #24]
 8004588:	b90a      	cbnz	r2, 800458e <HAL_RCC_OscConfig+0x2d6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800458a:	2000      	movs	r0, #0
 800458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458e:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_RCC_OscConfig+0x3f8>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b08      	cmp	r3, #8
 8004598:	f43f aebe 	beq.w	8004318 <HAL_RCC_OscConfig+0x60>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459c:	2a02      	cmp	r2, #2
 800459e:	4d45      	ldr	r5, [pc, #276]	; (80046b4 <HAL_RCC_OscConfig+0x3fc>)
 80045a0:	d175      	bne.n	800468e <HAL_RCC_OscConfig+0x3d6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80045a2:	69e3      	ldr	r3, [r4, #28]
 80045a4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80045a8:	d004      	beq.n	80045b4 <HAL_RCC_OscConfig+0x2fc>
 80045aa:	4843      	ldr	r0, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x400>)
 80045ac:	f240 2111 	movw	r1, #529	; 0x211
 80045b0:	f7fd fcd6 	bl	8001f60 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80045b4:	6a23      	ldr	r3, [r4, #32]
 80045b6:	2b3f      	cmp	r3, #63	; 0x3f
 80045b8:	d904      	bls.n	80045c4 <HAL_RCC_OscConfig+0x30c>
 80045ba:	483f      	ldr	r0, [pc, #252]	; (80046b8 <HAL_RCC_OscConfig+0x400>)
 80045bc:	f240 2112 	movw	r1, #530	; 0x212
 80045c0:	f7fd fcce 	bl	8001f60 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80045c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c6:	3bc0      	subs	r3, #192	; 0xc0
 80045c8:	2bf0      	cmp	r3, #240	; 0xf0
 80045ca:	d904      	bls.n	80045d6 <HAL_RCC_OscConfig+0x31e>
 80045cc:	483a      	ldr	r0, [pc, #232]	; (80046b8 <HAL_RCC_OscConfig+0x400>)
 80045ce:	f240 2113 	movw	r1, #531	; 0x213
 80045d2:	f7fd fcc5 	bl	8001f60 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80045d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045d8:	f023 0204 	bic.w	r2, r3, #4
 80045dc:	2a02      	cmp	r2, #2
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_OscConfig+0x33a>
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d006      	beq.n	80045f2 <HAL_RCC_OscConfig+0x33a>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d004      	beq.n	80045f2 <HAL_RCC_OscConfig+0x33a>
 80045e8:	4833      	ldr	r0, [pc, #204]	; (80046b8 <HAL_RCC_OscConfig+0x400>)
 80045ea:	f44f 7105 	mov.w	r1, #532	; 0x214
 80045ee:	f7fd fcb7 	bl	8001f60 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80045f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045f4:	3b04      	subs	r3, #4
 80045f6:	2b0b      	cmp	r3, #11
 80045f8:	d904      	bls.n	8004604 <HAL_RCC_OscConfig+0x34c>
 80045fa:	482f      	ldr	r0, [pc, #188]	; (80046b8 <HAL_RCC_OscConfig+0x400>)
 80045fc:	f240 2115 	movw	r1, #533	; 0x215
 8004600:	f7fd fcae 	bl	8001f60 <assert_failed>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	602b      	str	r3, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f004 fa3e 	bl	8008a88 <HAL_GetTick>
 800460c:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	4e28      	ldr	r6, [pc, #160]	; (80046b0 <HAL_RCC_OscConfig+0x3f8>)
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	0199      	lsls	r1, r3, #6
 8004614:	d505      	bpl.n	8004622 <HAL_RCC_OscConfig+0x36a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f004 fa37 	bl	8008a88 <HAL_GetTick>
 800461a:	1bc0      	subs	r0, r0, r7
 800461c:	2864      	cmp	r0, #100	; 0x64
 800461e:	d9f6      	bls.n	800460e <HAL_RCC_OscConfig+0x356>
 8004620:	e68d      	b.n	800433e <HAL_RCC_OscConfig+0x86>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8004626:	fa90 f0a0 	rbit	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800462a:	fab0 f080 	clz	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8004632:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004636:	fab1 f181 	clz	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800463e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004642:	fab2 f282 	clz	r2, r2
 8004646:	6a27      	ldr	r7, [r4, #32]
 8004648:	69e3      	ldr	r3, [r4, #28]
 800464a:	433b      	orrs	r3, r7
 800464c:	f043 5700 	orr.w	r7, r3, #536870912	; 0x20000000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004652:	b2c0      	uxtb	r0, r0
 8004654:	4083      	lsls	r3, r0
 8004656:	ea47 0003 	orr.w	r0, r7, r3
 800465a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	b2c9      	uxtb	r1, r1
 8004660:	3b01      	subs	r3, #1
 8004662:	408b      	lsls	r3, r1
 8004664:	b2d1      	uxtb	r1, r2
 8004666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004668:	4303      	orrs	r3, r0
 800466a:	408a      	lsls	r2, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	2301      	movs	r3, #1
 8004672:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f004 fa08 	bl	8008a88 <HAL_GetTick>
 8004678:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <HAL_RCC_OscConfig+0x3f8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	019a      	lsls	r2, r3, #6
 8004680:	d483      	bmi.n	800458a <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004682:	f004 fa01 	bl	8008a88 <HAL_GetTick>
 8004686:	1b00      	subs	r0, r0, r4
 8004688:	2864      	cmp	r0, #100	; 0x64
 800468a:	d9f6      	bls.n	800467a <HAL_RCC_OscConfig+0x3c2>
 800468c:	e657      	b.n	800433e <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	602b      	str	r3, [r5, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f004 f9f9 	bl	8008a88 <HAL_GetTick>
 8004696:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_OscConfig+0x3f8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	f57f af74 	bpl.w	800458a <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f004 f9f1 	bl	8008a88 <HAL_GetTick>
 80046a6:	1b00      	subs	r0, r0, r4
 80046a8:	2864      	cmp	r0, #100	; 0x64
 80046aa:	d9f5      	bls.n	8004698 <HAL_RCC_OscConfig+0x3e0>
 80046ac:	e647      	b.n	800433e <HAL_RCC_OscConfig+0x86>
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	42470060 	.word	0x42470060
 80046b8:	08029126 	.word	0x08029126

080046bc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80046bc:	6803      	ldr	r3, [r0, #0]
 80046be:	3b01      	subs	r3, #1
 80046c0:	2b0e      	cmp	r3, #14
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c2:	b570      	push	{r4, r5, r6, lr}
 80046c4:	4604      	mov	r4, r0
 80046c6:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80046c8:	d904      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x18>
 80046ca:	48a5      	ldr	r0, [pc, #660]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 80046cc:	f240 2173 	movw	r1, #627	; 0x273
 80046d0:	f7fd fc46 	bl	8001f60 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80046d4:	2d0f      	cmp	r5, #15
 80046d6:	d904      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x26>
 80046d8:	48a1      	ldr	r0, [pc, #644]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 80046da:	f44f 711d 	mov.w	r1, #628	; 0x274
 80046de:	f7fd fc3f 	bl	8001f60 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80046e2:	4ba0      	ldr	r3, [pc, #640]	; (8004964 <HAL_RCC_ClockConfig+0x2a8>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	f002 020f 	and.w	r2, r2, #15
 80046ea:	4295      	cmp	r5, r2
 80046ec:	f240 8081 	bls.w	80047f2 <HAL_RCC_ClockConfig+0x136>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f0:	b2ea      	uxtb	r2, r5
 80046f2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	42ab      	cmp	r3, r5
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80046fe:	2001      	movs	r0, #1
 8004700:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	079e      	lsls	r6, r3, #30
 8004706:	d51d      	bpl.n	8004744 <HAL_RCC_ClockConfig+0x88>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004708:	68a3      	ldr	r3, [r4, #8]
 800470a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 800470e:	d012      	beq.n	8004736 <HAL_RCC_ClockConfig+0x7a>
 8004710:	f023 0220 	bic.w	r2, r3, #32
 8004714:	2a90      	cmp	r2, #144	; 0x90
 8004716:	d00e      	beq.n	8004736 <HAL_RCC_ClockConfig+0x7a>
 8004718:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800471c:	2aa0      	cmp	r2, #160	; 0xa0
 800471e:	d00a      	beq.n	8004736 <HAL_RCC_ClockConfig+0x7a>
 8004720:	f023 0210 	bic.w	r2, r3, #16
 8004724:	2ac0      	cmp	r2, #192	; 0xc0
 8004726:	d006      	beq.n	8004736 <HAL_RCC_ClockConfig+0x7a>
 8004728:	2bf0      	cmp	r3, #240	; 0xf0
 800472a:	d004      	beq.n	8004736 <HAL_RCC_ClockConfig+0x7a>
 800472c:	488c      	ldr	r0, [pc, #560]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 800472e:	f240 218a 	movw	r1, #650	; 0x28a
 8004732:	f7fd fc15 	bl	8001f60 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004736:	498c      	ldr	r1, [pc, #560]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 8004738:	688b      	ldr	r3, [r1, #8]
 800473a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473e:	68a3      	ldr	r3, [r4, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	07dd      	lsls	r5, r3, #31
 8004748:	d404      	bmi.n	8004754 <HAL_RCC_ClockConfig+0x98>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	0758      	lsls	r0, r3, #29
 800474e:	f100 80ce 	bmi.w	80048ee <HAL_RCC_ClockConfig+0x232>
 8004752:	e0e4      	b.n	800491e <HAL_RCC_ClockConfig+0x262>
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004754:	6863      	ldr	r3, [r4, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d904      	bls.n	8004764 <HAL_RCC_ClockConfig+0xa8>
 800475a:	4881      	ldr	r0, [pc, #516]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 800475c:	f240 2191 	movw	r1, #657	; 0x291
 8004760:	f7fd fbfe 	bl	8001f60 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004764:	6862      	ldr	r2, [r4, #4]
 8004766:	4b80      	ldr	r3, [pc, #512]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 8004768:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476c:	d102      	bne.n	8004774 <HAL_RCC_ClockConfig+0xb8>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8004772:	e006      	b.n	8004782 <HAL_RCC_ClockConfig+0xc6>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004774:	2a02      	cmp	r2, #2
 8004776:	d102      	bne.n	800477e <HAL_RCC_ClockConfig+0xc2>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004778:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800477c:	e001      	b.n	8004782 <HAL_RCC_ClockConfig+0xc6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	f011 0f02 	tst.w	r1, #2
 8004782:	d0bc      	beq.n	80046fe <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	f021 0103 	bic.w	r1, r1, #3
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f004 f97b 	bl	8008a88 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004798:	d10e      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xfc>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d0d1      	beq.n	800474a <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a6:	f004 f96f 	bl	8008a88 <HAL_GetTick>
 80047aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80047ae:	1b40      	subs	r0, r0, r5
 80047b0:	4298      	cmp	r0, r3
 80047b2:	d9f2      	bls.n	800479a <HAL_RCC_ClockConfig+0xde>
          {
            return HAL_TIMEOUT;
 80047b4:	2003      	movs	r0, #3
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d114      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x12a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047bc:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d0c0      	beq.n	800474a <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f004 f95e 	bl	8008a88 <HAL_GetTick>
 80047cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80047d0:	1b40      	subs	r0, r0, r5
 80047d2:	4298      	cmp	r0, r3
 80047d4:	d9f2      	bls.n	80047bc <HAL_RCC_ClockConfig+0x100>
 80047d6:	e7ed      	b.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d8:	f004 f956 	bl	8008a88 <HAL_GetTick>
 80047dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80047e0:	1b40      	subs	r0, r0, r5
 80047e2:	4298      	cmp	r0, r3
 80047e4:	d8e6      	bhi.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80047e6:	4b60      	ldr	r3, [pc, #384]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f013 0f0c 	tst.w	r3, #12
 80047ee:	d1f3      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x11c>
 80047f0:	e7ab      	b.n	800474a <HAL_RCC_ClockConfig+0x8e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	0799      	lsls	r1, r3, #30
 80047f6:	d51d      	bpl.n	8004834 <HAL_RCC_ClockConfig+0x178>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80047fe:	d012      	beq.n	8004826 <HAL_RCC_ClockConfig+0x16a>
 8004800:	f023 0220 	bic.w	r2, r3, #32
 8004804:	2a90      	cmp	r2, #144	; 0x90
 8004806:	d00e      	beq.n	8004826 <HAL_RCC_ClockConfig+0x16a>
 8004808:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800480c:	2aa0      	cmp	r2, #160	; 0xa0
 800480e:	d00a      	beq.n	8004826 <HAL_RCC_ClockConfig+0x16a>
 8004810:	f023 0210 	bic.w	r2, r3, #16
 8004814:	2ac0      	cmp	r2, #192	; 0xc0
 8004816:	d006      	beq.n	8004826 <HAL_RCC_ClockConfig+0x16a>
 8004818:	2bf0      	cmp	r3, #240	; 0xf0
 800481a:	d004      	beq.n	8004826 <HAL_RCC_ClockConfig+0x16a>
 800481c:	4850      	ldr	r0, [pc, #320]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 800481e:	f240 21d9 	movw	r1, #729	; 0x2d9
 8004822:	f7fd fb9d 	bl	8001f60 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004826:	4950      	ldr	r1, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 8004828:	688b      	ldr	r3, [r1, #8]
 800482a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482e:	68a3      	ldr	r3, [r4, #8]
 8004830:	4313      	orrs	r3, r2
 8004832:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	07da      	lsls	r2, r3, #31
 8004838:	d409      	bmi.n	800484e <HAL_RCC_ClockConfig+0x192>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <HAL_RCC_ClockConfig+0x2a8>)
 800483c:	b2ea      	uxtb	r2, r5
 800483e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	42ab      	cmp	r3, r5
 8004848:	f47f af59 	bne.w	80046fe <HAL_RCC_ClockConfig+0x42>
 800484c:	e77d      	b.n	800474a <HAL_RCC_ClockConfig+0x8e>
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800484e:	6863      	ldr	r3, [r4, #4]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d904      	bls.n	800485e <HAL_RCC_ClockConfig+0x1a2>
 8004854:	4842      	ldr	r0, [pc, #264]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 8004856:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800485a:	f7fd fb81 	bl	8001f60 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485e:	6862      	ldr	r2, [r4, #4]
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 8004862:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004864:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004866:	d102      	bne.n	800486e <HAL_RCC_ClockConfig+0x1b2>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004868:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800486c:	e006      	b.n	800487c <HAL_RCC_ClockConfig+0x1c0>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486e:	2a02      	cmp	r2, #2
 8004870:	d102      	bne.n	8004878 <HAL_RCC_ClockConfig+0x1bc>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8004876:	e001      	b.n	800487c <HAL_RCC_ClockConfig+0x1c0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004878:	f011 0f02 	tst.w	r1, #2
 800487c:	f43f af3f 	beq.w	80046fe <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004880:	6899      	ldr	r1, [r3, #8]
 8004882:	f021 0103 	bic.w	r1, r1, #3
 8004886:	430a      	orrs	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488a:	f004 f8fd 	bl	8008a88 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488e:	6863      	ldr	r3, [r4, #4]
 8004890:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004894:	d10d      	bne.n	80048b2 <HAL_RCC_ClockConfig+0x1f6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8004896:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d0cb      	beq.n	800483a <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a2:	f004 f8f1 	bl	8008a88 <HAL_GetTick>
 80048a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80048aa:	1b80      	subs	r0, r0, r6
 80048ac:	4298      	cmp	r0, r3
 80048ae:	d9f2      	bls.n	8004896 <HAL_RCC_ClockConfig+0x1da>
 80048b0:	e780      	b.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d115      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x226>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b6:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d0bb      	beq.n	800483a <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c2:	f004 f8e1 	bl	8008a88 <HAL_GetTick>
 80048c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80048ca:	1b80      	subs	r0, r0, r6
 80048cc:	4298      	cmp	r0, r3
 80048ce:	d9f2      	bls.n	80048b6 <HAL_RCC_ClockConfig+0x1fa>
 80048d0:	e770      	b.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d2:	f004 f8d9 	bl	8008a88 <HAL_GetTick>
 80048d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80048da:	1b80      	subs	r0, r0, r6
 80048dc:	4298      	cmp	r0, r3
 80048de:	f63f af69 	bhi.w	80047b4 <HAL_RCC_ClockConfig+0xf8>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80048e2:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f013 0f0c 	tst.w	r3, #12
 80048ea:	d1f2      	bne.n	80048d2 <HAL_RCC_ClockConfig+0x216>
 80048ec:	e7a5      	b.n	800483a <HAL_RCC_ClockConfig+0x17e>
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80048f4:	d00c      	beq.n	8004910 <HAL_RCC_ClockConfig+0x254>
 80048f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048fa:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80048fe:	d007      	beq.n	8004910 <HAL_RCC_ClockConfig+0x254>
 8004900:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004904:	d004      	beq.n	8004910 <HAL_RCC_ClockConfig+0x254>
 8004906:	4816      	ldr	r0, [pc, #88]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 8004908:	f44f 714c 	mov.w	r1, #816	; 0x330
 800490c:	f7fd fb28 	bl	8001f60 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004910:	4915      	ldr	r1, [pc, #84]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 8004912:	688b      	ldr	r3, [r1, #8]
 8004914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004918:	68e3      	ldr	r3, [r4, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	d518      	bpl.n	8004956 <HAL_RCC_ClockConfig+0x29a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800492a:	d00c      	beq.n	8004946 <HAL_RCC_ClockConfig+0x28a>
 800492c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004930:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8004934:	d007      	beq.n	8004946 <HAL_RCC_ClockConfig+0x28a>
 8004936:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800493a:	d004      	beq.n	8004946 <HAL_RCC_ClockConfig+0x28a>
 800493c:	4808      	ldr	r0, [pc, #32]	; (8004960 <HAL_RCC_ClockConfig+0x2a4>)
 800493e:	f240 3137 	movw	r1, #823	; 0x337
 8004942:	f7fd fb0d 	bl	8001f60 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004946:	4a08      	ldr	r2, [pc, #32]	; (8004968 <HAL_RCC_ClockConfig+0x2ac>)
 8004948:	6921      	ldr	r1, [r4, #16]
 800494a:	6893      	ldr	r3, [r2, #8]
 800494c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004950:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004954:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004956:	200f      	movs	r0, #15
 8004958:	f004 f866 	bl	8008a28 <HAL_InitTick>
  
  return HAL_OK;
 800495c:	2000      	movs	r0, #0
}
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	08029126 	.word	0x08029126
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800

0800496c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	b530      	push	{r4, r5, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496e:	4c1d      	ldr	r4, [pc, #116]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x78>)
 8004970:	68a3      	ldr	r3, [r4, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b04      	cmp	r3, #4
 8004978:	d030      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x70>
 800497a:	2b08      	cmp	r3, #8
 800497c:	d130      	bne.n	80049e0 <HAL_RCC_GetSysClockFreq+0x74>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800497e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004980:	6863      	ldr	r3, [r4, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004982:	f002 053f 	and.w	r5, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004986:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800498a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800498e:	6863      	ldr	r3, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004994:	fab1 f181 	clz	r1, r1
 8004998:	f647 70c0 	movw	r0, #32704	; 0x7fc0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800499c:	bf04      	itt	eq
 800499e:	4a12      	ldreq	r2, [pc, #72]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80049a0:	fbb2 f2f5 	udiveq	r2, r2, r5
 80049a4:	b2c9      	uxtb	r1, r1
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80049a6:	ea00 0003 	and.w	r0, r0, r3
 80049aa:	fa20 f001 	lsr.w	r0, r0, r1
 80049ae:	bf1c      	itt	ne
 80049b0:	490e      	ldrne	r1, [pc, #56]	; (80049ec <HAL_RCC_GetSysClockFreq+0x80>)
 80049b2:	fbb1 f2f5 	udivne	r2, r1, r5
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80049b6:	fb02 f300 	mul.w	r3, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80049ba:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x78>)
 80049bc:	6850      	ldr	r0, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80049c2:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	fab2 f282 	clz	r2, r2
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80049d0:	40d0      	lsrs	r0, r2
 80049d2:	3001      	adds	r0, #1
 80049d4:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 80049d6:	fbb3 f0f0 	udiv	r0, r3, r0
 80049da:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049dc:	4803      	ldr	r0, [pc, #12]	; (80049ec <HAL_RCC_GetSysClockFreq+0x80>)
 80049de:	bd30      	pop	{r4, r5, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x7c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80049e2:	bd30      	pop	{r4, r5, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	017d7840 	.word	0x017d7840

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80049f2:	f7ff ffbb 	bl	800496c <HAL_RCC_GetSysClockFreq>
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x2c>)
 80049f8:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fa:	23f0      	movs	r3, #240	; 0xf0
 80049fc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0e:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a10:	5cd3      	ldrb	r3, [r2, r3]
 8004a12:	40d8      	lsrs	r0, r3
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_RCC_GetHCLKFreq+0x34>)
 8004a16:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8004a18:	bd08      	pop	{r3, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	08029116 	.word	0x08029116
 8004a24:	20000000 	.word	0x20000000

08004a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8004a28:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004a2a:	f7ff ffe1 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a30:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004a36:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	4a02      	ldr	r2, [pc, #8]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004a4a:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a4c:	40d8      	lsrs	r0, r3
 8004a4e:	bd08      	pop	{r3, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	08029116 	.word	0x08029116

08004a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004a5a:	f7ff ffc9 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a60:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a66:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
} 
 8004a7c:	40d8      	lsrs	r0, r3
 8004a7e:	bd08      	pop	{r3, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	08029116 	.word	0x08029116

08004a88 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a88:	230f      	movs	r3, #15
 8004a8a:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_GetClockConfig+0x34>)
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	f002 0203 	and.w	r2, r2, #3
 8004a94:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a9c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004aa4:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <HAL_RCC_GetClockConfig+0x38>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	600b      	str	r3, [r1, #0]
 8004aba:	4770      	bx	lr
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40023c00 	.word	0x40023c00

08004ac4 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004ac4:	6803      	ldr	r3, [r0, #0]
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004acc:	d0fb      	beq.n	8004ac6 <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad0:	0752      	lsls	r2, r2, #29
 8004ad2:	d503      	bpl.n	8004adc <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004ad8:	2003      	movs	r0, #3
 8004ada:	4770      	bx	lr
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8004adc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ade:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004ae2:	bf15      	itete	ne
 8004ae4:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ae6:	f240 52ff 	movweq	r2, #1535	; 0x5ff
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004aea:	6398      	strne	r0, [r3, #56]	; 0x38
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004aec:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 8004aee:	4770      	bx	lr

08004af0 <SD_CmdResp1Error>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	4605      	mov	r5, r0
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004af4:	6800      	ldr	r0, [r0, #0]
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 8004af6:	460e      	mov	r6, r1
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8004af8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004afa:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004afe:	d0fb      	beq.n	8004af8 <SD_CmdResp1Error+0x8>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8004b00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b02:	075b      	lsls	r3, r3, #29
 8004b04:	d503      	bpl.n	8004b0e <SD_CmdResp1Error+0x1e>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8004b06:	2304      	movs	r3, #4
 8004b08:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 8004b0a:	2003      	movs	r0, #3
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8004b0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b10:	f013 0401 	ands.w	r4, r3, #1
 8004b14:	d002      	beq.n	8004b1c <SD_CmdResp1Error+0x2c>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 8004b16:	2301      	movs	r3, #1
 8004b18:	6383      	str	r3, [r0, #56]	; 0x38
 8004b1a:	e039      	b.n	8004b90 <SD_CmdResp1Error+0xa0>
    
    return errorstate;
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8004b1c:	f7ff fb58 	bl	80041d0 <SDIO_GetCommandResponse>
 8004b20:	42b0      	cmp	r0, r6
 8004b22:	d001      	beq.n	8004b28 <SD_CmdResp1Error+0x38>
  {
    errorstate = SD_ILLEGAL_CMD;
    
    return errorstate;
 8004b24:	2010      	movs	r0, #16
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff fb51 	bl	80041d8 <SDIO_GetResponse>
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8004b36:	4b28      	ldr	r3, [pc, #160]	; (8004bd8 <SD_CmdResp1Error+0xe8>)
 8004b38:	4003      	ands	r3, r0
 8004b3a:	b34b      	cbz	r3, 8004b90 <SD_CmdResp1Error+0xa0>
  {
    return errorstate;
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	db29      	blt.n	8004b94 <SD_CmdResp1Error+0xa4>
  {
    return(SD_ADDR_OUT_OF_RANGE);
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8004b40:	0045      	lsls	r5, r0, #1
 8004b42:	d429      	bmi.n	8004b98 <SD_CmdResp1Error+0xa8>
  {
    return(SD_ADDR_MISALIGNED);
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8004b44:	0084      	lsls	r4, r0, #2
 8004b46:	d429      	bmi.n	8004b9c <SD_CmdResp1Error+0xac>
  {
    return(SD_BLOCK_LEN_ERR);
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8004b48:	00c1      	lsls	r1, r0, #3
 8004b4a:	d429      	bmi.n	8004ba0 <SD_CmdResp1Error+0xb0>
  {
    return(SD_ERASE_SEQ_ERR);
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8004b4c:	0102      	lsls	r2, r0, #4
 8004b4e:	d429      	bmi.n	8004ba4 <SD_CmdResp1Error+0xb4>
  {
    return(SD_BAD_ERASE_PARAM);
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8004b50:	0143      	lsls	r3, r0, #5
 8004b52:	d429      	bmi.n	8004ba8 <SD_CmdResp1Error+0xb8>
  {
    return(SD_WRITE_PROT_VIOLATION);
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8004b54:	01c6      	lsls	r6, r0, #7
 8004b56:	d429      	bmi.n	8004bac <SD_CmdResp1Error+0xbc>
  {
    return(SD_LOCK_UNLOCK_FAILED);
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8004b58:	0205      	lsls	r5, r0, #8
 8004b5a:	d429      	bmi.n	8004bb0 <SD_CmdResp1Error+0xc0>
  {
    return(SD_COM_CRC_FAILED);
  }
  
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8004b5c:	0244      	lsls	r4, r0, #9
 8004b5e:	d4e1      	bmi.n	8004b24 <SD_CmdResp1Error+0x34>
  {
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8004b60:	0281      	lsls	r1, r0, #10
 8004b62:	d427      	bmi.n	8004bb4 <SD_CmdResp1Error+0xc4>
  {
    return(SD_CARD_ECC_FAILED);
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8004b64:	02c2      	lsls	r2, r0, #11
 8004b66:	d427      	bmi.n	8004bb8 <SD_CmdResp1Error+0xc8>
  {
    return(SD_CC_ERROR);
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8004b68:	0303      	lsls	r3, r0, #12
 8004b6a:	d427      	bmi.n	8004bbc <SD_CmdResp1Error+0xcc>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8004b6c:	0346      	lsls	r6, r0, #13
 8004b6e:	d427      	bmi.n	8004bc0 <SD_CmdResp1Error+0xd0>
  {
    return(SD_STREAM_READ_UNDERRUN);
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8004b70:	0385      	lsls	r5, r0, #14
 8004b72:	d427      	bmi.n	8004bc4 <SD_CmdResp1Error+0xd4>
  {
    return(SD_STREAM_WRITE_OVERRUN);
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8004b74:	03c4      	lsls	r4, r0, #15
 8004b76:	d427      	bmi.n	8004bc8 <SD_CmdResp1Error+0xd8>
  {
    return(SD_CID_CSD_OVERWRITE);
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8004b78:	0401      	lsls	r1, r0, #16
 8004b7a:	d427      	bmi.n	8004bcc <SD_CmdResp1Error+0xdc>
  {
    return(SD_WP_ERASE_SKIP);
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8004b7c:	0442      	lsls	r2, r0, #17
 8004b7e:	d427      	bmi.n	8004bd0 <SD_CmdResp1Error+0xe0>
  {
    return(SD_CARD_ECC_DISABLED);
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8004b80:	0483      	lsls	r3, r0, #18
 8004b82:	d427      	bmi.n	8004bd4 <SD_CmdResp1Error+0xe4>
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
 8004b84:	f010 0f08 	tst.w	r0, #8
 8004b88:	bf14      	ite	ne
 8004b8a:	201a      	movne	r0, #26
 8004b8c:	2000      	moveq	r0, #0
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
  {
    return errorstate;
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8004b94:	201c      	movs	r0, #28
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
  {
    return(SD_ADDR_MISALIGNED);
 8004b98:	2009      	movs	r0, #9
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
  {
    return(SD_BLOCK_LEN_ERR);
 8004b9c:	200a      	movs	r0, #10
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
  {
    return(SD_ERASE_SEQ_ERR);
 8004ba0:	200b      	movs	r0, #11
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
  {
    return(SD_BAD_ERASE_PARAM);
 8004ba4:	200c      	movs	r0, #12
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
  {
    return(SD_WRITE_PROT_VIOLATION);
 8004ba8:	200d      	movs	r0, #13
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
  {
    return(SD_LOCK_UNLOCK_FAILED);
 8004bac:	200e      	movs	r0, #14
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 8004bb0:	200f      	movs	r0, #15
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
  {
    return(SD_CARD_ECC_FAILED);
 8004bb4:	2011      	movs	r0, #17
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
  {
    return(SD_CC_ERROR);
 8004bb8:	2012      	movs	r0, #18
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8004bbc:	2013      	movs	r0, #19
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
  {
    return(SD_STREAM_READ_UNDERRUN);
 8004bc0:	2014      	movs	r0, #20
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
  {
    return(SD_STREAM_WRITE_OVERRUN);
 8004bc4:	2015      	movs	r0, #21
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
  {
    return(SD_CID_CSD_OVERWRITE);
 8004bc8:	2016      	movs	r0, #22
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
  {
    return(SD_WP_ERASE_SKIP);
 8004bcc:	2017      	movs	r0, #23
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
  {
    return(SD_CARD_ECC_DISABLED);
 8004bd0:	2018      	movs	r0, #24
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
  {
    return(SD_ERASE_RESET);
 8004bd4:	2019      	movs	r0, #25
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
}
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	fdffe008 	.word	0xfdffe008

08004bdc <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bde:	b08f      	sub	sp, #60	; 0x3c
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8004be0:	2300      	movs	r3, #0
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004be2:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	9302      	str	r3, [sp, #8]
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004be8:	2410      	movs	r4, #16
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004bea:	2240      	movs	r2, #64	; 0x40
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004bec:	9306      	str	r3, [sp, #24]
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004bee:	460e      	mov	r6, r1
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004bf4:	a903      	add	r1, sp, #12
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
 8004bf6:	2708      	movs	r7, #8
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004bf8:	6800      	ldr	r0, [r0, #0]
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
 8004bfa:	9703      	str	r7, [sp, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004bfc:	9404      	str	r4, [sp, #16]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004bfe:	9205      	str	r2, [sp, #20]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004c00:	9307      	str	r3, [sp, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c02:	f7ff faa5 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8004c06:	4628      	mov	r0, r5
 8004c08:	4621      	mov	r1, r4
 8004c0a:	f7ff ff71 	bl	8004af0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d161      	bne.n	8004cd6 <SD_FindSCR+0xfa>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8004c12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c14:	6828      	ldr	r0, [r5, #0]
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8004c16:	40a3      	lsls	r3, r4
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c18:	a903      	add	r1, sp, #12
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004c1a:	2437      	movs	r4, #55	; 0x37
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8004c1c:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8004c1e:	9404      	str	r4, [sp, #16]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c20:	f7ff fa96 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8004c24:	4621      	mov	r1, r4
 8004c26:	4628      	mov	r0, r5
 8004c28:	f7ff ff62 	bl	8004af0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d151      	bne.n	8004cd6 <SD_FindSCR+0xfa>
  {
    return errorstate;
  }
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295
 8004c36:	9308      	str	r3, [sp, #32]
  sdio_datainitstructure.DataLength    = 8;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c38:	2330      	movs	r3, #48	; 0x30
 8004c3a:	930a      	str	r3, [sp, #40]	; 0x28
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	930b      	str	r3, [sp, #44]	; 0x2c
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c40:	900c      	str	r0, [sp, #48]	; 0x30
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004c42:	2301      	movs	r3, #1
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004c44:	a908      	add	r1, sp, #32
 8004c46:	6828      	ldr	r0, [r5, #0]
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = 8;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004c48:	930d      	str	r3, [sp, #52]	; 0x34
  if(errorstate != SD_OK)
  {
    return errorstate;
  }
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = 8;
 8004c4a:	9709      	str	r7, [sp, #36]	; 0x24
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004c4c:	f7ff fadc 	bl	8004208 <SDIO_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0;
 8004c50:	9403      	str	r4, [sp, #12]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c52:	a903      	add	r1, sp, #12
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8004c54:	2433      	movs	r4, #51	; 0x33
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c56:	6828      	ldr	r0, [r5, #0]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8004c58:	9404      	str	r4, [sp, #16]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004c5a:	f7ff fa79 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8004c5e:	4628      	mov	r0, r5
 8004c60:	4621      	mov	r1, r4
 8004c62:	f7ff ff45 	bl	8004af0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d135      	bne.n	8004cd6 <SD_FindSCR+0xfa>
 8004c6a:	466c      	mov	r4, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 8004c6c:	6828      	ldr	r0, [r5, #0]
 8004c6e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004c70:	f240 632a 	movw	r3, #1578	; 0x62a
 8004c74:	4013      	ands	r3, r2
 8004c76:	b93b      	cbnz	r3, 8004c88 <SD_FindSCR+0xac>
  {
    if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c7a:	029f      	lsls	r7, r3, #10
 8004c7c:	d5f7      	bpl.n	8004c6e <SD_FindSCR+0x92>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004c7e:	f7ff fa5b 	bl	8004138 <SDIO_ReadFIFO>
 8004c82:	f844 0f04 	str.w	r0, [r4, #4]!
 8004c86:	e7f1      	b.n	8004c6c <SD_FindSCR+0x90>
      index++;
    }
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004c88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c8a:	0719      	lsls	r1, r3, #28
 8004c8c:	d503      	bpl.n	8004c96 <SD_FindSCR+0xba>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004c8e:	2308      	movs	r3, #8
 8004c90:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 8004c92:	2004      	movs	r0, #4
 8004c94:	e01f      	b.n	8004cd6 <SD_FindSCR+0xfa>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004c96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c98:	079a      	lsls	r2, r3, #30
 8004c9a:	d502      	bpl.n	8004ca2 <SD_FindSCR+0xc6>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	6383      	str	r3, [r0, #56]	; 0x38
 8004ca0:	e018      	b.n	8004cd4 <SD_FindSCR+0xf8>
    
    errorstate = SD_DATA_CRC_FAIL;
    
    return errorstate;
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004ca2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ca4:	069b      	lsls	r3, r3, #26
 8004ca6:	d503      	bpl.n	8004cb0 <SD_FindSCR+0xd4>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004ca8:	2320      	movs	r3, #32
 8004caa:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
    
    return errorstate;
 8004cac:	2006      	movs	r0, #6
 8004cae:	e012      	b.n	8004cd6 <SD_FindSCR+0xfa>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 8004cb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004cb2:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8004cb6:	d004      	beq.n	8004cc2 <SD_FindSCR+0xe6>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8004cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cbc:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_START_BIT_ERR;
    
    return errorstate;
 8004cbe:	2007      	movs	r0, #7
 8004cc0:	e009      	b.n	8004cd6 <SD_FindSCR+0xfa>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cc2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cc6:	6382      	str	r2, [r0, #56]	; 0x38
 8004cc8:	9a01      	ldr	r2, [sp, #4]
 8004cca:	ba12      	rev	r2, r2
  
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8004ccc:	6072      	str	r2, [r6, #4]
 8004cce:	9a02      	ldr	r2, [sp, #8]
 8004cd0:	ba12      	rev	r2, r2
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 8004cd2:	6032      	str	r2, [r6, #0]
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
 8004cd4:	4618      	mov	r0, r3
}
 8004cd6:	b00f      	add	sp, #60	; 0x3c
 8004cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cda <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8004cda:	4770      	bx	lr

08004cdc <HAL_SD_ReadBlocks_DMA>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce0:	b08c      	sub	sp, #48	; 0x30
 8004ce2:	468e      	mov	lr, r1
 8004ce4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8004ce6:	6801      	ldr	r1, [r0, #0]
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004ce8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004cea:	4698      	mov	r8, r3
  hsd->SdTransferCplt  = 0;
  hsd->DmaTransferCplt = 0;
  hsd->SdTransferErr   = SD_OK; 
  
  /* Initialize SD Read operation */
  if(NumberOfBlocks > 1)
 8004cec:	2e01      	cmp	r6, #1
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Initialize handle flags */
  hsd->SdTransferCplt  = 0;
 8004cf4:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8004cf6:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 8004cf8:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Initialize SD Read operation */
  if(NumberOfBlocks > 1)
  {
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 8004cfa:	bf88      	it	hi
 8004cfc:	2301      	movhi	r3, #1
  }
  else
  {
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8004cfe:	6543      	str	r3, [r0, #84]	; 0x54
  }
  
  /* Enable transfer interrupts */
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 8004d00:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8004d02:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	63cb      	str	r3, [r1, #60]	; 0x3c
                                SDIO_IT_DATAEND  |\
                                SDIO_IT_RXOVERR  |\
                                SDIO_IT_STBITERR));
  
  /* Enable SDIO DMA transfer */
  __HAL_SD_SDIO_DMA_ENABLE();
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <HAL_SD_ReadBlocks_DMA+0xdc>)
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4617      	mov	r7, r2
  
  /* Enable SDIO DMA transfer */
  __HAL_SD_SDIO_DMA_ENABLE();
  
  /* Configure DMA user callbacks */
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8004d12:	6d80      	ldr	r0, [r0, #88]	; 0x58
                                SDIO_IT_DATAEND  |\
                                SDIO_IT_RXOVERR  |\
                                SDIO_IT_STBITERR));
  
  /* Enable SDIO DMA transfer */
  __HAL_SD_SDIO_DMA_ENABLE();
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
  
  /* Configure DMA user callbacks */
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004d1a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8004d1c:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <HAL_SD_ReadBlocks_DMA+0xe4>)
 8004d1e:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8004d20:	fb05 f306 	mul.w	r3, r5, r6
 8004d24:	3180      	adds	r1, #128	; 0x80
 8004d26:	4672      	mov	r2, lr
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	f001 ff53 	bl	8006bd4 <HAL_DMA_Start_IT>
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8004d2e:	6a23      	ldr	r3, [r4, #32]
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d30:	6820      	ldr	r0, [r4, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8004d32:	2b02      	cmp	r3, #2
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004d34:	f04f 0340 	mov.w	r3, #64	; 0x40
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
    ReadAddr /= 512;
 8004d38:	bf08      	it	eq
 8004d3a:	0a7f      	lsreq	r7, r7, #9
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004d3c:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004d3e:	f04f 0300 	mov.w	r3, #0
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
    ReadAddr /= 512;
 8004d42:	bf04      	itt	eq
 8004d44:	ea47 57c8 	orreq.w	r7, r7, r8, lsl #23
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 8004d48:	f44f 7500 	moveq.w	r5, #512	; 0x200
    ReadAddr /= 512;
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004d4c:	f04f 0810 	mov.w	r8, #16
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004d50:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d52:	a901      	add	r1, sp, #4
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
    BlockSize = 512;
    ReadAddr /= 512;
  }
  
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8004d58:	9501      	str	r5, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004d5a:	f8cd 8008 	str.w	r8, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004d5e:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d60:	f7ff f9f6 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8004d64:	4620      	mov	r0, r4
 8004d66:	4641      	mov	r1, r8
 8004d68:	f7ff fec2 	bl	8004af0 <SD_CmdResp1Error>
  
  if (errorstate != SD_OK)
 8004d6c:	bb08      	cbnz	r0, 8004db2 <HAL_SD_ReadBlocks_DMA+0xd6>
  {
    return errorstate;
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8004d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d72:	9306      	str	r3, [sp, #24]
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d74:	2390      	movs	r3, #144	; 0x90
 8004d76:	9308      	str	r3, [sp, #32]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d7c:	900a      	str	r0, [sp, #40]	; 0x28
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004d7e:	2301      	movs	r3, #1
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004d80:	a906      	add	r1, sp, #24
    return errorstate;
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8004d82:	4375      	muls	r5, r6
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004d84:	6820      	ldr	r0, [r4, #0]
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004d86:	930b      	str	r3, [sp, #44]	; 0x2c
    return errorstate;
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8004d88:	9507      	str	r5, [sp, #28]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004d8a:	f7ff fa3d 	bl	8004208 <SDIO_DataConfig>
  
  /* Check number of blocks command */
  if(NumberOfBlocks > 1)
 8004d8e:	2e01      	cmp	r6, #1
  {
    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8004d90:	bf8c      	ite	hi
 8004d92:	2312      	movhi	r3, #18
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8004d94:	2311      	movls	r3, #17
  }
  
  sdio_cmdinitstructure.Argument = (uint32_t)ReadAddr;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d96:	a901      	add	r1, sp, #4
 8004d98:	6820      	ldr	r0, [r4, #0]
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8004d9a:	9302      	str	r3, [sp, #8]
  }
  
  sdio_cmdinitstructure.Argument = (uint32_t)ReadAddr;
 8004d9c:	9701      	str	r7, [sp, #4]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004d9e:	f7ff f9d7 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  if(NumberOfBlocks > 1)
 8004da2:	2e01      	cmp	r6, #1
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8004da4:	4620      	mov	r0, r4
 8004da6:	bf8c      	ite	hi
 8004da8:	2112      	movhi	r1, #18
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 8004daa:	2111      	movls	r1, #17
 8004dac:	f7ff fea0 	bl	8004af0 <SD_CmdResp1Error>
  }
  
  /* Update the SD transfer error in SD handle */
  hsd->SdTransferErr = errorstate;
 8004db0:	64e0      	str	r0, [r4, #76]	; 0x4c
  
  return errorstate;
}
 8004db2:	b00c      	add	sp, #48	; 0x30
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db8:	4225858c 	.word	0x4225858c
 8004dbc:	08004f97 	.word	0x08004f97
 8004dc0:	08004fb3 	.word	0x08004fb3

08004dc4 <HAL_SD_WriteBlocks_DMA>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc8:	b08c      	sub	sp, #48	; 0x30
 8004dca:	4617      	mov	r7, r2
 8004dcc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8004dce:	6802      	ldr	r2, [r0, #0]
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004dd0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  hsd->SdTransferCplt  = 0;
  hsd->DmaTransferCplt = 0;
  hsd->SdTransferErr   = SD_OK;
  
  /* Initialize SD Write operation */
  if(NumberOfBlocks > 1)
 8004dd4:	2e01      	cmp	r6, #1
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004dd6:	461c      	mov	r4, r3
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize handle flags */
  hsd->SdTransferCplt  = 0;
 8004dde:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8004de0:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8004de2:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Initialize SD Write operation */
  if(NumberOfBlocks > 1)
  {
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8004de4:	bf8c      	ite	hi
 8004de6:	2303      	movhi	r3, #3
  }
  else
  {
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8004de8:	2302      	movls	r3, #2
 8004dea:	6543      	str	r3, [r0, #84]	; 0x54
  }  
  
  /* Enable transfer interrupts */
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 8004dec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004dee:	f443 7346 	orr.w	r3, r3, #792	; 0x318
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 8004df2:	4605      	mov	r5, r0
  {
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
  }  
  
  /* Enable transfer interrupts */
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 8004df4:	f043 0302 	orr.w	r3, r3, #2
                                SDIO_IT_DATAEND  |\
                                SDIO_IT_TXUNDERR |\
                                SDIO_IT_STBITERR)); 
  
  /* Configure DMA user callbacks */
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8004df8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  {
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
  }  
  
  /* Enable transfer interrupts */
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 8004dfa:	63d3      	str	r3, [r2, #60]	; 0x3c
                                SDIO_IT_DATAEND  |\
                                SDIO_IT_TXUNDERR |\
                                SDIO_IT_STBITERR)); 
  
  /* Configure DMA user callbacks */
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8004dfc:	4b3b      	ldr	r3, [pc, #236]	; (8004eec <HAL_SD_WriteBlocks_DMA+0x128>)
 8004dfe:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8004e00:	4b3b      	ldr	r3, [pc, #236]	; (8004ef0 <HAL_SD_WriteBlocks_DMA+0x12c>)
 8004e02:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8004e04:	fb08 f306 	mul.w	r3, r8, r6
 8004e08:	3280      	adds	r2, #128	; 0x80
 8004e0a:	089b      	lsrs	r3, r3, #2
 8004e0c:	f001 fee2 	bl	8006bd4 <HAL_DMA_Start_IT>

  /* Enable SDIO DMA transfer */
  __HAL_SD_SDIO_DMA_ENABLE();
 8004e10:	4b38      	ldr	r3, [pc, #224]	; (8004ef4 <HAL_SD_WriteBlocks_DMA+0x130>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8004e16:	6a2b      	ldr	r3, [r5, #32]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d109      	bne.n	8004e30 <HAL_SD_WriteBlocks_DMA+0x6c>
  {
    BlockSize = 512;
	printf("Blocksize: %d\n", BlockSize);
 8004e1c:	4836      	ldr	r0, [pc, #216]	; (8004ef8 <HAL_SD_WriteBlocks_DMA+0x134>)
 8004e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e22:	f014 fc35 	bl	8019690 <printf>
    WriteAddr /= 512;
 8004e26:	0a7f      	lsrs	r7, r7, #9
 8004e28:	ea47 57c4 	orr.w	r7, r7, r4, lsl #23
  /* Enable SDIO DMA transfer */
  __HAL_SD_SDIO_DMA_ENABLE();
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 8004e2c:	f44f 7800 	mov.w	r8, #512	; 0x200
  }

  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004e34:	2300      	movs	r3, #0
    WriteAddr /= 512;
  }

  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004e36:	2410      	movs	r4, #16
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8004e38:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e3a:	a901      	add	r1, sp, #4
  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e40:	6828      	ldr	r0, [r5, #0]
    WriteAddr /= 512;
  }

  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8004e42:	9402      	str	r4, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8004e44:	9305      	str	r3, [sp, #20]
	printf("Blocksize: %d\n", BlockSize);
    WriteAddr /= 512;
  }

  /* Set Block Size for Card */ 
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8004e46:	f8cd 8004 	str.w	r8, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e4a:	f7ff f981 	bl	8004150 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4628      	mov	r0, r5
 8004e52:	f7ff fe4d 	bl	8004af0 <SD_CmdResp1Error>
 8004e56:	4604      	mov	r4, r0
  
  printf("errorstate: %d\n", errorstate);
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4828      	ldr	r0, [pc, #160]	; (8004efc <HAL_SD_WriteBlocks_DMA+0x138>)
 8004e5c:	f014 fc18 	bl	8019690 <printf>

  if (errorstate != SD_OK)
 8004e60:	2c00      	cmp	r4, #0
 8004e62:	d13f      	bne.n	8004ee4 <HAL_SD_WriteBlocks_DMA+0x120>
  {
    return errorstate;
  }
  
  printf("errorstate: %d\n", errorstate);
 8004e64:	4825      	ldr	r0, [pc, #148]	; (8004efc <HAL_SD_WriteBlocks_DMA+0x138>)
 8004e66:	4621      	mov	r1, r4
 8004e68:	f014 fc12 	bl	8019690 <printf>
  
  /* Check number of blocks command */
  if(NumberOfBlocks <= 1)
 8004e6c:	2e01      	cmp	r6, #1
 8004e6e:	d806      	bhi.n	8004e7e <HAL_SD_WriteBlocks_DMA+0xba>
  {
	printf("Send CMD24\n");
 8004e70:	4823      	ldr	r0, [pc, #140]	; (8004f00 <HAL_SD_WriteBlocks_DMA+0x13c>)
 8004e72:	f014 fc4f 	bl	8019714 <puts>
    /* Send CMD24 WRITE_SINGLE_BLOCK */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8004e76:	2318      	movs	r3, #24
 8004e78:	9302      	str	r3, [sp, #8]
	printf("Send CMD24\n");
 8004e7a:	4821      	ldr	r0, [pc, #132]	; (8004f00 <HAL_SD_WriteBlocks_DMA+0x13c>)
 8004e7c:	e005      	b.n	8004e8a <HAL_SD_WriteBlocks_DMA+0xc6>
  }
  else
  {
	printf("Send CMD25\n");
 8004e7e:	4821      	ldr	r0, [pc, #132]	; (8004f04 <HAL_SD_WriteBlocks_DMA+0x140>)
 8004e80:	f014 fc48 	bl	8019714 <puts>
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8004e84:	2319      	movs	r3, #25
	printf("Send CMD25\n");
 8004e86:	481f      	ldr	r0, [pc, #124]	; (8004f04 <HAL_SD_WriteBlocks_DMA+0x140>)
  }
  else
  {
	printf("Send CMD25\n");
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8004e88:	9302      	str	r3, [sp, #8]
	printf("Send CMD25\n");
 8004e8a:	f014 fc43 	bl	8019714 <puts>
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e8e:	6828      	ldr	r0, [r5, #0]
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
	printf("Send CMD25\n");
  }
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8004e90:	9701      	str	r7, [sp, #4]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8004e92:	a901      	add	r1, sp, #4
 8004e94:	f7ff f95c 	bl	8004150 <SDIO_SendCommand>

  /* Check for error conditions */
  if(NumberOfBlocks > 1)
 8004e98:	2e01      	cmp	r6, #1
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8004e9a:	4628      	mov	r0, r5
  
  sdio_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);

  /* Check for error conditions */
  if(NumberOfBlocks > 1)
 8004e9c:	d905      	bls.n	8004eaa <HAL_SD_WriteBlocks_DMA+0xe6>
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8004e9e:	2119      	movs	r1, #25
 8004ea0:	f7ff fe26 	bl	8004af0 <SD_CmdResp1Error>
 8004ea4:	4604      	mov	r4, r0
	printf("errorstate wr multi: %d\n", errorstate);
 8004ea6:	4818      	ldr	r0, [pc, #96]	; (8004f08 <HAL_SD_WriteBlocks_DMA+0x144>)
 8004ea8:	e004      	b.n	8004eb4 <HAL_SD_WriteBlocks_DMA+0xf0>
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8004eaa:	2118      	movs	r1, #24
 8004eac:	f7ff fe20 	bl	8004af0 <SD_CmdResp1Error>
 8004eb0:	4604      	mov	r4, r0
	printf("errorstate wr single: %d\n", errorstate);
 8004eb2:	4816      	ldr	r0, [pc, #88]	; (8004f0c <HAL_SD_WriteBlocks_DMA+0x148>)
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	f014 fbeb 	bl	8019690 <printf>
  }
  
  if (errorstate != SD_OK)
 8004eba:	b99c      	cbnz	r4, 8004ee4 <HAL_SD_WriteBlocks_DMA+0x120>
  {
    return errorstate;
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec0:	9306      	str	r3, [sp, #24]
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004ec2:	2390      	movs	r3, #144	; 0x90
 8004ec4:	9308      	str	r3, [sp, #32]
    return errorstate;
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8004ec6:	fb06 f608 	mul.w	r6, r6, r8
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004eca:	2301      	movs	r3, #1
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004ecc:	6828      	ldr	r0, [r5, #0]
    return errorstate;
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8004ece:	9607      	str	r6, [sp, #28]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004ed0:	a906      	add	r1, sp, #24
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004ed2:	9409      	str	r4, [sp, #36]	; 0x24
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ed4:	940a      	str	r4, [sp, #40]	; 0x28
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 8004ed6:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 8004ed8:	f7ff f996 	bl	8004208 <SDIO_DataConfig>
  
  hsd->SdTransferErr = errorstate;
 8004edc:	64ec      	str	r4, [r5, #76]	; 0x4c
  
  printf("SDIO Data on the bus\n");
 8004ede:	480c      	ldr	r0, [pc, #48]	; (8004f10 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8004ee0:	f014 fc18 	bl	8019714 <puts>
 8004ee4:	4620      	mov	r0, r4
  
  return errorstate;
}
 8004ee6:	b00c      	add	sp, #48	; 0x30
 8004ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eec:	08004fc1 	.word	0x08004fc1
 8004ef0:	08004feb 	.word	0x08004feb
 8004ef4:	4225858c 	.word	0x4225858c
 8004ef8:	08029175 	.word	0x08029175
 8004efc:	08029184 	.word	0x08029184
 8004f00:	08029194 	.word	0x08029194
 8004f04:	0802919f 	.word	0x0802919f
 8004f08:	080291aa 	.word	0x080291aa
 8004f0c:	080291c3 	.word	0x080291c3
 8004f10:	080291dd 	.word	0x080291dd

08004f14 <HAL_SD_XferCpltCallback>:
  * @brief  SD end of transfer callback.
  * @param  hsd: SD handle 
  * @retval None
  */
__weak void HAL_SD_XferCpltCallback(SD_HandleTypeDef *hsd)
{
 8004f14:	4770      	bx	lr

08004f16 <HAL_SD_XferErrorCallback>:
  * @brief  SD Transfer Error callback.
  * @param  hsd: SD handle
  * @retval None
  */
__weak void HAL_SD_XferErrorCallback(SD_HandleTypeDef *hsd)
{
 8004f16:	4770      	bx	lr

08004f18 <HAL_SD_IRQHandler>:
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{  
  /* Check for SDIO interrupt flags */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DATAEND))
 8004f18:	6803      	ldr	r3, [r0, #0]
 8004f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f1c:	05d1      	lsls	r1, r2, #23
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{  
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	4604      	mov	r4, r0
  /* Check for SDIO interrupt flags */
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DATAEND))
 8004f22:	d509      	bpl.n	8004f38 <HAL_SD_IRQHandler+0x20>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_IT_DATAEND);  
 8004f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
      
    /* SD transfer is complete */
    hsd->SdTransferCplt = 1;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	6483      	str	r3, [r0, #72]	; 0x48

    /* No transfer error */ 
    hsd->SdTransferErr  = SD_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	64c3      	str	r3, [r0, #76]	; 0x4c

    HAL_SD_XferCpltCallback(hsd);  
 8004f32:	f7ff ffef 	bl	8004f14 <HAL_SD_XferCpltCallback>
 8004f36:	e025      	b.n	8004f84 <HAL_SD_IRQHandler+0x6c>
  }  
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DCRCFAIL))
 8004f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3a:	0792      	lsls	r2, r2, #30
 8004f3c:	d503      	bpl.n	8004f46 <HAL_SD_IRQHandler+0x2e>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004f3e:	2202      	movs	r2, #2
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8004f42:	64c2      	str	r2, [r0, #76]	; 0x4c
 8004f44:	e01c      	b.n	8004f80 <HAL_SD_IRQHandler+0x68>
    
    HAL_SD_XferErrorCallback(hsd);
    
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DTIMEOUT))
 8004f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f48:	0711      	lsls	r1, r2, #28
 8004f4a:	d503      	bpl.n	8004f54 <HAL_SD_IRQHandler+0x3c>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8004f50:	2304      	movs	r3, #4
 8004f52:	e014      	b.n	8004f7e <HAL_SD_IRQHandler+0x66>
    
    HAL_SD_XferErrorCallback(hsd);
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_RXOVERR))
 8004f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f56:	0692      	lsls	r2, r2, #26
 8004f58:	d503      	bpl.n	8004f62 <HAL_SD_IRQHandler+0x4a>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8004f5e:	2306      	movs	r3, #6
 8004f60:	e00d      	b.n	8004f7e <HAL_SD_IRQHandler+0x66>
    
    HAL_SD_XferErrorCallback(hsd);
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_TXUNDERR))
 8004f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f64:	06d1      	lsls	r1, r2, #27
 8004f66:	d503      	bpl.n	8004f70 <HAL_SD_IRQHandler+0x58>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 8004f68:	2210      	movs	r2, #16
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8004f6c:	2305      	movs	r3, #5
 8004f6e:	e006      	b.n	8004f7e <HAL_SD_IRQHandler+0x66>
    
    HAL_SD_XferErrorCallback(hsd);
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_STBITERR))
 8004f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f72:	0592      	lsls	r2, r2, #22
 8004f74:	d506      	bpl.n	8004f84 <HAL_SD_IRQHandler+0x6c>
  {
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 8004f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_START_BIT_ERR;
 8004f7c:	2307      	movs	r3, #7
 8004f7e:	64e3      	str	r3, [r4, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 8004f80:	f7ff ffc9 	bl	8004f16 <HAL_SD_XferErrorCallback>
  {
    /* No error flag set */
  }

  /* Disable all SDIO peripheral interrupt sources */
  __HAL_SD_SDIO_DISABLE_IT(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND  |\
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004f88:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004f8c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004f90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004f92:	bd10      	pop	{r4, pc}

08004f94 <HAL_SD_DMA_RxCpltCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_RxCpltCallback(DMA_HandleTypeDef *hdma)
{
 8004f94:	4770      	bx	lr

08004f96 <SD_DMA_RxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_RxCplt(DMA_HandleTypeDef *hdma)
{
 8004f96:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004f98:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  /* DMA transfer is complete */
  hsd->DmaTransferCplt = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	6523      	str	r3, [r4, #80]	; 0x50
  
  /* Wait until SD transfer is complete */
  while(hsd->SdTransferCplt == 0)
 8004f9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0fc      	beq.n	8004f9e <SD_DMA_RxCplt+0x8>
  {
  }
  
  /* Disable the DMA channel */
  HAL_DMA_Abort(hdma);
 8004fa4:	f001 fe5e 	bl	8006c64 <HAL_DMA_Abort>

  /* Transfer complete user callback */
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8004fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004faa:	f7ff fff3 	bl	8004f94 <HAL_SD_DMA_RxCpltCallback>
 8004fae:	bd10      	pop	{r4, pc}

08004fb0 <HAL_SD_DMA_RxErrorCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_RxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8004fb0:	4770      	bx	lr

08004fb2 <SD_DMA_RxError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_RxError(DMA_HandleTypeDef *hdma)
{
 8004fb2:	b508      	push	{r3, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  /* Transfer complete user callback */
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8004fb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004fb6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004fb8:	f7ff fffa 	bl	8004fb0 <HAL_SD_DMA_RxErrorCallback>
 8004fbc:	bd08      	pop	{r3, pc}

08004fbe <HAL_SD_DMA_TxCpltCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 8004fbe:	4770      	bx	lr

08004fc0 <SD_DMA_TxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_TxCplt(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004fc2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  /* DMA transfer is complete */
  hsd->DmaTransferCplt = 1;
 8004fc4:	2301      	movs	r3, #1
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_TxCplt(DMA_HandleTypeDef *hdma)
{
 8004fc6:	4605      	mov	r5, r0
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  /* DMA transfer is complete */
  hsd->DmaTransferCplt = 1;
 8004fc8:	6523      	str	r3, [r4, #80]	; 0x50
  
  printf("DMA transfer complete\n");
 8004fca:	4806      	ldr	r0, [pc, #24]	; (8004fe4 <SD_DMA_TxCplt+0x24>)
 8004fcc:	f014 fba2 	bl	8019714 <puts>
  
  /* Wait until SD transfer is complete */
  while(hsd->SdTransferCplt == 0)
 8004fd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0fc      	beq.n	8004fd0 <SD_DMA_TxCplt+0x10>
  {
  }
 
  /* Disable the DMA channel */
  HAL_DMA_Abort(hdma);
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f001 fe44 	bl	8006c64 <HAL_DMA_Abort>

  /* Transfer complete user callback */
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8004fdc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004fde:	f7ff ffee 	bl	8004fbe <HAL_SD_DMA_TxCpltCallback>
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	080291f2 	.word	0x080291f2

08004fe8 <HAL_SD_DMA_TxErrorCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8004fe8:	4770      	bx	lr

08004fea <SD_DMA_TxError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_TxError(DMA_HandleTypeDef *hdma)
{
 8004fea:	b508      	push	{r3, lr}
  SD_HandleTypeDef *hsd = ( SD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Transfer complete user callback */
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 8004fec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004fee:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004ff0:	f7ff fffa 	bl	8004fe8 <HAL_SD_DMA_TxErrorCallback>
 8004ff4:	bd08      	pop	{r3, pc}

08004ff6 <HAL_SD_Get_CardInfo>:
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t tmp = 0;
  
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8004ff6:	6a02      	ldr	r2, [r0, #32]
 8004ff8:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8004ffc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004ffe:	f8a1 2054 	strh.w	r2, [r1, #84]	; 0x54
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8005002:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 8005006:	4603      	mov	r3, r0
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8005008:	0990      	lsrs	r0, r2, #6
 800500a:	7008      	strb	r0, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800500c:	f3c2 0083 	ubfx	r0, r2, #2, #4
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8005010:	f002 0203 	and.w	r2, r2, #3
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8005014:	7048      	strb	r0, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8005016:	708a      	strb	r2, [r1, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8005018:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800501c:	70ca      	strb	r2, [r1, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800501e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005022:	710a      	strb	r2, [r1, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8005024:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005028:	714a      	strb	r2, [r1, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	0e10      	lsrs	r0, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 800502e:	0100      	lsls	r0, r0, #4
 8005030:	80c8      	strh	r0, [r1, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005032:	88c8      	ldrh	r0, [r1, #6]
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
 8005034:	f3c2 4207 	ubfx	r2, r2, #16, #8
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005038:	b280      	uxth	r0, r0
 800503a:	ea40 1012 	orr.w	r0, r0, r2, lsr #4
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800503e:	f002 020f 	and.w	r2, r2, #15
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005042:	80c8      	strh	r0, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005044:	720a      	strb	r2, [r1, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8005046:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800504a:	09d0      	lsrs	r0, r2, #7
 800504c:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800504e:	f3c2 1080 	ubfx	r0, r2, #6, #1
 8005052:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005054:	f3c2 1040 	ubfx	r0, r2, #5, #1
 8005058:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800505a:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800505e:	7308      	strb	r0, [r1, #12]
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8005060:	2000      	movs	r0, #0
 8005062:	7348      	strb	r0, [r1, #13]
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 8005064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
  
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8005068:	6a1c      	ldr	r4, [r3, #32]
 800506a:	2c01      	cmp	r4, #1
 800506c:	d83d      	bhi.n	80050ea <HAL_SD_Get_CardInfo+0xf4>
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800506e:	f002 0203 	and.w	r2, r2, #3
 8005072:	0292      	lsls	r2, r2, #10
 8005074:	610a      	str	r2, [r1, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8005076:	690a      	ldr	r2, [r1, #16]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
 8005078:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 800507c:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8005080:	610a      	str	r2, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005082:	690c      	ldr	r4, [r1, #16]
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005084:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005088:	ea44 1492 	orr.w	r4, r4, r2, lsr #6
 800508c:	610c      	str	r4, [r1, #16]
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800508e:	f3c2 04c2 	ubfx	r4, r2, #3, #3
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8005092:	f002 0207 	and.w	r2, r2, #7
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8005096:	750c      	strb	r4, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8005098:	754a      	strb	r2, [r1, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 800509a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800509e:	0954      	lsrs	r4, r2, #5
 80050a0:	758c      	strb	r4, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80050a2:	f3c2 0482 	ubfx	r4, r2, #2, #3
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80050a6:	f002 0203 	and.w	r2, r2, #3
 80050aa:	0052      	lsls	r2, r2, #1
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80050ac:	75cc      	strb	r4, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80050ae:	760a      	strb	r2, [r1, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80050b0:	7e0c      	ldrb	r4, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 80050b2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80050b6:	ea44 14d2 	orr.w	r4, r4, r2, lsr #7
 80050ba:	760c      	strb	r4, [r1, #24]
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80050bc:	690e      	ldr	r6, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80050be:	7e0d      	ldrb	r5, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80050c0:	7a0f      	ldrb	r7, [r1, #8]
 80050c2:	2401      	movs	r4, #1
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80050c4:	3502      	adds	r5, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80050c6:	fa04 f707 	lsl.w	r7, r4, r7
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80050ca:	40ac      	lsls	r4, r5
 80050cc:	ea4f 79e4 	mov.w	r9, r4, asr #31
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80050d0:	3601      	adds	r6, #1
 80050d2:	fba4 4507 	umull	r4, r5, r4, r7
 80050d6:	fb07 5509 	mla	r5, r7, r9, r5
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80050da:	fba4 8906 	umull	r8, r9, r4, r6
 80050de:	fb06 9905 	mla	r9, r6, r5, r9
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80050e2:	650f      	str	r7, [r1, #80]	; 0x50
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80050e4:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
 80050e8:	e023      	b.n	8005132 <HAL_SD_Get_CardInfo+0x13c>
  }
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 80050ea:	2c02      	cmp	r4, #2
 80050ec:	d120      	bne.n	8005130 <HAL_SD_Get_CardInfo+0x13a>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80050f4:	0412      	lsls	r2, r2, #16
 80050f6:	610a      	str	r2, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80050f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 80050fa:	690c      	ldr	r4, [r1, #16]
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80050fc:	0e15      	lsrs	r5, r2, #24
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 80050fe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8005102:	610c      	str	r4, [r1, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8005104:	690c      	ldr	r4, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 8005106:	f3c2 4507 	ubfx	r5, r2, #16, #8
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 800510a:	432c      	orrs	r4, r5
 800510c:	610c      	str	r4, [r1, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
    
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1)) * 512 * 1024);
 800510e:	690c      	ldr	r4, [r1, #16]
 8005110:	2500      	movs	r5, #0
 8005112:	3401      	adds	r4, #1
 8005114:	f145 0500 	adc.w	r5, r5, #0
 8005118:	04ed      	lsls	r5, r5, #19
 800511a:	ea45 3554 	orr.w	r5, r5, r4, lsr #13
 800511e:	04e4      	lsls	r4, r4, #19
 8005120:	648c      	str	r4, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8005122:	f44f 7400 	mov.w	r4, #512	; 0x200
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 8005126:	f3c2 2207 	ubfx	r2, r2, #8, #8
    
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1)) * 512 * 1024);
 800512a:	64cd      	str	r5, [r1, #76]	; 0x4c
    pCardInfo->CardBlockSize = 512;    
 800512c:	650c      	str	r4, [r1, #80]	; 0x50
 800512e:	e000      	b.n	8005132 <HAL_SD_Get_CardInfo+0x13c>
  }
  else
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
 8005130:	2029      	movs	r0, #41	; 0x29
  }
    
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8005132:	f3c2 1480 	ubfx	r4, r2, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8005136:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800513a:	0052      	lsls	r2, r2, #1
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
  }
    
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800513c:	764c      	strb	r4, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 800513e:	768a      	strb	r2, [r1, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8005140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8005142:	7e8d      	ldrb	r5, [r1, #26]
 8005144:	f3c2 14c0 	ubfx	r4, r2, #7, #1
 8005148:	432c      	orrs	r4, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800514a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 800514e:	768c      	strb	r4, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8005150:	76ca      	strb	r2, [r1, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8005152:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005156:	09d4      	lsrs	r4, r2, #7
 8005158:	770c      	strb	r4, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 800515a:	f3c2 1441 	ubfx	r4, r2, #5, #2
 800515e:	774c      	strb	r4, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005160:	f3c2 0482 	ubfx	r4, r2, #2, #3
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005164:	f002 0203 	and.w	r2, r2, #3
 8005168:	0092      	lsls	r2, r2, #2
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800516a:	778c      	strb	r4, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 800516c:	77ca      	strb	r2, [r1, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800516e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005172:	7fcc      	ldrb	r4, [r1, #31]
 8005174:	ea44 1492 	orr.w	r4, r4, r2, lsr #6
 8005178:	77cc      	strb	r4, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800517a:	f3c2 1440 	ubfx	r4, r2, #5, #1
 800517e:	f881 4020 	strb.w	r4, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8005182:	f002 0201 	and.w	r2, r2, #1
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
  pCardInfo->SD_csd.Reserved3           = 0;
 8005186:	2400      	movs	r4, #0
 8005188:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 800518c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8005190:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8005194:	09d4      	lsrs	r4, r2, #7
 8005196:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 800519a:	f3c2 1480 	ubfx	r4, r2, #6, #1
 800519e:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 80051a2:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80051a6:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 80051aa:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80051ae:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 80051b2:	f3c2 0481 	ubfx	r4, r2, #2, #2
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80051b6:	f002 0203 	and.w	r2, r2, #3
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 80051ba:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 80051be:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.Reserved4 = 1;
 80051c4:	2401      	movs	r4, #1
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 80051c6:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80051ca:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 80051ce:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  
  /* Byte 0 */
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ManufacturerID = tmp;
 80051d2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80051d6:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
 80051da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051dc:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 80051e0:	022d      	lsls	r5, r5, #8
 80051e2:	85cd      	strh	r5, [r1, #46]	; 0x2e
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80051e4:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
 80051e6:	b2ae      	uxth	r6, r5
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
 80051e8:	f3c2 2507 	ubfx	r5, r2, #8, #8
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80051ec:	4335      	orrs	r5, r6
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 80051ee:	0612      	lsls	r2, r2, #24
  tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80051f0:	85cd      	strh	r5, [r1, #46]	; 0x2e
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 80051f2:	630a      	str	r2, [r1, #48]	; 0x30
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80051f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80051f6:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80051f8:	0e16      	lsrs	r6, r2, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80051fa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80051fe:	630d      	str	r5, [r1, #48]	; 0x30
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8005200:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
 8005202:	f3c2 4607 	ubfx	r6, r2, #16, #8
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8005206:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800520a:	630d      	str	r5, [r1, #48]	; 0x30
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdName1 |= tmp;
 800520c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
 800520e:	f3c2 2607 	ubfx	r6, r2, #8, #8
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8005212:	4335      	orrs	r5, r6
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
  pCardInfo->SD_cid.ProdName2 = tmp;
 8005214:	b2d2      	uxtb	r2, r2
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8005216:	630d      	str	r5, [r1, #48]	; 0x30
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
  pCardInfo->SD_cid.ProdName2 = tmp;
 8005218:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
  
  /* Byte 8 */
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdRev = tmp;
 800521c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8005220:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8005224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005226:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 800522a:	062d      	lsls	r5, r5, #24
 800522c:	638d      	str	r5, [r1, #56]	; 0x38
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800522e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.ProdSN = tmp << 24;
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
 8005230:	f3c2 2607 	ubfx	r6, r2, #8, #8
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8005234:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8005238:	638d      	str	r5, [r1, #56]	; 0x38
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800523a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
 800523c:	b2d2      	uxtb	r2, r2
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800523e:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 8005242:	638a      	str	r2, [r1, #56]	; 0x38
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdSN |= tmp;
 8005244:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8005246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8005248:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800524c:	638d      	str	r5, [r1, #56]	; 0x38
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 800524e:	f891 503c 	ldrb.w	r5, [r1, #60]	; 0x3c
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdSN |= tmp;
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
 8005252:	f3c2 4207 	ubfx	r2, r2, #16, #8
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8005256:	ea45 1512 	orr.w	r5, r5, r2, lsr #4
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800525a:	f002 020f 	and.w	r2, r2, #15
 800525e:	0212      	lsls	r2, r2, #8
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
  pCardInfo->SD_cid.ProdSN |= tmp;
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8005260:	f881 503c 	strb.w	r5, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8005264:	87ca      	strh	r2, [r1, #62]	; 0x3e
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8005268:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800526a:	b295      	uxth	r5, r2
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
 800526c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8005270:	432a      	orrs	r2, r5
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3] & 0x000000FF);
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8005272:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8005276:	87ca      	strh	r2, [r1, #62]	; 0x3e
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3] & 0x000000FF);
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8005278:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 800527c:	f881 4041 	strb.w	r4, [r1, #65]	; 0x41
  
  return errorstate;
}
 8005280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005284 <HAL_SD_Init>:
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	b090      	sub	sp, #64	; 0x40
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800528a:	2500      	movs	r5, #0
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 800528c:	4604      	mov	r4, r0
 800528e:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005290:	f88d 5012 	strb.w	r5, [sp, #18]
  SD_InitTypeDef tmpinit;
  
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
 8005294:	f7ff fd21 	bl	8004cda <HAL_SD_MspInit>
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005298:	2376      	movs	r3, #118	; 0x76
 800529a:	930f      	str	r3, [sp, #60]	; 0x3c
  
  /* Default SDIO peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
 800529c:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800529e:	950e      	str	r5, [sp, #56]	; 0x38
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
 80052a0:	ab10      	add	r3, sp, #64	; 0x40
 80052a2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80052a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
  
  /* Default SDIO peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80052aa:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80052ac:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80052ae:	950c      	str	r5, [sp, #48]	; 0x30
  uint32_t response = 0, count = 0, validvoltage = 0;
  uint32_t sdtype = SD_STD_CAPACITY;
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
 80052b0:	4fa8      	ldr	r7, [pc, #672]	; (8005554 <HAL_SD_Init+0x2d0>)
  tmpinit.BusWide             = SDIO_BUS_WIDE_1B;
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	ab0a      	add	r3, sp, #40	; 0x28
 80052b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052b8:	f7fe fee4 	bl	8004084 <SDIO_Init>
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80052bc:	f88d 5013 	strb.w	r5, [sp, #19]
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80052c0:	6820      	ldr	r0, [r4, #0]
  uint32_t response = 0, count = 0, validvoltage = 0;
  uint32_t sdtype = SD_STD_CAPACITY;
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDIO Clock */
  __HAL_SD_SDIO_DISABLE(); 
 80052c2:	603d      	str	r5, [r7, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80052c4:	f7fe ff3b 	bl	800413e <SDIO_PowerState_ON>
  
  /* 1ms: required power up waiting time before starting the SD initialization 
     sequence */
  HAL_Delay(1);
 80052c8:	2001      	movs	r0, #1
 80052ca:	f003 fbe3 	bl	8008a94 <HAL_Delay>
  
  /* Enable SDIO Clock */
  __HAL_SD_SDIO_ENABLE();
 80052ce:	2301      	movs	r3, #1
 80052d0:	603b      	str	r3, [r7, #0]
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80052d2:	a905      	add	r1, sp, #20
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80052d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80052d8:	6820      	ldr	r0, [r4, #0]
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80052da:	9309      	str	r3, [sp, #36]	; 0x24
  /* Enable SDIO Clock */
  __HAL_SD_SDIO_ENABLE();
  
  /* CMD0: GO_IDLE_STATE -----------------------------------------------------*/
  /* No CMD response required */
  sdio_cmdinitstructure.Argument         = 0;
 80052dc:	9505      	str	r5, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 80052de:	9506      	str	r5, [sp, #24]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
 80052e0:	9507      	str	r5, [sp, #28]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80052e2:	9508      	str	r5, [sp, #32]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80052e4:	f7fe ff34 	bl	8004150 <SDIO_SendCommand>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t timeout, tmp;
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80052ec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80052f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    
  while((timeout > 0) && (!tmp))
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 819b 	bne.w	8005630 <HAL_SD_Init+0x3ac>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 80052fa:	6b53      	ldr	r3, [r2, #52]	; 0x34
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    
  while((timeout > 0) && (!tmp))
 80052fc:	3901      	subs	r1, #1
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 80052fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  
  timeout = SDIO_CMD0TIMEOUT;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
    
  while((timeout > 0) && (!tmp))
 8005302:	d1f7      	bne.n	80052f4 <HAL_SD_Init+0x70>
  }
  
  if(timeout == 0)
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    return errorstate;
 8005304:	2303      	movs	r3, #3
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
  
  /* Check for error conditions */
  errorstate = SD_CmdError(hsd);
 8005306:	f88d 3013 	strb.w	r3, [sp, #19]
  
  printf("errorstate CMD0: %d\n", errorstate);
 800530a:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800530e:	4892      	ldr	r0, [pc, #584]	; (8005558 <HAL_SD_Init+0x2d4>)
 8005310:	f014 f9be 	bl	8019690 <printf>
  
  if(errorstate != SD_OK)
 8005314:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005318:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 80b2 	bne.w	8005486 <HAL_SD_Init+0x202>
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8005322:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005326:	9305      	str	r3, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 8005328:	2308      	movs	r3, #8
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800532a:	a905      	add	r1, sp, #20
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 800532c:	9306      	str	r3, [sp, #24]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800532e:	6820      	ldr	r0, [r4, #0]
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	9307      	str	r3, [sp, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005334:	f7fe ff0c 	bl	8004150 <SDIO_SendCommand>
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005340:	bf14      	ite	ne
 8005342:	2101      	movne	r1, #1
 8005344:	2100      	moveq	r1, #0
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
  uint32_t timeout = SDIO_CMD0TIMEOUT, tmp;
 8005346:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT); 
  
  while((!tmp) && (timeout > 0))
 800534a:	b941      	cbnz	r1, 800535e <HAL_SD_Init+0xda>
 800534c:	b13a      	cbz	r2, 800535e <HAL_SD_Init+0xda>
  {
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 800534e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005350:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005354:	bf14      	ite	ne
 8005356:	2101      	movne	r1, #1
 8005358:	2100      	moveq	r1, #0
    timeout--;
 800535a:	3a01      	subs	r2, #1
 800535c:	e7f5      	b.n	800534a <HAL_SD_Init+0xc6>
  }
  
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT); 
 800535e:	6b59      	ldr	r1, [r3, #52]	; 0x34
  
  if((timeout == 0) || tmp)
 8005360:	b10a      	cbz	r2, 8005366 <HAL_SD_Init+0xe2>
 8005362:	0748      	lsls	r0, r1, #29
 8005364:	d503      	bpl.n	800536e <HAL_SD_Init+0xea>
  {
    /* Card is not V2.0 compliant or card does not support the set voltage range */
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8005366:	2204      	movs	r2, #4
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800536a:	2503      	movs	r5, #3
 800536c:	e005      	b.n	800537a <HAL_SD_Init+0xf6>
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDREND))
 800536e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005370:	0651      	lsls	r1, r2, #25
  {
    /* Card is SD V2.0 compliant */
    errorstate = SD_OK;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
 8005372:	bf46      	itte	mi
 8005374:	2240      	movmi	r2, #64	; 0x40
 8005376:	639a      	strmi	r2, [r3, #56]	; 0x38
    
    return errorstate;
  }
  
  return errorstate;
 8005378:	2529      	movpl	r5, #41	; 0x29
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
  
  /* Check for error conditions */ 
  errorstate = SD_CmdResp7Error(hsd);
 800537a:	f88d 5013 	strb.w	r5, [sp, #19]
  
  printf("errorstate CMD8: %d\n", errorstate);
 800537e:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8005382:	4876      	ldr	r0, [pc, #472]	; (800555c <HAL_SD_Init+0x2d8>)
 8005384:	f014 f984 	bl	8019690 <printf>
  
  if (errorstate == SD_OK)
 8005388:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800538c:	2300      	movs	r3, #0
 800538e:	b922      	cbnz	r2, 800539a <HAL_SD_Init+0x116>
  {
    /* SD Card 2.0 */
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8005390:	2201      	movs	r2, #1
 8005392:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8005394:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8005398:	e000      	b.n	800539c <HAL_SD_Init+0x118>
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
  uint32_t response = 0, count = 0, validvoltage = 0;
  uint32_t sdtype = SD_STD_CAPACITY;
 800539a:	4698      	mov	r8, r3
    sdtype        = SD_HIGH_CAPACITY;
  }
  
  /* Send CMD55 */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800539c:	2537      	movs	r5, #55	; 0x37
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800539e:	a905      	add	r1, sp, #20
 80053a0:	6820      	ldr	r0, [r4, #0]
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
    sdtype        = SD_HIGH_CAPACITY;
  }
  
  /* Send CMD55 */
  sdio_cmdinitstructure.Argument         = 0;
 80053a2:	9305      	str	r3, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80053a4:	9506      	str	r5, [sp, #24]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80053a6:	f7fe fed3 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80053aa:	4629      	mov	r1, r5
 80053ac:	4620      	mov	r0, r4
 80053ae:	f7ff fb9f 	bl	8004af0 <SD_CmdResp1Error>
 80053b2:	f88d 0013 	strb.w	r0, [sp, #19]
  
  printf("errorstate CMD55: %d\n", errorstate);
 80053b6:	f89d 1013 	ldrb.w	r1, [sp, #19]
 80053ba:	4869      	ldr	r0, [pc, #420]	; (8005560 <HAL_SD_Init+0x2dc>)
 80053bc:	f014 f968 	bl	8019690 <printf>
  
  /* If errorstate is Command Timeout, it is a MMC card */
  /* If errorstate is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if(errorstate == SD_OK)
 80053c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80053c4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d157      	bne.n	800547c <HAL_SD_Init+0x1f8>
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
 80053cc:	2300      	movs	r3, #0
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80053ce:	2537      	movs	r5, #55	; 0x37
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80053d0:	a905      	add	r1, sp, #20
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80053d2:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80053d6:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80053da:	6820      	ldr	r0, [r4, #0]
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
 80053dc:	9305      	str	r3, [sp, #20]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80053de:	9308      	str	r3, [sp, #32]
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdio_cmdinitstructure.Argument         = 0;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80053e0:	9506      	str	r5, [sp, #24]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80053e2:	f8cd a01c 	str.w	sl, [sp, #28]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80053e6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80053ea:	f7fe feb1 	bl	8004150 <SDIO_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80053ee:	4629      	mov	r1, r5
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff fb7d 	bl	8004af0 <SD_CmdResp1Error>
 80053f6:	f88d 0013 	strb.w	r0, [sp, #19]
      
      if(errorstate != SD_OK)
 80053fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80053fe:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005402:	2b00      	cmp	r3, #0
 8005404:	d13f      	bne.n	8005486 <HAL_SD_Init+0x202>
      {
        return errorstate;
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8005406:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
 800540a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540e:	9305      	str	r3, [sp, #20]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005410:	6820      	ldr	r0, [r4, #0]
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8005412:	f8cd a01c 	str.w	sl, [sp, #28]
        return errorstate;
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8005416:	2329      	movs	r3, #41	; 0x29
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005418:	a905      	add	r1, sp, #20
        return errorstate;
      }
      
      /* Send CMD41 */
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800541a:	9306      	str	r3, [sp, #24]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800541c:	9508      	str	r5, [sp, #32]
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800541e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005422:	f7fe fe95 	bl	8004150 <SDIO_SendCommand>
  */
static HAL_SD_ErrorTypedef SD_CmdResp3Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800542e:	d0fb      	beq.n	8005428 <HAL_SD_Init+0x1a4>
  {
  }
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8005430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005432:	0752      	lsls	r2, r2, #29
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 8005434:	bf45      	ittet	mi
 8005436:	2204      	movmi	r2, #4
    
    return errorstate;
 8005438:	2503      	movmi	r5, #3
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800543a:	f240 52ff 	movwpl	r2, #1535	; 0x5ff
  
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800543e:	639a      	strmi	r2, [r3, #56]	; 0x38
    
    return errorstate;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005440:	bf58      	it	pl
 8005442:	639a      	strpl	r2, [r3, #56]	; 0x38
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
      
      /* Check for error conditions */
      errorstate = SD_CmdResp3Error(hsd);
 8005444:	f88d 5013 	strb.w	r5, [sp, #19]
      
      if(errorstate != SD_OK)
 8005448:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800544c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005450:	b9cb      	cbnz	r3, 8005486 <HAL_SD_Init+0x202>
      {
        return errorstate;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(SDIO_RESP1);
 8005452:	f7fe fec1 	bl	80041d8 <SDIO_GetResponse>
     or SD card 1.x */
  if(errorstate == SD_OK)
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8005456:	2800      	cmp	r0, #0
      response = SDIO_GetResponse(SDIO_RESP1);
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      
      count++;
 8005458:	f107 0701 	add.w	r7, r7, #1
 800545c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     or SD card 1.x */
  if(errorstate == SD_OK)
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8005460:	db02      	blt.n	8005468 <HAL_SD_Init+0x1e4>
 8005462:	429f      	cmp	r7, r3
 8005464:	d1b2      	bne.n	80053cc <HAL_SD_Init+0x148>
 8005466:	e001      	b.n	800546c <HAL_SD_Init+0x1e8>
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
      
      count++;
    }
    
    if(count >= SD_MAX_VOLT_TRIAL)
 8005468:	429f      	cmp	r7, r3
 800546a:	d103      	bne.n	8005474 <HAL_SD_Init+0x1f0>
    {
      errorstate = SD_INVALID_VOLTRANGE;
 800546c:	231b      	movs	r3, #27
 800546e:	f88d 3013 	strb.w	r3, [sp, #19]
 8005472:	e008      	b.n	8005486 <HAL_SD_Init+0x202>
      
      return errorstate;
    }
    
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005474:	0043      	lsls	r3, r0, #1
    {
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8005476:	bf44      	itt	mi
 8005478:	2302      	movmi	r3, #2
 800547a:	6223      	strmi	r3, [r4, #32]
    }
    
  } /* else MMC Card */
  
  printf("errorstate PWon: %d\n", errorstate);
 800547c:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8005480:	4838      	ldr	r0, [pc, #224]	; (8005564 <HAL_SD_Init+0x2e0>)
 8005482:	f014 f905 	bl	8019690 <printf>
  return errorstate;
 8005486:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800548a:	b2db      	uxtb	r3, r3
  
  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, tmpinit);
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd); 
 800548c:	f88d 3012 	strb.w	r3, [sp, #18]
  
  if(errorstate != SD_OK)     
 8005490:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005494:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 80c3 	bne.w	8005624 <HAL_SD_Init+0x3a0>
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint16_t sd_rca = 1;
  
  if(SDIO_GetPowerState(hsd->Instance) == 0) /* Power off */
 800549e:	6820      	ldr	r0, [r4, #0]
 80054a0:	f7fe fe51 	bl	8004146 <SDIO_GetPowerState>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f000 8089 	beq.w	80055bc <HAL_SD_Init+0x338>
    errorstate = SD_REQUEST_NOT_APPLICABLE;
    
    return errorstate;
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80054aa:	6a23      	ldr	r3, [r4, #32]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d020      	beq.n	80054f2 <HAL_SD_Init+0x26e>
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0;
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 80054b0:	2302      	movs	r3, #2
 80054b2:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 80054b4:	23c0      	movs	r3, #192	; 0xc0
 80054b6:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80054b8:	6820      	ldr	r0, [r4, #0]
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0;
 80054ba:	9505      	str	r5, [sp, #20]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80054bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80054c0:	a905      	add	r1, sp, #20
  {
    /* Send CMD2 ALL_SEND_CID */
    sdio_cmdinitstructure.Argument         = 0;
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80054c2:	9508      	str	r5, [sp, #32]
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80054c4:	9309      	str	r3, [sp, #36]	; 0x24
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80054c6:	f7fe fe43 	bl	8004150 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 80054ca:	4620      	mov	r0, r4
 80054cc:	f7ff fafa 	bl	8004ac4 <SD_CmdResp2Error>
    
    if(errorstate != SD_OK)
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d175      	bne.n	80055c0 <HAL_SD_Init+0x33c>
    {
      return errorstate;
    }
    
    /* Get Card identification number data */
    hsd->CID[0] = SDIO_GetResponse(SDIO_RESP1);
 80054d4:	f7fe fe80 	bl	80041d8 <SDIO_GetResponse>
 80054d8:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDIO_GetResponse(SDIO_RESP2);
 80054da:	2004      	movs	r0, #4
 80054dc:	f7fe fe7c 	bl	80041d8 <SDIO_GetResponse>
 80054e0:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDIO_GetResponse(SDIO_RESP3);
 80054e2:	2008      	movs	r0, #8
 80054e4:	f7fe fe78 	bl	80041d8 <SDIO_GetResponse>
 80054e8:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDIO_GetResponse(SDIO_RESP4);
 80054ea:	200c      	movs	r0, #12
 80054ec:	f7fe fe74 	bl	80041d8 <SDIO_GetResponse>
 80054f0:	6460      	str	r0, [r4, #68]	; 0x44
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80054f2:	6a23      	ldr	r3, [r4, #32]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <HAL_SD_Init+0x278>
 80054f8:	2b06      	cmp	r3, #6
 80054fa:	d13b      	bne.n	8005574 <HAL_SD_Init+0x2f0>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 80054fc:	2303      	movs	r3, #3
 80054fe:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005500:	6820      	ldr	r0, [r4, #0]
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8005502:	2340      	movs	r3, #64	; 0x40
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005504:	a905      	add	r1, sp, #20
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8005506:	9307      	str	r3, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005508:	f7fe fe22 	bl	8004150 <SDIO_SendCommand>
static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t response_r1;
  
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005510:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005514:	d0fb      	beq.n	800550e <HAL_SD_Init+0x28a>
  {
  }
  
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 8005516:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005518:	075f      	lsls	r7, r3, #29
 800551a:	d503      	bpl.n	8005524 <HAL_SD_Init+0x2a0>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800551c:	2304      	movs	r3, #4
 800551e:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 8005520:	2503      	movs	r5, #3
 8005522:	e04e      	b.n	80055c2 <HAL_SD_Init+0x33e>
  }
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 8005524:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005526:	f013 0701 	ands.w	r7, r3, #1
 800552a:	d002      	beq.n	8005532 <HAL_SD_Init+0x2ae>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 800552c:	2501      	movs	r5, #1
 800552e:	6385      	str	r5, [r0, #56]	; 0x38
 8005530:	e047      	b.n	80055c2 <HAL_SD_Init+0x33e>
  {
    /* No error flag set */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 8005532:	f7fe fe4d 	bl	80041d0 <SDIO_GetCommandResponse>
 8005536:	2803      	cmp	r0, #3
 8005538:	d17f      	bne.n	800563a <HAL_SD_Init+0x3b6>
    
    return errorstate;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8005542:	4638      	mov	r0, r7
 8005544:	f7fe fe48 	bl	80041d8 <SDIO_GetResponse>
  
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8005548:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 800554c:	d10c      	bne.n	8005568 <HAL_SD_Init+0x2e4>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800554e:	0c00      	lsrs	r0, r0, #16
 8005550:	e011      	b.n	8005576 <HAL_SD_Init+0x2f2>
 8005552:	bf00      	nop
 8005554:	422580a0 	.word	0x422580a0
 8005558:	08029208 	.word	0x08029208
 800555c:	0802921d 	.word	0x0802921d
 8005560:	08029232 	.word	0x08029232
 8005564:	08029248 	.word	0x08029248
    
    return errorstate;
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8005568:	0481      	lsls	r1, r0, #18
 800556a:	d468      	bmi.n	800563e <HAL_SD_Init+0x3ba>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }
  
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 800556c:	0442      	lsls	r2, r0, #17
 800556e:	d464      	bmi.n	800563a <HAL_SD_Init+0x3b6>
  {
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8005570:	0403      	lsls	r3, r0, #16
 8005572:	d466      	bmi.n	8005642 <HAL_SD_Init+0x3be>
  */
static HAL_SD_ErrorTypedef SD_Initialize_Cards(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint16_t sd_rca = 1;
 8005574:	2001      	movs	r0, #1
    {
      return errorstate;
    }
  }
  
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8005576:	6a23      	ldr	r3, [r4, #32]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d022      	beq.n	80055c2 <HAL_SD_Init+0x33e>
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
 800557c:	6260      	str	r0, [r4, #36]	; 0x24
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800557e:	2309      	movs	r3, #9
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005580:	0400      	lsls	r0, r0, #16
 8005582:	9005      	str	r0, [sp, #20]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8005584:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005586:	a905      	add	r1, sp, #20
    hsd->RCA = sd_rca;
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 8005588:	23c0      	movs	r3, #192	; 0xc0
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800558a:	6820      	ldr	r0, [r4, #0]
    hsd->RCA = sd_rca;
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 800558c:	9307      	str	r3, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800558e:	f7fe fddf 	bl	8004150 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 8005592:	4620      	mov	r0, r4
 8005594:	f7ff fa96 	bl	8004ac4 <SD_CmdResp2Error>
    
    if(errorstate != SD_OK)
 8005598:	4605      	mov	r5, r0
 800559a:	b990      	cbnz	r0, 80055c2 <HAL_SD_Init+0x33e>
    {
      return errorstate;
    }
    
    /* Get Card Specific Data */
    hsd->CSD[0] = SDIO_GetResponse(SDIO_RESP1);
 800559c:	f7fe fe1c 	bl	80041d8 <SDIO_GetResponse>
 80055a0:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDIO_GetResponse(SDIO_RESP2);
 80055a2:	2004      	movs	r0, #4
 80055a4:	f7fe fe18 	bl	80041d8 <SDIO_GetResponse>
 80055a8:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDIO_GetResponse(SDIO_RESP3);
 80055aa:	2008      	movs	r0, #8
 80055ac:	f7fe fe14 	bl	80041d8 <SDIO_GetResponse>
 80055b0:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDIO_GetResponse(SDIO_RESP4);
 80055b2:	200c      	movs	r0, #12
 80055b4:	f7fe fe10 	bl	80041d8 <SDIO_GetResponse>
 80055b8:	6360      	str	r0, [r4, #52]	; 0x34
 80055ba:	e002      	b.n	80055c2 <HAL_SD_Init+0x33e>
  
  if(SDIO_GetPowerState(hsd->Instance) == 0) /* Power off */
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
    
    return errorstate;
 80055bc:	2525      	movs	r5, #37	; 0x25
 80055be:	e000      	b.n	80055c2 <HAL_SD_Init+0x33e>
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
    
    if(errorstate != SD_OK)
 80055c0:	4605      	mov	r5, r0
  {
    return errorstate;
  }
  
  /* Initialize the present SDIO card(s) and put them in idle state */
  errorstate = SD_Initialize_Cards(hsd);
 80055c2:	f88d 5012 	strb.w	r5, [sp, #18]
  
  if (errorstate != SD_OK)
 80055c6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80055ca:	bb5b      	cbnz	r3, 8005624 <HAL_SD_Init+0x3a0>
  {
    return errorstate;
  }
  
  /* Read CSD/CID MSD registers */
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 80055cc:	4620      	mov	r0, r4
 80055ce:	4631      	mov	r1, r6
 80055d0:	f7ff fd11 	bl	8004ff6 <HAL_SD_Get_CardInfo>
 80055d4:	f88d 0012 	strb.w	r0, [sp, #18]
  
  if (errorstate == SD_OK)
 80055d8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80055dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055e0:	b9ab      	cbnz	r3, 800560e <HAL_SD_Init+0x38a>
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80055e2:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80055e6:	6820      	ldr	r0, [r4, #0]
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80055e8:	9208      	str	r2, [sp, #32]
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
  
  if (errorstate == SD_OK)
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80055ea:	041b      	lsls	r3, r3, #16
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
 80055ec:	9305      	str	r3, [sp, #20]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80055ee:	2340      	movs	r3, #64	; 0x40
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80055f0:	2507      	movs	r5, #7
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80055f2:	9307      	str	r3, [sp, #28]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80055f4:	a905      	add	r1, sp, #20
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80055f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055fa:	9309      	str	r3, [sp, #36]	; 0x24
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80055fc:	9506      	str	r5, [sp, #24]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80055fe:	f7fe fda7 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8005602:	4620      	mov	r0, r4
 8005604:	4629      	mov	r1, r5
 8005606:	f7ff fa73 	bl	8004af0 <SD_CmdResp1Error>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
  
  if (errorstate == SD_OK)
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800560a:	f88d 0012 	strb.w	r0, [sp, #18]
  }
  
  /* Configure SDIO peripheral interface */
  SDIO_Init(hsd->Instance, hsd->Init);   
 800560e:	f104 0310 	add.w	r3, r4, #16
 8005612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005616:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800561a:	1d23      	adds	r3, r4, #4
 800561c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800561e:	6820      	ldr	r0, [r4, #0]
 8005620:	f7fe fd30 	bl	8004084 <SDIO_Init>
  
  return errorstate;
 8005624:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8005628:	b2c0      	uxtb	r0, r0
}
 800562a:	b010      	add	sp, #64	; 0x40
 800562c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorstate = SD_CMD_RSP_TIMEOUT;
    return errorstate;
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005630:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005634:	6393      	str	r3, [r2, #56]	; 0x38
  
  return errorstate;
 8005636:	2300      	movs	r3, #0
 8005638:	e665      	b.n	8005306 <HAL_SD_Init+0x82>
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
  {
    errorstate = SD_ILLEGAL_CMD;
    
    return errorstate;
 800563a:	2510      	movs	r5, #16
 800563c:	e7c1      	b.n	80055c2 <HAL_SD_Init+0x33e>
    return errorstate;
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 800563e:	2513      	movs	r5, #19
 8005640:	e7bf      	b.n	80055c2 <HAL_SD_Init+0x33e>
    return(SD_ILLEGAL_CMD);
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 8005642:	250f      	movs	r5, #15
 8005644:	e7bd      	b.n	80055c2 <HAL_SD_Init+0x33e>
 8005646:	bf00      	nop

08005648 <HAL_SD_WideBusOperation_Config>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005648:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  SDIO_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 800564a:	6a03      	ldr	r3, [r0, #32]
 800564c:	2b03      	cmp	r3, #3
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800564e:	b08d      	sub	sp, #52	; 0x34
 8005650:	4605      	mov	r5, r0
 8005652:	460e      	mov	r6, r1
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  SDIO_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 8005654:	f000 8084 	beq.w	8005760 <HAL_SD_WideBusOperation_Config+0x118>
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8005658:	2b02      	cmp	r3, #2
 800565a:	f200 8083 	bhi.w	8005764 <HAL_SD_WideBusOperation_Config+0x11c>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    if (WideMode == SDIO_BUS_WIDE_8B)
 800565e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005662:	f000 8081 	beq.w	8005768 <HAL_SD_WideBusOperation_Config+0x120>
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
    }
    else if (WideMode == SDIO_BUS_WIDE_4B)
 8005666:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800566a:	d129      	bne.n	80056c0 <HAL_SD_WideBusOperation_Config+0x78>
static HAL_SD_ErrorTypedef SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  uint32_t scr[2] = {0, 0};
 800566c:	2000      	movs	r0, #0
 800566e:	9004      	str	r0, [sp, #16]
 8005670:	9005      	str	r0, [sp, #20]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8005672:	f7fe fdb1 	bl	80041d8 <SDIO_GetResponse>
 8005676:	0180      	lsls	r0, r0, #6
 8005678:	d46e      	bmi.n	8005758 <HAL_SD_WideBusOperation_Config+0x110>
    
    return errorstate;
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800567a:	4628      	mov	r0, r5
 800567c:	a904      	add	r1, sp, #16
 800567e:	f7ff faad 	bl	8004bdc <SD_FindSCR>
  
  if(errorstate != SD_OK)
 8005682:	4604      	mov	r4, r0
 8005684:	2800      	cmp	r0, #0
 8005686:	d172      	bne.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
  {
    return errorstate;
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	0359      	lsls	r1, r3, #13
 800568c:	d566      	bpl.n	800575c <HAL_SD_WideBusOperation_Config+0x114>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800568e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8005690:	9009      	str	r0, [sp, #36]	; 0x24
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8005696:	2340      	movs	r3, #64	; 0x40
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005698:	2737      	movs	r7, #55	; 0x37
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800569a:	9308      	str	r3, [sp, #32]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800569c:	a906      	add	r1, sp, #24
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800569e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80056a2:	6828      	ldr	r0, [r5, #0]
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80056a4:	930a      	str	r3, [sp, #40]	; 0x28
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80056a6:	9707      	str	r7, [sp, #28]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80056a8:	f7fe fd52 	bl	8004150 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80056ac:	4628      	mov	r0, r5
 80056ae:	4639      	mov	r1, r7
 80056b0:	f7ff fa1e 	bl	8004af0 <SD_CmdResp1Error>
    
    if(errorstate != SD_OK)
 80056b4:	4604      	mov	r4, r0
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d159      	bne.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
    {
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    sdio_cmdinitstructure.Argument         = 2;
 80056ba:	2302      	movs	r3, #2
 80056bc:	9306      	str	r3, [sp, #24]
 80056be:	e029      	b.n	8005714 <HAL_SD_WideBusOperation_Config+0xcc>
    }
    else if (WideMode == SDIO_BUS_WIDE_4B)
    {
      errorstate = SD_WideBus_Enable(hsd);
    }
    else if (WideMode == SDIO_BUS_WIDE_1B)
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d153      	bne.n	800576c <HAL_SD_WideBusOperation_Config+0x124>
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  uint32_t scr[2] = {0, 0};
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80056c4:	4608      	mov	r0, r1
static HAL_SD_ErrorTypedef SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  uint32_t scr[2] = {0, 0};
 80056c6:	9104      	str	r1, [sp, #16]
 80056c8:	9105      	str	r1, [sp, #20]
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80056ca:	f7fe fd85 	bl	80041d8 <SDIO_GetResponse>
 80056ce:	0182      	lsls	r2, r0, #6
 80056d0:	d442      	bmi.n	8005758 <HAL_SD_WideBusOperation_Config+0x110>
    
    return errorstate;
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80056d2:	4628      	mov	r0, r5
 80056d4:	a904      	add	r1, sp, #16
 80056d6:	f7ff fa81 	bl	8004bdc <SD_FindSCR>
  
  if(errorstate != SD_OK)
 80056da:	4604      	mov	r4, r0
 80056dc:	2800      	cmp	r0, #0
 80056de:	d146      	bne.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
  {
    return errorstate;
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 80056e0:	9b05      	ldr	r3, [sp, #20]
 80056e2:	03db      	lsls	r3, r3, #15
 80056e4:	d53a      	bpl.n	800575c <HAL_SD_WideBusOperation_Config+0x114>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80056e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 80056e8:	9009      	str	r0, [sp, #36]	; 0x24
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80056ee:	2340      	movs	r3, #64	; 0x40
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80056f0:	2737      	movs	r7, #55	; 0x37
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 80056f2:	9308      	str	r3, [sp, #32]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80056f4:	a906      	add	r1, sp, #24
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80056f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 80056fa:	6828      	ldr	r0, [r5, #0]
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 80056fc:	930a      	str	r3, [sp, #40]	; 0x28
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80056fe:	9707      	str	r7, [sp, #28]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005700:	f7fe fd26 	bl	8004150 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005704:	4628      	mov	r0, r5
 8005706:	4639      	mov	r1, r7
 8005708:	f7ff f9f2 	bl	8004af0 <SD_CmdResp1Error>
    
    if(errorstate != SD_OK)
 800570c:	4604      	mov	r4, r0
 800570e:	2800      	cmp	r0, #0
 8005710:	d12d      	bne.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
    {
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdio_cmdinitstructure.Argument         = 0;
 8005712:	9006      	str	r0, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8005714:	2406      	movs	r4, #6
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005716:	a906      	add	r1, sp, #24
 8005718:	6828      	ldr	r0, [r5, #0]
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdio_cmdinitstructure.Argument         = 0;
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 800571a:	9407      	str	r4, [sp, #28]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800571c:	f7fe fd18 	bl	8004150 <SDIO_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f7ff f9e4 	bl	8004af0 <SD_CmdResp1Error>
 8005728:	4604      	mov	r4, r0
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
    }
      
    if (errorstate == SD_OK)
 800572a:	bb00      	cbnz	r0, 800576e <HAL_SD_WideBusOperation_Config+0x126>
    {
      /* Configure the SDIO peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 800572c:	686b      	ldr	r3, [r5, #4]
 800572e:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8005730:	68ab      	ldr	r3, [r5, #8]
 8005732:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005734:	68eb      	ldr	r3, [r5, #12]
 8005736:	9308      	str	r3, [sp, #32]
      tmpinit.BusWide             = WideMode;
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005738:	696b      	ldr	r3, [r5, #20]
 800573a:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 800573c:	69ab      	ldr	r3, [r5, #24]
 800573e:	930b      	str	r3, [sp, #44]	; 0x2c
    {
      /* Configure the SDIO peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
      tmpinit.BusWide             = WideMode;
 8005740:	9609      	str	r6, [sp, #36]	; 0x24
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
      SDIO_Init(hsd->Instance, tmpinit);
 8005742:	ab0c      	add	r3, sp, #48	; 0x30
 8005744:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005748:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800574c:	ab06      	add	r3, sp, #24
 800574e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005750:	6828      	ldr	r0, [r5, #0]
 8005752:	f7fe fc97 	bl	8004084 <SDIO_Init>
 8005756:	e00a      	b.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
  
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
    
    return errorstate;
 8005758:	240e      	movs	r4, #14
 800575a:	e008      	b.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
    
    return errorstate;
 800575c:	2425      	movs	r4, #37	; 0x25
 800575e:	e006      	b.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
 8005760:	2027      	movs	r0, #39	; 0x27
 8005762:	e005      	b.n	8005770 <HAL_SD_WideBusOperation_Config+0x128>
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005764:	2000      	movs	r0, #0
 8005766:	e003      	b.n	8005770 <HAL_SD_WideBusOperation_Config+0x128>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
  {
    if (WideMode == SDIO_BUS_WIDE_8B)
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
 8005768:	2427      	movs	r4, #39	; 0x27
 800576a:	e000      	b.n	800576e <HAL_SD_WideBusOperation_Config+0x126>
      errorstate = SD_WideBus_Disable(hsd);
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
 800576c:	2426      	movs	r4, #38	; 0x26
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
    
    return errorstate;
 800576e:	4620      	mov	r0, r4
      SDIO_Init(hsd->Instance, tmpinit);
    }
  }
  
  return errorstate;
}
 8005770:	b00d      	add	sp, #52	; 0x34
 8005772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005774 <HAL_SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 8005774:	b530      	push	{r4, r5, lr}
 8005776:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
 8005778:	2300      	movs	r3, #0
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800577a:	2240      	movs	r2, #64	; 0x40
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 800577c:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
 800577e:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8005780:	240c      	movs	r4, #12
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8005782:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005784:	a901      	add	r1, sp, #4
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8005786:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800578a:	6800      	ldr	r0, [r0, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800578c:	9203      	str	r2, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800578e:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef sdio_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdio_cmdinitstructure.Argument         = 0;
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8005790:	9402      	str	r4, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005792:	f7fe fcdd 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8005796:	4628      	mov	r0, r5
 8005798:	4621      	mov	r1, r4
 800579a:	f7ff f9a9 	bl	8004af0 <SD_CmdResp1Error>
  
  return errorstate;
}
 800579e:	b007      	add	sp, #28
 80057a0:	bd30      	pop	{r4, r5, pc}

080057a2 <HAL_SD_CheckReadOperation>:
  * @param  hsd: SD handle
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckReadOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
 80057a2:	b538      	push	{r3, r4, r5, lr}
 80057a4:	4604      	mov	r4, r0
 80057a6:	460d      	mov	r5, r1
  uint32_t timeout = Timeout;
  uint32_t tmp1, tmp2;
  HAL_SD_ErrorTypedef tmp3;
  
  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
 80057a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 80057aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80057ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckReadOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t timeout = Timeout;
 80057ae:	462a      	mov	r2, r5
  HAL_SD_ErrorTypedef tmp3;
  
  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
  tmp2 = hsd->SdTransferCplt;
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80057b0:	b2db      	uxtb	r3, r3
    
  while ((tmp1 == 0) && (tmp2 == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80057b2:	b900      	cbnz	r0, 80057b6 <HAL_SD_CheckReadOperation+0x14>
 80057b4:	b109      	cbz	r1, 80057ba <HAL_SD_CheckReadOperation+0x18>
  }
  
  timeout = Timeout;
  
  /* Wait until the Rx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXACT)) && (timeout > 0))
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	e00b      	b.n	80057d2 <HAL_SD_CheckReadOperation+0x30>
  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
  tmp2 = hsd->SdTransferCplt;
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
    
  while ((tmp1 == 0) && (tmp2 == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1fb      	bne.n	80057b6 <HAL_SD_CheckReadOperation+0x14>
 80057be:	2a00      	cmp	r2, #0
 80057c0:	d0f9      	beq.n	80057b6 <HAL_SD_CheckReadOperation+0x14>
  {
    tmp1 = hsd->DmaTransferCplt; 
 80057c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 80057c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80057c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 80057c8:	3a01      	subs	r2, #1
    
  while ((tmp1 == 0) && (tmp2 == 0) && (tmp3 == SD_OK) && (timeout > 0))
  {
    tmp1 = hsd->DmaTransferCplt; 
    tmp2 = hsd->SdTransferCplt;
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	e7f1      	b.n	80057b2 <HAL_SD_CheckReadOperation+0x10>
  }
  
  timeout = Timeout;
  
  /* Wait until the Rx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXACT)) && (timeout > 0))
 80057ce:	b11d      	cbz	r5, 80057d8 <HAL_SD_CheckReadOperation+0x36>
  {
    timeout--;  
 80057d0:	3d01      	subs	r5, #1
  }
  
  timeout = Timeout;
  
  /* Wait until the Rx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXACT)) && (timeout > 0))
 80057d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d4:	0492      	lsls	r2, r2, #18
 80057d6:	d4fa      	bmi.n	80057ce <HAL_SD_CheckReadOperation+0x2c>
  {
    timeout--;  
  }
  
  /* Send stop command in multiblock read */
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 80057d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10e      	bne.n	80057fc <HAL_SD_CheckReadOperation+0x5a>
  {
    errorstate = HAL_SD_StopTransfer(hsd);
 80057de:	4620      	mov	r0, r4
 80057e0:	f7ff ffc8 	bl	8005774 <HAL_SD_StopTransfer>
  }
  
  if ((timeout == 0) && (errorstate == SD_OK))
 80057e4:	b90d      	cbnz	r5, 80057ea <HAL_SD_CheckReadOperation+0x48>
 80057e6:	b900      	cbnz	r0, 80057ea <HAL_SD_CheckReadOperation+0x48>
  {
    errorstate = SD_DATA_TIMEOUT;
 80057e8:	2004      	movs	r0, #4
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Return error state */
  if (hsd->SdTransferErr != SD_OK)
 80057f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80057f4:	b133      	cbz	r3, 8005804 <HAL_SD_CheckReadOperation+0x62>
  {
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80057f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80057f8:	b2c0      	uxtb	r0, r0
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
  {
    errorstate = HAL_SD_StopTransfer(hsd);
  }
  
  if ((timeout == 0) && (errorstate == SD_OK))
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	d0f3      	beq.n	80057e8 <HAL_SD_CheckReadOperation+0x46>
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckReadOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005800:	2000      	movs	r0, #0
 8005802:	e7f2      	b.n	80057ea <HAL_SD_CheckReadOperation+0x48>
  {
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
  }
  
  return errorstate;
}
 8005804:	bd38      	pop	{r3, r4, r5, pc}

08005806 <HAL_SD_GetStatus>:
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 8005806:	b530      	push	{r4, r5, lr}
    
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005808:	6a43      	ldr	r3, [r0, #36]	; 0x24
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 800580a:	b087      	sub	sp, #28
    
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800580c:	041b      	lsls	r3, r3, #16
 800580e:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 8005814:	2300      	movs	r3, #0
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 8005816:	4604      	mov	r4, r0
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8005818:	250d      	movs	r5, #13
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800581a:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800581c:	a901      	add	r1, sp, #4
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800581e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005822:	6800      	ldr	r0, [r0, #0]
    return errorstate;
  }
  
  /* Send Status command */
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8005824:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 8005826:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 8005828:	f7fe fc92 	bl	8004150 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7ff f95e 	bl	8004af0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005834:	b938      	cbnz	r0, 8005846 <HAL_SD_GetStatus+0x40>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(SDIO_RESP1);
 8005836:	f7fe fccf 	bl	80041d8 <SDIO_GetResponse>

  /* Get SD card state */
  cardstate = SD_GetState(hsd);
  
  /* Find SD status according to card state*/
  if (cardstate == SD_CARD_TRANSFER)
 800583a:	f3c0 2043 	ubfx	r0, r0, #9, #4
  {
    return SD_TRANSFER_OK;
 800583e:	3804      	subs	r0, #4
 8005840:	bf18      	it	ne
 8005842:	2001      	movne	r0, #1
 8005844:	e000      	b.n	8005848 <HAL_SD_GetStatus+0x42>
  }
  else if(cardstate == SD_CARD_ERROR)
  {
    return SD_TRANSFER_ERROR;
 8005846:	2002      	movs	r0, #2
  }
  else
  {
    return SD_TRANSFER_BUSY;
  }
}
 8005848:	b007      	add	sp, #28
 800584a:	bd30      	pop	{r4, r5, pc}

0800584c <HAL_SD_CheckWriteOperation>:
  * @param  hsd: SD handle
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckWriteOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4604      	mov	r4, r0
 8005850:	460e      	mov	r6, r1
  uint32_t timeout = Timeout;
  uint32_t tmp1, tmp2;
  HAL_SD_ErrorTypedef tmp3;

  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
 8005852:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8005854:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005856:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckWriteOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t timeout = Timeout;
 8005858:	4632      	mov	r2, r6
  HAL_SD_ErrorTypedef tmp3;

  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
  tmp2 = hsd->SdTransferCplt;
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800585a:	b2db      	uxtb	r3, r3
    
  while ((tmp1 == 0) && (tmp2 == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800585c:	b900      	cbnz	r0, 8005860 <HAL_SD_CheckWriteOperation+0x14>
 800585e:	b109      	cbz	r1, 8005864 <HAL_SD_CheckWriteOperation+0x18>
  }
  
  timeout = Timeout;
  
  /* Wait until the Tx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXACT))  && (timeout > 0))
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	e00b      	b.n	800587c <HAL_SD_CheckWriteOperation+0x30>
  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
  tmp2 = hsd->SdTransferCplt;
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
    
  while ((tmp1 == 0) && (tmp2 == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1fb      	bne.n	8005860 <HAL_SD_CheckWriteOperation+0x14>
 8005868:	2a00      	cmp	r2, #0
 800586a:	d0f9      	beq.n	8005860 <HAL_SD_CheckWriteOperation+0x14>
  {
    tmp1 = hsd->DmaTransferCplt; 
 800586c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 800586e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005870:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8005872:	3a01      	subs	r2, #1
    
  while ((tmp1 == 0) && (tmp2 == 0) && (tmp3 == SD_OK) && (timeout > 0))
  {
    tmp1 = hsd->DmaTransferCplt; 
    tmp2 = hsd->SdTransferCplt;
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005874:	b2db      	uxtb	r3, r3
 8005876:	e7f1      	b.n	800585c <HAL_SD_CheckWriteOperation+0x10>
  }
  
  timeout = Timeout;
  
  /* Wait until the Tx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXACT))  && (timeout > 0))
 8005878:	b11e      	cbz	r6, 8005882 <HAL_SD_CheckWriteOperation+0x36>
  {
    timeout--;  
 800587a:	3e01      	subs	r6, #1
  }
  
  timeout = Timeout;
  
  /* Wait until the Tx transfer is no longer active */
  while((__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_TXACT))  && (timeout > 0))
 800587c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587e:	04d2      	lsls	r2, r2, #19
 8005880:	d4fa      	bmi.n	8005878 <HAL_SD_CheckWriteOperation+0x2c>
  {
    timeout--;  
  }

  /* Send stop command in multiblock write */
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8005882:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005884:	2b03      	cmp	r3, #3
 8005886:	d116      	bne.n	80058b6 <HAL_SD_CheckWriteOperation+0x6a>
  {
    errorstate = HAL_SD_StopTransfer(hsd);
 8005888:	4620      	mov	r0, r4
 800588a:	f7ff ff73 	bl	8005774 <HAL_SD_StopTransfer>
 800588e:	4605      	mov	r5, r0
  }
  
  if ((timeout == 0) && (errorstate == SD_OK))
 8005890:	b90e      	cbnz	r6, 8005896 <HAL_SD_CheckWriteOperation+0x4a>
 8005892:	b900      	cbnz	r0, 8005896 <HAL_SD_CheckWriteOperation+0x4a>
  {
    errorstate = SD_DATA_TIMEOUT;
 8005894:	2504      	movs	r5, #4
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Return error state */
  if (hsd->SdTransferErr != SD_OK)
 800589e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80058a0:	b113      	cbz	r3, 80058a8 <HAL_SD_CheckWriteOperation+0x5c>
  {
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80058a2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80058a4:	b2c0      	uxtb	r0, r0
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Wait until write is complete */
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ffac 	bl	8005806 <HAL_SD_GetStatus>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d1fa      	bne.n	80058a8 <HAL_SD_CheckWriteOperation+0x5c>
  {    
  }

  return errorstate; 
 80058b2:	4628      	mov	r0, r5
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
  {
    errorstate = HAL_SD_StopTransfer(hsd);
  }
  
  if ((timeout == 0) && (errorstate == SD_OK))
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d0ec      	beq.n	8005894 <HAL_SD_CheckWriteOperation+0x48>
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckWriteOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80058ba:	2500      	movs	r5, #0
 80058bc:	e7eb      	b.n	8005896 <HAL_SD_CheckWriteOperation+0x4a>

080058be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Flag: specifies the I2C flag to check.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
{
 80058be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c2:	460d      	mov	r5, r1
 80058c4:	4604      	mov	r4, r0
 80058c6:	4616      	mov	r6, r2
  uint32_t tickstart = 0;
  
  //printf("Start Address timeout\n");

  /* Get tick */
  tickstart = HAL_GetTick();
 80058c8:	f003 f8de 	bl	8008a88 <HAL_GetTick>

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058cc:	f3c5 4807 	ubfx	r8, r5, #16, #8
  uint32_t tickstart = 0;
  
  //printf("Start Address timeout\n");

  /* Get tick */
  tickstart = HAL_GetTick();
 80058d0:	4607      	mov	r7, r0
 80058d2:	6823      	ldr	r3, [r4, #0]

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058d4:	f1b8 0f01 	cmp.w	r8, #1
 80058d8:	bf0c      	ite	eq
 80058da:	6958      	ldreq	r0, [r3, #20]
 80058dc:	6998      	ldrne	r0, [r3, #24]
 80058de:	43c0      	mvns	r0, r0
 80058e0:	b280      	uxth	r0, r0
 80058e2:	4228      	tst	r0, r5
 80058e4:	bf14      	ite	ne
 80058e6:	2001      	movne	r0, #1
 80058e8:	2000      	moveq	r0, #0
 80058ea:	b328      	cbz	r0, 8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	0552      	lsls	r2, r2, #21
 80058f0:	d510      	bpl.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x56>
    {
		//printf("Ack failure\n");
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058fe:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005900:	2304      	movs	r3, #4
 8005902:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8005904:	2001      	movs	r0, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005906:	2300      	movs	r3, #0

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
      hi2c->State= HAL_I2C_STATE_READY;
 8005908:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800590c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      return HAL_ERROR;
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005914:	1c73      	adds	r3, r6, #1
 8005916:	d0dc      	beq.n	80058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x14>
    {
		//printf("Waiting on address Flag\n");
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005918:	b946      	cbnz	r6, 800592c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6e>
      {
		//printf("Address flag timedout\n");
        hi2c->State= HAL_I2C_STATE_READY;
 800591a:	2301      	movs	r3, #1
 800591c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005920:	2300      	movs	r3, #0
 8005922:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        return HAL_TIMEOUT;
 8005926:	2003      	movs	r0, #3
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
		//printf("Waiting on address Flag\n");
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800592c:	f003 f8ac 	bl	8008a88 <HAL_GetTick>
 8005930:	1bc0      	subs	r0, r0, r7
 8005932:	42b0      	cmp	r0, r6
 8005934:	d9cd      	bls.n	80058d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x14>
 8005936:	e7f0      	b.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5c>
    }
  }
  
  //printf("Address Flag SET\n");
  return HAL_OK;
}
 8005938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800593c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 800593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	460e      	mov	r6, r1
 8005942:	461d      	mov	r5, r3
 8005944:	4604      	mov	r4, r0
 8005946:	4690      	mov	r8, r2
  uint32_t tickstart = 0;
  
  //printf("TimeOut: %d\n", Timeout);

  /* Get tick */
  tickstart = HAL_GetTick();
 8005948:	f003 f89e 	bl	8008a88 <HAL_GetTick>
 800594c:	0c33      	lsrs	r3, r6, #16
 800594e:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8005950:	f1b8 0f00 	cmp.w	r8, #0
 8005954:	d134      	bne.n	80059c0 <I2C_WaitOnFlagUntilTimeout+0x84>
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005956:	fa5f f883 	uxtb.w	r8, r3
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f1b8 0f01 	cmp.w	r8, #1
 8005960:	bf0c      	ite	eq
 8005962:	695b      	ldreq	r3, [r3, #20]
 8005964:	699b      	ldrne	r3, [r3, #24]
 8005966:	43db      	mvns	r3, r3
 8005968:	b29b      	uxth	r3, r3
 800596a:	4233      	tst	r3, r6
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b1c3      	cbz	r3, 80059a6 <I2C_WaitOnFlagUntilTimeout+0x6a>
    {
		//printf("Wait on Flag: %d\n", Flag);
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005974:	1c6a      	adds	r2, r5, #1
 8005976:	d0f0      	beq.n	800595a <I2C_WaitOnFlagUntilTimeout+0x1e>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005978:	b1cd      	cbz	r5, 80059ae <I2C_WaitOnFlagUntilTimeout+0x72>
 800597a:	f003 f885 	bl	8008a88 <HAL_GetTick>
 800597e:	1bc0      	subs	r0, r0, r7
 8005980:	42a8      	cmp	r0, r5
 8005982:	d9ea      	bls.n	800595a <I2C_WaitOnFlagUntilTimeout+0x1e>
 8005984:	e013      	b.n	80059ae <I2C_WaitOnFlagUntilTimeout+0x72>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005986:	1c6b      	adds	r3, r5, #1
 8005988:	d110      	bne.n	80059ac <I2C_WaitOnFlagUntilTimeout+0x70>
 800598a:	6823      	ldr	r3, [r4, #0]
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800598c:	f1b8 0f01 	cmp.w	r8, #1
 8005990:	bf0c      	ite	eq
 8005992:	695b      	ldreq	r3, [r3, #20]
 8005994:	699b      	ldrne	r3, [r3, #24]
 8005996:	43db      	mvns	r3, r3
 8005998:	b29b      	uxth	r3, r3
 800599a:	4233      	tst	r3, r6
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1ef      	bne.n	8005986 <I2C_WaitOnFlagUntilTimeout+0x4a>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80059a6:	2000      	movs	r0, #0
 80059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80059ac:	b95d      	cbnz	r5, 80059c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b4:	2300      	movs	r3, #0
 80059b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          return HAL_TIMEOUT;
 80059ba:	2003      	movs	r0, #3
 80059bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 80059c0:	fa5f f883 	uxtb.w	r8, r3
 80059c4:	e7e1      	b.n	800598a <I2C_WaitOnFlagUntilTimeout+0x4e>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80059c6:	f003 f85f 	bl	8008a88 <HAL_GetTick>
 80059ca:	1bc0      	subs	r0, r0, r7
 80059cc:	42a8      	cmp	r0, r5
 80059ce:	d9dc      	bls.n	800598a <I2C_WaitOnFlagUntilTimeout+0x4e>
 80059d0:	e7ed      	b.n	80059ae <I2C_WaitOnFlagUntilTimeout+0x72>
	...

080059d4 <I2C_MasterRequestWrite>:
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4616      	mov	r6, r2
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80059d8:	6802      	ldr	r2, [r0, #0]
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e0:	6013      	str	r3, [r2, #0]
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 80059e2:	460d      	mov	r5, r1
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80059e4:	2200      	movs	r2, #0
 80059e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059ea:	4633      	mov	r3, r6
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 80059ec:	4604      	mov	r4, r0
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 80059ee:	f7ff ffa5 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 80059f2:	bb20      	cbnz	r0, 8005a3e <I2C_MasterRequestWrite+0x6a>
    return HAL_TIMEOUT;
  }
  
  //printf("Ready to send Address...\n");

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059fc:	d103      	bne.n	8005a06 <I2C_MasterRequestWrite+0x32>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059fe:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005a02:	6115      	str	r5, [r2, #16]
 8005a04:	e013      	b.n	8005a2e <I2C_MasterRequestWrite+0x5a>
	//printf("Address on the bus\n");
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a06:	f405 7340 	and.w	r3, r5, #768	; 0x300
 8005a0a:	11db      	asrs	r3, r3, #7
 8005a0c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005a10:	6113      	str	r3, [r2, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 8005a12:	4620      	mov	r0, r4
 8005a14:	490b      	ldr	r1, [pc, #44]	; (8005a44 <I2C_MasterRequestWrite+0x70>)
 8005a16:	4632      	mov	r2, r6
 8005a18:	f7ff ff51 	bl	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a1c:	b120      	cbz	r0, 8005a28 <I2C_MasterRequestWrite+0x54>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d10c      	bne.n	8005a3e <I2C_MasterRequestWrite+0x6a>
      {
        return HAL_ERROR;
 8005a24:	2001      	movs	r0, #1
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	b2ed      	uxtb	r5, r5
 8005a2c:	611d      	str	r5, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4905      	ldr	r1, [pc, #20]	; (8005a48 <I2C_MasterRequestWrite+0x74>)
 8005a32:	4632      	mov	r2, r6
 8005a34:	f7ff ff43 	bl	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1f0      	bne.n	8005a1e <I2C_MasterRequestWrite+0x4a>
 8005a3c:	e000      	b.n	8005a40 <I2C_MasterRequestWrite+0x6c>
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 8005a3e:	2003      	movs	r0, #3
  }
  
  //printf("Request Finish\n");

  return HAL_OK;
}
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	bf00      	nop
 8005a44:	00010008 	.word	0x00010008
 8005a48:	00010002 	.word	0x00010002

08005a4c <I2C_MasterRequestRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005a4c:	6803      	ldr	r3, [r0, #0]
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8005a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a50:	4616      	mov	r6, r2
  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a60:	601a      	str	r2, [r3, #0]
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8005a62:	460d      	mov	r5, r1

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005a64:	2200      	movs	r2, #0
 8005a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a6a:	4633      	mov	r3, r6
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8005a6c:	4604      	mov	r4, r0

  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005a6e:	f7ff ff65 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005a72:	b9d0      	cbnz	r0, 8005aaa <I2C_MasterRequestRead+0x5e>
  {
    return HAL_TIMEOUT;
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	6822      	ldr	r2, [r4, #0]
 8005a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a7c:	d104      	bne.n	8005a88 <I2C_MasterRequestRead+0x3c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a7e:	f045 0501 	orr.w	r5, r5, #1
 8005a82:	b2ed      	uxtb	r5, r5
 8005a84:	6115      	str	r5, [r2, #16]
 8005a86:	e033      	b.n	8005af0 <I2C_MasterRequestRead+0xa4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a88:	f405 7340 	and.w	r3, r5, #768	; 0x300
 8005a8c:	09df      	lsrs	r7, r3, #7
 8005a8e:	f047 03f0 	orr.w	r3, r7, #240	; 0xf0
 8005a92:	6113      	str	r3, [r2, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 8005a94:	4620      	mov	r0, r4
 8005a96:	491b      	ldr	r1, [pc, #108]	; (8005b04 <I2C_MasterRequestRead+0xb8>)
 8005a98:	4632      	mov	r2, r6
 8005a9a:	f7ff ff10 	bl	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a9e:	b130      	cbz	r0, 8005aae <I2C_MasterRequestRead+0x62>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d101      	bne.n	8005aaa <I2C_MasterRequestRead+0x5e>
      {
        return HAL_ERROR;
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	e029      	b.n	8005afe <I2C_MasterRequestRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8005aaa:	2003      	movs	r0, #3
 8005aac:	e027      	b.n	8005afe <I2C_MasterRequestRead+0xb2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005aae:	6823      	ldr	r3, [r4, #0]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005ab0:	4915      	ldr	r1, [pc, #84]	; (8005b08 <I2C_MasterRequestRead+0xbc>)
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ab2:	b2ed      	uxtb	r5, r5

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005ab4:	4632      	mov	r2, r6
        return HAL_TIMEOUT;
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ab6:	611d      	str	r5, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f7ff ff00 	bl	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d1ed      	bne.n	8005aa0 <I2C_MasterRequestRead+0x54>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	6959      	ldr	r1, [r3, #20]
 8005ac8:	9101      	str	r1, [sp, #4]
 8005aca:	6999      	ldr	r1, [r3, #24]
 8005acc:	9101      	str	r1, [sp, #4]
 8005ace:	9901      	ldr	r1, [sp, #4]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005ad6:	6019      	str	r1, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ade:	4633      	mov	r3, r6
 8005ae0:	f7ff ff2c 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1e0      	bne.n	8005aaa <I2C_MasterRequestRead+0x5e>
    {
      return HAL_TIMEOUT;
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	f047 03f1 	orr.w	r3, r7, #241	; 0xf1
 8005aee:	6113      	str	r3, [r2, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8005af0:	4620      	mov	r0, r4
 8005af2:	4905      	ldr	r1, [pc, #20]	; (8005b08 <I2C_MasterRequestRead+0xbc>)
 8005af4:	4632      	mov	r2, r6
 8005af6:	f7ff fee2 	bl	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d1d0      	bne.n	8005aa0 <I2C_MasterRequestRead+0x54>
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 8005afe:	b003      	add	sp, #12
 8005b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	00010008 	.word	0x00010008
 8005b08:	00010002 	.word	0x00010002

08005b0c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8005b0e:	4604      	mov	r4, r0
 8005b10:	2800      	cmp	r0, #0
 8005b12:	f000 80bb 	beq.w	8005c8c <HAL_I2C_Init+0x180>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005b16:	6803      	ldr	r3, [r0, #0]
 8005b18:	4a5d      	ldr	r2, [pc, #372]	; (8005c90 <HAL_I2C_Init+0x184>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00c      	beq.n	8005b38 <HAL_I2C_Init+0x2c>
 8005b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d008      	beq.n	8005b38 <HAL_I2C_Init+0x2c>
 8005b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_I2C_Init+0x2c>
 8005b2e:	4859      	ldr	r0, [pc, #356]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005b30:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005b34:	f7fc fa14 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005b38:	6863      	ldr	r3, [r4, #4]
 8005b3a:	4a57      	ldr	r2, [pc, #348]	; (8005c98 <HAL_I2C_Init+0x18c>)
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d904      	bls.n	8005b4c <HAL_I2C_Init+0x40>
 8005b42:	4854      	ldr	r0, [pc, #336]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005b44:	f240 112d 	movw	r1, #301	; 0x12d
 8005b48:	f7fc fa0a 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005b4c:	68a3      	ldr	r3, [r4, #8]
 8005b4e:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8005b52:	d004      	beq.n	8005b5e <HAL_I2C_Init+0x52>
 8005b54:	484f      	ldr	r0, [pc, #316]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005b56:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8005b5a:	f7fc fa01 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	b123      	cbz	r3, 8005b74 <HAL_I2C_Init+0x68>
 8005b6a:	484a      	ldr	r0, [pc, #296]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005b6c:	f240 112f 	movw	r1, #303	; 0x12f
 8005b70:	f7fc f9f6 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005b74:	6923      	ldr	r3, [r4, #16]
 8005b76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b7e:	d004      	beq.n	8005b8a <HAL_I2C_Init+0x7e>
 8005b80:	4844      	ldr	r0, [pc, #272]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005b82:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005b86:	f7fc f9eb 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005b8a:	6963      	ldr	r3, [r4, #20]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d904      	bls.n	8005b9a <HAL_I2C_Init+0x8e>
 8005b90:	4840      	ldr	r0, [pc, #256]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005b92:	f240 1131 	movw	r1, #305	; 0x131
 8005b96:	f7fc f9e3 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005b9a:	69a3      	ldr	r3, [r4, #24]
 8005b9c:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8005ba0:	d004      	beq.n	8005bac <HAL_I2C_Init+0xa0>
 8005ba2:	483c      	ldr	r0, [pc, #240]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005ba4:	f44f 7199 	mov.w	r1, #306	; 0x132
 8005ba8:	f7fc f9da 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005bac:	69e3      	ldr	r3, [r4, #28]
 8005bae:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8005bb2:	d004      	beq.n	8005bbe <HAL_I2C_Init+0xb2>
 8005bb4:	4837      	ldr	r0, [pc, #220]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005bb6:	f240 1133 	movw	r1, #307	; 0x133
 8005bba:	f7fc f9d1 	bl	8001f60 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005bbe:	6a23      	ldr	r3, [r4, #32]
 8005bc0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005bc4:	d004      	beq.n	8005bd0 <HAL_I2C_Init+0xc4>
 8005bc6:	4833      	ldr	r0, [pc, #204]	; (8005c94 <HAL_I2C_Init+0x188>)
 8005bc8:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005bcc:	f7fc f9c8 	bl	8001f60 <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8005bd0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005bd4:	b913      	cbnz	r3, 8005bdc <HAL_I2C_Init+0xd0>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7fc fbc0 	bl	800235c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bdc:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005bde:	4d2f      	ldr	r5, [pc, #188]	; (8005c9c <HAL_I2C_Init+0x190>)
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be6:	6813      	ldr	r3, [r2, #0]
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bee:	f7fe ff1b 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005bf2:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8005bf4:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bf6:	492a      	ldr	r1, [pc, #168]	; (8005ca0 <HAL_I2C_Init+0x194>)
 8005bf8:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	462e      	mov	r6, r5
 8005c00:	bf88      	it	hi
 8005c02:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8005c06:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005c08:	bf82      	ittt	hi
 8005c0a:	4369      	mulhi	r1, r5
 8005c0c:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8005c10:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005c14:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8005c16:	f101 0101 	add.w	r1, r1, #1
 8005c1a:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005c1c:	d808      	bhi.n	8005c30 <HAL_I2C_Init+0x124>
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c24:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	bf98      	it	ls
 8005c2c:	2004      	movls	r0, #4
 8005c2e:	e016      	b.n	8005c5e <HAL_I2C_Init+0x152>
 8005c30:	68a1      	ldr	r1, [r4, #8]
 8005c32:	b949      	cbnz	r1, 8005c48 <HAL_I2C_Init+0x13c>
 8005c34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c38:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c3c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005c40:	b163      	cbz	r3, 8005c5c <HAL_I2C_Init+0x150>
 8005c42:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005c46:	e00a      	b.n	8005c5e <HAL_I2C_Init+0x152>
 8005c48:	2119      	movs	r1, #25
 8005c4a:	434b      	muls	r3, r1
 8005c4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c50:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005c54:	b113      	cbz	r3, 8005c5c <HAL_I2C_Init+0x150>
 8005c56:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8005c5a:	e000      	b.n	8005c5e <HAL_I2C_Init+0x152>
 8005c5c:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c5e:	6a21      	ldr	r1, [r4, #32]
 8005c60:	69e3      	ldr	r3, [r4, #28]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8005c62:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c64:	430b      	orrs	r3, r1
 8005c66:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8005c68:	68e1      	ldr	r1, [r4, #12]
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8005c70:	69a1      	ldr	r1, [r4, #24]
 8005c72:	6963      	ldr	r3, [r4, #20]
 8005c74:	430b      	orrs	r3, r1
 8005c76:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c78:	6813      	ldr	r3, [r2, #0]
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c80:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	2301      	movs	r3, #1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c84:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8005c8c:	2001      	movs	r0, #1

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;

  return HAL_OK;
}
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	40005400 	.word	0x40005400
 8005c94:	0802925d 	.word	0x0802925d
 8005c98:	00061a7f 	.word	0x00061a7f
 8005c9c:	000186a0 	.word	0x000186a0
 8005ca0:	000f4240 	.word	0x000f4240

08005ca4 <HAL_I2C_Master_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005ca8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005cac:	b2e4      	uxtb	r4, r4
 8005cae:	2c01      	cmp	r4, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	4617      	mov	r7, r2
 8005cb4:	461e      	mov	r6, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005cb6:	d15e      	bne.n	8005d76 <HAL_I2C_Master_Transmit+0xd2>
  {
    if((pData == NULL) || (Size == 0))
 8005cb8:	2a00      	cmp	r2, #0
 8005cba:	d05a      	beq.n	8005d72 <HAL_I2C_Master_Transmit+0xce>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d058      	beq.n	8005d72 <HAL_I2C_Master_Transmit+0xce>
    {
      return  HAL_ERROR;
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005cc0:	6803      	ldr	r3, [r0, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f013 0802 	ands.w	r8, r3, #2
 8005cc8:	d155      	bne.n	8005d76 <HAL_I2C_Master_Transmit+0xd2>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cca:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d051      	beq.n	8005d76 <HAL_I2C_Master_Transmit+0xd2>

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8005cd2:	2312      	movs	r3, #18
 8005cd4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cdc:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
 8005ce0:	9a08      	ldr	r2, [sp, #32]
 8005ce2:	f7ff fe77 	bl	80059d4 <I2C_MasterRequestWrite>
 8005ce6:	b128      	cbz	r0, 8005cf4 <HAL_I2C_Master_Transmit+0x50>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce8:	6bab      	ldr	r3, [r5, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cea:	f885 8034 	strb.w	r8, [r5, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d10d      	bne.n	8005d0e <HAL_I2C_Master_Transmit+0x6a>
 8005cf2:	e03e      	b.n	8005d72 <HAL_I2C_Master_Transmit+0xce>
        return HAL_TIMEOUT;
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	9201      	str	r2, [sp, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	9b01      	ldr	r3, [sp, #4]

    while(Size > 0)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005d00:	491f      	ldr	r1, [pc, #124]	; (8005d80 <HAL_I2C_Master_Transmit+0xdc>)
 8005d02:	9b08      	ldr	r3, [sp, #32]
 8005d04:	4628      	mov	r0, r5
 8005d06:	2200      	movs	r2, #0
 8005d08:	f7ff fe18 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	b108      	cbz	r0, 8005d12 <HAL_I2C_Master_Transmit+0x6e>
      {
        return HAL_TIMEOUT;
 8005d0e:	2003      	movs	r0, #3
 8005d10:	e032      	b.n	8005d78 <HAL_I2C_Master_Transmit+0xd4>
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 8005d12:	682a      	ldr	r2, [r5, #0]
 8005d14:	783b      	ldrb	r3, [r7, #0]
 8005d16:	6113      	str	r3, [r2, #16]
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8005d18:	6951      	ldr	r1, [r2, #20]
        return HAL_TIMEOUT;
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
      Size--;
 8005d1a:	1e73      	subs	r3, r6, #1

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8005d1c:	0749      	lsls	r1, r1, #29
        return HAL_TIMEOUT;
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
      Size--;
 8005d1e:	b29b      	uxth	r3, r3

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8005d20:	d402      	bmi.n	8005d28 <HAL_I2C_Master_Transmit+0x84>
      {
        return HAL_TIMEOUT;
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 8005d22:	3701      	adds	r7, #1
      Size--;
 8005d24:	461e      	mov	r6, r3
 8005d26:	e00e      	b.n	8005d46 <HAL_I2C_Master_Transmit+0xa2>

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8005d28:	b943      	cbnz	r3, 8005d3c <HAL_I2C_Master_Transmit+0x98>
        Size--;
      }
    }

    /* Wait until TXE flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	4914      	ldr	r1, [pc, #80]	; (8005d80 <HAL_I2C_Master_Transmit+0xdc>)
 8005d2e:	9b08      	ldr	r3, [sp, #32]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f7ff fe03 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1e9      	bne.n	8005d0e <HAL_I2C_Master_Transmit+0x6a>
 8005d3a:	e007      	b.n	8005d4c <HAL_I2C_Master_Transmit+0xa8>
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 8005d3c:	787b      	ldrb	r3, [r7, #1]
 8005d3e:	6113      	str	r3, [r2, #16]
        Size--;
 8005d40:	3e02      	subs	r6, #2
 8005d42:	b2b6      	uxth	r6, r6
      Size--;

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 8005d44:	3702      	adds	r7, #2
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    while(Size > 0)
 8005d46:	2e00      	cmp	r6, #0
 8005d48:	d1da      	bne.n	8005d00 <HAL_I2C_Master_Transmit+0x5c>
 8005d4a:	e7ee      	b.n	8005d2a <HAL_I2C_Master_Transmit+0x86>
    {
      return HAL_TIMEOUT;
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005d4c:	682a      	ldr	r2, [r5, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8005d4e:	490d      	ldr	r1, [pc, #52]	; (8005d84 <HAL_I2C_Master_Transmit+0xe0>)
    {
      return HAL_TIMEOUT;
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005d50:	6813      	ldr	r3, [r2, #0]
 8005d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d56:	6013      	str	r3, [r2, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8005d58:	4628      	mov	r0, r5
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	9b08      	ldr	r3, [sp, #32]
 8005d5e:	f7ff fded 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d1d3      	bne.n	8005d0e <HAL_I2C_Master_Transmit+0x6a>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34

    return HAL_OK;
 8005d70:	e002      	b.n	8005d78 <HAL_I2C_Master_Transmit+0xd4>
{
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 8005d72:	4620      	mov	r0, r4
 8005d74:	e000      	b.n	8005d78 <HAL_I2C_Master_Transmit+0xd4>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2002      	movs	r0, #2
  }
}
 8005d78:	b002      	add	sp, #8
 8005d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d7e:	bf00      	nop
 8005d80:	00010080 	.word	0x00010080
 8005d84:	00100002 	.word	0x00100002

08005d88 <HAL_I2C_Master_Receive>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005d8c:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 8005d90:	b2ed      	uxtb	r5, r5
 8005d92:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d94:	4604      	mov	r4, r0
 8005d96:	4617      	mov	r7, r2
 8005d98:	461e      	mov	r6, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005d9a:	f040 80a9 	bne.w	8005ef0 <HAL_I2C_Master_Receive+0x168>
  {
    if((pData == NULL) || (Size == 0))
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	f000 80a4 	beq.w	8005eec <HAL_I2C_Master_Receive+0x164>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80a1 	beq.w	8005eec <HAL_I2C_Master_Receive+0x164>
    {
      return  HAL_ERROR;
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005daa:	6803      	ldr	r3, [r0, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f013 0802 	ands.w	r8, r3, #2
 8005db2:	f040 809d 	bne.w	8005ef0 <HAL_I2C_Master_Receive+0x168>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	f000 8098 	beq.w	8005ef0 <HAL_I2C_Master_Receive+0x168>

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8005dc0:	2322      	movs	r3, #34	; 0x22
 8005dc2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dca:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout) != HAL_OK)
 8005dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dd0:	f7ff fe3c 	bl	8005a4c <I2C_MasterRequestRead>
 8005dd4:	b128      	cbz	r0, 8005de2 <HAL_I2C_Master_Receive+0x5a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd8:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout) != HAL_OK)
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d133      	bne.n	8005e48 <HAL_I2C_Master_Receive+0xc0>
 8005de0:	e084      	b.n	8005eec <HAL_I2C_Master_Receive+0x164>
 8005de2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(Size == 1)
 8005de4:	2e01      	cmp	r6, #1
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005de6:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }

    if(Size == 1)
 8005de8:	d10c      	bne.n	8005e04 <HAL_I2C_Master_Receive+0x7c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dee:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	9201      	str	r2, [sp, #4]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	9201      	str	r2, [sp, #4]
 8005df8:	9a01      	ldr	r2, [sp, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e016      	b.n	8005e32 <HAL_I2C_Master_Receive+0xaa>
    }
    else if(Size == 2)
 8005e04:	2e02      	cmp	r6, #2
 8005e06:	d10c      	bne.n	8005e22 <HAL_I2C_Master_Receive+0x9a>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	9202      	str	r2, [sp, #8]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	e007      	b.n	8005e32 <HAL_I2C_Master_Receive+0xaa>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8005e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e26:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	9203      	str	r2, [sp, #12]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	9303      	str	r3, [sp, #12]
 8005e30:	9b03      	ldr	r3, [sp, #12]
    }

    while(Size > 0)
    {
      if(Size <= 3)
 8005e32:	2e03      	cmp	r6, #3
      {
        /* One byte */
        if(Size == 1)
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005e34:	4620      	mov	r0, r4
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }

    while(Size > 0)
    {
      if(Size <= 3)
 8005e36:	d840      	bhi.n	8005eba <HAL_I2C_Master_Receive+0x132>
      {
        /* One byte */
        if(Size == 1)
 8005e38:	2e01      	cmp	r6, #1
 8005e3a:	d10b      	bne.n	8005e54 <HAL_I2C_Master_Receive+0xcc>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005e3c:	4938      	ldr	r1, [pc, #224]	; (8005f20 <HAL_I2C_Master_Receive+0x198>)
 8005e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e40:	2200      	movs	r2, #0
 8005e42:	f7ff fd7b 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005e46:	b108      	cbz	r0, 8005e4c <HAL_I2C_Master_Receive+0xc4>
          {
            return HAL_TIMEOUT;
 8005e48:	2003      	movs	r0, #3
 8005e4a:	e065      	b.n	8005f18 <HAL_I2C_Master_Receive+0x190>
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	703b      	strb	r3, [r7, #0]
 8005e52:	e04f      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x16c>
          Size--;
        }
        /* Two bytes */
        else if(Size == 2)
 8005e54:	2e02      	cmp	r6, #2
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005e56:	4933      	ldr	r1, [pc, #204]	; (8005f24 <HAL_I2C_Master_Receive+0x19c>)
 8005e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5a:	f04f 0200 	mov.w	r2, #0
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
          Size--;
        }
        /* Two bytes */
        else if(Size == 2)
 8005e5e:	d10e      	bne.n	8005e7e <HAL_I2C_Master_Receive+0xf6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005e60:	f7ff fd6c 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d1ef      	bne.n	8005e48 <HAL_I2C_Master_Receive+0xc0>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e70:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	703b      	strb	r3, [r7, #0]
          Size--;

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	707b      	strb	r3, [r7, #1]
 8005e7c:	e03a      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x16c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005e7e:	f7ff fd5d 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4602      	mov	r2, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d1df      	bne.n	8005e48 <HAL_I2C_Master_Receive+0xc0>
          {
            return HAL_TIMEOUT;
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e90:	6019      	str	r1, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	703b      	strb	r3, [r7, #0]
          Size--;

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8005e96:	4620      	mov	r0, r4
 8005e98:	4922      	ldr	r1, [pc, #136]	; (8005f24 <HAL_I2C_Master_Receive+0x19c>)
 8005e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e9c:	f7ff fd4e 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d1d1      	bne.n	8005e48 <HAL_I2C_Master_Receive+0xc0>
          {
            return HAL_TIMEOUT;
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eac:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	707b      	strb	r3, [r7, #1]
          Size--;

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	70bb      	strb	r3, [r7, #2]
 8005eb8:	e01c      	b.n	8005ef4 <HAL_I2C_Master_Receive+0x16c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005eba:	4919      	ldr	r1, [pc, #100]	; (8005f20 <HAL_I2C_Master_Receive+0x198>)
 8005ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f7ff fd3c 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1bf      	bne.n	8005e48 <HAL_I2C_Master_Receive+0xc0>
        {
          return HAL_TIMEOUT;
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	703b      	strb	r3, [r7, #0]
        Size--;

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	6953      	ldr	r3, [r2, #20]
 8005ed2:	075b      	lsls	r3, r3, #29
        {
          return HAL_TIMEOUT;
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 8005ed4:	bf59      	ittee	pl
 8005ed6:	1c7b      	addpl	r3, r7, #1
        Size--;
 8005ed8:	f106 36ff 	addpl.w	r6, r6, #4294967295

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8005edc:	1cbb      	addmi	r3, r7, #2
 8005ede:	6912      	ldrmi	r2, [r2, #16]
 8005ee0:	bf44      	itt	mi
 8005ee2:	707a      	strbmi	r2, [r7, #1]
          Size--;
 8005ee4:	3e02      	submi	r6, #2
 8005ee6:	b2b6      	uxth	r6, r6
 8005ee8:	461f      	mov	r7, r3
 8005eea:	e7a2      	b.n	8005e32 <HAL_I2C_Master_Receive+0xaa>
{
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 8005eec:	4628      	mov	r0, r5
 8005eee:	e013      	b.n	8005f18 <HAL_I2C_Master_Receive+0x190>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2002      	movs	r0, #2
 8005ef2:	e011      	b.n	8005f18 <HAL_I2C_Master_Receive+0x190>
        }
      }
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ef4:	6822      	ldr	r2, [r4, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8005ef6:	490c      	ldr	r1, [pc, #48]	; (8005f28 <HAL_I2C_Master_Receive+0x1a0>)
        }
      }
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ef8:	6813      	ldr	r3, [r2, #0]
 8005efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005efe:	6013      	str	r3, [r2, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8005f00:	4620      	mov	r0, r4
 8005f02:	2201      	movs	r2, #1
 8005f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f06:	f7ff fd19 	bl	800593c <I2C_WaitOnFlagUntilTimeout>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d19c      	bne.n	8005e48 <HAL_I2C_Master_Receive+0xc0>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f14:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005f18:	b004      	add	sp, #16
 8005f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f1e:	bf00      	nop
 8005f20:	00010040 	.word	0x00010040
 8005f24:	00010004 	.word	0x00010004
 8005f28:	00100002 	.word	0x00100002

08005f2c <HAL_I2C_GetState>:
  *         the configuration information for I2C module
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 8005f2c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8005f30:	4770      	bx	lr
	...

08005f34 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005f34:	1ec3      	subs	r3, r0, #3
 8005f36:	2b04      	cmp	r3, #4
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005f3c:	d903      	bls.n	8005f46 <HAL_NVIC_SetPriorityGrouping+0x12>
 8005f3e:	4809      	ldr	r0, [pc, #36]	; (8005f64 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8005f40:	21a4      	movs	r1, #164	; 0xa4
 8005f42:	f7fc f80d 	bl	8001f60 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8005f48:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8005f4a:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f4e:	400b      	ands	r3, r1
 8005f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8005f58:	f004 0407 	and.w	r4, r4, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8005f5c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005f60:	60d3      	str	r3, [r2, #12]
 8005f62:	bd10      	pop	{r4, pc}
 8005f64:	080292ac 	.word	0x080292ac
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005f6c:	2a0f      	cmp	r2, #15
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f6e:	b570      	push	{r4, r5, r6, lr}
 8005f70:	4605      	mov	r5, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005f76:	d903      	bls.n	8005f80 <HAL_NVIC_SetPriority+0x14>
 8005f78:	481a      	ldr	r0, [pc, #104]	; (8005fe4 <HAL_NVIC_SetPriority+0x78>)
 8005f7a:	21bc      	movs	r1, #188	; 0xbc
 8005f7c:	f7fb fff0 	bl	8001f60 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005f80:	2c0f      	cmp	r4, #15
 8005f82:	d903      	bls.n	8005f8c <HAL_NVIC_SetPriority+0x20>
 8005f84:	4817      	ldr	r0, [pc, #92]	; (8005fe4 <HAL_NVIC_SetPriority+0x78>)
 8005f86:	21bd      	movs	r1, #189	; 0xbd
 8005f88:	f7fb ffea 	bl	8001f60 <assert_failed>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8005f8c:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <HAL_NVIC_SetPriority+0x7c>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8005f94:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8005f98:	1d19      	adds	r1, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8005f9a:	2a04      	cmp	r2, #4
 8005f9c:	bf28      	it	cs
 8005f9e:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8005fa0:	2906      	cmp	r1, #6
 8005fa2:	bf8c      	ite	hi
 8005fa4:	3b03      	subhi	r3, #3
 8005fa6:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8005fa8:	2101      	movs	r1, #1
 8005faa:	fa01 f003 	lsl.w	r0, r1, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8005fae:	4091      	lsls	r1, r2
 8005fb0:	3901      	subs	r1, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8005fb2:	3801      	subs	r0, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8005fb4:	400c      	ands	r4, r1
 8005fb6:	409c      	lsls	r4, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8005fb8:	4006      	ands	r6, r0
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8005fba:	2d00      	cmp	r5, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8005fbc:	ea44 0406 	orr.w	r4, r4, r6
 8005fc0:	ea4f 1404 	mov.w	r4, r4, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005fc4:	bfaf      	iteee	ge
 8005fc6:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005fca:	f005 050f 	andlt.w	r5, r5, #15
 8005fce:	4b07      	ldrlt	r3, [pc, #28]	; (8005fec <HAL_NVIC_SetPriority+0x80>)
 8005fd0:	b2e4      	uxtblt	r4, r4
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005fd2:	bfa5      	ittet	ge
 8005fd4:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
 8005fd8:	b2e4      	uxtbge	r4, r4
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005fda:	555c      	strblt	r4, [r3, r5]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005fdc:	f885 4300 	strbge.w	r4, [r5, #768]	; 0x300
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	bf00      	nop
 8005fe4:	080292ac 	.word	0x080292ac
 8005fe8:	e000ed00 	.word	0xe000ed00
 8005fec:	e000ed14 	.word	0xe000ed14

08005ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ff0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005ff2:	1e04      	subs	r4, r0, #0
 8005ff4:	da03      	bge.n	8005ffe <HAL_NVIC_EnableIRQ+0xe>
 8005ff6:	4806      	ldr	r0, [pc, #24]	; (8006010 <HAL_NVIC_EnableIRQ+0x20>)
 8005ff8:	21d0      	movs	r1, #208	; 0xd0
 8005ffa:	f7fb ffb1 	bl	8001f60 <assert_failed>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8005ffe:	0961      	lsrs	r1, r4, #5
 8006000:	2301      	movs	r3, #1
 8006002:	f004 041f 	and.w	r4, r4, #31
 8006006:	4a03      	ldr	r2, [pc, #12]	; (8006014 <HAL_NVIC_EnableIRQ+0x24>)
 8006008:	40a3      	lsls	r3, r4
 800600a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800600e:	bd10      	pop	{r4, pc}
 8006010:	080292ac 	.word	0x080292ac
 8006014:	e000e100 	.word	0xe000e100

08006018 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8006018:	3801      	subs	r0, #1
 800601a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800601e:	bf3f      	itttt	cc
 8006020:	4b06      	ldrcc	r3, [pc, #24]	; (800603c <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006022:	4a07      	ldrcc	r2, [pc, #28]	; (8006040 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8006024:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006026:	21f0      	movcc	r1, #240	; 0xf0
 8006028:	bf3f      	itttt	cc
 800602a:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800602e:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006030:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8006032:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006034:	bf34      	ite	cc
 8006036:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8006038:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800603a:	4770      	bx	lr
 800603c:	e000e010 	.word	0xe000e010
 8006040:	e000ed00 	.word	0xe000ed00

08006044 <FMC_NORSRAM_Init>:
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 8006044:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	4605      	mov	r5, r0
 800604c:	460c      	mov	r4, r1
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 800604e:	d003      	beq.n	8006058 <FMC_NORSRAM_Init+0x14>
 8006050:	4856      	ldr	r0, [pc, #344]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 8006052:	219b      	movs	r1, #155	; 0x9b
 8006054:	f7fb ff84 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_NORSRAM_BANK(Init->NSBank));
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	f033 0306 	bics.w	r3, r3, #6
 800605e:	d003      	beq.n	8006068 <FMC_NORSRAM_Init+0x24>
 8006060:	4852      	ldr	r0, [pc, #328]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 8006062:	219c      	movs	r1, #156	; 0x9c
 8006064:	f7fb ff7c 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_MUX(Init->DataAddressMux));
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	f033 0302 	bics.w	r3, r3, #2
 800606e:	d003      	beq.n	8006078 <FMC_NORSRAM_Init+0x34>
 8006070:	484e      	ldr	r0, [pc, #312]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 8006072:	219d      	movs	r1, #157	; 0x9d
 8006074:	f7fb ff74 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_MEMORY(Init->MemoryType));
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	f033 0204 	bics.w	r2, r3, #4
 800607e:	d005      	beq.n	800608c <FMC_NORSRAM_Init+0x48>
 8006080:	2b08      	cmp	r3, #8
 8006082:	d003      	beq.n	800608c <FMC_NORSRAM_Init+0x48>
 8006084:	4849      	ldr	r0, [pc, #292]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 8006086:	219e      	movs	r1, #158	; 0x9e
 8006088:	f7fb ff6a 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_NORSRAM_MEMORY_WIDTH(Init->MemoryDataWidth));
 800608c:	68e3      	ldr	r3, [r4, #12]
 800608e:	f033 0210 	bics.w	r2, r3, #16
 8006092:	d005      	beq.n	80060a0 <FMC_NORSRAM_Init+0x5c>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d003      	beq.n	80060a0 <FMC_NORSRAM_Init+0x5c>
 8006098:	4844      	ldr	r0, [pc, #272]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 800609a:	219f      	movs	r1, #159	; 0x9f
 800609c:	f7fb ff60 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_BURSTMODE(Init->BurstAccessMode));
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80060a6:	d003      	beq.n	80060b0 <FMC_NORSRAM_Init+0x6c>
 80060a8:	4840      	ldr	r0, [pc, #256]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 80060aa:	21a0      	movs	r1, #160	; 0xa0
 80060ac:	f7fb ff58 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_WAIT_POLARITY(Init->WaitSignalPolarity));
 80060b0:	6963      	ldr	r3, [r4, #20]
 80060b2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80060b6:	d003      	beq.n	80060c0 <FMC_NORSRAM_Init+0x7c>
 80060b8:	483c      	ldr	r0, [pc, #240]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 80060ba:	21a1      	movs	r1, #161	; 0xa1
 80060bc:	f7fb ff50 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_WRAP_MODE(Init->WrapMode));
 80060c0:	69a3      	ldr	r3, [r4, #24]
 80060c2:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80060c6:	d003      	beq.n	80060d0 <FMC_NORSRAM_Init+0x8c>
 80060c8:	4838      	ldr	r0, [pc, #224]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 80060ca:	21a2      	movs	r1, #162	; 0xa2
 80060cc:	f7fb ff48 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_WAIT_SIGNAL_ACTIVE(Init->WaitSignalActive));
 80060d0:	69e3      	ldr	r3, [r4, #28]
 80060d2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80060d6:	d003      	beq.n	80060e0 <FMC_NORSRAM_Init+0x9c>
 80060d8:	4834      	ldr	r0, [pc, #208]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 80060da:	21a3      	movs	r1, #163	; 0xa3
 80060dc:	f7fb ff40 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_WRITE_OPERATION(Init->WriteOperation));
 80060e0:	6a23      	ldr	r3, [r4, #32]
 80060e2:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80060e6:	d003      	beq.n	80060f0 <FMC_NORSRAM_Init+0xac>
 80060e8:	4830      	ldr	r0, [pc, #192]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 80060ea:	21a4      	movs	r1, #164	; 0xa4
 80060ec:	f7fb ff38 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_WAITE_SIGNAL(Init->WaitSignal));
 80060f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f2:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80060f6:	d003      	beq.n	8006100 <FMC_NORSRAM_Init+0xbc>
 80060f8:	482c      	ldr	r0, [pc, #176]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 80060fa:	21a5      	movs	r1, #165	; 0xa5
 80060fc:	f7fb ff30 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_EXTENDED_MODE(Init->ExtendedMode));
 8006100:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006102:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8006106:	d003      	beq.n	8006110 <FMC_NORSRAM_Init+0xcc>
 8006108:	4828      	ldr	r0, [pc, #160]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 800610a:	21a6      	movs	r1, #166	; 0xa6
 800610c:	f7fb ff28 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_ASYNWAIT(Init->AsynchronousWait));
 8006110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006112:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8006116:	d003      	beq.n	8006120 <FMC_NORSRAM_Init+0xdc>
 8006118:	4824      	ldr	r0, [pc, #144]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 800611a:	21a7      	movs	r1, #167	; 0xa7
 800611c:	f7fb ff20 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_WRITE_BURST(Init->WriteBurst));
 8006120:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006122:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8006126:	d003      	beq.n	8006130 <FMC_NORSRAM_Init+0xec>
 8006128:	4820      	ldr	r0, [pc, #128]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 800612a:	21a8      	movs	r1, #168	; 0xa8
 800612c:	f7fb ff18 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock)); 
 8006130:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006132:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8006136:	d003      	beq.n	8006140 <FMC_NORSRAM_Init+0xfc>
 8006138:	481c      	ldr	r0, [pc, #112]	; (80061ac <FMC_NORSRAM_Init+0x168>)
 800613a:	21a9      	movs	r1, #169	; 0xa9
 800613c:	f7fb ff10 	bl	8001f60 <assert_failed>
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006140:	6821      	ldr	r1, [r4, #0]

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8006142:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <FMC_NORSRAM_Init+0x16c>)
  assert_param(IS_FMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock)); 
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006144:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                    Init->MemoryType           |\
 8006148:	68a7      	ldr	r7, [r4, #8]
                    Init->WriteOperation       |\
                    Init->WaitSignal           |\
                    Init->ExtendedMode         |\
                    Init->AsynchronousWait     |\
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
 800614a:	6b66      	ldr	r6, [r4, #52]	; 0x34
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 800614c:	401a      	ands	r2, r3
                       FMC_BCR1_WAITPOL   | FMC_BCR1_WRAPMOD  | FMC_BCR1_WAITCFG  | \
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800614e:	6863      	ldr	r3, [r4, #4]
 8006150:	ea47 0003 	orr.w	r0, r7, r3
                    Init->MemoryType           |\
 8006154:	68e3      	ldr	r3, [r4, #12]
 8006156:	4318      	orrs	r0, r3
                    Init->MemoryDataWidth      |\
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	4318      	orrs	r0, r3
                    Init->BurstAccessMode      |\
 800615c:	6963      	ldr	r3, [r4, #20]
 800615e:	4318      	orrs	r0, r3
                    Init->WaitSignalPolarity   |\
 8006160:	69a3      	ldr	r3, [r4, #24]
 8006162:	4318      	orrs	r0, r3
                    Init->WrapMode             |\
 8006164:	69e3      	ldr	r3, [r4, #28]
 8006166:	4318      	orrs	r0, r3
                    Init->WaitSignalActive     |\
 8006168:	6a23      	ldr	r3, [r4, #32]
 800616a:	4318      	orrs	r0, r3
                    Init->WriteOperation       |\
 800616c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800616e:	4318      	orrs	r0, r3
                    Init->WaitSignal           |\
 8006170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006172:	4318      	orrs	r0, r3
                    Init->ExtendedMode         |\
 8006174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006176:	4318      	orrs	r0, r3
                    Init->AsynchronousWait     |\
 8006178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800617a:	4303      	orrs	r3, r0
                       FMC_BCR1_WAITPOL   | FMC_BCR1_WRAPMOD  | FMC_BCR1_WAITCFG  | \
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800617c:	4333      	orrs	r3, r6
 800617e:	4313      	orrs	r3, r2
                    Init->ExtendedMode         |\
                    Init->AsynchronousWait     |\
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006180:	2f08      	cmp	r7, #8
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006182:	bf08      	it	eq
 8006184:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  
  Device->BTCR[Init->NSBank] = tmpr;

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006188:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 800618c:	f845 3021 	str.w	r3, [r5, r1, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006190:	d109      	bne.n	80061a6 <FMC_NORSRAM_Init+0x162>
 8006192:	b141      	cbz	r1, 80061a6 <FMC_NORSRAM_Init+0x162>
  { 
    Init->BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE; 
 8006194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006198:	6123      	str	r3, [r4, #16]
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->BurstAccessMode  |\
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	602b      	str	r3, [r5, #0]
                                                  Init->ContinuousClock);                    
  }                       
  
  return HAL_OK;
}
 80061a6:	2000      	movs	r0, #0
 80061a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061aa:	bf00      	nop
 80061ac:	080292fe 	.word	0x080292fe
 80061b0:	ffe70080 	.word	0xffe70080

080061b4 <FMC_NORSRAM_Timing_Init>:
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 80061b4:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 80061c0:	d004      	beq.n	80061cc <FMC_NORSRAM_Timing_Init+0x18>
 80061c2:	4838      	ldr	r0, [pc, #224]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 80061c4:	f240 1107 	movw	r1, #263	; 0x107
 80061c8:	f7fb feca 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	d904      	bls.n	80061dc <FMC_NORSRAM_Timing_Init+0x28>
 80061d2:	4834      	ldr	r0, [pc, #208]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 80061d4:	f44f 7184 	mov.w	r1, #264	; 0x108
 80061d8:	f7fb fec2 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	3b01      	subs	r3, #1
 80061e0:	2b0e      	cmp	r3, #14
 80061e2:	d904      	bls.n	80061ee <FMC_NORSRAM_Timing_Init+0x3a>
 80061e4:	482f      	ldr	r0, [pc, #188]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 80061e6:	f240 1109 	movw	r1, #265	; 0x109
 80061ea:	f7fb feb9 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_DATASETUP_TIME(Timing->DataSetupTime));
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	2bfe      	cmp	r3, #254	; 0xfe
 80061f4:	d904      	bls.n	8006200 <FMC_NORSRAM_Timing_Init+0x4c>
 80061f6:	482b      	ldr	r0, [pc, #172]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 80061f8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80061fc:	f7fb feb0 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8006200:	68e3      	ldr	r3, [r4, #12]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d904      	bls.n	8006210 <FMC_NORSRAM_Timing_Init+0x5c>
 8006206:	4827      	ldr	r0, [pc, #156]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 8006208:	f240 110b 	movw	r1, #267	; 0x10b
 800620c:	f7fb fea8 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_CLK_DIV(Timing->CLKDivision));
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	3b01      	subs	r3, #1
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d904      	bls.n	8006222 <FMC_NORSRAM_Timing_Init+0x6e>
 8006218:	4822      	ldr	r0, [pc, #136]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 800621a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800621e:	f7fb fe9f 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
 8006222:	6963      	ldr	r3, [r4, #20]
 8006224:	3b01      	subs	r3, #1
 8006226:	2b10      	cmp	r3, #16
 8006228:	d904      	bls.n	8006234 <FMC_NORSRAM_Timing_Init+0x80>
 800622a:	481e      	ldr	r0, [pc, #120]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 800622c:	f240 110d 	movw	r1, #269	; 0x10d
 8006230:	f7fb fe96 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
 8006234:	69a3      	ldr	r3, [r4, #24]
 8006236:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800623a:	d004      	beq.n	8006246 <FMC_NORSRAM_Timing_Init+0x92>
 800623c:	4819      	ldr	r0, [pc, #100]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 800623e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006242:	f7fb fe8d 	bl	8001f60 <assert_failed>
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
 8006246:	f036 0306 	bics.w	r3, r6, #6
 800624a:	d004      	beq.n	8006256 <FMC_NORSRAM_Timing_Init+0xa2>
 800624c:	4815      	ldr	r0, [pc, #84]	; (80062a4 <FMC_NORSRAM_Timing_Init+0xf0>)
 800624e:	f240 110f 	movw	r1, #271	; 0x10f
 8006252:	f7fb fe85 	bl	8001f60 <assert_failed>
 8006256:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 800625a:	69a1      	ldr	r1, [r4, #24]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];
 800625c:	6853      	ldr	r3, [r2, #4]
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
 800625e:	6920      	ldr	r0, [r4, #16]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8006260:	f003 4640 	and.w	r6, r3, #3221225472	; 0xc0000000
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	430b      	orrs	r3, r1
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
 8006268:	6861      	ldr	r1, [r4, #4]
 800626a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
                    ((Timing->DataSetupTime) << 8)            |\
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16)   |\
 8006274:	68e3      	ldr	r3, [r4, #12]
                    (((Timing->CLKDivision)-1) << 20)         |\
 8006276:	3801      	subs	r0, #1
 8006278:	0500      	lsls	r0, r0, #20
 800627a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800627e:	ea43 0100 	orr.w	r1, r3, r0
                    (((Timing->DataLatency)-2) << 24)         |\
 8006282:	6963      	ldr	r3, [r4, #20]
 8006284:	3b02      	subs	r3, #2
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 8006286:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800628a:	4333      	orrs	r3, r6
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
                    (((Timing->DataLatency)-2) << 24)         |\
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr;
 800628c:	6053      	str	r3, [r2, #4]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	02db      	lsls	r3, r3, #11
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1] & ~(((uint32_t)0x0F) << 20)); 
 8006292:	bf41      	itttt	mi
 8006294:	686b      	ldrmi	r3, [r5, #4]
 8006296:	f423 0370 	bicmi.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1) << 20);
 800629a:	4318      	orrmi	r0, r3
    Device->BTCR[FMC_NORSRAM_BANK1 + 1] = tmpr;
 800629c:	6068      	strmi	r0, [r5, #4]
  }  
  
  return HAL_OK;   
}
 800629e:	2000      	movs	r0, #0
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
 80062a2:	bf00      	nop
 80062a4:	080292fe 	.word	0x080292fe

080062a8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4605      	mov	r5, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
 80062b0:	b13b      	cbz	r3, 80062c2 <FMC_NORSRAM_Extended_Timing_Init+0x1a>
 80062b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b6:	d00a      	beq.n	80062ce <FMC_NORSRAM_Extended_Timing_Init+0x26>
 80062b8:	4838      	ldr	r0, [pc, #224]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 80062ba:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80062be:	f7fb fe4f 	bl	8001f60 <assert_failed>

    Device->BWTR[Bank] = tmpr;
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFF;
 80062c2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80062c6:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
  }   
  
  return HAL_OK;  
}
 80062ca:	2000      	movs	r0, #0
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
  {
    /* Check the parameters */  
    assert_param(IS_FMC_NORSRAM_EXTENDED_DEVICE(Device));  
 80062ce:	4b34      	ldr	r3, [pc, #208]	; (80063a0 <FMC_NORSRAM_Extended_Timing_Init+0xf8>)
 80062d0:	4298      	cmp	r0, r3
 80062d2:	d004      	beq.n	80062de <FMC_NORSRAM_Extended_Timing_Init+0x36>
 80062d4:	4831      	ldr	r0, [pc, #196]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 80062d6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80062da:	f7fb fe41 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	2b0f      	cmp	r3, #15
 80062e2:	d904      	bls.n	80062ee <FMC_NORSRAM_Extended_Timing_Init+0x46>
 80062e4:	482d      	ldr	r0, [pc, #180]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 80062e6:	f240 1143 	movw	r1, #323	; 0x143
 80062ea:	f7fb fe39 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 80062ee:	6863      	ldr	r3, [r4, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	2b0e      	cmp	r3, #14
 80062f4:	d904      	bls.n	8006300 <FMC_NORSRAM_Extended_Timing_Init+0x58>
 80062f6:	4829      	ldr	r0, [pc, #164]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 80062f8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80062fc:	f7fb fe30 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_DATASETUP_TIME(Timing->DataSetupTime));
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	3b01      	subs	r3, #1
 8006304:	2bfe      	cmp	r3, #254	; 0xfe
 8006306:	d904      	bls.n	8006312 <FMC_NORSRAM_Extended_Timing_Init+0x6a>
 8006308:	4824      	ldr	r0, [pc, #144]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 800630a:	f240 1145 	movw	r1, #325	; 0x145
 800630e:	f7fb fe27 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8006312:	68e3      	ldr	r3, [r4, #12]
 8006314:	2b0f      	cmp	r3, #15
 8006316:	d904      	bls.n	8006322 <FMC_NORSRAM_Extended_Timing_Init+0x7a>
 8006318:	4820      	ldr	r0, [pc, #128]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 800631a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800631e:	f7fb fe1f 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_CLK_DIV(Timing->CLKDivision));
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	3b01      	subs	r3, #1
 8006326:	2b0f      	cmp	r3, #15
 8006328:	d904      	bls.n	8006334 <FMC_NORSRAM_Extended_Timing_Init+0x8c>
 800632a:	481c      	ldr	r0, [pc, #112]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 800632c:	f240 1147 	movw	r1, #327	; 0x147
 8006330:	f7fb fe16 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
 8006334:	6963      	ldr	r3, [r4, #20]
 8006336:	3b01      	subs	r3, #1
 8006338:	2b10      	cmp	r3, #16
 800633a:	d904      	bls.n	8006346 <FMC_NORSRAM_Extended_Timing_Init+0x9e>
 800633c:	4817      	ldr	r0, [pc, #92]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 800633e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006342:	f7fb fe0d 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
 8006346:	69a3      	ldr	r3, [r4, #24]
 8006348:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800634c:	d004      	beq.n	8006358 <FMC_NORSRAM_Extended_Timing_Init+0xb0>
 800634e:	4813      	ldr	r0, [pc, #76]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8006350:	f240 1149 	movw	r1, #329	; 0x149
 8006354:	f7fb fe04 	bl	8001f60 <assert_failed>
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
 8006358:	f036 0306 	bics.w	r3, r6, #6
 800635c:	d004      	beq.n	8006368 <FMC_NORSRAM_Extended_Timing_Init+0xc0>
 800635e:	480f      	ldr	r0, [pc, #60]	; (800639c <FMC_NORSRAM_Extended_Timing_Init+0xf4>)
 8006360:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006364:	f7fb fdfc 	bl	8001f60 <assert_failed>
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006368:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800636c:	69a2      	ldr	r2, [r4, #24]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_CLKDIV | FMC_BWTR1_DATLAT | \
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                      ((Timing->AddressHoldTime) << 4)          |\
                      ((Timing->DataSetupTime) << 8)            |\
 800636e:	68a1      	ldr	r1, [r4, #8]
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8006370:	f003 4040 	and.w	r0, r3, #3221225472	; 0xc0000000
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	4313      	orrs	r3, r2
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_CLKDIV | FMC_BWTR1_DATLAT | \
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                      ((Timing->AddressHoldTime) << 4)          |\
 8006378:	6862      	ldr	r2, [r4, #4]
 800637a:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 800637e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                      ((Timing->DataSetupTime) << 8)            |\
                      ((Timing->BusTurnAroundDuration) << 16)   |\
                      (((Timing->CLKDivision)-1) << 20)         |\
 8006382:	6923      	ldr	r3, [r4, #16]
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                      ((Timing->AddressHoldTime) << 4)          |\
                      ((Timing->DataSetupTime) << 8)            |\
                      ((Timing->BusTurnAroundDuration) << 16)   |\
 8006384:	68e1      	ldr	r1, [r4, #12]
                      (((Timing->CLKDivision)-1) << 20)         |\
 8006386:	3b01      	subs	r3, #1
 8006388:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800638c:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
                      (((Timing->DataLatency)-2) << 24)         |\
 8006390:	6963      	ldr	r3, [r4, #20]
 8006392:	3b02      	subs	r3, #2
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_CLKDIV | FMC_BWTR1_DATLAT | \
                         FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 8006394:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8006398:	4303      	orrs	r3, r0
 800639a:	e794      	b.n	80062c6 <FMC_NORSRAM_Extended_Timing_Init+0x1e>
 800639c:	080292fe 	.word	0x080292fe
 80063a0:	a0000104 	.word	0xa0000104

080063a4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 80063a8:	6842      	ldr	r2, [r0, #4]
 80063aa:	4b62      	ldr	r3, [pc, #392]	; (8006534 <UART_SetConfig+0x190>)
 80063ac:	429a      	cmp	r2, r3
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063ae:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 80063b0:	d904      	bls.n	80063bc <UART_SetConfig+0x18>
 80063b2:	4861      	ldr	r0, [pc, #388]	; (8006538 <UART_SetConfig+0x194>)
 80063b4:	f240 712e 	movw	r1, #1838	; 0x72e
 80063b8:	f7fb fdd2 	bl	8001f60 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80063c2:	d004      	beq.n	80063ce <UART_SetConfig+0x2a>
 80063c4:	485c      	ldr	r0, [pc, #368]	; (8006538 <UART_SetConfig+0x194>)
 80063c6:	f240 712f 	movw	r1, #1839	; 0x72f
 80063ca:	f7fb fdc9 	bl	8001f60 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80063d4:	d007      	beq.n	80063e6 <UART_SetConfig+0x42>
 80063d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063da:	d004      	beq.n	80063e6 <UART_SetConfig+0x42>
 80063dc:	4856      	ldr	r0, [pc, #344]	; (8006538 <UART_SetConfig+0x194>)
 80063de:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80063e2:	f7fb fdbd 	bl	8001f60 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80063e6:	6962      	ldr	r2, [r4, #20]
 80063e8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80063ec:	4013      	ands	r3, r2
 80063ee:	b903      	cbnz	r3, 80063f2 <UART_SetConfig+0x4e>
 80063f0:	b922      	cbnz	r2, 80063fc <UART_SetConfig+0x58>
 80063f2:	4851      	ldr	r0, [pc, #324]	; (8006538 <UART_SetConfig+0x194>)
 80063f4:	f240 7131 	movw	r1, #1841	; 0x731
 80063f8:	f7fb fdb2 	bl	8001f60 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80063fc:	6826      	ldr	r6, [r4, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063fe:	6921      	ldr	r1, [r4, #16]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006400:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006402:	69e0      	ldr	r0, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006408:	68e3      	ldr	r3, [r4, #12]
 800640a:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800640c:	68a2      	ldr	r2, [r4, #8]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 800640e:	6133      	str	r3, [r6, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006410:	68f3      	ldr	r3, [r6, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006412:	4311      	orrs	r1, r2
 8006414:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006416:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800641a:	430a      	orrs	r2, r1
 800641c:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800641e:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006422:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8006424:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8006426:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8006428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800642c:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8006432:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8006436:	6173      	str	r3, [r6, #20]
 8006438:	4b40      	ldr	r3, [pc, #256]	; (800653c <UART_SetConfig+0x198>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800643a:	d136      	bne.n	80064aa <UART_SetConfig+0x106>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800643c:	429e      	cmp	r6, r3
 800643e:	d003      	beq.n	8006448 <UART_SetConfig+0xa4>
 8006440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006444:	429e      	cmp	r6, r3
 8006446:	d116      	bne.n	8006476 <UART_SetConfig+0xd2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006448:	f7fe fb06 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 800644c:	6867      	ldr	r7, [r4, #4]
 800644e:	2519      	movs	r5, #25
 8006450:	4368      	muls	r0, r5
 8006452:	007f      	lsls	r7, r7, #1
 8006454:	fbb0 f7f7 	udiv	r7, r0, r7
 8006458:	f7fe fafe 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 800645c:	6862      	ldr	r2, [r4, #4]
 800645e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8006462:	4368      	muls	r0, r5
 8006464:	fbb7 f7f8 	udiv	r7, r7, r8
 8006468:	0052      	lsls	r2, r2, #1
 800646a:	013f      	lsls	r7, r7, #4
 800646c:	fbb0 f9f2 	udiv	r9, r0, r2
 8006470:	f7fe faf2 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8006474:	e015      	b.n	80064a2 <UART_SetConfig+0xfe>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006476:	f7fe fad7 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 800647a:	6867      	ldr	r7, [r4, #4]
 800647c:	2519      	movs	r5, #25
 800647e:	4368      	muls	r0, r5
 8006480:	007f      	lsls	r7, r7, #1
 8006482:	fbb0 f7f7 	udiv	r7, r0, r7
 8006486:	f7fe facf 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 800648a:	6862      	ldr	r2, [r4, #4]
 800648c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8006490:	4368      	muls	r0, r5
 8006492:	fbb7 f7f8 	udiv	r7, r7, r8
 8006496:	0052      	lsls	r2, r2, #1
 8006498:	013f      	lsls	r7, r7, #4
 800649a:	fbb0 f9f2 	udiv	r9, r0, r2
 800649e:	f7fe fac3 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 80064a2:	4345      	muls	r5, r0
 80064a4:	6860      	ldr	r0, [r4, #4]
 80064a6:	0040      	lsls	r0, r0, #1
 80064a8:	e034      	b.n	8006514 <UART_SetConfig+0x170>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80064aa:	429e      	cmp	r6, r3
 80064ac:	d002      	beq.n	80064b4 <UART_SetConfig+0x110>
 80064ae:	4b24      	ldr	r3, [pc, #144]	; (8006540 <UART_SetConfig+0x19c>)
 80064b0:	429e      	cmp	r6, r3
 80064b2:	d116      	bne.n	80064e2 <UART_SetConfig+0x13e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80064b4:	f7fe fad0 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 80064b8:	6867      	ldr	r7, [r4, #4]
 80064ba:	2519      	movs	r5, #25
 80064bc:	4368      	muls	r0, r5
 80064be:	00bf      	lsls	r7, r7, #2
 80064c0:	fbb0 f7f7 	udiv	r7, r0, r7
 80064c4:	f7fe fac8 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	f04f 0864 	mov.w	r8, #100	; 0x64
 80064ce:	4368      	muls	r0, r5
 80064d0:	fbb7 f7f8 	udiv	r7, r7, r8
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	013f      	lsls	r7, r7, #4
 80064d8:	fbb0 f9f2 	udiv	r9, r0, r2
 80064dc:	f7fe fabc 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 80064e0:	e015      	b.n	800650e <UART_SetConfig+0x16a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80064e2:	f7fe faa1 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 80064e6:	6867      	ldr	r7, [r4, #4]
 80064e8:	2519      	movs	r5, #25
 80064ea:	4368      	muls	r0, r5
 80064ec:	00bf      	lsls	r7, r7, #2
 80064ee:	fbb0 f7f7 	udiv	r7, r0, r7
 80064f2:	f7fe fa99 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 80064f6:	6862      	ldr	r2, [r4, #4]
 80064f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80064fc:	4368      	muls	r0, r5
 80064fe:	fbb7 f7f8 	udiv	r7, r7, r8
 8006502:	0092      	lsls	r2, r2, #2
 8006504:	013f      	lsls	r7, r7, #4
 8006506:	fbb0 f9f2 	udiv	r9, r0, r2
 800650a:	f7fe fa8d 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 800650e:	4345      	muls	r5, r0
 8006510:	6860      	ldr	r0, [r4, #4]
 8006512:	0080      	lsls	r0, r0, #2
 8006514:	fbb5 f0f0 	udiv	r0, r5, r0
 8006518:	fbb0 f0f8 	udiv	r0, r0, r8
 800651c:	fb08 9210 	mls	r2, r8, r0, r9
 8006520:	0112      	lsls	r2, r2, #4
 8006522:	3232      	adds	r2, #50	; 0x32
 8006524:	fbb2 f3f8 	udiv	r3, r2, r8
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	433b      	orrs	r3, r7
 800652e:	60b3      	str	r3, [r6, #8]
 8006530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006534:	00a037a0 	.word	0x00a037a0
 8006538:	0802934c 	.word	0x0802934c
 800653c:	40011000 	.word	0x40011000
 8006540:	40011400 	.word	0x40011400

08006544 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006544:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006546:	4604      	mov	r4, r0
 8006548:	2800      	cmp	r0, #0
 800654a:	d074      	beq.n	8006636 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800654c:	6981      	ldr	r1, [r0, #24]
 800654e:	6803      	ldr	r3, [r0, #0]
 8006550:	4a3a      	ldr	r2, [pc, #232]	; (800663c <HAL_UART_Init+0xf8>)
 8006552:	b1c1      	cbz	r1, 8006586 <HAL_UART_Init+0x42>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006554:	4293      	cmp	r3, r2
 8006556:	d00f      	beq.n	8006578 <HAL_UART_Init+0x34>
 8006558:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <HAL_UART_Init+0x34>
 8006560:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006564:	4293      	cmp	r3, r2
 8006566:	d007      	beq.n	8006578 <HAL_UART_Init+0x34>
 8006568:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <HAL_UART_Init+0x34>
 8006570:	4833      	ldr	r0, [pc, #204]	; (8006640 <HAL_UART_Init+0xfc>)
 8006572:	21fc      	movs	r1, #252	; 0xfc
 8006574:	f7fb fcf4 	bl	8001f60 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006578:	69a3      	ldr	r3, [r4, #24]
 800657a:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800657e:	d024      	beq.n	80065ca <HAL_UART_Init+0x86>
 8006580:	482f      	ldr	r0, [pc, #188]	; (8006640 <HAL_UART_Init+0xfc>)
 8006582:	21fd      	movs	r1, #253	; 0xfd
 8006584:	e01f      	b.n	80065c6 <HAL_UART_Init+0x82>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006586:	4293      	cmp	r3, r2
 8006588:	d01f      	beq.n	80065ca <HAL_UART_Init+0x86>
 800658a:	4a2e      	ldr	r2, [pc, #184]	; (8006644 <HAL_UART_Init+0x100>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d01c      	beq.n	80065ca <HAL_UART_Init+0x86>
 8006590:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006594:	4293      	cmp	r3, r2
 8006596:	d018      	beq.n	80065ca <HAL_UART_Init+0x86>
 8006598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800659c:	4293      	cmp	r3, r2
 800659e:	d014      	beq.n	80065ca <HAL_UART_Init+0x86>
 80065a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d010      	beq.n	80065ca <HAL_UART_Init+0x86>
 80065a8:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00c      	beq.n	80065ca <HAL_UART_Init+0x86>
 80065b0:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d008      	beq.n	80065ca <HAL_UART_Init+0x86>
 80065b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_UART_Init+0x86>
 80065c0:	481f      	ldr	r0, [pc, #124]	; (8006640 <HAL_UART_Init+0xfc>)
 80065c2:	f240 1101 	movw	r1, #257	; 0x101
 80065c6:	f7fb fccb 	bl	8001f60 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80065ca:	68a3      	ldr	r3, [r4, #8]
 80065cc:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80065d0:	d004      	beq.n	80065dc <HAL_UART_Init+0x98>
 80065d2:	481b      	ldr	r0, [pc, #108]	; (8006640 <HAL_UART_Init+0xfc>)
 80065d4:	f240 1103 	movw	r1, #259	; 0x103
 80065d8:	f7fb fcc2 	bl	8001f60 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80065dc:	69e3      	ldr	r3, [r4, #28]
 80065de:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80065e2:	d004      	beq.n	80065ee <HAL_UART_Init+0xaa>
 80065e4:	4816      	ldr	r0, [pc, #88]	; (8006640 <HAL_UART_Init+0xfc>)
 80065e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80065ea:	f7fb fcb9 	bl	8001f60 <assert_failed>
  
  if(huart->State == HAL_UART_STATE_RESET)
 80065ee:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80065f2:	b913      	cbnz	r3, 80065fa <HAL_UART_Init+0xb6>
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7fb fe5d 	bl	80022b4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065fa:	6822      	ldr	r2, [r4, #0]
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 80065fc:	2302      	movs	r3, #2
 80065fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006602:	68d3      	ldr	r3, [r2, #12]
 8006604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006608:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800660a:	4620      	mov	r0, r4
 800660c:	f7ff feca 	bl	80063a4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006618:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006620:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006628:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662a:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 800662c:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8006630:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8006634:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8006636:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8006638:	bd10      	pop	{r4, pc}
 800663a:	bf00      	nop
 800663c:	40011000 	.word	0x40011000
 8006640:	0802934c 	.word	0x0802934c
 8006644:	40004400 	.word	0x40004400

08006648 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	460e      	mov	r6, r1
 800664c:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800664e:	4604      	mov	r4, r0
 8006650:	b1f0      	cbz	r0, 8006690 <HAL_SRAM_Init+0x48>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006652:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006656:	b90b      	cbnz	r3, 800665c <HAL_SRAM_Init+0x14>
  {  
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006658:	f7fb fed6 	bl	8002408 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800665c:	f104 0108 	add.w	r1, r4, #8
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	f7ff fcef 	bl	8006044 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006666:	4631      	mov	r1, r6
 8006668:	68a2      	ldr	r2, [r4, #8]
 800666a:	6820      	ldr	r0, [r4, #0]
 800666c:	f7ff fda2 	bl	80061b4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006670:	4629      	mov	r1, r5
 8006672:	68a2      	ldr	r2, [r4, #8]
 8006674:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006676:	6860      	ldr	r0, [r4, #4]
 8006678:	f7ff fe16 	bl	80062a8 <FMC_NORSRAM_Extended_Timing_Init>
 800667c:	68a1      	ldr	r1, [r4, #8]
 800667e:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 800668c:	2000      	movs	r0, #0
 800668e:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
  {
     return HAL_ERROR;
 8006690:	2001      	movs	r0, #1
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
  
  return HAL_OK;
}
 8006692:	bd70      	pop	{r4, r5, r6, pc}

08006694 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006694:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006696:	4604      	mov	r4, r0
 8006698:	2800      	cmp	r0, #0
 800669a:	f000 80d4 	beq.w	8006846 <HAL_DMA_Init+0x1b2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800669e:	6803      	ldr	r3, [r0, #0]
 80066a0:	4a6a      	ldr	r2, [pc, #424]	; (800684c <HAL_DMA_Init+0x1b8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d031      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066a6:	3218      	adds	r2, #24
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d02e      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066ac:	3218      	adds	r2, #24
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02b      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066b2:	3218      	adds	r2, #24
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d028      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066b8:	3218      	adds	r2, #24
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d025      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066be:	3218      	adds	r2, #24
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066c4:	3218      	adds	r2, #24
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01f      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066ca:	3218      	adds	r2, #24
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01c      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066d0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066d8:	3218      	adds	r2, #24
 80066da:	4293      	cmp	r3, r2
 80066dc:	d015      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066de:	3218      	adds	r2, #24
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d012      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066e4:	3218      	adds	r2, #24
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00f      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066ea:	3218      	adds	r2, #24
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00c      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066f0:	3218      	adds	r2, #24
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066f6:	3218      	adds	r2, #24
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d006      	beq.n	800670a <HAL_DMA_Init+0x76>
 80066fc:	3218      	adds	r2, #24
 80066fe:	4293      	cmp	r3, r2
 8006700:	d003      	beq.n	800670a <HAL_DMA_Init+0x76>
 8006702:	4853      	ldr	r0, [pc, #332]	; (8006850 <HAL_DMA_Init+0x1bc>)
 8006704:	21bf      	movs	r1, #191	; 0xbf
 8006706:	f7fb fc2b 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800670a:	6863      	ldr	r3, [r4, #4]
 800670c:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8006710:	d006      	beq.n	8006720 <HAL_DMA_Init+0x8c>
 8006712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006716:	d003      	beq.n	8006720 <HAL_DMA_Init+0x8c>
 8006718:	484d      	ldr	r0, [pc, #308]	; (8006850 <HAL_DMA_Init+0x1bc>)
 800671a:	21c0      	movs	r1, #192	; 0xc0
 800671c:	f7fb fc20 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006720:	68a3      	ldr	r3, [r4, #8]
 8006722:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8006726:	d005      	beq.n	8006734 <HAL_DMA_Init+0xa0>
 8006728:	2b80      	cmp	r3, #128	; 0x80
 800672a:	d003      	beq.n	8006734 <HAL_DMA_Init+0xa0>
 800672c:	4848      	ldr	r0, [pc, #288]	; (8006850 <HAL_DMA_Init+0x1bc>)
 800672e:	21c1      	movs	r1, #193	; 0xc1
 8006730:	f7fb fc16 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006734:	68e3      	ldr	r3, [r4, #12]
 8006736:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800673a:	d003      	beq.n	8006744 <HAL_DMA_Init+0xb0>
 800673c:	4844      	ldr	r0, [pc, #272]	; (8006850 <HAL_DMA_Init+0x1bc>)
 800673e:	21c2      	movs	r1, #194	; 0xc2
 8006740:	f7fb fc0e 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800674a:	d003      	beq.n	8006754 <HAL_DMA_Init+0xc0>
 800674c:	4840      	ldr	r0, [pc, #256]	; (8006850 <HAL_DMA_Init+0x1bc>)
 800674e:	21c3      	movs	r1, #195	; 0xc3
 8006750:	f7fb fc06 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006754:	6963      	ldr	r3, [r4, #20]
 8006756:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800675a:	d006      	beq.n	800676a <HAL_DMA_Init+0xd6>
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d003      	beq.n	800676a <HAL_DMA_Init+0xd6>
 8006762:	483b      	ldr	r0, [pc, #236]	; (8006850 <HAL_DMA_Init+0x1bc>)
 8006764:	21c4      	movs	r1, #196	; 0xc4
 8006766:	f7fb fbfb 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800676a:	69a3      	ldr	r3, [r4, #24]
 800676c:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8006770:	d006      	beq.n	8006780 <HAL_DMA_Init+0xec>
 8006772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006776:	d003      	beq.n	8006780 <HAL_DMA_Init+0xec>
 8006778:	4835      	ldr	r0, [pc, #212]	; (8006850 <HAL_DMA_Init+0x1bc>)
 800677a:	21c5      	movs	r1, #197	; 0xc5
 800677c:	f7fb fbf0 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006780:	69e3      	ldr	r3, [r4, #28]
 8006782:	f033 0220 	bics.w	r2, r3, #32
 8006786:	d006      	beq.n	8006796 <HAL_DMA_Init+0x102>
 8006788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678c:	d003      	beq.n	8006796 <HAL_DMA_Init+0x102>
 800678e:	4830      	ldr	r0, [pc, #192]	; (8006850 <HAL_DMA_Init+0x1bc>)
 8006790:	21c6      	movs	r1, #198	; 0xc6
 8006792:	f7fb fbe5 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006796:	6a23      	ldr	r3, [r4, #32]
 8006798:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800679c:	d003      	beq.n	80067a6 <HAL_DMA_Init+0x112>
 800679e:	482c      	ldr	r0, [pc, #176]	; (8006850 <HAL_DMA_Init+0x1bc>)
 80067a0:	21c7      	movs	r1, #199	; 0xc7
 80067a2:	f7fb fbdd 	bl	8001f60 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80067a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a8:	f033 0304 	bics.w	r3, r3, #4
 80067ac:	d003      	beq.n	80067b6 <HAL_DMA_Init+0x122>
 80067ae:	4828      	ldr	r0, [pc, #160]	; (8006850 <HAL_DMA_Init+0x1bc>)
 80067b0:	21c8      	movs	r1, #200	; 0xc8
 80067b2:	f7fb fbd5 	bl	8001f60 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80067b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b8:	b1b3      	cbz	r3, 80067e8 <HAL_DMA_Init+0x154>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80067ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d903      	bls.n	80067c8 <HAL_DMA_Init+0x134>
 80067c0:	4823      	ldr	r0, [pc, #140]	; (8006850 <HAL_DMA_Init+0x1bc>)
 80067c2:	21cd      	movs	r1, #205	; 0xcd
 80067c4:	f7fb fbcc 	bl	8001f60 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80067c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067ca:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80067ce:	d003      	beq.n	80067d8 <HAL_DMA_Init+0x144>
 80067d0:	481f      	ldr	r0, [pc, #124]	; (8006850 <HAL_DMA_Init+0x1bc>)
 80067d2:	21ce      	movs	r1, #206	; 0xce
 80067d4:	f7fb fbc4 	bl	8001f60 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80067d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067da:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 80067de:	d003      	beq.n	80067e8 <HAL_DMA_Init+0x154>
 80067e0:	481b      	ldr	r0, [pc, #108]	; (8006850 <HAL_DMA_Init+0x1bc>)
 80067e2:	21cf      	movs	r1, #207	; 0xcf
 80067e4:	f7fb fbbc 	bl	8001f60 <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80067e8:	6821      	ldr	r1, [r4, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067ea:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <HAL_DMA_Init+0x1c0>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067ec:	68a0      	ldr	r0, [r4, #8]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067ee:	2302      	movs	r3, #2
 80067f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80067f4:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067f6:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	4318      	orrs	r0, r3
 80067fc:	68e3      	ldr	r3, [r4, #12]
 80067fe:	4318      	orrs	r0, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	4318      	orrs	r0, r3
 8006804:	6963      	ldr	r3, [r4, #20]
 8006806:	4318      	orrs	r0, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006808:	69a3      	ldr	r3, [r4, #24]
 800680a:	4318      	orrs	r0, r3
 800680c:	69e3      	ldr	r3, [r4, #28]
 800680e:	4318      	orrs	r0, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006810:	6a23      	ldr	r3, [r4, #32]
 8006812:	4303      	orrs	r3, r0
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006814:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006816:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006818:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800681a:	bf01      	itttt	eq
 800681c:	6ae0      	ldreq	r0, [r4, #44]	; 0x2c
 800681e:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8006820:	4328      	orreq	r0, r5
 8006822:	4303      	orreq	r3, r0
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006824:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006826:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006828:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800682a:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800682e:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006832:	bf04      	itt	eq
 8006834:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 8006836:	4313      	orreq	r3, r2
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006838:	614b      	str	r3, [r1, #20]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800683a:	2000      	movs	r0, #0

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800683c:	2301      	movs	r3, #1
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800683e:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006840:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8006844:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8006846:	2001      	movs	r0, #1

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8006848:	bd38      	pop	{r3, r4, r5, pc}
 800684a:	bf00      	nop
 800684c:	40026010 	.word	0x40026010
 8006850:	0802939c 	.word	0x0802939c
 8006854:	f010803f 	.word	0xf010803f

08006858 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006858:	b510      	push	{r4, lr}
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800685a:	2800      	cmp	r0, #0
 800685c:	f000 81b1 	beq.w	8006bc2 <HAL_DMA_DeInit+0x36a>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006860:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006864:	2b02      	cmp	r3, #2
 8006866:	f000 81ac 	beq.w	8006bc2 <HAL_DMA_DeInit+0x36a>
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800686a:	6803      	ldr	r3, [r0, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0;
 8006878:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0;
 800687a:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0;
 800687c:	60da      	str	r2, [r3, #12]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;
 800687e:	611a      	str	r2, [r3, #16]

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 8006880:	2221      	movs	r2, #33	; 0x21
 8006882:	615a      	str	r2, [r3, #20]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006884:	4aaf      	ldr	r2, [pc, #700]	; (8006b44 <HAL_DMA_DeInit+0x2ec>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d917      	bls.n	80068ba <HAL_DMA_DeInit+0x62>
 800688a:	3218      	adds	r2, #24
 800688c:	4293      	cmp	r3, r2
 800688e:	d00a      	beq.n	80068a6 <HAL_DMA_DeInit+0x4e>
 8006890:	49ad      	ldr	r1, [pc, #692]	; (8006b48 <HAL_DMA_DeInit+0x2f0>)
 8006892:	428b      	cmp	r3, r1
 8006894:	d009      	beq.n	80068aa <HAL_DMA_DeInit+0x52>
 8006896:	3118      	adds	r1, #24
 8006898:	428b      	cmp	r3, r1
 800689a:	bf14      	ite	ne
 800689c:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 80068a0:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 80068a4:	e003      	b.n	80068ae <HAL_DMA_DeInit+0x56>
 80068a6:	49a9      	ldr	r1, [pc, #676]	; (8006b4c <HAL_DMA_DeInit+0x2f4>)
 80068a8:	e001      	b.n	80068ae <HAL_DMA_DeInit+0x56>
 80068aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068ae:	4ca8      	ldr	r4, [pc, #672]	; (8006b50 <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80068b0:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80068b2:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80068b4:	d150      	bne.n	8006958 <HAL_DMA_DeInit+0x100>
 80068b6:	2120      	movs	r1, #32
 80068b8:	e05b      	b.n	8006972 <HAL_DMA_DeInit+0x11a>

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80068ba:	4aa6      	ldr	r2, [pc, #664]	; (8006b54 <HAL_DMA_DeInit+0x2fc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d918      	bls.n	80068f2 <HAL_DMA_DeInit+0x9a>
 80068c0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00a      	beq.n	80068de <HAL_DMA_DeInit+0x86>
 80068c8:	49a3      	ldr	r1, [pc, #652]	; (8006b58 <HAL_DMA_DeInit+0x300>)
 80068ca:	428b      	cmp	r3, r1
 80068cc:	d009      	beq.n	80068e2 <HAL_DMA_DeInit+0x8a>
 80068ce:	3118      	adds	r1, #24
 80068d0:	428b      	cmp	r3, r1
 80068d2:	bf14      	ite	ne
 80068d4:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 80068d8:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 80068dc:	e003      	b.n	80068e6 <HAL_DMA_DeInit+0x8e>
 80068de:	499b      	ldr	r1, [pc, #620]	; (8006b4c <HAL_DMA_DeInit+0x2f4>)
 80068e0:	e001      	b.n	80068e6 <HAL_DMA_DeInit+0x8e>
 80068e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068e6:	4c9a      	ldr	r4, [pc, #616]	; (8006b50 <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80068e8:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80068ea:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80068ec:	d146      	bne.n	800697c <HAL_DMA_DeInit+0x124>
 80068ee:	2120      	movs	r1, #32
 80068f0:	e051      	b.n	8006996 <HAL_DMA_DeInit+0x13e>

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80068f2:	4a9a      	ldr	r2, [pc, #616]	; (8006b5c <HAL_DMA_DeInit+0x304>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d917      	bls.n	8006928 <HAL_DMA_DeInit+0xd0>
 80068f8:	3218      	adds	r2, #24
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00a      	beq.n	8006914 <HAL_DMA_DeInit+0xbc>
 80068fe:	4998      	ldr	r1, [pc, #608]	; (8006b60 <HAL_DMA_DeInit+0x308>)
 8006900:	428b      	cmp	r3, r1
 8006902:	d009      	beq.n	8006918 <HAL_DMA_DeInit+0xc0>
 8006904:	3118      	adds	r1, #24
 8006906:	428b      	cmp	r3, r1
 8006908:	bf14      	ite	ne
 800690a:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 800690e:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 8006912:	e003      	b.n	800691c <HAL_DMA_DeInit+0xc4>
 8006914:	498d      	ldr	r1, [pc, #564]	; (8006b4c <HAL_DMA_DeInit+0x2f4>)
 8006916:	e001      	b.n	800691c <HAL_DMA_DeInit+0xc4>
 8006918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800691c:	4c91      	ldr	r4, [pc, #580]	; (8006b64 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800691e:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006920:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006922:	d13d      	bne.n	80069a0 <HAL_DMA_DeInit+0x148>
 8006924:	2120      	movs	r1, #32
 8006926:	e048      	b.n	80069ba <HAL_DMA_DeInit+0x162>

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006928:	4a8f      	ldr	r2, [pc, #572]	; (8006b68 <HAL_DMA_DeInit+0x310>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00a      	beq.n	8006944 <HAL_DMA_DeInit+0xec>
 800692e:	498f      	ldr	r1, [pc, #572]	; (8006b6c <HAL_DMA_DeInit+0x314>)
 8006930:	428b      	cmp	r3, r1
 8006932:	d009      	beq.n	8006948 <HAL_DMA_DeInit+0xf0>
 8006934:	3118      	adds	r1, #24
 8006936:	428b      	cmp	r3, r1
 8006938:	bf14      	ite	ne
 800693a:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 800693e:	f44f 2180 	moveq.w	r1, #262144	; 0x40000
 8006942:	e003      	b.n	800694c <HAL_DMA_DeInit+0xf4>
 8006944:	4981      	ldr	r1, [pc, #516]	; (8006b4c <HAL_DMA_DeInit+0x2f4>)
 8006946:	e001      	b.n	800694c <HAL_DMA_DeInit+0xf4>
 8006948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800694c:	4c85      	ldr	r4, [pc, #532]	; (8006b64 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800694e:	4293      	cmp	r3, r2

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006950:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006952:	d137      	bne.n	80069c4 <HAL_DMA_DeInit+0x16c>
 8006954:	2120      	movs	r1, #32
 8006956:	e042      	b.n	80069de <HAL_DMA_DeInit+0x186>
 8006958:	497b      	ldr	r1, [pc, #492]	; (8006b48 <HAL_DMA_DeInit+0x2f0>)
 800695a:	428b      	cmp	r3, r1
 800695c:	d007      	beq.n	800696e <HAL_DMA_DeInit+0x116>
 800695e:	3118      	adds	r1, #24
 8006960:	428b      	cmp	r3, r1
 8006962:	bf14      	ite	ne
 8006964:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8006968:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 800696c:	e001      	b.n	8006972 <HAL_DMA_DeInit+0x11a>
 800696e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006972:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006974:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006976:	d137      	bne.n	80069e8 <HAL_DMA_DeInit+0x190>
 8006978:	2108      	movs	r1, #8
 800697a:	e042      	b.n	8006a02 <HAL_DMA_DeInit+0x1aa>
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800697c:	4976      	ldr	r1, [pc, #472]	; (8006b58 <HAL_DMA_DeInit+0x300>)
 800697e:	428b      	cmp	r3, r1
 8006980:	d007      	beq.n	8006992 <HAL_DMA_DeInit+0x13a>
 8006982:	3118      	adds	r1, #24
 8006984:	428b      	cmp	r3, r1
 8006986:	bf14      	ite	ne
 8006988:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 800698c:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8006990:	e001      	b.n	8006996 <HAL_DMA_DeInit+0x13e>
 8006992:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006996:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006998:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800699a:	d138      	bne.n	8006a0e <HAL_DMA_DeInit+0x1b6>
 800699c:	2108      	movs	r1, #8
 800699e:	e043      	b.n	8006a28 <HAL_DMA_DeInit+0x1d0>
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069a0:	496f      	ldr	r1, [pc, #444]	; (8006b60 <HAL_DMA_DeInit+0x308>)
 80069a2:	428b      	cmp	r3, r1
 80069a4:	d007      	beq.n	80069b6 <HAL_DMA_DeInit+0x15e>
 80069a6:	3118      	adds	r1, #24
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf14      	ite	ne
 80069ac:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 80069b0:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 80069b4:	e001      	b.n	80069ba <HAL_DMA_DeInit+0x162>
 80069b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069ba:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069bc:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069be:	d139      	bne.n	8006a34 <HAL_DMA_DeInit+0x1dc>
 80069c0:	2108      	movs	r1, #8
 80069c2:	e044      	b.n	8006a4e <HAL_DMA_DeInit+0x1f6>
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069c4:	4969      	ldr	r1, [pc, #420]	; (8006b6c <HAL_DMA_DeInit+0x314>)
 80069c6:	428b      	cmp	r3, r1
 80069c8:	d007      	beq.n	80069da <HAL_DMA_DeInit+0x182>
 80069ca:	3118      	adds	r1, #24
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf14      	ite	ne
 80069d0:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 80069d4:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 80069d8:	e001      	b.n	80069de <HAL_DMA_DeInit+0x186>
 80069da:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069de:	4293      	cmp	r3, r2
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069e0:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069e2:	d13a      	bne.n	8006a5a <HAL_DMA_DeInit+0x202>
 80069e4:	2108      	movs	r1, #8
 80069e6:	e045      	b.n	8006a74 <HAL_DMA_DeInit+0x21c>
 80069e8:	4957      	ldr	r1, [pc, #348]	; (8006b48 <HAL_DMA_DeInit+0x2f0>)
 80069ea:	428b      	cmp	r3, r1
 80069ec:	d007      	beq.n	80069fe <HAL_DMA_DeInit+0x1a6>
 80069ee:	3118      	adds	r1, #24
 80069f0:	428b      	cmp	r3, r1
 80069f2:	bf14      	ite	ne
 80069f4:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 80069f8:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 80069fc:	e001      	b.n	8006a02 <HAL_DMA_DeInit+0x1aa>
 80069fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a02:	4c53      	ldr	r4, [pc, #332]	; (8006b50 <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a04:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a06:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a08:	d13a      	bne.n	8006a80 <HAL_DMA_DeInit+0x228>
 8006a0a:	4959      	ldr	r1, [pc, #356]	; (8006b70 <HAL_DMA_DeInit+0x318>)
 8006a0c:	e044      	b.n	8006a98 <HAL_DMA_DeInit+0x240>
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a0e:	4952      	ldr	r1, [pc, #328]	; (8006b58 <HAL_DMA_DeInit+0x300>)
 8006a10:	428b      	cmp	r3, r1
 8006a12:	d007      	beq.n	8006a24 <HAL_DMA_DeInit+0x1cc>
 8006a14:	3118      	adds	r1, #24
 8006a16:	428b      	cmp	r3, r1
 8006a18:	bf14      	ite	ne
 8006a1a:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 8006a1e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8006a22:	e001      	b.n	8006a28 <HAL_DMA_DeInit+0x1d0>
 8006a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a28:	4c49      	ldr	r4, [pc, #292]	; (8006b50 <HAL_DMA_DeInit+0x2f8>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a2a:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a2c:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a2e:	d138      	bne.n	8006aa2 <HAL_DMA_DeInit+0x24a>
 8006a30:	494f      	ldr	r1, [pc, #316]	; (8006b70 <HAL_DMA_DeInit+0x318>)
 8006a32:	e042      	b.n	8006aba <HAL_DMA_DeInit+0x262>
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a34:	494a      	ldr	r1, [pc, #296]	; (8006b60 <HAL_DMA_DeInit+0x308>)
 8006a36:	428b      	cmp	r3, r1
 8006a38:	d007      	beq.n	8006a4a <HAL_DMA_DeInit+0x1f2>
 8006a3a:	3118      	adds	r1, #24
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	bf14      	ite	ne
 8006a40:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 8006a44:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8006a48:	e001      	b.n	8006a4e <HAL_DMA_DeInit+0x1f6>
 8006a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a4e:	4c45      	ldr	r4, [pc, #276]	; (8006b64 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a50:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a52:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a54:	d136      	bne.n	8006ac4 <HAL_DMA_DeInit+0x26c>
 8006a56:	4946      	ldr	r1, [pc, #280]	; (8006b70 <HAL_DMA_DeInit+0x318>)
 8006a58:	e040      	b.n	8006adc <HAL_DMA_DeInit+0x284>
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a5a:	4944      	ldr	r1, [pc, #272]	; (8006b6c <HAL_DMA_DeInit+0x314>)
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	d007      	beq.n	8006a70 <HAL_DMA_DeInit+0x218>
 8006a60:	3118      	adds	r1, #24
 8006a62:	428b      	cmp	r3, r1
 8006a64:	bf14      	ite	ne
 8006a66:	f04f 7100 	movne.w	r1, #33554432	; 0x2000000
 8006a6a:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
 8006a6e:	e001      	b.n	8006a74 <HAL_DMA_DeInit+0x21c>
 8006a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a74:	4c3b      	ldr	r4, [pc, #236]	; (8006b64 <HAL_DMA_DeInit+0x30c>)
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a76:	4293      	cmp	r3, r2
  hdma->Instance->FCR  = (uint32_t)0x00000021;

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a78:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a7a:	d134      	bne.n	8006ae6 <HAL_DMA_DeInit+0x28e>
 8006a7c:	493c      	ldr	r1, [pc, #240]	; (8006b70 <HAL_DMA_DeInit+0x318>)
 8006a7e:	e03e      	b.n	8006afe <HAL_DMA_DeInit+0x2a6>
 8006a80:	4931      	ldr	r1, [pc, #196]	; (8006b48 <HAL_DMA_DeInit+0x2f0>)
 8006a82:	428b      	cmp	r3, r1
 8006a84:	d007      	beq.n	8006a96 <HAL_DMA_DeInit+0x23e>
 8006a86:	3118      	adds	r1, #24
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf14      	ite	ne
 8006a8c:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 8006a90:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 8006a94:	e000      	b.n	8006a98 <HAL_DMA_DeInit+0x240>
 8006a96:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a98:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a9a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a9c:	d134      	bne.n	8006b08 <HAL_DMA_DeInit+0x2b0>
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	e03f      	b.n	8006b22 <HAL_DMA_DeInit+0x2ca>

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006aa2:	492d      	ldr	r1, [pc, #180]	; (8006b58 <HAL_DMA_DeInit+0x300>)
 8006aa4:	428b      	cmp	r3, r1
 8006aa6:	d007      	beq.n	8006ab8 <HAL_DMA_DeInit+0x260>
 8006aa8:	3118      	adds	r1, #24
 8006aaa:	428b      	cmp	r3, r1
 8006aac:	bf14      	ite	ne
 8006aae:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 8006ab2:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 8006ab6:	e000      	b.n	8006aba <HAL_DMA_DeInit+0x262>
 8006ab8:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006aba:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006abc:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006abe:	d132      	bne.n	8006b26 <HAL_DMA_DeInit+0x2ce>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	e03d      	b.n	8006b40 <HAL_DMA_DeInit+0x2e8>

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006ac4:	4926      	ldr	r1, [pc, #152]	; (8006b60 <HAL_DMA_DeInit+0x308>)
 8006ac6:	428b      	cmp	r3, r1
 8006ac8:	d007      	beq.n	8006ada <HAL_DMA_DeInit+0x282>
 8006aca:	3118      	adds	r1, #24
 8006acc:	428b      	cmp	r3, r1
 8006ace:	bf14      	ite	ne
 8006ad0:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 8006ad4:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 8006ad8:	e000      	b.n	8006adc <HAL_DMA_DeInit+0x284>
 8006ada:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006adc:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006ade:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006ae0:	d148      	bne.n	8006b74 <HAL_DMA_DeInit+0x31c>
 8006ae2:	2310      	movs	r3, #16
 8006ae4:	e053      	b.n	8006b8e <HAL_DMA_DeInit+0x336>

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006ae6:	4921      	ldr	r1, [pc, #132]	; (8006b6c <HAL_DMA_DeInit+0x314>)
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	d007      	beq.n	8006afc <HAL_DMA_DeInit+0x2a4>
 8006aec:	3118      	adds	r1, #24
 8006aee:	428b      	cmp	r3, r1
 8006af0:	bf14      	ite	ne
 8006af2:	f44f 0180 	movne.w	r1, #4194304	; 0x400000
 8006af6:	f44f 3180 	moveq.w	r1, #65536	; 0x10000
 8006afa:	e000      	b.n	8006afe <HAL_DMA_DeInit+0x2a6>
 8006afc:	2140      	movs	r1, #64	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006afe:	4293      	cmp	r3, r2

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006b00:	60a1      	str	r1, [r4, #8]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006b02:	d147      	bne.n	8006b94 <HAL_DMA_DeInit+0x33c>
 8006b04:	2310      	movs	r3, #16
 8006b06:	e052      	b.n	8006bae <HAL_DMA_DeInit+0x356>
 8006b08:	4a0f      	ldr	r2, [pc, #60]	; (8006b48 <HAL_DMA_DeInit+0x2f0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d007      	beq.n	8006b1e <HAL_DMA_DeInit+0x2c6>
 8006b0e:	3218      	adds	r2, #24
 8006b10:	4293      	cmp	r3, r2
 8006b12:	bf0c      	ite	eq
 8006b14:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006b18:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006b1c:	e001      	b.n	8006b22 <HAL_DMA_DeInit+0x2ca>
 8006b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b22:	4a0b      	ldr	r2, [pc, #44]	; (8006b50 <HAL_DMA_DeInit+0x2f8>)
 8006b24:	e034      	b.n	8006b90 <HAL_DMA_DeInit+0x338>
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <HAL_DMA_DeInit+0x300>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d007      	beq.n	8006b3c <HAL_DMA_DeInit+0x2e4>
 8006b2c:	3218      	adds	r2, #24
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	bf0c      	ite	eq
 8006b32:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006b36:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006b3a:	e001      	b.n	8006b40 <HAL_DMA_DeInit+0x2e8>
 8006b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b40:	4a03      	ldr	r2, [pc, #12]	; (8006b50 <HAL_DMA_DeInit+0x2f8>)
 8006b42:	e035      	b.n	8006bb0 <HAL_DMA_DeInit+0x358>
 8006b44:	40026458 	.word	0x40026458
 8006b48:	40026488 	.word	0x40026488
 8006b4c:	00800004 	.word	0x00800004
 8006b50:	40026400 	.word	0x40026400
 8006b54:	400260b8 	.word	0x400260b8
 8006b58:	40026428 	.word	0x40026428
 8006b5c:	40026058 	.word	0x40026058
 8006b60:	40026088 	.word	0x40026088
 8006b64:	40026000 	.word	0x40026000
 8006b68:	40026010 	.word	0x40026010
 8006b6c:	40026028 	.word	0x40026028
 8006b70:	00800001 	.word	0x00800001
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <HAL_DMA_DeInit+0x370>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <HAL_DMA_DeInit+0x332>
 8006b7a:	3218      	adds	r2, #24
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bf0c      	ite	eq
 8006b80:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006b84:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006b88:	e001      	b.n	8006b8e <HAL_DMA_DeInit+0x336>
 8006b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8e:	4a0f      	ldr	r2, [pc, #60]	; (8006bcc <HAL_DMA_DeInit+0x374>)
 8006b90:	60d3      	str	r3, [r2, #12]
 8006b92:	e00e      	b.n	8006bb2 <HAL_DMA_DeInit+0x35a>
 8006b94:	4a0e      	ldr	r2, [pc, #56]	; (8006bd0 <HAL_DMA_DeInit+0x378>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <HAL_DMA_DeInit+0x352>
 8006b9a:	3218      	adds	r2, #24
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bf0c      	ite	eq
 8006ba0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006ba4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006ba8:	e001      	b.n	8006bae <HAL_DMA_DeInit+0x356>
 8006baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bae:	4a07      	ldr	r2, [pc, #28]	; (8006bcc <HAL_DMA_DeInit+0x374>)
 8006bb0:	6093      	str	r3, [r2, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006bb6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006bba:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8006bc2:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40026088 	.word	0x40026088
 8006bcc:	40026000 	.word	0x40026000
 8006bd0:	40026028 	.word	0x40026028

08006bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	461f      	mov	r7, r3
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bd8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006bdc:	2b01      	cmp	r3, #1
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bde:	4604      	mov	r4, r0
 8006be0:	460e      	mov	r6, r1
 8006be2:	4615      	mov	r5, r2
 8006be4:	f04f 0002 	mov.w	r0, #2
  /* Process locked */
  __HAL_LOCK(hdma);
 8006be8:	d038      	beq.n	8006c5c <HAL_DMA_Start_IT+0x88>
 8006bea:	2301      	movs	r3, #1
 8006bec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006bf0:	1e7a      	subs	r2, r7, #1
 8006bf2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006bf6:	429a      	cmp	r2, r3
{
  /* Process locked */
  __HAL_LOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bf8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006bfc:	d904      	bls.n	8006c08 <HAL_DMA_Start_IT+0x34>
 8006bfe:	4818      	ldr	r0, [pc, #96]	; (8006c60 <HAL_DMA_Start_IT+0x8c>)
 8006c00:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006c04:	f7fb f9ac 	bl	8001f60 <assert_failed>

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c08:	6821      	ldr	r1, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c0a:	68a3      	ldr	r3, [r4, #8]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c0c:	6808      	ldr	r0, [r1, #0]
 8006c0e:	f020 0001 	bic.w	r0, r0, #1
 8006c12:	6008      	str	r0, [r1, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c14:	6808      	ldr	r0, [r1, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c16:	2b40      	cmp	r3, #64	; 0x40
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c18:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8006c1c:	6008      	str	r0, [r1, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c1e:	604f      	str	r7, [r1, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c20:	bf0b      	itete	eq
 8006c22:	608d      	streq	r5, [r1, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8006c24:	608e      	strne	r6, [r1, #8]
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c26:	60ce      	streq	r6, [r1, #12]
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8006c28:	60cd      	strne	r5, [r1, #12]

  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);

  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8006c2a:	680b      	ldr	r3, [r1, #0]
 8006c2c:	f043 0310 	orr.w	r3, r3, #16
 8006c30:	600b      	str	r3, [r1, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8006c32:	680b      	ldr	r3, [r1, #0]
 8006c34:	f043 0308 	orr.w	r3, r3, #8
 8006c38:	600b      	str	r3, [r1, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8006c3a:	680b      	ldr	r3, [r1, #0]
 8006c3c:	f043 0304 	orr.w	r3, r3, #4
 8006c40:	600b      	str	r3, [r1, #0]

  /* Enable the FIFO Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_FE);
 8006c42:	694b      	ldr	r3, [r1, #20]
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	614b      	str	r3, [r1, #20]

  /* Enable the direct mode Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_DME);
 8006c4a:	680b      	ldr	r3, [r1, #0]
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
 8006c50:	600b      	str	r3, [r1, #0]

   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 8006c52:	680b      	ldr	r3, [r1, #0]
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c5a:	2000      	movs	r0, #0
} 
 8006c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	0802939c 	.word	0x0802939c

08006c64 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  uint32_t tickstart = 0;

  /* Disable the stream */
  __HAL_DMA_DISABLE(hdma);
 8006c64:	6802      	ldr	r2, [r0, #0]
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c66:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Disable the stream */
  __HAL_DMA_DISABLE(hdma);
 8006c68:	6813      	ldr	r3, [r2, #0]
 8006c6a:	f023 0301 	bic.w	r3, r3, #1
 8006c6e:	6013      	str	r3, [r2, #0]
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c70:	4604      	mov	r4, r0

  /* Disable the stream */
  __HAL_DMA_DISABLE(hdma);

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c72:	f001 ff09 	bl	8008a88 <HAL_GetTick>
 8006c76:	4605      	mov	r5, r0

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != 0)
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	f010 0001 	ands.w	r0, r0, #1
 8006c80:	d010      	beq.n	8006ca4 <HAL_DMA_Abort+0x40>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c82:	f001 ff01 	bl	8008a88 <HAL_GetTick>
 8006c86:	1b40      	subs	r0, r0, r5
 8006c88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006c8c:	d9f4      	bls.n	8006c78 <HAL_DMA_Abort+0x14>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8006c8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006c90:	f043 0320 	orr.w	r3, r3, #32
 8006c94:	64e3      	str	r3, [r4, #76]	; 0x4c
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c96:	2003      	movs	r0, #3
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c9e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);

  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ca4:	2301      	movs	r3, #1
      
      return HAL_TIMEOUT;
    }
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006ca6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006caa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
}
 8006cae:	bd38      	pop	{r3, r4, r5, pc}

08006cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b570      	push	{r4, r5, r6, lr}
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8006cb2:	6803      	ldr	r3, [r0, #0]
 8006cb4:	4da9      	ldr	r5, [pc, #676]	; (8006f5c <HAL_DMA_IRQHandler+0x2ac>)
 8006cb6:	42ab      	cmp	r3, r5
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cb8:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8006cba:	d916      	bls.n	8006cea <HAL_DMA_IRQHandler+0x3a>
 8006cbc:	4aa8      	ldr	r2, [pc, #672]	; (8006f60 <HAL_DMA_IRQHandler+0x2b0>)
 8006cbe:	6851      	ldr	r1, [r2, #4]
 8006cc0:	3270      	adds	r2, #112	; 0x70
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00a      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x2c>
 8006cc6:	3218      	adds	r2, #24
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_DMA_IRQHandler+0x30>
 8006ccc:	3218      	adds	r2, #24
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	bf0c      	ite	eq
 8006cd2:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8006cd6:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8006cda:	e003      	b.n	8006ce4 <HAL_DMA_IRQHandler+0x34>
 8006cdc:	2208      	movs	r2, #8
 8006cde:	e001      	b.n	8006ce4 <HAL_DMA_IRQHandler+0x34>
 8006ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ce4:	420a      	tst	r2, r1
 8006ce6:	d14c      	bne.n	8006d82 <HAL_DMA_IRQHandler+0xd2>
 8006ce8:	e0bd      	b.n	8006e66 <HAL_DMA_IRQHandler+0x1b6>
 8006cea:	4a9e      	ldr	r2, [pc, #632]	; (8006f64 <HAL_DMA_IRQHandler+0x2b4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d917      	bls.n	8006d20 <HAL_DMA_IRQHandler+0x70>
 8006cf0:	f8d2 1348 	ldr.w	r1, [r2, #840]	; 0x348
 8006cf4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00a      	beq.n	8006d12 <HAL_DMA_IRQHandler+0x62>
 8006cfc:	3218      	adds	r2, #24
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x66>
 8006d02:	3218      	adds	r2, #24
 8006d04:	4293      	cmp	r3, r2
 8006d06:	bf0c      	ite	eq
 8006d08:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8006d0c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8006d10:	e003      	b.n	8006d1a <HAL_DMA_IRQHandler+0x6a>
 8006d12:	2208      	movs	r2, #8
 8006d14:	e001      	b.n	8006d1a <HAL_DMA_IRQHandler+0x6a>
 8006d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1a:	420a      	tst	r2, r1
 8006d1c:	d131      	bne.n	8006d82 <HAL_DMA_IRQHandler+0xd2>
 8006d1e:	e0bb      	b.n	8006e98 <HAL_DMA_IRQHandler+0x1e8>
 8006d20:	4a91      	ldr	r2, [pc, #580]	; (8006f68 <HAL_DMA_IRQHandler+0x2b8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	f1a2 0258 	sub.w	r2, r2, #88	; 0x58
 8006d28:	d915      	bls.n	8006d56 <HAL_DMA_IRQHandler+0xa6>
 8006d2a:	6851      	ldr	r1, [r2, #4]
 8006d2c:	3270      	adds	r2, #112	; 0x70
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00a      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x98>
 8006d32:	3218      	adds	r2, #24
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d009      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x9c>
 8006d38:	3218      	adds	r2, #24
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	bf0c      	ite	eq
 8006d3e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8006d42:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8006d46:	e003      	b.n	8006d50 <HAL_DMA_IRQHandler+0xa0>
 8006d48:	2208      	movs	r2, #8
 8006d4a:	e001      	b.n	8006d50 <HAL_DMA_IRQHandler+0xa0>
 8006d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d50:	420a      	tst	r2, r1
 8006d52:	d116      	bne.n	8006d82 <HAL_DMA_IRQHandler+0xd2>
 8006d54:	e0b9      	b.n	8006eca <HAL_DMA_IRQHandler+0x21a>
 8006d56:	6811      	ldr	r1, [r2, #0]
 8006d58:	4a84      	ldr	r2, [pc, #528]	; (8006f6c <HAL_DMA_IRQHandler+0x2bc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00a      	beq.n	8006d74 <HAL_DMA_IRQHandler+0xc4>
 8006d5e:	3218      	adds	r2, #24
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d009      	beq.n	8006d78 <HAL_DMA_IRQHandler+0xc8>
 8006d64:	3218      	adds	r2, #24
 8006d66:	4293      	cmp	r3, r2
 8006d68:	bf0c      	ite	eq
 8006d6a:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8006d6e:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8006d72:	e003      	b.n	8006d7c <HAL_DMA_IRQHandler+0xcc>
 8006d74:	2208      	movs	r2, #8
 8006d76:	e001      	b.n	8006d7c <HAL_DMA_IRQHandler+0xcc>
 8006d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d7c:	420a      	tst	r2, r1
 8006d7e:	f000 80ba 	beq.w	8006ef6 <HAL_DMA_IRQHandler+0x246>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	0752      	lsls	r2, r2, #29
 8006d86:	d56b      	bpl.n	8006e60 <HAL_DMA_IRQHandler+0x1b0>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8006d88:	681a      	ldr	r2, [r3, #0]

      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d8a:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8006d8c:	f022 0204 	bic.w	r2, r2, #4
 8006d90:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006d92:	d913      	bls.n	8006dbc <HAL_DMA_IRQHandler+0x10c>
 8006d94:	4a76      	ldr	r2, [pc, #472]	; (8006f70 <HAL_DMA_IRQHandler+0x2c0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00a      	beq.n	8006db0 <HAL_DMA_IRQHandler+0x100>
 8006d9a:	3218      	adds	r2, #24
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d009      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x104>
 8006da0:	3218      	adds	r2, #24
 8006da2:	4293      	cmp	r3, r2
 8006da4:	bf14      	ite	ne
 8006da6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8006daa:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8006dae:	e003      	b.n	8006db8 <HAL_DMA_IRQHandler+0x108>
 8006db0:	2308      	movs	r3, #8
 8006db2:	e001      	b.n	8006db8 <HAL_DMA_IRQHandler+0x108>
 8006db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db8:	4a69      	ldr	r2, [pc, #420]	; (8006f60 <HAL_DMA_IRQHandler+0x2b0>)
 8006dba:	e02d      	b.n	8006e18 <HAL_DMA_IRQHandler+0x168>
 8006dbc:	4a69      	ldr	r2, [pc, #420]	; (8006f64 <HAL_DMA_IRQHandler+0x2b4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d914      	bls.n	8006dec <HAL_DMA_IRQHandler+0x13c>
 8006dc2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00a      	beq.n	8006de0 <HAL_DMA_IRQHandler+0x130>
 8006dca:	3218      	adds	r2, #24
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_DMA_IRQHandler+0x134>
 8006dd0:	3218      	adds	r2, #24
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	bf14      	ite	ne
 8006dd6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8006dda:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8006dde:	e003      	b.n	8006de8 <HAL_DMA_IRQHandler+0x138>
 8006de0:	2308      	movs	r3, #8
 8006de2:	e001      	b.n	8006de8 <HAL_DMA_IRQHandler+0x138>
 8006de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006de8:	4a5d      	ldr	r2, [pc, #372]	; (8006f60 <HAL_DMA_IRQHandler+0x2b0>)
 8006dea:	e02a      	b.n	8006e42 <HAL_DMA_IRQHandler+0x192>
 8006dec:	4a5e      	ldr	r2, [pc, #376]	; (8006f68 <HAL_DMA_IRQHandler+0x2b8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d914      	bls.n	8006e1c <HAL_DMA_IRQHandler+0x16c>
 8006df2:	3218      	adds	r2, #24
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00a      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x15e>
 8006df8:	3218      	adds	r2, #24
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_DMA_IRQHandler+0x162>
 8006dfe:	3218      	adds	r2, #24
 8006e00:	4293      	cmp	r3, r2
 8006e02:	bf14      	ite	ne
 8006e04:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8006e08:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8006e0c:	e003      	b.n	8006e16 <HAL_DMA_IRQHandler+0x166>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	e001      	b.n	8006e16 <HAL_DMA_IRQHandler+0x166>
 8006e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e16:	4a57      	ldr	r2, [pc, #348]	; (8006f74 <HAL_DMA_IRQHandler+0x2c4>)
 8006e18:	60d3      	str	r3, [r2, #12]
 8006e1a:	e013      	b.n	8006e44 <HAL_DMA_IRQHandler+0x194>
 8006e1c:	4a53      	ldr	r2, [pc, #332]	; (8006f6c <HAL_DMA_IRQHandler+0x2bc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00a      	beq.n	8006e38 <HAL_DMA_IRQHandler+0x188>
 8006e22:	3218      	adds	r2, #24
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x18c>
 8006e28:	3218      	adds	r2, #24
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	bf14      	ite	ne
 8006e2e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8006e32:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8006e36:	e003      	b.n	8006e40 <HAL_DMA_IRQHandler+0x190>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	e001      	b.n	8006e40 <HAL_DMA_IRQHandler+0x190>
 8006e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e40:	4a4c      	ldr	r2, [pc, #304]	; (8006f74 <HAL_DMA_IRQHandler+0x2c4>)
 8006e42:	6093      	str	r3, [r2, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8006e52:	2300      	movs	r3, #0
 8006e54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8006e58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e5a:	b10b      	cbz	r3, 8006e60 <HAL_DMA_IRQHandler+0x1b0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4798      	blx	r3
      }
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	42ab      	cmp	r3, r5
 8006e64:	d915      	bls.n	8006e92 <HAL_DMA_IRQHandler+0x1e2>
 8006e66:	4a3e      	ldr	r2, [pc, #248]	; (8006f60 <HAL_DMA_IRQHandler+0x2b0>)
 8006e68:	6851      	ldr	r1, [r2, #4]
 8006e6a:	3270      	adds	r2, #112	; 0x70
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00a      	beq.n	8006e86 <HAL_DMA_IRQHandler+0x1d6>
 8006e70:	3218      	adds	r2, #24
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_DMA_IRQHandler+0x1da>
 8006e76:	3218      	adds	r2, #24
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	bf0c      	ite	eq
 8006e7c:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8006e80:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8006e84:	e002      	b.n	8006e8c <HAL_DMA_IRQHandler+0x1dc>
 8006e86:	4a3c      	ldr	r2, [pc, #240]	; (8006f78 <HAL_DMA_IRQHandler+0x2c8>)
 8006e88:	e000      	b.n	8006e8c <HAL_DMA_IRQHandler+0x1dc>
 8006e8a:	2240      	movs	r2, #64	; 0x40
 8006e8c:	420a      	tst	r2, r1
 8006e8e:	d148      	bne.n	8006f22 <HAL_DMA_IRQHandler+0x272>
 8006e90:	e3fe      	b.n	8007690 <HAL_DMA_IRQHandler+0x9e0>
 8006e92:	4a34      	ldr	r2, [pc, #208]	; (8006f64 <HAL_DMA_IRQHandler+0x2b4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d915      	bls.n	8006ec4 <HAL_DMA_IRQHandler+0x214>
 8006e98:	4a31      	ldr	r2, [pc, #196]	; (8006f60 <HAL_DMA_IRQHandler+0x2b0>)
 8006e9a:	6811      	ldr	r1, [r2, #0]
 8006e9c:	3210      	adds	r2, #16
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x208>
 8006ea2:	3218      	adds	r2, #24
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d009      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x20c>
 8006ea8:	3218      	adds	r2, #24
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	bf0c      	ite	eq
 8006eae:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8006eb2:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8006eb6:	e002      	b.n	8006ebe <HAL_DMA_IRQHandler+0x20e>
 8006eb8:	4a2f      	ldr	r2, [pc, #188]	; (8006f78 <HAL_DMA_IRQHandler+0x2c8>)
 8006eba:	e000      	b.n	8006ebe <HAL_DMA_IRQHandler+0x20e>
 8006ebc:	2240      	movs	r2, #64	; 0x40
 8006ebe:	420a      	tst	r2, r1
 8006ec0:	d12f      	bne.n	8006f22 <HAL_DMA_IRQHandler+0x272>
 8006ec2:	e3e3      	b.n	800768c <HAL_DMA_IRQHandler+0x9dc>
 8006ec4:	4a28      	ldr	r2, [pc, #160]	; (8006f68 <HAL_DMA_IRQHandler+0x2b8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d915      	bls.n	8006ef6 <HAL_DMA_IRQHandler+0x246>
 8006eca:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <HAL_DMA_IRQHandler+0x2c4>)
 8006ecc:	6851      	ldr	r1, [r2, #4]
 8006ece:	3270      	adds	r2, #112	; 0x70
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00a      	beq.n	8006eea <HAL_DMA_IRQHandler+0x23a>
 8006ed4:	3218      	adds	r2, #24
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_DMA_IRQHandler+0x23e>
 8006eda:	3218      	adds	r2, #24
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bf0c      	ite	eq
 8006ee0:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8006ee4:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8006ee8:	e002      	b.n	8006ef0 <HAL_DMA_IRQHandler+0x240>
 8006eea:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <HAL_DMA_IRQHandler+0x2c8>)
 8006eec:	e000      	b.n	8006ef0 <HAL_DMA_IRQHandler+0x240>
 8006eee:	2240      	movs	r2, #64	; 0x40
 8006ef0:	420a      	tst	r2, r1
 8006ef2:	d116      	bne.n	8006f22 <HAL_DMA_IRQHandler+0x272>
 8006ef4:	e3c8      	b.n	8007688 <HAL_DMA_IRQHandler+0x9d8>
 8006ef6:	4a1f      	ldr	r2, [pc, #124]	; (8006f74 <HAL_DMA_IRQHandler+0x2c4>)
 8006ef8:	6811      	ldr	r1, [r2, #0]
 8006efa:	3210      	adds	r2, #16
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00a      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x266>
 8006f00:	3218      	adds	r2, #24
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_DMA_IRQHandler+0x26a>
 8006f06:	3218      	adds	r2, #24
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bf0c      	ite	eq
 8006f0c:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8006f10:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8006f14:	e002      	b.n	8006f1c <HAL_DMA_IRQHandler+0x26c>
 8006f16:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_DMA_IRQHandler+0x2c8>)
 8006f18:	e000      	b.n	8006f1c <HAL_DMA_IRQHandler+0x26c>
 8006f1a:	2240      	movs	r2, #64	; 0x40
 8006f1c:	420a      	tst	r2, r1
 8006f1e:	f000 80ca 	beq.w	80070b6 <HAL_DMA_IRQHandler+0x406>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f22:	695a      	ldr	r2, [r3, #20]
 8006f24:	0616      	lsls	r6, r2, #24
 8006f26:	d578      	bpl.n	800701a <HAL_DMA_IRQHandler+0x36a>
    {
      /* Disable the FIFO Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 8006f28:	695a      	ldr	r2, [r3, #20]

      /* Clear the FIFO error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f2a:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
    {
      /* Disable the FIFO Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 8006f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f30:	615a      	str	r2, [r3, #20]

      /* Clear the FIFO error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f32:	d923      	bls.n	8006f7c <HAL_DMA_IRQHandler+0x2cc>
 8006f34:	4a0e      	ldr	r2, [pc, #56]	; (8006f70 <HAL_DMA_IRQHandler+0x2c0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00a      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x2a0>
 8006f3a:	3218      	adds	r2, #24
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x2a4>
 8006f40:	3218      	adds	r2, #24
 8006f42:	4293      	cmp	r3, r2
 8006f44:	bf0c      	ite	eq
 8006f46:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006f4a:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8006f4e:	e002      	b.n	8006f56 <HAL_DMA_IRQHandler+0x2a6>
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <HAL_DMA_IRQHandler+0x2c8>)
 8006f52:	e000      	b.n	8006f56 <HAL_DMA_IRQHandler+0x2a6>
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	4a02      	ldr	r2, [pc, #8]	; (8006f60 <HAL_DMA_IRQHandler+0x2b0>)
 8006f58:	e03c      	b.n	8006fd4 <HAL_DMA_IRQHandler+0x324>
 8006f5a:	bf00      	nop
 8006f5c:	40026458 	.word	0x40026458
 8006f60:	40026400 	.word	0x40026400
 8006f64:	400260b8 	.word	0x400260b8
 8006f68:	40026058 	.word	0x40026058
 8006f6c:	40026010 	.word	0x40026010
 8006f70:	40026470 	.word	0x40026470
 8006f74:	40026000 	.word	0x40026000
 8006f78:	00800001 	.word	0x00800001
 8006f7c:	4aab      	ldr	r2, [pc, #684]	; (800722c <HAL_DMA_IRQHandler+0x57c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d913      	bls.n	8006faa <HAL_DMA_IRQHandler+0x2fa>
 8006f82:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00a      	beq.n	8006fa0 <HAL_DMA_IRQHandler+0x2f0>
 8006f8a:	3218      	adds	r2, #24
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d009      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x2f4>
 8006f90:	3218      	adds	r2, #24
 8006f92:	4293      	cmp	r3, r2
 8006f94:	bf0c      	ite	eq
 8006f96:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006f9a:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8006f9e:	e002      	b.n	8006fa6 <HAL_DMA_IRQHandler+0x2f6>
 8006fa0:	4ba3      	ldr	r3, [pc, #652]	; (8007230 <HAL_DMA_IRQHandler+0x580>)
 8006fa2:	e000      	b.n	8006fa6 <HAL_DMA_IRQHandler+0x2f6>
 8006fa4:	2340      	movs	r3, #64	; 0x40
 8006fa6:	4aa3      	ldr	r2, [pc, #652]	; (8007234 <HAL_DMA_IRQHandler+0x584>)
 8006fa8:	e028      	b.n	8006ffc <HAL_DMA_IRQHandler+0x34c>
 8006faa:	4aa3      	ldr	r2, [pc, #652]	; (8007238 <HAL_DMA_IRQHandler+0x588>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d913      	bls.n	8006fd8 <HAL_DMA_IRQHandler+0x328>
 8006fb0:	3218      	adds	r2, #24
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00a      	beq.n	8006fcc <HAL_DMA_IRQHandler+0x31c>
 8006fb6:	3218      	adds	r2, #24
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x320>
 8006fbc:	3218      	adds	r2, #24
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bf0c      	ite	eq
 8006fc2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006fc6:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8006fca:	e002      	b.n	8006fd2 <HAL_DMA_IRQHandler+0x322>
 8006fcc:	4b98      	ldr	r3, [pc, #608]	; (8007230 <HAL_DMA_IRQHandler+0x580>)
 8006fce:	e000      	b.n	8006fd2 <HAL_DMA_IRQHandler+0x322>
 8006fd0:	2340      	movs	r3, #64	; 0x40
 8006fd2:	4a9a      	ldr	r2, [pc, #616]	; (800723c <HAL_DMA_IRQHandler+0x58c>)
 8006fd4:	60d3      	str	r3, [r2, #12]
 8006fd6:	e012      	b.n	8006ffe <HAL_DMA_IRQHandler+0x34e>
 8006fd8:	4a99      	ldr	r2, [pc, #612]	; (8007240 <HAL_DMA_IRQHandler+0x590>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00a      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x344>
 8006fde:	3218      	adds	r2, #24
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x348>
 8006fe4:	3218      	adds	r2, #24
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	bf0c      	ite	eq
 8006fea:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006fee:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8006ff2:	e002      	b.n	8006ffa <HAL_DMA_IRQHandler+0x34a>
 8006ff4:	4b8e      	ldr	r3, [pc, #568]	; (8007230 <HAL_DMA_IRQHandler+0x580>)
 8006ff6:	e000      	b.n	8006ffa <HAL_DMA_IRQHandler+0x34a>
 8006ff8:	2340      	movs	r3, #64	; 0x40
 8006ffa:	4a90      	ldr	r2, [pc, #576]	; (800723c <HAL_DMA_IRQHandler+0x58c>)
 8006ffc:	6093      	str	r3, [r2, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ffe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007006:	2304      	movs	r3, #4
 8007008:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800700c:	2300      	movs	r3, #0
 800700e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 8007012:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007014:	b10b      	cbz	r3, 800701a <HAL_DMA_IRQHandler+0x36a>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007016:	4620      	mov	r0, r4
 8007018:	4798      	blx	r3
      }
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	42ab      	cmp	r3, r5
 800701e:	d916      	bls.n	800704e <HAL_DMA_IRQHandler+0x39e>
 8007020:	4a84      	ldr	r2, [pc, #528]	; (8007234 <HAL_DMA_IRQHandler+0x584>)
 8007022:	6851      	ldr	r1, [r2, #4]
 8007024:	3270      	adds	r2, #112	; 0x70
 8007026:	4293      	cmp	r3, r2
 8007028:	d00a      	beq.n	8007040 <HAL_DMA_IRQHandler+0x390>
 800702a:	3218      	adds	r2, #24
 800702c:	4293      	cmp	r3, r2
 800702e:	d009      	beq.n	8007044 <HAL_DMA_IRQHandler+0x394>
 8007030:	3218      	adds	r2, #24
 8007032:	4293      	cmp	r3, r2
 8007034:	bf0c      	ite	eq
 8007036:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 800703a:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 800703e:	e003      	b.n	8007048 <HAL_DMA_IRQHandler+0x398>
 8007040:	4a80      	ldr	r2, [pc, #512]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 8007042:	e001      	b.n	8007048 <HAL_DMA_IRQHandler+0x398>
 8007044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007048:	420a      	tst	r2, r1
 800704a:	d14c      	bne.n	80070e6 <HAL_DMA_IRQHandler+0x436>
 800704c:	e326      	b.n	800769c <HAL_DMA_IRQHandler+0x9ec>
 800704e:	4a77      	ldr	r2, [pc, #476]	; (800722c <HAL_DMA_IRQHandler+0x57c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d916      	bls.n	8007082 <HAL_DMA_IRQHandler+0x3d2>
 8007054:	4a77      	ldr	r2, [pc, #476]	; (8007234 <HAL_DMA_IRQHandler+0x584>)
 8007056:	6811      	ldr	r1, [r2, #0]
 8007058:	3210      	adds	r2, #16
 800705a:	4293      	cmp	r3, r2
 800705c:	d00a      	beq.n	8007074 <HAL_DMA_IRQHandler+0x3c4>
 800705e:	3218      	adds	r2, #24
 8007060:	4293      	cmp	r3, r2
 8007062:	d009      	beq.n	8007078 <HAL_DMA_IRQHandler+0x3c8>
 8007064:	3218      	adds	r2, #24
 8007066:	4293      	cmp	r3, r2
 8007068:	bf0c      	ite	eq
 800706a:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 800706e:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8007072:	e003      	b.n	800707c <HAL_DMA_IRQHandler+0x3cc>
 8007074:	4a73      	ldr	r2, [pc, #460]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 8007076:	e001      	b.n	800707c <HAL_DMA_IRQHandler+0x3cc>
 8007078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800707c:	420a      	tst	r2, r1
 800707e:	d132      	bne.n	80070e6 <HAL_DMA_IRQHandler+0x436>
 8007080:	e30a      	b.n	8007698 <HAL_DMA_IRQHandler+0x9e8>
 8007082:	4a6d      	ldr	r2, [pc, #436]	; (8007238 <HAL_DMA_IRQHandler+0x588>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d917      	bls.n	80070b8 <HAL_DMA_IRQHandler+0x408>
 8007088:	4a6c      	ldr	r2, [pc, #432]	; (800723c <HAL_DMA_IRQHandler+0x58c>)
 800708a:	6851      	ldr	r1, [r2, #4]
 800708c:	3270      	adds	r2, #112	; 0x70
 800708e:	4293      	cmp	r3, r2
 8007090:	d00a      	beq.n	80070a8 <HAL_DMA_IRQHandler+0x3f8>
 8007092:	3218      	adds	r2, #24
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <HAL_DMA_IRQHandler+0x3fc>
 8007098:	3218      	adds	r2, #24
 800709a:	4293      	cmp	r3, r2
 800709c:	bf0c      	ite	eq
 800709e:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80070a2:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80070a6:	e003      	b.n	80070b0 <HAL_DMA_IRQHandler+0x400>
 80070a8:	4a66      	ldr	r2, [pc, #408]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 80070aa:	e001      	b.n	80070b0 <HAL_DMA_IRQHandler+0x400>
 80070ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070b0:	420a      	tst	r2, r1
 80070b2:	d118      	bne.n	80070e6 <HAL_DMA_IRQHandler+0x436>
 80070b4:	e2ee      	b.n	8007694 <HAL_DMA_IRQHandler+0x9e4>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	4a60      	ldr	r2, [pc, #384]	; (800723c <HAL_DMA_IRQHandler+0x58c>)
 80070ba:	6811      	ldr	r1, [r2, #0]
 80070bc:	3210      	adds	r2, #16
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00a      	beq.n	80070d8 <HAL_DMA_IRQHandler+0x428>
 80070c2:	3218      	adds	r2, #24
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <HAL_DMA_IRQHandler+0x42c>
 80070c8:	3218      	adds	r2, #24
 80070ca:	4293      	cmp	r3, r2
 80070cc:	bf0c      	ite	eq
 80070ce:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80070d2:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80070d6:	e003      	b.n	80070e0 <HAL_DMA_IRQHandler+0x430>
 80070d8:	4a5a      	ldr	r2, [pc, #360]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 80070da:	e001      	b.n	80070e0 <HAL_DMA_IRQHandler+0x430>
 80070dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070e0:	420a      	tst	r2, r1
 80070e2:	f000 80cd 	beq.w	8007280 <HAL_DMA_IRQHandler+0x5d0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	0790      	lsls	r0, r2, #30
 80070ea:	d56b      	bpl.n	80071c4 <HAL_DMA_IRQHandler+0x514>
    {
      /* Disable the direct mode Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 80070ec:	681a      	ldr	r2, [r3, #0]

      /* Clear the direct mode error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80070ee:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
    {
      /* Disable the direct mode Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 80070f0:	f022 0202 	bic.w	r2, r2, #2
 80070f4:	601a      	str	r2, [r3, #0]

      /* Clear the direct mode error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80070f6:	d913      	bls.n	8007120 <HAL_DMA_IRQHandler+0x470>
 80070f8:	4a53      	ldr	r2, [pc, #332]	; (8007248 <HAL_DMA_IRQHandler+0x598>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00a      	beq.n	8007114 <HAL_DMA_IRQHandler+0x464>
 80070fe:	3218      	adds	r2, #24
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <HAL_DMA_IRQHandler+0x468>
 8007104:	3218      	adds	r2, #24
 8007106:	4293      	cmp	r3, r2
 8007108:	bf0c      	ite	eq
 800710a:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 800710e:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007112:	e003      	b.n	800711c <HAL_DMA_IRQHandler+0x46c>
 8007114:	4b4b      	ldr	r3, [pc, #300]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 8007116:	e001      	b.n	800711c <HAL_DMA_IRQHandler+0x46c>
 8007118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800711c:	4a45      	ldr	r2, [pc, #276]	; (8007234 <HAL_DMA_IRQHandler+0x584>)
 800711e:	e02d      	b.n	800717c <HAL_DMA_IRQHandler+0x4cc>
 8007120:	4a42      	ldr	r2, [pc, #264]	; (800722c <HAL_DMA_IRQHandler+0x57c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d914      	bls.n	8007150 <HAL_DMA_IRQHandler+0x4a0>
 8007126:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800712a:	4293      	cmp	r3, r2
 800712c:	d00a      	beq.n	8007144 <HAL_DMA_IRQHandler+0x494>
 800712e:	3218      	adds	r2, #24
 8007130:	4293      	cmp	r3, r2
 8007132:	d009      	beq.n	8007148 <HAL_DMA_IRQHandler+0x498>
 8007134:	3218      	adds	r2, #24
 8007136:	4293      	cmp	r3, r2
 8007138:	bf0c      	ite	eq
 800713a:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 800713e:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007142:	e003      	b.n	800714c <HAL_DMA_IRQHandler+0x49c>
 8007144:	4b3f      	ldr	r3, [pc, #252]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 8007146:	e001      	b.n	800714c <HAL_DMA_IRQHandler+0x49c>
 8007148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800714c:	4a39      	ldr	r2, [pc, #228]	; (8007234 <HAL_DMA_IRQHandler+0x584>)
 800714e:	e02a      	b.n	80071a6 <HAL_DMA_IRQHandler+0x4f6>
 8007150:	4a39      	ldr	r2, [pc, #228]	; (8007238 <HAL_DMA_IRQHandler+0x588>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d914      	bls.n	8007180 <HAL_DMA_IRQHandler+0x4d0>
 8007156:	3218      	adds	r2, #24
 8007158:	4293      	cmp	r3, r2
 800715a:	d00a      	beq.n	8007172 <HAL_DMA_IRQHandler+0x4c2>
 800715c:	3218      	adds	r2, #24
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_DMA_IRQHandler+0x4c6>
 8007162:	3218      	adds	r2, #24
 8007164:	4293      	cmp	r3, r2
 8007166:	bf0c      	ite	eq
 8007168:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 800716c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007170:	e003      	b.n	800717a <HAL_DMA_IRQHandler+0x4ca>
 8007172:	4b34      	ldr	r3, [pc, #208]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 8007174:	e001      	b.n	800717a <HAL_DMA_IRQHandler+0x4ca>
 8007176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800717a:	4a30      	ldr	r2, [pc, #192]	; (800723c <HAL_DMA_IRQHandler+0x58c>)
 800717c:	60d3      	str	r3, [r2, #12]
 800717e:	e013      	b.n	80071a8 <HAL_DMA_IRQHandler+0x4f8>
 8007180:	4a2f      	ldr	r2, [pc, #188]	; (8007240 <HAL_DMA_IRQHandler+0x590>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00a      	beq.n	800719c <HAL_DMA_IRQHandler+0x4ec>
 8007186:	3218      	adds	r2, #24
 8007188:	4293      	cmp	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x4f0>
 800718c:	3218      	adds	r2, #24
 800718e:	4293      	cmp	r3, r2
 8007190:	bf0c      	ite	eq
 8007192:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8007196:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800719a:	e003      	b.n	80071a4 <HAL_DMA_IRQHandler+0x4f4>
 800719c:	4b29      	ldr	r3, [pc, #164]	; (8007244 <HAL_DMA_IRQHandler+0x594>)
 800719e:	e001      	b.n	80071a4 <HAL_DMA_IRQHandler+0x4f4>
 80071a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a4:	4a25      	ldr	r2, [pc, #148]	; (800723c <HAL_DMA_IRQHandler+0x58c>)
 80071a6:	6093      	str	r3, [r2, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071aa:	f043 0304 	orr.w	r3, r3, #4
 80071ae:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80071b0:	2304      	movs	r3, #4
 80071b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071b6:	2300      	movs	r3, #0
 80071b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 80071bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80071be:	b10b      	cbz	r3, 80071c4 <HAL_DMA_IRQHandler+0x514>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071c0:	4620      	mov	r0, r4
 80071c2:	4798      	blx	r3
      }
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	42ab      	cmp	r3, r5
 80071c8:	d916      	bls.n	80071f8 <HAL_DMA_IRQHandler+0x548>
 80071ca:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <HAL_DMA_IRQHandler+0x584>)
 80071cc:	6851      	ldr	r1, [r2, #4]
 80071ce:	3270      	adds	r2, #112	; 0x70
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00a      	beq.n	80071ea <HAL_DMA_IRQHandler+0x53a>
 80071d4:	3218      	adds	r2, #24
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_DMA_IRQHandler+0x53e>
 80071da:	3218      	adds	r2, #24
 80071dc:	4293      	cmp	r3, r2
 80071de:	bf0c      	ite	eq
 80071e0:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80071e4:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80071e8:	e003      	b.n	80071f2 <HAL_DMA_IRQHandler+0x542>
 80071ea:	2210      	movs	r2, #16
 80071ec:	e001      	b.n	80071f2 <HAL_DMA_IRQHandler+0x542>
 80071ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071f2:	420a      	tst	r2, r1
 80071f4:	d15c      	bne.n	80072b0 <HAL_DMA_IRQHandler+0x600>
 80071f6:	e257      	b.n	80076a8 <HAL_DMA_IRQHandler+0x9f8>
 80071f8:	4a0c      	ldr	r2, [pc, #48]	; (800722c <HAL_DMA_IRQHandler+0x57c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d926      	bls.n	800724c <HAL_DMA_IRQHandler+0x59c>
 80071fe:	4a0d      	ldr	r2, [pc, #52]	; (8007234 <HAL_DMA_IRQHandler+0x584>)
 8007200:	6811      	ldr	r1, [r2, #0]
 8007202:	3210      	adds	r2, #16
 8007204:	4293      	cmp	r3, r2
 8007206:	d00a      	beq.n	800721e <HAL_DMA_IRQHandler+0x56e>
 8007208:	3218      	adds	r2, #24
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_DMA_IRQHandler+0x572>
 800720e:	3218      	adds	r2, #24
 8007210:	4293      	cmp	r3, r2
 8007212:	bf0c      	ite	eq
 8007214:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8007218:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800721c:	e003      	b.n	8007226 <HAL_DMA_IRQHandler+0x576>
 800721e:	2210      	movs	r2, #16
 8007220:	e001      	b.n	8007226 <HAL_DMA_IRQHandler+0x576>
 8007222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007226:	420a      	tst	r2, r1
 8007228:	d142      	bne.n	80072b0 <HAL_DMA_IRQHandler+0x600>
 800722a:	e23b      	b.n	80076a4 <HAL_DMA_IRQHandler+0x9f4>
 800722c:	400260b8 	.word	0x400260b8
 8007230:	00800001 	.word	0x00800001
 8007234:	40026400 	.word	0x40026400
 8007238:	40026058 	.word	0x40026058
 800723c:	40026000 	.word	0x40026000
 8007240:	40026010 	.word	0x40026010
 8007244:	00800004 	.word	0x00800004
 8007248:	40026470 	.word	0x40026470
 800724c:	4aab      	ldr	r2, [pc, #684]	; (80074fc <HAL_DMA_IRQHandler+0x84c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d917      	bls.n	8007282 <HAL_DMA_IRQHandler+0x5d2>
 8007252:	4aab      	ldr	r2, [pc, #684]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 8007254:	6851      	ldr	r1, [r2, #4]
 8007256:	3270      	adds	r2, #112	; 0x70
 8007258:	4293      	cmp	r3, r2
 800725a:	d00a      	beq.n	8007272 <HAL_DMA_IRQHandler+0x5c2>
 800725c:	3218      	adds	r2, #24
 800725e:	4293      	cmp	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_DMA_IRQHandler+0x5c6>
 8007262:	3218      	adds	r2, #24
 8007264:	4293      	cmp	r3, r2
 8007266:	bf0c      	ite	eq
 8007268:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800726c:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8007270:	e003      	b.n	800727a <HAL_DMA_IRQHandler+0x5ca>
 8007272:	2210      	movs	r2, #16
 8007274:	e001      	b.n	800727a <HAL_DMA_IRQHandler+0x5ca>
 8007276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800727a:	420a      	tst	r2, r1
 800727c:	d118      	bne.n	80072b0 <HAL_DMA_IRQHandler+0x600>
 800727e:	e20f      	b.n	80076a0 <HAL_DMA_IRQHandler+0x9f0>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	4a9f      	ldr	r2, [pc, #636]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 8007284:	6811      	ldr	r1, [r2, #0]
 8007286:	3210      	adds	r2, #16
 8007288:	4293      	cmp	r3, r2
 800728a:	d00a      	beq.n	80072a2 <HAL_DMA_IRQHandler+0x5f2>
 800728c:	3218      	adds	r2, #24
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_DMA_IRQHandler+0x5f6>
 8007292:	3218      	adds	r2, #24
 8007294:	4293      	cmp	r3, r2
 8007296:	bf0c      	ite	eq
 8007298:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800729c:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80072a0:	e003      	b.n	80072aa <HAL_DMA_IRQHandler+0x5fa>
 80072a2:	2210      	movs	r2, #16
 80072a4:	e001      	b.n	80072aa <HAL_DMA_IRQHandler+0x5fa>
 80072a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072aa:	420a      	tst	r2, r1
 80072ac:	f000 809d 	beq.w	80073ea <HAL_DMA_IRQHandler+0x73a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	0711      	lsls	r1, r2, #28
 80072b4:	f140 8088 	bpl.w	80073c8 <HAL_DMA_IRQHandler+0x718>
    { 
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	0352      	lsls	r2, r2, #13
 80072bc:	d562      	bpl.n	8007384 <HAL_DMA_IRQHandler+0x6d4>
      {
        /* Clear the half transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80072be:	42ab      	cmp	r3, r5
 80072c0:	d913      	bls.n	80072ea <HAL_DMA_IRQHandler+0x63a>
 80072c2:	4a90      	ldr	r2, [pc, #576]	; (8007504 <HAL_DMA_IRQHandler+0x854>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00a      	beq.n	80072de <HAL_DMA_IRQHandler+0x62e>
 80072c8:	3218      	adds	r2, #24
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x632>
 80072ce:	3218      	adds	r2, #24
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bf0c      	ite	eq
 80072d4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80072d8:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80072dc:	e003      	b.n	80072e6 <HAL_DMA_IRQHandler+0x636>
 80072de:	2310      	movs	r3, #16
 80072e0:	e001      	b.n	80072e6 <HAL_DMA_IRQHandler+0x636>
 80072e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e6:	4a88      	ldr	r2, [pc, #544]	; (8007508 <HAL_DMA_IRQHandler+0x858>)
 80072e8:	e02d      	b.n	8007346 <HAL_DMA_IRQHandler+0x696>
 80072ea:	4a88      	ldr	r2, [pc, #544]	; (800750c <HAL_DMA_IRQHandler+0x85c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d914      	bls.n	800731a <HAL_DMA_IRQHandler+0x66a>
 80072f0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00a      	beq.n	800730e <HAL_DMA_IRQHandler+0x65e>
 80072f8:	3218      	adds	r2, #24
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d009      	beq.n	8007312 <HAL_DMA_IRQHandler+0x662>
 80072fe:	3218      	adds	r2, #24
 8007300:	4293      	cmp	r3, r2
 8007302:	bf0c      	ite	eq
 8007304:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007308:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800730c:	e003      	b.n	8007316 <HAL_DMA_IRQHandler+0x666>
 800730e:	2310      	movs	r3, #16
 8007310:	e001      	b.n	8007316 <HAL_DMA_IRQHandler+0x666>
 8007312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007316:	4a7c      	ldr	r2, [pc, #496]	; (8007508 <HAL_DMA_IRQHandler+0x858>)
 8007318:	e02a      	b.n	8007370 <HAL_DMA_IRQHandler+0x6c0>
 800731a:	4a78      	ldr	r2, [pc, #480]	; (80074fc <HAL_DMA_IRQHandler+0x84c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d914      	bls.n	800734a <HAL_DMA_IRQHandler+0x69a>
 8007320:	3218      	adds	r2, #24
 8007322:	4293      	cmp	r3, r2
 8007324:	d00a      	beq.n	800733c <HAL_DMA_IRQHandler+0x68c>
 8007326:	3218      	adds	r2, #24
 8007328:	4293      	cmp	r3, r2
 800732a:	d009      	beq.n	8007340 <HAL_DMA_IRQHandler+0x690>
 800732c:	3218      	adds	r2, #24
 800732e:	4293      	cmp	r3, r2
 8007330:	bf0c      	ite	eq
 8007332:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007336:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800733a:	e003      	b.n	8007344 <HAL_DMA_IRQHandler+0x694>
 800733c:	2310      	movs	r3, #16
 800733e:	e001      	b.n	8007344 <HAL_DMA_IRQHandler+0x694>
 8007340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007344:	4a6e      	ldr	r2, [pc, #440]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 8007346:	60d3      	str	r3, [r2, #12]
 8007348:	e013      	b.n	8007372 <HAL_DMA_IRQHandler+0x6c2>
 800734a:	4a71      	ldr	r2, [pc, #452]	; (8007510 <HAL_DMA_IRQHandler+0x860>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00a      	beq.n	8007366 <HAL_DMA_IRQHandler+0x6b6>
 8007350:	3218      	adds	r2, #24
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_DMA_IRQHandler+0x6ba>
 8007356:	3218      	adds	r2, #24
 8007358:	4293      	cmp	r3, r2
 800735a:	bf0c      	ite	eq
 800735c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007360:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8007364:	e003      	b.n	800736e <HAL_DMA_IRQHandler+0x6be>
 8007366:	2310      	movs	r3, #16
 8007368:	e001      	b.n	800736e <HAL_DMA_IRQHandler+0x6be>
 800736a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736e:	4a64      	ldr	r2, [pc, #400]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 8007370:	6093      	str	r3, [r2, #8]

        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	0316      	lsls	r6, r2, #12
 8007378:	d51f      	bpl.n	80073ba <HAL_DMA_IRQHandler+0x70a>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
        }
        /* Current memory buffer used is Memory 1 */
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	0318      	lsls	r0, r3, #12
 800737e:	d51f      	bpl.n	80073c0 <HAL_DMA_IRQHandler+0x710>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 8007380:	2341      	movs	r3, #65	; 0x41
 8007382:	e01b      	b.n	80073bc <HAL_DMA_IRQHandler+0x70c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	05d1      	lsls	r1, r2, #23
 8007388:	d403      	bmi.n	8007392 <HAL_DMA_IRQHandler+0x6e2>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	f022 0208 	bic.w	r2, r2, #8
 8007390:	601a      	str	r2, [r3, #0]
        }
        /* Clear the half transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007392:	42ab      	cmp	r3, r5
 8007394:	f240 80eb 	bls.w	800756e <HAL_DMA_IRQHandler+0x8be>
 8007398:	4a5a      	ldr	r2, [pc, #360]	; (8007504 <HAL_DMA_IRQHandler+0x854>)
 800739a:	4293      	cmp	r3, r2
 800739c:	f000 80e2 	beq.w	8007564 <HAL_DMA_IRQHandler+0x8b4>
 80073a0:	3218      	adds	r2, #24
 80073a2:	4293      	cmp	r3, r2
 80073a4:	f000 80e0 	beq.w	8007568 <HAL_DMA_IRQHandler+0x8b8>
 80073a8:	3218      	adds	r2, #24
 80073aa:	4293      	cmp	r3, r2
 80073ac:	bf0c      	ite	eq
 80073ae:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80073b2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80073b6:	4a54      	ldr	r2, [pc, #336]	; (8007508 <HAL_DMA_IRQHandler+0x858>)
 80073b8:	60d3      	str	r3, [r2, #12]

        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 80073ba:	2331      	movs	r3, #49	; 0x31
 80073bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      }

      if(hdma->XferHalfCpltCallback != NULL)
 80073c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073c2:	b10b      	cbz	r3, 80073c8 <HAL_DMA_IRQHandler+0x718>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80073c4:	4620      	mov	r0, r4
 80073c6:	4798      	blx	r3
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	42ab      	cmp	r3, r5
 80073cc:	d901      	bls.n	80073d2 <HAL_DMA_IRQHandler+0x722>
 80073ce:	4a4e      	ldr	r2, [pc, #312]	; (8007508 <HAL_DMA_IRQHandler+0x858>)
 80073d0:	e008      	b.n	80073e4 <HAL_DMA_IRQHandler+0x734>
 80073d2:	4a4e      	ldr	r2, [pc, #312]	; (800750c <HAL_DMA_IRQHandler+0x85c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d901      	bls.n	80073dc <HAL_DMA_IRQHandler+0x72c>
 80073d8:	4a4b      	ldr	r2, [pc, #300]	; (8007508 <HAL_DMA_IRQHandler+0x858>)
 80073da:	e008      	b.n	80073ee <HAL_DMA_IRQHandler+0x73e>
 80073dc:	4a47      	ldr	r2, [pc, #284]	; (80074fc <HAL_DMA_IRQHandler+0x84c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d904      	bls.n	80073ec <HAL_DMA_IRQHandler+0x73c>
 80073e2:	4a47      	ldr	r2, [pc, #284]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 80073e4:	6851      	ldr	r1, [r2, #4]
 80073e6:	3270      	adds	r2, #112	; 0x70
 80073e8:	e003      	b.n	80073f2 <HAL_DMA_IRQHandler+0x742>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	4a44      	ldr	r2, [pc, #272]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 80073ee:	6811      	ldr	r1, [r2, #0]
 80073f0:	3210      	adds	r2, #16
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00a      	beq.n	800740c <HAL_DMA_IRQHandler+0x75c>
 80073f6:	3218      	adds	r2, #24
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d009      	beq.n	8007410 <HAL_DMA_IRQHandler+0x760>
 80073fc:	3218      	adds	r2, #24
 80073fe:	4293      	cmp	r3, r2
 8007400:	bf0c      	ite	eq
 8007402:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8007406:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 800740a:	e003      	b.n	8007414 <HAL_DMA_IRQHandler+0x764>
 800740c:	2220      	movs	r2, #32
 800740e:	e001      	b.n	8007414 <HAL_DMA_IRQHandler+0x764>
 8007410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007414:	420a      	tst	r2, r1
 8007416:	bf14      	ite	ne
 8007418:	2201      	movne	r2, #1
 800741a:	2200      	moveq	r2, #0
 800741c:	2a00      	cmp	r2, #0
 800741e:	f000 8145 	beq.w	80076ac <HAL_DMA_IRQHandler+0x9fc>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	06d2      	lsls	r2, r2, #27
 8007426:	f140 8141 	bpl.w	80076ac <HAL_DMA_IRQHandler+0x9fc>
    {
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	0356      	lsls	r6, r2, #13
 800742e:	d571      	bpl.n	8007514 <HAL_DMA_IRQHandler+0x864>
      {
        /* Clear the transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007430:	42ab      	cmp	r3, r5
 8007432:	d913      	bls.n	800745c <HAL_DMA_IRQHandler+0x7ac>
 8007434:	4a33      	ldr	r2, [pc, #204]	; (8007504 <HAL_DMA_IRQHandler+0x854>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00a      	beq.n	8007450 <HAL_DMA_IRQHandler+0x7a0>
 800743a:	3218      	adds	r2, #24
 800743c:	4293      	cmp	r3, r2
 800743e:	d009      	beq.n	8007454 <HAL_DMA_IRQHandler+0x7a4>
 8007440:	3218      	adds	r2, #24
 8007442:	4293      	cmp	r3, r2
 8007444:	bf0c      	ite	eq
 8007446:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800744a:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 800744e:	e003      	b.n	8007458 <HAL_DMA_IRQHandler+0x7a8>
 8007450:	2320      	movs	r3, #32
 8007452:	e001      	b.n	8007458 <HAL_DMA_IRQHandler+0x7a8>
 8007454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007458:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <HAL_DMA_IRQHandler+0x858>)
 800745a:	e02d      	b.n	80074b8 <HAL_DMA_IRQHandler+0x808>
 800745c:	4a2b      	ldr	r2, [pc, #172]	; (800750c <HAL_DMA_IRQHandler+0x85c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d914      	bls.n	800748c <HAL_DMA_IRQHandler+0x7dc>
 8007462:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007466:	4293      	cmp	r3, r2
 8007468:	d00a      	beq.n	8007480 <HAL_DMA_IRQHandler+0x7d0>
 800746a:	3218      	adds	r2, #24
 800746c:	4293      	cmp	r3, r2
 800746e:	d009      	beq.n	8007484 <HAL_DMA_IRQHandler+0x7d4>
 8007470:	3218      	adds	r2, #24
 8007472:	4293      	cmp	r3, r2
 8007474:	bf0c      	ite	eq
 8007476:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800747a:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 800747e:	e003      	b.n	8007488 <HAL_DMA_IRQHandler+0x7d8>
 8007480:	2320      	movs	r3, #32
 8007482:	e001      	b.n	8007488 <HAL_DMA_IRQHandler+0x7d8>
 8007484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007488:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <HAL_DMA_IRQHandler+0x858>)
 800748a:	e02a      	b.n	80074e2 <HAL_DMA_IRQHandler+0x832>
 800748c:	4a1b      	ldr	r2, [pc, #108]	; (80074fc <HAL_DMA_IRQHandler+0x84c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d914      	bls.n	80074bc <HAL_DMA_IRQHandler+0x80c>
 8007492:	3218      	adds	r2, #24
 8007494:	4293      	cmp	r3, r2
 8007496:	d00a      	beq.n	80074ae <HAL_DMA_IRQHandler+0x7fe>
 8007498:	3218      	adds	r2, #24
 800749a:	4293      	cmp	r3, r2
 800749c:	d009      	beq.n	80074b2 <HAL_DMA_IRQHandler+0x802>
 800749e:	3218      	adds	r2, #24
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bf0c      	ite	eq
 80074a4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80074a8:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80074ac:	e003      	b.n	80074b6 <HAL_DMA_IRQHandler+0x806>
 80074ae:	2320      	movs	r3, #32
 80074b0:	e001      	b.n	80074b6 <HAL_DMA_IRQHandler+0x806>
 80074b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074b6:	4a12      	ldr	r2, [pc, #72]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 80074b8:	60d3      	str	r3, [r2, #12]
 80074ba:	e013      	b.n	80074e4 <HAL_DMA_IRQHandler+0x834>
 80074bc:	4a14      	ldr	r2, [pc, #80]	; (8007510 <HAL_DMA_IRQHandler+0x860>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00a      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x828>
 80074c2:	3218      	adds	r2, #24
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_DMA_IRQHandler+0x82c>
 80074c8:	3218      	adds	r2, #24
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bf0c      	ite	eq
 80074ce:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80074d2:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80074d6:	e003      	b.n	80074e0 <HAL_DMA_IRQHandler+0x830>
 80074d8:	2320      	movs	r3, #32
 80074da:	e001      	b.n	80074e0 <HAL_DMA_IRQHandler+0x830>
 80074dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074e0:	4a07      	ldr	r2, [pc, #28]	; (8007500 <HAL_DMA_IRQHandler+0x850>)
 80074e2:	6093      	str	r3, [r2, #8]

        /* Current memory buffer used is Memory 1 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	0310      	lsls	r0, r2, #12
 80074ea:	d401      	bmi.n	80074f0 <HAL_DMA_IRQHandler+0x840>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80074ee:	e032      	b.n	8007556 <HAL_DMA_IRQHandler+0x8a6>
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
          }
        }
        /* Current memory buffer used is Memory 0 */
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0) 
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	0319      	lsls	r1, r3, #12
 80074f4:	f140 80da 	bpl.w	80076ac <HAL_DMA_IRQHandler+0x9fc>
 80074f8:	e02c      	b.n	8007554 <HAL_DMA_IRQHandler+0x8a4>
 80074fa:	bf00      	nop
 80074fc:	40026058 	.word	0x40026058
 8007500:	40026000 	.word	0x40026000
 8007504:	40026470 	.word	0x40026470
 8007508:	40026400 	.word	0x40026400
 800750c:	400260b8 	.word	0x400260b8
 8007510:	40026010 	.word	0x40026010
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	05d2      	lsls	r2, r2, #23
 8007518:	d403      	bmi.n	8007522 <HAL_DMA_IRQHandler+0x872>
        {
          /* Disable the transfer complete interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	f022 0210 	bic.w	r2, r2, #16
 8007520:	601a      	str	r2, [r3, #0]
        }
        /* Clear the transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007522:	42ab      	cmp	r3, r5
 8007524:	d96c      	bls.n	8007600 <HAL_DMA_IRQHandler+0x950>
 8007526:	4a62      	ldr	r2, [pc, #392]	; (80076b0 <HAL_DMA_IRQHandler+0xa00>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d064      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x946>
 800752c:	3218      	adds	r2, #24
 800752e:	4293      	cmp	r3, r2
 8007530:	d063      	beq.n	80075fa <HAL_DMA_IRQHandler+0x94a>
 8007532:	3218      	adds	r2, #24
 8007534:	4293      	cmp	r3, r2
 8007536:	bf0c      	ite	eq
 8007538:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800753c:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8007540:	4a5c      	ldr	r2, [pc, #368]	; (80076b4 <HAL_DMA_IRQHandler+0xa04>)
 8007542:	60d3      	str	r3, [r2, #12]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8007544:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007546:	64e3      	str	r3, [r4, #76]	; 0x4c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 8007548:	2311      	movs	r3, #17
 800754a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);      
 800754e:	2300      	movs	r3, #0
 8007550:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        if(hdma->XferCpltCallback != NULL)
 8007554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80a8 	beq.w	80076ac <HAL_DMA_IRQHandler+0x9fc>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800755c:	4620      	mov	r0, r4
        }
      }
    }
  }
}
 800755e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        __HAL_UNLOCK(hdma);      

        if(hdma->XferCpltCallback != NULL)
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007562:	4718      	bx	r3
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
        }
        /* Clear the half transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007564:	2310      	movs	r3, #16
 8007566:	e726      	b.n	80073b6 <HAL_DMA_IRQHandler+0x706>
 8007568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800756c:	e723      	b.n	80073b6 <HAL_DMA_IRQHandler+0x706>
 800756e:	4a52      	ldr	r2, [pc, #328]	; (80076b8 <HAL_DMA_IRQHandler+0xa08>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d914      	bls.n	800759e <HAL_DMA_IRQHandler+0x8ee>
 8007574:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8007578:	4293      	cmp	r3, r2
 800757a:	d00a      	beq.n	8007592 <HAL_DMA_IRQHandler+0x8e2>
 800757c:	3218      	adds	r2, #24
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <HAL_DMA_IRQHandler+0x8e6>
 8007582:	3218      	adds	r2, #24
 8007584:	4293      	cmp	r3, r2
 8007586:	bf0c      	ite	eq
 8007588:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800758c:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8007590:	e003      	b.n	800759a <HAL_DMA_IRQHandler+0x8ea>
 8007592:	2310      	movs	r3, #16
 8007594:	e001      	b.n	800759a <HAL_DMA_IRQHandler+0x8ea>
 8007596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759a:	4a46      	ldr	r2, [pc, #280]	; (80076b4 <HAL_DMA_IRQHandler+0xa04>)
 800759c:	e029      	b.n	80075f2 <HAL_DMA_IRQHandler+0x942>
 800759e:	4a47      	ldr	r2, [pc, #284]	; (80076bc <HAL_DMA_IRQHandler+0xa0c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d913      	bls.n	80075cc <HAL_DMA_IRQHandler+0x91c>
 80075a4:	3218      	adds	r2, #24
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00a      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x910>
 80075aa:	3218      	adds	r2, #24
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d009      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x914>
 80075b0:	3218      	adds	r2, #24
 80075b2:	4293      	cmp	r3, r2
 80075b4:	bf0c      	ite	eq
 80075b6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80075ba:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80075be:	e003      	b.n	80075c8 <HAL_DMA_IRQHandler+0x918>
 80075c0:	2310      	movs	r3, #16
 80075c2:	e001      	b.n	80075c8 <HAL_DMA_IRQHandler+0x918>
 80075c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c8:	4a3d      	ldr	r2, [pc, #244]	; (80076c0 <HAL_DMA_IRQHandler+0xa10>)
 80075ca:	e6f5      	b.n	80073b8 <HAL_DMA_IRQHandler+0x708>
 80075cc:	4a3d      	ldr	r2, [pc, #244]	; (80076c4 <HAL_DMA_IRQHandler+0xa14>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00a      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x938>
 80075d2:	3218      	adds	r2, #24
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d009      	beq.n	80075ec <HAL_DMA_IRQHandler+0x93c>
 80075d8:	3218      	adds	r2, #24
 80075da:	4293      	cmp	r3, r2
 80075dc:	bf0c      	ite	eq
 80075de:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80075e2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80075e6:	e003      	b.n	80075f0 <HAL_DMA_IRQHandler+0x940>
 80075e8:	2310      	movs	r3, #16
 80075ea:	e001      	b.n	80075f0 <HAL_DMA_IRQHandler+0x940>
 80075ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f0:	4a33      	ldr	r2, [pc, #204]	; (80076c0 <HAL_DMA_IRQHandler+0xa10>)
 80075f2:	6093      	str	r3, [r2, #8]
 80075f4:	e6e1      	b.n	80073ba <HAL_DMA_IRQHandler+0x70a>
        {
          /* Disable the transfer complete interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
        }
        /* Clear the transfer complete flag */
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80075f6:	2320      	movs	r3, #32
 80075f8:	e7a2      	b.n	8007540 <HAL_DMA_IRQHandler+0x890>
 80075fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075fe:	e79f      	b.n	8007540 <HAL_DMA_IRQHandler+0x890>
 8007600:	4a2d      	ldr	r2, [pc, #180]	; (80076b8 <HAL_DMA_IRQHandler+0xa08>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d914      	bls.n	8007630 <HAL_DMA_IRQHandler+0x980>
 8007606:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800760a:	4293      	cmp	r3, r2
 800760c:	d00a      	beq.n	8007624 <HAL_DMA_IRQHandler+0x974>
 800760e:	3218      	adds	r2, #24
 8007610:	4293      	cmp	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_DMA_IRQHandler+0x978>
 8007614:	3218      	adds	r2, #24
 8007616:	4293      	cmp	r3, r2
 8007618:	bf0c      	ite	eq
 800761a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800761e:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8007622:	e003      	b.n	800762c <HAL_DMA_IRQHandler+0x97c>
 8007624:	2320      	movs	r3, #32
 8007626:	e001      	b.n	800762c <HAL_DMA_IRQHandler+0x97c>
 8007628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800762c:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <HAL_DMA_IRQHandler+0xa04>)
 800762e:	e029      	b.n	8007684 <HAL_DMA_IRQHandler+0x9d4>
 8007630:	4a22      	ldr	r2, [pc, #136]	; (80076bc <HAL_DMA_IRQHandler+0xa0c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d913      	bls.n	800765e <HAL_DMA_IRQHandler+0x9ae>
 8007636:	3218      	adds	r2, #24
 8007638:	4293      	cmp	r3, r2
 800763a:	d00a      	beq.n	8007652 <HAL_DMA_IRQHandler+0x9a2>
 800763c:	3218      	adds	r2, #24
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_DMA_IRQHandler+0x9a6>
 8007642:	3218      	adds	r2, #24
 8007644:	4293      	cmp	r3, r2
 8007646:	bf0c      	ite	eq
 8007648:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800764c:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8007650:	e003      	b.n	800765a <HAL_DMA_IRQHandler+0x9aa>
 8007652:	2320      	movs	r3, #32
 8007654:	e001      	b.n	800765a <HAL_DMA_IRQHandler+0x9aa>
 8007656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800765a:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <HAL_DMA_IRQHandler+0xa10>)
 800765c:	e771      	b.n	8007542 <HAL_DMA_IRQHandler+0x892>
 800765e:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <HAL_DMA_IRQHandler+0xa14>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00a      	beq.n	800767a <HAL_DMA_IRQHandler+0x9ca>
 8007664:	3218      	adds	r2, #24
 8007666:	4293      	cmp	r3, r2
 8007668:	d009      	beq.n	800767e <HAL_DMA_IRQHandler+0x9ce>
 800766a:	3218      	adds	r2, #24
 800766c:	4293      	cmp	r3, r2
 800766e:	bf0c      	ite	eq
 8007670:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8007674:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8007678:	e003      	b.n	8007682 <HAL_DMA_IRQHandler+0x9d2>
 800767a:	2320      	movs	r3, #32
 800767c:	e001      	b.n	8007682 <HAL_DMA_IRQHandler+0x9d2>
 800767e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007682:	4a0f      	ldr	r2, [pc, #60]	; (80076c0 <HAL_DMA_IRQHandler+0xa10>)
 8007684:	6093      	str	r3, [r2, #8]
 8007686:	e75d      	b.n	8007544 <HAL_DMA_IRQHandler+0x894>
        hdma->XferErrorCallback(hdma);
      }
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	e4fd      	b.n	8007088 <HAL_DMA_IRQHandler+0x3d8>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	e4e1      	b.n	8007054 <HAL_DMA_IRQHandler+0x3a4>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	e4c5      	b.n	8007020 <HAL_DMA_IRQHandler+0x370>
        hdma->XferErrorCallback(hdma);
      }
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	e5dc      	b.n	8007252 <HAL_DMA_IRQHandler+0x5a2>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	e5b0      	b.n	80071fe <HAL_DMA_IRQHandler+0x54e>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	e594      	b.n	80071ca <HAL_DMA_IRQHandler+0x51a>
        hdma->XferHalfCpltCallback(hdma);
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	e69e      	b.n	80073e2 <HAL_DMA_IRQHandler+0x732>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	e697      	b.n	80073d8 <HAL_DMA_IRQHandler+0x728>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	e690      	b.n	80073ce <HAL_DMA_IRQHandler+0x71e>
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	bf00      	nop
 80076b0:	40026470 	.word	0x40026470
 80076b4:	40026400 	.word	0x40026400
 80076b8:	400260b8 	.word	0x400260b8
 80076bc:	40026058 	.word	0x40026058
 80076c0:	40026000 	.word	0x40026000
 80076c4:	40026010 	.word	0x40026010

080076c8 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	4770      	bx	lr

080076ca <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076ca:	4770      	bx	lr

080076cc <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076cc:	b510      	push	{r4, lr}
  /* Check ADC handle */
  if(hadc == NULL)
 80076ce:	4604      	mov	r4, r0
 80076d0:	2800      	cmp	r0, #0
 80076d2:	f000 80f4 	beq.w	80078be <HAL_ADC_Init+0x1f2>
  {
     return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80076d6:	6803      	ldr	r3, [r0, #0]
 80076d8:	4a7a      	ldr	r2, [pc, #488]	; (80078c4 <HAL_ADC_Init+0x1f8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00b      	beq.n	80076f6 <HAL_ADC_Init+0x2a>
 80076de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d007      	beq.n	80076f6 <HAL_ADC_Init+0x2a>
 80076e6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <HAL_ADC_Init+0x2a>
 80076ee:	4876      	ldr	r0, [pc, #472]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 80076f0:	21dc      	movs	r1, #220	; 0xdc
 80076f2:	f7fa fc35 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80076fc:	d003      	beq.n	8007706 <HAL_ADC_Init+0x3a>
 80076fe:	4872      	ldr	r0, [pc, #456]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 8007700:	21dd      	movs	r1, #221	; 0xdd
 8007702:	f7fa fc2d 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007706:	68a3      	ldr	r3, [r4, #8]
 8007708:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800770c:	d003      	beq.n	8007716 <HAL_ADC_Init+0x4a>
 800770e:	486e      	ldr	r0, [pc, #440]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 8007710:	21de      	movs	r1, #222	; 0xde
 8007712:	f7fa fc25 	bl	8001f60 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d903      	bls.n	8007724 <HAL_ADC_Init+0x58>
 800771c:	486a      	ldr	r0, [pc, #424]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800771e:	21df      	movs	r1, #223	; 0xdf
 8007720:	f7fa fc1e 	bl	8001f60 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007724:	69a3      	ldr	r3, [r4, #24]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d903      	bls.n	8007732 <HAL_ADC_Init+0x66>
 800772a:	4867      	ldr	r0, [pc, #412]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800772c:	21e0      	movs	r1, #224	; 0xe0
 800772e:	f7fa fc17 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007732:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007734:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007738:	d003      	beq.n	8007742 <HAL_ADC_Init+0x76>
 800773a:	4863      	ldr	r0, [pc, #396]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800773c:	21e1      	movs	r1, #225	; 0xe1
 800773e:	f7fa fc0f 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007742:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007744:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007748:	d00c      	beq.n	8007764 <HAL_ADC_Init+0x98>
 800774a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800774e:	d009      	beq.n	8007764 <HAL_ADC_Init+0x98>
 8007750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007754:	d006      	beq.n	8007764 <HAL_ADC_Init+0x98>
 8007756:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800775a:	d003      	beq.n	8007764 <HAL_ADC_Init+0x98>
 800775c:	485a      	ldr	r0, [pc, #360]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800775e:	21e2      	movs	r1, #226	; 0xe2
 8007760:	f7fa fbfe 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007764:	68e3      	ldr	r3, [r4, #12]
 8007766:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800776a:	d003      	beq.n	8007774 <HAL_ADC_Init+0xa8>
 800776c:	4856      	ldr	r0, [pc, #344]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800776e:	21e3      	movs	r1, #227	; 0xe3
 8007770:	f7fa fbf6 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007774:	6a23      	ldr	r3, [r4, #32]
 8007776:	3b01      	subs	r3, #1
 8007778:	2b0f      	cmp	r3, #15
 800777a:	d903      	bls.n	8007784 <HAL_ADC_Init+0xb8>
 800777c:	4852      	ldr	r0, [pc, #328]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800777e:	21e4      	movs	r1, #228	; 0xe4
 8007780:	f7fa fbee 	bl	8001f60 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007784:	69e3      	ldr	r3, [r4, #28]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d903      	bls.n	8007792 <HAL_ADC_Init+0xc6>
 800778a:	484f      	ldr	r0, [pc, #316]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800778c:	21e5      	movs	r1, #229	; 0xe5
 800778e:	f7fa fbe7 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007792:	6963      	ldr	r3, [r4, #20]
 8007794:	2b02      	cmp	r3, #2
 8007796:	d903      	bls.n	80077a0 <HAL_ADC_Init+0xd4>
 8007798:	484b      	ldr	r0, [pc, #300]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 800779a:	21e6      	movs	r1, #230	; 0xe6
 800779c:	f7fa fbe0 	bl	8001f60 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80077a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d903      	bls.n	80077ae <HAL_ADC_Init+0xe2>
 80077a6:	4848      	ldr	r0, [pc, #288]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 80077a8:	21e7      	movs	r1, #231	; 0xe7
 80077aa:	f7fa fbd9 	bl	8001f60 <assert_failed>
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80077ae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80077b2:	b913      	cbnz	r3, 80077ba <HAL_ADC_Init+0xee>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7fa fd31 	bl	800221c <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 80077ba:	2302      	movs	r3, #2
 80077bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80077c0:	4b42      	ldr	r3, [pc, #264]	; (80078cc <HAL_ADC_Init+0x200>)
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80077c8:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80077ca:	6859      	ldr	r1, [r3, #4]
 80077cc:	6862      	ldr	r2, [r4, #4]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80077d2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80077d4:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80077e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80077ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80077ee:	6859      	ldr	r1, [r3, #4]
 80077f0:	68a2      	ldr	r2, [r4, #8]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80077fe:	6899      	ldr	r1, [r3, #8]
 8007800:	68e2      	ldr	r2, [r4, #12]
 8007802:	430a      	orrs	r2, r1
 8007804:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800780c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800780e:	6899      	ldr	r1, [r3, #8]
 8007810:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007812:	430a      	orrs	r2, r1
 8007814:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800781c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800781e:	6899      	ldr	r1, [r3, #8]
 8007820:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007822:	430a      	orrs	r2, r1
 8007824:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	f022 0202 	bic.w	r2, r2, #2
 800782c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	69a1      	ldr	r1, [r4, #24]
 8007832:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8007836:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8007838:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800783a:	b1ba      	cbz	r2, 800786c <HAL_ADC_Init+0x1a0>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800783c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800783e:	3b01      	subs	r3, #1
 8007840:	2b07      	cmp	r3, #7
 8007842:	d904      	bls.n	800784e <HAL_ADC_Init+0x182>
 8007844:	4820      	ldr	r0, [pc, #128]	; (80078c8 <HAL_ADC_Init+0x1fc>)
 8007846:	f240 41af 	movw	r1, #1199	; 0x4af
 800784a:	f7fa fb89 	bl	8001f60 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007856:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800785e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007860:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007862:	6859      	ldr	r1, [r3, #4]
 8007864:	3a01      	subs	r2, #1
 8007866:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 800786a:	e002      	b.n	8007872 <HAL_ADC_Init+0x1a6>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007872:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800787c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800787e:	6a22      	ldr	r2, [r4, #32]
 8007880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007882:	3a01      	subs	r2, #1
 8007884:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8007888:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800788a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800788c:	69e1      	ldr	r1, [r4, #28]
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800788e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800789a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800789c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800789e:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80078a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80078ac:	609a      	str	r2, [r3, #8]
  
  /* Set ADC parameters */
  ADC_Init(hadc);
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 80078ae:	2000      	movs	r0, #0
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 80078b0:	2301      	movs	r3, #1
  
  /* Set ADC parameters */
  ADC_Init(hadc);
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 80078b2:	6420      	str	r0, [r4, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80078b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 80078b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return HAL_OK;
 80078bc:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Check ADC handle */
  if(hadc == NULL)
  {
     return HAL_ERROR;
 80078be:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return HAL_OK;
}
 80078c0:	bd10      	pop	{r4, pc}
 80078c2:	bf00      	nop
 80078c4:	40012000 	.word	0x40012000
 80078c8:	080293eb 	.word	0x080293eb
 80078cc:	40012300 	.word	0x40012300

080078d0 <HAL_ADC_Start>:
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
  uint16_t i = 0;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80078d0:	6983      	ldr	r3, [r0, #24]
 80078d2:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80078d4:	b510      	push	{r4, lr}
 80078d6:	4604      	mov	r4, r0
  uint16_t i = 0;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80078d8:	d904      	bls.n	80078e4 <HAL_ADC_Start+0x14>
 80078da:	4820      	ldr	r0, [pc, #128]	; (800795c <HAL_ADC_Start+0x8c>)
 80078dc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80078e0:	f7fa fb3e 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80078e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80078e6:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80078ea:	d004      	beq.n	80078f6 <HAL_ADC_Start+0x26>
 80078ec:	481b      	ldr	r0, [pc, #108]	; (800795c <HAL_ADC_Start+0x8c>)
 80078ee:	f240 1161 	movw	r1, #353	; 0x161
 80078f2:	f7fa fb35 	bl	8001f60 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d02c      	beq.n	8007958 <HAL_ADC_Start+0x88>
 80078fe:	2301      	movs	r3, #1
 8007900:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8007904:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007908:	2b22      	cmp	r3, #34	; 0x22
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 800790a:	bf0c      	ite	eq
 800790c:	2332      	moveq	r3, #50	; 0x32
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 800790e:	2312      	movne	r3, #18
 8007910:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	07d1      	lsls	r1, r2, #31
 800791a:	d504      	bpl.n	8007926 <HAL_ADC_Start+0x56>
      __NOP();
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800791c:	4a10      	ldr	r2, [pc, #64]	; (8007960 <HAL_ADC_Start+0x90>)
 800791e:	6852      	ldr	r2, [r2, #4]
 8007920:	06d2      	lsls	r2, r2, #27
 8007922:	d00f      	beq.n	8007944 <HAL_ADC_Start+0x74>
 8007924:	e00b      	b.n	800793e <HAL_ADC_Start+0x6e>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	f042 0201 	orr.w	r2, r2, #1
 800792c:	609a      	str	r2, [r3, #8]
 800792e:	f240 221d 	movw	r2, #541	; 0x21d

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8007932:	bf00      	nop
 8007934:	3a01      	subs	r2, #1
 8007936:	b292      	uxth	r2, r2
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8007938:	2a00      	cmp	r2, #0
 800793a:	d1fa      	bne.n	8007932 <HAL_ADC_Start+0x62>
 800793c:	e7ee      	b.n	800791c <HAL_ADC_Start+0x4c>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <HAL_ADC_Start+0x94>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d105      	bne.n	8007950 <HAL_ADC_Start+0x80>
 8007944:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007946:	b91a      	cbnz	r2, 8007950 <HAL_ADC_Start+0x80>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800794e:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007950:	2000      	movs	r0, #0
 8007952:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007956:	bd10      	pop	{r4, pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007958:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 800795a:	bd10      	pop	{r4, pc}
 800795c:	080293eb 	.word	0x080293eb
 8007960:	40012300 	.word	0x40012300
 8007964:	40012000 	.word	0x40012000

08007968 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4604      	mov	r4, r0
 800796c:	460d      	mov	r5, r1
  uint32_t tickstart = 0;
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800796e:	f001 f88b 	bl	8008a88 <HAL_GetTick>
 8007972:	4606      	mov	r6, r0

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	079b      	lsls	r3, r3, #30
 800797a:	d40f      	bmi.n	800799c <HAL_ADC_PollForConversion+0x34>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800797c:	1c69      	adds	r1, r5, #1
 800797e:	d0fa      	beq.n	8007976 <HAL_ADC_PollForConversion+0xe>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8007980:	b935      	cbnz	r5, 8007990 <HAL_ADC_PollForConversion+0x28>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8007982:	2003      	movs	r0, #3
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007984:	2300      	movs	r3, #0
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8007986:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800798a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800798e:	bd70      	pop	{r4, r5, r6, pc}
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8007990:	f001 f87a 	bl	8008a88 <HAL_GetTick>
 8007994:	1b80      	subs	r0, r0, r6
 8007996:	42a8      	cmp	r0, r5
 8007998:	d9ec      	bls.n	8007974 <HAL_ADC_PollForConversion+0xc>
 800799a:	e7f2      	b.n	8007982 <HAL_ADC_PollForConversion+0x1a>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 800799c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80079a0:	2b25      	cmp	r3, #37	; 0x25
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 80079a2:	bf0c      	ite	eq
 80079a4:	2335      	moveq	r3, #53	; 0x35
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 80079a6:	2315      	movne	r3, #21
 80079a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 80079ac:	2000      	movs	r0, #0
}
 80079ae:	bd70      	pop	{r4, r5, r6, pc}

080079b0 <HAL_ADC_GetValue>:
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80079b0:	6803      	ldr	r3, [r0, #0]
 80079b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80079b4:	4770      	bx	lr
	...

080079b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80079ba:	680b      	ldr	r3, [r1, #0]
 80079bc:	2b12      	cmp	r3, #18
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80079be:	4604      	mov	r4, r0
 80079c0:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80079c2:	d904      	bls.n	80079ce <HAL_ADC_ConfigChannel+0x16>
 80079c4:	4845      	ldr	r0, [pc, #276]	; (8007adc <HAL_ADC_ConfigChannel+0x124>)
 80079c6:	f240 31cd 	movw	r1, #973	; 0x3cd
 80079ca:	f7fa fac9 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80079ce:	686b      	ldr	r3, [r5, #4]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	2b0f      	cmp	r3, #15
 80079d4:	d904      	bls.n	80079e0 <HAL_ADC_ConfigChannel+0x28>
 80079d6:	4841      	ldr	r0, [pc, #260]	; (8007adc <HAL_ADC_ConfigChannel+0x124>)
 80079d8:	f240 31ce 	movw	r1, #974	; 0x3ce
 80079dc:	f7fa fac0 	bl	8001f60 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80079e0:	68ab      	ldr	r3, [r5, #8]
 80079e2:	2b07      	cmp	r3, #7
 80079e4:	d904      	bls.n	80079f0 <HAL_ADC_ConfigChannel+0x38>
 80079e6:	483d      	ldr	r0, [pc, #244]	; (8007adc <HAL_ADC_ConfigChannel+0x124>)
 80079e8:	f240 31cf 	movw	r1, #975	; 0x3cf
 80079ec:	f7fa fab8 	bl	8001f60 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d068      	beq.n	8007aca <HAL_ADC_ConfigChannel+0x112>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80079f8:	6828      	ldr	r0, [r5, #0]
 80079fa:	68aa      	ldr	r2, [r5, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079fc:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80079fe:	2809      	cmp	r0, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8007a04:	b281      	uxth	r1, r0
 8007a06:	6823      	ldr	r3, [r4, #0]
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007a08:	d90f      	bls.n	8007a2a <HAL_ADC_ConfigChannel+0x72>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007a0a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8007a0e:	68df      	ldr	r7, [r3, #12]
 8007a10:	3e1e      	subs	r6, #30
 8007a12:	f04f 0e07 	mov.w	lr, #7
 8007a16:	fa0e fe06 	lsl.w	lr, lr, r6
 8007a1a:	ea27 070e 	bic.w	r7, r7, lr
 8007a1e:	60df      	str	r7, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007a20:	68df      	ldr	r7, [r3, #12]
 8007a22:	40b2      	lsls	r2, r6
 8007a24:	433a      	orrs	r2, r7
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e00d      	b.n	8007a46 <HAL_ADC_ConfigChannel+0x8e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a2a:	691f      	ldr	r7, [r3, #16]
 8007a2c:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
 8007a30:	2607      	movs	r6, #7
 8007a32:	fa06 f60e 	lsl.w	r6, r6, lr
 8007a36:	ea27 0606 	bic.w	r6, r7, r6
 8007a3a:	611e      	str	r6, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a3c:	691e      	ldr	r6, [r3, #16]
 8007a3e:	fa02 f20e 	lsl.w	r2, r2, lr
 8007a42:	4332      	orrs	r2, r6
 8007a44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007a46:	686a      	ldr	r2, [r5, #4]
 8007a48:	2a06      	cmp	r2, #6
 8007a4a:	ea4f 0582 	mov.w	r5, r2, lsl #2
 8007a4e:	d80c      	bhi.n	8007a6a <HAL_ADC_ConfigChannel+0xb2>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a50:	442a      	add	r2, r5
 8007a52:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007a54:	3a05      	subs	r2, #5
 8007a56:	251f      	movs	r5, #31
 8007a58:	4095      	lsls	r5, r2
 8007a5a:	ea26 0505 	bic.w	r5, r6, r5
 8007a5e:	635d      	str	r5, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a60:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007a62:	4091      	lsls	r1, r2
 8007a64:	4329      	orrs	r1, r5
 8007a66:	6359      	str	r1, [r3, #52]	; 0x34
 8007a68:	e01a      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0xe8>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007a6a:	2a0c      	cmp	r2, #12
 8007a6c:	d80c      	bhi.n	8007a88 <HAL_ADC_ConfigChannel+0xd0>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a6e:	442a      	add	r2, r5
 8007a70:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8007a72:	3a23      	subs	r2, #35	; 0x23
 8007a74:	251f      	movs	r5, #31
 8007a76:	4095      	lsls	r5, r2
 8007a78:	ea26 0505 	bic.w	r5, r6, r5
 8007a7c:	631d      	str	r5, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a7e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8007a80:	4091      	lsls	r1, r2
 8007a82:	4329      	orrs	r1, r5
 8007a84:	6319      	str	r1, [r3, #48]	; 0x30
 8007a86:	e00b      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0xe8>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a88:	442a      	add	r2, r5
 8007a8a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8007a8c:	3a41      	subs	r2, #65	; 0x41
 8007a8e:	251f      	movs	r5, #31
 8007a90:	4095      	lsls	r5, r2
 8007a92:	ea26 0505 	bic.w	r5, r6, r5
 8007a96:	62dd      	str	r5, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a98:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8007a9a:	4091      	lsls	r1, r2
 8007a9c:	4329      	orrs	r1, r5
 8007a9e:	62d9      	str	r1, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007aa0:	4a0f      	ldr	r2, [pc, #60]	; (8007ae0 <HAL_ADC_ConfigChannel+0x128>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d10d      	bne.n	8007ac2 <HAL_ADC_ConfigChannel+0x10a>
 8007aa6:	2812      	cmp	r0, #18
 8007aa8:	d106      	bne.n	8007ab8 <HAL_ADC_ConfigChannel+0x100>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007aaa:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8007aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ab2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8007ab6:	e004      	b.n	8007ac2 <HAL_ADC_ConfigChannel+0x10a>
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <HAL_ADC_ConfigChannel+0x12c>)
 8007aba:	4298      	cmp	r0, r3
 8007abc:	d007      	beq.n	8007ace <HAL_ADC_ConfigChannel+0x116>
 8007abe:	2811      	cmp	r0, #17
 8007ac0:	d005      	beq.n	8007ace <HAL_ADC_ConfigChannel+0x116>
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007aca:	2002      	movs	r0, #2
 8007acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007ace:	4a06      	ldr	r2, [pc, #24]	; (8007ae8 <HAL_ADC_ConfigChannel+0x130>)
 8007ad0:	6853      	ldr	r3, [r2, #4]
 8007ad2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ad6:	6053      	str	r3, [r2, #4]
 8007ad8:	e7f3      	b.n	8007ac2 <HAL_ADC_ConfigChannel+0x10a>
 8007ada:	bf00      	nop
 8007adc:	080293eb 	.word	0x080293eb
 8007ae0:	40012000 	.word	0x40012000
 8007ae4:	10000012 	.word	0x10000012
 8007ae8:	40012300 	.word	0x40012300

08007aec <HAL_ADC_GetState>:
  * @retval HAL state
  */
HAL_ADC_StateTypeDef HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
  /* Return ADC state */
  return hadc->State;
 8007aec:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8007af0:	4770      	bx	lr
	...

08007af4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007af4:	6a03      	ldr	r3, [r0, #32]
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007afe:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b00:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b02:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b04:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b06:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b0a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b0c:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b10:	688b      	ldr	r3, [r1, #8]
 8007b12:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007b14:	4c0c      	ldr	r4, [pc, #48]	; (8007b48 <TIM_OC1_SetConfig+0x54>)
 8007b16:	42a0      	cmp	r0, r4
 8007b18:	d009      	beq.n	8007b2e <TIM_OC1_SetConfig+0x3a>
 8007b1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b1e:	42a0      	cmp	r0, r4
 8007b20:	d005      	beq.n	8007b2e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b22:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b24:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b26:	6185      	str	r5, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b28:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8007b2a:	6203      	str	r3, [r0, #32]
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b2e:	68cc      	ldr	r4, [r1, #12]
 8007b30:	698e      	ldr	r6, [r1, #24]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b32:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b36:	4323      	orrs	r3, r4
 8007b38:	694c      	ldr	r4, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b3e:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b40:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b44:	4322      	orrs	r2, r4
 8007b46:	e7ec      	b.n	8007b22 <TIM_OC1_SetConfig+0x2e>
 8007b48:	40010000 	.word	0x40010000

08007b4c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b4c:	6a03      	ldr	r3, [r0, #32]
 8007b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b58:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007b5a:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5c:	69c5      	ldr	r5, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8007b5e:	f025 0373 	bic.w	r3, r5, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b62:	680d      	ldr	r5, [r1, #0]
 8007b64:	431d      	orrs	r5, r3
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007b66:	4b23      	ldr	r3, [pc, #140]	; (8007bf4 <TIM_OC3_SetConfig+0xa8>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b68:	f424 7200 	bic.w	r2, r4, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8007b6c:	688c      	ldr	r4, [r1, #8]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007b6e:	4298      	cmp	r0, r3
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	4606      	mov	r6, r0
 8007b72:	4688      	mov	r8, r1
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8007b74:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007b78:	d003      	beq.n	8007b82 <TIM_OC3_SetConfig+0x36>
 8007b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	d12f      	bne.n	8007be2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007b82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b86:	f033 0308 	bics.w	r3, r3, #8
 8007b8a:	d004      	beq.n	8007b96 <TIM_OC3_SetConfig+0x4a>
 8007b8c:	481a      	ldr	r0, [pc, #104]	; (8007bf8 <TIM_OC3_SetConfig+0xac>)
 8007b8e:	f241 21cd 	movw	r1, #4813	; 0x12cd
 8007b92:	f7fa f9e5 	bl	8001f60 <assert_failed>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007b96:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007b9a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007b9e:	d004      	beq.n	8007baa <TIM_OC3_SetConfig+0x5e>
 8007ba0:	4815      	ldr	r0, [pc, #84]	; (8007bf8 <TIM_OC3_SetConfig+0xac>)
 8007ba2:	f241 21ce 	movw	r1, #4814	; 0x12ce
 8007ba6:	f7fa f9db 	bl	8001f60 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007baa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007bae:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8007bb2:	d004      	beq.n	8007bbe <TIM_OC3_SetConfig+0x72>
 8007bb4:	4810      	ldr	r0, [pc, #64]	; (8007bf8 <TIM_OC3_SetConfig+0xac>)
 8007bb6:	f241 21cf 	movw	r1, #4815	; 0x12cf
 8007bba:	f7fa f9d1 	bl	8001f60 <assert_failed>
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8007bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8007bc2:	f8d8 2014 	ldr.w	r2, [r8, #20]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bc6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8007bca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bce:	f427 5340 	bic.w	r3, r7, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8007bd2:	f8d8 7018 	ldr.w	r7, [r8, #24]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8007bd6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bda:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8007bde:	ea43 1707 	orr.w	r7, r3, r7, lsl #4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007be2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be6:	6077      	str	r7, [r6, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be8:	61f5      	str	r5, [r6, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bea:	63f3      	str	r3, [r6, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bec:	6234      	str	r4, [r6, #32]
 8007bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	0802943a 	.word	0x0802943a

08007bfc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bfc:	6a03      	ldr	r3, [r0, #32]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007bfe:	680a      	ldr	r2, [r1, #0]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c08:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0a:	6a06      	ldr	r6, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007c0c:	6845      	ldr	r5, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0e:	69c3      	ldr	r3, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c10:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007c14:	ea43 2802 	orr.w	r8, r3, r2, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c18:	f426 5300 	bic.w	r3, r6, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8007c1c:	688e      	ldr	r6, [r1, #8]
 8007c1e:	ea43 3606 	orr.w	r6, r3, r6, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007c22:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <TIM_OC4_SetConfig+0x64>)
 8007c24:	4298      	cmp	r0, r3
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c26:	4604      	mov	r4, r0
 8007c28:	460f      	mov	r7, r1
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007c2a:	d003      	beq.n	8007c34 <TIM_OC4_SetConfig+0x38>
 8007c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c30:	4298      	cmp	r0, r3
 8007c32:	d10d      	bne.n	8007c50 <TIM_OC4_SetConfig+0x54>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 8007c3a:	d004      	beq.n	8007c46 <TIM_OC4_SetConfig+0x4a>
 8007c3c:	4809      	ldr	r0, [pc, #36]	; (8007c64 <TIM_OC4_SetConfig+0x68>)
 8007c3e:	f241 3113 	movw	r1, #4883	; 0x1313
 8007c42:	f7fa f98d 	bl	8001f60 <assert_failed>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8007c46:	697b      	ldr	r3, [r7, #20]
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c48:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8007c4c:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c50:	687b      	ldr	r3, [r7, #4]
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c52:	6065      	str	r5, [r4, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8007c54:	f8c4 801c 	str.w	r8, [r4, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c58:	6423      	str	r3, [r4, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5a:	6226      	str	r6, [r4, #32]
 8007c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c60:	40010000 	.word	0x40010000
 8007c64:	0802943a 	.word	0x0802943a

08007c68 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007c68:	6803      	ldr	r3, [r0, #0]
 8007c6a:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <HAL_TIM_Base_Start_IT+0x94>)
 8007c6c:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c6e:	b510      	push	{r4, lr}
 8007c70:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007c72:	d037      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c78:	d034      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007c7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d030      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d02c      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d028      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d024      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d020      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007ca2:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d01c      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007caa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d018      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d014      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d010      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007cc2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00c      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d008      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x7c>
 8007cda:	4809      	ldr	r0, [pc, #36]	; (8007d00 <HAL_TIM_Base_Start_IT+0x98>)
 8007cdc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007ce0:	f7fa f93e 	bl	8001f60 <assert_failed>
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	f042 0201 	orr.w	r2, r2, #1
 8007cec:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	f042 0201 	orr.w	r2, r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	bd10      	pop	{r4, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	0802943a 	.word	0x0802943a

08007d04 <HAL_TIM_Base_Stop_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007d04:	6803      	ldr	r3, [r0, #0]
 8007d06:	4a29      	ldr	r2, [pc, #164]	; (8007dac <HAL_TIM_Base_Stop_IT+0xa8>)
 8007d08:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007d0e:	d037      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d14:	d034      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d16:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d030      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d02c      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d028      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d024      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d020      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d3e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d01c      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d46:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d018      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d014      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d010      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d5e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00c      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d008      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d004      	beq.n	8007d80 <HAL_TIM_Base_Stop_IT+0x7c>
 8007d76:	480e      	ldr	r0, [pc, #56]	; (8007db0 <HAL_TIM_Base_Stop_IT+0xac>)
 8007d78:	f240 1173 	movw	r1, #371	; 0x173
 8007d7c:	f7fa f8f0 	bl	8001f60 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d8a:	6a19      	ldr	r1, [r3, #32]
 8007d8c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007d90:	400a      	ands	r2, r1
 8007d92:	b942      	cbnz	r2, 8007da6 <HAL_TIM_Base_Stop_IT+0xa2>
 8007d94:	6a19      	ldr	r1, [r3, #32]
 8007d96:	f240 4244 	movw	r2, #1092	; 0x444
 8007d9a:	400a      	ands	r2, r1
 8007d9c:	b91a      	cbnz	r2, 8007da6 <HAL_TIM_Base_Stop_IT+0xa2>
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	f022 0201 	bic.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8007da6:	2000      	movs	r0, #0
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	0802943a 	.word	0x0802943a

08007db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007db4:	4770      	bx	lr

08007db6 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007db6:	4770      	bx	lr

08007db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	4770      	bx	lr

08007dba <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dbc:	6803      	ldr	r3, [r0, #0]
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dc6:	d514      	bpl.n	8007df2 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	0792      	lsls	r2, r2, #30
 8007dcc:	d511      	bpl.n	8007df2 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007dce:	f06f 0202 	mvn.w	r2, #2
 8007dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8007dd4:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dd6:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8007dd8:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dda:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8007ddc:	d002      	beq.n	8007de4 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8007dde:	f7ff ffea 	bl	8007db6 <HAL_TIM_IC_CaptureCallback>
 8007de2:	e004      	b.n	8007dee <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de4:	f7ff ffe6 	bl	8007db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7ff ffe5 	bl	8007db8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	2300      	movs	r3, #0
 8007df0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	691a      	ldr	r2, [r3, #16]
 8007df6:	0750      	lsls	r0, r2, #29
 8007df8:	d516      	bpl.n	8007e28 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	0751      	lsls	r1, r2, #29
 8007dfe:	d513      	bpl.n	8007e28 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e00:	f06f 0204 	mvn.w	r2, #4
 8007e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8007e06:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e08:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8007e0a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e0e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e10:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8007e12:	d002      	beq.n	8007e1a <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e14:	f7ff ffcf 	bl	8007db6 <HAL_TIM_IC_CaptureCallback>
 8007e18:	e004      	b.n	8007e24 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1a:	f7ff ffcb 	bl	8007db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f7ff ffca 	bl	8007db8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e24:	2300      	movs	r3, #0
 8007e26:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	0712      	lsls	r2, r2, #28
 8007e2e:	d515      	bpl.n	8007e5c <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	0710      	lsls	r0, r2, #28
 8007e34:	d512      	bpl.n	8007e5c <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e36:	f06f 0208 	mvn.w	r2, #8
 8007e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8007e3c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e3e:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8007e40:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e42:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e44:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8007e46:	d002      	beq.n	8007e4e <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e48:	f7ff ffb5 	bl	8007db6 <HAL_TIM_IC_CaptureCallback>
 8007e4c:	e004      	b.n	8007e58 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4e:	f7ff ffb1 	bl	8007db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff ffb0 	bl	8007db8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	06d2      	lsls	r2, r2, #27
 8007e62:	d516      	bpl.n	8007e92 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	06d0      	lsls	r0, r2, #27
 8007e68:	d513      	bpl.n	8007e92 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e6a:	f06f 0210 	mvn.w	r2, #16
 8007e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8007e70:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e72:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8007e74:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e78:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e7a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8007e7c:	d002      	beq.n	8007e84 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007e7e:	f7ff ff9a 	bl	8007db6 <HAL_TIM_IC_CaptureCallback>
 8007e82:	e004      	b.n	8007e8e <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e84:	f7ff ff96 	bl	8007db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7ff ff95 	bl	8007db8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	07d1      	lsls	r1, r2, #31
 8007e98:	d508      	bpl.n	8007eac <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	07d2      	lsls	r2, r2, #31
 8007e9e:	d505      	bpl.n	8007eac <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ea0:	f06f 0201 	mvn.w	r2, #1
 8007ea4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f7fb fc70 	bl	800378c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	691a      	ldr	r2, [r3, #16]
 8007eb0:	0610      	lsls	r0, r2, #24
 8007eb2:	d508      	bpl.n	8007ec6 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	0611      	lsls	r1, r2, #24
 8007eb8:	d505      	bpl.n	8007ec6 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007eba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ebe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7ff fc02 	bl	80076ca <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	0652      	lsls	r2, r2, #25
 8007ecc:	d508      	bpl.n	8007ee0 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	0650      	lsls	r0, r2, #25
 8007ed2:	d505      	bpl.n	8007ee0 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ed8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7ff ff6d 	bl	8007dba <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	0691      	lsls	r1, r2, #26
 8007ee6:	d50a      	bpl.n	8007efe <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	0692      	lsls	r2, r2, #26
 8007eec:	d507      	bpl.n	8007efe <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8007ef2:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ef4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8007ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8007efa:	f7ff bbe5 	b.w	80076c8 <HAL_TIMEx_CommutationCallback>
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007f00:	4a2e      	ldr	r2, [pc, #184]	; (8007fbc <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8007f02:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007f04:	4290      	cmp	r0, r2
 8007f06:	d012      	beq.n	8007f2e <TIM_Base_SetConfig+0x2e>
 8007f08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007f0c:	d00f      	beq.n	8007f2e <TIM_Base_SetConfig+0x2e>
 8007f0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007f12:	4290      	cmp	r0, r2
 8007f14:	d00b      	beq.n	8007f2e <TIM_Base_SetConfig+0x2e>
 8007f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f1a:	4290      	cmp	r0, r2
 8007f1c:	d007      	beq.n	8007f2e <TIM_Base_SetConfig+0x2e>
 8007f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f22:	4290      	cmp	r0, r2
 8007f24:	d003      	beq.n	8007f2e <TIM_Base_SetConfig+0x2e>
 8007f26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007f2a:	4290      	cmp	r0, r2
 8007f2c:	d118      	bne.n	8007f60 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007f2e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007f34:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007f36:	4a21      	ldr	r2, [pc, #132]	; (8007fbc <TIM_Base_SetConfig+0xbc>)
 8007f38:	4290      	cmp	r0, r2
 8007f3a:	d037      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007f40:	d034      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <TIM_Base_SetConfig+0xc0>)
 8007f44:	4290      	cmp	r0, r2
 8007f46:	d031      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f4c:	4290      	cmp	r0, r2
 8007f4e:	d02d      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f54:	4290      	cmp	r0, r2
 8007f56:	d029      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f58:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007f5c:	4290      	cmp	r0, r2
 8007f5e:	d025      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f60:	4a18      	ldr	r2, [pc, #96]	; (8007fc4 <TIM_Base_SetConfig+0xc4>)
 8007f62:	4290      	cmp	r0, r2
 8007f64:	d022      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f6a:	4290      	cmp	r0, r2
 8007f6c:	d01e      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f72:	4290      	cmp	r0, r2
 8007f74:	d01a      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f76:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007f7a:	4290      	cmp	r0, r2
 8007f7c:	d016      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f82:	4290      	cmp	r0, r2
 8007f84:	d012      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
 8007f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f8a:	4290      	cmp	r0, r2
 8007f8c:	d00e      	beq.n	8007fac <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8007f8e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f90:	688b      	ldr	r3, [r1, #8]
 8007f92:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007f94:	680b      	ldr	r3, [r1, #0]
 8007f96:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007f98:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <TIM_Base_SetConfig+0xbc>)
 8007f9a:	4298      	cmp	r0, r3
 8007f9c:	d00b      	beq.n	8007fb6 <TIM_Base_SetConfig+0xb6>
 8007f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fa2:	4298      	cmp	r0, r3
 8007fa4:	d007      	beq.n	8007fb6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	6143      	str	r3, [r0, #20]
 8007faa:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fac:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	e7eb      	b.n	8007f8e <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fb6:	690b      	ldr	r3, [r1, #16]
 8007fb8:	6303      	str	r3, [r0, #48]	; 0x30
 8007fba:	e7f4      	b.n	8007fa6 <TIM_Base_SetConfig+0xa6>
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40014000 	.word	0x40014000

08007fc8 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007fc8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007fca:	4604      	mov	r4, r0
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d065      	beq.n	800809c <HAL_TIM_Base_Init+0xd4>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8007fd0:	6803      	ldr	r3, [r0, #0]
 8007fd2:	4a33      	ldr	r2, [pc, #204]	; (80080a0 <HAL_TIM_Base_Init+0xd8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d036      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8007fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fdc:	d033      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8007fde:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d02f      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8007fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02b      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8007fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d027      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8007ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d023      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8007ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008002:	4293      	cmp	r3, r2
 8008004:	d01f      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8008006:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800800a:	4293      	cmp	r3, r2
 800800c:	d01b      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 800800e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008012:	4293      	cmp	r3, r2
 8008014:	d017      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8008016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800801a:	4293      	cmp	r3, r2
 800801c:	d013      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 800801e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008022:	4293      	cmp	r3, r2
 8008024:	d00f      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8008026:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800802a:	4293      	cmp	r3, r2
 800802c:	d00b      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 800802e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008032:	4293      	cmp	r3, r2
 8008034:	d007      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 8008036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <HAL_TIM_Base_Init+0x7e>
 800803e:	4819      	ldr	r0, [pc, #100]	; (80080a4 <HAL_TIM_Base_Init+0xdc>)
 8008040:	21d9      	movs	r1, #217	; 0xd9
 8008042:	f7f9 ff8d 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	f033 0210 	bics.w	r2, r3, #16
 800804c:	d009      	beq.n	8008062 <HAL_TIM_Base_Init+0x9a>
 800804e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008052:	2a20      	cmp	r2, #32
 8008054:	d005      	beq.n	8008062 <HAL_TIM_Base_Init+0x9a>
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	d003      	beq.n	8008062 <HAL_TIM_Base_Init+0x9a>
 800805a:	4812      	ldr	r0, [pc, #72]	; (80080a4 <HAL_TIM_Base_Init+0xdc>)
 800805c:	21da      	movs	r1, #218	; 0xda
 800805e:	f7f9 ff7f 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008062:	6923      	ldr	r3, [r4, #16]
 8008064:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8008068:	d006      	beq.n	8008078 <HAL_TIM_Base_Init+0xb0>
 800806a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806e:	d003      	beq.n	8008078 <HAL_TIM_Base_Init+0xb0>
 8008070:	480c      	ldr	r0, [pc, #48]	; (80080a4 <HAL_TIM_Base_Init+0xdc>)
 8008072:	21db      	movs	r1, #219	; 0xdb
 8008074:	f7f9 ff74 	bl	8001f60 <assert_failed>
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8008078:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800807c:	b913      	cbnz	r3, 8008084 <HAL_TIM_Base_Init+0xbc>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800807e:	4620      	mov	r0, r4
 8008080:	f7fa f8e8 	bl	8002254 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008084:	2302      	movs	r3, #2
 8008086:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	1d21      	adds	r1, r4, #4
 800808e:	f7ff ff37 	bl	8007f00 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008092:	2301      	movs	r3, #1
 8008094:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8008098:	2000      	movs	r0, #0
 800809a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800809c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800809e:	bd10      	pop	{r4, pc}
 80080a0:	40010000 	.word	0x40010000
 80080a4:	0802943a 	.word	0x0802943a

080080a8 <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080a8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80080aa:	4604      	mov	r4, r0
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d068      	beq.n	8008182 <HAL_TIM_PWM_Init+0xda>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80080b0:	6803      	ldr	r3, [r0, #0]
 80080b2:	4a35      	ldr	r2, [pc, #212]	; (8008188 <HAL_TIM_PWM_Init+0xe0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d037      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080bc:	d034      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d030      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d02c      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d028      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080da:	4293      	cmp	r3, r2
 80080dc:	d024      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d020      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080e6:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d01c      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080ee:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d018      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d014      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 80080fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008102:	4293      	cmp	r3, r2
 8008104:	d010      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 8008106:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800810a:	4293      	cmp	r3, r2
 800810c:	d00c      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 800810e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008112:	4293      	cmp	r3, r2
 8008114:	d008      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 8008116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800811a:	4293      	cmp	r3, r2
 800811c:	d004      	beq.n	8008128 <HAL_TIM_PWM_Init+0x80>
 800811e:	481b      	ldr	r0, [pc, #108]	; (800818c <HAL_TIM_PWM_Init+0xe4>)
 8008120:	f240 31e7 	movw	r1, #999	; 0x3e7
 8008124:	f7f9 ff1c 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008128:	68a3      	ldr	r3, [r4, #8]
 800812a:	f033 0210 	bics.w	r2, r3, #16
 800812e:	d00a      	beq.n	8008146 <HAL_TIM_PWM_Init+0x9e>
 8008130:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008134:	2a20      	cmp	r2, #32
 8008136:	d006      	beq.n	8008146 <HAL_TIM_PWM_Init+0x9e>
 8008138:	2b40      	cmp	r3, #64	; 0x40
 800813a:	d004      	beq.n	8008146 <HAL_TIM_PWM_Init+0x9e>
 800813c:	4813      	ldr	r0, [pc, #76]	; (800818c <HAL_TIM_PWM_Init+0xe4>)
 800813e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008142:	f7f9 ff0d 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800814c:	d007      	beq.n	800815e <HAL_TIM_PWM_Init+0xb6>
 800814e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008152:	d004      	beq.n	800815e <HAL_TIM_PWM_Init+0xb6>
 8008154:	480d      	ldr	r0, [pc, #52]	; (800818c <HAL_TIM_PWM_Init+0xe4>)
 8008156:	f240 31e9 	movw	r1, #1001	; 0x3e9
 800815a:	f7f9 ff01 	bl	8001f60 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 800815e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8008162:	b913      	cbnz	r3, 800816a <HAL_TIM_PWM_Init+0xc2>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008164:	4620      	mov	r0, r4
 8008166:	f7fa f885 	bl	8002274 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800816a:	2302      	movs	r3, #2
 800816c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	1d21      	adds	r1, r4, #4
 8008174:	f7ff fec4 	bl	8007f00 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008178:	2301      	movs	r3, #1
 800817a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800817e:	2000      	movs	r0, #0
 8008180:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8008182:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8008184:	bd10      	pop	{r4, pc}
 8008186:	bf00      	nop
 8008188:	40010000 	.word	0x40010000
 800818c:	0802943a 	.word	0x0802943a

08008190 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008190:	6a03      	ldr	r3, [r0, #32]
 8008192:	f023 0310 	bic.w	r3, r3, #16
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800819a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800819c:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800819e:	6847      	ldr	r7, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081a0:	6985      	ldr	r5, [r0, #24]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081a2:	f425 43e6 	bic.w	r3, r5, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80081a6:	680d      	ldr	r5, [r1, #0]
 80081a8:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80081ac:	4b22      	ldr	r3, [pc, #136]	; (8008238 <TIM_OC2_SetConfig+0xa8>)
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081ae:	f024 0220 	bic.w	r2, r4, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80081b2:	688c      	ldr	r4, [r1, #8]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80081b4:	4298      	cmp	r0, r3
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081b6:	4606      	mov	r6, r0
 80081b8:	4688      	mov	r8, r1
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80081ba:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80081be:	d003      	beq.n	80081c8 <TIM_OC2_SetConfig+0x38>
 80081c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c4:	4298      	cmp	r0, r3
 80081c6:	d12f      	bne.n	8008228 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80081c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081cc:	f033 0308 	bics.w	r3, r3, #8
 80081d0:	d004      	beq.n	80081dc <TIM_OC2_SetConfig+0x4c>
 80081d2:	481a      	ldr	r0, [pc, #104]	; (800823c <TIM_OC2_SetConfig+0xac>)
 80081d4:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80081d8:	f7f9 fec2 	bl	8001f60 <assert_failed>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80081dc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80081e0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80081e4:	d004      	beq.n	80081f0 <TIM_OC2_SetConfig+0x60>
 80081e6:	4815      	ldr	r0, [pc, #84]	; (800823c <TIM_OC2_SetConfig+0xac>)
 80081e8:	f241 11ba 	movw	r1, #4538	; 0x11ba
 80081ec:	f7f9 feb8 	bl	8001f60 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80081f0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80081f4:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80081f8:	d004      	beq.n	8008204 <TIM_OC2_SetConfig+0x74>
 80081fa:	4810      	ldr	r0, [pc, #64]	; (800823c <TIM_OC2_SetConfig+0xac>)
 80081fc:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8008200:	f7f9 feae 	bl	8001f60 <assert_failed>
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8008204:	f8d8 300c 	ldr.w	r3, [r8, #12]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8008208:	f8d8 2014 	ldr.w	r2, [r8, #20]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800820c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8008210:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008214:	f427 6340 	bic.w	r3, r7, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8008218:	f8d8 7018 	ldr.w	r7, [r8, #24]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800821c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008220:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8008224:	ea43 0787 	orr.w	r7, r3, r7, lsl #2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008228:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	6077      	str	r7, [r6, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800822e:	61b5      	str	r5, [r6, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008230:	63b3      	str	r3, [r6, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008232:	6234      	str	r4, [r6, #32]
 8008234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008238:	40010000 	.word	0x40010000
 800823c:	0802943a 	.word	0x0802943a

08008240 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 8008240:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008244:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8008246:	b570      	push	{r4, r5, r6, lr}
 8008248:	4604      	mov	r4, r0
 800824a:	460d      	mov	r5, r1
 800824c:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 800824e:	f000 8137 	beq.w	80084c0 <HAL_TIM_PWM_ConfigChannel+0x280>
 8008252:	2301      	movs	r3, #1
 8008254:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Check the parameters */ 
  assert_param(IS_TIM_CHANNELS(Channel)); 
 8008258:	f032 030c 	bics.w	r3, r2, #12
 800825c:	d006      	beq.n	800826c <HAL_TIM_PWM_ConfigChannel+0x2c>
 800825e:	2a18      	cmp	r2, #24
 8008260:	d004      	beq.n	800826c <HAL_TIM_PWM_ConfigChannel+0x2c>
 8008262:	4898      	ldr	r0, [pc, #608]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008264:	f640 411d 	movw	r1, #3101	; 0xc1d
 8008268:	f7f9 fe7a 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	f023 0310 	bic.w	r3, r3, #16
 8008272:	2b60      	cmp	r3, #96	; 0x60
 8008274:	d004      	beq.n	8008280 <HAL_TIM_PWM_ConfigChannel+0x40>
 8008276:	4893      	ldr	r0, [pc, #588]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008278:	f640 411e 	movw	r1, #3102	; 0xc1e
 800827c:	f7f9 fe70 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008280:	68ab      	ldr	r3, [r5, #8]
 8008282:	f033 0302 	bics.w	r3, r3, #2
 8008286:	d004      	beq.n	8008292 <HAL_TIM_PWM_ConfigChannel+0x52>
 8008288:	488e      	ldr	r0, [pc, #568]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800828a:	f640 411f 	movw	r1, #3103	; 0xc1f
 800828e:	f7f9 fe67 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_OCN_POLARITY(sConfig->OCNPolarity));
 8008292:	68eb      	ldr	r3, [r5, #12]
 8008294:	f033 0308 	bics.w	r3, r3, #8
 8008298:	d004      	beq.n	80082a4 <HAL_TIM_PWM_ConfigChannel+0x64>
 800829a:	488a      	ldr	r0, [pc, #552]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800829c:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80082a0:	f7f9 fe5e 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
 80082a4:	69ab      	ldr	r3, [r5, #24]
 80082a6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80082aa:	d004      	beq.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x76>
 80082ac:	4885      	ldr	r0, [pc, #532]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80082ae:	f640 4121 	movw	r1, #3105	; 0xc21
 80082b2:	f7f9 fe55 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));
 80082b6:	696b      	ldr	r3, [r5, #20]
 80082b8:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80082bc:	d004      	beq.n	80082c8 <HAL_TIM_PWM_ConfigChannel+0x88>
 80082be:	4881      	ldr	r0, [pc, #516]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80082c0:	f640 4122 	movw	r1, #3106	; 0xc22
 80082c4:	f7f9 fe4c 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80082c8:	692b      	ldr	r3, [r5, #16]
 80082ca:	f033 0304 	bics.w	r3, r3, #4
 80082ce:	d004      	beq.n	80082da <HAL_TIM_PWM_ConfigChannel+0x9a>
 80082d0:	487c      	ldr	r0, [pc, #496]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80082d2:	f640 4123 	movw	r1, #3107	; 0xc23
 80082d6:	f7f9 fe43 	bl	8001f60 <assert_failed>

  htim->State = HAL_TIM_STATE_BUSY;
 80082da:	2302      	movs	r3, #2
 80082dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  switch (Channel)
 80082e0:	2e0c      	cmp	r6, #12
 80082e2:	f200 80e6 	bhi.w	80084b2 <HAL_TIM_PWM_ConfigChannel+0x272>
 80082e6:	e8df f016 	tbh	[pc, r6, lsl #1]
 80082ea:	000d      	.short	0x000d
 80082ec:	00e400e4 	.word	0x00e400e4
 80082f0:	005200e4 	.word	0x005200e4
 80082f4:	00e400e4 	.word	0x00e400e4
 80082f8:	008900e4 	.word	0x008900e4
 80082fc:	00e400e4 	.word	0x00e400e4
 8008300:	00b600e4 	.word	0x00b600e4
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	4a70      	ldr	r2, [pc, #448]	; (80084c8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d02f      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d02c      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008312:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008316:	4293      	cmp	r3, r2
 8008318:	d028      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800831a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800831e:	4293      	cmp	r3, r2
 8008320:	d024      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008326:	4293      	cmp	r3, r2
 8008328:	d020      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800832a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800832e:	4293      	cmp	r3, r2
 8008330:	d01c      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008332:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008336:	4293      	cmp	r3, r2
 8008338:	d018      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800833a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800833e:	4293      	cmp	r3, r2
 8008340:	d014      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008346:	4293      	cmp	r3, r2
 8008348:	d010      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800834a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800834e:	4293      	cmp	r3, r2
 8008350:	d00c      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008356:	4293      	cmp	r3, r2
 8008358:	d008      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800835a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800835e:	4293      	cmp	r3, r2
 8008360:	d004      	beq.n	800836c <HAL_TIM_PWM_ConfigChannel+0x12c>
 8008362:	4858      	ldr	r0, [pc, #352]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008364:	f640 412b 	movw	r1, #3115	; 0xc2b
 8008368:	f7f9 fdfa 	bl	8001f60 <assert_failed>
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800836c:	4629      	mov	r1, r5
 800836e:	6820      	ldr	r0, [r4, #0]
 8008370:	f7ff fbc0 	bl	8007af4 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	699a      	ldr	r2, [r3, #24]
 8008378:	f042 0208 	orr.w	r2, r2, #8
 800837c:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800837e:	699a      	ldr	r2, [r3, #24]
 8008380:	f022 0204 	bic.w	r2, r2, #4
 8008384:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008386:	6999      	ldr	r1, [r3, #24]
 8008388:	692a      	ldr	r2, [r5, #16]
 800838a:	430a      	orrs	r2, r1
 800838c:	e034      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x1b8>
    }
    break;
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	4a4d      	ldr	r2, [pc, #308]	; (80084c8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01f      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 8008396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839a:	d01c      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 800839c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d018      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 80083a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d014      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 80083ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d010      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 80083b4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00c      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 80083bc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d008      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 80083c4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x196>
 80083cc:	483d      	ldr	r0, [pc, #244]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80083ce:	f640 413a 	movw	r1, #3130	; 0xc3a
 80083d2:	f7f9 fdc5 	bl	8001f60 <assert_failed>
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083d6:	4629      	mov	r1, r5
 80083d8:	6820      	ldr	r0, [r4, #0]
 80083da:	f7ff fed9 	bl	8008190 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083de:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80083e0:	6929      	ldr	r1, [r5, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083e8:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083ea:	699a      	ldr	r2, [r3, #24]
 80083ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80083f2:	699a      	ldr	r2, [r3, #24]
 80083f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80083f8:	619a      	str	r2, [r3, #24]
    }
    break;
 80083fa:	e05a      	b.n	80084b2 <HAL_TIM_PWM_ConfigChannel+0x272>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	4a32      	ldr	r2, [pc, #200]	; (80084c8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d017      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008408:	d014      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 800840a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800840e:	4293      	cmp	r3, r2
 8008410:	d010      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8008412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008416:	4293      	cmp	r3, r2
 8008418:	d00c      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 800841a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800841e:	4293      	cmp	r3, r2
 8008420:	d008      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8008422:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008426:	4293      	cmp	r3, r2
 8008428:	d004      	beq.n	8008434 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 800842a:	4826      	ldr	r0, [pc, #152]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800842c:	f640 4149 	movw	r1, #3145	; 0xc49
 8008430:	f7f9 fd96 	bl	8001f60 <assert_failed>
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008434:	4629      	mov	r1, r5
 8008436:	6820      	ldr	r0, [r4, #0]
 8008438:	f7ff fb88 	bl	8007b4c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	f042 0208 	orr.w	r2, r2, #8
 8008444:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	f022 0204 	bic.w	r2, r2, #4
 800844c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800844e:	69d9      	ldr	r1, [r3, #28]
 8008450:	692a      	ldr	r2, [r5, #16]
 8008452:	430a      	orrs	r2, r1
 8008454:	e02c      	b.n	80084b0 <HAL_TIM_PWM_ConfigChannel+0x270>
    }
    break;
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	4a1b      	ldr	r2, [pc, #108]	; (80084c8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d017      	beq.n	800848e <HAL_TIM_PWM_ConfigChannel+0x24e>
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d014      	beq.n	800848e <HAL_TIM_PWM_ConfigChannel+0x24e>
 8008464:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008468:	4293      	cmp	r3, r2
 800846a:	d010      	beq.n	800848e <HAL_TIM_PWM_ConfigChannel+0x24e>
 800846c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008470:	4293      	cmp	r3, r2
 8008472:	d00c      	beq.n	800848e <HAL_TIM_PWM_ConfigChannel+0x24e>
 8008474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008478:	4293      	cmp	r3, r2
 800847a:	d008      	beq.n	800848e <HAL_TIM_PWM_ConfigChannel+0x24e>
 800847c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008480:	4293      	cmp	r3, r2
 8008482:	d004      	beq.n	800848e <HAL_TIM_PWM_ConfigChannel+0x24e>
 8008484:	480f      	ldr	r0, [pc, #60]	; (80084c4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008486:	f640 4158 	movw	r1, #3160	; 0xc58
 800848a:	f7f9 fd69 	bl	8001f60 <assert_failed>
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800848e:	4629      	mov	r1, r5
 8008490:	6820      	ldr	r0, [r4, #0]
 8008492:	f7ff fbb3 	bl	8007bfc <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008496:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8008498:	6929      	ldr	r1, [r5, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084a2:	69da      	ldr	r2, [r3, #28]
 80084a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80084b0:	61da      	str	r2, [r3, #28]
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80084b2:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80084b4:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80084b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80084ba:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 80084be:	bd70      	pop	{r4, r5, r6, pc}
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
  __HAL_LOCK(htim);
 80084c0:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	0802943a 	.word	0x0802943a
 80084c8:	40010000 	.word	0x40010000

080084cc <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 80084cc:	4b26      	ldr	r3, [pc, #152]	; (8008568 <TIM_CCxChannelCmd+0x9c>)
 80084ce:	4298      	cmp	r0, r3
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	4616      	mov	r6, r2
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 80084d8:	d02f      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 80084da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80084de:	d02c      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 80084e0:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80084e4:	4298      	cmp	r0, r3
 80084e6:	d028      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 80084e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ec:	4298      	cmp	r0, r3
 80084ee:	d024      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 80084f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f4:	4298      	cmp	r0, r3
 80084f6:	d020      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 80084f8:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80084fc:	4298      	cmp	r0, r3
 80084fe:	d01c      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 8008500:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8008504:	4298      	cmp	r0, r3
 8008506:	d018      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 8008508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800850c:	4298      	cmp	r0, r3
 800850e:	d014      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 8008510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008514:	4298      	cmp	r0, r3
 8008516:	d010      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 8008518:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800851c:	4298      	cmp	r0, r3
 800851e:	d00c      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 8008520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008524:	4298      	cmp	r0, r3
 8008526:	d008      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 8008528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800852c:	4298      	cmp	r0, r3
 800852e:	d004      	beq.n	800853a <TIM_CCxChannelCmd+0x6e>
 8008530:	480e      	ldr	r0, [pc, #56]	; (800856c <TIM_CCxChannelCmd+0xa0>)
 8008532:	f241 213e 	movw	r1, #4670	; 0x123e
 8008536:	f7f9 fd13 	bl	8001f60 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800853a:	f035 030c 	bics.w	r3, r5, #12
 800853e:	d006      	beq.n	800854e <TIM_CCxChannelCmd+0x82>
 8008540:	2d18      	cmp	r5, #24
 8008542:	d004      	beq.n	800854e <TIM_CCxChannelCmd+0x82>
 8008544:	4809      	ldr	r0, [pc, #36]	; (800856c <TIM_CCxChannelCmd+0xa0>)
 8008546:	f241 213f 	movw	r1, #4671	; 0x123f
 800854a:	f7f9 fd09 	bl	8001f60 <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854e:	6a22      	ldr	r2, [r4, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8008550:	2301      	movs	r3, #1
 8008552:	40ab      	lsls	r3, r5

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008554:	ea22 0303 	bic.w	r3, r2, r3
 8008558:	6223      	str	r3, [r4, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800855a:	6a23      	ldr	r3, [r4, #32]
 800855c:	40ae      	lsls	r6, r5
 800855e:	ea46 0203 	orr.w	r2, r6, r3
 8008562:	6222      	str	r2, [r4, #32]
 8008564:	bd70      	pop	{r4, r5, r6, pc}
 8008566:	bf00      	nop
 8008568:	40010000 	.word	0x40010000
 800856c:	0802943a 	.word	0x0802943a

08008570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008570:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008572:	4a29      	ldr	r2, [pc, #164]	; (8008618 <HAL_TIM_PWM_Start+0xa8>)
 8008574:	6803      	ldr	r3, [r0, #0]
 8008576:	4293      	cmp	r3, r2
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800857c:	d012      	beq.n	80085a4 <HAL_TIM_PWM_Start+0x34>
 800857e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008582:	d00f      	beq.n	80085a4 <HAL_TIM_PWM_Start+0x34>
 8008584:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008588:	4293      	cmp	r3, r2
 800858a:	d00b      	beq.n	80085a4 <HAL_TIM_PWM_Start+0x34>
 800858c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008590:	4293      	cmp	r3, r2
 8008592:	d007      	beq.n	80085a4 <HAL_TIM_PWM_Start+0x34>
 8008594:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <HAL_TIM_PWM_Start+0x34>
 800859c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d102      	bne.n	80085aa <HAL_TIM_PWM_Start+0x3a>
 80085a4:	f034 020c 	bics.w	r2, r4, #12
 80085a8:	d01f      	beq.n	80085ea <HAL_TIM_PWM_Start+0x7a>
 80085aa:	4a1c      	ldr	r2, [pc, #112]	; (800861c <HAL_TIM_PWM_Start+0xac>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d103      	bne.n	80085b8 <HAL_TIM_PWM_Start+0x48>
 80085b0:	f034 0304 	bics.w	r3, r4, #4
 80085b4:	d114      	bne.n	80085e0 <HAL_TIM_PWM_Start+0x70>
 80085b6:	e018      	b.n	80085ea <HAL_TIM_PWM_Start+0x7a>
 80085b8:	4a19      	ldr	r2, [pc, #100]	; (8008620 <HAL_TIM_PWM_Start+0xb0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d101      	bne.n	80085c2 <HAL_TIM_PWM_Start+0x52>
 80085be:	b97c      	cbnz	r4, 80085e0 <HAL_TIM_PWM_Start+0x70>
 80085c0:	e013      	b.n	80085ea <HAL_TIM_PWM_Start+0x7a>
 80085c2:	4a18      	ldr	r2, [pc, #96]	; (8008624 <HAL_TIM_PWM_Start+0xb4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d0fa      	beq.n	80085be <HAL_TIM_PWM_Start+0x4e>
 80085c8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d0ef      	beq.n	80085b0 <HAL_TIM_PWM_Start+0x40>
 80085d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d0f2      	beq.n	80085be <HAL_TIM_PWM_Start+0x4e>
 80085d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085dc:	4293      	cmp	r3, r2
 80085de:	d0ee      	beq.n	80085be <HAL_TIM_PWM_Start+0x4e>
 80085e0:	4811      	ldr	r0, [pc, #68]	; (8008628 <HAL_TIM_PWM_Start+0xb8>)
 80085e2:	f240 4142 	movw	r1, #1090	; 0x442
 80085e6:	f7f9 fcbb 	bl	8001f60 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085ea:	2201      	movs	r2, #1
 80085ec:	6828      	ldr	r0, [r5, #0]
 80085ee:	4621      	mov	r1, r4
 80085f0:	f7ff ff6c 	bl	80084cc <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	4a08      	ldr	r2, [pc, #32]	; (8008618 <HAL_TIM_PWM_Start+0xa8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <HAL_TIM_PWM_Start+0x94>
 80085fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008600:	4293      	cmp	r3, r2
 8008602:	d103      	bne.n	800860c <HAL_TIM_PWM_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800860a:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	f042 0201 	orr.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8008614:	2000      	movs	r0, #0
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	40010000 	.word	0x40010000
 800861c:	40014000 	.word	0x40014000
 8008620:	40014400 	.word	0x40014400
 8008624:	40014800 	.word	0x40014800
 8008628:	0802943a 	.word	0x0802943a

0800862c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800862c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800862e:	4a35      	ldr	r2, [pc, #212]	; (8008704 <HAL_TIM_PWM_Stop+0xd8>)
 8008630:	6803      	ldr	r3, [r0, #0]
 8008632:	4293      	cmp	r3, r2
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 8008634:	4604      	mov	r4, r0
 8008636:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008638:	d012      	beq.n	8008660 <HAL_TIM_PWM_Stop+0x34>
 800863a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863e:	d00f      	beq.n	8008660 <HAL_TIM_PWM_Stop+0x34>
 8008640:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008644:	4293      	cmp	r3, r2
 8008646:	d00b      	beq.n	8008660 <HAL_TIM_PWM_Stop+0x34>
 8008648:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800864c:	4293      	cmp	r3, r2
 800864e:	d007      	beq.n	8008660 <HAL_TIM_PWM_Stop+0x34>
 8008650:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <HAL_TIM_PWM_Stop+0x34>
 8008658:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800865c:	4293      	cmp	r3, r2
 800865e:	d102      	bne.n	8008666 <HAL_TIM_PWM_Stop+0x3a>
 8008660:	f035 020c 	bics.w	r2, r5, #12
 8008664:	d01f      	beq.n	80086a6 <HAL_TIM_PWM_Stop+0x7a>
 8008666:	4a28      	ldr	r2, [pc, #160]	; (8008708 <HAL_TIM_PWM_Stop+0xdc>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d103      	bne.n	8008674 <HAL_TIM_PWM_Stop+0x48>
 800866c:	f035 0304 	bics.w	r3, r5, #4
 8008670:	d114      	bne.n	800869c <HAL_TIM_PWM_Stop+0x70>
 8008672:	e018      	b.n	80086a6 <HAL_TIM_PWM_Stop+0x7a>
 8008674:	4a25      	ldr	r2, [pc, #148]	; (800870c <HAL_TIM_PWM_Stop+0xe0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d101      	bne.n	800867e <HAL_TIM_PWM_Stop+0x52>
 800867a:	b97d      	cbnz	r5, 800869c <HAL_TIM_PWM_Stop+0x70>
 800867c:	e013      	b.n	80086a6 <HAL_TIM_PWM_Stop+0x7a>
 800867e:	4a24      	ldr	r2, [pc, #144]	; (8008710 <HAL_TIM_PWM_Stop+0xe4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d0fa      	beq.n	800867a <HAL_TIM_PWM_Stop+0x4e>
 8008684:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8008688:	4293      	cmp	r3, r2
 800868a:	d0ef      	beq.n	800866c <HAL_TIM_PWM_Stop+0x40>
 800868c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008690:	4293      	cmp	r3, r2
 8008692:	d0f2      	beq.n	800867a <HAL_TIM_PWM_Stop+0x4e>
 8008694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008698:	4293      	cmp	r3, r2
 800869a:	d0ee      	beq.n	800867a <HAL_TIM_PWM_Stop+0x4e>
 800869c:	481d      	ldr	r0, [pc, #116]	; (8008714 <HAL_TIM_PWM_Stop+0xe8>)
 800869e:	f240 4163 	movw	r1, #1123	; 0x463
 80086a2:	f7f9 fc5d 	bl	8001f60 <assert_failed>
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80086a6:	2200      	movs	r2, #0
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7ff ff0e 	bl	80084cc <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	4a14      	ldr	r2, [pc, #80]	; (8008704 <HAL_TIM_PWM_Stop+0xd8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <HAL_TIM_PWM_Stop+0x94>
 80086b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10d      	bne.n	80086dc <HAL_TIM_PWM_Stop+0xb0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80086c0:	6a19      	ldr	r1, [r3, #32]
 80086c2:	f241 1211 	movw	r2, #4369	; 0x1111
 80086c6:	400a      	ands	r2, r1
 80086c8:	b942      	cbnz	r2, 80086dc <HAL_TIM_PWM_Stop+0xb0>
 80086ca:	6a19      	ldr	r1, [r3, #32]
 80086cc:	f240 4244 	movw	r2, #1092	; 0x444
 80086d0:	400a      	ands	r2, r1
 80086d2:	b91a      	cbnz	r2, 80086dc <HAL_TIM_PWM_Stop+0xb0>
 80086d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086dc:	6a19      	ldr	r1, [r3, #32]
 80086de:	f241 1211 	movw	r2, #4369	; 0x1111
 80086e2:	400a      	ands	r2, r1
 80086e4:	b942      	cbnz	r2, 80086f8 <HAL_TIM_PWM_Stop+0xcc>
 80086e6:	6a19      	ldr	r1, [r3, #32]
 80086e8:	f240 4244 	movw	r2, #1092	; 0x444
 80086ec:	400a      	ands	r2, r1
 80086ee:	b91a      	cbnz	r2, 80086f8 <HAL_TIM_PWM_Stop+0xcc>
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	f022 0201 	bic.w	r2, r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
} 
 80086fe:	2000      	movs	r0, #0
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	40010000 	.word	0x40010000
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800
 8008714:	0802943a 	.word	0x0802943a

08008718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800871c:	4b98      	ldr	r3, [pc, #608]	; (8008980 <HAL_GPIO_Init+0x268>)
 800871e:	4298      	cmp	r0, r3
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008720:	4604      	mov	r4, r0
 8008722:	460d      	mov	r5, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008724:	d02b      	beq.n	800877e <HAL_GPIO_Init+0x66>
 8008726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800872a:	4298      	cmp	r0, r3
 800872c:	d027      	beq.n	800877e <HAL_GPIO_Init+0x66>
 800872e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008732:	4298      	cmp	r0, r3
 8008734:	d023      	beq.n	800877e <HAL_GPIO_Init+0x66>
 8008736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800873a:	4298      	cmp	r0, r3
 800873c:	d01f      	beq.n	800877e <HAL_GPIO_Init+0x66>
 800873e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008742:	4298      	cmp	r0, r3
 8008744:	d01b      	beq.n	800877e <HAL_GPIO_Init+0x66>
 8008746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874a:	4298      	cmp	r0, r3
 800874c:	d017      	beq.n	800877e <HAL_GPIO_Init+0x66>
 800874e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008752:	4298      	cmp	r0, r3
 8008754:	d013      	beq.n	800877e <HAL_GPIO_Init+0x66>
 8008756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875a:	4298      	cmp	r0, r3
 800875c:	d00f      	beq.n	800877e <HAL_GPIO_Init+0x66>
 800875e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008762:	4298      	cmp	r0, r3
 8008764:	d00b      	beq.n	800877e <HAL_GPIO_Init+0x66>
 8008766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800876a:	4298      	cmp	r0, r3
 800876c:	d007      	beq.n	800877e <HAL_GPIO_Init+0x66>
 800876e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008772:	4298      	cmp	r0, r3
 8008774:	d003      	beq.n	800877e <HAL_GPIO_Init+0x66>
 8008776:	4883      	ldr	r0, [pc, #524]	; (8008984 <HAL_GPIO_Init+0x26c>)
 8008778:	21c5      	movs	r1, #197	; 0xc5
 800877a:	f7f9 fbf1 	bl	8001f60 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800877e:	882b      	ldrh	r3, [r5, #0]
 8008780:	b91b      	cbnz	r3, 800878a <HAL_GPIO_Init+0x72>
 8008782:	4880      	ldr	r0, [pc, #512]	; (8008984 <HAL_GPIO_Init+0x26c>)
 8008784:	21c6      	movs	r1, #198	; 0xc6
 8008786:	f7f9 fbeb 	bl	8001f60 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800878a:	686b      	ldr	r3, [r5, #4]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d917      	bls.n	80087c0 <HAL_GPIO_Init+0xa8>
 8008790:	f1a3 0211 	sub.w	r2, r3, #17
 8008794:	2a01      	cmp	r2, #1
 8008796:	d913      	bls.n	80087c0 <HAL_GPIO_Init+0xa8>
 8008798:	497b      	ldr	r1, [pc, #492]	; (8008988 <HAL_GPIO_Init+0x270>)
 800879a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800879e:	428a      	cmp	r2, r1
 80087a0:	d00e      	beq.n	80087c0 <HAL_GPIO_Init+0xa8>
 80087a2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80087a6:	428b      	cmp	r3, r1
 80087a8:	d00a      	beq.n	80087c0 <HAL_GPIO_Init+0xa8>
 80087aa:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80087ae:	428a      	cmp	r2, r1
 80087b0:	d006      	beq.n	80087c0 <HAL_GPIO_Init+0xa8>
 80087b2:	4a76      	ldr	r2, [pc, #472]	; (800898c <HAL_GPIO_Init+0x274>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d003      	beq.n	80087c0 <HAL_GPIO_Init+0xa8>
 80087b8:	4872      	ldr	r0, [pc, #456]	; (8008984 <HAL_GPIO_Init+0x26c>)
 80087ba:	21c7      	movs	r1, #199	; 0xc7
 80087bc:	f7f9 fbd0 	bl	8001f60 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80087c0:	68ab      	ldr	r3, [r5, #8]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d903      	bls.n	80087ce <HAL_GPIO_Init+0xb6>
 80087c6:	486f      	ldr	r0, [pc, #444]	; (8008984 <HAL_GPIO_Init+0x26c>)
 80087c8:	21c8      	movs	r1, #200	; 0xc8
 80087ca:	f7f9 fbc9 	bl	8001f60 <assert_failed>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087ce:	2600      	movs	r6, #0

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80087d0:	2301      	movs	r3, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087d2:	682f      	ldr	r7, [r5, #0]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80087d4:	40b3      	lsls	r3, r6
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087d6:	401f      	ands	r7, r3

    if(iocurrent == ioposition)
 80087d8:	429f      	cmp	r7, r3
 80087da:	f040 80cb 	bne.w	8008974 <HAL_GPIO_Init+0x25c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087de:	686b      	ldr	r3, [r5, #4]
 80087e0:	f023 0310 	bic.w	r3, r3, #16
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d117      	bne.n	8008818 <HAL_GPIO_Init+0x100>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80087e8:	692b      	ldr	r3, [r5, #16]
 80087ea:	2b0d      	cmp	r3, #13
 80087ec:	d905      	bls.n	80087fa <HAL_GPIO_Init+0xe2>
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	d003      	beq.n	80087fa <HAL_GPIO_Init+0xe2>
 80087f2:	4864      	ldr	r0, [pc, #400]	; (8008984 <HAL_GPIO_Init+0x26c>)
 80087f4:	21d9      	movs	r1, #217	; 0xd9
 80087f6:	f7f9 fbb3 	bl	8001f60 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80087fa:	08f2      	lsrs	r2, r6, #3
 80087fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008800:	f006 0107 	and.w	r1, r6, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008804:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008806:	0089      	lsls	r1, r1, #2
 8008808:	230f      	movs	r3, #15
 800880a:	408b      	lsls	r3, r1
 800880c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008810:	692b      	ldr	r3, [r5, #16]
 8008812:	408b      	lsls	r3, r1
 8008814:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8008816:	6213      	str	r3, [r2, #32]
 8008818:	ea4f 0946 	mov.w	r9, r6, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800881c:	f04f 0803 	mov.w	r8, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008820:	6822      	ldr	r2, [r4, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008822:	686b      	ldr	r3, [r5, #4]
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008824:	fa08 f809 	lsl.w	r8, r8, r9
 8008828:	ea6f 0808 	mvn.w	r8, r8
 800882c:	ea08 0102 	and.w	r1, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008830:	f003 0203 	and.w	r2, r3, #3
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008834:	f023 0310 	bic.w	r3, r3, #16
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008838:	fa02 f209 	lsl.w	r2, r2, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800883c:	3b01      	subs	r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800883e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008840:	2b01      	cmp	r3, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8008842:	6022      	str	r2, [r4, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008844:	d817      	bhi.n	8008876 <HAL_GPIO_Init+0x15e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8008846:	68eb      	ldr	r3, [r5, #12]
 8008848:	2b03      	cmp	r3, #3
 800884a:	d903      	bls.n	8008854 <HAL_GPIO_Init+0x13c>
 800884c:	484d      	ldr	r0, [pc, #308]	; (8008984 <HAL_GPIO_Init+0x26c>)
 800884e:	21ec      	movs	r1, #236	; 0xec
 8008850:	f7f9 fb86 	bl	8001f60 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008854:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008856:	ea08 0203 	and.w	r2, r8, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 800885a:	68eb      	ldr	r3, [r5, #12]
 800885c:	fa03 f309 	lsl.w	r3, r3, r9
 8008860:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8008862:	60a3      	str	r3, [r4, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008864:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008866:	ea23 0207 	bic.w	r2, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800886a:	686b      	ldr	r3, [r5, #4]
 800886c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008870:	40b3      	lsls	r3, r6
 8008872:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8008874:	6063      	str	r3, [r4, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008876:	68e3      	ldr	r3, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008878:	6869      	ldr	r1, [r5, #4]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800887a:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800887e:	68ab      	ldr	r3, [r5, #8]
 8008880:	fa03 f309 	lsl.w	r3, r3, r9
 8008884:	ea48 0303 	orr.w	r3, r8, r3
      GPIOx->PUPDR = temp;
 8008888:	60e3      	str	r3, [r4, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800888a:	00cb      	lsls	r3, r1, #3
 800888c:	d572      	bpl.n	8008974 <HAL_GPIO_Init+0x25c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800888e:	4a40      	ldr	r2, [pc, #256]	; (8008990 <HAL_GPIO_Init+0x278>)
 8008890:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008896:	6453      	str	r3, [r2, #68]	; 0x44
 8008898:	f026 0203 	bic.w	r2, r6, #3
 800889c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80088a0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80088a4:	f006 0e03 	and.w	lr, r6, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80088a8:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80088aa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80088ae:	230f      	movs	r3, #15
 80088b0:	fa03 f30e 	lsl.w	r3, r3, lr
 80088b4:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80088b8:	4b31      	ldr	r3, [pc, #196]	; (8008980 <HAL_GPIO_Init+0x268>)
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d026      	beq.n	800890c <HAL_GPIO_Init+0x1f4>
 80088be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088c2:	429c      	cmp	r4, r3
 80088c4:	d024      	beq.n	8008910 <HAL_GPIO_Init+0x1f8>
 80088c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ca:	429c      	cmp	r4, r3
 80088cc:	d022      	beq.n	8008914 <HAL_GPIO_Init+0x1fc>
 80088ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088d2:	429c      	cmp	r4, r3
 80088d4:	d020      	beq.n	8008918 <HAL_GPIO_Init+0x200>
 80088d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088da:	429c      	cmp	r4, r3
 80088dc:	d01e      	beq.n	800891c <HAL_GPIO_Init+0x204>
 80088de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088e2:	429c      	cmp	r4, r3
 80088e4:	d01c      	beq.n	8008920 <HAL_GPIO_Init+0x208>
 80088e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ea:	429c      	cmp	r4, r3
 80088ec:	d01a      	beq.n	8008924 <HAL_GPIO_Init+0x20c>
 80088ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d018      	beq.n	8008928 <HAL_GPIO_Init+0x210>
 80088f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088fa:	429c      	cmp	r4, r3
 80088fc:	d016      	beq.n	800892c <HAL_GPIO_Init+0x214>
 80088fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008902:	429c      	cmp	r4, r3
 8008904:	bf0c      	ite	eq
 8008906:	2309      	moveq	r3, #9
 8008908:	230a      	movne	r3, #10
 800890a:	e010      	b.n	800892e <HAL_GPIO_Init+0x216>
 800890c:	2300      	movs	r3, #0
 800890e:	e00e      	b.n	800892e <HAL_GPIO_Init+0x216>
 8008910:	2301      	movs	r3, #1
 8008912:	e00c      	b.n	800892e <HAL_GPIO_Init+0x216>
 8008914:	2302      	movs	r3, #2
 8008916:	e00a      	b.n	800892e <HAL_GPIO_Init+0x216>
 8008918:	2303      	movs	r3, #3
 800891a:	e008      	b.n	800892e <HAL_GPIO_Init+0x216>
 800891c:	2304      	movs	r3, #4
 800891e:	e006      	b.n	800892e <HAL_GPIO_Init+0x216>
 8008920:	2305      	movs	r3, #5
 8008922:	e004      	b.n	800892e <HAL_GPIO_Init+0x216>
 8008924:	2306      	movs	r3, #6
 8008926:	e002      	b.n	800892e <HAL_GPIO_Init+0x216>
 8008928:	2307      	movs	r3, #7
 800892a:	e000      	b.n	800892e <HAL_GPIO_Init+0x216>
 800892c:	2308      	movs	r3, #8
 800892e:	fa03 f30e 	lsl.w	r3, r3, lr
 8008932:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008934:	4817      	ldr	r0, [pc, #92]	; (8008994 <HAL_GPIO_Init+0x27c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 8008936:	6093      	str	r3, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008938:	6803      	ldr	r3, [r0, #0]
        temp &= ~((uint32_t)iocurrent);
 800893a:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800893c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
        {
          temp |= iocurrent;
 8008940:	bf14      	ite	ne
 8008942:	433b      	orrne	r3, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8008944:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8008946:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 8008948:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800894a:	0388      	lsls	r0, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800894c:	4811      	ldr	r0, [pc, #68]	; (8008994 <HAL_GPIO_Init+0x27c>)

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800894e:	bf4c      	ite	mi
 8008950:	433b      	orrmi	r3, r7
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8008952:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8008954:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008956:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
        {
          temp |= iocurrent;
 800895c:	bf14      	ite	ne
 800895e:	433b      	orrne	r3, r7
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8008960:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8008962:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8008964:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008966:	0289      	lsls	r1, r1, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8008968:	bf54      	ite	pl
 800896a:	ea02 0703 	andpl.w	r7, r2, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800896e:	431f      	orrmi	r7, r3
        }
        EXTI->FTSR = temp;
 8008970:	4b08      	ldr	r3, [pc, #32]	; (8008994 <HAL_GPIO_Init+0x27c>)
 8008972:	60df      	str	r7, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008974:	3601      	adds	r6, #1
 8008976:	2e10      	cmp	r6, #16
 8008978:	f47f af2a 	bne.w	80087d0 <HAL_GPIO_Init+0xb8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800897c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008980:	40020000 	.word	0x40020000
 8008984:	08029489 	.word	0x08029489
 8008988:	10110000 	.word	0x10110000
 800898c:	10220000 	.word	0x10220000
 8008990:	40023800 	.word	0x40023800
 8008994:	40013c00 	.word	0x40013c00

08008998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800899c:	460c      	mov	r4, r1
 800899e:	b921      	cbnz	r1, 80089aa <HAL_GPIO_ReadPin+0x12>
 80089a0:	4805      	ldr	r0, [pc, #20]	; (80089b8 <HAL_GPIO_ReadPin+0x20>)
 80089a2:	f240 118b 	movw	r1, #395	; 0x18b
 80089a6:	f7f9 fadb 	bl	8001f60 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089aa:	692b      	ldr	r3, [r5, #16]
 80089ac:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80089ae:	bf14      	ite	ne
 80089b0:	2001      	movne	r0, #1
 80089b2:	2000      	moveq	r0, #0
 80089b4:	bd38      	pop	{r3, r4, r5, pc}
 80089b6:	bf00      	nop
 80089b8:	08029489 	.word	0x08029489

080089bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4605      	mov	r5, r0
 80089c0:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80089c2:	460c      	mov	r4, r1
 80089c4:	b921      	cbnz	r1, 80089d0 <HAL_GPIO_WritePin+0x14>
 80089c6:	4808      	ldr	r0, [pc, #32]	; (80089e8 <HAL_GPIO_WritePin+0x2c>)
 80089c8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80089cc:	f7f9 fac8 	bl	8001f60 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80089d0:	2e01      	cmp	r6, #1
 80089d2:	d905      	bls.n	80089e0 <HAL_GPIO_WritePin+0x24>
 80089d4:	4804      	ldr	r0, [pc, #16]	; (80089e8 <HAL_GPIO_WritePin+0x2c>)
 80089d6:	f240 11ad 	movw	r1, #429	; 0x1ad
 80089da:	f7f9 fac1 	bl	8001f60 <assert_failed>
 80089de:	e001      	b.n	80089e4 <HAL_GPIO_WritePin+0x28>

  if(PinState != GPIO_PIN_RESET)
 80089e0:	b906      	cbnz	r6, 80089e4 <HAL_GPIO_WritePin+0x28>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80089e2:	0424      	lsls	r4, r4, #16
 80089e4:	61ac      	str	r4, [r5, #24]
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	08029489 	.word	0x08029489

080089ec <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80089f0:	460d      	mov	r5, r1
 80089f2:	b921      	cbnz	r1, 80089fe <HAL_GPIO_TogglePin+0x12>
 80089f4:	4804      	ldr	r0, [pc, #16]	; (8008a08 <HAL_GPIO_TogglePin+0x1c>)
 80089f6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80089fa:	f7f9 fab1 	bl	8001f60 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 80089fe:	6961      	ldr	r1, [r4, #20]
 8008a00:	4069      	eors	r1, r5
 8008a02:	6161      	str	r1, [r4, #20]
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
 8008a06:	bf00      	nop
 8008a08:	08029489 	.word	0x08029489

08008a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008a0c:	4770      	bx	lr
	...

08008a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a10:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008a12:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008a14:	6959      	ldr	r1, [r3, #20]
 8008a16:	4208      	tst	r0, r1
 8008a18:	d002      	beq.n	8008a20 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a1a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a1c:	f7ff fff6 	bl	8008a0c <HAL_GPIO_EXTI_Callback>
 8008a20:	bd08      	pop	{r3, pc}
 8008a22:	bf00      	nop
 8008a24:	40013c00 	.word	0x40013c00

08008a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008a2c:	f7fb ffe0 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8008a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a34:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a38:	f7fd faee 	bl	8006018 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	4621      	mov	r1, r4
 8008a42:	2200      	movs	r2, #0
 8008a44:	f7fd fa92 	bl	8005f6c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8008a48:	2000      	movs	r0, #0
 8008a4a:	bd10      	pop	{r4, pc}

08008a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a4c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <HAL_Init+0x28>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a56:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a5e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a60:	2003      	movs	r0, #3
 8008a62:	f7fd fa67 	bl	8005f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a66:	200f      	movs	r0, #15
 8008a68:	f7ff ffde 	bl	8008a28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008a6c:	f7f9 fd10 	bl	8002490 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8008a70:	2000      	movs	r0, #0
 8008a72:	bd08      	pop	{r3, pc}
 8008a74:	40023c00 	.word	0x40023c00

08008a78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8008a78:	4a02      	ldr	r2, [pc, #8]	; (8008a84 <HAL_IncTick+0xc>)
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	2000dff0 	.word	0x2000dff0

08008a88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008a88:	4b01      	ldr	r3, [pc, #4]	; (8008a90 <HAL_GetTick+0x8>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
}
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	2000dff0 	.word	0x2000dff0

08008a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8008a94:	b513      	push	{r0, r1, r4, lr}
 8008a96:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8008a98:	f7ff fff6 	bl	8008a88 <HAL_GetTick>
 8008a9c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8008a9e:	f7ff fff3 	bl	8008a88 <HAL_GetTick>
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	1b00      	subs	r0, r0, r4
 8008aa6:	4298      	cmp	r0, r3
 8008aa8:	d3f9      	bcc.n	8008a9e <HAL_Delay+0xa>
  {
  }
}
 8008aaa:	b002      	add	sp, #8
 8008aac:	bd10      	pop	{r4, pc}
	...

08008ab0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8008ab0:	4b01      	ldr	r3, [pc, #4]	; (8008ab8 <HAL_GetREVID+0x8>)
 8008ab2:	6818      	ldr	r0, [r3, #0]
}
 8008ab4:	0c00      	lsrs	r0, r0, #16
 8008ab6:	4770      	bx	lr
 8008ab8:	e0042000 	.word	0xe0042000

08008abc <disk_initialize>:
  */
DSTATUS disk_initialize(BYTE pdrv)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <disk_initialize+0x18>)
 8008abe:	5c1a      	ldrb	r2, [r3, r0]
 8008ac0:	b932      	cbnz	r2, 8008ad0 <disk_initialize+0x14>
  { 
    disk.is_initialized[pdrv] = 1;
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize();
 8008ac6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4718      	bx	r3
  }
  return stat;
}
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	4770      	bx	lr
 8008ad4:	2000dff4 	.word	0x2000dff4

08008ad8 <disk_status>:
  */
DSTATUS disk_status(BYTE pdrv)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status();
 8008ad8:	4b02      	ldr	r3, [pc, #8]	; (8008ae4 <disk_status+0xc>)
 8008ada:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ade:	6843      	ldr	r3, [r0, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	4718      	bx	r3
 8008ae4:	2000dff4 	.word	0x2000dff4

08008ae8 <disk_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8008ae8:	b510      	push	{r4, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(buff, sector, count);
 8008aea:	4c06      	ldr	r4, [pc, #24]	; (8008b04 <disk_read+0x1c>)
 8008aec:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8008af0:	6840      	ldr	r0, [r0, #4]
 8008af2:	6884      	ldr	r4, [r0, #8]
 8008af4:	4608      	mov	r0, r1
 8008af6:	4611      	mov	r1, r2
 8008af8:	461a      	mov	r2, r3
 8008afa:	4623      	mov	r3, r4
  return res;
}
 8008afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(buff, sector, count);
 8008b00:	4718      	bx	r3
 8008b02:	bf00      	nop
 8008b04:	2000dff4 	.word	0x2000dff4

08008b08 <disk_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8008b08:	b510      	push	{r4, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(buff, sector, count);
 8008b0a:	4c06      	ldr	r4, [pc, #24]	; (8008b24 <disk_write+0x1c>)
 8008b0c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8008b10:	6840      	ldr	r0, [r0, #4]
 8008b12:	68c4      	ldr	r4, [r0, #12]
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4623      	mov	r3, r4
  return res;
}
 8008b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if _USE_WRITE == 1
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(buff, sector, count);
 8008b20:	4718      	bx	r3
 8008b22:	bf00      	nop
 8008b24:	2000dff4 	.word	0x2000dff4

08008b28 <disk_ioctl>:
#if _USE_IOCTL == 1
DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(cmd, buff);
 8008b28:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <disk_ioctl+0x10>)
 8008b2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b2e:	6843      	ldr	r3, [r0, #4]
 8008b30:	4608      	mov	r0, r1
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4718      	bx	r3
 8008b38:	2000dff4 	.word	0x2000dff4

08008b3c <get_fattime>:
  * @retval Time in DWORD
  */
DWORD get_fattime (void)
{
  return 0;
}
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	4770      	bx	lr

08008b40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008b40:	b510      	push	{r4, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8008b42:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <FATFS_LinkDriver+0x3c>)
 8008b44:	7a1a      	ldrb	r2, [r3, #8]
 8008b46:	2a01      	cmp	r2, #1
 8008b48:	d815      	bhi.n	8008b76 <FATFS_LinkDriver+0x36>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b4a:	7a1c      	ldrb	r4, [r3, #8]
 8008b4c:	b2e4      	uxtb	r4, r4
 8008b4e:	2200      	movs	r2, #0
 8008b50:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;  
 8008b52:	7a1c      	ldrb	r4, [r3, #8]
 8008b54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b58:	6060      	str	r0, [r4, #4]
    DiskNum = disk.nbr++;
 8008b5a:	7a18      	ldrb	r0, [r3, #8]
 8008b5c:	b2c0      	uxtb	r0, r0
 8008b5e:	1c44      	adds	r4, r0, #1
 8008b60:	b2e4      	uxtb	r4, r4
 8008b62:	721c      	strb	r4, [r3, #8]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8008b64:	233a      	movs	r3, #58	; 0x3a
  if(disk.nbr <= _VOLUMES)
  {
    disk.is_initialized[disk.nbr] = 0;
    disk.drv[disk.nbr] = drv;  
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
 8008b66:	3030      	adds	r0, #48	; 0x30
    path[1] = ':';
 8008b68:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008b6a:	232f      	movs	r3, #47	; 0x2f
  if(disk.nbr <= _VOLUMES)
  {
    disk.is_initialized[disk.nbr] = 0;
    disk.drv[disk.nbr] = drv;  
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
 8008b6c:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
    path[2] = '/';
 8008b6e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008b70:	70ca      	strb	r2, [r1, #3]
    ret = 0;
 8008b72:	4610      	mov	r0, r2
 8008b74:	bd10      	pop	{r4, pc}
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  uint8_t ret = 1;
 8008b76:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	bf00      	nop
 8008b7c:	2000dff4 	.word	0x2000dff4

08008b80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static 
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008b80:	3801      	subs	r0, #1
 8008b82:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008b84:	4291      	cmp	r1, r2
 8008b86:	d004      	beq.n	8008b92 <mem_cpy+0x12>
		*d++ = *s++;
 8008b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b8c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8008b90:	e7f8      	b.n	8008b84 <mem_cpy+0x4>
}
 8008b92:	4770      	bx	lr

08008b94 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b94:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8008b96:	4290      	cmp	r0, r2
 8008b98:	d002      	beq.n	8008ba0 <mem_set+0xc>
		*d++ = (BYTE)val;
 8008b9a:	f800 1b01 	strb.w	r1, [r0], #1
 8008b9e:	e7fa      	b.n	8008b96 <mem_set+0x2>
}
 8008ba0:	4770      	bx	lr
	...

08008ba4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4a18      	ldr	r2, [pc, #96]	; (8008c08 <chk_lock+0x64>)
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ba8:	2400      	movs	r4, #0
 8008baa:	4623      	mov	r3, r4
		if (Files[i].fs) {	/* Existing entry */
 8008bac:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8008bb0:	b175      	cbz	r5, 8008bd0 <chk_lock+0x2c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008bb2:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
 8008bb6:	42b5      	cmp	r5, r6
 8008bb8:	d10b      	bne.n	8008bd2 <chk_lock+0x2e>
 8008bba:	6816      	ldr	r6, [r2, #0]
 8008bbc:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8008bc0:	42ae      	cmp	r6, r5
 8008bc2:	d106      	bne.n	8008bd2 <chk_lock+0x2e>
				Files[i].clu == dp->sclust &&
 8008bc4:	8896      	ldrh	r6, [r2, #4]
 8008bc6:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8008bca:	42ae      	cmp	r6, r5
 8008bcc:	d101      	bne.n	8008bd2 <chk_lock+0x2e>
 8008bce:	e004      	b.n	8008bda <chk_lock+0x36>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 8008bd0:	2401      	movs	r4, #1
 8008bd2:	320c      	adds	r2, #12
)
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008bd4:	b97b      	cbnz	r3, 8008bf6 <chk_lock+0x52>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e7e8      	b.n	8008bac <chk_lock+0x8>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008bda:	b951      	cbnz	r1, 8008bf2 <chk_lock+0x4e>
 8008bdc:	4a0b      	ldr	r2, [pc, #44]	; (8008c0c <chk_lock+0x68>)
 8008bde:	210c      	movs	r1, #12
 8008be0:	fb01 2303 	mla	r3, r1, r3, r2
 8008be4:	895b      	ldrh	r3, [r3, #10]
 8008be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bea:	bf0c      	ite	eq
 8008bec:	2010      	moveq	r0, #16
 8008bee:	2000      	movne	r0, #0
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
 8008bf2:	2010      	movs	r0, #16
 8008bf4:	bd70      	pop	{r4, r5, r6, pc}
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008bf6:	b924      	cbnz	r4, 8008c02 <chk_lock+0x5e>
 8008bf8:	2902      	cmp	r1, #2
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2000      	moveq	r0, #0
 8008bfe:	2012      	movne	r0, #18
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	2000      	movs	r0, #0
 8008c04:	bd70      	pop	{r4, r5, r6, pc}
 8008c06:	bf00      	nop
 8008c08:	2000e008 	.word	0x2000e008
 8008c0c:	2000e004 	.word	0x2000e004

08008c10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4a24      	ldr	r2, [pc, #144]	; (8008ca4 <inc_lock+0x94>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8008c14:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
)
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c18:	2300      	movs	r3, #0
		if (Files[i].fs == dp->fs &&
 8008c1a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008c1e:	42b4      	cmp	r4, r6
 8008c20:	d109      	bne.n	8008c36 <inc_lock+0x26>
 8008c22:	6815      	ldr	r5, [r2, #0]
 8008c24:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
 8008c28:	42a5      	cmp	r5, r4
 8008c2a:	d104      	bne.n	8008c36 <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8008c2c:	8895      	ldrh	r5, [r2, #4]
 8008c2e:	f8b0 4206 	ldrh.w	r4, [r0, #518]	; 0x206
 8008c32:	42a5      	cmp	r5, r4
 8008c34:	d005      	beq.n	8008c42 <inc_lock+0x32>
)
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	f102 020c 	add.w	r2, r2, #12
 8008c3c:	d009      	beq.n	8008c52 <inc_lock+0x42>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e7eb      	b.n	8008c1a <inc_lock+0xa>
		Files[i].clu = dp->sclust;
		Files[i].idx = dp->index;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008c42:	b1c9      	cbz	r1, 8008c78 <inc_lock+0x68>
 8008c44:	4918      	ldr	r1, [pc, #96]	; (8008ca8 <inc_lock+0x98>)
 8008c46:	220c      	movs	r2, #12
 8008c48:	fb02 1203 	mla	r2, r2, r3, r1
 8008c4c:	8952      	ldrh	r2, [r2, #10]
 8008c4e:	b1da      	cbz	r2, 8008c88 <inc_lock+0x78>
 8008c50:	e023      	b.n	8008c9a <inc_lock+0x8a>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c52:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <inc_lock+0x98>)
 8008c54:	6814      	ldr	r4, [r2, #0]
 8008c56:	4615      	mov	r5, r2
 8008c58:	b30c      	cbz	r4, 8008c9e <inc_lock+0x8e>
 8008c5a:	68d2      	ldr	r2, [r2, #12]
 8008c5c:	b9ea      	cbnz	r2, 8008c9a <inc_lock+0x8a>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8008c5e:	220c      	movs	r2, #12
 8008c60:	435a      	muls	r2, r3
 8008c62:	18ac      	adds	r4, r5, r2
 8008c64:	50ae      	str	r6, [r5, r2]
		Files[i].clu = dp->sclust;
 8008c66:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8008c6a:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8008c6e:	8120      	strh	r0, [r4, #8]
		Files[i].ctr = 0;
 8008c70:	2000      	movs	r0, #0

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
		Files[i].clu = dp->sclust;
 8008c72:	6062      	str	r2, [r4, #4]
		Files[i].idx = dp->index;
		Files[i].ctr = 0;
 8008c74:	8160      	strh	r0, [r4, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008c76:	b939      	cbnz	r1, 8008c88 <inc_lock+0x78>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008c78:	490b      	ldr	r1, [pc, #44]	; (8008ca8 <inc_lock+0x98>)
 8008c7a:	220c      	movs	r2, #12
 8008c7c:	fb02 1203 	mla	r2, r2, r3, r1
 8008c80:	8952      	ldrh	r2, [r2, #10]
 8008c82:	3201      	adds	r2, #1
 8008c84:	b292      	uxth	r2, r2
 8008c86:	e001      	b.n	8008c8c <inc_lock+0x7c>
 8008c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c8c:	4806      	ldr	r0, [pc, #24]	; (8008ca8 <inc_lock+0x98>)
 8008c8e:	210c      	movs	r1, #12
 8008c90:	fb01 0103 	mla	r1, r1, r3, r0

	return i + 1;
 8008c94:	1c58      	adds	r0, r3, #1
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008c96:	814a      	strh	r2, [r1, #10]

	return i + 1;
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	e7dd      	b.n	8008c5e <inc_lock+0x4e>
 8008ca2:	bf00      	nop
 8008ca4:	2000e008 	.word	0x2000e008
 8008ca8:	2000e004 	.word	0x2000e004

08008cac <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008cac:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008cb0:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008cb4:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008cb6:	0a49      	lsrs	r1, r1, #9
 8008cb8:	f892 0202 	ldrb.w	r0, [r2, #514]	; 0x202
 8008cbc:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008cc0:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8008cc2:	b130      	cbz	r0, 8008cd2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008cc4:	4281      	cmp	r1, r0
 8008cc6:	d302      	bcc.n	8008cce <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008cc8:	1a09      	subs	r1, r1, r0
 8008cca:	3308      	adds	r3, #8
	}
 8008ccc:	e7f8      	b.n	8008cc0 <clmt_clust+0x14>
	return cl + *tbl;	/* Return the cluster number */
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	18c8      	adds	r0, r1, r3
}
 8008cd2:	4770      	bx	lr

08008cd4 <get_ldnumber>:
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
 8008cd4:	6803      	ldr	r3, [r0, #0]

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008cd6:	b510      	push	{r4, lr}
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
 8008cd8:	b193      	cbz	r3, 8008d00 <get_ldnumber+0x2c>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4614      	mov	r4, r2
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008cde:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008ce2:	2920      	cmp	r1, #32
 8008ce4:	d90a      	bls.n	8008cfc <get_ldnumber+0x28>
 8008ce6:	293a      	cmp	r1, #58	; 0x3a
 8008ce8:	d1f8      	bne.n	8008cdc <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8008cea:	461a      	mov	r2, r3
 8008cec:	f812 1b01 	ldrb.w	r1, [r2], #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008cf0:	4294      	cmp	r4, r2
 8008cf2:	d105      	bne.n	8008d00 <get_ldnumber+0x2c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008cf4:	2930      	cmp	r1, #48	; 0x30
 8008cf6:	d103      	bne.n	8008d00 <get_ldnumber+0x2c>
					vol = (int)i;
					*path = ++tt;
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	bd10      	pop	{r4, pc}
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008d04:	bd10      	pop	{r4, pc}

08008d06 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008d06:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8008d08:	b1a8      	cbz	r0, 8008d36 <validate+0x30>
 8008d0a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8008d0e:	b193      	cbz	r3, 8008d36 <validate+0x30>
 8008d10:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8008d14:	b17a      	cbz	r2, 8008d36 <validate+0x30>
 8008d16:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8008d1a:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8008d1e:	4291      	cmp	r1, r2
 8008d20:	d109      	bne.n	8008d36 <validate+0x30>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 8008d22:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008d26:	f7ff fed7 	bl	8008ad8 <disk_status>
 8008d2a:	f010 0f01 	tst.w	r0, #1
		return FR_NOT_READY;

	return FR_OK;
 8008d2e:	bf14      	ite	ne
 8008d30:	2003      	movne	r0, #3
 8008d32:	2000      	moveq	r0, #0
 8008d34:	bd08      	pop	{r3, pc}
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
 8008d36:	2009      	movs	r0, #9

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
 8008d38:	bd08      	pop	{r3, pc}

08008d3a <ld_clust.isra.0>:
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8008d3a:	7eca      	ldrb	r2, [r1, #27]
 8008d3c:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8008d3e:	2803      	cmp	r0, #3
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8008d40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 8008d44:	bf01      	itttt	eq
 8008d46:	7d48      	ldrbeq	r0, [r1, #21]
 8008d48:	7d0a      	ldrbeq	r2, [r1, #20]
 8008d4a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008d4e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16

	return cl;
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	4770      	bx	lr

08008d56 <sync_window.part.2>:
/*-----------------------------------------------------------------------*/
/* Move/Flush disk access window in the file system object               */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT sync_window (
 8008d56:	b570      	push	{r4, r5, r6, lr}
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
 8008d58:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
/*-----------------------------------------------------------------------*/
/* Move/Flush disk access window in the file system object               */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT sync_window (
 8008d5c:	4604      	mov	r4, r0
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
 8008d5e:	4621      	mov	r1, r4
 8008d60:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8008d64:	462a      	mov	r2, r5
 8008d66:	2301      	movs	r3, #1
 8008d68:	f7ff fece 	bl	8008b08 <disk_write>
 8008d6c:	b9d0      	cbnz	r0, 8008da4 <sync_window.part.2+0x4e>
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d6e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8008d72:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218

	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
 8008d76:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d7a:	1aeb      	subs	r3, r5, r3
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d301      	bcc.n	8008d84 <sync_window.part.2+0x2e>
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win.d8, wsect, 1);
			}
		}
	}
	return FR_OK;
 8008d80:	2000      	movs	r0, #0
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d84:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8008d88:	2e01      	cmp	r6, #1
 8008d8a:	d9f9      	bls.n	8008d80 <sync_window.part.2+0x2a>
				wsect += fs->fsize;
 8008d8c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
				disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008d90:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
				wsect += fs->fsize;
 8008d94:	441d      	add	r5, r3
				disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008d96:	4621      	mov	r1, r4
 8008d98:	462a      	mov	r2, r5
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f7ff feb4 	bl	8008b08 <disk_write>
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008da0:	3e01      	subs	r6, #1
 8008da2:	e7f1      	b.n	8008d88 <sync_window.part.2+0x32>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win.d8, wsect, 1))
			return FR_DISK_ERR;
 8008da4:	2001      	movs	r0, #1
				disk_write(fs->drv, fs->win.d8, wsect, 1);
			}
		}
	}
	return FR_OK;
}
 8008da6:	bd70      	pop	{r4, r5, r6, pc}

08008da8 <sync_window>:
{
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008da8:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8008dac:	b10b      	cbz	r3, 8008db2 <sync_window+0xa>
 8008dae:	f7ff bfd2 	b.w	8008d56 <sync_window.part.2>
				disk_write(fs->drv, fs->win.d8, wsect, 1);
			}
		}
	}
	return FR_OK;
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	4770      	bx	lr

08008db6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8008db6:	b570      	push	{r4, r5, r6, lr}
 8008db8:	4604      	mov	r4, r0
	FRESULT res;


	res = sync_window(fs);
 8008dba:	f7ff fff5 	bl	8008da8 <sync_window>
 8008dbe:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008dc0:	2d00      	cmp	r5, #0
 8008dc2:	d155      	bne.n	8008e70 <sync_fs+0xba>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008dc4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d148      	bne.n	8008e5e <sync_fs+0xa8>
 8008dcc:	f894 6205 	ldrb.w	r6, [r4, #517]	; 0x205
 8008dd0:	2e01      	cmp	r6, #1
 8008dd2:	d144      	bne.n	8008e5e <sync_fs+0xa8>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ddc:	f7ff feda 	bl	8008b94 <mem_set>
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
 8008de0:	2355      	movs	r3, #85	; 0x55
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
 8008de2:	2241      	movs	r2, #65	; 0x41
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
 8008de4:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
 8008de8:	23aa      	movs	r3, #170	; 0xaa
 8008dea:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
 8008dee:	70e2      	strb	r2, [r4, #3]
 8008df0:	2352      	movs	r3, #82	; 0x52
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 8008df2:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
 8008df6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
 8008dfa:	7023      	strb	r3, [r4, #0]
 8008dfc:	7063      	strb	r3, [r4, #1]
 8008dfe:	2361      	movs	r3, #97	; 0x61
 8008e00:	70a3      	strb	r3, [r4, #2]
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 8008e02:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
 8008e06:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008e0a:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
 8008e0e:	f884 31e9 	strb.w	r3, [r4, #489]	; 0x1e9
 8008e12:	0c13      	lsrs	r3, r2, #16
 8008e14:	0e12      	lsrs	r2, r2, #24
 8008e16:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
 8008e1a:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
 8008e1e:	f884 31ea 	strb.w	r3, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
 8008e22:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008e26:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8008e2a:	f884 31ed 	strb.w	r3, [r4, #493]	; 0x1ed
 8008e2e:	0c13      	lsrs	r3, r2, #16
 8008e30:	0e12      	lsrs	r2, r2, #24
 8008e32:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008e36:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
 8008e3a:	f884 31ee 	strb.w	r3, [r4, #494]	; 0x1ee
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 8008e3e:	2172      	movs	r1, #114	; 0x72
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008e40:	3201      	adds	r2, #1
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);
			ST_DWORD(fs->win.d8+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win.d8+FSI_StrucSig, 0x61417272);
 8008e42:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
 8008e46:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
			ST_DWORD(fs->win.d8+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win.d8+FSI_Nxt_Free, fs->last_clust);
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008e4a:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008e4e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008e52:	4621      	mov	r1, r4
 8008e54:	4633      	mov	r3, r6
 8008e56:	f7ff fe57 	bl	8008b08 <disk_write>
			fs->fsi_flag = 0;
 8008e5a:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008e64:	460a      	mov	r2, r1
 8008e66:	f7ff fe5f 	bl	8008b28 <disk_ioctl>
 8008e6a:	3000      	adds	r0, #0
 8008e6c:	bf18      	it	ne
 8008e6e:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 8008e70:	bd70      	pop	{r4, r5, r6, pc}

08008e72 <move_window>:
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
	if (sector != fs->winsect) {	/* Changed current window */
 8008e72:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8008e76:	4299      	cmp	r1, r3
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	460e      	mov	r6, r1
	if (sector != fs->winsect) {	/* Changed current window */
 8008e7e:	d011      	beq.n	8008ea4 <move_window+0x32>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8008e80:	f7ff ff92 	bl	8008da8 <sync_window>
 8008e84:	4604      	mov	r4, r0
 8008e86:	b108      	cbz	r0, 8008e8c <move_window+0x1a>
			return FR_DISK_ERR;
 8008e88:	2401      	movs	r4, #1
 8008e8a:	e00c      	b.n	8008ea6 <move_window+0x34>
#endif
		if (disk_read(fs->drv, fs->win.d8, sector, 1))
 8008e8c:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8008e90:	4629      	mov	r1, r5
 8008e92:	4632      	mov	r2, r6
 8008e94:	2301      	movs	r3, #1
 8008e96:	f7ff fe27 	bl	8008ae8 <disk_read>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d1f4      	bne.n	8008e88 <move_window+0x16>
			return FR_DISK_ERR;
		fs->winsect = sector;
 8008e9e:	f8c5 622c 	str.w	r6, [r5, #556]	; 0x22c
 8008ea2:	e000      	b.n	8008ea6 <move_window+0x34>
	}

	return FR_OK;
 8008ea4:	2400      	movs	r4, #0
}
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008eac <check_fs>:
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008eac:	2300      	movs	r3, #0
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008eae:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008eb0:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8008eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb8:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008ebc:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008ebe:	f7ff ffd8 	bl	8008e72 <move_window>
 8008ec2:	bb80      	cbnz	r0, 8008f26 <check_fs+0x7a>
		return 3;

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008ec4:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8008ec8:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8008ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ed0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d128      	bne.n	8008f2a <check_fs+0x7e>
		return 2;

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008ed8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008edc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8008ee0:	041b      	lsls	r3, r3, #16
 8008ee2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ee6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8008eea:	4313      	orrs	r3, r2
 8008eec:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8008ef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ef4:	4a0e      	ldr	r2, [pc, #56]	; (8008f30 <check_fs+0x84>)
 8008ef6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d016      	beq.n	8008f2c <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008efe:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8008f02:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
 8008f06:	041b      	lsls	r3, r3, #16
 8008f08:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8008f0c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8008f10:	4303      	orrs	r3, r0
 8008f12:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 8008f16:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8008f1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
 8008f1e:	1a80      	subs	r0, r0, r2
 8008f20:	bf18      	it	ne
 8008f22:	2001      	movne	r0, #1
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	2003      	movs	r0, #3
 8008f28:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 8008f2a:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	bf00      	nop
 8008f30:	00544146 	.word	0x00544146

08008f34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	6003      	str	r3, [r0, #0]
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	4607      	mov	r7, r0
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
 8008f3e:	4608      	mov	r0, r1
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008f40:	4615      	mov	r5, r2
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
 8008f42:	f7ff fec7 	bl	8008cd4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f46:	1e06      	subs	r6, r0, #0
 8008f48:	f2c0 8177 	blt.w	800923a <find_volume+0x306>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f4c:	4bc0      	ldr	r3, [pc, #768]	; (8009250 <find_volume+0x31c>)
 8008f4e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	f000 8173 	beq.w	800923e <find_volume+0x30a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008f58:	603c      	str	r4, [r7, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008f5a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008f5e:	b18b      	cbz	r3, 8008f84 <find_volume+0x50>
		stat = disk_status(fs->drv);
 8008f60:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008f64:	f7ff fdb8 	bl	8008ad8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008f68:	07c7      	lsls	r7, r0, #31
 8008f6a:	d40b      	bmi.n	8008f84 <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	f000 8168 	beq.w	8009242 <find_volume+0x30e>
 8008f72:	f000 0304 	and.w	r3, r0, #4
 8008f76:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8166 	beq.w	800924c <find_volume+0x318>
				return FR_WRITE_PROTECTED;
 8008f80:	200a      	movs	r0, #10
 8008f82:	e163      	b.n	800924c <find_volume+0x318>

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008f84:	b2f0      	uxtb	r0, r6
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008f86:	2300      	movs	r3, #0
 8008f88:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008f8c:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008f90:	f7ff fd94 	bl	8008abc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008f94:	07c6      	lsls	r6, r0, #31
 8008f96:	f100 8156 	bmi.w	8009246 <find_volume+0x312>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008f9a:	b10d      	cbz	r5, 8008fa0 <find_volume+0x6c>
 8008f9c:	0741      	lsls	r1, r0, #29
 8008f9e:	d4ef      	bmi.n	8008f80 <find_volume+0x4c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	f7ff ff82 	bl	8008eac <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008fa8:	2801      	cmp	r0, #1
 8008faa:	d128      	bne.n	8008ffe <find_volume+0xca>
 8008fac:	4621      	mov	r1, r4
 8008fae:	2000      	movs	r0, #0
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win.d8+MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008fb0:	f891 31c2 	ldrb.w	r3, [r1, #450]	; 0x1c2
 8008fb4:	b16b      	cbz	r3, 8008fd2 <find_volume+0x9e>
 8008fb6:	f891 31c8 	ldrb.w	r3, [r1, #456]	; 0x1c8
 8008fba:	f891 21c9 	ldrb.w	r2, [r1, #457]	; 0x1c9
 8008fbe:	041b      	lsls	r3, r3, #16
 8008fc0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008fc4:	f891 21c6 	ldrb.w	r2, [r1, #454]	; 0x1c6
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	f891 21c7 	ldrb.w	r2, [r1, #455]	; 0x1c7
 8008fce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fd2:	f84d 3020 	str.w	r3, [sp, r0, lsl #2]
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	2804      	cmp	r0, #4
 8008fda:	f101 0110 	add.w	r1, r1, #16
 8008fde:	d1e7      	bne.n	8008fb0 <find_volume+0x7c>
 8008fe0:	2600      	movs	r6, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008fe2:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008fe6:	b12d      	cbz	r5, 8008ff4 <find_volume+0xc0>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	4629      	mov	r1, r5
 8008fec:	f7ff ff5e 	bl	8008eac <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008ff0:	b908      	cbnz	r0, 8008ff6 <find_volume+0xc2>
 8008ff2:	e00b      	b.n	800900c <find_volume+0xd8>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008ff4:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	2e04      	cmp	r6, #4
 8008ffa:	d1f2      	bne.n	8008fe2 <find_volume+0xae>
 8008ffc:	e000      	b.n	8009000 <find_volume+0xcc>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008ffe:	2500      	movs	r5, #0
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009000:	2803      	cmp	r0, #3
 8009002:	f000 8122 	beq.w	800924a <find_volume+0x316>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009006:	b108      	cbz	r0, 800900c <find_volume+0xd8>
 8009008:	200d      	movs	r0, #13
 800900a:	e11f      	b.n	800924c <find_volume+0x318>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800900c:	7b22      	ldrb	r2, [r4, #12]
 800900e:	7ae3      	ldrb	r3, [r4, #11]
 8009010:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009018:	d1f6      	bne.n	8009008 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win.d8+BPB_FATSz16);				/* Number of sectors per FAT */
 800901a:	7de0      	ldrb	r0, [r4, #23]
 800901c:	7da3      	ldrb	r3, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8+BPB_FATSz32);
 800901e:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
 8009022:	d10d      	bne.n	8009040 <find_volume+0x10c>
 8009024:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8009028:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
 800902c:	041b      	lsls	r3, r3, #16
 800902e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009032:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8009036:	4303      	orrs	r3, r0
 8009038:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800903c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	fs->fsize = fasize;

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009040:	7c26      	ldrb	r6, [r4, #16]
	if (LD_WORD(fs->win.d8+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win.d8+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win.d8+BPB_FATSz32);
	fs->fsize = fasize;
 8009042:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009046:	1e73      	subs	r3, r6, #1
 8009048:	2b01      	cmp	r3, #1

	fasize = LD_WORD(fs->win.d8+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win.d8+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800904a:	f884 6203 	strb.w	r6, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800904e:	d8db      	bhi.n	8009008 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009050:	7b63      	ldrb	r3, [r4, #13]
 8009052:	f884 3202 	strb.w	r3, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0d6      	beq.n	8009008 <find_volume+0xd4>
 800905a:	1e5a      	subs	r2, r3, #1
 800905c:	421a      	tst	r2, r3
 800905e:	d1d3      	bne.n	8009008 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win.d8+BPB_RootEntCnt);	/* Number of root directory entries */
 8009060:	7c62      	ldrb	r2, [r4, #17]
 8009062:	7ca7      	ldrb	r7, [r4, #18]
 8009064:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 8009068:	073a      	lsls	r2, r7, #28

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win.d8+BPB_RootEntCnt);	/* Number of root directory entries */
 800906a:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 800906e:	d1cb      	bne.n	8009008 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win.d8+BPB_TotSec16);				/* Number of sectors on the volume */
 8009070:	7d21      	ldrb	r1, [r4, #20]
 8009072:	7ce2      	ldrb	r2, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8+BPB_TotSec32);
 8009074:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8009078:	d10d      	bne.n	8009096 <find_volume+0x162>
 800907a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800907e:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8009082:	0412      	lsls	r2, r2, #16
 8009084:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009088:	f894 1020 	ldrb.w	r1, [r4, #32]
 800908c:	430a      	orrs	r2, r1
 800908e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8009092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

	nrsv = LD_WORD(fs->win.d8+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8009096:	f894 e00f 	ldrb.w	lr, [r4, #15]
 800909a:	7ba1      	ldrb	r1, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800909c:	ea51 210e 	orrs.w	r1, r1, lr, lsl #8
 80090a0:	d0b2      	beq.n	8009008 <find_volume+0xd4>
	fs->fsize = fasize;

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80090a2:	fb06 fe00 	mul.w	lr, r6, r0
 80090a6:	eb01 1c17 	add.w	ip, r1, r7, lsr #4

	nrsv = LD_WORD(fs->win.d8+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 80090aa:	44f4      	add	ip, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80090ac:	4562      	cmp	r2, ip
 80090ae:	d3ab      	bcc.n	8009008 <find_volume+0xd4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80090b0:	ebcc 0202 	rsb	r2, ip, r2
 80090b4:	fbb2 f3f3 	udiv	r3, r2, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0a5      	beq.n	8009008 <find_volume+0xd4>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80090bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d906      	bls.n	80090d2 <find_volume+0x19e>
 80090c4:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 80090c8:	42b3      	cmp	r3, r6
 80090ca:	bf8c      	ite	hi
 80090cc:	2603      	movhi	r6, #3
 80090ce:	2602      	movls	r6, #2
 80090d0:	e000      	b.n	80090d4 <find_volume+0x1a0>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
 80090d2:	2601      	movs	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80090d4:	186a      	adds	r2, r5, r1
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80090d6:	3302      	adds	r3, #2
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
 80090d8:	eb0c 0105 	add.w	r1, ip, r5
	if (fmt == FS_FAT32) {
 80090dc:	2e03      	cmp	r6, #3
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80090de:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80090e2:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80090e6:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80090ea:	f8c4 1228 	str.w	r1, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80090ee:	d113      	bne.n	8009118 <find_volume+0x1e4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	d189      	bne.n	8009008 <find_volume+0xd4>
		fs->dirbase = LD_DWORD(fs->win.d8+BPB_RootClus);	/* Root directory start cluster */
 80090f4:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80090f8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80090fc:	0412      	lsls	r2, r2, #16
 80090fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009102:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8009106:	430a      	orrs	r2, r1
 8009108:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 800910c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009110:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	e00f      	b.n	8009138 <find_volume+0x204>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009118:	2f00      	cmp	r7, #0
 800911a:	f43f af75 	beq.w	8009008 <find_volume+0xd4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800911e:	4472      	add	r2, lr
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009120:	2e02      	cmp	r6, #2
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win.d8+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009122:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8009126:	ea4f 0243 	mov.w	r2, r3, lsl #1
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800912a:	bf1b      	ittet	ne
 800912c:	18d2      	addne	r2, r2, r3
 800912e:	f003 0301 	andne.w	r3, r3, #1
 8009132:	4613      	moveq	r3, r2
 8009134:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 8009138:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800913c:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
 8009140:	f4ff af62 	bcc.w	8009008 <find_volume+0xd4>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009144:	f04f 33ff 	mov.w	r3, #4294967295
 8009148:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 800914c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009150:	2e03      	cmp	r6, #3
#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009152:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009156:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800915a:	d157      	bne.n	800920c <find_volume+0x2d8>
		&& LD_WORD(fs->win.d8+BPB_FSInfo) == 1
 800915c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8009160:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009168:	2b01      	cmp	r3, #1
 800916a:	d14f      	bne.n	800920c <find_volume+0x2d8>
		&& move_window(fs, bsect + 1) == FR_OK)
 800916c:	4620      	mov	r0, r4
 800916e:	1c69      	adds	r1, r5, #1
 8009170:	f7ff fe7f 	bl	8008e72 <move_window>
 8009174:	2800      	cmp	r0, #0
 8009176:	d149      	bne.n	800920c <find_volume+0x2d8>
	{
		fs->fsi_flag = 0;
		if (LD_WORD(fs->win.d8+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009178:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800917c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win.d8+BPB_FSInfo) == 1
		&& move_window(fs, bsect + 1) == FR_OK)
	{
		fs->fsi_flag = 0;
 8009180:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009188:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800918c:	4293      	cmp	r3, r2
 800918e:	d13d      	bne.n	800920c <find_volume+0x2d8>
			&& LD_DWORD(fs->win.d8+FSI_LeadSig) == 0x41615252
 8009190:	78a3      	ldrb	r3, [r4, #2]
 8009192:	78e2      	ldrb	r2, [r4, #3]
 8009194:	041b      	lsls	r3, r3, #16
 8009196:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800919a:	7822      	ldrb	r2, [r4, #0]
 800919c:	4313      	orrs	r3, r2
 800919e:	7862      	ldrb	r2, [r4, #1]
 80091a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091a4:	4a2b      	ldr	r2, [pc, #172]	; (8009254 <find_volume+0x320>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d130      	bne.n	800920c <find_volume+0x2d8>
			&& LD_DWORD(fs->win.d8+FSI_StrucSig) == 0x61417272)
 80091aa:	f894 31e6 	ldrb.w	r3, [r4, #486]	; 0x1e6
 80091ae:	f894 21e7 	ldrb.w	r2, [r4, #487]	; 0x1e7
 80091b2:	041b      	lsls	r3, r3, #16
 80091b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091b8:	f894 21e4 	ldrb.w	r2, [r4, #484]	; 0x1e4
 80091bc:	4313      	orrs	r3, r2
 80091be:	f894 21e5 	ldrb.w	r2, [r4, #485]	; 0x1e5
 80091c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091c6:	4a24      	ldr	r2, [pc, #144]	; (8009258 <find_volume+0x324>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d11f      	bne.n	800920c <find_volume+0x2d8>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8+FSI_Free_Count);
 80091cc:	f894 31ea 	ldrb.w	r3, [r4, #490]	; 0x1ea
 80091d0:	f894 21eb 	ldrb.w	r2, [r4, #491]	; 0x1eb
 80091d4:	041b      	lsls	r3, r3, #16
 80091d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091da:	f894 21e8 	ldrb.w	r2, [r4, #488]	; 0x1e8
 80091de:	4313      	orrs	r3, r2
 80091e0:	f894 21e9 	ldrb.w	r2, [r4, #489]	; 0x1e9
 80091e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091e8:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8+FSI_Nxt_Free);
 80091ec:	f894 31ee 	ldrb.w	r3, [r4, #494]	; 0x1ee
 80091f0:	f894 21ef 	ldrb.w	r2, [r4, #495]	; 0x1ef
 80091f4:	041b      	lsls	r3, r3, #16
 80091f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091fa:	f894 21ec 	ldrb.w	r2, [r4, #492]	; 0x1ec
 80091fe:	4313      	orrs	r3, r2
 8009200:	f894 21ed 	ldrb.w	r2, [r4, #493]	; 0x1ed
 8009204:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009208:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
	fs->id = ++Fsid;	/* File system mount ID */
 800920c:	4a13      	ldr	r2, [pc, #76]	; (800925c <find_volume+0x328>)
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800920e:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8009212:	8813      	ldrh	r3, [r2, #0]
 8009214:	3301      	adds	r3, #1
 8009216:	b29b      	uxth	r3, r3
 8009218:	8013      	strh	r3, [r2, #0]
 800921a:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800921e:	4b10      	ldr	r3, [pc, #64]	; (8009260 <find_volume+0x32c>)
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	42a2      	cmp	r2, r4
 8009224:	bf04      	itt	eq
 8009226:	2200      	moveq	r2, #0
 8009228:	601a      	streq	r2, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	42a3      	cmp	r3, r4
 800922e:	f04f 0000 	mov.w	r0, #0
 8009232:	d10b      	bne.n	800924c <find_volume+0x318>
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <find_volume+0x32c>)
 8009236:	60d8      	str	r0, [r3, #12]
 8009238:	e008      	b.n	800924c <find_volume+0x318>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800923a:	200b      	movs	r0, #11
 800923c:	e006      	b.n	800924c <find_volume+0x318>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800923e:	200c      	movs	r0, #12
 8009240:	e004      	b.n	800924c <find_volume+0x318>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
 8009242:	4628      	mov	r0, r5
 8009244:	e002      	b.n	800924c <find_volume+0x318>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009246:	2003      	movs	r0, #3
 8009248:	e000      	b.n	800924c <find_volume+0x318>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800924a:	2001      	movs	r0, #1
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 800924c:	b005      	add	sp, #20
 800924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009250:	2000e01c 	.word	0x2000e01c
 8009254:	41615252 	.word	0x41615252
 8009258:	61417272 	.word	0x61417272
 800925c:	2000e000 	.word	0x2000e000
 8009260:	2000e004 	.word	0x2000e004

08009264 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8009264:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8009268:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800926a:	3b02      	subs	r3, #2
 800926c:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800926e:	bf3d      	ittte	cc
 8009270:	f890 2202 	ldrbcc.w	r2, [r0, #514]	; 0x202
 8009274:	f8d0 3228 	ldrcc.w	r3, [r0, #552]	; 0x228
 8009278:	fb02 3001 	mlacc	r0, r2, r1, r3
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800927c:	2000      	movcs	r0, #0
	return clst * fs->csize + fs->database;
}
 800927e:	4770      	bx	lr

08009280 <get_fat>:
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8009280:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8009282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009284:	4606      	mov	r6, r0
 8009286:	460c      	mov	r4, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8009288:	d959      	bls.n	800933e <get_fat+0xbe>
 800928a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800928e:	4299      	cmp	r1, r3
 8009290:	d255      	bcs.n	800933e <get_fat+0xbe>
		return 1;

	switch (fs->fs_type) {
 8009292:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8009296:	2b02      	cmp	r3, #2
 8009298:	d027      	beq.n	80092ea <get_fat+0x6a>
 800929a:	2b03      	cmp	r3, #3
 800929c:	d036      	beq.n	800930c <get_fat+0x8c>
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d14d      	bne.n	800933e <get_fat+0xbe>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 80092a2:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80092a6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80092aa:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80092ae:	f7ff fde0 	bl	8008e72 <move_window>
 80092b2:	b110      	cbz	r0, 80092ba <get_fat+0x3a>

	default:
		return 1;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 80092b4:	f04f 30ff 	mov.w	r0, #4294967295
 80092b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80092ba:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
 80092be:	f3c7 0308 	ubfx	r3, r7, #0, #9
 80092c2:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80092c4:	4630      	mov	r0, r6
 80092c6:	eb01 2157 	add.w	r1, r1, r7, lsr #9

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
 80092ca:	5cf5      	ldrb	r5, [r6, r3]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 80092cc:	f7ff fdd1 	bl	8008e72 <move_window>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1ef      	bne.n	80092b4 <get_fat+0x34>
		wc |= fs->win.d8[bc % SS(fs)] << 8;
 80092d4:	f3c7 0708 	ubfx	r7, r7, #0, #9
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80092d8:	07e3      	lsls	r3, r4, #31
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win.d8[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win.d8[bc % SS(fs)] << 8;
 80092da:	5df0      	ldrb	r0, [r6, r7]
 80092dc:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80092e0:	bf4c      	ite	mi
 80092e2:	0900      	lsrmi	r0, r0, #4
 80092e4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80092e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 80092ea:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80092ee:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80092f2:	f7ff fdbe 	bl	8008e72 <move_window>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d1dc      	bne.n	80092b4 <get_fat+0x34>
		p = &fs->win.d8[clst * 2 % SS(fs)];
 80092fa:	0064      	lsls	r4, r4, #1
 80092fc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
		return LD_WORD(p);
 8009300:	5d33      	ldrb	r3, [r6, r4]
 8009302:	4434      	add	r4, r6
 8009304:	7860      	ldrb	r0, [r4, #1]
 8009306:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 800930c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009310:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8009314:	f7ff fdad 	bl	8008e72 <move_window>
 8009318:	2800      	cmp	r0, #0
 800931a:	d1cb      	bne.n	80092b4 <get_fat+0x34>
		p = &fs->win.d8[clst * 4 % SS(fs)];
 800931c:	00a4      	lsls	r4, r4, #2
 800931e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8009322:	1933      	adds	r3, r6, r4
		return LD_DWORD(p) & 0x0FFFFFFF;
 8009324:	78d8      	ldrb	r0, [r3, #3]
 8009326:	789a      	ldrb	r2, [r3, #2]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	0600      	lsls	r0, r0, #24
 800932c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009330:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009334:	5d33      	ldrb	r3, [r6, r4]
 8009336:	4318      	orrs	r0, r3
 8009338:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	default:
		return 1;
 800933e:	2001      	movs	r0, #1
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
 8009340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009342 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009344:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009348:	4605      	mov	r5, r0
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800934a:	2c01      	cmp	r4, #1
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800934c:	460e      	mov	r6, r1
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800934e:	f8a5 1206 	strh.w	r1, [r5, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009352:	d101      	bne.n	8009358 <dir_sdi+0x16>
		return FR_INT_ERR;
 8009354:	2002      	movs	r0, #2
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009358:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 800935c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009360:	4294      	cmp	r4, r2
 8009362:	d2f7      	bcs.n	8009354 <dir_sdi+0x12>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009364:	b974      	cbnz	r4, 8009384 <dir_sdi+0x42>
 8009366:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 800936a:	2a03      	cmp	r2, #3
 800936c:	d102      	bne.n	8009374 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 800936e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009372:	b932      	cbnz	r2, 8009382 <dir_sdi+0x40>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8009374:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 8009378:	4296      	cmp	r6, r2
 800937a:	d2eb      	bcs.n	8009354 <dir_sdi+0x12>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
 800937c:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8009380:	e01c      	b.n	80093bc <dir_sdi+0x7a>
 8009382:	4614      	mov	r4, r2
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 8009384:	f893 7202 	ldrb.w	r7, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8009388:	4621      	mov	r1, r4
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 800938a:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
 800938c:	42be      	cmp	r6, r7
 800938e:	d310      	bcc.n	80093b2 <dir_sdi+0x70>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009390:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8009394:	f7ff ff74 	bl	8009280 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009398:	1c43      	adds	r3, r0, #1
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800939a:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800939c:	d020      	beq.n	80093e0 <dir_sdi+0x9e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800939e:	2801      	cmp	r0, #1
 80093a0:	d9d8      	bls.n	8009354 <dir_sdi+0x12>
 80093a2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 80093a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093aa:	4298      	cmp	r0, r3
 80093ac:	d2d2      	bcs.n	8009354 <dir_sdi+0x12>
				return FR_INT_ERR;
			idx -= ic;
 80093ae:	1bf6      	subs	r6, r6, r7
 80093b0:	e7ec      	b.n	800938c <dir_sdi+0x4a>
		}
		sect = clust2sect(dp->fs, clst);
 80093b2:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 80093b6:	460c      	mov	r4, r1
 80093b8:	f7ff ff54 	bl	8009264 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
 80093bc:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d0c7      	beq.n	8009354 <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 80093c4:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 80093c8:	eb00 1016 	add.w	r0, r0, r6, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 80093cc:	f006 060f 	and.w	r6, r6, #15
 80093d0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 80093d4:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 80093d8:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214

	return FR_OK;
 80093dc:	2000      	movs	r0, #0
 80093de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093e0:	2001      	movs	r0, #1
	if (!sect) return FR_INT_ERR;
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093e4 <put_fat>:
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80093e4:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 80093e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e8:	4607      	mov	r7, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80093ee:	d96b      	bls.n	80094c8 <put_fat+0xe4>
 80093f0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80093f4:	4299      	cmp	r1, r3
 80093f6:	d267      	bcs.n	80094c8 <put_fat+0xe4>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
 80093f8:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d035      	beq.n	800946c <put_fat+0x88>
 8009400:	2b03      	cmp	r3, #3
 8009402:	d043      	beq.n	800948c <put_fat+0xa8>
 8009404:	2b01      	cmp	r3, #1
 8009406:	d15a      	bne.n	80094be <put_fat+0xda>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009408:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800940c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009410:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8009414:	f7ff fd2d 	bl	8008e72 <move_window>
			if (res != FR_OK) break;
 8009418:	2800      	cmp	r0, #0
 800941a:	d151      	bne.n	80094c0 <put_fat+0xdc>
			p = &fs->win.d8[bc % SS(fs)];
 800941c:	f3c5 0108 	ubfx	r1, r5, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009420:	f014 0401 	ands.w	r4, r4, #1
 8009424:	bf18      	it	ne
 8009426:	5c7a      	ldrbne	r2, [r7, r1]
 8009428:	b2f3      	uxtb	r3, r6
 800942a:	bf1e      	ittt	ne
 800942c:	f002 020f 	andne.w	r2, r2, #15
 8009430:	ea42 1303 	orrne.w	r3, r2, r3, lsl #4
 8009434:	b2db      	uxtbne	r3, r3
 8009436:	547b      	strb	r3, [r7, r1]
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009438:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win.d8[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
 800943c:	3501      	adds	r5, #1
			fs->wflag = 1;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009444:	4638      	mov	r0, r7
 8009446:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800944a:	f7ff fd12 	bl	8008e72 <move_window>
			if (res != FR_OK) break;
 800944e:	bbb8      	cbnz	r0, 80094c0 <put_fat+0xdc>
			p = &fs->win.d8[bc % SS(fs)];
 8009450:	f3c5 0508 	ubfx	r5, r5, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009454:	b114      	cbz	r4, 800945c <put_fat+0x78>
 8009456:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800945a:	e005      	b.n	8009468 <put_fat+0x84>
 800945c:	5d7a      	ldrb	r2, [r7, r5]
 800945e:	f022 030f 	bic.w	r3, r2, #15
 8009462:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8009466:	431a      	orrs	r2, r3
 8009468:	557a      	strb	r2, [r7, r5]
 800946a:	e029      	b.n	80094c0 <put_fat+0xdc>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800946c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009470:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8009474:	f7ff fcfd 	bl	8008e72 <move_window>
			if (res != FR_OK) break;
 8009478:	bb10      	cbnz	r0, 80094c0 <put_fat+0xdc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800947a:	0064      	lsls	r4, r4, #1
 800947c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8009480:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009484:	553e      	strb	r6, [r7, r4]
 8009486:	443c      	add	r4, r7
 8009488:	7062      	strb	r2, [r4, #1]
 800948a:	e019      	b.n	80094c0 <put_fat+0xdc>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800948c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009490:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8009494:	f7ff fced 	bl	8008e72 <move_window>
			if (res != FR_OK) break;
 8009498:	b990      	cbnz	r0, 80094c0 <put_fat+0xdc>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800949a:	00a4      	lsls	r4, r4, #2
 800949c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80094a0:	193b      	adds	r3, r7, r4
			val |= LD_DWORD(p) & 0xF0000000;
 80094a2:	78da      	ldrb	r2, [r3, #3]
 80094a4:	0612      	lsls	r2, r2, #24
 80094a6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80094aa:	4332      	orrs	r2, r6
			ST_DWORD(p, val);
 80094ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80094b0:	553a      	strb	r2, [r7, r4]
 80094b2:	7059      	strb	r1, [r3, #1]
 80094b4:	0c11      	lsrs	r1, r2, #16
 80094b6:	0e12      	lsrs	r2, r2, #24
 80094b8:	7099      	strb	r1, [r3, #2]
 80094ba:	70da      	strb	r2, [r3, #3]
 80094bc:	e000      	b.n	80094c0 <put_fat+0xdc>
			break;

		default :
			res = FR_INT_ERR;
 80094be:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 80094c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 80094c8:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 80094ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80094d0:	460f      	mov	r7, r1
 80094d2:	b941      	cbnz	r1, 80094e6 <create_chain+0x1a>
		scl = fs->last_clust;			/* Get suggested start point */
 80094d4:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80094d8:	b1a6      	cbz	r6, 8009504 <create_chain+0x38>
 80094da:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80094de:	429e      	cmp	r6, r3
 80094e0:	bf28      	it	cs
 80094e2:	2601      	movcs	r6, #1
 80094e4:	e00f      	b.n	8009506 <create_chain+0x3a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80094e6:	f7ff fecb 	bl	8009280 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80094ea:	2801      	cmp	r0, #1
 80094ec:	d946      	bls.n	800957c <create_chain+0xb0>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80094ee:	1c44      	adds	r4, r0, #1
 80094f0:	d102      	bne.n	80094f8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
 80094f2:	f04f 30ff 	mov.w	r0, #4294967295
 80094f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80094f8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80094fc:	4298      	cmp	r0, r3
 80094fe:	d33e      	bcc.n	800957e <create_chain+0xb2>
 8009500:	463e      	mov	r6, r7
 8009502:	e000      	b.n	8009506 <create_chain+0x3a>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009504:	2601      	movs	r6, #1
 8009506:	4634      	mov	r4, r6
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009508:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 800950c:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800950e:	429c      	cmp	r4, r3
 8009510:	d304      	bcc.n	800951c <create_chain+0x50>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
 8009512:	2e01      	cmp	r6, #1
 8009514:	d801      	bhi.n	800951a <create_chain+0x4e>
 8009516:	2000      	movs	r0, #0
 8009518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
 800951a:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800951c:	4628      	mov	r0, r5
 800951e:	4621      	mov	r1, r4
 8009520:	f7ff feae 	bl	8009280 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8009524:	b130      	cbz	r0, 8009534 <create_chain+0x68>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009526:	1c41      	adds	r1, r0, #1
 8009528:	d029      	beq.n	800957e <create_chain+0xb2>
 800952a:	2801      	cmp	r0, #1
 800952c:	d027      	beq.n	800957e <create_chain+0xb2>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 800952e:	42b4      	cmp	r4, r6
 8009530:	d1ea      	bne.n	8009508 <create_chain+0x3c>
 8009532:	e7f0      	b.n	8009516 <create_chain+0x4a>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009534:	4628      	mov	r0, r5
 8009536:	4621      	mov	r1, r4
 8009538:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800953c:	f7ff ff52 	bl	80093e4 <put_fat>
	if (res == FR_OK && clst != 0) {
 8009540:	b9d0      	cbnz	r0, 8009578 <create_chain+0xac>
 8009542:	b97f      	cbnz	r7, 8009564 <create_chain+0x98>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
 8009544:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
 8009548:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	d011      	beq.n	8009574 <create_chain+0xa8>
			fs->free_clust--;
 8009550:	3b01      	subs	r3, #1
 8009552:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009556:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800955a:	f043 0301 	orr.w	r3, r3, #1
 800955e:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8009562:	e007      	b.n	8009574 <create_chain+0xa8>
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009564:	4628      	mov	r0, r5
 8009566:	4639      	mov	r1, r7
 8009568:	4622      	mov	r2, r4
 800956a:	f7ff ff3b 	bl	80093e4 <put_fat>
	}
	if (res == FR_OK) {
 800956e:	2800      	cmp	r0, #0
 8009570:	d0e8      	beq.n	8009544 <create_chain+0x78>
 8009572:	e001      	b.n	8009578 <create_chain+0xac>
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag |= 1;
 8009574:	4620      	mov	r0, r4
 8009576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009578:	2801      	cmp	r0, #1
 800957a:	d0ba      	beq.n	80094f2 <create_chain+0x26>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
 800957c:	2001      	movs	r0, #1
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009580 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD clst;
	UINT i;


	i = dp->index + 1;
 8009584:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8009588:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800958a:	b2b3      	uxth	r3, r6
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800958c:	4604      	mov	r4, r0
 800958e:	460f      	mov	r7, r1
	DWORD clst;
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009590:	b913      	cbnz	r3, 8009598 <dir_next+0x18>
		return FR_NO_FILE;
 8009592:	2004      	movs	r0, #4
 8009594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DWORD clst;
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009598:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0f8      	beq.n	8009592 <dir_next+0x12>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
 80095a0:	f016 080f 	ands.w	r8, r6, #15
 80095a4:	d16e      	bne.n	8009684 <dir_next+0x104>
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
 80095a6:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */
 80095aa:	3301      	adds	r3, #1
 80095ac:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 80095b0:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200

		if (!dp->clust) {		/* Static table */
 80095b4:	b921      	cbnz	r1, 80095c0 <dir_next+0x40>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80095b6:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 80095ba:	429e      	cmp	r6, r3
 80095bc:	d2e9      	bcs.n	8009592 <dir_next+0x12>
 80095be:	e061      	b.n	8009684 <dir_next+0x104>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80095c0:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80095c4:	3b01      	subs	r3, #1
 80095c6:	ea13 1316 	ands.w	r3, r3, r6, lsr #4
 80095ca:	d15b      	bne.n	8009684 <dir_next+0x104>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80095cc:	f7ff fe58 	bl	8009280 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80095d0:	2801      	cmp	r0, #1
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80095d2:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80095d4:	d802      	bhi.n	80095dc <dir_next+0x5c>
 80095d6:	2002      	movs	r0, #2
 80095d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80095dc:	1c42      	adds	r2, r0, #1
 80095de:	d102      	bne.n	80095e6 <dir_next+0x66>
 80095e0:	2001      	movs	r0, #1
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80095e6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80095ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80095ee:	429d      	cmp	r5, r3
 80095f0:	d33f      	bcc.n	8009672 <dir_next+0xf2>
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80095f2:	2f00      	cmp	r7, #0
 80095f4:	d0cd      	beq.n	8009592 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80095f6:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80095fa:	f7ff ff67 	bl	80094cc <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095fe:	4605      	mov	r5, r0
 8009600:	2800      	cmp	r0, #0
 8009602:	d04a      	beq.n	800969a <dir_next+0x11a>
					if (clst == 1) return FR_INT_ERR;
 8009604:	2801      	cmp	r0, #1
 8009606:	d0e6      	beq.n	80095d6 <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d0e9      	beq.n	80095e0 <dir_next+0x60>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800960c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009610:	f7ff fbca 	bl	8008da8 <sync_window>
 8009614:	4607      	mov	r7, r0
 8009616:	2800      	cmp	r0, #0
 8009618:	d1e2      	bne.n	80095e0 <dir_next+0x60>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800961a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800961e:	4639      	mov	r1, r7
 8009620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009624:	f7ff fab6 	bl	8008b94 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009628:	f8d4 9200 	ldr.w	r9, [r4, #512]	; 0x200
 800962c:	4629      	mov	r1, r5
 800962e:	4648      	mov	r0, r9
 8009630:	f7ff fe18 	bl	8009264 <clust2sect>
 8009634:	f8c9 022c 	str.w	r0, [r9, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009638:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800963c:	f893 2202 	ldrb.w	r2, [r3, #514]	; 0x202
 8009640:	4297      	cmp	r7, r2
 8009642:	d211      	bcs.n	8009668 <dir_next+0xe8>
						dp->fs->wflag = 1;
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800964a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800964e:	f7ff fbab 	bl	8008da8 <sync_window>
 8009652:	2800      	cmp	r0, #0
 8009654:	d1c4      	bne.n	80095e0 <dir_next+0x60>
						dp->fs->winsect++;
 8009656:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800965a:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 800965e:	3301      	adds	r3, #1
 8009660:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009664:	3701      	adds	r7, #1
 8009666:	e7e7      	b.n	8009638 <dir_next+0xb8>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009668:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800966c:	1bd7      	subs	r7, r2, r7
 800966e:	f8c3 722c 	str.w	r7, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009672:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009676:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800967a:	4629      	mov	r1, r5
 800967c:	f7ff fdf2 	bl	8009264 <clust2sect>
 8009680:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 8009684:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
				dp->sect = clust2sect(dp->fs, clst);
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009688:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 800968c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8009690:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214

	return FR_OK;
 8009694:	2000      	movs	r0, #0
 8009696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800969a:	2007      	movs	r0, #7

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
 800969c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080096a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80096a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80096a4:	780b      	ldrb	r3, [r1, #0]
 80096a6:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80096ac:	d001      	beq.n	80096b2 <follow_path+0x12>
 80096ae:	2b5c      	cmp	r3, #92	; 0x5c
 80096b0:	d100      	bne.n	80096b4 <follow_path+0x14>
		path++;
 80096b2:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 80096b4:	2600      	movs	r6, #0
 80096b6:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80096ba:	782b      	ldrb	r3, [r5, #0]
 80096bc:	2b1f      	cmp	r3, #31
 80096be:	d854      	bhi.n	800976a <follow_path+0xca>
		res = dir_sdi(dp, 0);
 80096c0:	4620      	mov	r0, r4
 80096c2:	4631      	mov	r1, r6
 80096c4:	f7ff fe3d 	bl	8009342 <dir_sdi>
		dp->dir = 0;
 80096c8:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80096d0:	2b5c      	cmp	r3, #92	; 0x5c
 80096d2:	d04a      	beq.n	800976a <follow_path+0xca>
	sfn = dp->fn;
 80096d4:	f8d4 6218 	ldr.w	r6, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 80096d8:	2120      	movs	r1, #32
 80096da:	4630      	mov	r0, r6
 80096dc:	220b      	movs	r2, #11
 80096de:	f7ff fa59 	bl	8008b94 <mem_set>
	si = i = b = 0; ni = 8;
 80096e2:	2100      	movs	r1, #0
 80096e4:	f107 3eff 	add.w	lr, r7, #4294967295
 80096e8:	460d      	mov	r5, r1
 80096ea:	2008      	movs	r0, #8
 80096ec:	460a      	mov	r2, r1
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80096ee:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80096f2:	2b20      	cmp	r3, #32
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80096f4:	f105 0501 	add.w	r5, r5, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80096f8:	d83e      	bhi.n	8009778 <follow_path+0xd8>
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80096fa:	2b21      	cmp	r3, #33	; 0x21
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80096fc:	443d      	add	r5, r7
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80096fe:	bf34      	ite	cc
 8009700:	2304      	movcc	r3, #4
 8009702:	2300      	movcs	r3, #0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8009704:	2900      	cmp	r1, #0
 8009706:	f000 8084 	beq.w	8009812 <follow_path+0x172>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
 800970a:	7831      	ldrb	r1, [r6, #0]
 800970c:	29e5      	cmp	r1, #229	; 0xe5
 800970e:	bf04      	itt	eq
 8009710:	2105      	moveq	r1, #5
 8009712:	7031      	strbeq	r1, [r6, #0]

	if (ni == 8) b <<= 2;
 8009714:	2808      	cmp	r0, #8
 8009716:	bf04      	itt	eq
 8009718:	0092      	lsleq	r2, r2, #2
 800971a:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800971c:	f002 0103 	and.w	r1, r2, #3
 8009720:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009722:	f002 020c 	and.w	r2, r2, #12

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009726:	bf08      	it	eq
 8009728:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800972c:	2a04      	cmp	r2, #4
 800972e:	bf08      	it	eq
 8009730:	f043 0308 	orreq.w	r3, r3, #8

	sfn[NS] = c;		/* Store NT flag, File name is created */
 8009734:	72f3      	strb	r3, [r6, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009736:	4620      	mov	r0, r4
 8009738:	2100      	movs	r1, #0
 800973a:	f7ff fe02 	bl	8009342 <dir_sdi>
	if (res != FR_OK) return res;
 800973e:	2800      	cmp	r0, #0
 8009740:	d037      	beq.n	80097b2 <follow_path+0x112>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
 8009742:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009746:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009748:	2800      	cmp	r0, #0
 800974a:	d156      	bne.n	80097fa <follow_path+0x15a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800974c:	075a      	lsls	r2, r3, #29
 800974e:	d47e      	bmi.n	800984e <follow_path+0x1ae>
			dir = dp->dir;						/* Follow the sub-directory */
 8009750:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009754:	7acb      	ldrb	r3, [r1, #11]
 8009756:	06db      	lsls	r3, r3, #27
 8009758:	d558      	bpl.n	800980c <follow_path+0x16c>
 800975a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800975e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009762:	f7ff faea 	bl	8008d3a <ld_clust.isra.0>
 8009766:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800976a:	782b      	ldrb	r3, [r5, #0]
 800976c:	2b2f      	cmp	r3, #47	; 0x2f
 800976e:	462f      	mov	r7, r5
 8009770:	f105 0501 	add.w	r5, r5, #1
 8009774:	d1ac      	bne.n	80096d0 <follow_path+0x30>
 8009776:	e7f8      	b.n	800976a <follow_path+0xca>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8009778:	2b2f      	cmp	r3, #47	; 0x2f
 800977a:	d0be      	beq.n	80096fa <follow_path+0x5a>
 800977c:	2b5c      	cmp	r3, #92	; 0x5c
 800977e:	d0bc      	beq.n	80096fa <follow_path+0x5a>
		if (c == '.' || i >= ni) {
 8009780:	2b2e      	cmp	r3, #46	; 0x2e
 8009782:	d049      	beq.n	8009818 <follow_path+0x178>
 8009784:	4281      	cmp	r1, r0
 8009786:	d244      	bcs.n	8009812 <follow_path+0x172>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
 8009788:	f013 0f80 	tst.w	r3, #128	; 0x80
			b |= 3;						/* Eliminate NT flag */
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800978c:	bf1c      	itt	ne
 800978e:	3b80      	subne	r3, #128	; 0x80
 8009790:	f8df c0c0 	ldrne.w	ip, [pc, #192]	; 8009854 <follow_path+0x1b4>
 8009794:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009858 <follow_path+0x1b8>
 8009798:	bf1c      	itt	ne
 800979a:	f81c 3003 	ldrbne.w	r3, [ip, r3]
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
			b |= 3;						/* Eliminate NT flag */
 800979e:	f042 0203 	orrne.w	r2, r2, #3
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 80097a2:	f818 cf01 	ldrb.w	ip, [r8, #1]!
 80097a6:	f1bc 0f00 	cmp.w	ip, #0
 80097aa:	d03c      	beq.n	8009826 <follow_path+0x186>
 80097ac:	459c      	cmp	ip, r3
 80097ae:	d1f8      	bne.n	80097a2 <follow_path+0x102>
 80097b0:	e02f      	b.n	8009812 <follow_path+0x172>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80097b2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80097b6:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80097ba:	f7ff fb5a 	bl	8008e72 <move_window>
		if (res != FR_OK) break;
 80097be:	2800      	cmp	r0, #0
 80097c0:	d1bf      	bne.n	8009742 <follow_path+0xa2>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80097c2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	b19a      	cbz	r2, 80097f2 <follow_path+0x152>
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80097ca:	7ada      	ldrb	r2, [r3, #11]
 80097cc:	0711      	lsls	r1, r2, #28
 80097ce:	d40b      	bmi.n	80097e8 <follow_path+0x148>
 80097d0:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80097d4:	f103 060b 	add.w	r6, r3, #11
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80097d8:	42b3      	cmp	r3, r6
 80097da:	d00c      	beq.n	80097f6 <follow_path+0x156>
 80097dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097e0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80097e4:	4288      	cmp	r0, r1
 80097e6:	d0f7      	beq.n	80097d8 <follow_path+0x138>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80097e8:	4620      	mov	r0, r4
 80097ea:	2100      	movs	r1, #0
 80097ec:	f7ff fec8 	bl	8009580 <dir_next>
 80097f0:	e7a5      	b.n	800973e <follow_path+0x9e>
	do {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097f2:	2004      	movs	r0, #4
 80097f4:	e7a5      	b.n	8009742 <follow_path+0xa2>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80097f6:	2000      	movs	r0, #0
 80097f8:	e7a3      	b.n	8009742 <follow_path+0xa2>
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
 80097fa:	2804      	cmp	r0, #4
 80097fc:	d127      	bne.n	800984e <follow_path+0x1ae>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80097fe:	f013 0f04 	tst.w	r3, #4
 8009802:	bf14      	ite	ne
 8009804:	2004      	movne	r0, #4
 8009806:	2005      	moveq	r0, #5
 8009808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
 800980c:	2005      	movs	r0, #5
 800980e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009812:	2006      	movs	r0, #6
 8009814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009818:	2808      	cmp	r0, #8
 800981a:	d1fa      	bne.n	8009812 <follow_path+0x172>
			i = 8; ni = 11;
			b <<= 2; continue;
 800981c:	0092      	lsls	r2, r2, #2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 800981e:	4601      	mov	r1, r0
			b <<= 2; continue;
 8009820:	b2d2      	uxtb	r2, r2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 8009822:	200b      	movs	r0, #11
 8009824:	e763      	b.n	80096ee <follow_path+0x4e>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
 8009826:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800982a:	f1bc 0f19 	cmp.w	ip, #25
 800982e:	d802      	bhi.n	8009836 <follow_path+0x196>
				b |= 2;
 8009830:	f042 0202 	orr.w	r2, r2, #2
 8009834:	e008      	b.n	8009848 <follow_path+0x1a8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8009836:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800983a:	f1bc 0f19 	cmp.w	ip, #25
					b |= 1; c -= 0x20;
 800983e:	bf9e      	ittt	ls
 8009840:	3b20      	subls	r3, #32
 8009842:	f042 0201 	orrls.w	r2, r2, #1
 8009846:	b2db      	uxtbls	r3, r3
				}
			}
			sfn[i++] = c;
 8009848:	5473      	strb	r3, [r6, r1]
 800984a:	3101      	adds	r1, #1
 800984c:	e74f      	b.n	80096ee <follow_path+0x4e>
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
 800984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009852:	bf00      	nop
 8009854:	0802954c 	.word	0x0802954c
 8009858:	080294ef 	.word	0x080294ef

0800985c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4604      	mov	r4, r0
 8009860:	460d      	mov	r5, r1
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8009862:	2004      	movs	r0, #4
	while (dp->sect) {
 8009864:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009868:	b311      	cbz	r1, 80098b0 <dir_read+0x54>
		res = move_window(dp->fs, dp->sect);
 800986a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800986e:	f7ff fb00 	bl	8008e72 <move_window>
		if (res != FR_OK) break;
 8009872:	b9f8      	cbnz	r0, 80098b4 <dir_read+0x58>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009874:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8009878:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800987a:	b1fa      	cbz	r2, 80098bc <dir_read+0x60>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800987c:	2ae5      	cmp	r2, #229	; 0xe5
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
 800987e:	7adb      	ldrb	r3, [r3, #11]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009880:	d00f      	beq.n	80098a2 <dir_read+0x46>
 8009882:	2a2e      	cmp	r2, #46	; 0x2e
 8009884:	d00d      	beq.n	80098a2 <dir_read+0x46>
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
 8009886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800988a:	2b0f      	cmp	r3, #15
 800988c:	d009      	beq.n	80098a2 <dir_read+0x46>
 800988e:	f023 0320 	bic.w	r3, r3, #32
 8009892:	f1a3 0208 	sub.w	r2, r3, #8
 8009896:	4253      	negs	r3, r2
 8009898:	4153      	adcs	r3, r2
 800989a:	42ab      	cmp	r3, r5
 800989c:	d101      	bne.n	80098a2 <dir_read+0x46>
 800989e:	2000      	movs	r0, #0
 80098a0:	bd38      	pop	{r3, r4, r5, pc}
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80098a2:	4620      	mov	r0, r4
 80098a4:	2100      	movs	r1, #0
 80098a6:	f7ff fe6b 	bl	8009580 <dir_next>
		if (res != FR_OK) break;
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d0da      	beq.n	8009864 <dir_read+0x8>
 80098ae:	e001      	b.n	80098b4 <dir_read+0x58>
	}

	if (res != FR_OK) dp->sect = 0;
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d0f4      	beq.n	800989e <dir_read+0x42>
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80098bc:	2004      	movs	r0, #4
 80098be:	e7f9      	b.n	80098b4 <dir_read+0x58>

080098c0 <dir_alloc.constprop.12>:
/* Directory handling - Reserve directory entry                          */
/*-----------------------------------------------------------------------*/

#if !_FS_READONLY
static
FRESULT dir_alloc (
 80098c0:	b510      	push	{r4, lr}
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80098c2:	2100      	movs	r1, #0
/* Directory handling - Reserve directory entry                          */
/*-----------------------------------------------------------------------*/

#if !_FS_READONLY
static
FRESULT dir_alloc (
 80098c4:	4604      	mov	r4, r0
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80098c6:	f7ff fd3c 	bl	8009342 <dir_sdi>
	if (res == FR_OK) {
 80098ca:	b988      	cbnz	r0, 80098f0 <dir_alloc.constprop.12+0x30>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
 80098cc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80098d0:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80098d4:	f7ff facd 	bl	8008e72 <move_window>
			if (res != FR_OK) break;
 80098d8:	b950      	cbnz	r0, 80098f0 <dir_alloc.constprop.12+0x30>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
 80098da:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2be5      	cmp	r3, #229	; 0xe5
 80098e2:	d008      	beq.n	80098f6 <dir_alloc.constprop.12+0x36>
 80098e4:	b13b      	cbz	r3, 80098f6 <dir_alloc.constprop.12+0x36>
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80098e6:	4620      	mov	r0, r4
 80098e8:	2101      	movs	r1, #1
 80098ea:	f7ff fe49 	bl	8009580 <dir_next>
 80098ee:	e7ec      	b.n	80098ca <dir_alloc.constprop.12+0xa>
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80098f0:	2804      	cmp	r0, #4
 80098f2:	bf08      	it	eq
 80098f4:	2007      	moveq	r0, #7
	return res;
}
 80098f6:	bd10      	pop	{r4, pc}

080098f8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4604      	mov	r4, r0
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80098fc:	f7ff ffe0 	bl	80098c0 <dir_alloc.constprop.12>
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009900:	4605      	mov	r5, r0
 8009902:	b9c8      	cbnz	r0, 8009938 <dir_register+0x40>
		res = move_window(dp->fs, dp->sect);
 8009904:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009908:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800990c:	f7ff fab1 	bl	8008e72 <move_window>
		if (res == FR_OK) {
 8009910:	4605      	mov	r5, r0
 8009912:	b988      	cbnz	r0, 8009938 <dir_register+0x40>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
 8009914:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8009918:	4629      	mov	r1, r5
 800991a:	2220      	movs	r2, #32
 800991c:	f7ff f93a 	bl	8008b94 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009920:	220b      	movs	r2, #11
 8009922:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8009926:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800992a:	f7ff f929 	bl	8008b80 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800992e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
}
 8009938:	4628      	mov	r0, r5
 800993a:	bd38      	pop	{r3, r4, r5, pc}

0800993c <remove_chain>:
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800993c:	2901      	cmp	r1, #1
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800993e:	b570      	push	{r4, r5, r6, lr}
 8009940:	4604      	mov	r4, r0
 8009942:	460d      	mov	r5, r1
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009944:	d801      	bhi.n	800994a <remove_chain+0xe>
		res = FR_INT_ERR;
 8009946:	2002      	movs	r0, #2
 8009948:	bd70      	pop	{r4, r5, r6, pc}
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800994a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800994e:	4299      	cmp	r1, r3
 8009950:	d2f9      	bcs.n	8009946 <remove_chain+0xa>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009952:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009956:	429d      	cmp	r5, r3
 8009958:	d205      	bcs.n	8009966 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800995a:	4620      	mov	r0, r4
 800995c:	4629      	mov	r1, r5
 800995e:	f7ff fc8f 	bl	8009280 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8009962:	4606      	mov	r6, r0
 8009964:	b908      	cbnz	r0, 800996a <remove_chain+0x2e>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 8009966:	2000      	movs	r0, #0
 8009968:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800996a:	2801      	cmp	r0, #1
 800996c:	d0eb      	beq.n	8009946 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800996e:	1c41      	adds	r1, r0, #1
 8009970:	d015      	beq.n	800999e <remove_chain+0x62>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009972:	4620      	mov	r0, r4
 8009974:	4629      	mov	r1, r5
 8009976:	2200      	movs	r2, #0
 8009978:	f7ff fd34 	bl	80093e4 <put_fat>
			if (res != FR_OK) break;
 800997c:	b980      	cbnz	r0, 80099a0 <remove_chain+0x64>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800997e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009982:	1c5a      	adds	r2, r3, #1
				fs->free_clust++;
 8009984:	bf1f      	itttt	ne
 8009986:	3301      	addne	r3, #1
 8009988:	f8c4 3210 	strne.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 800998c:	f894 3205 	ldrbne.w	r3, [r4, #517]	; 0x205
 8009990:	f043 0301 	orrne.w	r3, r3, #1
 8009994:	bf18      	it	ne
 8009996:	f884 3205 	strbne.w	r3, [r4, #517]	; 0x205
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800999a:	4635      	mov	r5, r6
 800999c:	e7d9      	b.n	8009952 <remove_chain+0x16>
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800999e:	2001      	movs	r0, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080099a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80099a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099a6:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80099a8:	a804      	add	r0, sp, #16
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80099aa:	9100      	str	r1, [sp, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80099ac:	f840 1d04 	str.w	r1, [r0, #-4]!
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80099b0:	4616      	mov	r6, r2
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 80099b2:	f7ff f98f 	bl	8008cd4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80099b6:	1e05      	subs	r5, r0, #0
 80099b8:	db24      	blt.n	8009a04 <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <f_mount+0x6c>)
 80099bc:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 80099c0:	4619      	mov	r1, r3

	if (cfs) {
 80099c2:	b17c      	cbz	r4, 80099e4 <f_mount+0x40>
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 80099c4:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <f_mount+0x70>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	42a2      	cmp	r2, r4
 80099ca:	bf04      	itt	eq
 80099cc:	2200      	moveq	r2, #0
 80099ce:	601a      	streq	r2, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	bf08      	it	eq
 80099d6:	4a0f      	ldreq	r2, [pc, #60]	; (8009a14 <f_mount+0x70>)
 80099d8:	f04f 0300 	mov.w	r3, #0
 80099dc:	bf08      	it	eq
 80099de:	60d3      	streq	r3, [r2, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80099e0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	}

	if (fs) {
 80099e4:	9801      	ldr	r0, [sp, #4]
 80099e6:	b110      	cbz	r0, 80099ee <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80099e8:	2300      	movs	r3, #0
 80099ea:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80099ee:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80099f2:	b150      	cbz	r0, 8009a0a <f_mount+0x66>
 80099f4:	2e01      	cmp	r6, #1
 80099f6:	d107      	bne.n	8009a08 <f_mount+0x64>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80099f8:	a801      	add	r0, sp, #4
 80099fa:	4669      	mov	r1, sp
 80099fc:	2200      	movs	r2, #0
 80099fe:	f7ff fa99 	bl	8008f34 <find_volume>
	LEAVE_FF(fs, res);
 8009a02:	e002      	b.n	8009a0a <f_mount+0x66>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a04:	200b      	movs	r0, #11
 8009a06:	e000      	b.n	8009a0a <f_mount+0x66>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009a08:	2000      	movs	r0, #0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8009a0a:	b004      	add	sp, #16
 8009a0c:	bd70      	pop	{r4, r5, r6, pc}
 8009a0e:	bf00      	nop
 8009a10:	2000e01c 	.word	0x2000e01c
 8009a14:	2000e004 	.word	0x2000e004

08009a18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8009a20:	4617      	mov	r7, r2
 8009a22:	9101      	str	r1, [sp, #4]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8009a24:	4606      	mov	r6, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f000 808e 	beq.w	8009b48 <f_open+0x130>
	fp->fs = 0;			/* Clear file object */
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009a32:	a901      	add	r1, sp, #4
 8009a34:	a886      	add	r0, sp, #536	; 0x218
 8009a36:	f002 021e 	and.w	r2, r2, #30
 8009a3a:	f7ff fa7b 	bl	8008f34 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f040 80b4 	bne.w	8009bac <f_open+0x194>
		INIT_BUF(dj);
 8009a44:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a46:	a806      	add	r0, sp, #24
 8009a48:	9901      	ldr	r1, [sp, #4]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
 8009a4a:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a4c:	f7ff fe28 	bl	80096a0 <follow_path>
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009a50:	f007 041f 	and.w	r4, r7, #31
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
 8009a54:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009a56:	b950      	cbnz	r0, 8009a6e <f_open+0x56>
			if (!dir)	/* Default directory itself */
 8009a58:	b145      	cbz	r5, 8009a6c <f_open+0x54>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a5a:	f014 0f1e 	tst.w	r4, #30
 8009a5e:	a806      	add	r0, sp, #24
 8009a60:	bf14      	ite	ne
 8009a62:	2101      	movne	r1, #1
 8009a64:	2100      	moveq	r1, #0
 8009a66:	f7ff f89d 	bl	8008ba4 <chk_lock>
 8009a6a:	e000      	b.n	8009a6e <f_open+0x56>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
 8009a6c:	2006      	movs	r0, #6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a6e:	f017 0f1c 	tst.w	r7, #28
 8009a72:	d048      	beq.n	8009b06 <f_open+0xee>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 8009a74:	b170      	cbz	r0, 8009a94 <f_open+0x7c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009a76:	2804      	cmp	r0, #4
 8009a78:	d107      	bne.n	8009a8a <f_open+0x72>
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a7a:	4b4e      	ldr	r3, [pc, #312]	; (8009bb4 <f_open+0x19c>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	2a00      	cmp	r2, #0
 8009a80:	d064      	beq.n	8009b4c <f_open+0x134>
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d061      	beq.n	8009b4c <f_open+0x134>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a88:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009a8a:	f044 0408 	orr.w	r4, r4, #8
				dir = dj.dir;					/* New entry */
 8009a8e:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a90:	b130      	cbz	r0, 8009aa0 <f_open+0x88>
 8009a92:	e08b      	b.n	8009bac <f_open+0x194>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009a94:	7aeb      	ldrb	r3, [r5, #11]
 8009a96:	f013 0f11 	tst.w	r3, #17
 8009a9a:	d15f      	bne.n	8009b5c <f_open+0x144>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009a9c:	077f      	lsls	r7, r7, #29
 8009a9e:	d459      	bmi.n	8009b54 <f_open+0x13c>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009aa0:	0720      	lsls	r0, r4, #28
 8009aa2:	d539      	bpl.n	8009b18 <f_open+0x100>
				dw = get_fattime();				/* Created time */
 8009aa4:	f7ff f84a 	bl	8008b3c <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
 8009aa8:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009aac:	2700      	movs	r7, #0
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();				/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
 8009aae:	73a8      	strb	r0, [r5, #14]
 8009ab0:	73eb      	strb	r3, [r5, #15]
 8009ab2:	0c03      	lsrs	r3, r0, #16
 8009ab4:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009ab6:	72ef      	strb	r7, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 8009ab8:	772f      	strb	r7, [r5, #28]
 8009aba:	776f      	strb	r7, [r5, #29]
 8009abc:	77af      	strb	r7, [r5, #30]
 8009abe:	77ef      	strb	r7, [r5, #31]
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();				/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
 8009ac0:	742b      	strb	r3, [r5, #16]
 8009ac2:	7468      	strb	r0, [r5, #17]
 8009ac4:	9b86      	ldr	r3, [sp, #536]	; 0x218
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009acc:	f7ff f935 	bl	8008d3a <ld_clust.isra.0>
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 8009ad0:	76af      	strb	r7, [r5, #26]
 8009ad2:	76ef      	strb	r7, [r5, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 8009ad4:	752f      	strb	r7, [r5, #20]
 8009ad6:	756f      	strb	r7, [r5, #21]
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8009ad8:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	b1c8      	cbz	r0, 8009b18 <f_open+0x100>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	4639      	mov	r1, r7
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
 8009ae8:	f8d3 822c 	ldr.w	r8, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8009aec:	f7ff ff26 	bl	800993c <remove_chain>
					if (res == FR_OK) {
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d15b      	bne.n	8009bac <f_open+0x194>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009af4:	9886      	ldr	r0, [sp, #536]	; 0x218
 8009af6:	3f01      	subs	r7, #1
 8009af8:	f8c0 720c 	str.w	r7, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8009afc:	4641      	mov	r1, r8
 8009afe:	f7ff f9b8 	bl	8008e72 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8009b02:	b148      	cbz	r0, 8009b18 <f_open+0x100>
 8009b04:	e052      	b.n	8009bac <f_open+0x194>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d150      	bne.n	8009bac <f_open+0x194>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009b0a:	7aeb      	ldrb	r3, [r5, #11]
 8009b0c:	06da      	lsls	r2, r3, #27
 8009b0e:	d423      	bmi.n	8009b58 <f_open+0x140>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009b10:	07b8      	lsls	r0, r7, #30
 8009b12:	d501      	bpl.n	8009b18 <f_open+0x100>
 8009b14:	07da      	lsls	r2, r3, #31
 8009b16:	d421      	bmi.n	8009b5c <f_open+0x144>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b18:	0723      	lsls	r3, r4, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009b1a:	9b86      	ldr	r3, [sp, #536]	; 0x218
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
 8009b1c:	bf48      	it	mi
 8009b1e:	f044 0420 	orrmi.w	r4, r4, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009b22:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009b26:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b2a:	f014 0ffe 	tst.w	r4, #254	; 0xfe
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
			fp->dir_ptr = dir;
 8009b2e:	f8c6 5220 	str.w	r5, [r6, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b32:	a806      	add	r0, sp, #24
 8009b34:	bf14      	ite	ne
 8009b36:	2101      	movne	r1, #1
 8009b38:	2100      	moveq	r1, #0
 8009b3a:	f7ff f869 	bl	8008c10 <inc_lock>
 8009b3e:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8009b42:	b968      	cbnz	r0, 8009b60 <f_open+0x148>
 8009b44:	2002      	movs	r0, #2
 8009b46:	e031      	b.n	8009bac <f_open+0x194>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8009b48:	2009      	movs	r0, #9
 8009b4a:	e02f      	b.n	8009bac <f_open+0x194>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009b4c:	a806      	add	r0, sp, #24
 8009b4e:	f7ff fed3 	bl	80098f8 <dir_register>
 8009b52:	e79a      	b.n	8009a8a <f_open+0x72>
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
 8009b54:	2008      	movs	r0, #8
 8009b56:	e029      	b.n	8009bac <f_open+0x194>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
 8009b58:	2004      	movs	r0, #4
 8009b5a:	e027      	b.n	8009bac <f_open+0x194>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
 8009b5c:	2007      	movs	r0, #7
 8009b5e:	e025      	b.n	8009bac <f_open+0x194>
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
 8009b60:	f886 4206 	strb.w	r4, [r6, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009b64:	9f86      	ldr	r7, [sp, #536]	; 0x218
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
 8009b66:	2400      	movs	r4, #0
 8009b68:	f886 4207 	strb.w	r4, [r6, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009b6c:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7ff f8e2 	bl	8008d3a <ld_clust.isra.0>
 8009b76:	f8c6 0210 	str.w	r0, [r6, #528]	; 0x210
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8009b7a:	7fab      	ldrb	r3, [r5, #30]
 8009b7c:	7fea      	ldrb	r2, [r5, #31]
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009b84:	7f2a      	ldrb	r2, [r5, #28]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	7f6a      	ldrb	r2, [r5, #29]
			fp->fptr = 0;						/* File pointer */
 8009b8a:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8009b8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009b92:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
			fp->id = fp->fs->id;
 8009b96:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
			fp->fptr = 0;						/* File pointer */
			fp->dsect = 0;
 8009b9a:	f8c6 4218 	str.w	r4, [r6, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009b9e:	f8c6 4224 	str.w	r4, [r6, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009ba2:	f8c6 7200 	str.w	r7, [r6, #512]	; 0x200
			fp->id = fp->fs->id;
 8009ba6:	f8a6 3204 	strh.w	r3, [r6, #516]	; 0x204
 8009baa:	4620      	mov	r0, r4
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8009bac:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8009bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb4:	2000e004 	.word	0x2000e004

08009bb8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f8c8 3000 	str.w	r3, [r8]
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	460f      	mov	r7, r1
 8009bc8:	4616      	mov	r6, r2
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
 8009bca:	f7ff f89c 	bl	8008d06 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f040 80d9 	bne.w	8009d86 <f_write+0x1ce>
	if (fp->err)							/* Check error */
 8009bd4:	f894 0207 	ldrb.w	r0, [r4, #519]	; 0x207
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f040 80d4 	bne.w	8009d86 <f_write+0x1ce>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009bde:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009be2:	0799      	lsls	r1, r3, #30
 8009be4:	f140 80ce 	bpl.w	8009d84 <f_write+0x1cc>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009be8:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009bec:	42de      	cmn	r6, r3
 8009bee:	bf28      	it	cs
 8009bf0:	2600      	movcs	r6, #0

	for ( ;  btw;							/* Repeat until all data written */
 8009bf2:	b31e      	cbz	r6, 8009c3c <f_write+0x84>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009bf4:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8009bf8:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 8097 	bne.w	8009d30 <f_write+0x178>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009c02:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009c06:	f890 9202 	ldrb.w	r9, [r0, #514]	; 0x202
 8009c0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c0e:	ea09 2951 	and.w	r9, r9, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8009c12:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8009c16:	d12d      	bne.n	8009c74 <f_write+0xbc>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009c18:	b919      	cbnz	r1, 8009c22 <f_write+0x6a>
					clst = fp->sclust;		/* Follow from the origin */
 8009c1a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8009c1e:	b9b9      	cbnz	r1, 8009c50 <f_write+0x98>
 8009c20:	e008      	b.n	8009c34 <f_write+0x7c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009c22:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009c26:	b11b      	cbz	r3, 8009c30 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff f83f 	bl	8008cac <clmt_clust>
 8009c2e:	e003      	b.n	8009c38 <f_write+0x80>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009c30:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009c34:	f7ff fc4a 	bl	80094cc <create_chain>
 8009c38:	4601      	mov	r1, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c3a:	b948      	cbnz	r0, 8009c50 <f_write+0x98>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009c3c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009c40:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009c44:	4293      	cmp	r3, r2
 8009c46:	f240 8094 	bls.w	8009d72 <f_write+0x1ba>
 8009c4a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8009c4e:	e090      	b.n	8009d72 <f_write+0x1ba>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009c50:	2901      	cmp	r1, #1
 8009c52:	d101      	bne.n	8009c58 <f_write+0xa0>
 8009c54:	2002      	movs	r0, #2
 8009c56:	e002      	b.n	8009c5e <f_write+0xa6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009c58:	1c4a      	adds	r2, r1, #1
 8009c5a:	d104      	bne.n	8009c66 <f_write+0xae>
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f884 0207 	strb.w	r0, [r4, #519]	; 0x207
 8009c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->clust = clst;			/* Update current cluster */
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009c66:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;			/* Update current cluster */
 8009c6a:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009c6e:	b90b      	cbnz	r3, 8009c74 <f_write+0xbc>
 8009c70:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009c74:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c78:	065b      	lsls	r3, r3, #25
 8009c7a:	d511      	bpl.n	8009ca0 <f_write+0xe8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 8009c7c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009c80:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009c84:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009c88:	4621      	mov	r1, r4
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f7fe ff3c 	bl	8008b08 <disk_write>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1e3      	bne.n	8009c5c <f_write+0xa4>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8009c94:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c9c:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009ca0:	f8d4 b200 	ldr.w	fp, [r4, #512]	; 0x200
 8009ca4:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009ca8:	4658      	mov	r0, fp
 8009caa:	f7ff fadb 	bl	8009264 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d0d0      	beq.n	8009c54 <f_write+0x9c>
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009cb2:	0a75      	lsrs	r5, r6, #9
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
 8009cb4:	eb00 0a09 	add.w	sl, r0, r9
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009cb8:	d025      	beq.n	8009d06 <f_write+0x14e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009cba:	f89b 3202 	ldrb.w	r3, [fp, #514]	; 0x202
					cc = fp->fs->csize - csect;
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
 8009cbe:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009cc2:	eb05 0209 	add.w	r2, r5, r9
 8009cc6:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8009cc8:	bf88      	it	hi
 8009cca:	ebc9 0503 	rsbhi	r5, r9, r3
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
 8009cce:	4639      	mov	r1, r7
 8009cd0:	4652      	mov	r2, sl
 8009cd2:	462b      	mov	r3, r5
 8009cd4:	f7fe ff18 	bl	8008b08 <disk_write>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d1bf      	bne.n	8009c5c <f_write+0xa4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009cdc:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8009ce0:	ebca 0101 	rsb	r1, sl, r1
 8009ce4:	42a9      	cmp	r1, r5
 8009ce6:	d20c      	bcs.n	8009d02 <f_write+0x14a>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009ce8:	4620      	mov	r0, r4
 8009cea:	eb07 2141 	add.w	r1, r7, r1, lsl #9
 8009cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cf2:	f7fe ff45 	bl	8008b80 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009cf6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cfe:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009d02:	026d      	lsls	r5, r5, #9
 8009d04:	e028      	b.n	8009d58 <f_write+0x1a0>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009d06:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009d0a:	4553      	cmp	r3, sl
 8009d0c:	d00e      	beq.n	8009d2c <f_write+0x174>
				if (fp->fptr < fp->fsize &&
 8009d0e:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8009d12:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d208      	bcs.n	8009d2c <f_write+0x174>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1))
 8009d1a:	f89b 0201 	ldrb.w	r0, [fp, #513]	; 0x201
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4652      	mov	r2, sl
 8009d22:	2301      	movs	r3, #1
 8009d24:	f7fe fee0 	bl	8008ae8 <disk_read>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d197      	bne.n	8009c5c <f_write+0xa4>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1))
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8009d2c:	f8c4 a218 	str.w	sl, [r4, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009d30:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8009d34:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009d38:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8009d3c:	42b5      	cmp	r5, r6
 8009d3e:	bf28      	it	cs
 8009d40:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009d42:	4420      	add	r0, r4
 8009d44:	4639      	mov	r1, r7
 8009d46:	462a      	mov	r2, r5
 8009d48:	f7fe ff1a 	bl	8008b80 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009d4c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d54:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009d58:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009d5c:	442b      	add	r3, r5
 8009d5e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8009d62:	f8d8 3000 	ldr.w	r3, [r8]
 8009d66:	442b      	add	r3, r5
 8009d68:	442f      	add	r7, r5
 8009d6a:	f8c8 3000 	str.w	r3, [r8]
 8009d6e:	1b76      	subs	r6, r6, r5
 8009d70:	e73f      	b.n	8009bf2 <f_write+0x3a>
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009d72:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009d76:	f043 0320 	orr.w	r3, r3, #32
 8009d7a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 8009d84:	2007      	movs	r0, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 8009d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d8a <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009d8a:	290a      	cmp	r1, #10
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d8e:	4604      	mov	r4, r0
 8009d90:	460e      	mov	r6, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009d92:	d102      	bne.n	8009d9a <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8009d94:	210d      	movs	r1, #13
 8009d96:	f7ff fff8 	bl	8009d8a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009d9a:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	db14      	blt.n	8009dca <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009da0:	1c5d      	adds	r5, r3, #1
 8009da2:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009da4:	2d3c      	cmp	r5, #60	; 0x3c
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009da6:	731e      	strb	r6, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009da8:	dd0b      	ble.n	8009dc2 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009daa:	462a      	mov	r2, r5
 8009dac:	ab01      	add	r3, sp, #4
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	f104 010c 	add.w	r1, r4, #12
 8009db4:	f7ff ff00 	bl	8009bb8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	1b5d      	subs	r5, r3, r5
 8009dbc:	bf18      	it	ne
 8009dbe:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 8009dc2:	68a3      	ldr	r3, [r4, #8]

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 8009dc4:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60a3      	str	r3, [r4, #8]
}
 8009dca:	b002      	add	sp, #8
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}

08009dce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009dce:	b570      	push	{r4, r5, r6, lr}
 8009dd0:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009dd2:	f7fe ff98 	bl	8008d06 <validate>
	if (res == FR_OK) {
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d15f      	bne.n	8009e9a <f_sync+0xcc>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009dda:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009dde:	f003 0220 	and.w	r2, r3, #32
 8009de2:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	d057      	beq.n	8009e9a <f_sync+0xcc>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009dea:	065b      	lsls	r3, r3, #25
 8009dec:	d511      	bpl.n	8009e12 <f_sync+0x44>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
 8009dee:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009df2:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009df6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f7fe fe83 	bl	8008b08 <disk_write>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d147      	bne.n	8009e96 <f_sync+0xc8>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8009e06:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e0e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009e12:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009e16:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8009e1a:	f7ff f82a 	bl	8008e72 <move_window>
			if (res == FR_OK) {
 8009e1e:	4606      	mov	r6, r0
 8009e20:	bbd8      	cbnz	r0, 8009e9a <f_sync+0xcc>
				dir = fp->dir_ptr;
 8009e22:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009e26:	7aeb      	ldrb	r3, [r5, #11]
 8009e28:	f043 0320 	orr.w	r3, r3, #32
 8009e2c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8009e2e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009e32:	772b      	strb	r3, [r5, #28]
 8009e34:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	776b      	strb	r3, [r5, #29]
 8009e3c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8009e40:	77ab      	strb	r3, [r5, #30]
 8009e42:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 8009e46:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009e48:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 8009e4c:	76ab      	strb	r3, [r5, #26]
 8009e4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 8009e52:	0c1b      	lsrs	r3, r3, #16
 8009e54:	752b      	strb	r3, [r5, #20]
 8009e56:	0a1b      	lsrs	r3, r3, #8
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 8009e58:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 8009e5a:	756b      	strb	r3, [r5, #21]
			if (res == FR_OK) {
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = get_fattime();							/* Update updated time */
 8009e5c:	f7fe fe6e 	bl	8008b3c <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tm);
 8009e60:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009e64:	75a8      	strb	r0, [r5, #22]
 8009e66:	75eb      	strb	r3, [r5, #23]
 8009e68:	0c03      	lsrs	r3, r0, #16
 8009e6a:	0e00      	lsrs	r0, r0, #24
 8009e6c:	762b      	strb	r3, [r5, #24]
 8009e6e:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8009e70:	74ae      	strb	r6, [r5, #18]
 8009e72:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8009e74:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e78:	f023 0320 	bic.w	r3, r3, #32
 8009e7c:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009e80:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8009e8a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8009e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				tm = get_fattime();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
				ST_WORD(dir+DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
				res = sync_fs(fp->fs);
 8009e92:	f7fe bf90 	b.w	8008db6 <sync_fs>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1))
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009e96:	2001      	movs	r0, #1
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}

08009e9c <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
	WCHAR w;
	DWORD tm;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &label, 1);
 8009ea2:	a901      	add	r1, sp, #4
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Pointer to the volume label to set */
)
{
 8009ea4:	9001      	str	r0, [sp, #4]
	WCHAR w;
	DWORD tm;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &label, 1);
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	a886      	add	r0, sp, #536	; 0x218
 8009eaa:	f7ff f843 	bl	8008f34 <find_volume>
	if (res) LEAVE_FF(dj.fs, res);
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f040 8082 	bne.w	8009fb8 <f_setlabel+0x11c>

	/* Create a volume label in directory form */
	vn[0] = 0;
 8009eb4:	ac03      	add	r4, sp, #12
	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
 8009eb6:	9901      	ldr	r1, [sp, #4]
	/* Get logical drive number */
	res = find_volume(&dj.fs, &label, 1);
	if (res) LEAVE_FF(dj.fs, res);

	/* Create a volume label in directory form */
	vn[0] = 0;
 8009eb8:	7020      	strb	r0, [r4, #0]
	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
 8009eba:	460a      	mov	r2, r1
 8009ebc:	1a53      	subs	r3, r2, r1
 8009ebe:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d1fa      	bne.n	8009ebc <f_setlabel+0x20>
 8009ec6:	440b      	add	r3, r1
	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	eba3 0601 	sub.w	r6, r3, r1
 8009ece:	d107      	bne.n	8009ee0 <f_setlabel+0x44>
		} while (i < sl);
		while (j < 11) vn[j++] = ' ';
	}

	/* Set volume label */
	dj.sclust = 0;					/* Open root directory */
 8009ed0:	2100      	movs	r1, #0
	res = dir_sdi(&dj, 0);
 8009ed2:	a806      	add	r0, sp, #24
		} while (i < sl);
		while (j < 11) vn[j++] = ' ';
	}

	/* Set volume label */
	dj.sclust = 0;					/* Open root directory */
 8009ed4:	9188      	str	r1, [sp, #544]	; 0x220
	res = dir_sdi(&dj, 0);
 8009ed6:	f7ff fa34 	bl	8009342 <dir_sdi>
	if (res == FR_OK) {
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d16c      	bne.n	8009fb8 <f_setlabel+0x11c>
 8009ede:	e01d      	b.n	8009f1c <f_setlabel+0x80>
	if (res) LEAVE_FF(dj.fs, res);

	/* Create a volume label in directory form */
	vn[0] = 0;
	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
 8009ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ee4:	2a20      	cmp	r2, #32
 8009ee6:	d0ef      	beq.n	8009ec8 <f_setlabel+0x2c>
 8009ee8:	2200      	movs	r2, #0
		i = j = 0;
		do {
#if _USE_LFN && _LFN_UNICODE
			w = ff_convert(ff_wtoupper(label[i++]), 0);
#else
			w = (BYTE)label[i++];
 8009eea:	5c88      	ldrb	r0, [r1, r2]
 8009eec:	b283      	uxth	r3, r0
			if (IsDBCS1(w))
				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
#if _USE_LFN
			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
#else
			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
 8009eee:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
 8009ef2:	2d19      	cmp	r5, #25
 8009ef4:	d802      	bhi.n	8009efc <f_setlabel+0x60>
 8009ef6:	3b20      	subs	r3, #32
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	e007      	b.n	8009f0c <f_setlabel+0x70>
#ifdef _EXCVT
			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
 8009efc:	2b7f      	cmp	r3, #127	; 0x7f
 8009efe:	bf82      	ittt	hi
 8009f00:	4b2f      	ldrhi	r3, [pc, #188]	; (8009fc0 <f_setlabel+0x124>)
 8009f02:	18c0      	addhi	r0, r0, r3
 8009f04:	f810 3c80 	ldrbhi.w	r3, [r0, #-128]
#else
			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d045      	beq.n	8009f98 <f_setlabel+0xfc>
 8009f0c:	4d2d      	ldr	r5, [pc, #180]	; (8009fc4 <f_setlabel+0x128>)
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 8009f0e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d03e      	beq.n	8009f94 <f_setlabel+0xf8>
 8009f16:	4298      	cmp	r0, r3
 8009f18:	d1f9      	bne.n	8009f0e <f_setlabel+0x72>
 8009f1a:	e03d      	b.n	8009f98 <f_setlabel+0xfc>

	/* Set volume label */
	dj.sclust = 0;					/* Open root directory */
	res = dir_sdi(&dj, 0);
	if (res == FR_OK) {
		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
 8009f1c:	a806      	add	r0, sp, #24
 8009f1e:	2101      	movs	r1, #1
 8009f20:	f7ff fc9c 	bl	800985c <dir_read>
		if (res == FR_OK) {			/* A volume label is found */
 8009f24:	b958      	cbnz	r0, 8009f3e <f_setlabel+0xa2>
			if (vn[0]) {
 8009f26:	7823      	ldrb	r3, [r4, #0]
 8009f28:	b12b      	cbz	r3, 8009f36 <f_setlabel+0x9a>
				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
 8009f2a:	988b      	ldr	r0, [sp, #556]	; 0x22c
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	220b      	movs	r2, #11
 8009f30:	f7fe fe26 	bl	8008b80 <mem_cpy>
 8009f34:	e019      	b.n	8009f6a <f_setlabel+0xce>
				tm = get_fattime();
				ST_DWORD(dj.dir+DIR_WrtTime, tm);
			} else {
				dj.dir[0] = DDE;			/* Remove the volume label */
 8009f36:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8009f38:	22e5      	movs	r2, #229	; 0xe5
 8009f3a:	701a      	strb	r2, [r3, #0]
 8009f3c:	e023      	b.n	8009f86 <f_setlabel+0xea>
			}
			dj.fs->wflag = 1;
			res = sync_fs(dj.fs);
		} else {					/* No volume label is found or error */
			if (res == FR_NO_FILE) {
 8009f3e:	2804      	cmp	r0, #4
 8009f40:	d13a      	bne.n	8009fb8 <f_setlabel+0x11c>
				res = FR_OK;
				if (vn[0]) {				/* Create volume label as new */
 8009f42:	7820      	ldrb	r0, [r4, #0]
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d037      	beq.n	8009fb8 <f_setlabel+0x11c>
					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
 8009f48:	a806      	add	r0, sp, #24
 8009f4a:	f7ff fcb9 	bl	80098c0 <dir_alloc.constprop.12>
					if (res == FR_OK) {
 8009f4e:	4601      	mov	r1, r0
 8009f50:	bb90      	cbnz	r0, 8009fb8 <f_setlabel+0x11c>
						mem_set(dj.dir, 0, SZ_DIR);	/* Set volume label */
 8009f52:	988b      	ldr	r0, [sp, #556]	; 0x22c
 8009f54:	2220      	movs	r2, #32
 8009f56:	f7fe fe1d 	bl	8008b94 <mem_set>
						mem_cpy(dj.dir, vn, 11);
 8009f5a:	220b      	movs	r2, #11
 8009f5c:	988b      	ldr	r0, [sp, #556]	; 0x22c
 8009f5e:	4621      	mov	r1, r4
 8009f60:	f7fe fe0e 	bl	8008b80 <mem_cpy>
						dj.dir[DIR_Attr] = AM_VOL;
 8009f64:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8009f66:	2208      	movs	r2, #8
 8009f68:	72da      	strb	r2, [r3, #11]
						tm = get_fattime();
 8009f6a:	f7fe fde7 	bl	8008b3c <get_fattime>
						ST_DWORD(dj.dir+DIR_WrtTime, tm);
 8009f6e:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8009f70:	7598      	strb	r0, [r3, #22]
 8009f72:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8009f74:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8009f78:	75da      	strb	r2, [r3, #23]
 8009f7a:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8009f7c:	0c02      	lsrs	r2, r0, #16
 8009f7e:	761a      	strb	r2, [r3, #24]
 8009f80:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 8009f82:	0e00      	lsrs	r0, r0, #24
 8009f84:	7658      	strb	r0, [r3, #25]
						dj.fs->wflag = 1;
 8009f86:	9886      	ldr	r0, [sp, #536]	; 0x218
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
						res = sync_fs(dj.fs);
 8009f8e:	f7fe ff12 	bl	8008db6 <sync_fs>
 8009f92:	e011      	b.n	8009fb8 <f_setlabel+0x11c>
#else
			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
#endif
			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
 8009f94:	2a0b      	cmp	r2, #11
 8009f96:	d101      	bne.n	8009f9c <f_setlabel+0x100>
				LEAVE_FF(dj.fs, FR_INVALID_NAME);
 8009f98:	2006      	movs	r0, #6
 8009f9a:	e00d      	b.n	8009fb8 <f_setlabel+0x11c>
			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
			vn[j++] = (BYTE)w;
 8009f9c:	3201      	adds	r2, #1
 8009f9e:	18a0      	adds	r0, r4, r2
		} while (i < sl);
 8009fa0:	42b2      	cmp	r2, r6
#endif
#endif
			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
				LEAVE_FF(dj.fs, FR_INVALID_NAME);
			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
			vn[j++] = (BYTE)w;
 8009fa2:	f800 3c01 	strb.w	r3, [r0, #-1]
		} while (i < sl);
 8009fa6:	d3a0      	bcc.n	8009eea <f_setlabel+0x4e>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	1b1a      	subs	r2, r3, r4
		while (j < 11) vn[j++] = ' ';
 8009fac:	2a0a      	cmp	r2, #10
 8009fae:	d88f      	bhi.n	8009ed0 <f_setlabel+0x34>
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f803 2b01 	strb.w	r2, [r3], #1
 8009fb6:	e7f8      	b.n	8009faa <f_setlabel+0x10e>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8009fb8:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	bf00      	nop
 8009fc0:	0802954c 	.word	0x0802954c
 8009fc4:	080294fe 	.word	0x080294fe

08009fc8 <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Allocation unit [bytes] */
)
{
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	b089      	sub	sp, #36	; 0x24
 8009fce:	ab08      	add	r3, sp, #32
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	f843 0d0c 	str.w	r0, [r3, #-12]!
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);
 8009fd6:	4618      	mov	r0, r3
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Allocation unit [bytes] */
)
{
 8009fd8:	4616      	mov	r6, r2
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);
 8009fda:	f7fe fe7b 	bl	8008cd4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f2c0 829b 	blt.w	800a51a <f_mkfs+0x552>
	if (sfd > 1) return FR_INVALID_PARAMETER;
 8009fe4:	f1bb 0f01 	cmp.w	fp, #1
 8009fe8:	f200 8299 	bhi.w	800a51e <f_mkfs+0x556>
	if (au & (au - 1)) return FR_INVALID_PARAMETER;
 8009fec:	1e73      	subs	r3, r6, #1
 8009fee:	4033      	ands	r3, r6
 8009ff0:	f040 8295 	bne.w	800a51e <f_mkfs+0x556>
	fs = FatFs[vol];
 8009ff4:	4a8e      	ldr	r2, [pc, #568]	; (800a230 <f_mkfs+0x268>)
 8009ff6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
	if (!fs) return FR_NOT_ENABLED;
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	f000 8291 	beq.w	800a522 <f_mkfs+0x55a>
	fs->fs_type = 0;
	pdrv = LD2PD(vol);	/* Physical drive */
 800a000:	fa5f f880 	uxtb.w	r8, r0
	if (vol < 0) return FR_INVALID_DRIVE;
	if (sfd > 1) return FR_INVALID_PARAMETER;
	if (au & (au - 1)) return FR_INVALID_PARAMETER;
	fs = FatFs[vol];
	if (!fs) return FR_NOT_ENABLED;
	fs->fs_type = 0;
 800a004:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 800a008:	4640      	mov	r0, r8
 800a00a:	f7fe fd57 	bl	8008abc <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a00e:	07c2      	lsls	r2, r0, #31
 800a010:	f100 8289 	bmi.w	800a526 <f_mkfs+0x55e>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a014:	0743      	lsls	r3, r0, #29
 800a016:	f100 8288 	bmi.w	800a52a <f_mkfs+0x562>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl+12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 800a01a:	4640      	mov	r0, r8
 800a01c:	2101      	movs	r1, #1
 800a01e:	aa07      	add	r2, sp, #28
 800a020:	f7fe fd82 	bl	8008b28 <disk_ioctl>
 800a024:	b108      	cbz	r0, 800a02a <f_mkfs+0x62>
			return FR_DISK_ERR;
 800a026:	2001      	movs	r0, #1
 800a028:	e280      	b.n	800a52c <f_mkfs+0x564>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl+12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 800a02a:	9d07      	ldr	r5, [sp, #28]
 800a02c:	2d7f      	cmp	r5, #127	; 0x7f
 800a02e:	d9fa      	bls.n	800a026 <f_mkfs+0x5e>
			return FR_DISK_ERR;
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 800a030:	f1bb 0f00 	cmp.w	fp, #0
 800a034:	bf14      	ite	ne
 800a036:	f04f 0900 	movne.w	r9, #0
 800a03a:	f04f 093f 	moveq.w	r9, #63	; 0x3f
		n_vol -= b_vol;				/* Volume size */
 800a03e:	ebc9 0505 	rsb	r5, r9, r5
 800a042:	9507      	str	r5, [sp, #28]
	}

	if (!au) {				/* AU auto selection */
 800a044:	b96e      	cbnz	r6, 800a062 <f_mkfs+0x9a>
		vs = n_vol / (2000 / (SS(fs) / 512));
 800a046:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a04a:	fbb5 f3f3 	udiv	r3, r5, r3
		for (i = 0; vs < vst[i]; i++) ;
 800a04e:	4a79      	ldr	r2, [pc, #484]	; (800a234 <f_mkfs+0x26c>)
 800a050:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 800a054:	4293      	cmp	r3, r2
 800a056:	d201      	bcs.n	800a05c <f_mkfs+0x94>
 800a058:	3601      	adds	r6, #1
 800a05a:	e7f8      	b.n	800a04e <f_mkfs+0x86>
		au = cst[i];
 800a05c:	4b76      	ldr	r3, [pc, #472]	; (800a238 <f_mkfs+0x270>)
 800a05e:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
	}
	au /= SS(fs);		/* Number of sectors per cluster */
	if (au == 0) au = 1;
 800a062:	0a76      	lsrs	r6, r6, #9
 800a064:	d003      	beq.n	800a06e <f_mkfs+0xa6>
	if (au > 128) au = 128;
 800a066:	2e81      	cmp	r6, #129	; 0x81
 800a068:	bf28      	it	cs
 800a06a:	2680      	movcs	r6, #128	; 0x80
 800a06c:	e000      	b.n	800a070 <f_mkfs+0xa8>
		vs = n_vol / (2000 / (SS(fs) / 512));
		for (i = 0; vs < vst[i]; i++) ;
		au = cst[i];
	}
	au /= SS(fs);		/* Number of sectors per cluster */
	if (au == 0) au = 1;
 800a06e:	2601      	movs	r6, #1
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 800a070:	f640 73f5 	movw	r3, #4085	; 0xff5
	au /= SS(fs);		/* Number of sectors per cluster */
	if (au == 0) au = 1;
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 800a074:	fbb5 f5f6 	udiv	r5, r5, r6
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 800a078:	429d      	cmp	r5, r3
 800a07a:	d906      	bls.n	800a08a <f_mkfs+0xc2>
 800a07c:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 800a080:	42bd      	cmp	r5, r7
 800a082:	bf8c      	ite	hi
 800a084:	2703      	movhi	r7, #3
 800a086:	2702      	movls	r7, #2
 800a088:	e000      	b.n	800a08c <f_mkfs+0xc4>
	if (au == 0) au = 1;
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
 800a08a:	2701      	movs	r7, #1
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
	
	printf("FAT: %d\n", fmt);
 800a08c:	486b      	ldr	r0, [pc, #428]	; (800a23c <f_mkfs+0x274>)
 800a08e:	4639      	mov	r1, r7
 800a090:	f00f fafe 	bl	8019690 <printf>

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 800a094:	2f03      	cmp	r7, #3
 800a096:	d108      	bne.n	800a0aa <f_mkfs+0xe2>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 800a098:	00ad      	lsls	r5, r5, #2
 800a09a:	f205 2507 	addw	r5, r5, #519	; 0x207
		n_rsv = 32;
		n_dir = 0;
 800a09e:	2300      	movs	r3, #0
	
	printf("FAT: %d\n", fmt);

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 800a0a0:	0a6d      	lsrs	r5, r5, #9
		n_rsv = 32;
		n_dir = 0;
 800a0a2:	9302      	str	r3, [sp, #8]
	printf("FAT: %d\n", fmt);

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
 800a0a4:	f04f 0a20 	mov.w	sl, #32
 800a0a8:	e010      	b.n	800a0cc <f_mkfs+0x104>
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 800a0aa:	2f01      	cmp	r7, #1
 800a0ac:	bf03      	ittte	eq
 800a0ae:	eb05 0545 	addeq.w	r5, r5, r5, lsl #1
 800a0b2:	3501      	addeq	r5, #1
 800a0b4:	086d      	lsreq	r5, r5, #1
 800a0b6:	3502      	addne	r5, #2
 800a0b8:	bf0c      	ite	eq
 800a0ba:	3503      	addeq	r5, #3
 800a0bc:	006d      	lslne	r5, r5, #1
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 800a0be:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
		n_rsv = 1;
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
 800a0c2:	2320      	movs	r3, #32
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 800a0c4:	0a6d      	lsrs	r5, r5, #9
		n_rsv = 1;
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
 800a0c6:	9302      	str	r3, [sp, #8]
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
		n_rsv = 1;
 800a0c8:	f04f 0a01 	mov.w	sl, #1
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 800a0cc:	eb0a 0309 	add.w	r3, sl, r9
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	9b02      	ldr	r3, [sp, #8]
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
	b_data = b_dir + n_dir;				/* Data area start sector */
 800a0d4:	9a01      	ldr	r2, [sp, #4]
 800a0d6:	442b      	add	r3, r5
 800a0d8:	eb03 0c02 	add.w	ip, r3, r2
 800a0dc:	ebc9 0306 	rsb	r3, r9, r6
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a0e0:	9a07      	ldr	r2, [sp, #28]
 800a0e2:	4463      	add	r3, ip
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d201      	bcs.n	800a0ec <f_mkfs+0x124>
 800a0e8:	200e      	movs	r0, #14
 800a0ea:	e21f      	b.n	800a52c <f_mkfs+0x564>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	2103      	movs	r1, #3
 800a0f0:	aa06      	add	r2, sp, #24
 800a0f2:	f8cd c00c 	str.w	ip, [sp, #12]
 800a0f6:	f7fe fd17 	bl	8008b28 <disk_ioctl>
 800a0fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a0fe:	b920      	cbnz	r0, 800a10a <f_mkfs+0x142>
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	3b01      	subs	r3, #1
 800a104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a108:	d301      	bcc.n	800a10e <f_mkfs+0x146>
 800a10a:	2301      	movs	r3, #1
 800a10c:	9306      	str	r3, [sp, #24]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 800a10e:	9a06      	ldr	r2, [sp, #24]
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 800a110:	9902      	ldr	r1, [sp, #8]
 800a112:	1e53      	subs	r3, r2, #1

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
	n = (n - b_data) / N_FATS;
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 800a114:	2f03      	cmp	r7, #3
	b_data = b_dir + n_dir;				/* Data area start sector */
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 800a116:	f1c2 0200 	rsb	r2, r2, #0
 800a11a:	4463      	add	r3, ip
 800a11c:	ea03 0302 	and.w	r3, r3, r2
	n = (n - b_data) / N_FATS;
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
		n_rsv += n;
		b_fat += n;
 800a120:	bf08      	it	eq
 800a122:	9a01      	ldreq	r2, [sp, #4]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
	n = (n - b_data) / N_FATS;
 800a124:	ebcc 0303 	rsb	r3, ip, r3
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
		n_rsv += n;
		b_fat += n;
 800a128:	bf04      	itt	eq
 800a12a:	18d2      	addeq	r2, r2, r3
	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
	n = (n - b_data) / N_FATS;
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
		n_rsv += n;
 800a12c:	449a      	addeq	sl, r3
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
	n = (n - b_data) / N_FATS;
 800a12e:	9306      	str	r3, [sp, #24]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
		n_rsv += n;
		b_fat += n;
 800a130:	bf08      	it	eq
 800a132:	4613      	moveq	r3, r2
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 800a134:	9a07      	ldr	r2, [sp, #28]
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
	n = (n - b_data) / N_FATS;
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
		n_rsv += n;
		b_fat += n;
 800a136:	bf0c      	ite	eq
 800a138:	9301      	streq	r3, [sp, #4]
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 800a13a:	18ed      	addne	r5, r5, r3
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 800a13c:	ebca 0302 	rsb	r3, sl, r2
 800a140:	1b5b      	subs	r3, r3, r5
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 800a142:	2f02      	cmp	r7, #2
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 800a144:	eba3 0301 	sub.w	r3, r3, r1
 800a148:	fbb3 f3f6 	udiv	r3, r3, r6
 800a14c:	9303      	str	r3, [sp, #12]
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 800a14e:	d105      	bne.n	800a15c <f_mkfs+0x194>
 800a150:	9903      	ldr	r1, [sp, #12]
 800a152:	f640 73f5 	movw	r3, #4085	; 0xff5
 800a156:	4299      	cmp	r1, r3
 800a158:	d9c6      	bls.n	800a0e8 <f_mkfs+0x120>
 800a15a:	e013      	b.n	800a184 <f_mkfs+0x1bc>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 800a15c:	2f03      	cmp	r7, #3
 800a15e:	d107      	bne.n	800a170 <f_mkfs+0x1a8>
 800a160:	9a03      	ldr	r2, [sp, #12]
 800a162:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 800a166:	429a      	cmp	r2, r3
 800a168:	d9be      	bls.n	800a0e8 <f_mkfs+0x120>
		return FR_MKFS_ABORTED;

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
 800a16a:	f04f 0c0c 	mov.w	ip, #12
 800a16e:	e010      	b.n	800a192 <f_mkfs+0x1ca>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 800a170:	2f01      	cmp	r7, #1
 800a172:	d107      	bne.n	800a184 <f_mkfs+0x1bc>
			sys = 0x01;	/* FAT12(<65536) */
 800a174:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a178:	bf2c      	ite	cs
 800a17a:	f04f 0c06 	movcs.w	ip, #6
 800a17e:	f04f 0c01 	movcc.w	ip, #1
 800a182:	e006      	b.n	800a192 <f_mkfs+0x1ca>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 800a184:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a188:	bf2c      	ite	cs
 800a18a:	f04f 0c06 	movcs.w	ip, #6
 800a18e:	f04f 0c04 	movcc.w	ip, #4
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1))	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 800a192:	f1bb 0f00 	cmp.w	fp, #0
 800a196:	d153      	bne.n	800a240 <f_mkfs+0x278>
			md = 0xF0;
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 800a198:	4620      	mov	r0, r4
 800a19a:	4659      	mov	r1, fp
 800a19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a0:	f8cd c010 	str.w	ip, [sp, #16]
 800a1a4:	f7fe fcf6 	bl	8008b94 <mem_set>
			tbl = fs->win.d8+MBR_Table;	/* Create partition table for single partition in the drive */
			tbl[1] = 1;						/* Partition start head */
			tbl[2] = 1;						/* Partition start sector */
			tbl[3] = 0;						/* Partition start cylinder */
			tbl[4] = sys;					/* System type */
			tbl[5] = 254;					/* Partition end head */
 800a1a8:	22fe      	movs	r2, #254	; 0xfe
 800a1aa:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
			n = (b_vol + n_vol) / 63 / 255;
 800a1ae:	9a07      	ldr	r2, [sp, #28]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
			tbl[7] = (BYTE)n;				/* End cylinder */
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
 800a1b0:	f884 21ca 	strb.w	r2, [r4, #458]	; 0x1ca
			tbl[1] = 1;						/* Partition start head */
			tbl[2] = 1;						/* Partition start sector */
			tbl[3] = 0;						/* Partition start cylinder */
			tbl[4] = sys;					/* System type */
			tbl[5] = 254;					/* Partition end head */
			n = (b_vol + n_vol) / 63 / 255;
 800a1b4:	eb09 0102 	add.w	r1, r9, r2
 800a1b8:	f643 60c1 	movw	r0, #16065	; 0x3ec1
 800a1bc:	fbb1 f1f0 	udiv	r1, r1, r0
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 800a1c0:	0888      	lsrs	r0, r1, #2
			tbl[1] = 1;						/* Partition start head */
			tbl[2] = 1;						/* Partition start sector */
			tbl[3] = 0;						/* Partition start cylinder */
			tbl[4] = sys;					/* System type */
			tbl[5] = 254;					/* Partition end head */
			n = (b_vol + n_vol) / 63 / 255;
 800a1c2:	9106      	str	r1, [sp, #24]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
			tbl[7] = (BYTE)n;				/* End cylinder */
 800a1c4:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 800a1c8:	213f      	movs	r1, #63	; 0x3f
 800a1ca:	f884 11c6 	strb.w	r1, [r4, #454]	; 0x1c6
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
 800a1ce:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a1d2:	f884 11cb 	strb.w	r1, [r4, #459]	; 0x1cb
 800a1d6:	0c11      	lsrs	r1, r2, #16
 800a1d8:	0e12      	lsrs	r2, r2, #24
 800a1da:	f884 21cd 	strb.w	r2, [r4, #461]	; 0x1cd
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);	/* MBR signature */
 800a1de:	2255      	movs	r2, #85	; 0x55
		if (sfd) {	/* No partition table (SFD) */
			md = 0xF0;
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
			tbl = fs->win.d8+MBR_Table;	/* Create partition table for single partition in the drive */
			tbl[1] = 1;						/* Partition start head */
 800a1e0:	2301      	movs	r3, #1
			tbl[2] = 1;						/* Partition start sector */
			tbl[3] = 0;						/* Partition start cylinder */
			tbl[4] = sys;					/* System type */
			tbl[5] = 254;					/* Partition end head */
			n = (b_vol + n_vol) / 63 / 255;
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 800a1e2:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
			mem_set(fs->win.d8, 0, SS(fs));
			tbl = fs->win.d8+MBR_Table;	/* Create partition table for single partition in the drive */
			tbl[1] = 1;						/* Partition start head */
			tbl[2] = 1;						/* Partition start sector */
			tbl[3] = 0;						/* Partition start cylinder */
			tbl[4] = sys;					/* System type */
 800a1e6:	f8dd c010 	ldr.w	ip, [sp, #16]
			n = (b_vol + n_vol) / 63 / 255;
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
			tbl[7] = (BYTE)n;				/* End cylinder */
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);	/* MBR signature */
 800a1ea:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 800a1ee:	22aa      	movs	r2, #170	; 0xaa
			tbl[2] = 1;						/* Partition start sector */
			tbl[3] = 0;						/* Partition start cylinder */
			tbl[4] = sys;					/* System type */
			tbl[5] = 254;					/* Partition end head */
			n = (b_vol + n_vol) / 63 / 255;
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 800a1f0:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
			tbl[7] = (BYTE)n;				/* End cylinder */
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
 800a1f4:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);	/* MBR signature */
 800a1f8:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
		if (sfd) {	/* No partition table (SFD) */
			md = 0xF0;
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
			tbl = fs->win.d8+MBR_Table;	/* Create partition table for single partition in the drive */
			tbl[1] = 1;						/* Partition start head */
 800a1fc:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			tbl[2] = 1;						/* Partition start sector */
 800a200:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
			tbl[3] = 0;						/* Partition start cylinder */
 800a204:	f884 b1c1 	strb.w	fp, [r4, #449]	; 0x1c1
			tbl[4] = sys;					/* System type */
 800a208:	f884 c1c2 	strb.w	ip, [r4, #450]	; 0x1c2
			tbl[5] = 254;					/* Partition end head */
			n = (b_vol + n_vol) / 63 / 255;
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
			tbl[7] = (BYTE)n;				/* End cylinder */
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 800a20c:	f884 b1c7 	strb.w	fp, [r4, #455]	; 0x1c7
 800a210:	f884 b1c8 	strb.w	fp, [r4, #456]	; 0x1c8
 800a214:	f884 b1c9 	strb.w	fp, [r4, #457]	; 0x1c9
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
			ST_WORD(fs->win.d8+BS_55AA, 0xAA55);	/* MBR signature */
			if (disk_write(pdrv, fs->win.d8, 0, 1))	/* Write it to the MBR */
 800a218:	4640      	mov	r0, r8
 800a21a:	4621      	mov	r1, r4
 800a21c:	465a      	mov	r2, fp
 800a21e:	f7fe fc73 	bl	8008b08 <disk_write>
 800a222:	2800      	cmp	r0, #0
 800a224:	f47f aeff 	bne.w	800a026 <f_mkfs+0x5e>
				return FR_DISK_ERR;
			md = 0xF8;
 800a228:	f04f 0bf8 	mov.w	fp, #248	; 0xf8
 800a22c:	e00a      	b.n	800a244 <f_mkfs+0x27c>
 800a22e:	bf00      	nop
 800a230:	2000e01c 	.word	0x2000e01c
 800a234:	080295cc 	.word	0x080295cc
 800a238:	080294da 	.word	0x080294da
 800a23c:	0802950f 	.word	0x0802950f
		if (disk_write(pdrv, fs->win.d8, 0, 1))	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
			md = 0xF0;
 800a240:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
	mem_set(tbl, 0, SS(fs));
 800a244:	4620      	mov	r0, r4
 800a246:	2100      	movs	r1, #0
 800a248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a24c:	f7fe fca2 	bl	8008b94 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 800a250:	4620      	mov	r0, r4
 800a252:	49b8      	ldr	r1, [pc, #736]	; (800a534 <f_mkfs+0x56c>)
 800a254:	220b      	movs	r2, #11
 800a256:	f7fe fc93 	bl	8008b80 <mem_cpy>
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
 800a25a:	2300      	movs	r3, #0
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 800a25c:	2f03      	cmp	r7, #3
	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
 800a25e:	72e3      	strb	r3, [r4, #11]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
	ST_WORD(tbl+BPB_RootEntCnt, i);
 800a260:	7463      	strb	r3, [r4, #17]
 800a262:	bf18      	it	ne
 800a264:	2302      	movne	r3, #2
	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
 800a266:	2202      	movs	r2, #2
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
	ST_WORD(tbl+BPB_RootEntCnt, i);
 800a268:	74a3      	strb	r3, [r4, #18]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 800a26a:	9b07      	ldr	r3, [sp, #28]
	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
 800a26c:	7322      	strb	r2, [r4, #12]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 800a26e:	2201      	movs	r2, #1
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
	ST_WORD(tbl+BPB_RootEntCnt, i);
	if (n_vol < 0x10000) {					/* Number of total sectors */
 800a270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 800a274:	7422      	strb	r2, [r4, #16]
 800a276:	b29a      	uxth	r2, r3
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
	ST_WORD(tbl+BPB_RootEntCnt, i);
	if (n_vol < 0x10000) {					/* Number of total sectors */
		ST_WORD(tbl+BPB_TotSec16, n_vol);
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
 800a278:	bf21      	itttt	cs
 800a27a:	0a12      	lsrcs	r2, r2, #8
 800a27c:	f884 3020 	strbcs.w	r3, [r4, #32]
 800a280:	f884 2021 	strbcs.w	r2, [r4, #33]	; 0x21
 800a284:	0c1a      	lsrcs	r2, r3, #16
 800a286:	bf2a      	itet	cs
 800a288:	0e1b      	lsrcs	r3, r3, #24
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
	ST_WORD(tbl+BPB_RootEntCnt, i);
	if (n_vol < 0x10000) {					/* Number of total sectors */
		ST_WORD(tbl+BPB_TotSec16, n_vol);
 800a28a:	74e3      	strbcc	r3, [r4, #19]
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
 800a28c:	f884 3023 	strbcs.w	r3, [r4, #35]	; 0x23
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
 800a290:	f884 a00e 	strb.w	sl, [r4, #14]
		ST_WORD(tbl+BPB_TotSec16, n_vol);
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
 800a294:	f04f 033f 	mov.w	r3, #63	; 0x3f
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
 800a298:	f3ca 2a07 	ubfx	sl, sl, #8, #8
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
	ST_WORD(tbl+BPB_RootEntCnt, i);
	if (n_vol < 0x10000) {					/* Number of total sectors */
		ST_WORD(tbl+BPB_TotSec16, n_vol);
 800a29c:	bf38      	it	cc
 800a29e:	0a12      	lsrcc	r2, r2, #8
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
 800a2a0:	f884 a00f 	strb.w	sl, [r4, #15]
		ST_WORD(tbl+BPB_TotSec16, n_vol);
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
 800a2a4:	7623      	strb	r3, [r4, #24]
 800a2a6:	f04f 0a00 	mov.w	sl, #0
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
 800a2aa:	f04f 03ff 	mov.w	r3, #255	; 0xff
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
	ST_WORD(tbl+BPB_RootEntCnt, i);
	if (n_vol < 0x10000) {					/* Number of total sectors */
		ST_WORD(tbl+BPB_TotSec16, n_vol);
 800a2ae:	bf34      	ite	cc
 800a2b0:	7522      	strbcc	r2, [r4, #20]
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
 800a2b2:	f884 2022 	strbcs.w	r2, [r4, #34]	; 0x22
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
 800a2b6:	76a3      	strb	r3, [r4, #26]
	tbl = fs->win.d8;							/* Clear sector */
	mem_set(tbl, 0, SS(fs));
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 800a2b8:	7366      	strb	r6, [r4, #13]
	if (n_vol < 0x10000) {					/* Number of total sectors */
		ST_WORD(tbl+BPB_TotSec16, n_vol);
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 800a2ba:	f884 b015 	strb.w	fp, [r4, #21]
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
 800a2be:	f884 a019 	strb.w	sl, [r4, #25]
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
 800a2c2:	f884 a01b 	strb.w	sl, [r4, #27]
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
 800a2c6:	f884 901c 	strb.w	r9, [r4, #28]
 800a2ca:	f884 a01d 	strb.w	sl, [r4, #29]
 800a2ce:	f884 a01e 	strb.w	sl, [r4, #30]
 800a2d2:	f884 a01f 	strb.w	sl, [r4, #31]
	n = get_fattime();						/* Use current time as VSN */
 800a2d6:	f7fe fc31 	bl	8008b3c <get_fattime>
	if (fmt == FS_FAT32) {
 800a2da:	2f03      	cmp	r7, #3
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
	n = get_fattime();						/* Use current time as VSN */
 800a2dc:	9006      	str	r0, [sp, #24]
 800a2de:	b283      	uxth	r3, r0
	if (fmt == FS_FAT32) {
 800a2e0:	d133      	bne.n	800a34a <f_mkfs+0x382>
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a2e8:	0c03      	lsrs	r3, r0, #16
 800a2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 800a2ee:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a2f2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800a2f6:	0c2b      	lsrs	r3, r5, #16
 800a2f8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800a2fc:	0e2b      	lsrs	r3, r5, #24
 800a2fe:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
 800a302:	2302      	movs	r3, #2
 800a304:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
 800a308:	2301      	movs	r3, #1
 800a30a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
 800a30e:	2306      	movs	r3, #6
 800a310:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 800a314:	2380      	movs	r3, #128	; 0x80
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
	n = get_fattime();						/* Use current time as VSN */
	if (fmt == FS_FAT32) {
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
 800a316:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 800a31a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
	n = get_fattime();						/* Use current time as VSN */
	if (fmt == FS_FAT32) {
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
 800a31e:	0e00      	lsrs	r0, r0, #24
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 800a320:	2329      	movs	r3, #41	; 0x29
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
	n = get_fattime();						/* Use current time as VSN */
	if (fmt == FS_FAT32) {
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
 800a322:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 800a326:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
 800a32a:	f884 a02d 	strb.w	sl, [r4, #45]	; 0x2d
 800a32e:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 800a332:	f884 a02f 	strb.w	sl, [r4, #47]	; 0x2f
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
 800a336:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
 800a33a:	f884 a033 	strb.w	sl, [r4, #51]	; 0x33
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 800a33e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a342:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800a346:	497c      	ldr	r1, [pc, #496]	; (800a538 <f_mkfs+0x570>)
 800a348:	e017      	b.n	800a37a <f_mkfs+0x3b2>
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
 800a34a:	0a1b      	lsrs	r3, r3, #8
 800a34c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a350:	0c03      	lsrs	r3, r0, #16
 800a352:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 800a356:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a35a:	75e3      	strb	r3, [r4, #23]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 800a35c:	2380      	movs	r3, #128	; 0x80
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
 800a35e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 800a362:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
 800a366:	0e00      	lsrs	r0, r0, #24
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 800a368:	2329      	movs	r3, #41	; 0x29
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a36a:	4974      	ldr	r1, [pc, #464]	; (800a53c <f_mkfs+0x574>)
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
 800a36c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 800a370:	75a5      	strb	r5, [r4, #22]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 800a372:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a376:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 800a37a:	2213      	movs	r2, #19
 800a37c:	f7fe fc00 	bl	8008b80 <mem_cpy>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 800a380:	2355      	movs	r3, #85	; 0x55
 800a382:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
 800a386:	23aa      	movs	r3, #170	; 0xaa
 800a388:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
	if (disk_write(pdrv, tbl, b_vol, 1))	/* Write it to the VBR sector */
 800a38c:	4640      	mov	r0, r8
 800a38e:	4621      	mov	r1, r4
 800a390:	464a      	mov	r2, r9
 800a392:	2301      	movs	r3, #1
 800a394:	f7fe fbb8 	bl	8008b08 <disk_write>
 800a398:	2800      	cmp	r0, #0
 800a39a:	f47f ae44 	bne.w	800a026 <f_mkfs+0x5e>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR+6) */
 800a39e:	2f03      	cmp	r7, #3
 800a3a0:	d106      	bne.n	800a3b0 <f_mkfs+0x3e8>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f109 0206 	add.w	r2, r9, #6
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	f7fe fbac 	bl	8008b08 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3b8:	f7fe fbec 	bl	8008b94 <mem_set>
		n = md;								/* Media descriptor byte */
		if (fmt != FS_FAT32) {
 800a3bc:	2f03      	cmp	r7, #3
 800a3be:	d013      	beq.n	800a3e8 <f_mkfs+0x420>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 800a3c0:	4b5f      	ldr	r3, [pc, #380]	; (800a540 <f_mkfs+0x578>)
 800a3c2:	2f01      	cmp	r7, #1
 800a3c4:	bf18      	it	ne
 800a3c6:	f06f 03ff 	mvnne.w	r3, #255	; 0xff
 800a3ca:	ea43 030b 	orr.w	r3, r3, fp
 800a3ce:	9306      	str	r3, [sp, #24]
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
 800a3d0:	7023      	strb	r3, [r4, #0]
 800a3d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	7063      	strb	r3, [r4, #1]
 800a3da:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800a3de:	70a3      	strb	r3, [r4, #2]
 800a3e0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a3e4:	70e3      	strb	r3, [r4, #3]
 800a3e6:	e017      	b.n	800a418 <f_mkfs+0x450>
		} else {
			n |= 0xFFFFFF00;
 800a3e8:	f06b 03ff 	orn	r3, fp, #255	; 0xff
 800a3ec:	9306      	str	r3, [sp, #24]
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
 800a3ee:	7023      	strb	r3, [r4, #0]
 800a3f0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a3f4:	0a1b      	lsrs	r3, r3, #8
 800a3f6:	7063      	strb	r3, [r4, #1]
 800a3f8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800a3fc:	70a3      	strb	r3, [r4, #2]
 800a3fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a402:	70e3      	strb	r3, [r4, #3]
			ST_DWORD(tbl+4, 0xFFFFFFFF);
 800a404:	23ff      	movs	r3, #255	; 0xff
 800a406:	7123      	strb	r3, [r4, #4]
 800a408:	7163      	strb	r3, [r4, #5]
 800a40a:	71a3      	strb	r3, [r4, #6]
 800a40c:	71e3      	strb	r3, [r4, #7]
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 800a40e:	7223      	strb	r3, [r4, #8]
 800a410:	7263      	strb	r3, [r4, #9]
 800a412:	72a3      	strb	r3, [r4, #10]
 800a414:	230f      	movs	r3, #15
 800a416:	72e3      	strb	r3, [r4, #11]
		}
		if (disk_write(pdrv, tbl, wsect++, 1))
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	4621      	mov	r1, r4
 800a41c:	461a      	mov	r2, r3
 800a41e:	f103 0a01 	add.w	sl, r3, #1
 800a422:	4640      	mov	r0, r8
 800a424:	2301      	movs	r3, #1
 800a426:	f7fe fb6f 	bl	8008b08 <disk_write>
 800a42a:	4601      	mov	r1, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f47f adfa 	bne.w	800a026 <f_mkfs+0x5e>
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 800a432:	4620      	mov	r0, r4
 800a434:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a438:	f7fe fbac 	bl	8008b94 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800a43c:	2301      	movs	r3, #1
 800a43e:	9306      	str	r3, [sp, #24]
 800a440:	9b06      	ldr	r3, [sp, #24]
 800a442:	42ab      	cmp	r3, r5
 800a444:	d20f      	bcs.n	800a466 <f_mkfs+0x49e>
			if (disk_write(pdrv, tbl, wsect++, 1))
 800a446:	4640      	mov	r0, r8
 800a448:	4621      	mov	r1, r4
 800a44a:	4652      	mov	r2, sl
 800a44c:	2301      	movs	r3, #1
 800a44e:	f10a 0b01 	add.w	fp, sl, #1
 800a452:	f7fe fb59 	bl	8008b08 <disk_write>
 800a456:	2800      	cmp	r0, #0
 800a458:	f47f ade5 	bne.w	800a026 <f_mkfs+0x5e>
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1))
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800a45c:	9b06      	ldr	r3, [sp, #24]
 800a45e:	3301      	adds	r3, #1
 800a460:	9306      	str	r3, [sp, #24]
			if (disk_write(pdrv, tbl, wsect++, 1))
 800a462:	46da      	mov	sl, fp
 800a464:	e7ec      	b.n	800a440 <f_mkfs+0x478>
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 800a466:	9b02      	ldr	r3, [sp, #8]
 800a468:	4655      	mov	r5, sl
 800a46a:	2f03      	cmp	r7, #3
 800a46c:	bf18      	it	ne
 800a46e:	461e      	movne	r6, r3
	do {
		if (disk_write(pdrv, tbl, wsect++, 1))
 800a470:	4640      	mov	r0, r8
 800a472:	4621      	mov	r1, r4
 800a474:	4652      	mov	r2, sl
 800a476:	2301      	movs	r3, #1
 800a478:	f10a 0b01 	add.w	fp, sl, #1
 800a47c:	f7fe fb44 	bl	8008b08 <disk_write>
 800a480:	2800      	cmp	r0, #0
 800a482:	f47f add0 	bne.w	800a026 <f_mkfs+0x5e>
 800a486:	1973      	adds	r3, r6, r5
			return FR_DISK_ERR;
	} while (--i);
 800a488:	455b      	cmp	r3, fp
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
	do {
		if (disk_write(pdrv, tbl, wsect++, 1))
 800a48a:	46da      	mov	sl, fp
			return FR_DISK_ERR;
	} while (--i);
 800a48c:	d1f0      	bne.n	800a470 <f_mkfs+0x4a8>
		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 800a48e:	2f03      	cmp	r7, #3
 800a490:	d13a      	bne.n	800a508 <f_mkfs+0x540>
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 800a492:	2352      	movs	r3, #82	; 0x52
 800a494:	7023      	strb	r3, [r4, #0]
 800a496:	7063      	strb	r3, [r4, #1]
 800a498:	2361      	movs	r3, #97	; 0x61
 800a49a:	70a3      	strb	r3, [r4, #2]
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 800a49c:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a4a0:	9b03      	ldr	r3, [sp, #12]
		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
 800a4a2:	f884 01ed 	strb.w	r0, [r4, #493]	; 0x1ed

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a4a6:	3b01      	subs	r3, #1
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 800a4a8:	2241      	movs	r2, #65	; 0x41
 800a4aa:	70e2      	strb	r2, [r4, #3]
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 800a4ac:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a4b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a4b4:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 800a4b8:	f884 21e9 	strb.w	r2, [r4, #489]	; 0x1e9
 800a4bc:	0c1a      	lsrs	r2, r3, #16
 800a4be:	0e1b      	lsrs	r3, r3, #24
 800a4c0:	f884 31eb 	strb.w	r3, [r4, #491]	; 0x1eb
		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
		ST_WORD(tbl+BS_55AA, 0xAA55);
 800a4ca:	2355      	movs	r3, #85	; 0x55
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 800a4cc:	2172      	movs	r1, #114	; 0x72
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
		ST_WORD(tbl+BS_55AA, 0xAA55);
 800a4ce:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
 800a4d2:	23aa      	movs	r3, #170	; 0xaa
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 800a4d4:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
 800a4d8:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a4dc:	f884 21ea 	strb.w	r2, [r4, #490]	; 0x1ea
		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
 800a4e0:	f884 01ee 	strb.w	r0, [r4, #494]	; 0x1ee
 800a4e4:	f884 01ef 	strb.w	r0, [r4, #495]	; 0x1ef
		ST_WORD(tbl+BS_55AA, 0xAA55);
 800a4e8:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f109 0201 	add.w	r2, r9, #1
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	f7fe fb07 	bl	8008b08 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	f109 0207 	add.w	r2, r9, #7
 800a502:	2301      	movs	r3, #1
 800a504:	f7fe fb00 	bl	8008b08 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 800a508:	2100      	movs	r1, #0
 800a50a:	4640      	mov	r0, r8
 800a50c:	460a      	mov	r2, r1
 800a50e:	f7fe fb0b 	bl	8008b28 <disk_ioctl>
 800a512:	3000      	adds	r0, #0
 800a514:	bf18      	it	ne
 800a516:	2001      	movne	r0, #1
 800a518:	e008      	b.n	800a52c <f_mkfs+0x564>
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800a51a:	200b      	movs	r0, #11
 800a51c:	e006      	b.n	800a52c <f_mkfs+0x564>
	if (sfd > 1) return FR_INVALID_PARAMETER;
 800a51e:	2013      	movs	r0, #19
 800a520:	e004      	b.n	800a52c <f_mkfs+0x564>
	if (au & (au - 1)) return FR_INVALID_PARAMETER;
	fs = FatFs[vol];
	if (!fs) return FR_NOT_ENABLED;
 800a522:	200c      	movs	r0, #12
 800a524:	e002      	b.n	800a52c <f_mkfs+0x564>
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/

	/* Get disk statics */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a526:	2003      	movs	r0, #3
 800a528:	e000      	b.n	800a52c <f_mkfs+0x564>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a52a:	200a      	movs	r0, #10
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
}
 800a52c:	b009      	add	sp, #36	; 0x24
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	bf00      	nop
 800a534:	08029518 	.word	0x08029518
 800a538:	08029524 	.word	0x08029524
 800a53c:	08029538 	.word	0x08029538
 800a540:	00ffff00 	.word	0x00ffff00

0800a544 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a544:	b40e      	push	{r1, r2, r3}
 800a546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54a:	b09a      	sub	sp, #104	; 0x68
 800a54c:	aa23      	add	r2, sp, #140	; 0x8c
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 800a54e:	2100      	movs	r1, #0
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a550:	f852 3b04 	ldr.w	r3, [r2], #4
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
 800a554:	9007      	str	r0, [sp, #28]
	pb.nchr = pb.idx = 0;
 800a556:	9108      	str	r1, [sp, #32]
 800a558:	9109      	str	r1, [sp, #36]	; 0x24

	va_start(arp, fmt);
 800a55a:	9201      	str	r2, [sp, #4]

	for (;;) {
		c = *fmt++;
 800a55c:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 800a55e:	2900      	cmp	r1, #0
 800a560:	f000 80df 	beq.w	800a722 <f_printf+0x1de>
		if (c != '%') {				/* Non escape character */
 800a564:	2925      	cmp	r1, #37	; 0x25
 800a566:	d001      	beq.n	800a56c <f_printf+0x28>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
 800a568:	1c5e      	adds	r6, r3, #1
 800a56a:	e073      	b.n	800a654 <f_printf+0x110>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
 800a56c:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 800a56e:	2930      	cmp	r1, #48	; 0x30
 800a570:	d103      	bne.n	800a57a <f_printf+0x36>
			f = 1; c = *fmt++;
 800a572:	1cde      	adds	r6, r3, #3
 800a574:	7899      	ldrb	r1, [r3, #2]
 800a576:	2501      	movs	r5, #1
 800a578:	e007      	b.n	800a58a <f_printf+0x46>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a57a:	292d      	cmp	r1, #45	; 0x2d
				f = 2; c = *fmt++;
 800a57c:	bf0d      	iteet	eq
 800a57e:	7899      	ldrbeq	r1, [r3, #2]
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
 800a580:	1c9e      	addne	r6, r3, #2
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
 800a582:	2500      	movne	r5, #0
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 800a584:	1cde      	addeq	r6, r3, #3
 800a586:	bf08      	it	eq
 800a588:	2502      	moveq	r5, #2
			continue;
		}
		w = f = 0;
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
 800a58a:	f04f 0800 	mov.w	r8, #0
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a58e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a592:	2b09      	cmp	r3, #9
 800a594:	d807      	bhi.n	800a5a6 <f_printf+0x62>
			w = w * 10 + c - '0';
 800a596:	230a      	movs	r3, #10
 800a598:	fb03 1808 	mla	r8, r3, r8, r1
 800a59c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
			c = *fmt++;
 800a5a0:	f816 1b01 	ldrb.w	r1, [r6], #1
 800a5a4:	e7f3      	b.n	800a58e <f_printf+0x4a>
 800a5a6:	4633      	mov	r3, r6
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a5a8:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 800a5ac:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 800a5ae:	bf02      	ittt	eq
 800a5b0:	7819      	ldrbeq	r1, [r3, #0]
 800a5b2:	f045 0504 	orreq.w	r5, r5, #4
 800a5b6:	3601      	addeq	r6, #1
		}
		if (!c) break;
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	f000 80b2 	beq.w	800a722 <f_printf+0x1de>
		d = c;
		if (IsLower(d)) d -= 0x20;
 800a5be:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800a5c2:	2b19      	cmp	r3, #25
 800a5c4:	bf9a      	itte	ls
 800a5c6:	f1a1 0320 	subls.w	r3, r1, #32
 800a5ca:	b2db      	uxtbls	r3, r3
 800a5cc:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 800a5ce:	2b4f      	cmp	r3, #79	; 0x4f
 800a5d0:	d013      	beq.n	800a5fa <f_printf+0xb6>
 800a5d2:	d806      	bhi.n	800a5e2 <f_printf+0x9e>
 800a5d4:	2b43      	cmp	r3, #67	; 0x43
 800a5d6:	d035      	beq.n	800a644 <f_printf+0x100>
 800a5d8:	2b44      	cmp	r3, #68	; 0x44
 800a5da:	d041      	beq.n	800a660 <f_printf+0x11c>
 800a5dc:	2b42      	cmp	r3, #66	; 0x42
 800a5de:	d03d      	beq.n	800a65c <f_printf+0x118>
 800a5e0:	e038      	b.n	800a654 <f_printf+0x110>
 800a5e2:	2b55      	cmp	r3, #85	; 0x55
 800a5e4:	d03c      	beq.n	800a660 <f_printf+0x11c>
 800a5e6:	2b58      	cmp	r3, #88	; 0x58
 800a5e8:	d032      	beq.n	800a650 <f_printf+0x10c>
 800a5ea:	2b53      	cmp	r3, #83	; 0x53
 800a5ec:	d132      	bne.n	800a654 <f_printf+0x110>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	681f      	ldr	r7, [r3, #0]
 800a5f2:	1d1a      	adds	r2, r3, #4
 800a5f4:	9201      	str	r2, [sp, #4]
			for (j = 0; p[j]; j++) ;
 800a5f6:	463a      	mov	r2, r7
 800a5f8:	e001      	b.n	800a5fe <f_printf+0xba>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
 800a5fa:	2008      	movs	r0, #8
 800a5fc:	e031      	b.n	800a662 <f_printf+0x11e>
 800a5fe:	1bd3      	subs	r3, r2, r7
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
 800a600:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a604:	2900      	cmp	r1, #0
 800a606:	d1fa      	bne.n	800a5fe <f_printf+0xba>
			if (!(f & 2)) {
 800a608:	07a9      	lsls	r1, r5, #30
 800a60a:	461c      	mov	r4, r3
 800a60c:	d409      	bmi.n	800a622 <f_printf+0xde>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a60e:	4543      	cmp	r3, r8
 800a610:	f103 0401 	add.w	r4, r3, #1
 800a614:	d205      	bcs.n	800a622 <f_printf+0xde>
 800a616:	a807      	add	r0, sp, #28
 800a618:	2120      	movs	r1, #32
 800a61a:	f7ff fbb6 	bl	8009d8a <putc_bfd>
 800a61e:	4623      	mov	r3, r4
 800a620:	e7f5      	b.n	800a60e <f_printf+0xca>
 800a622:	3f01      	subs	r7, #1
			}
			while (*p) putc_bfd(&pb, *p++);
 800a624:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800a628:	b141      	cbz	r1, 800a63c <f_printf+0xf8>
 800a62a:	a807      	add	r0, sp, #28
 800a62c:	f7ff fbad 	bl	8009d8a <putc_bfd>
 800a630:	e7f8      	b.n	800a624 <f_printf+0xe0>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a632:	a807      	add	r0, sp, #28
 800a634:	2120      	movs	r1, #32
 800a636:	f7ff fba8 	bl	8009d8a <putc_bfd>
 800a63a:	3401      	adds	r4, #1
 800a63c:	4544      	cmp	r4, r8
 800a63e:	d3f8      	bcc.n	800a632 <f_printf+0xee>
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a640:	4633      	mov	r3, r6
 800a642:	e78b      	b.n	800a55c <f_printf+0x18>
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	1d1a      	adds	r2, r3, #4
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	a807      	add	r0, sp, #28
 800a64c:	7819      	ldrb	r1, [r3, #0]
 800a64e:	e002      	b.n	800a656 <f_printf+0x112>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a650:	2010      	movs	r0, #16
 800a652:	e006      	b.n	800a662 <f_printf+0x11e>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a654:	a807      	add	r0, sp, #28
 800a656:	f7ff fb98 	bl	8009d8a <putc_bfd>
 800a65a:	e7f1      	b.n	800a640 <f_printf+0xfc>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
 800a65c:	2002      	movs	r0, #2
 800a65e:	e000      	b.n	800a662 <f_printf+0x11e>
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a660:	200a      	movs	r0, #10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a662:	f015 0f04 	tst.w	r5, #4
 800a666:	9a01      	ldr	r2, [sp, #4]
 800a668:	d004      	beq.n	800a674 <f_printf+0x130>
 800a66a:	1d14      	adds	r4, r2, #4
 800a66c:	9401      	str	r4, [sp, #4]
 800a66e:	6812      	ldr	r2, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
 800a670:	2b44      	cmp	r3, #68	; 0x44
 800a672:	e004      	b.n	800a67e <f_printf+0x13a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a674:	2b44      	cmp	r3, #68	; 0x44
 800a676:	f102 0304 	add.w	r3, r2, #4
 800a67a:	6812      	ldr	r2, [r2, #0]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	d104      	bne.n	800a68a <f_printf+0x146>
		if (d == 'D' && (v & 0x80000000)) {
 800a680:	2a00      	cmp	r2, #0
			v = 0 - v;
 800a682:	bfbc      	itt	lt
 800a684:	4252      	neglt	r2, r2
			f |= 8;
 800a686:	f045 0508 	orrlt.w	r5, r5, #8
		}
		i = 0;
 800a68a:	2400      	movs	r4, #0
		do {
			d = (TCHAR)(v % r); v /= r;
 800a68c:	fbb2 f7f0 	udiv	r7, r2, r0
 800a690:	fb00 2e17 	mls	lr, r0, r7, r2
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a694:	f1be 0f09 	cmp.w	lr, #9
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
 800a698:	fa5f f38e 	uxtb.w	r3, lr
 800a69c:	463a      	mov	r2, r7
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a69e:	d907      	bls.n	800a6b0 <f_printf+0x16c>
 800a6a0:	2978      	cmp	r1, #120	; 0x78
 800a6a2:	bf0c      	ite	eq
 800a6a4:	f04f 0e27 	moveq.w	lr, #39	; 0x27
 800a6a8:	f04f 0e07 	movne.w	lr, #7
 800a6ac:	4473      	add	r3, lr
 800a6ae:	b2db      	uxtb	r3, r3
			s[i++] = d + '0';
 800a6b0:	3401      	adds	r4, #1
 800a6b2:	f10d 090c 	add.w	r9, sp, #12
 800a6b6:	eb09 0e04 	add.w	lr, r9, r4
 800a6ba:	3330      	adds	r3, #48	; 0x30
 800a6bc:	f80e 3c01 	strb.w	r3, [lr, #-1]
		} while (v && i < sizeof s / sizeof s[0]);
 800a6c0:	b10f      	cbz	r7, 800a6c6 <f_printf+0x182>
 800a6c2:	2c10      	cmp	r4, #16
 800a6c4:	d1e2      	bne.n	800a68c <f_printf+0x148>
		if (f & 8) s[i++] = '-';
 800a6c6:	072a      	lsls	r2, r5, #28
 800a6c8:	bf41      	itttt	mi
 800a6ca:	ab1a      	addmi	r3, sp, #104	; 0x68
 800a6cc:	191b      	addmi	r3, r3, r4
 800a6ce:	222d      	movmi	r2, #45	; 0x2d
 800a6d0:	3401      	addmi	r4, #1
 800a6d2:	bf48      	it	mi
 800a6d4:	f803 2c5c 	strbmi.w	r2, [r3, #-92]
		j = i; d = (f & 1) ? '0' : ' ';
 800a6d8:	f015 0f01 	tst.w	r5, #1
 800a6dc:	bf14      	ite	ne
 800a6de:	f04f 0a30 	movne.w	sl, #48	; 0x30
 800a6e2:	f04f 0a20 	moveq.w	sl, #32
 800a6e6:	4627      	mov	r7, r4
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a6e8:	07ab      	lsls	r3, r5, #30
 800a6ea:	d40a      	bmi.n	800a702 <f_printf+0x1be>
 800a6ec:	4547      	cmp	r7, r8
 800a6ee:	f107 0b01 	add.w	fp, r7, #1
 800a6f2:	d205      	bcs.n	800a700 <f_printf+0x1bc>
 800a6f4:	a807      	add	r0, sp, #28
 800a6f6:	4651      	mov	r1, sl
 800a6f8:	f7ff fb47 	bl	8009d8a <putc_bfd>
 800a6fc:	465f      	mov	r7, fp
 800a6fe:	e7f3      	b.n	800a6e8 <f_printf+0x1a4>
 800a700:	465f      	mov	r7, fp
		do putc_bfd(&pb, s[--i]); while (i);
 800a702:	3c01      	subs	r4, #1
 800a704:	a807      	add	r0, sp, #28
 800a706:	f819 1004 	ldrb.w	r1, [r9, r4]
 800a70a:	f7ff fb3e 	bl	8009d8a <putc_bfd>
 800a70e:	2c00      	cmp	r4, #0
 800a710:	d1f7      	bne.n	800a702 <f_printf+0x1be>
		while (j++ < w) putc_bfd(&pb, d);
 800a712:	4547      	cmp	r7, r8
 800a714:	d294      	bcs.n	800a640 <f_printf+0xfc>
 800a716:	a807      	add	r0, sp, #28
 800a718:	4651      	mov	r1, sl
 800a71a:	f7ff fb36 	bl	8009d8a <putc_bfd>
 800a71e:	3701      	adds	r7, #1
 800a720:	e7f7      	b.n	800a712 <f_printf+0x1ce>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a722:	9a08      	ldr	r2, [sp, #32]
 800a724:	2a00      	cmp	r2, #0
 800a726:	da02      	bge.n	800a72e <f_printf+0x1ea>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	e00b      	b.n	800a746 <f_printf+0x202>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a72e:	9807      	ldr	r0, [sp, #28]
 800a730:	a90a      	add	r1, sp, #40	; 0x28
 800a732:	ab02      	add	r3, sp, #8
 800a734:	f7ff fa40 	bl	8009bb8 <f_write>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d1f5      	bne.n	800a728 <f_printf+0x1e4>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a73c:	9b02      	ldr	r3, [sp, #8]
 800a73e:	9a08      	ldr	r2, [sp, #32]
 800a740:	429a      	cmp	r2, r3
 800a742:	d1f1      	bne.n	800a728 <f_printf+0x1e4>
 800a744:	9809      	ldr	r0, [sp, #36]	; 0x24
	return EOF;
}
 800a746:	b01a      	add	sp, #104	; 0x68
 800a748:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	b003      	add	sp, #12
 800a74e:	4770      	bx	lr

0800a750 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  None
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(void)
{
 800a750:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a752:	4c06      	ldr	r4, [pc, #24]	; (800a76c <SD_initialize+0x1c>)
 800a754:	2301      	movs	r3, #1
 800a756:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800a758:	f7f7 fc28 	bl	8001fac <BSP_SD_Init>
 800a75c:	4623      	mov	r3, r4
 800a75e:	b918      	cbnz	r0, 800a768 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 800a760:	7822      	ldrb	r2, [r4, #0]
 800a762:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a766:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800a768:	7818      	ldrb	r0, [r3, #0]
}
 800a76a:	bd10      	pop	{r4, pc}
 800a76c:	200000a0 	.word	0x200000a0

0800a770 <SD_status>:
  * @brief  Gets Disk Status
  * @param  None
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(void)
{
 800a770:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a772:	4c06      	ldr	r4, [pc, #24]	; (800a78c <SD_status+0x1c>)
 800a774:	2301      	movs	r3, #1
 800a776:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 800a778:	f7f7 fd44 	bl	8002204 <BSP_SD_GetStatus>
 800a77c:	4623      	mov	r3, r4
 800a77e:	b918      	cbnz	r0, 800a788 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 800a780:	7822      	ldrb	r2, [r4, #0]
 800a782:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a786:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 800a788:	7818      	ldrb	r0, [r3, #0]
}
 800a78a:	bd10      	pop	{r4, pc}
 800a78c:	200000a0 	.word	0x200000a0

0800a790 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE *buff, DWORD sector, UINT count)
{
 800a790:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff, 
 800a792:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	9201      	str	r2, [sp, #4]
 800a79a:	2300      	movs	r3, #0
 800a79c:	024a      	lsls	r2, r1, #9
 800a79e:	f7f7 fce3 	bl	8002168 <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 800a7a2:	3000      	adds	r0, #0
 800a7a4:	bf18      	it	ne
 800a7a6:	2001      	movne	r0, #1
 800a7a8:	b003      	add	sp, #12
 800a7aa:	f85d fb04 	ldr.w	pc, [sp], #4

0800a7ae <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(const BYTE *buff, DWORD sector, UINT count)
{
 800a7ae:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff, 
 800a7b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	9201      	str	r2, [sp, #4]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	024a      	lsls	r2, r1, #9
 800a7bc:	f7f7 fcee 	bl	800219c <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 800a7c0:	3000      	adds	r0, #0
 800a7c2:	bf18      	it	ne
 800a7c4:	2001      	movne	r0, #1
 800a7c6:	b003      	add	sp, #12
 800a7c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a7cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
 800a7cc:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7ce:	4b13      	ldr	r3, [pc, #76]	; (800a81c <SD_ioctl+0x50>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	07db      	lsls	r3, r3, #31
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
 800a7d4:	b096      	sub	sp, #88	; 0x58
 800a7d6:	460c      	mov	r4, r1
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7d8:	d41c      	bmi.n	800a814 <SD_ioctl+0x48>
  
  switch (cmd)
 800a7da:	2803      	cmp	r0, #3
 800a7dc:	d803      	bhi.n	800a7e6 <SD_ioctl+0x1a>
 800a7de:	e8df f000 	tbb	[pc, r0]
 800a7e2:	0417      	.short	0x0417
 800a7e4:	120e      	.short	0x120e
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 800a7e6:	2004      	movs	r0, #4
 800a7e8:	e015      	b.n	800a816 <SD_ioctl+0x4a>
    res = RES_OK;
    break;
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a7ea:	4668      	mov	r0, sp
 800a7ec:	f7f7 fd10 	bl	8002210 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 800a7f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7f4:	0a5b      	lsrs	r3, r3, #9
 800a7f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	e008      	b.n	800a810 <SD_ioctl+0x44>
    res = RES_OK;
    break;
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 800a7fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a802:	800b      	strh	r3, [r1, #0]
 800a804:	e004      	b.n	800a810 <SD_ioctl+0x44>
    res = RES_OK;
    break;
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
 800a806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a80a:	600b      	str	r3, [r1, #0]
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
 800a80c:	2001      	movs	r0, #1
 800a80e:	e002      	b.n	800a816 <SD_ioctl+0x4a>
  
  switch (cmd)
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a810:	2000      	movs	r0, #0
 800a812:	e000      	b.n	800a816 <SD_ioctl+0x4a>
DRESULT SD_ioctl(BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a814:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 800a816:	b016      	add	sp, #88	; 0x58
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	bf00      	nop
 800a81c:	200000a0 	.word	0x200000a0

0800a820 <tft_delay>:
	*/


}

void tft_delay (volatile uint32_t count){
 800a820:	b082      	sub	sp, #8
 800a822:	9001      	str	r0, [sp, #4]
	while (count--) {
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	1e5a      	subs	r2, r3, #1
 800a828:	9201      	str	r2, [sp, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1fa      	bne.n	800a824 <tft_delay+0x4>
	}
}
 800a82e:	b002      	add	sp, #8
 800a830:	4770      	bx	lr
	...

0800a834 <init_ili9341>:
	LCD_REG = MEMORY_WRITE;
	LCD_DATA = color;
}*/


void init_ili9341(void) {
 800a834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LCD_REG		= EXIT_SLEEP_MODE;
 800a838:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 800a83c:	2511      	movs	r5, #17
 800a83e:	8025      	strh	r5, [r4, #0]
	tft_delay(50000);
 800a840:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a844:	f7ff ffec 	bl	800a820 <tft_delay>

 	LCD_REG		= POWER_CONTROL_B;
 800a848:	23cf      	movs	r3, #207	; 0xcf
 800a84a:	8023      	strh	r3, [r4, #0]
	LCD_DATA = 0x00;
 800a84c:	4b59      	ldr	r3, [pc, #356]	; (800a9b4 <init_ili9341+0x180>)
 800a84e:	2200      	movs	r2, #0
	LCD_DATA = 0xc3;
 800a850:	21c3      	movs	r1, #195	; 0xc3

	LCD_REG		= EXIT_SLEEP_MODE;
	tft_delay(50000);

 	LCD_REG		= POWER_CONTROL_B;
	LCD_DATA = 0x00;
 800a852:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0xc3;
	LCD_DATA = 0X30;
 800a854:	f04f 0e30 	mov.w	lr, #48	; 0x30
	LCD_REG		= EXIT_SLEEP_MODE;
	tft_delay(50000);

 	LCD_REG		= POWER_CONTROL_B;
	LCD_DATA = 0x00;
	LCD_DATA = 0xc3;
 800a858:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0X30;

 	LCD_REG  = 0xED;
 800a85a:	21ed      	movs	r1, #237	; 0xed
	tft_delay(50000);

 	LCD_REG		= POWER_CONTROL_B;
	LCD_DATA = 0x00;
	LCD_DATA = 0xc3;
	LCD_DATA = 0X30;
 800a85c:	f8a3 e000 	strh.w	lr, [r3]

 	LCD_REG  = 0xED;
 800a860:	8021      	strh	r1, [r4, #0]
	LCD_DATA = 0x64;
 800a862:	2164      	movs	r1, #100	; 0x64
 800a864:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x03;
	LCD_DATA = 0X12;
 800a866:	2012      	movs	r0, #18
	LCD_DATA = 0xc3;
	LCD_DATA = 0X30;

 	LCD_REG  = 0xED;
	LCD_DATA = 0x64;
	LCD_DATA = 0x03;
 800a868:	2103      	movs	r1, #3
 800a86a:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0X12;
 800a86c:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0X81;
 800a86e:	2081      	movs	r0, #129	; 0x81
 800a870:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xE8;
 800a872:	20e8      	movs	r0, #232	; 0xe8
 800a874:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x85;
 800a876:	2085      	movs	r0, #133	; 0x85
 800a878:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x10;
 800a87a:	2610      	movs	r6, #16
	LCD_DATA = 0x79;
 800a87c:	2079      	movs	r0, #121	; 0x79
	LCD_DATA = 0X12;
	LCD_DATA = 0X81;

 	LCD_REG  = 0xE8;
	LCD_DATA = 0x85;
	LCD_DATA = 0x10;
 800a87e:	801e      	strh	r6, [r3, #0]
	LCD_DATA = 0x79;
 800a880:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xCB;
 800a882:	20cb      	movs	r0, #203	; 0xcb
 800a884:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x39;
 800a886:	2039      	movs	r0, #57	; 0x39
 800a888:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x2C;
 800a88a:	f04f 092c 	mov.w	r9, #44	; 0x2c
	LCD_DATA = 0x00;
	LCD_DATA = 0x34;
 800a88e:	2034      	movs	r0, #52	; 0x34
	LCD_DATA = 0x10;
	LCD_DATA = 0x79;

 	LCD_REG  = 0xCB;
	LCD_DATA = 0x39;
	LCD_DATA = 0x2C;
 800a890:	f8a3 9000 	strh.w	r9, [r3]
	LCD_DATA = 0x00;
 800a894:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x34;
 800a896:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x02;
 800a898:	2002      	movs	r0, #2
 800a89a:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xF7;
 800a89c:	20f7      	movs	r0, #247	; 0xf7
 800a89e:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x20;

 	LCD_REG  = 0xEA;
 800a8a0:	27ea      	movs	r7, #234	; 0xea
	LCD_DATA = 0x00;
	LCD_DATA = 0x34;
	LCD_DATA = 0x02;

 	LCD_REG  = 0xF7;
	LCD_DATA = 0x20;
 800a8a2:	2020      	movs	r0, #32
 800a8a4:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xEA;
 800a8a6:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x00;
	LCD_DATA = 0x00;

 	LCD_REG  = 0xC0;    //Power control
 800a8a8:	27c0      	movs	r7, #192	; 0xc0

 	LCD_REG  = 0xF7;
	LCD_DATA = 0x20;

 	LCD_REG  = 0xEA;
	LCD_DATA = 0x00;
 800a8aa:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x00;
 800a8ac:	801a      	strh	r2, [r3, #0]

 	LCD_REG  = 0xC0;    //Power control
 800a8ae:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x22;   	//VRH[5:0]
 800a8b0:	2722      	movs	r7, #34	; 0x22
 800a8b2:	801f      	strh	r7, [r3, #0]

 	LCD_REG  = 0xC1;    //Power control
 800a8b4:	27c1      	movs	r7, #193	; 0xc1
 800a8b6:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x11;   	//SAP[2:0];BT[3:0]

 	LCD_REG  = 0xC5;    //VCM control
 800a8b8:	27c5      	movs	r7, #197	; 0xc5

 	LCD_REG  = 0xC0;    //Power control
	LCD_DATA = 0x22;   	//VRH[5:0]

 	LCD_REG  = 0xC1;    //Power control
	LCD_DATA = 0x11;   	//SAP[2:0];BT[3:0]
 800a8ba:	801d      	strh	r5, [r3, #0]

 	LCD_REG  = 0xC5;    //VCM control
 800a8bc:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x3d;
 800a8be:	273d      	movs	r7, #61	; 0x3d
 800a8c0:	801f      	strh	r7, [r3, #0]
						//LCD_DataWrite_ILI9341(0x30);
	LCD_DATA = 0x20;
 800a8c2:	8018      	strh	r0, [r3, #0]

 	LCD_REG = 0xC7;    	//VCM control2
 800a8c4:	20c7      	movs	r0, #199	; 0xc7
 800a8c6:	8020      	strh	r0, [r4, #0]
						//LCD_DataWrite_ILI9341(0xBD);
	LCD_DATA = 0xAA; 	//0xB0
 800a8c8:	20aa      	movs	r0, #170	; 0xaa
 800a8ca:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0x36;    // Memory Access Control
 800a8cc:	2036      	movs	r0, #54	; 0x36
 800a8ce:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x88;
 800a8d0:	2088      	movs	r0, #136	; 0x88
 800a8d2:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0x3A;
 800a8d4:	203a      	movs	r0, #58	; 0x3a
 800a8d6:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x55;
 800a8d8:	2055      	movs	r0, #85	; 0x55
 800a8da:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xB1;
 800a8dc:	20b1      	movs	r0, #177	; 0xb1
 800a8de:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;
 800a8e0:	f04f 0a13 	mov.w	sl, #19

 	LCD_REG  = 0xB6;    // Display Function Control
 800a8e4:	20b6      	movs	r0, #182	; 0xb6

 	LCD_REG  = 0x3A;
	LCD_DATA = 0x55;

 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
 800a8e6:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x13;

 	LCD_REG  = 0xB6;    // Display Function Control
	LCD_DATA = 0x0A;
 800a8e8:	270a      	movs	r7, #10
 	LCD_REG  = 0x3A;
	LCD_DATA = 0x55;

 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;
 800a8ea:	f8a3 a000 	strh.w	sl, [r3]

 	LCD_REG  = 0xB6;    // Display Function Control
	LCD_DATA = 0x0A;
	LCD_DATA = 0xA2;
 800a8ee:	f04f 08a2 	mov.w	r8, #162	; 0xa2

 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;

 	LCD_REG  = 0xB6;    // Display Function Control
 800a8f2:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x0A;
	LCD_DATA = 0xA2;

 	LCD_REG  = 0xF6;
 800a8f4:	20f6      	movs	r0, #246	; 0xf6
 	LCD_REG  = 0xB1;
	LCD_DATA = 0x00;
	LCD_DATA = 0x13;

 	LCD_REG  = 0xB6;    // Display Function Control
	LCD_DATA = 0x0A;
 800a8f6:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0xA2;
 800a8f8:	f8a3 8000 	strh.w	r8, [r3]

 	LCD_REG  = 0xF6;
 800a8fc:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x01;
 800a8fe:	2001      	movs	r0, #1
 800a900:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x30;
 800a902:	f8a3 e000 	strh.w	lr, [r3]

 	LCD_REG  = 0xF2;    // 3Gamma Function Disable
 800a906:	f04f 0ef2 	mov.w	lr, #242	; 0xf2
 800a90a:	f8a4 e000 	strh.w	lr, [r4]
	LCD_DATA = 0x00;

 	LCD_REG  = 0x26;    //Gamma curve selected
 800a90e:	f04f 0e26 	mov.w	lr, #38	; 0x26
 	LCD_REG  = 0xF6;
	LCD_DATA = 0x01;
	LCD_DATA = 0x30;

 	LCD_REG  = 0xF2;    // 3Gamma Function Disable
	LCD_DATA = 0x00;
 800a912:	801a      	strh	r2, [r3, #0]

 	LCD_REG  = 0x26;    //Gamma curve selected
 800a914:	f8a4 e000 	strh.w	lr, [r4]
	LCD_DATA = 0x01;
 800a918:	8018      	strh	r0, [r3, #0]

 	LCD_REG  = 0xE0;    //Set Gamma
 800a91a:	20e0      	movs	r0, #224	; 0xe0
 800a91c:	8020      	strh	r0, [r4, #0]
	LCD_DATA = 0x0F;
	LCD_DATA = 0x3F;
 800a91e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f

 	LCD_REG  = 0x26;    //Gamma curve selected
	LCD_DATA = 0x01;

 	LCD_REG  = 0xE0;    //Set Gamma
	LCD_DATA = 0x0F;
 800a922:	200f      	movs	r0, #15
	LCD_DATA = 0x3F;
	LCD_DATA = 0x2F;
 800a924:	f04f 0e2f 	mov.w	lr, #47	; 0x2f

 	LCD_REG  = 0x26;    //Gamma curve selected
	LCD_DATA = 0x01;

 	LCD_REG  = 0xE0;    //Set Gamma
	LCD_DATA = 0x0F;
 800a928:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x3F;
	LCD_DATA = 0x2F;
	LCD_DATA = 0x0C;
	LCD_DATA = 0x10;
	LCD_DATA = 0x0A;
	LCD_DATA = 0x53;
 800a92a:	f04f 0b53 	mov.w	fp, #83	; 0x53
 	LCD_REG  = 0x26;    //Gamma curve selected
	LCD_DATA = 0x01;

 	LCD_REG  = 0xE0;    //Set Gamma
	LCD_DATA = 0x0F;
	LCD_DATA = 0x3F;
 800a92e:	f8a3 c000 	strh.w	ip, [r3]
	LCD_DATA = 0x2F;
 800a932:	f8a3 e000 	strh.w	lr, [r3]
	LCD_DATA = 0x0C;
 800a936:	f04f 0e0c 	mov.w	lr, #12
 800a93a:	f8a3 e000 	strh.w	lr, [r3]
	LCD_DATA = 0x10;
 800a93e:	801e      	strh	r6, [r3, #0]
	LCD_DATA = 0x0A;
 800a940:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0x53;
 800a942:	f8a3 b000 	strh.w	fp, [r3]
	LCD_DATA = 0XD5;
 800a946:	f04f 0bd5 	mov.w	fp, #213	; 0xd5
 800a94a:	f8a3 b000 	strh.w	fp, [r3]
	LCD_DATA = 0x40;
 800a94e:	f04f 0b40 	mov.w	fp, #64	; 0x40
 800a952:	f8a3 b000 	strh.w	fp, [r3]
	LCD_DATA = 0x0A;
 800a956:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0x13;
	LCD_DATA = 0x03;
	LCD_DATA = 0x08;
 800a958:	2708      	movs	r7, #8
	LCD_DATA = 0x0A;
	LCD_DATA = 0x53;
	LCD_DATA = 0XD5;
	LCD_DATA = 0x40;
	LCD_DATA = 0x0A;
	LCD_DATA = 0x13;
 800a95a:	f8a3 a000 	strh.w	sl, [r3]
	LCD_DATA = 0x03;
 800a95e:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x08;
 800a960:	801f      	strh	r7, [r3, #0]
	LCD_DATA = 0x03;
	LCD_DATA = 0x00;

 	LCD_REG  = 0XE1;    //Set Gamma
 800a962:	27e1      	movs	r7, #225	; 0xe1
	LCD_DATA = 0x40;
	LCD_DATA = 0x0A;
	LCD_DATA = 0x13;
	LCD_DATA = 0x03;
	LCD_DATA = 0x08;
	LCD_DATA = 0x03;
 800a964:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x00;
 800a966:	801a      	strh	r2, [r3, #0]

 	LCD_REG  = 0XE1;    //Set Gamma
 800a968:	8027      	strh	r7, [r4, #0]
	LCD_DATA = 0x00;
 800a96a:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x00;
 800a96c:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x10;
	LCD_DATA = 0x03;
	LCD_DATA = 0x0F;
	LCD_DATA = 0x05;
 800a96e:	2205      	movs	r2, #5
	LCD_DATA = 0x00;

 	LCD_REG  = 0XE1;    //Set Gamma
	LCD_DATA = 0x00;
	LCD_DATA = 0x00;
	LCD_DATA = 0x10;
 800a970:	801e      	strh	r6, [r3, #0]
	LCD_DATA = 0x03;
 800a972:	8019      	strh	r1, [r3, #0]
	LCD_DATA = 0x0F;
 800a974:	8018      	strh	r0, [r3, #0]
	LCD_DATA = 0x05;
 800a976:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x2C;
 800a978:	f8a3 9000 	strh.w	r9, [r3]
	LCD_DATA = 0xA2;
 800a97c:	f8a3 8000 	strh.w	r8, [r3]
	LCD_DATA = 0x3F;
 800a980:	f8a3 c000 	strh.w	ip, [r3]
	LCD_DATA = 0x05;
 800a984:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x0E;
 800a986:	220e      	movs	r2, #14
 800a988:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x0C;
	LCD_DATA = 0x37;
 800a98a:	2237      	movs	r2, #55	; 0x37
	LCD_DATA = 0x2C;
	LCD_DATA = 0xA2;
	LCD_DATA = 0x3F;
	LCD_DATA = 0x05;
	LCD_DATA = 0x0E;
	LCD_DATA = 0x0C;
 800a98c:	f8a3 e000 	strh.w	lr, [r3]
	LCD_DATA = 0x37;
 800a990:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x3C;
 800a992:	223c      	movs	r2, #60	; 0x3c
 800a994:	801a      	strh	r2, [r3, #0]
	LCD_DATA = 0x0F;
 800a996:	8018      	strh	r0, [r3, #0]

	LCD_REG  = EXIT_SLEEP_MODE;    //Exit Sleep
 800a998:	8025      	strh	r5, [r4, #0]
	tft_delay(50000);
 800a99a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a99e:	f7ff ff3f 	bl	800a820 <tft_delay>
 	LCD_REG  = 0x29;    //Display on
 800a9a2:	2329      	movs	r3, #41	; 0x29
 800a9a4:	8023      	strh	r3, [r4, #0]
	tft_delay(50000);
 800a9a6:	f24c 3050 	movw	r0, #50000	; 0xc350

	LCD_REG = MEMORY_WRITE;
	*/


}
 800a9aa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LCD_DATA = 0x0F;

	LCD_REG  = EXIT_SLEEP_MODE;    //Exit Sleep
	tft_delay(50000);
 	LCD_REG  = 0x29;    //Display on
	tft_delay(50000);
 800a9ae:	f7ff bf37 	b.w	800a820 <tft_delay>
 800a9b2:	bf00      	nop
 800a9b4:	60100000 	.word	0x60100000

0800a9b8 <FT6206_write_register>:

static uint8_t FT6206_write_register(uint8_t reg, uint8_t data){
	uint8_t return_val = 0;
	
	
	aTxBuffer_I2C[0] = reg;
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <FT6206_write_register+0x34>)
	return_val = aRxBuffer_I2C[0];
	
	return return_val;
}

static uint8_t FT6206_write_register(uint8_t reg, uint8_t data){
 800a9ba:	b507      	push	{r0, r1, r2, lr}
	uint8_t return_val = 0;
	
	
	aTxBuffer_I2C[0] = reg;
 800a9bc:	7018      	strb	r0, [r3, #0]
	aTxBuffer_I2C[1] = data;
 800a9be:	7059      	strb	r1, [r3, #1]
	/*	REady to transmit?	*/
	while(HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY);
 800a9c0:	480b      	ldr	r0, [pc, #44]	; (800a9f0 <FT6206_write_register+0x38>)
 800a9c2:	f7fb fab3 	bl	8005f2c <HAL_I2C_GetState>
 800a9c6:	2801      	cmp	r0, #1
 800a9c8:	d1fa      	bne.n	800a9c0 <FT6206_write_register+0x8>
	/* transmit data through "aTxBuffer" buffer */
	if(HAL_I2C_Master_Transmit(&I2cHandle, (uint8_t)FT6206_ADDR<<1, (uint8_t*)aTxBuffer_I2C, TXBUFFERSIZEI2C, 35)!= HAL_OK){
 800a9ca:	2323      	movs	r3, #35	; 0x23
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	4808      	ldr	r0, [pc, #32]	; (800a9f0 <FT6206_write_register+0x38>)
 800a9d0:	4a06      	ldr	r2, [pc, #24]	; (800a9ec <FT6206_write_register+0x34>)
 800a9d2:	2170      	movs	r1, #112	; 0x70
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	f7fb f965 	bl	8005ca4 <HAL_I2C_Master_Transmit>
 800a9da:	b110      	cbz	r0, 800a9e2 <FT6206_write_register+0x2a>
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge it's address)
		Master restarts communication */
		printf("Error I2C transmit write\n");
 800a9dc:	4805      	ldr	r0, [pc, #20]	; (800a9f4 <FT6206_write_register+0x3c>)
 800a9de:	f00e fe99 	bl	8019714 <puts>
	}
	
	return return_val;
}
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	b003      	add	sp, #12
 800a9e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9ea:	bf00      	nop
 800a9ec:	2000eade 	.word	0x2000eade
 800a9f0:	2000e914 	.word	0x2000e914
 800a9f4:	080295e2 	.word	0x080295e2

0800a9f8 <FT6206_read_register>:


static uint8_t FT6206_read_register(uint8_t reg){
	uint8_t return_val = 0;
	
	aTxBuffer_I2C[0] = reg;
 800a9f8:	4b19      	ldr	r3, [pc, #100]	; (800aa60 <FT6206_read_register+0x68>)
static uint8_t FT6206_read_register(uint8_t reg);
static uint8_t FT6206_write_register(uint8_t reg, uint8_t data);



static uint8_t FT6206_read_register(uint8_t reg){
 800a9fa:	b507      	push	{r0, r1, r2, lr}
	uint8_t return_val = 0;
	
	aTxBuffer_I2C[0] = reg;
 800a9fc:	7018      	strb	r0, [r3, #0]
	/*	REady to transmit?	*/
	while(HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY);
 800a9fe:	4819      	ldr	r0, [pc, #100]	; (800aa64 <FT6206_read_register+0x6c>)
 800aa00:	f7fb fa94 	bl	8005f2c <HAL_I2C_GetState>
 800aa04:	2801      	cmp	r0, #1
 800aa06:	4603      	mov	r3, r0
 800aa08:	d1f9      	bne.n	800a9fe <FT6206_read_register+0x6>
	/* transmit data through "aTxBuffer" buffer */
	if(HAL_I2C_Master_Transmit(&I2cHandle, (uint8_t)FT6206_ADDR<<1, (uint8_t*)aTxBuffer_I2C, (TXBUFFERSIZEI2C -1), 35)!= HAL_OK){
 800aa0a:	2223      	movs	r2, #35	; 0x23
 800aa0c:	9200      	str	r2, [sp, #0]
 800aa0e:	4815      	ldr	r0, [pc, #84]	; (800aa64 <FT6206_read_register+0x6c>)
 800aa10:	4a13      	ldr	r2, [pc, #76]	; (800aa60 <FT6206_read_register+0x68>)
 800aa12:	2170      	movs	r1, #112	; 0x70
 800aa14:	f7fb f946 	bl	8005ca4 <HAL_I2C_Master_Transmit>
 800aa18:	b138      	cbz	r0, 800aa2a <FT6206_read_register+0x32>
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge it's address)
		Master restarts communication */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800aa1a:	4813      	ldr	r0, [pc, #76]	; (800aa68 <FT6206_read_register+0x70>)
 800aa1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa20:	f7fd ffe4 	bl	80089ec <HAL_GPIO_TogglePin>
		printf("Error I2C transmit read\n");
 800aa24:	4811      	ldr	r0, [pc, #68]	; (800aa6c <FT6206_read_register+0x74>)
 800aa26:	f00e fe75 	bl	8019714 <puts>
	}
	
	/*	Wait till end of transmit	*/
	while(HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY);
 800aa2a:	480e      	ldr	r0, [pc, #56]	; (800aa64 <FT6206_read_register+0x6c>)
 800aa2c:	f7fb fa7e 	bl	8005f2c <HAL_I2C_GetState>
 800aa30:	2801      	cmp	r0, #1
 800aa32:	4603      	mov	r3, r0
 800aa34:	d1f9      	bne.n	800aa2a <FT6206_read_register+0x32>
	/* recept data through "aRxBuffer" buffer */
	if(HAL_I2C_Master_Receive(&I2cHandle, (uint8_t)FT6206_ADDR<<1, (uint8_t *)aRxBuffer_I2C, (RXBUFFERSIZEI2C -1), 35) != HAL_OK){
 800aa36:	2223      	movs	r2, #35	; 0x23
 800aa38:	9200      	str	r2, [sp, #0]
 800aa3a:	480a      	ldr	r0, [pc, #40]	; (800aa64 <FT6206_read_register+0x6c>)
 800aa3c:	4a0c      	ldr	r2, [pc, #48]	; (800aa70 <FT6206_read_register+0x78>)
 800aa3e:	2170      	movs	r1, #112	; 0x70
 800aa40:	f7fb f9a2 	bl	8005d88 <HAL_I2C_Master_Receive>
 800aa44:	b138      	cbz	r0, 800aa56 <FT6206_read_register+0x5e>
		/* Error_Handler() function is called when Timeout error occurs.
		When Acknowledge failure occurs (Slave don't acknowledge it's address)
		Master restarts communication */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800aa46:	4808      	ldr	r0, [pc, #32]	; (800aa68 <FT6206_read_register+0x70>)
 800aa48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa4c:	f7fd ffce 	bl	80089ec <HAL_GPIO_TogglePin>
		printf("Error I2C receive\n");
 800aa50:	4808      	ldr	r0, [pc, #32]	; (800aa74 <FT6206_read_register+0x7c>)
 800aa52:	f00e fe5f 	bl	8019714 <puts>
	}
	
	return_val = aRxBuffer_I2C[0];
	
	return return_val;
}
 800aa56:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <FT6206_read_register+0x78>)
 800aa58:	7818      	ldrb	r0, [r3, #0]
 800aa5a:	b003      	add	sp, #12
 800aa5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa60:	2000eade 	.word	0x2000eade
 800aa64:	2000e914 	.word	0x2000e914
 800aa68:	40020c00 	.word	0x40020c00
 800aa6c:	080295fb 	.word	0x080295fb
 800aa70:	2000eac0 	.word	0x2000eac0
 800aa74:	08029613 	.word	0x08029613

0800aa78 <FT6206_begin>:
	
	return return_val;
}


uint8_t FT6206_begin(uint8_t threshold){
 800aa78:	b538      	push	{r3, r4, r5, lr}
	//  0...255 last byte value read
	uint8_t x = 0;
	
	/*Reset pin 5 msec. low */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800aa7a:	4c20      	ldr	r4, [pc, #128]	; (800aafc <FT6206_begin+0x84>)
	
	return return_val;
}


uint8_t FT6206_begin(uint8_t threshold){
 800aa7c:	4605      	mov	r5, r0
	//  0...255 last byte value read
	uint8_t x = 0;
	
	/*Reset pin 5 msec. low */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800aa7e:	2108      	movs	r1, #8
 800aa80:	4620      	mov	r0, r4
 800aa82:	f7fd ffb3 	bl	80089ec <HAL_GPIO_TogglePin>
	delay_msec(5);
 800aa86:	2005      	movs	r0, #5
 800aa88:	f7f6 fe9a 	bl	80017c0 <delay_msec>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	2108      	movs	r1, #8
 800aa90:	f7fd ffac 	bl	80089ec <HAL_GPIO_TogglePin>
	
	// change threshold to be higher/lower
	FT6206_write_register((uint8_t)FT6206_REG_THRESHOLD, threshold);
 800aa94:	4629      	mov	r1, r5
 800aa96:	2080      	movs	r0, #128	; 0x80
 800aa98:	f7ff ff8e 	bl	800a9b8 <FT6206_write_register>
	
	FT6206_write_register((uint8_t)FT6206_REG_G_MODE, FT6206_INT_POLLING_MODE);
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	20a4      	movs	r0, #164	; 0xa4
 800aaa0:	f7ff ff8a 	bl	800a9b8 <FT6206_write_register>
	
	// fill structure
	FT6206.vendor_id = FT6206_read_register((uint8_t)FT6206_REG_VENDID);
 800aaa4:	20a8      	movs	r0, #168	; 0xa8
 800aaa6:	f7ff ffa7 	bl	800a9f8 <FT6206_read_register>
 800aaaa:	4c15      	ldr	r4, [pc, #84]	; (800ab00 <FT6206_begin+0x88>)
 800aaac:	75a0      	strb	r0, [r4, #22]
	FT6206.chip_id = FT6206_read_register((uint8_t)FT6206_REG_CHIPID);
 800aaae:	20a3      	movs	r0, #163	; 0xa3
 800aab0:	f7ff ffa2 	bl	800a9f8 <FT6206_read_register>
 800aab4:	75e0      	strb	r0, [r4, #23]
	FT6206.firmware_version = FT6206_read_register((uint8_t)FT6206_REG_FIRMVERS);
 800aab6:	20a6      	movs	r0, #166	; 0xa6
 800aab8:	f7ff ff9e 	bl	800a9f8 <FT6206_read_register>
 800aabc:	7620      	strb	r0, [r4, #24]
	FT6206.pointrate = FT6206_read_register((uint8_t)FT6206_REG_POINTRATE);
 800aabe:	2088      	movs	r0, #136	; 0x88
 800aac0:	f7ff ff9a 	bl	800a9f8 <FT6206_read_register>
 800aac4:	7660      	strb	r0, [r4, #25]
	FT6206.threshold = FT6206_read_register((uint8_t)FT6206_REG_THRESHOLD);
 800aac6:	2080      	movs	r0, #128	; 0x80
 800aac8:	f7ff ff96 	bl	800a9f8 <FT6206_read_register>

	  printf("Vendor ID       : %6d\n", FT6206.vendor_id);
 800aacc:	7da1      	ldrb	r1, [r4, #22]
	// fill structure
	FT6206.vendor_id = FT6206_read_register((uint8_t)FT6206_REG_VENDID);
	FT6206.chip_id = FT6206_read_register((uint8_t)FT6206_REG_CHIPID);
	FT6206.firmware_version = FT6206_read_register((uint8_t)FT6206_REG_FIRMVERS);
	FT6206.pointrate = FT6206_read_register((uint8_t)FT6206_REG_POINTRATE);
	FT6206.threshold = FT6206_read_register((uint8_t)FT6206_REG_THRESHOLD);
 800aace:	76a0      	strb	r0, [r4, #26]

	  printf("Vendor ID       : %6d\n", FT6206.vendor_id);
 800aad0:	480c      	ldr	r0, [pc, #48]	; (800ab04 <FT6206_begin+0x8c>)
 800aad2:	f00e fddd 	bl	8019690 <printf>
	  printf("Chip ID         : %6d\n", FT6206.chip_id);
 800aad6:	7de1      	ldrb	r1, [r4, #23]
 800aad8:	480b      	ldr	r0, [pc, #44]	; (800ab08 <FT6206_begin+0x90>)
 800aada:	f00e fdd9 	bl	8019690 <printf>
	  printf("Firmware version: %6d\n", FT6206.firmware_version);
 800aade:	7e21      	ldrb	r1, [r4, #24]
 800aae0:	480a      	ldr	r0, [pc, #40]	; (800ab0c <FT6206_begin+0x94>)
 800aae2:	f00e fdd5 	bl	8019690 <printf>
	  printf("Pointrate       : %6d\n", FT6206.pointrate);
 800aae6:	7e61      	ldrb	r1, [r4, #25]
 800aae8:	4809      	ldr	r0, [pc, #36]	; (800ab10 <FT6206_begin+0x98>)
 800aaea:	f00e fdd1 	bl	8019690 <printf>
	  printf("Threshold       : %6d\n", FT6206.threshold);
 800aaee:	7ea1      	ldrb	r1, [r4, #26]
 800aaf0:	4808      	ldr	r0, [pc, #32]	; (800ab14 <FT6206_begin+0x9c>)
 800aaf2:	f00e fdcd 	bl	8019690 <printf>

  return x;
}
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	bd38      	pop	{r3, r4, r5, pc}
 800aafa:	bf00      	nop
 800aafc:	40020800 	.word	0x40020800
 800ab00:	2000eac2 	.word	0x2000eac2
 800ab04:	08029625 	.word	0x08029625
 800ab08:	0802963c 	.word	0x0802963c
 800ab0c:	08029653 	.word	0x08029653
 800ab10:	0802966a 	.word	0x0802966a
 800ab14:	08029681 	.word	0x08029681

0800ab18 <FT6206_read_data>:
	else{
		return 0;
	}
}

void FT6206_read_data(void){
 800ab18:	b530      	push	{r4, r5, lr}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	f10d 0501 	add.w	r5, sp, #1
	// array to hold values
  uint8_t raw_tp_data[16];		// array to hold packed info
  uint8_t i;
  uint8_t x;
  
  for (i=2; i<7; i++){
 800ab20:	2402      	movs	r4, #2
	  x = FT6206_read_register(i);
 800ab22:	4620      	mov	r0, r4
 800ab24:	f7ff ff68 	bl	800a9f8 <FT6206_read_register>
	// array to hold values
  uint8_t raw_tp_data[16];		// array to hold packed info
  uint8_t i;
  uint8_t x;
  
  for (i=2; i<7; i++){
 800ab28:	3401      	adds	r4, #1
 800ab2a:	b2e4      	uxtb	r4, r4
 800ab2c:	2c07      	cmp	r4, #7
	  x = FT6206_read_register(i);
  	  raw_tp_data[i] = x;
 800ab2e:	f805 0f01 	strb.w	r0, [r5, #1]!
	// array to hold values
  uint8_t raw_tp_data[16];		// array to hold packed info
  uint8_t i;
  uint8_t x;
  
  for (i=2; i<7; i++){
 800ab32:	d1f6      	bne.n	800ab22 <FT6206_read_data+0xa>
  	  raw_tp_data[i] = x;
  }

  //FT6206.gesture_id = raw_tp_data[1];

  FT6206.touch_points = raw_tp_data[2];
 800ab34:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ab38:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <FT6206_read_data+0x68>)
 800ab3a:	705a      	strb	r2, [r3, #1]
  	FT6206.touch_02_ypos = 0;
  	FT6206.touch_02_weight = 0;
  	FT6206.touch_02_area = 0;
  	return;
  }
  if(FT6206.touch_points == 0){	// error! only 0/1/2 are valid
 800ab3c:	3a01      	subs	r2, #1
 800ab3e:	2a01      	cmp	r2, #1
 800ab40:	d90a      	bls.n	800ab58 <FT6206_read_data+0x40>
  //FT6206.gesture_id = raw_tp_data[1];

  FT6206.touch_points = raw_tp_data[2];

  if(FT6206.touch_points > 2){	// error! only 0/1/2 are valid
  	FT6206.touch_points = 0;
 800ab42:	2200      	movs	r2, #0
 800ab44:	705a      	strb	r2, [r3, #1]
  	FT6206.touch_01_xpos = 0;
 800ab46:	809a      	strh	r2, [r3, #4]
  	FT6206.touch_01_ypos = 0;
 800ab48:	811a      	strh	r2, [r3, #8]
  	FT6206.touch_01_weight = 0;
 800ab4a:	729a      	strb	r2, [r3, #10]
  	FT6206.touch_01_area = 0;
 800ab4c:	72da      	strb	r2, [r3, #11]
  	FT6206.touch_02_xpos = 0;
 800ab4e:	81da      	strh	r2, [r3, #14]
  	FT6206.touch_02_ypos = 0;
 800ab50:	825a      	strh	r2, [r3, #18]
  	FT6206.touch_02_weight = 0;
 800ab52:	751a      	strb	r2, [r3, #20]
  	FT6206.touch_02_area = 0;
 800ab54:	755a      	strb	r2, [r3, #21]
 800ab56:	e011      	b.n	800ab7c <FT6206_read_data+0x64>
  	FT6206.touch_02_weight = 0;
  	FT6206.touch_02_area = 0;
    return;
  }

  FT6206.touch_01_xpos = ((raw_tp_data[3]) & 0x0F);	// Mask low nibble of byte
 800ab58:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ab5c:	f002 010f 	and.w	r1, r2, #15
  FT6206.touch_01_xpos <<= 8;					// left shift 8
  FT6206.touch_01_xpos |= raw_tp_data[4];		// OR with reg(0x04)
 800ab60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ab68:	809a      	strh	r2, [r3, #4]
  
  //FT6206.touch_01_event = ((raw_tp_data[3]) >> 4) & 0b11;	//0b00->PressDown 0b01->LiftUp

  FT6206.touch_01_ypos = ((raw_tp_data[5]) & 0x0F);	// Mask low nibble of byte
 800ab6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ab6e:	f002 010f 	and.w	r1, r2, #15
  FT6206.touch_01_ypos <<= 8;					// left shift 8
  FT6206.touch_01_ypos |= raw_tp_data[6];		// OR with reg(0x06)
 800ab72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ab7a:	811a      	strh	r2, [r3, #8]
  //FT6206.touch_02_ypos |= raw_tp_data[12];			// OR with reg(0x04)

  //FT6206.touch_02_id |= (raw_tp_data[11] >> 4);
 	//FT6206.touch_02_weight = raw_tp_data[13];
 	//FT6206.touch_02_area = raw_tp_data[14];
}
 800ab7c:	b005      	add	sp, #20
 800ab7e:	bd30      	pop	{r4, r5, pc}
 800ab80:	2000eac2 	.word	0x2000eac2

0800ab84 <TEXT_SetTextColor>:
 800ab84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab86:	460c      	mov	r4, r1
 800ab88:	4605      	mov	r5, r0
 800ab8a:	b160      	cbz	r0, 800aba6 <TEXT_SetTextColor+0x22>
 800ab8c:	f009 f9b4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ab90:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800ab92:	9001      	str	r0, [sp, #4]
 800ab94:	42a2      	cmp	r2, r4
 800ab96:	d003      	beq.n	800aba0 <TEXT_SetTextColor+0x1c>
 800ab98:	6384      	str	r4, [r0, #56]	; 0x38
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f003 fe12 	bl	800e7c4 <WM_InvalidateWindow>
 800aba0:	a801      	add	r0, sp, #4
 800aba2:	f009 f9b7 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800aba6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800aba8 <TEXT_SetTextAlign>:
 800aba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abaa:	460d      	mov	r5, r1
 800abac:	4604      	mov	r4, r0
 800abae:	b160      	cbz	r0, 800abca <TEXT_SetTextAlign+0x22>
 800abb0:	f009 f9a2 	bl	8013ef8 <GUI_ALLOC_LockH>
 800abb4:	4602      	mov	r2, r0
 800abb6:	a802      	add	r0, sp, #8
 800abb8:	f8a2 5048 	strh.w	r5, [r2, #72]	; 0x48
 800abbc:	f840 2d04 	str.w	r2, [r0, #-4]!
 800abc0:	f009 f9a8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800abc4:	4620      	mov	r0, r4
 800abc6:	f003 fdfd 	bl	800e7c4 <WM_InvalidateWindow>
 800abca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800abcc <TEXT_SetText>:
 800abcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abce:	460c      	mov	r4, r1
 800abd0:	4605      	mov	r5, r0
 800abd2:	b300      	cbz	r0, 800ac16 <TEXT_SetText+0x4a>
 800abd4:	f009 f990 	bl	8013ef8 <GUI_ALLOC_LockH>
 800abd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800abda:	9000      	str	r0, [sp, #0]
 800abdc:	4668      	mov	r0, sp
 800abde:	9301      	str	r3, [sp, #4]
 800abe0:	f009 f998 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800abe4:	4621      	mov	r1, r4
 800abe6:	a801      	add	r0, sp, #4
 800abe8:	f007 f85e 	bl	8011ca8 <GUI__SetText>
 800abec:	f1d0 0401 	rsbs	r4, r0, #1
 800abf0:	bf38      	it	cc
 800abf2:	2400      	movcc	r4, #0
 800abf4:	b984      	cbnz	r4, 800ac18 <TEXT_SetText+0x4c>
 800abf6:	4628      	mov	r0, r5
 800abf8:	f009 f97e 	bl	8013ef8 <GUI_ALLOC_LockH>
 800abfc:	9a01      	ldr	r2, [sp, #4]
 800abfe:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800ac00:	9000      	str	r0, [sp, #0]
 800ac02:	4291      	cmp	r1, r2
 800ac04:	bf18      	it	ne
 800ac06:	6442      	strne	r2, [r0, #68]	; 0x44
 800ac08:	4668      	mov	r0, sp
 800ac0a:	f009 f983 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f003 fdd8 	bl	800e7c4 <WM_InvalidateWindow>
 800ac14:	e000      	b.n	800ac18 <TEXT_SetText+0x4c>
 800ac16:	2401      	movs	r4, #1
 800ac18:	4620      	mov	r0, r4
 800ac1a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800ac1c <TEXT_SetFont>:
 800ac1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac1e:	460c      	mov	r4, r1
 800ac20:	4605      	mov	r5, r0
 800ac22:	b160      	cbz	r0, 800ac3e <TEXT_SetFont+0x22>
 800ac24:	f009 f968 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ac28:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ac2a:	9001      	str	r0, [sp, #4]
 800ac2c:	42a2      	cmp	r2, r4
 800ac2e:	d003      	beq.n	800ac38 <TEXT_SetFont+0x1c>
 800ac30:	6344      	str	r4, [r0, #52]	; 0x34
 800ac32:	4628      	mov	r0, r5
 800ac34:	f003 fdc6 	bl	800e7c4 <WM_InvalidateWindow>
 800ac38:	a801      	add	r0, sp, #4
 800ac3a:	f009 f96b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ac3e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800ac40 <TEXT_CreateIndirect>:
 800ac40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac42:	b087      	sub	sp, #28
 800ac44:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800ac48:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800ac4c:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800ac50:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800ac54:	9100      	str	r1, [sp, #0]
 800ac56:	2102      	movs	r1, #2
 800ac58:	9101      	str	r1, [sp, #4]
 800ac5a:	8a44      	ldrh	r4, [r0, #18]
 800ac5c:	9402      	str	r4, [sp, #8]
 800ac5e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ac62:	9103      	str	r1, [sp, #12]
 800ac64:	6844      	ldr	r4, [r0, #4]
 800ac66:	9404      	str	r4, [sp, #16]
 800ac68:	6984      	ldr	r4, [r0, #24]
 800ac6a:	18f9      	adds	r1, r7, r3
 800ac6c:	eb0e 0002 	add.w	r0, lr, r2
 800ac70:	9405      	str	r4, [sp, #20]
 800ac72:	4632      	mov	r2, r6
 800ac74:	462b      	mov	r3, r5
 800ac76:	f000 f865 	bl	800ad44 <TEXT_CreateUser>
 800ac7a:	b007      	add	sp, #28
 800ac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac7e <TEXT_Callback>:
 800ac7e:	b530      	push	{r4, r5, lr}
 800ac80:	6845      	ldr	r5, [r0, #4]
 800ac82:	4604      	mov	r4, r0
 800ac84:	b085      	sub	sp, #20
 800ac86:	4628      	mov	r0, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f009 fd75 	bl	8014778 <WIDGET_HandleActive>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d056      	beq.n	800ad40 <TEXT_Callback+0xc2>
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	2b0f      	cmp	r3, #15
 800ac96:	d01e      	beq.n	800acd6 <TEXT_Callback+0x58>
 800ac98:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ac9c:	d00e      	beq.n	800acbc <TEXT_Callback+0x3e>
 800ac9e:	2b0b      	cmp	r3, #11
 800aca0:	d14b      	bne.n	800ad3a <TEXT_Callback+0xbc>
 800aca2:	4628      	mov	r0, r5
 800aca4:	f009 f928 	bl	8013ef8 <GUI_ALLOC_LockH>
 800aca8:	ad04      	add	r5, sp, #16
 800acaa:	f845 0d0c 	str.w	r0, [r5, #-12]!
 800acae:	3044      	adds	r0, #68	; 0x44
 800acb0:	f009 fb74 	bl	801439c <GUI_ALLOC_FreePtr>
 800acb4:	4628      	mov	r0, r5
 800acb6:	f009 f92d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800acba:	e03e      	b.n	800ad3a <TEXT_Callback+0xbc>
 800acbc:	68e0      	ldr	r0, [r4, #12]
 800acbe:	b128      	cbz	r0, 800accc <TEXT_Callback+0x4e>
 800acc0:	7a01      	ldrb	r1, [r0, #8]
 800acc2:	2900      	cmp	r1, #0
 800acc4:	bf0c      	ite	eq
 800acc6:	2102      	moveq	r1, #2
 800acc8:	2101      	movne	r1, #1
 800acca:	e000      	b.n	800acce <TEXT_Callback+0x50>
 800accc:	2103      	movs	r1, #3
 800acce:	4628      	mov	r0, r5
 800acd0:	f002 febb 	bl	800da4a <WM_NotifyParent>
 800acd4:	e031      	b.n	800ad3a <TEXT_Callback+0xbc>
 800acd6:	4628      	mov	r0, r5
 800acd8:	f009 f90e 	bl	8013ef8 <GUI_ALLOC_LockH>
 800acdc:	9000      	str	r0, [sp, #0]
 800acde:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ace0:	f006 ff7a 	bl	8011bd8 <LCD_SetColor>
 800ace4:	9a00      	ldr	r2, [sp, #0]
 800ace6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800ace8:	f007 fd12 	bl	8012710 <GUI_SetFont>
 800acec:	4628      	mov	r0, r5
 800acee:	f002 fc8d 	bl	800d60c <WM_GetHasTrans>
 800acf2:	b928      	cbnz	r0, 800ad00 <TEXT_Callback+0x82>
 800acf4:	9b00      	ldr	r3, [sp, #0]
 800acf6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800acf8:	f006 ff66 	bl	8011bc8 <LCD_SetBkColor>
 800acfc:	f008 fcea 	bl	80136d4 <GUI_Clear>
 800ad00:	9800      	ldr	r0, [sp, #0]
 800ad02:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800ad04:	b1a9      	cbz	r1, 800ad32 <TEXT_Callback+0xb4>
 800ad06:	2002      	movs	r0, #2
 800ad08:	f007 fcf8 	bl	80126fc <GUI_SetTextMode>
 800ad0c:	a802      	add	r0, sp, #8
 800ad0e:	f003 f869 	bl	800dde4 <WM_GetClientRect>
 800ad12:	9a00      	ldr	r2, [sp, #0]
 800ad14:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800ad16:	f009 f8ef 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ad1a:	9b00      	ldr	r3, [sp, #0]
 800ad1c:	9001      	str	r0, [sp, #4]
 800ad1e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800ad22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad26:	a902      	add	r1, sp, #8
 800ad28:	f008 f97a 	bl	8013020 <GUI_DispStringInRectWrap>
 800ad2c:	a801      	add	r0, sp, #4
 800ad2e:	f009 f8f1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ad32:	4668      	mov	r0, sp
 800ad34:	f009 f8ee 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ad38:	e002      	b.n	800ad40 <TEXT_Callback+0xc2>
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f004 f96c 	bl	800f018 <WM_DefaultProc>
 800ad40:	b005      	add	sp, #20
 800ad42:	bd30      	pop	{r4, r5, pc}

0800ad44 <TEXT_CreateUser>:
 800ad44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad46:	b087      	sub	sp, #28
 800ad48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ad4c:	9500      	str	r5, [sp, #0]
 800ad4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ad50:	f045 0501 	orr.w	r5, r5, #1
 800ad54:	9501      	str	r5, [sp, #4]
 800ad56:	4d1d      	ldr	r5, [pc, #116]	; (800adcc <TEXT_CreateUser+0x88>)
 800ad58:	9502      	str	r5, [sp, #8]
 800ad5a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ad5c:	3520      	adds	r5, #32
 800ad5e:	9503      	str	r5, [sp, #12]
 800ad60:	f003 fdec 	bl	800e93c <WM_CreateWindowAsChild>
 800ad64:	4605      	mov	r5, r0
 800ad66:	b368      	cbz	r0, 800adc4 <TEXT_CreateUser+0x80>
 800ad68:	b90c      	cbnz	r4, 800ad6e <TEXT_CreateUser+0x2a>
 800ad6a:	2700      	movs	r7, #0
 800ad6c:	e013      	b.n	800ad96 <TEXT_CreateUser+0x52>
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f00e fd5c 	bl	801982c <strlen>
 800ad74:	3001      	adds	r0, #1
 800ad76:	f009 fb33 	bl	80143e0 <GUI_ALLOC_AllocZero>
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d0f4      	beq.n	800ad6a <TEXT_CreateUser+0x26>
 800ad80:	f009 f8ba 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ad84:	ae06      	add	r6, sp, #24
 800ad86:	4621      	mov	r1, r4
 800ad88:	f846 0d04 	str.w	r0, [r6, #-4]!
 800ad8c:	f00e fcf0 	bl	8019770 <strcpy>
 800ad90:	4630      	mov	r0, r6
 800ad92:	f009 f8bf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ad96:	4628      	mov	r0, r5
 800ad98:	f009 f8ae 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ad9c:	ae06      	add	r6, sp, #24
 800ad9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ada0:	9005      	str	r0, [sp, #20]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f009 fce0 	bl	8014768 <WIDGET__Init>
 800ada8:	f856 4d04 	ldr.w	r4, [r6, #-4]!
 800adac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adae:	4808      	ldr	r0, [pc, #32]	; (800add0 <TEXT_CreateUser+0x8c>)
 800adb0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800adb4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800adb6:	6467      	str	r7, [r4, #68]	; 0x44
 800adb8:	3434      	adds	r4, #52	; 0x34
 800adba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800adbe:	4630      	mov	r0, r6
 800adc0:	f009 f8a8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800adc4:	4628      	mov	r0, r5
 800adc6:	b007      	add	sp, #28
 800adc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adca:	bf00      	nop
 800adcc:	0800ac7f 	.word	0x0800ac7f
 800add0:	200000a4 	.word	0x200000a4

0800add4 <SLIDER_CreateIndirect>:
 800add4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add6:	b087      	sub	sp, #28
 800add8:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800addc:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800ade0:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800ade4:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800ade8:	9100      	str	r1, [sp, #0]
 800adea:	2100      	movs	r1, #0
 800adec:	9101      	str	r1, [sp, #4]
 800adee:	8a44      	ldrh	r4, [r0, #18]
 800adf0:	9402      	str	r4, [sp, #8]
 800adf2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800adf6:	9103      	str	r1, [sp, #12]
 800adf8:	6984      	ldr	r4, [r0, #24]
 800adfa:	18f9      	adds	r1, r7, r3
 800adfc:	eb0e 0002 	add.w	r0, lr, r2
 800ae00:	9404      	str	r4, [sp, #16]
 800ae02:	4632      	mov	r2, r6
 800ae04:	462b      	mov	r3, r5
 800ae06:	f000 f803 	bl	800ae10 <SLIDER_CreateUser>
 800ae0a:	b007      	add	sp, #28
 800ae0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ae10 <SLIDER_CreateUser>:
 800ae10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae14:	b086      	sub	sp, #24
 800ae16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae18:	9400      	str	r4, [sp, #0]
 800ae1a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ae1c:	f044 0401 	orr.w	r4, r4, #1
 800ae20:	9401      	str	r4, [sp, #4]
 800ae22:	4c1c      	ldr	r4, [pc, #112]	; (800ae94 <SLIDER_CreateUser+0x84>)
 800ae24:	9402      	str	r4, [sp, #8]
 800ae26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ae28:	3438      	adds	r4, #56	; 0x38
 800ae2a:	9403      	str	r4, [sp, #12]
 800ae2c:	f003 fd86 	bl	800e93c <WM_CreateWindowAsChild>
 800ae30:	4680      	mov	r8, r0
 800ae32:	b358      	cbz	r0, 800ae8c <SLIDER_CreateUser+0x7c>
 800ae34:	f009 f860 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ae38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae3a:	4d17      	ldr	r5, [pc, #92]	; (800ae98 <SLIDER_CreateUser+0x88>)
 800ae3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae3e:	9005      	str	r0, [sp, #20]
 800ae40:	f013 0f08 	tst.w	r3, #8
 800ae44:	bf14      	ite	ne
 800ae46:	2218      	movne	r2, #24
 800ae48:	2210      	moveq	r2, #16
 800ae4a:	f009 fc8d 	bl	8014768 <WIDGET__Init>
 800ae4e:	af06      	add	r7, sp, #24
 800ae50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae52:	f857 6d04 	ldr.w	r6, [r7, #-4]!
 800ae56:	f106 0434 	add.w	r4, r6, #52	; 0x34
 800ae5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ae60:	e884 0003 	stmia.w	r4, {r0, r1}
 800ae64:	4c0d      	ldr	r4, [pc, #52]	; (800ae9c <SLIDER_CreateUser+0x8c>)
 800ae66:	6820      	ldr	r0, [r4, #0]
 800ae68:	2108      	movs	r1, #8
 800ae6a:	2264      	movs	r2, #100	; 0x64
 800ae6c:	64f0      	str	r0, [r6, #76]	; 0x4c
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	f8a6 1060 	strh.w	r1, [r6, #96]	; 0x60
 800ae78:	6572      	str	r2, [r6, #84]	; 0x54
 800ae7a:	6530      	str	r0, [r6, #80]	; 0x50
 800ae7c:	65b3      	str	r3, [r6, #88]	; 0x58
 800ae7e:	4638      	mov	r0, r7
 800ae80:	f009 f848 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ae84:	6821      	ldr	r1, [r4, #0]
 800ae86:	4640      	mov	r0, r8
 800ae88:	684a      	ldr	r2, [r1, #4]
 800ae8a:	4790      	blx	r2
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	b006      	add	sp, #24
 800ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae94:	0800af7f 	.word	0x0800af7f
 800ae98:	200000b8 	.word	0x200000b8
 800ae9c:	200000b4 	.word	0x200000b4

0800aea0 <SLIDER_CreateEx>:
 800aea0:	b510      	push	{r4, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	9c08      	ldr	r4, [sp, #32]
 800aea6:	9400      	str	r4, [sp, #0]
 800aea8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800aeaa:	9401      	str	r4, [sp, #4]
 800aeac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aeae:	9402      	str	r4, [sp, #8]
 800aeb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800aeb2:	9403      	str	r4, [sp, #12]
 800aeb4:	2400      	movs	r4, #0
 800aeb6:	9404      	str	r4, [sp, #16]
 800aeb8:	f7ff ffaa 	bl	800ae10 <SLIDER_CreateUser>
 800aebc:	b006      	add	sp, #24
 800aebe:	bd10      	pop	{r4, pc}

0800aec0 <SLIDER_Dec>:
 800aec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aec2:	4605      	mov	r5, r0
 800aec4:	b1c0      	cbz	r0, 800aef8 <SLIDER_Dec+0x38>
 800aec6:	f009 f817 	bl	8013ef8 <GUI_ALLOC_LockH>
 800aeca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800aecc:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800aece:	ac02      	add	r4, sp, #8
 800aed0:	428a      	cmp	r2, r1
 800aed2:	f844 0d04 	str.w	r0, [r4, #-4]!
 800aed6:	dd0c      	ble.n	800aef2 <SLIDER_Dec+0x32>
 800aed8:	1e53      	subs	r3, r2, #1
 800aeda:	65c3      	str	r3, [r0, #92]	; 0x5c
 800aedc:	4628      	mov	r0, r5
 800aede:	f003 fc71 	bl	800e7c4 <WM_InvalidateWindow>
 800aee2:	4620      	mov	r0, r4
 800aee4:	f009 f816 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800aee8:	4628      	mov	r0, r5
 800aeea:	2105      	movs	r1, #5
 800aeec:	f002 fdad 	bl	800da4a <WM_NotifyParent>
 800aef0:	e002      	b.n	800aef8 <SLIDER_Dec+0x38>
 800aef2:	4620      	mov	r0, r4
 800aef4:	f009 f80e 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800aef8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800aefa <SLIDER_Inc>:
 800aefa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aefc:	4605      	mov	r5, r0
 800aefe:	b1c0      	cbz	r0, 800af32 <SLIDER_Inc+0x38>
 800af00:	f008 fffa 	bl	8013ef8 <GUI_ALLOC_LockH>
 800af04:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800af06:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800af08:	ac02      	add	r4, sp, #8
 800af0a:	428a      	cmp	r2, r1
 800af0c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800af10:	da0c      	bge.n	800af2c <SLIDER_Inc+0x32>
 800af12:	1c53      	adds	r3, r2, #1
 800af14:	65c3      	str	r3, [r0, #92]	; 0x5c
 800af16:	4628      	mov	r0, r5
 800af18:	f003 fc54 	bl	800e7c4 <WM_InvalidateWindow>
 800af1c:	4620      	mov	r0, r4
 800af1e:	f008 fff9 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800af22:	4628      	mov	r0, r5
 800af24:	2105      	movs	r1, #5
 800af26:	f002 fd90 	bl	800da4a <WM_NotifyParent>
 800af2a:	e002      	b.n	800af32 <SLIDER_Inc+0x38>
 800af2c:	4620      	mov	r0, r4
 800af2e:	f008 fff1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800af32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800af34 <SLIDER_SetValue>:
 800af34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af36:	460e      	mov	r6, r1
 800af38:	4605      	mov	r5, r0
 800af3a:	b1f8      	cbz	r0, 800af7c <SLIDER_SetValue+0x48>
 800af3c:	f008 ffdc 	bl	8013ef8 <GUI_ALLOC_LockH>
 800af40:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800af42:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800af44:	4296      	cmp	r6, r2
 800af46:	bfac      	ite	ge
 800af48:	4631      	movge	r1, r6
 800af4a:	4611      	movlt	r1, r2
 800af4c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800af4e:	ac02      	add	r4, sp, #8
 800af50:	4299      	cmp	r1, r3
 800af52:	bfa8      	it	ge
 800af54:	4619      	movge	r1, r3
 800af56:	428a      	cmp	r2, r1
 800af58:	f844 0d04 	str.w	r0, [r4, #-4]!
 800af5c:	d00b      	beq.n	800af76 <SLIDER_SetValue+0x42>
 800af5e:	65c1      	str	r1, [r0, #92]	; 0x5c
 800af60:	4628      	mov	r0, r5
 800af62:	f003 fc2f 	bl	800e7c4 <WM_InvalidateWindow>
 800af66:	4620      	mov	r0, r4
 800af68:	f008 ffd4 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800af6c:	4628      	mov	r0, r5
 800af6e:	2105      	movs	r1, #5
 800af70:	f002 fd6b 	bl	800da4a <WM_NotifyParent>
 800af74:	e002      	b.n	800af7c <SLIDER_SetValue+0x48>
 800af76:	4620      	mov	r0, r4
 800af78:	f008 ffcc 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800af7c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800af7e <SLIDER_Callback>:
 800af7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af82:	6844      	ldr	r4, [r0, #4]
 800af84:	4605      	mov	r5, r0
 800af86:	4629      	mov	r1, r5
 800af88:	4620      	mov	r0, r4
 800af8a:	f009 fbf5 	bl	8014778 <WIDGET_HandleActive>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f000 80a4 	beq.w	800b0dc <SLIDER_Callback+0x15e>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d006      	beq.n	800afa8 <SLIDER_Callback+0x2a>
 800af9a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800af9e:	d014      	beq.n	800afca <SLIDER_Callback+0x4c>
 800afa0:	2b0e      	cmp	r3, #14
 800afa2:	f040 8098 	bne.w	800b0d6 <SLIDER_Callback+0x158>
 800afa6:	e086      	b.n	800b0b6 <SLIDER_Callback+0x138>
 800afa8:	4620      	mov	r0, r4
 800afaa:	f008 ffa5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800afae:	a902      	add	r1, sp, #8
 800afb0:	f841 0d04 	str.w	r0, [r1, #-4]!
 800afb4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800afb6:	682d      	ldr	r5, [r5, #0]
 800afb8:	4608      	mov	r0, r1
 800afba:	f008 ffab 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	f000 808c 	beq.w	800b0dc <SLIDER_Callback+0x15e>
 800afc4:	4620      	mov	r0, r4
 800afc6:	47a8      	blx	r5
 800afc8:	e088      	b.n	800b0dc <SLIDER_Callback+0x15e>
 800afca:	68ef      	ldr	r7, [r5, #12]
 800afcc:	2f00      	cmp	r7, #0
 800afce:	f000 8082 	beq.w	800b0d6 <SLIDER_Callback+0x158>
 800afd2:	4620      	mov	r0, r4
 800afd4:	f008 ff90 	bl	8013ef8 <GUI_ALLOC_LockH>
 800afd8:	4603      	mov	r3, r0
 800afda:	a802      	add	r0, sp, #8
 800afdc:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 800afde:	f840 3d04 	str.w	r3, [r0, #-4]!
 800afe2:	f8d3 9054 	ldr.w	r9, [r3, #84]	; 0x54
 800afe6:	f8b3 b060 	ldrh.w	fp, [r3, #96]	; 0x60
 800afea:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 800afee:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
 800aff2:	f008 ff8f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800aff6:	7a3a      	ldrb	r2, [r7, #8]
 800aff8:	2a00      	cmp	r2, #0
 800affa:	d048      	beq.n	800b08e <SLIDER_Callback+0x110>
 800affc:	fa0f fb8b 	sxth.w	fp, fp
 800b000:	2302      	movs	r3, #2
 800b002:	f008 0008 	and.w	r0, r8, #8
 800b006:	fb9b f2f3 	sdiv	r2, fp, r3
 800b00a:	b281      	uxth	r1, r0
 800b00c:	f102 0b01 	add.w	fp, r2, #1
 800b010:	b109      	cbz	r1, 800b016 <SLIDER_Callback+0x98>
 800b012:	687f      	ldr	r7, [r7, #4]
 800b014:	e000      	b.n	800b018 <SLIDER_Callback+0x9a>
 800b016:	683f      	ldr	r7, [r7, #0]
 800b018:	ebcb 0707 	rsb	r7, fp, r7
 800b01c:	4620      	mov	r0, r4
 800b01e:	f009 fb53 	bl	80146c8 <WIDGET__GetWindowSizeX>
 800b022:	2f00      	cmp	r7, #0
 800b024:	dd12      	ble.n	800b04c <SLIDER_Callback+0xce>
 800b026:	eba0 024b 	sub.w	r2, r0, fp, lsl #1
 800b02a:	4297      	cmp	r7, r2
 800b02c:	da0d      	bge.n	800b04a <SLIDER_Callback+0xcc>
 800b02e:	2a00      	cmp	r2, #0
 800b030:	bf08      	it	eq
 800b032:	2201      	moveq	r2, #1
 800b034:	2302      	movs	r3, #2
 800b036:	ebc6 0909 	rsb	r9, r6, r9
 800b03a:	fb92 f0f3 	sdiv	r0, r2, r3
 800b03e:	fb09 0707 	mla	r7, r9, r7, r0
 800b042:	fbb7 f1f2 	udiv	r1, r7, r2
 800b046:	198e      	adds	r6, r1, r6
 800b048:	e000      	b.n	800b04c <SLIDER_Callback+0xce>
 800b04a:	464e      	mov	r6, r9
 800b04c:	4620      	mov	r0, r4
 800b04e:	f002 fdc7 	bl	800dbe0 <WM_IsFocussable>
 800b052:	b110      	cbz	r0, 800b05a <SLIDER_Callback+0xdc>
 800b054:	4620      	mov	r0, r4
 800b056:	f002 fb77 	bl	800d748 <WM_SetFocus>
 800b05a:	4620      	mov	r0, r4
 800b05c:	2101      	movs	r1, #1
 800b05e:	f002 fc47 	bl	800d8f0 <WM_SetCapture>
 800b062:	f408 7880 	and.w	r8, r8, #256	; 0x100
 800b066:	4620      	mov	r0, r4
 800b068:	4631      	mov	r1, r6
 800b06a:	f7ff ff63 	bl	800af34 <SLIDER_SetValue>
 800b06e:	fa1f f288 	uxth.w	r2, r8
 800b072:	bb82      	cbnz	r2, 800b0d6 <SLIDER_Callback+0x158>
 800b074:	4620      	mov	r0, r4
 800b076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b07a:	f00a 0a02 	and.w	sl, sl, #2
 800b07e:	f009 fb4a 	bl	8014716 <WIDGET_OrState>
 800b082:	fa1f f38a 	uxth.w	r3, sl
 800b086:	b333      	cbz	r3, 800b0d6 <SLIDER_Callback+0x158>
 800b088:	4620      	mov	r0, r4
 800b08a:	2101      	movs	r1, #1
 800b08c:	e010      	b.n	800b0b0 <SLIDER_Callback+0x132>
 800b08e:	f408 7880 	and.w	r8, r8, #256	; 0x100
 800b092:	fa1f f088 	uxth.w	r0, r8
 800b096:	b1f0      	cbz	r0, 800b0d6 <SLIDER_Callback+0x158>
 800b098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b09c:	4620      	mov	r0, r4
 800b09e:	f00a 0a02 	and.w	sl, sl, #2
 800b0a2:	f009 fb4d 	bl	8014740 <WIDGET_AndState>
 800b0a6:	fa1f f18a 	uxth.w	r1, sl
 800b0aa:	b1a1      	cbz	r1, 800b0d6 <SLIDER_Callback+0x158>
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	2102      	movs	r1, #2
 800b0b0:	f002 fccb 	bl	800da4a <WM_NotifyParent>
 800b0b4:	e00f      	b.n	800b0d6 <SLIDER_Callback+0x158>
 800b0b6:	68ea      	ldr	r2, [r5, #12]
 800b0b8:	6851      	ldr	r1, [r2, #4]
 800b0ba:	6810      	ldr	r0, [r2, #0]
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	dd0a      	ble.n	800b0d6 <SLIDER_Callback+0x158>
 800b0c0:	2810      	cmp	r0, #16
 800b0c2:	d005      	beq.n	800b0d0 <SLIDER_Callback+0x152>
 800b0c4:	2812      	cmp	r0, #18
 800b0c6:	d106      	bne.n	800b0d6 <SLIDER_Callback+0x158>
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f7ff ff16 	bl	800aefa <SLIDER_Inc>
 800b0ce:	e002      	b.n	800b0d6 <SLIDER_Callback+0x158>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7ff fef5 	bl	800aec0 <SLIDER_Dec>
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f003 ff9e 	bl	800f018 <WM_DefaultProc>
 800b0dc:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0e0 <SLIDER_SetRange>:
 800b0e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	4616      	mov	r6, r2
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	b1b0      	cbz	r0, 800b118 <SLIDER_SetRange+0x38>
 800b0ea:	f008 ff05 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b0ee:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800b0f0:	9001      	str	r0, [sp, #4]
 800b0f2:	42a6      	cmp	r6, r4
 800b0f4:	bfac      	ite	ge
 800b0f6:	4632      	movge	r2, r6
 800b0f8:	4622      	movlt	r2, r4
 800b0fa:	42a1      	cmp	r1, r4
 800b0fc:	bfb8      	it	lt
 800b0fe:	65c4      	strlt	r4, [r0, #92]	; 0x5c
 800b100:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800b102:	6584      	str	r4, [r0, #88]	; 0x58
 800b104:	4293      	cmp	r3, r2
 800b106:	6542      	str	r2, [r0, #84]	; 0x54
 800b108:	bfc8      	it	gt
 800b10a:	65c2      	strgt	r2, [r0, #92]	; 0x5c
 800b10c:	a801      	add	r0, sp, #4
 800b10e:	f008 ff01 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b112:	4628      	mov	r0, r5
 800b114:	f003 fb56 	bl	800e7c4 <WM_InvalidateWindow>
 800b118:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800b11a <SLIDER_GetValue>:
 800b11a:	b513      	push	{r0, r1, r4, lr}
 800b11c:	4604      	mov	r4, r0
 800b11e:	b140      	cbz	r0, 800b132 <SLIDER_GetValue+0x18>
 800b120:	f008 feea 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b124:	ab02      	add	r3, sp, #8
 800b126:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800b128:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b12c:	4618      	mov	r0, r3
 800b12e:	f008 fef1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b132:	4620      	mov	r0, r4
 800b134:	bd1c      	pop	{r2, r3, r4, pc}

0800b136 <RADIO_SetText>:
 800b136:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b13a:	460c      	mov	r4, r1
 800b13c:	4616      	mov	r6, r2
 800b13e:	4607      	mov	r7, r0
 800b140:	b1e0      	cbz	r0, 800b17c <RADIO_SetText+0x46>
 800b142:	f008 fed9 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b146:	4605      	mov	r5, r0
 800b148:	a802      	add	r0, sp, #8
 800b14a:	f8d5 805c 	ldr.w	r8, [r5, #92]	; 0x5c
 800b14e:	f840 5d04 	str.w	r5, [r0, #-4]!
 800b152:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
 800b156:	f008 fedd 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b15a:	42ae      	cmp	r6, r5
 800b15c:	d20e      	bcs.n	800b17c <RADIO_SetText+0x46>
 800b15e:	b124      	cbz	r4, 800b16a <RADIO_SetText+0x34>
 800b160:	4620      	mov	r0, r4
 800b162:	f006 fd41 	bl	8011be8 <GUI__strlen>
 800b166:	1c43      	adds	r3, r0, #1
 800b168:	e000      	b.n	800b16c <RADIO_SetText+0x36>
 800b16a:	4623      	mov	r3, r4
 800b16c:	4640      	mov	r0, r8
 800b16e:	4631      	mov	r1, r6
 800b170:	4622      	mov	r2, r4
 800b172:	f000 fdc2 	bl	800bcfa <GUI_ARRAY_SetItem>
 800b176:	4638      	mov	r0, r7
 800b178:	f003 fb24 	bl	800e7c4 <WM_InvalidateWindow>
 800b17c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0800b180 <RADIO_SetFont>:
 800b180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b182:	460c      	mov	r4, r1
 800b184:	4605      	mov	r5, r0
 800b186:	b180      	cbz	r0, 800b1aa <RADIO_SetFont+0x2a>
 800b188:	f008 feb6 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b18c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b18e:	9001      	str	r0, [sp, #4]
 800b190:	4294      	cmp	r4, r2
 800b192:	d007      	beq.n	800b1a4 <RADIO_SetFont+0x24>
 800b194:	6404      	str	r4, [r0, #64]	; 0x40
 800b196:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800b198:	f000 fd30 	bl	800bbfc <GUI_ARRAY_GetNumItems>
 800b19c:	b110      	cbz	r0, 800b1a4 <RADIO_SetFont+0x24>
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f003 fb10 	bl	800e7c4 <WM_InvalidateWindow>
 800b1a4:	a801      	add	r0, sp, #4
 800b1a6:	f008 feb5 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b1aa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b1ac <RADIO_CreateIndirect>:
 800b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ae:	b089      	sub	sp, #36	; 0x24
 800b1b0:	6944      	ldr	r4, [r0, #20]
 800b1b2:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800b1b6:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800b1ba:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800b1be:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800b1c2:	9100      	str	r1, [sp, #0]
 800b1c4:	8a41      	ldrh	r1, [r0, #18]
 800b1c6:	9101      	str	r1, [sp, #4]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	9102      	str	r1, [sp, #8]
 800b1cc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b1d0:	9103      	str	r1, [sp, #12]
 800b1d2:	b2e1      	uxtb	r1, r4
 800b1d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b1d8:	9104      	str	r1, [sp, #16]
 800b1da:	9405      	str	r4, [sp, #20]
 800b1dc:	6984      	ldr	r4, [r0, #24]
 800b1de:	18f9      	adds	r1, r7, r3
 800b1e0:	eb0e 0002 	add.w	r0, lr, r2
 800b1e4:	9406      	str	r4, [sp, #24]
 800b1e6:	4632      	mov	r2, r6
 800b1e8:	462b      	mov	r3, r5
 800b1ea:	f000 f837 	bl	800b25c <RADIO_CreateUser>
 800b1ee:	b009      	add	sp, #36	; 0x24
 800b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1f2 <RADIO__GetButtonSize>:
 800b1f2:	b530      	push	{r4, r5, lr}
 800b1f4:	b08b      	sub	sp, #44	; 0x2c
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	f008 fe7e 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b1fc:	ab0a      	add	r3, sp, #40	; 0x28
 800b1fe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b200:	f843 0d28 	str.w	r0, [r3, #-40]!
 800b204:	6894      	ldr	r4, [r2, #8]
 800b206:	4668      	mov	r0, sp
 800b208:	f008 fe84 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b20c:	2019      	movs	r0, #25
 800b20e:	9002      	str	r0, [sp, #8]
 800b210:	9501      	str	r5, [sp, #4]
 800b212:	6861      	ldr	r1, [r4, #4]
 800b214:	a801      	add	r0, sp, #4
 800b216:	4788      	blx	r1
 800b218:	b00b      	add	sp, #44	; 0x2c
 800b21a:	bd30      	pop	{r4, r5, pc}

0800b21c <RADIO__SetValue>:
 800b21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b21e:	460c      	mov	r4, r1
 800b220:	4605      	mov	r5, r0
 800b222:	f008 fe69 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b226:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 800b22a:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
 800b22e:	9001      	str	r0, [sp, #4]
 800b230:	4294      	cmp	r4, r2
 800b232:	bfa8      	it	ge
 800b234:	1e54      	subge	r4, r2, #1
 800b236:	428c      	cmp	r4, r1
 800b238:	d00c      	beq.n	800b254 <RADIO__SetValue+0x38>
 800b23a:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
 800b23e:	4628      	mov	r0, r5
 800b240:	f003 fac0 	bl	800e7c4 <WM_InvalidateWindow>
 800b244:	a801      	add	r0, sp, #4
 800b246:	f008 fe65 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b24a:	4628      	mov	r0, r5
 800b24c:	2105      	movs	r1, #5
 800b24e:	f002 fbfc 	bl	800da4a <WM_NotifyParent>
 800b252:	e002      	b.n	800b25a <RADIO__SetValue+0x3e>
 800b254:	a801      	add	r0, sp, #4
 800b256:	f008 fe5d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b25a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b25c <RADIO_CreateUser>:
 800b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	4c35      	ldr	r4, [pc, #212]	; (800b338 <RADIO_CreateUser+0xdc>)
 800b262:	b087      	sub	sp, #28
 800b264:	6924      	ldr	r4, [r4, #16]
 800b266:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b268:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b26a:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800b26e:	8866      	ldrh	r6, [r4, #2]
 800b270:	2d00      	cmp	r5, #0
 800b272:	bfcc      	ite	gt
 800b274:	46a9      	movgt	r9, r5
 800b276:	f04f 0914 	movle.w	r9, #20
 800b27a:	2f00      	cmp	r7, #0
 800b27c:	bfd8      	it	le
 800b27e:	2702      	movle	r7, #2
 800b280:	b91b      	cbnz	r3, 800b28a <RADIO_CreateUser+0x2e>
 800b282:	3604      	adds	r6, #4
 800b284:	1e7b      	subs	r3, r7, #1
 800b286:	fb09 6303 	mla	r3, r9, r3, r6
 800b28a:	b90a      	cbnz	r2, 800b290 <RADIO_CreateUser+0x34>
 800b28c:	8822      	ldrh	r2, [r4, #0]
 800b28e:	3204      	adds	r2, #4
 800b290:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b292:	f8cd a000 	str.w	sl, [sp]
 800b296:	f044 0601 	orr.w	r6, r4, #1
 800b29a:	4c28      	ldr	r4, [pc, #160]	; (800b33c <RADIO_CreateUser+0xe0>)
 800b29c:	9601      	str	r6, [sp, #4]
 800b29e:	9402      	str	r4, [sp, #8]
 800b2a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800b2a2:	343c      	adds	r4, #60	; 0x3c
 800b2a4:	9403      	str	r4, [sp, #12]
 800b2a6:	f003 fb49 	bl	800e93c <WM_CreateWindowAsChild>
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d03f      	beq.n	800b330 <RADIO_CreateUser+0xd4>
 800b2b0:	f000 fd87 	bl	800bdc2 <GUI_ARRAY_Create>
 800b2b4:	2400      	movs	r4, #0
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	460a      	mov	r2, r1
 800b2be:	3401      	adds	r4, #1
 800b2c0:	f000 fcaa 	bl	800bc18 <GUI_ARRAY_AddItem>
 800b2c4:	42bc      	cmp	r4, r7
 800b2c6:	dbf7      	blt.n	800b2b8 <RADIO_CreateUser+0x5c>
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f008 fe15 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b2ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2d0:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800b340 <RADIO_CreateUser+0xe4>
 800b2d4:	65c5      	str	r5, [r0, #92]	; 0x5c
 800b2d6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800b2da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b2dc:	9005      	str	r0, [sp, #20]
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	bf14      	ite	ne
 800b2e2:	f44f 7288 	movne.w	r2, #272	; 0x110
 800b2e6:	2210      	moveq	r2, #16
 800b2e8:	f009 fa3e 	bl	8014768 <WIDGET__Init>
 800b2ec:	4d12      	ldr	r5, [pc, #72]	; (800b338 <RADIO_CreateUser+0xdc>)
 800b2ee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b2f2:	f8db 0000 	ldr.w	r0, [fp]
 800b2f6:	f8c8 0058 	str.w	r0, [r8, #88]	; 0x58
 800b2fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2fc:	f108 0434 	add.w	r4, r8, #52	; 0x34
 800b300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b306:	6829      	ldr	r1, [r5, #0]
 800b308:	4650      	mov	r0, sl
 800b30a:	6021      	str	r1, [r4, #0]
 800b30c:	f002 fd78 	bl	800de00 <WM_GetBkColor>
 800b310:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 800b314:	a806      	add	r0, sp, #24
 800b316:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800b31a:	f8a3 7064 	strh.w	r7, [r3, #100]	; 0x64
 800b31e:	f8a3 9062 	strh.w	r9, [r3, #98]	; 0x62
 800b322:	f008 fdf7 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b326:	f8db 2000 	ldr.w	r2, [fp]
 800b32a:	4630      	mov	r0, r6
 800b32c:	6851      	ldr	r1, [r2, #4]
 800b32e:	4788      	blx	r1
 800b330:	4630      	mov	r0, r6
 800b332:	b007      	add	sp, #28
 800b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b338:	200000d0 	.word	0x200000d0
 800b33c:	0800b3b5 	.word	0x0800b3b5
 800b340:	200000f4 	.word	0x200000f4

0800b344 <RADIO_SetValue>:
 800b344:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b346:	460c      	mov	r4, r1
 800b348:	4605      	mov	r5, r0
 800b34a:	b1a8      	cbz	r0, 800b378 <RADIO_SetValue+0x34>
 800b34c:	f008 fdd4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b350:	ab02      	add	r3, sp, #8
 800b352:	f890 6066 	ldrb.w	r6, [r0, #102]	; 0x66
 800b356:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b35a:	4618      	mov	r0, r3
 800b35c:	f008 fdda 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b360:	4628      	mov	r0, r5
 800b362:	b12e      	cbz	r6, 800b370 <RADIO_SetValue+0x2c>
 800b364:	4905      	ldr	r1, [pc, #20]	; (800b37c <RADIO_SetValue+0x38>)
 800b366:	680a      	ldr	r2, [r1, #0]
 800b368:	b112      	cbz	r2, 800b370 <RADIO_SetValue+0x2c>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4790      	blx	r2
 800b36e:	e003      	b.n	800b378 <RADIO_SetValue+0x34>
 800b370:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 800b374:	f7ff ff52 	bl	800b21c <RADIO__SetValue>
 800b378:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800b37a:	bf00      	nop
 800b37c:	2000eae0 	.word	0x2000eae0

0800b380 <RADIO_AddValue>:
 800b380:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b382:	460c      	mov	r4, r1
 800b384:	4606      	mov	r6, r0
 800b386:	b168      	cbz	r0, 800b3a4 <RADIO_AddValue+0x24>
 800b388:	f008 fdb6 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b38c:	4602      	mov	r2, r0
 800b38e:	a802      	add	r0, sp, #8
 800b390:	f9b2 5060 	ldrsh.w	r5, [r2, #96]	; 0x60
 800b394:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b398:	f008 fdbc 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b39c:	4630      	mov	r0, r6
 800b39e:	1929      	adds	r1, r5, r4
 800b3a0:	f7ff ffd0 	bl	800b344 <RADIO_SetValue>
 800b3a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800b3a6 <RADIO_Inc>:
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	f7ff bfea 	b.w	800b380 <RADIO_AddValue>

0800b3ac <RADIO_Dec>:
 800b3ac:	f04f 31ff 	mov.w	r1, #4294967295
 800b3b0:	f7ff bfe6 	b.w	800b380 <RADIO_AddValue>

0800b3b4 <RADIO_Callback>:
 800b3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3b8:	6844      	ldr	r4, [r0, #4]
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f009 f9da 	bl	8014778 <WIDGET_HandleActive>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	f000 809c 	beq.w	800b502 <RADIO_Callback+0x14e>
 800b3ca:	682b      	ldr	r3, [r5, #0]
 800b3cc:	2b0f      	cmp	r3, #15
 800b3ce:	d00e      	beq.n	800b3ee <RADIO_Callback+0x3a>
 800b3d0:	dc06      	bgt.n	800b3e0 <RADIO_Callback+0x2c>
 800b3d2:	2b0b      	cmp	r3, #11
 800b3d4:	f000 8086 	beq.w	800b4e4 <RADIO_Callback+0x130>
 800b3d8:	2b0e      	cmp	r3, #14
 800b3da:	f040 808f 	bne.w	800b4fc <RADIO_Callback+0x148>
 800b3de:	e06d      	b.n	800b4bc <RADIO_Callback+0x108>
 800b3e0:	2b2b      	cmp	r3, #43	; 0x2b
 800b3e2:	d014      	beq.n	800b40e <RADIO_Callback+0x5a>
 800b3e4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800b3e8:	f040 8088 	bne.w	800b4fc <RADIO_Callback+0x148>
 800b3ec:	e01c      	b.n	800b428 <RADIO_Callback+0x74>
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f008 fd82 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b3f4:	ab02      	add	r3, sp, #8
 800b3f6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b3fa:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800b3fc:	682d      	ldr	r5, [r5, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f008 fd88 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b404:	2d00      	cmp	r5, #0
 800b406:	d07c      	beq.n	800b502 <RADIO_Callback+0x14e>
 800b408:	4620      	mov	r0, r4
 800b40a:	47a8      	blx	r5
 800b40c:	e079      	b.n	800b502 <RADIO_Callback+0x14e>
 800b40e:	4620      	mov	r0, r4
 800b410:	f008 fd72 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b414:	a902      	add	r1, sp, #8
 800b416:	f841 0d04 	str.w	r0, [r1, #-4]!
 800b41a:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
 800b41e:	60e8      	str	r0, [r5, #12]
 800b420:	4608      	mov	r0, r1
 800b422:	f008 fd77 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b426:	e06c      	b.n	800b502 <RADIO_Callback+0x14e>
 800b428:	4620      	mov	r0, r4
 800b42a:	68ee      	ldr	r6, [r5, #12]
 800b42c:	f008 fd64 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b430:	9001      	str	r0, [sp, #4]
 800b432:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800b436:	f8b0 7062 	ldrh.w	r7, [r0, #98]	; 0x62
 800b43a:	b143      	cbz	r3, 800b44e <RADIO_Callback+0x9a>
 800b43c:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 800b440:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b444:	ebc3 0009 	rsb	r0, r3, r9
 800b448:	f100 0901 	add.w	r9, r0, #1
 800b44c:	e006      	b.n	800b45c <RADIO_Callback+0xa8>
 800b44e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800b450:	6882      	ldr	r2, [r0, #8]
 800b452:	4620      	mov	r0, r4
 800b454:	6811      	ldr	r1, [r2, #0]
 800b456:	4788      	blx	r1
 800b458:	f100 0904 	add.w	r9, r0, #4
 800b45c:	a802      	add	r0, sp, #8
 800b45e:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800b462:	f8b2 8030 	ldrh.w	r8, [r2, #48]	; 0x30
 800b466:	f008 fd55 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b46a:	68e9      	ldr	r1, [r5, #12]
 800b46c:	b1a1      	cbz	r1, 800b498 <RADIO_Callback+0xe4>
 800b46e:	7a33      	ldrb	r3, [r6, #8]
 800b470:	b1ab      	cbz	r3, 800b49e <RADIO_Callback+0xea>
 800b472:	6876      	ldr	r6, [r6, #4]
 800b474:	fb96 f1f7 	sdiv	r1, r6, r7
 800b478:	fb07 6711 	mls	r7, r7, r1, r6
 800b47c:	454f      	cmp	r7, r9
 800b47e:	dc02      	bgt.n	800b486 <RADIO_Callback+0xd2>
 800b480:	4620      	mov	r0, r4
 800b482:	f7ff ff5f 	bl	800b344 <RADIO_SetValue>
 800b486:	4620      	mov	r0, r4
 800b488:	f002 fbaa 	bl	800dbe0 <WM_IsFocussable>
 800b48c:	b150      	cbz	r0, 800b4a4 <RADIO_Callback+0xf0>
 800b48e:	4620      	mov	r0, r4
 800b490:	f002 f95a 	bl	800d748 <WM_SetFocus>
 800b494:	2600      	movs	r6, #0
 800b496:	e006      	b.n	800b4a6 <RADIO_Callback+0xf2>
 800b498:	460e      	mov	r6, r1
 800b49a:	2103      	movs	r1, #3
 800b49c:	e004      	b.n	800b4a8 <RADIO_Callback+0xf4>
 800b49e:	2601      	movs	r6, #1
 800b4a0:	2102      	movs	r1, #2
 800b4a2:	e001      	b.n	800b4a8 <RADIO_Callback+0xf4>
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f002 face 	bl	800da4a <WM_NotifyParent>
 800b4ae:	2e01      	cmp	r6, #1
 800b4b0:	d124      	bne.n	800b4fc <RADIO_Callback+0x148>
 800b4b2:	fa0f f088 	sxth.w	r0, r8
 800b4b6:	f007 fa89 	bl	80129cc <GUI_StoreKey>
 800b4ba:	e01f      	b.n	800b4fc <RADIO_Callback+0x148>
 800b4bc:	68e8      	ldr	r0, [r5, #12]
 800b4be:	6842      	ldr	r2, [r0, #4]
 800b4c0:	2a00      	cmp	r2, #0
 800b4c2:	dd1b      	ble.n	800b4fc <RADIO_Callback+0x148>
 800b4c4:	6801      	ldr	r1, [r0, #0]
 800b4c6:	3910      	subs	r1, #16
 800b4c8:	2903      	cmp	r1, #3
 800b4ca:	d817      	bhi.n	800b4fc <RADIO_Callback+0x148>
 800b4cc:	e8df f001 	tbb	[pc, r1]
 800b4d0:	02020606 	.word	0x02020606
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7ff ff66 	bl	800b3a6 <RADIO_Inc>
 800b4da:	e00f      	b.n	800b4fc <RADIO_Callback+0x148>
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f7ff ff65 	bl	800b3ac <RADIO_Dec>
 800b4e2:	e00b      	b.n	800b4fc <RADIO_Callback+0x148>
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f008 fd07 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b4ea:	ac02      	add	r4, sp, #8
 800b4ec:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b4f0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800b4f2:	f000 fbda 	bl	800bcaa <GUI_ARRAY_Delete>
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f008 fd0c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f003 fd8b 	bl	800f018 <WM_DefaultProc>
 800b502:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800b506 <RADIO_GetValue>:
 800b506:	b513      	push	{r0, r1, r4, lr}
 800b508:	4604      	mov	r4, r0
 800b50a:	b148      	cbz	r0, 800b520 <RADIO_GetValue+0x1a>
 800b50c:	f008 fcf4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b510:	ab02      	add	r3, sp, #8
 800b512:	f9b0 4060 	ldrsh.w	r4, [r0, #96]	; 0x60
 800b516:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b51a:	4618      	mov	r0, r3
 800b51c:	f008 fcfa 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b520:	4620      	mov	r0, r4
 800b522:	bd1c      	pop	{r2, r3, r4, pc}

0800b524 <PROGBAR_DrawSkinFlex>:
 800b524:	6843      	ldr	r3, [r0, #4]
 800b526:	2b0b      	cmp	r3, #11
 800b528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b52a:	4604      	mov	r4, r0
 800b52c:	6a05      	ldr	r5, [r0, #32]
 800b52e:	d006      	beq.n	800b53e <PROGBAR_DrawSkinFlex+0x1a>
 800b530:	2b12      	cmp	r3, #18
 800b532:	f000 808f 	beq.w	800b654 <PROGBAR_DrawSkinFlex+0x130>
 800b536:	2b05      	cmp	r3, #5
 800b538:	f040 809b 	bne.w	800b672 <PROGBAR_DrawSkinFlex+0x14e>
 800b53c:	e01c      	b.n	800b578 <PROGBAR_DrawSkinFlex+0x54>
 800b53e:	484e      	ldr	r0, [pc, #312]	; (800b678 <PROGBAR_DrawSkinFlex+0x154>)
 800b540:	6a00      	ldr	r0, [r0, #32]
 800b542:	f007 f913 	bl	801276c <GUI_SetColor>
 800b546:	6960      	ldr	r0, [r4, #20]
 800b548:	6921      	ldr	r1, [r4, #16]
 800b54a:	69a2      	ldr	r2, [r4, #24]
 800b54c:	f007 fb58 	bl	8012c00 <GUI_DrawHLine>
 800b550:	69e0      	ldr	r0, [r4, #28]
 800b552:	6921      	ldr	r1, [r4, #16]
 800b554:	69a2      	ldr	r2, [r4, #24]
 800b556:	f007 fb53 	bl	8012c00 <GUI_DrawHLine>
 800b55a:	6963      	ldr	r3, [r4, #20]
 800b55c:	69e2      	ldr	r2, [r4, #28]
 800b55e:	6920      	ldr	r0, [r4, #16]
 800b560:	1c59      	adds	r1, r3, #1
 800b562:	3a01      	subs	r2, #1
 800b564:	f007 fb0a 	bl	8012b7c <GUI_DrawVLine>
 800b568:	6961      	ldr	r1, [r4, #20]
 800b56a:	69e3      	ldr	r3, [r4, #28]
 800b56c:	69a0      	ldr	r0, [r4, #24]
 800b56e:	3101      	adds	r1, #1
 800b570:	1e5a      	subs	r2, r3, #1
 800b572:	f007 fb03 	bl	8012b7c <GUI_DrawVLine>
 800b576:	e07c      	b.n	800b672 <PROGBAR_DrawSkinFlex+0x14e>
 800b578:	6828      	ldr	r0, [r5, #0]
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d034      	beq.n	800b5e8 <PROGBAR_DrawSkinFlex+0xc4>
 800b57e:	6922      	ldr	r2, [r4, #16]
 800b580:	69a7      	ldr	r7, [r4, #24]
 800b582:	686b      	ldr	r3, [r5, #4]
 800b584:	493c      	ldr	r1, [pc, #240]	; (800b678 <PROGBAR_DrawSkinFlex+0x154>)
 800b586:	1abe      	subs	r6, r7, r2
 800b588:	1c70      	adds	r0, r6, #1
 800b58a:	1046      	asrs	r6, r0, #1
 800b58c:	b923      	cbnz	r3, 800b598 <PROGBAR_DrawSkinFlex+0x74>
 800b58e:	690f      	ldr	r7, [r1, #16]
 800b590:	6948      	ldr	r0, [r1, #20]
 800b592:	f04f 0c01 	mov.w	ip, #1
 800b596:	e004      	b.n	800b5a2 <PROGBAR_DrawSkinFlex+0x7e>
 800b598:	680f      	ldr	r7, [r1, #0]
 800b59a:	6848      	ldr	r0, [r1, #4]
 800b59c:	2301      	movs	r3, #1
 800b59e:	f04f 0c00 	mov.w	ip, #0
 800b5a2:	9001      	str	r0, [sp, #4]
 800b5a4:	9700      	str	r7, [sp, #0]
 800b5a6:	6961      	ldr	r1, [r4, #20]
 800b5a8:	69e7      	ldr	r7, [r4, #28]
 800b5aa:	1c50      	adds	r0, r2, #1
 800b5ac:	1afb      	subs	r3, r7, r3
 800b5ae:	4461      	add	r1, ip
 800b5b0:	1992      	adds	r2, r2, r6
 800b5b2:	f007 fc67 	bl	8012e84 <GUI_DrawGradientH>
 800b5b6:	686b      	ldr	r3, [r5, #4]
 800b5b8:	4d2f      	ldr	r5, [pc, #188]	; (800b678 <PROGBAR_DrawSkinFlex+0x154>)
 800b5ba:	b91b      	cbnz	r3, 800b5c4 <PROGBAR_DrawSkinFlex+0xa0>
 800b5bc:	69af      	ldr	r7, [r5, #24]
 800b5be:	69ed      	ldr	r5, [r5, #28]
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	e003      	b.n	800b5cc <PROGBAR_DrawSkinFlex+0xa8>
 800b5c4:	68af      	ldr	r7, [r5, #8]
 800b5c6:	68ed      	ldr	r5, [r5, #12]
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	6922      	ldr	r2, [r4, #16]
 800b5ce:	18b0      	adds	r0, r6, r2
 800b5d0:	6966      	ldr	r6, [r4, #20]
 800b5d2:	69a2      	ldr	r2, [r4, #24]
 800b5d4:	69e4      	ldr	r4, [r4, #28]
 800b5d6:	9700      	str	r7, [sp, #0]
 800b5d8:	9501      	str	r5, [sp, #4]
 800b5da:	3001      	adds	r0, #1
 800b5dc:	1989      	adds	r1, r1, r6
 800b5de:	3a01      	subs	r2, #1
 800b5e0:	1ae3      	subs	r3, r4, r3
 800b5e2:	f007 fc4f 	bl	8012e84 <GUI_DrawGradientH>
 800b5e6:	e044      	b.n	800b672 <PROGBAR_DrawSkinFlex+0x14e>
 800b5e8:	69e7      	ldr	r7, [r4, #28]
 800b5ea:	6963      	ldr	r3, [r4, #20]
 800b5ec:	4e22      	ldr	r6, [pc, #136]	; (800b678 <PROGBAR_DrawSkinFlex+0x154>)
 800b5ee:	1af9      	subs	r1, r7, r3
 800b5f0:	1c4a      	adds	r2, r1, #1
 800b5f2:	1057      	asrs	r7, r2, #1
 800b5f4:	686a      	ldr	r2, [r5, #4]
 800b5f6:	b922      	cbnz	r2, 800b602 <PROGBAR_DrawSkinFlex+0xde>
 800b5f8:	f8d6 c000 	ldr.w	ip, [r6]
 800b5fc:	6871      	ldr	r1, [r6, #4]
 800b5fe:	2001      	movs	r0, #1
 800b600:	e003      	b.n	800b60a <PROGBAR_DrawSkinFlex+0xe6>
 800b602:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800b606:	6971      	ldr	r1, [r6, #20]
 800b608:	2201      	movs	r2, #1
 800b60a:	69a6      	ldr	r6, [r4, #24]
 800b60c:	f8cd c000 	str.w	ip, [sp]
 800b610:	9101      	str	r1, [sp, #4]
 800b612:	6921      	ldr	r1, [r4, #16]
 800b614:	1ab2      	subs	r2, r6, r2
 800b616:	1840      	adds	r0, r0, r1
 800b618:	1c59      	adds	r1, r3, #1
 800b61a:	19db      	adds	r3, r3, r7
 800b61c:	f007 fc00 	bl	8012e20 <GUI_DrawGradientV>
 800b620:	686a      	ldr	r2, [r5, #4]
 800b622:	4d15      	ldr	r5, [pc, #84]	; (800b678 <PROGBAR_DrawSkinFlex+0x154>)
 800b624:	b91a      	cbnz	r2, 800b62e <PROGBAR_DrawSkinFlex+0x10a>
 800b626:	68ae      	ldr	r6, [r5, #8]
 800b628:	68ed      	ldr	r5, [r5, #12]
 800b62a:	2001      	movs	r0, #1
 800b62c:	e003      	b.n	800b636 <PROGBAR_DrawSkinFlex+0x112>
 800b62e:	69ae      	ldr	r6, [r5, #24]
 800b630:	69ed      	ldr	r5, [r5, #28]
 800b632:	2201      	movs	r2, #1
 800b634:	2000      	movs	r0, #0
 800b636:	6963      	ldr	r3, [r4, #20]
 800b638:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800b63c:	18f9      	adds	r1, r7, r3
 800b63e:	69a7      	ldr	r7, [r4, #24]
 800b640:	69e3      	ldr	r3, [r4, #28]
 800b642:	9600      	str	r6, [sp, #0]
 800b644:	9501      	str	r5, [sp, #4]
 800b646:	4470      	add	r0, lr
 800b648:	3101      	adds	r1, #1
 800b64a:	1aba      	subs	r2, r7, r2
 800b64c:	3b01      	subs	r3, #1
 800b64e:	f007 fbe7 	bl	8012e20 <GUI_DrawGradientV>
 800b652:	e00e      	b.n	800b672 <PROGBAR_DrawSkinFlex+0x14e>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b963      	cbnz	r3, 800b672 <PROGBAR_DrawSkinFlex+0x14e>
 800b658:	4907      	ldr	r1, [pc, #28]	; (800b678 <PROGBAR_DrawSkinFlex+0x154>)
 800b65a:	68ad      	ldr	r5, [r5, #8]
 800b65c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800b65e:	f007 f885 	bl	801276c <GUI_SetColor>
 800b662:	2002      	movs	r0, #2
 800b664:	f007 f84a 	bl	80126fc <GUI_SetTextMode>
 800b668:	4628      	mov	r0, r5
 800b66a:	6921      	ldr	r1, [r4, #16]
 800b66c:	6962      	ldr	r2, [r4, #20]
 800b66e:	f007 fe61 	bl	8013334 <GUI_DispStringAt>
 800b672:	2000      	movs	r0, #0
 800b674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b676:	bf00      	nop
 800b678:	200000f8 	.word	0x200000f8

0800b67c <_Create>:
 800b67c:	b530      	push	{r4, r5, lr}
 800b67e:	b08b      	sub	sp, #44	; 0x2c
 800b680:	4605      	mov	r5, r0
 800b682:	f008 fc39 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b686:	ab0a      	add	r3, sp, #40	; 0x28
 800b688:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800b68a:	f843 0d28 	str.w	r0, [r3, #-40]!
 800b68e:	4668      	mov	r0, sp
 800b690:	6894      	ldr	r4, [r2, #8]
 800b692:	f008 fc3f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b696:	2000      	movs	r0, #0
 800b698:	9002      	str	r0, [sp, #8]
 800b69a:	a80a      	add	r0, sp, #40	; 0x28
 800b69c:	6821      	ldr	r1, [r4, #0]
 800b69e:	f840 5d24 	str.w	r5, [r0, #-36]!
 800b6a2:	4788      	blx	r1
 800b6a4:	b00b      	add	sp, #44	; 0x2c
 800b6a6:	bd30      	pop	{r4, r5, pc}

0800b6a8 <_Paint>:
 800b6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6ac:	b093      	sub	sp, #76	; 0x4c
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	f008 fc22 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b6b4:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 800b6b8:	6e06      	ldr	r6, [r0, #96]	; 0x60
 800b6ba:	9000      	str	r0, [sp, #0]
 800b6bc:	f002 0101 	and.w	r1, r2, #1
 800b6c0:	9106      	str	r1, [sp, #24]
 800b6c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800b6c4:	f8d0 904c 	ldr.w	r9, [r0, #76]	; 0x4c
 800b6c8:	f000 f939 	bl	800b93e <PROGBAR__Value2Pos>
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	4668      	mov	r0, sp
 800b6d0:	f008 fc20 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b6d4:	f10d 0808 	add.w	r8, sp, #8
 800b6d8:	a806      	add	r0, sp, #24
 800b6da:	9011      	str	r0, [sp, #68]	; 0x44
 800b6dc:	4641      	mov	r1, r8
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f002 fb7d 	bl	800ddde <WM_GetClientRectEx>
 800b6e4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b6e8:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800b6ec:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800b6f0:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800b6f4:	930d      	str	r3, [sp, #52]	; 0x34
 800b6f6:	250b      	movs	r5, #11
 800b6f8:	950a      	str	r5, [sp, #40]	; 0x28
 800b6fa:	920e      	str	r2, [sp, #56]	; 0x38
 800b6fc:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6fe:	9010      	str	r0, [sp, #64]	; 0x40
 800b700:	9409      	str	r4, [sp, #36]	; 0x24
 800b702:	a809      	add	r0, sp, #36	; 0x24
 800b704:	47b0      	blx	r6
 800b706:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b70a:	ad04      	add	r5, sp, #16
 800b70c:	e885 0003 	stmia.w	r5, {r0, r1}
 800b710:	2201      	movs	r2, #1
 800b712:	4629      	mov	r1, r5
 800b714:	4628      	mov	r0, r5
 800b716:	f006 fb01 	bl	8011d1c <GUI__ReduceRect>
 800b71a:	4628      	mov	r0, r5
 800b71c:	f001 ff4c 	bl	800d5b8 <WM_SetUserClipRect>
 800b720:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 800b724:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800b728:	9906      	ldr	r1, [sp, #24]
 800b72a:	9409      	str	r4, [sp, #36]	; 0x24
 800b72c:	2305      	movs	r3, #5
 800b72e:	930a      	str	r3, [sp, #40]	; 0x28
 800b730:	900d      	str	r0, [sp, #52]	; 0x34
 800b732:	920e      	str	r2, [sp, #56]	; 0x38
 800b734:	b129      	cbz	r1, 800b742 <_Paint+0x9a>
 800b736:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800b73a:	19d2      	adds	r2, r2, r7
 800b73c:	910f      	str	r1, [sp, #60]	; 0x3c
 800b73e:	9210      	str	r2, [sp, #64]	; 0x40
 800b740:	e004      	b.n	800b74c <_Paint+0xa4>
 800b742:	19c3      	adds	r3, r0, r7
 800b744:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800b748:	930f      	str	r3, [sp, #60]	; 0x3c
 800b74a:	9010      	str	r0, [sp, #64]	; 0x40
 800b74c:	2300      	movs	r3, #0
 800b74e:	9307      	str	r3, [sp, #28]
 800b750:	a809      	add	r0, sp, #36	; 0x24
 800b752:	47b0      	blx	r6
 800b754:	9906      	ldr	r1, [sp, #24]
 800b756:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 800b75a:	b131      	cbz	r1, 800b76a <_Paint+0xc2>
 800b75c:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800b760:	900d      	str	r0, [sp, #52]	; 0x34
 800b762:	19cf      	adds	r7, r1, r7
 800b764:	3701      	adds	r7, #1
 800b766:	970e      	str	r7, [sp, #56]	; 0x38
 800b768:	e005      	b.n	800b776 <_Paint+0xce>
 800b76a:	19c2      	adds	r2, r0, r7
 800b76c:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800b770:	1c53      	adds	r3, r2, #1
 800b772:	930d      	str	r3, [sp, #52]	; 0x34
 800b774:	900e      	str	r0, [sp, #56]	; 0x38
 800b776:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800b77a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800b77e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b780:	2001      	movs	r0, #1
 800b782:	9310      	str	r3, [sp, #64]	; 0x40
 800b784:	9007      	str	r0, [sp, #28]
 800b786:	a809      	add	r0, sp, #36	; 0x24
 800b788:	47b0      	blx	r6
 800b78a:	4620      	mov	r0, r4
 800b78c:	f008 fbb4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b790:	9000      	str	r0, [sp, #0]
 800b792:	f000 f88e 	bl	800b8b2 <PROGBAR__GetTextLocked>
 800b796:	9001      	str	r0, [sp, #4]
 800b798:	b1f8      	cbz	r0, 800b7da <_Paint+0x132>
 800b79a:	4648      	mov	r0, r9
 800b79c:	f006 ffb8 	bl	8012710 <GUI_SetFont>
 800b7a0:	a902      	add	r1, sp, #8
 800b7a2:	9a01      	ldr	r2, [sp, #4]
 800b7a4:	9800      	ldr	r0, [sp, #0]
 800b7a6:	f000 f887 	bl	800b8b8 <PROGBAR__GetTextRect>
 800b7aa:	4668      	mov	r0, sp
 800b7ac:	f008 fbb2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b7b0:	9901      	ldr	r1, [sp, #4]
 800b7b2:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800b7b6:	9108      	str	r1, [sp, #32]
 800b7b8:	2212      	movs	r2, #18
 800b7ba:	920a      	str	r2, [sp, #40]	; 0x28
 800b7bc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b7c0:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800b7c4:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800b7c8:	900e      	str	r0, [sp, #56]	; 0x38
 800b7ca:	9409      	str	r4, [sp, #36]	; 0x24
 800b7cc:	930d      	str	r3, [sp, #52]	; 0x34
 800b7ce:	910f      	str	r1, [sp, #60]	; 0x3c
 800b7d0:	9210      	str	r2, [sp, #64]	; 0x40
 800b7d2:	a809      	add	r0, sp, #36	; 0x24
 800b7d4:	47b0      	blx	r6
 800b7d6:	a801      	add	r0, sp, #4
 800b7d8:	e000      	b.n	800b7dc <_Paint+0x134>
 800b7da:	4668      	mov	r0, sp
 800b7dc:	f008 fb9a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	f001 fee9 	bl	800d5b8 <WM_SetUserClipRect>
 800b7e6:	b013      	add	sp, #76	; 0x4c
 800b7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b7ec <PROGBAR_SetSkin>:
 800b7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	f008 fb81 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b7f6:	4906      	ldr	r1, [pc, #24]	; (800b810 <PROGBAR_SetSkin+0x24>)
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	a802      	add	r0, sp, #8
 800b7fc:	6651      	str	r1, [r2, #100]	; 0x64
 800b7fe:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b802:	6615      	str	r5, [r2, #96]	; 0x60
 800b804:	f008 fb86 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b808:	4620      	mov	r0, r4
 800b80a:	f002 ffdb 	bl	800e7c4 <WM_InvalidateWindow>
 800b80e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800b810:	20000120 	.word	0x20000120

0800b814 <PROGBAR_CreateAsChild>:
 800b814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b816:	9c06      	ldr	r4, [sp, #24]
 800b818:	9400      	str	r4, [sp, #0]
 800b81a:	9c08      	ldr	r4, [sp, #32]
 800b81c:	9401      	str	r4, [sp, #4]
 800b81e:	2400      	movs	r4, #0
 800b820:	9402      	str	r4, [sp, #8]
 800b822:	9c07      	ldr	r4, [sp, #28]
 800b824:	9403      	str	r4, [sp, #12]
 800b826:	f000 f90f 	bl	800ba48 <PROGBAR_CreateEx>
 800b82a:	b004      	add	sp, #16
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <_SetValue>:
 800b82e:	b513      	push	{r0, r1, r4, lr}
 800b830:	ab02      	add	r3, sp, #8
 800b832:	6342      	str	r2, [r0, #52]	; 0x34
 800b834:	f843 1d04 	str.w	r1, [r3, #-4]!
 800b838:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b83a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800b83c:	1a52      	subs	r2, r2, r1
 800b83e:	2464      	movs	r4, #100	; 0x64
 800b840:	4362      	muls	r2, r4
 800b842:	1a41      	subs	r1, r0, r1
 800b844:	fb92 f0f1 	sdiv	r0, r2, r1
 800b848:	4619      	mov	r1, r3
 800b84a:	f008 fdbc 	bl	80143c6 <GUI_AddDecMin>
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	2225      	movs	r2, #37	; 0x25
 800b852:	2000      	movs	r0, #0
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	7058      	strb	r0, [r3, #1]
 800b858:	bd1c      	pop	{r2, r3, r4, pc}

0800b85a <PROGBAR_Callback>:
 800b85a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b85c:	6845      	ldr	r5, [r0, #4]
 800b85e:	4604      	mov	r4, r0
 800b860:	4621      	mov	r1, r4
 800b862:	4628      	mov	r0, r5
 800b864:	f008 ff88 	bl	8014778 <WIDGET_HandleActive>
 800b868:	b310      	cbz	r0, 800b8b0 <PROGBAR_Callback+0x56>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	2b0b      	cmp	r3, #11
 800b86e:	d010      	beq.n	800b892 <PROGBAR_Callback+0x38>
 800b870:	2b0f      	cmp	r3, #15
 800b872:	d11a      	bne.n	800b8aa <PROGBAR_Callback+0x50>
 800b874:	4628      	mov	r0, r5
 800b876:	f008 fb3f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b87a:	a902      	add	r1, sp, #8
 800b87c:	f841 0d04 	str.w	r0, [r1, #-4]!
 800b880:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800b882:	6814      	ldr	r4, [r2, #0]
 800b884:	4608      	mov	r0, r1
 800b886:	f008 fb45 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b88a:	b18c      	cbz	r4, 800b8b0 <PROGBAR_Callback+0x56>
 800b88c:	4628      	mov	r0, r5
 800b88e:	47a0      	blx	r4
 800b890:	e00e      	b.n	800b8b0 <PROGBAR_Callback+0x56>
 800b892:	4628      	mov	r0, r5
 800b894:	f008 fb30 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b898:	ad02      	add	r5, sp, #8
 800b89a:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b89e:	3038      	adds	r0, #56	; 0x38
 800b8a0:	f008 fd7c 	bl	801439c <GUI_ALLOC_FreePtr>
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	f008 fb35 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f003 fbb4 	bl	800f018 <WM_DefaultProc>
 800b8b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b8b2 <PROGBAR__GetTextLocked>:
 800b8b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b8b4:	f008 bb20 	b.w	8013ef8 <GUI_ALLOC_LockH>

0800b8b8 <PROGBAR__GetTextRect>:
 800b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b8c0:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	1af8      	subs	r0, r7, r3
 800b8ca:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b8ce:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 800b8d2:	1c47      	adds	r7, r0, #1
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	ebc1 0608 	rsb	r6, r1, r8
 800b8da:	f007 f8e5 	bl	8012aa8 <GUI_GetStringDistX>
 800b8de:	f106 0801 	add.w	r8, r6, #1
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	f007 f8f8 	bl	8012ad8 <GUI_GetFontSizeY>
 800b8e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b8ea:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800b8ee:	6811      	ldr	r1, [r2, #0]
 800b8f0:	f003 0203 	and.w	r2, r3, #3
 800b8f4:	2a01      	cmp	r2, #1
 800b8f6:	d006      	beq.n	800b906 <PROGBAR__GetTextRect+0x4e>
 800b8f8:	2a02      	cmp	r2, #2
 800b8fa:	d109      	bne.n	800b910 <PROGBAR__GetTextRect+0x58>
 800b8fc:	1bbf      	subs	r7, r7, r6
 800b8fe:	fb97 f1f2 	sdiv	r1, r7, r2
 800b902:	8029      	strh	r1, [r5, #0]
 800b904:	e005      	b.n	800b912 <PROGBAR__GetTextRect+0x5a>
 800b906:	43cb      	mvns	r3, r1
 800b908:	19df      	adds	r7, r3, r7
 800b90a:	1bbf      	subs	r7, r7, r6
 800b90c:	802f      	strh	r7, [r5, #0]
 800b90e:	e000      	b.n	800b912 <PROGBAR__GetTextRect+0x5a>
 800b910:	8029      	strh	r1, [r5, #0]
 800b912:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800b914:	8829      	ldrh	r1, [r5, #0]
 800b916:	ebc0 0808 	rsb	r8, r0, r8
 800b91a:	1853      	adds	r3, r2, r1
 800b91c:	2102      	movs	r1, #2
 800b91e:	b29a      	uxth	r2, r3
 800b920:	fb98 f3f1 	sdiv	r3, r8, r1
 800b924:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800b926:	802a      	strh	r2, [r5, #0]
 800b928:	185b      	adds	r3, r3, r1
 800b92a:	b299      	uxth	r1, r3
 800b92c:	3a01      	subs	r2, #1
 800b92e:	3801      	subs	r0, #1
 800b930:	1996      	adds	r6, r2, r6
 800b932:	180b      	adds	r3, r1, r0
 800b934:	8069      	strh	r1, [r5, #2]
 800b936:	80ae      	strh	r6, [r5, #4]
 800b938:	80eb      	strh	r3, [r5, #6]
 800b93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b93e <PROGBAR__Value2Pos>:
 800b93e:	b570      	push	{r4, r5, r6, lr}
 800b940:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800b944:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b946:	f013 0601 	ands.w	r6, r3, #1
 800b94a:	bf15      	itete	ne
 800b94c:	f9b0 3002 	ldrshne.w	r3, [r0, #2]
 800b950:	f9b0 3000 	ldrsheq.w	r3, [r0]
 800b954:	f9b0 5006 	ldrshne.w	r5, [r0, #6]
 800b958:	f9b0 5004 	ldrsheq.w	r5, [r0, #4]
 800b95c:	6814      	ldr	r4, [r2, #0]
 800b95e:	1aed      	subs	r5, r5, r3
 800b960:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b962:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800b964:	3501      	adds	r5, #1
 800b966:	4299      	cmp	r1, r3
 800b968:	bfb8      	it	lt
 800b96a:	4619      	movlt	r1, r3
 800b96c:	4281      	cmp	r1, r0
 800b96e:	bfa8      	it	ge
 800b970:	4601      	movge	r1, r0
 800b972:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800b976:	b10e      	cbz	r6, 800b97c <PROGBAR__Value2Pos+0x3e>
 800b978:	1a41      	subs	r1, r0, r1
 800b97a:	e000      	b.n	800b97e <PROGBAR__Value2Pos+0x40>
 800b97c:	1ac9      	subs	r1, r1, r3
 800b97e:	1ac2      	subs	r2, r0, r3
 800b980:	4369      	muls	r1, r5
 800b982:	fb91 f3f2 	sdiv	r3, r1, r2
 800b986:	18e0      	adds	r0, r4, r3
 800b988:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b98c <PROGBAR_CreateUser>:
 800b98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b990:	b087      	sub	sp, #28
 800b992:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b994:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b996:	9400      	str	r4, [sp, #0]
 800b998:	4c27      	ldr	r4, [pc, #156]	; (800ba38 <PROGBAR_CreateUser+0xac>)
 800b99a:	9701      	str	r7, [sp, #4]
 800b99c:	9402      	str	r4, [sp, #8]
 800b99e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b9a0:	3440      	adds	r4, #64	; 0x40
 800b9a2:	9403      	str	r4, [sp, #12]
 800b9a4:	f002 ffca 	bl	800e93c <WM_CreateWindowAsChild>
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d040      	beq.n	800ba30 <PROGBAR_CreateUser+0xa4>
 800b9ae:	2005      	movs	r0, #5
 800b9b0:	f008 fd16 	bl	80143e0 <GUI_ALLOC_AllocZero>
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d03a      	beq.n	800ba30 <PROGBAR_CreateUser+0xa4>
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	f008 fa9c 	bl	8013ef8 <GUI_ALLOC_LockH>
 800b9c0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800ba44 <PROGBAR_CreateUser+0xb8>
 800b9c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b9c6:	9004      	str	r0, [sp, #16]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f008 fecd 	bl	8014768 <WIDGET__Init>
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	491a      	ldr	r1, [pc, #104]	; (800ba3c <PROGBAR_CreateUser+0xb0>)
 800b9d2:	4d1b      	ldr	r5, [pc, #108]	; (800ba40 <PROGBAR_CreateUser+0xb4>)
 800b9d4:	f008 fdf0 	bl	80145b8 <WIDGET_SetEffect>
 800b9d8:	9e04      	ldr	r6, [sp, #16]
 800b9da:	f8d9 3000 	ldr.w	r3, [r9]
 800b9de:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
 800b9e2:	6673      	str	r3, [r6, #100]	; 0x64
 800b9e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9e6:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 800b9ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b9f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9f2:	e884 0003 	stmia.w	r4, {r0, r1}
 800b9f6:	2164      	movs	r1, #100	; 0x64
 800b9f8:	2002      	movs	r0, #2
 800b9fa:	2400      	movs	r4, #0
 800b9fc:	f8a6 0040 	strh.w	r0, [r6, #64]	; 0x40
 800ba00:	64b1      	str	r1, [r6, #72]	; 0x48
 800ba02:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
 800ba06:	6474      	str	r4, [r6, #68]	; 0x44
 800ba08:	4640      	mov	r0, r8
 800ba0a:	f008 fa75 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ba0e:	4622      	mov	r2, r4
 800ba10:	4601      	mov	r1, r0
 800ba12:	9005      	str	r0, [sp, #20]
 800ba14:	9804      	ldr	r0, [sp, #16]
 800ba16:	f7ff ff0a 	bl	800b82e <_SetValue>
 800ba1a:	a805      	add	r0, sp, #20
 800ba1c:	f008 fa7a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ba20:	a804      	add	r0, sp, #16
 800ba22:	f008 fa77 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ba26:	f8d9 3000 	ldr.w	r3, [r9]
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	6859      	ldr	r1, [r3, #4]
 800ba2e:	4788      	blx	r1
 800ba30:	4638      	mov	r0, r7
 800ba32:	b007      	add	sp, #28
 800ba34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba38:	0800b85b 	.word	0x0800b85b
 800ba3c:	080342d8 	.word	0x080342d8
 800ba40:	20000130 	.word	0x20000130
 800ba44:	2000012c 	.word	0x2000012c

0800ba48 <PROGBAR_CreateEx>:
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	9c08      	ldr	r4, [sp, #32]
 800ba4e:	9400      	str	r4, [sp, #0]
 800ba50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ba52:	9401      	str	r4, [sp, #4]
 800ba54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba56:	9402      	str	r4, [sp, #8]
 800ba58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ba5a:	9403      	str	r4, [sp, #12]
 800ba5c:	2400      	movs	r4, #0
 800ba5e:	9404      	str	r4, [sp, #16]
 800ba60:	f7ff ff94 	bl	800b98c <PROGBAR_CreateUser>
 800ba64:	b006      	add	sp, #24
 800ba66:	bd10      	pop	{r4, pc}

0800ba68 <PROGBAR_SetValue>:
 800ba68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	b086      	sub	sp, #24
 800ba70:	4607      	mov	r7, r0
 800ba72:	2800      	cmp	r0, #0
 800ba74:	f000 809f 	beq.w	800bbb6 <PROGBAR_SetValue+0x14e>
 800ba78:	f008 fa3e 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ba7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ba7e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800ba80:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800ba82:	9000      	str	r0, [sp, #0]
 800ba84:	429d      	cmp	r5, r3
 800ba86:	bfb8      	it	lt
 800ba88:	461d      	movlt	r5, r3
 800ba8a:	428d      	cmp	r5, r1
 800ba8c:	bfa8      	it	ge
 800ba8e:	460d      	movge	r5, r1
 800ba90:	42ae      	cmp	r6, r5
 800ba92:	4604      	mov	r4, r0
 800ba94:	f000 808c 	beq.w	800bbb0 <PROGBAR_SetValue+0x148>
 800ba98:	f890 8068 	ldrb.w	r8, [r0, #104]	; 0x68
 800ba9c:	f018 0f01 	tst.w	r8, #1
 800baa0:	d01c      	beq.n	800badc <PROGBAR_SetValue+0x74>
 800baa2:	42b5      	cmp	r5, r6
 800baa4:	da07      	bge.n	800bab6 <PROGBAR_SetValue+0x4e>
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7ff ff49 	bl	800b93e <PROGBAR__Value2Pos>
 800baac:	4631      	mov	r1, r6
 800baae:	f8ad 000e 	strh.w	r0, [sp, #14]
 800bab2:	4620      	mov	r0, r4
 800bab4:	e006      	b.n	800bac4 <PROGBAR_SetValue+0x5c>
 800bab6:	4631      	mov	r1, r6
 800bab8:	f7ff ff41 	bl	800b93e <PROGBAR__Value2Pos>
 800babc:	4629      	mov	r1, r5
 800babe:	f8ad 000e 	strh.w	r0, [sp, #14]
 800bac2:	4620      	mov	r0, r4
 800bac4:	f7ff ff3b 	bl	800b93e <PROGBAR__Value2Pos>
 800bac8:	2200      	movs	r2, #0
 800baca:	f640 73ff 	movw	r3, #4095	; 0xfff
 800bace:	f8ad 000a 	strh.w	r0, [sp, #10]
 800bad2:	f8ad 2008 	strh.w	r2, [sp, #8]
 800bad6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bada:	e064      	b.n	800bba6 <PROGBAR_SetValue+0x13e>
 800badc:	42b5      	cmp	r5, r6
 800bade:	da07      	bge.n	800baf0 <PROGBAR_SetValue+0x88>
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7ff ff2c 	bl	800b93e <PROGBAR__Value2Pos>
 800bae6:	4631      	mov	r1, r6
 800bae8:	f8ad 0008 	strh.w	r0, [sp, #8]
 800baec:	4620      	mov	r0, r4
 800baee:	e006      	b.n	800bafe <PROGBAR_SetValue+0x96>
 800baf0:	4631      	mov	r1, r6
 800baf2:	f7ff ff24 	bl	800b93e <PROGBAR__Value2Pos>
 800baf6:	4629      	mov	r1, r5
 800baf8:	f8ad 0008 	strh.w	r0, [sp, #8]
 800bafc:	4620      	mov	r0, r4
 800bafe:	f7ff ff1e 	bl	800b93e <PROGBAR__Value2Pos>
 800bb02:	f008 0302 	and.w	r3, r8, #2
 800bb06:	f8ad 000c 	strh.w	r0, [sp, #12]
 800bb0a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800bb0e:	2000      	movs	r0, #0
 800bb10:	b2d9      	uxtb	r1, r3
 800bb12:	f8ad 000a 	strh.w	r0, [sp, #10]
 800bb16:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bb1a:	2900      	cmp	r1, #0
 800bb1c:	d143      	bne.n	800bba6 <PROGBAR_SetValue+0x13e>
 800bb1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bb20:	9104      	str	r1, [sp, #16]
 800bb22:	9105      	str	r1, [sp, #20]
 800bb24:	f008 fa16 	bl	8013f54 <GUI_ALLOC_GetSize>
 800bb28:	2804      	cmp	r0, #4
 800bb2a:	dc10      	bgt.n	800bb4e <PROGBAR_SetValue+0xe6>
 800bb2c:	ac06      	add	r4, sp, #24
 800bb2e:	f854 0d18 	ldr.w	r0, [r4, #-24]!
 800bb32:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800bb34:	4668      	mov	r0, sp
 800bb36:	f008 f9ed 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	2105      	movs	r1, #5
 800bb3e:	f006 fe8c 	bl	801285a <GUI_ALLOC_Realloc>
 800bb42:	4604      	mov	r4, r0
 800bb44:	4638      	mov	r0, r7
 800bb46:	f008 f9d7 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bb4a:	9000      	str	r0, [sp, #0]
 800bb4c:	6384      	str	r4, [r0, #56]	; 0x38
 800bb4e:	9800      	ldr	r0, [sp, #0]
 800bb50:	f7ff feaf 	bl	800b8b2 <PROGBAR__GetTextLocked>
 800bb54:	9001      	str	r0, [sp, #4]
 800bb56:	b338      	cbz	r0, 800bba8 <PROGBAR_SetValue+0x140>
 800bb58:	9e00      	ldr	r6, [sp, #0]
 800bb5a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800bb5c:	f006 fdd8 	bl	8012710 <GUI_SetFont>
 800bb60:	a904      	add	r1, sp, #16
 800bb62:	4606      	mov	r6, r0
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	9800      	ldr	r0, [sp, #0]
 800bb68:	f7ff fea6 	bl	800b8b8 <PROGBAR__GetTextRect>
 800bb6c:	a802      	add	r0, sp, #8
 800bb6e:	aa04      	add	r2, sp, #16
 800bb70:	ac06      	add	r4, sp, #24
 800bb72:	4601      	mov	r1, r0
 800bb74:	f006 ff60 	bl	8012a38 <GUI_MergeRect>
 800bb78:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800bb7c:	462a      	mov	r2, r5
 800bb7e:	f7ff fe56 	bl	800b82e <_SetValue>
 800bb82:	f854 2d14 	ldr.w	r2, [r4, #-20]!
 800bb86:	9800      	ldr	r0, [sp, #0]
 800bb88:	a904      	add	r1, sp, #16
 800bb8a:	f7ff fe95 	bl	800b8b8 <PROGBAR__GetTextRect>
 800bb8e:	a802      	add	r0, sp, #8
 800bb90:	4601      	mov	r1, r0
 800bb92:	aa04      	add	r2, sp, #16
 800bb94:	f006 ff50 	bl	8012a38 <GUI_MergeRect>
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f006 fdb9 	bl	8012710 <GUI_SetFont>
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f008 f9b8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bba4:	e000      	b.n	800bba8 <PROGBAR_SetValue+0x140>
 800bba6:	6365      	str	r5, [r4, #52]	; 0x34
 800bba8:	4638      	mov	r0, r7
 800bbaa:	a902      	add	r1, sp, #8
 800bbac:	f002 fdce 	bl	800e74c <WM_InvalidateRect>
 800bbb0:	4668      	mov	r0, sp
 800bbb2:	f008 f9af 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bbb6:	b006      	add	sp, #24
 800bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbbc <GUI_ARRAY__GethItem>:
 800bbbc:	8803      	ldrh	r3, [r0, #0]
 800bbbe:	4299      	cmp	r1, r3
 800bbc0:	b513      	push	{r0, r1, r4, lr}
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	d20e      	bcs.n	800bbe4 <GUI_ARRAY__GethItem+0x28>
 800bbc6:	6840      	ldr	r0, [r0, #4]
 800bbc8:	b150      	cbz	r0, 800bbe0 <GUI_ARRAY__GethItem+0x24>
 800bbca:	f008 f995 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bbce:	a902      	add	r1, sp, #8
 800bbd0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800bbd4:	f841 0d04 	str.w	r0, [r1, #-4]!
 800bbd8:	4608      	mov	r0, r1
 800bbda:	f008 f99b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bbde:	e002      	b.n	800bbe6 <GUI_ARRAY__GethItem+0x2a>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	e000      	b.n	800bbe6 <GUI_ARRAY__GethItem+0x2a>
 800bbe4:	2400      	movs	r4, #0
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	bd1c      	pop	{r2, r3, r4, pc}

0800bbea <GUI_ARRAY__GetpItemLocked>:
 800bbea:	b508      	push	{r3, lr}
 800bbec:	f7ff ffe6 	bl	800bbbc <GUI_ARRAY__GethItem>
 800bbf0:	b118      	cbz	r0, 800bbfa <GUI_ARRAY__GetpItemLocked+0x10>
 800bbf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bbf6:	f008 b97f 	b.w	8013ef8 <GUI_ALLOC_LockH>
 800bbfa:	bd08      	pop	{r3, pc}

0800bbfc <GUI_ARRAY_GetNumItems>:
 800bbfc:	b513      	push	{r0, r1, r4, lr}
 800bbfe:	4604      	mov	r4, r0
 800bc00:	b140      	cbz	r0, 800bc14 <GUI_ARRAY_GetNumItems+0x18>
 800bc02:	f008 f979 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bc06:	ab02      	add	r3, sp, #8
 800bc08:	8804      	ldrh	r4, [r0, #0]
 800bc0a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f008 f980 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bc14:	4620      	mov	r0, r4
 800bc16:	bd1c      	pop	{r2, r3, r4, pc}

0800bc18 <GUI_ARRAY_AddItem>:
 800bc18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d03d      	beq.n	800bc9e <GUI_ARRAY_AddItem+0x86>
 800bc22:	b14a      	cbz	r2, 800bc38 <GUI_ARRAY_AddItem+0x20>
 800bc24:	4608      	mov	r0, r1
 800bc26:	4611      	mov	r1, r2
 800bc28:	f008 fbee 	bl	8014408 <GUI_ALLOC_AllocInit>
 800bc2c:	f1d0 0401 	rsbs	r4, r0, #1
 800bc30:	4607      	mov	r7, r0
 800bc32:	bf38      	it	cc
 800bc34:	2400      	movcc	r4, #0
 800bc36:	e001      	b.n	800bc3c <GUI_ARRAY_AddItem+0x24>
 800bc38:	4614      	mov	r4, r2
 800bc3a:	4617      	mov	r7, r2
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f008 f95b 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bc42:	ae02      	add	r6, sp, #8
 800bc44:	f8b0 8000 	ldrh.w	r8, [r0]
 800bc48:	f846 0d08 	str.w	r0, [r6, #-8]!
 800bc4c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800bc50:	4668      	mov	r0, sp
 800bc52:	f008 f95f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bc56:	bb24      	cbnz	r4, 800bca2 <GUI_ARRAY_AddItem+0x8a>
 800bc58:	f108 0101 	add.w	r1, r8, #1
 800bc5c:	4648      	mov	r0, r9
 800bc5e:	0089      	lsls	r1, r1, #2
 800bc60:	f006 fdfb 	bl	801285a <GUI_ALLOC_Realloc>
 800bc64:	4681      	mov	r9, r0
 800bc66:	b918      	cbnz	r0, 800bc70 <GUI_ARRAY_AddItem+0x58>
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f008 f97f 	bl	8013f6c <GUI_ALLOC_Free>
 800bc6e:	e018      	b.n	800bca2 <GUI_ARRAY_AddItem+0x8a>
 800bc70:	f008 f942 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bc74:	ab02      	add	r3, sp, #8
 800bc76:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bc7a:	f840 7028 	str.w	r7, [r0, r8, lsl #2]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f008 f948 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bc84:	4628      	mov	r0, r5
 800bc86:	f008 f937 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bc8a:	8802      	ldrh	r2, [r0, #0]
 800bc8c:	9000      	str	r0, [sp, #0]
 800bc8e:	1c51      	adds	r1, r2, #1
 800bc90:	f8c0 9004 	str.w	r9, [r0, #4]
 800bc94:	8001      	strh	r1, [r0, #0]
 800bc96:	4668      	mov	r0, sp
 800bc98:	f008 f93c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bc9c:	e002      	b.n	800bca4 <GUI_ARRAY_AddItem+0x8c>
 800bc9e:	4604      	mov	r4, r0
 800bca0:	e000      	b.n	800bca4 <GUI_ARRAY_AddItem+0x8c>
 800bca2:	2401      	movs	r4, #1
 800bca4:	4620      	mov	r0, r4
 800bca6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800bcaa <GUI_ARRAY_Delete>:
 800bcaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcac:	4605      	mov	r5, r0
 800bcae:	b318      	cbz	r0, 800bcf8 <GUI_ARRAY_Delete+0x4e>
 800bcb0:	f008 f922 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bcb4:	9000      	str	r0, [sp, #0]
 800bcb6:	6840      	ldr	r0, [r0, #4]
 800bcb8:	b1c0      	cbz	r0, 800bcec <GUI_ARRAY_Delete+0x42>
 800bcba:	f008 f91d 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bcbe:	2400      	movs	r4, #0
 800bcc0:	9001      	str	r0, [sp, #4]
 800bcc2:	9b00      	ldr	r3, [sp, #0]
 800bcc4:	8818      	ldrh	r0, [r3, #0]
 800bcc6:	4284      	cmp	r4, r0
 800bcc8:	da06      	bge.n	800bcd8 <GUI_ARRAY_Delete+0x2e>
 800bcca:	9801      	ldr	r0, [sp, #4]
 800bccc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800bcd0:	f008 fb64 	bl	801439c <GUI_ALLOC_FreePtr>
 800bcd4:	3401      	adds	r4, #1
 800bcd6:	e7f4      	b.n	800bcc2 <GUI_ARRAY_Delete+0x18>
 800bcd8:	a801      	add	r0, sp, #4
 800bcda:	f008 f91b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bcde:	9900      	ldr	r1, [sp, #0]
 800bce0:	1d08      	adds	r0, r1, #4
 800bce2:	f008 fb5b 	bl	801439c <GUI_ALLOC_FreePtr>
 800bce6:	9b00      	ldr	r3, [sp, #0]
 800bce8:	2200      	movs	r2, #0
 800bcea:	801a      	strh	r2, [r3, #0]
 800bcec:	4668      	mov	r0, sp
 800bcee:	f008 f911 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f008 f93a 	bl	8013f6c <GUI_ALLOC_Free>
 800bcf8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800bcfa <GUI_ARRAY_SetItem>:
 800bcfa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcfe:	460d      	mov	r5, r1
 800bd00:	4691      	mov	r9, r2
 800bd02:	461e      	mov	r6, r3
 800bd04:	b908      	cbnz	r0, 800bd0a <GUI_ARRAY_SetItem+0x10>
 800bd06:	2400      	movs	r4, #0
 800bd08:	e045      	b.n	800bd96 <GUI_ARRAY_SetItem+0x9c>
 800bd0a:	f008 f8f5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bd0e:	ab04      	add	r3, sp, #16
 800bd10:	8804      	ldrh	r4, [r0, #0]
 800bd12:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800bd16:	6847      	ldr	r7, [r0, #4]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f008 f8fb 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bd1e:	42a5      	cmp	r5, r4
 800bd20:	d2f1      	bcs.n	800bd06 <GUI_ARRAY_SetItem+0xc>
 800bd22:	2f00      	cmp	r7, #0
 800bd24:	d0ef      	beq.n	800bd06 <GUI_ARRAY_SetItem+0xc>
 800bd26:	4638      	mov	r0, r7
 800bd28:	f008 f8e6 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bd2c:	a904      	add	r1, sp, #16
 800bd2e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 800bd32:	f841 0d08 	str.w	r0, [r1, #-8]!
 800bd36:	4608      	mov	r0, r1
 800bd38:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800bd3c:	f008 f8ea 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bd40:	b124      	cbz	r4, 800bd4c <GUI_ARRAY_SetItem+0x52>
 800bd42:	4620      	mov	r0, r4
 800bd44:	f008 f906 	bl	8013f54 <GUI_ALLOC_GetSize>
 800bd48:	42b0      	cmp	r0, r6
 800bd4a:	d014      	beq.n	800bd76 <GUI_ARRAY_SetItem+0x7c>
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f008 fb47 	bl	80143e0 <GUI_ALLOC_AllocZero>
 800bd52:	4604      	mov	r4, r0
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d0d6      	beq.n	800bd06 <GUI_ARRAY_SetItem+0xc>
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f008 f8cd 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bd5e:	af04      	add	r7, sp, #16
 800bd60:	4680      	mov	r8, r0
 800bd62:	f847 0d08 	str.w	r0, [r7, #-8]!
 800bd66:	4450      	add	r0, sl
 800bd68:	f008 fb18 	bl	801439c <GUI_ALLOC_FreePtr>
 800bd6c:	f848 4025 	str.w	r4, [r8, r5, lsl #2]
 800bd70:	4638      	mov	r0, r7
 800bd72:	f008 f8cf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bd76:	f1b9 0f00 	cmp.w	r9, #0
 800bd7a:	d00c      	beq.n	800bd96 <GUI_ARRAY_SetItem+0x9c>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f008 f8bb 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bd82:	ad04      	add	r5, sp, #16
 800bd84:	4649      	mov	r1, r9
 800bd86:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	f7f5 f942 	bl	8001014 <memcpy>
 800bd90:	4628      	mov	r0, r5
 800bd92:	f008 f8bf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bd96:	4620      	mov	r0, r4
 800bd98:	b004      	add	sp, #16
 800bd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bd9e <GUI_ARRAY_GetpItemLocked>:
 800bd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bda0:	460e      	mov	r6, r1
 800bda2:	4605      	mov	r5, r0
 800bda4:	b158      	cbz	r0, 800bdbe <GUI_ARRAY_GetpItemLocked+0x20>
 800bda6:	f008 f8a7 	bl	8013ef8 <GUI_ALLOC_LockH>
 800bdaa:	ac02      	add	r4, sp, #8
 800bdac:	4631      	mov	r1, r6
 800bdae:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bdb2:	f7ff ff1a 	bl	800bbea <GUI_ARRAY__GetpItemLocked>
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f008 f8ab 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800bdc2 <GUI_ARRAY_Create>:
 800bdc2:	2008      	movs	r0, #8
 800bdc4:	f008 bb0c 	b.w	80143e0 <GUI_ALLOC_AllocZero>

0800bdc8 <FRAMEWIN_DrawSkinFlex>:
 800bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdcc:	4604      	mov	r4, r0
 800bdce:	b092      	sub	sp, #72	; 0x48
 800bdd0:	6800      	ldr	r0, [r0, #0]
 800bdd2:	4d9b      	ldr	r5, [pc, #620]	; (800c040 <FRAMEWIN_DrawSkinFlex+0x278>)
 800bdd4:	f000 faba 	bl	800c34c <FRAMEWIN_GetActive>
 800bdd8:	4b9a      	ldr	r3, [pc, #616]	; (800c044 <FRAMEWIN_DrawSkinFlex+0x27c>)
 800bdda:	2800      	cmp	r0, #0
 800bddc:	bf18      	it	ne
 800bdde:	461d      	movne	r5, r3
 800bde0:	6860      	ldr	r0, [r4, #4]
 800bde2:	281c      	cmp	r0, #28
 800bde4:	f200 81a5 	bhi.w	800c132 <FRAMEWIN_DrawSkinFlex+0x36a>
 800bde8:	e8df f010 	tbh	[pc, r0, lsl #1]
 800bdec:	01a30191 	.word	0x01a30191
 800bdf0:	01a301a3 	.word	0x01a301a3
 800bdf4:	012e01a3 	.word	0x012e01a3
 800bdf8:	01a301a3 	.word	0x01a301a3
 800bdfc:	01a301a3 	.word	0x01a301a3
 800be00:	002701a3 	.word	0x002701a3
 800be04:	01a301a3 	.word	0x01a301a3
 800be08:	01a3017e 	.word	0x01a3017e
 800be0c:	01a301a3 	.word	0x01a301a3
 800be10:	01a30145 	.word	0x01a30145
 800be14:	002301a3 	.word	0x002301a3
 800be18:	001f001d 	.word	0x001f001d
 800be1c:	01a30021 	.word	0x01a30021
 800be20:	01a301a3 	.word	0x01a301a3
 800be24:	0025      	.short	0x0025
 800be26:	69e8      	ldr	r0, [r5, #28]
 800be28:	e188      	b.n	800c13c <FRAMEWIN_DrawSkinFlex+0x374>
 800be2a:	6a28      	ldr	r0, [r5, #32]
 800be2c:	e186      	b.n	800c13c <FRAMEWIN_DrawSkinFlex+0x374>
 800be2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800be30:	e184      	b.n	800c13c <FRAMEWIN_DrawSkinFlex+0x374>
 800be32:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800be34:	e182      	b.n	800c13c <FRAMEWIN_DrawSkinFlex+0x374>
 800be36:	6968      	ldr	r0, [r5, #20]
 800be38:	e180      	b.n	800c13c <FRAMEWIN_DrawSkinFlex+0x374>
 800be3a:	6820      	ldr	r0, [r4, #0]
 800be3c:	261c      	movs	r6, #28
 800be3e:	960a      	str	r6, [sp, #40]	; 0x28
 800be40:	9009      	str	r0, [sp, #36]	; 0x24
 800be42:	f008 f859 	bl	8013ef8 <GUI_ALLOC_LockH>
 800be46:	9005      	str	r0, [sp, #20]
 800be48:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800be4a:	a809      	add	r0, sp, #36	; 0x24
 800be4c:	47b8      	blx	r7
 800be4e:	4606      	mov	r6, r0
 800be50:	a805      	add	r0, sp, #20
 800be52:	f008 f85f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800be56:	2e01      	cmp	r6, #1
 800be58:	dd11      	ble.n	800be7e <FRAMEWIN_DrawSkinFlex+0xb6>
 800be5a:	6828      	ldr	r0, [r5, #0]
 800be5c:	9000      	str	r0, [sp, #0]
 800be5e:	686a      	ldr	r2, [r5, #4]
 800be60:	9201      	str	r2, [sp, #4]
 800be62:	68a9      	ldr	r1, [r5, #8]
 800be64:	9102      	str	r1, [sp, #8]
 800be66:	4633      	mov	r3, r6
 800be68:	6920      	ldr	r0, [r4, #16]
 800be6a:	69a1      	ldr	r1, [r4, #24]
 800be6c:	6962      	ldr	r2, [r4, #20]
 800be6e:	f006 f853 	bl	8011f18 <GUI__DrawTwinArc2>
 800be72:	6923      	ldr	r3, [r4, #16]
 800be74:	69a7      	ldr	r7, [r4, #24]
 800be76:	eb06 0803 	add.w	r8, r6, r3
 800be7a:	1bbf      	subs	r7, r7, r6
 800be7c:	e02c      	b.n	800bed8 <FRAMEWIN_DrawSkinFlex+0x110>
 800be7e:	6828      	ldr	r0, [r5, #0]
 800be80:	f006 fc74 	bl	801276c <GUI_SetColor>
 800be84:	6921      	ldr	r1, [r4, #16]
 800be86:	69e8      	ldr	r0, [r5, #28]
 800be88:	180a      	adds	r2, r1, r0
 800be8a:	3a01      	subs	r2, #1
 800be8c:	6960      	ldr	r0, [r4, #20]
 800be8e:	f006 feb7 	bl	8012c00 <GUI_DrawHLine>
 800be92:	69a2      	ldr	r2, [r4, #24]
 800be94:	69e9      	ldr	r1, [r5, #28]
 800be96:	6960      	ldr	r0, [r4, #20]
 800be98:	1a53      	subs	r3, r2, r1
 800be9a:	1c59      	adds	r1, r3, #1
 800be9c:	f006 feb0 	bl	8012c00 <GUI_DrawHLine>
 800bea0:	6967      	ldr	r7, [r4, #20]
 800bea2:	6920      	ldr	r0, [r4, #16]
 800bea4:	3701      	adds	r7, #1
 800bea6:	4639      	mov	r1, r7
 800bea8:	f006 fe88 	bl	8012bbc <GUI_DrawPixel>
 800beac:	4639      	mov	r1, r7
 800beae:	69a0      	ldr	r0, [r4, #24]
 800beb0:	f006 fe84 	bl	8012bbc <GUI_DrawPixel>
 800beb4:	6868      	ldr	r0, [r5, #4]
 800beb6:	f006 fc59 	bl	801276c <GUI_SetColor>
 800beba:	6920      	ldr	r0, [r4, #16]
 800bebc:	4639      	mov	r1, r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f006 fe7c 	bl	8012bbc <GUI_DrawPixel>
 800bec4:	69a2      	ldr	r2, [r4, #24]
 800bec6:	4639      	mov	r1, r7
 800bec8:	1e50      	subs	r0, r2, #1
 800beca:	f006 fe77 	bl	8012bbc <GUI_DrawPixel>
 800bece:	6921      	ldr	r1, [r4, #16]
 800bed0:	69a3      	ldr	r3, [r4, #24]
 800bed2:	f101 0802 	add.w	r8, r1, #2
 800bed6:	1e9f      	subs	r7, r3, #2
 800bed8:	6828      	ldr	r0, [r5, #0]
 800beda:	f006 fc47 	bl	801276c <GUI_SetColor>
 800bede:	4641      	mov	r1, r8
 800bee0:	463a      	mov	r2, r7
 800bee2:	6960      	ldr	r0, [r4, #20]
 800bee4:	f006 fe8c 	bl	8012c00 <GUI_DrawHLine>
 800bee8:	6868      	ldr	r0, [r5, #4]
 800beea:	f006 fc3f 	bl	801276c <GUI_SetColor>
 800beee:	6960      	ldr	r0, [r4, #20]
 800bef0:	463a      	mov	r2, r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	4641      	mov	r1, r8
 800bef6:	f006 fe83 	bl	8012c00 <GUI_DrawHLine>
 800befa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800befc:	2a02      	cmp	r2, #2
 800befe:	dd0a      	ble.n	800bf16 <FRAMEWIN_DrawSkinFlex+0x14e>
 800bf00:	68a8      	ldr	r0, [r5, #8]
 800bf02:	f006 fc33 	bl	801276c <GUI_SetColor>
 800bf06:	6962      	ldr	r2, [r4, #20]
 800bf08:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800bf0a:	1853      	adds	r3, r2, r1
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	1c91      	adds	r1, r2, #2
 800bf10:	3b01      	subs	r3, #1
 800bf12:	463a      	mov	r2, r7
 800bf14:	e01d      	b.n	800bf52 <FRAMEWIN_DrawSkinFlex+0x18a>
 800bf16:	6a29      	ldr	r1, [r5, #32]
 800bf18:	42b1      	cmp	r1, r6
 800bf1a:	dd1c      	ble.n	800bf56 <FRAMEWIN_DrawSkinFlex+0x18e>
 800bf1c:	6967      	ldr	r7, [r4, #20]
 800bf1e:	6923      	ldr	r3, [r4, #16]
 800bf20:	2e01      	cmp	r6, #1
 800bf22:	f107 0802 	add.w	r8, r7, #2
 800bf26:	f340 8106 	ble.w	800c136 <FRAMEWIN_DrawSkinFlex+0x36e>
 800bf2a:	19bf      	adds	r7, r7, r6
 800bf2c:	18f0      	adds	r0, r6, r3
 800bf2e:	18ca      	adds	r2, r1, r3
 800bf30:	3a01      	subs	r2, #1
 800bf32:	4641      	mov	r1, r8
 800bf34:	463b      	mov	r3, r7
 800bf36:	f006 fde1 	bl	8012afc <GUI_FillRect>
 800bf3a:	69a1      	ldr	r1, [r4, #24]
 800bf3c:	69e8      	ldr	r0, [r5, #28]
 800bf3e:	2e01      	cmp	r6, #1
 800bf40:	ebc0 0301 	rsb	r3, r0, r1
 800bf44:	bfcc      	ite	gt
 800bf46:	ebc6 0201 	rsbgt	r2, r6, r1
 800bf4a:	1e8a      	suble	r2, r1, #2
 800bf4c:	1c58      	adds	r0, r3, #1
 800bf4e:	4641      	mov	r1, r8
 800bf50:	463b      	mov	r3, r7
 800bf52:	f006 fdd3 	bl	8012afc <GUI_FillRect>
 800bf56:	6967      	ldr	r7, [r4, #20]
 800bf58:	69e0      	ldr	r0, [r4, #28]
 800bf5a:	2e01      	cmp	r6, #1
 800bf5c:	bfcc      	ite	gt
 800bf5e:	19f6      	addgt	r6, r6, r7
 800bf60:	1cbe      	addle	r6, r7, #2
 800bf62:	1e47      	subs	r7, r0, #1
 800bf64:	6828      	ldr	r0, [r5, #0]
 800bf66:	f006 fc01 	bl	801276c <GUI_SetColor>
 800bf6a:	463a      	mov	r2, r7
 800bf6c:	6920      	ldr	r0, [r4, #16]
 800bf6e:	4631      	mov	r1, r6
 800bf70:	f006 fe04 	bl	8012b7c <GUI_DrawVLine>
 800bf74:	4631      	mov	r1, r6
 800bf76:	463a      	mov	r2, r7
 800bf78:	69a0      	ldr	r0, [r4, #24]
 800bf7a:	f006 fdff 	bl	8012b7c <GUI_DrawVLine>
 800bf7e:	69e2      	ldr	r2, [r4, #28]
 800bf80:	6868      	ldr	r0, [r5, #4]
 800bf82:	1e97      	subs	r7, r2, #2
 800bf84:	f006 fbf2 	bl	801276c <GUI_SetColor>
 800bf88:	6921      	ldr	r1, [r4, #16]
 800bf8a:	463a      	mov	r2, r7
 800bf8c:	1c48      	adds	r0, r1, #1
 800bf8e:	4631      	mov	r1, r6
 800bf90:	f006 fdf4 	bl	8012b7c <GUI_DrawVLine>
 800bf94:	69a3      	ldr	r3, [r4, #24]
 800bf96:	4631      	mov	r1, r6
 800bf98:	1e58      	subs	r0, r3, #1
 800bf9a:	463a      	mov	r2, r7
 800bf9c:	f006 fdee 	bl	8012b7c <GUI_DrawVLine>
 800bfa0:	69e8      	ldr	r0, [r5, #28]
 800bfa2:	2802      	cmp	r0, #2
 800bfa4:	dc02      	bgt.n	800bfac <FRAMEWIN_DrawSkinFlex+0x1e4>
 800bfa6:	6a2a      	ldr	r2, [r5, #32]
 800bfa8:	2a02      	cmp	r2, #2
 800bfaa:	dd20      	ble.n	800bfee <FRAMEWIN_DrawSkinFlex+0x226>
 800bfac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800bfae:	69e7      	ldr	r7, [r4, #28]
 800bfb0:	68a8      	ldr	r0, [r5, #8]
 800bfb2:	2902      	cmp	r1, #2
 800bfb4:	bfcc      	ite	gt
 800bfb6:	ebc1 0707 	rsbgt	r7, r1, r7
 800bfba:	3f02      	suble	r7, #2
 800bfbc:	f006 fbd6 	bl	801276c <GUI_SetColor>
 800bfc0:	69eb      	ldr	r3, [r5, #28]
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	dd07      	ble.n	800bfd6 <FRAMEWIN_DrawSkinFlex+0x20e>
 800bfc6:	6920      	ldr	r0, [r4, #16]
 800bfc8:	18c2      	adds	r2, r0, r3
 800bfca:	4631      	mov	r1, r6
 800bfcc:	3002      	adds	r0, #2
 800bfce:	3a01      	subs	r2, #1
 800bfd0:	463b      	mov	r3, r7
 800bfd2:	f006 fd93 	bl	8012afc <GUI_FillRect>
 800bfd6:	6a29      	ldr	r1, [r5, #32]
 800bfd8:	2902      	cmp	r1, #2
 800bfda:	dd08      	ble.n	800bfee <FRAMEWIN_DrawSkinFlex+0x226>
 800bfdc:	69a3      	ldr	r3, [r4, #24]
 800bfde:	69e8      	ldr	r0, [r5, #28]
 800bfe0:	1a1a      	subs	r2, r3, r0
 800bfe2:	1c50      	adds	r0, r2, #1
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	1e9a      	subs	r2, r3, #2
 800bfe8:	463b      	mov	r3, r7
 800bfea:	f006 fd87 	bl	8012afc <GUI_FillRect>
 800bfee:	6828      	ldr	r0, [r5, #0]
 800bff0:	f006 fbbc 	bl	801276c <GUI_SetColor>
 800bff4:	6921      	ldr	r1, [r4, #16]
 800bff6:	69a2      	ldr	r2, [r4, #24]
 800bff8:	69e0      	ldr	r0, [r4, #28]
 800bffa:	f006 fe01 	bl	8012c00 <GUI_DrawHLine>
 800bffe:	6868      	ldr	r0, [r5, #4]
 800c000:	f006 fbb4 	bl	801276c <GUI_SetColor>
 800c004:	69e6      	ldr	r6, [r4, #28]
 800c006:	6921      	ldr	r1, [r4, #16]
 800c008:	69a3      	ldr	r3, [r4, #24]
 800c00a:	1e70      	subs	r0, r6, #1
 800c00c:	3101      	adds	r1, #1
 800c00e:	1e5a      	subs	r2, r3, #1
 800c010:	f006 fdf6 	bl	8012c00 <GUI_DrawHLine>
 800c014:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800c016:	2e02      	cmp	r6, #2
 800c018:	f340 808b 	ble.w	800c132 <FRAMEWIN_DrawSkinFlex+0x36a>
 800c01c:	6927      	ldr	r7, [r4, #16]
 800c01e:	69a0      	ldr	r0, [r4, #24]
 800c020:	69e4      	ldr	r4, [r4, #28]
 800c022:	f107 0802 	add.w	r8, r7, #2
 800c026:	1e87      	subs	r7, r0, #2
 800c028:	68a8      	ldr	r0, [r5, #8]
 800c02a:	f006 fb9f 	bl	801276c <GUI_SetColor>
 800c02e:	1ba2      	subs	r2, r4, r6
 800c030:	1c51      	adds	r1, r2, #1
 800c032:	4640      	mov	r0, r8
 800c034:	463a      	mov	r2, r7
 800c036:	1ea3      	subs	r3, r4, #2
 800c038:	f006 fd60 	bl	8012afc <GUI_FillRect>
 800c03c:	e079      	b.n	800c132 <FRAMEWIN_DrawSkinFlex+0x36a>
 800c03e:	bf00      	nop
 800c040:	20000174 	.word	0x20000174
 800c044:	20000148 	.word	0x20000148
 800c048:	8a20      	ldrh	r0, [r4, #16]
 800c04a:	8aa1      	ldrh	r1, [r4, #20]
 800c04c:	8b22      	ldrh	r2, [r4, #24]
 800c04e:	8ba3      	ldrh	r3, [r4, #28]
 800c050:	68ec      	ldr	r4, [r5, #12]
 800c052:	f8ad 001c 	strh.w	r0, [sp, #28]
 800c056:	9400      	str	r4, [sp, #0]
 800c058:	692c      	ldr	r4, [r5, #16]
 800c05a:	f8ad 101e 	strh.w	r1, [sp, #30]
 800c05e:	f8ad 2020 	strh.w	r2, [sp, #32]
 800c062:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c066:	9401      	str	r4, [sp, #4]
 800c068:	b200      	sxth	r0, r0
 800c06a:	b209      	sxth	r1, r1
 800c06c:	b212      	sxth	r2, r2
 800c06e:	b21b      	sxth	r3, r3
 800c070:	f006 fed6 	bl	8012e20 <GUI_DrawGradientV>
 800c074:	e05d      	b.n	800c132 <FRAMEWIN_DrawSkinFlex+0x36a>
 800c076:	8b29      	ldrh	r1, [r5, #24]
 800c078:	6922      	ldr	r2, [r4, #16]
 800c07a:	6960      	ldr	r0, [r4, #20]
 800c07c:	188b      	adds	r3, r1, r2
 800c07e:	69a2      	ldr	r2, [r4, #24]
 800c080:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c084:	69e3      	ldr	r3, [r4, #28]
 800c086:	f8ad 001e 	strh.w	r0, [sp, #30]
 800c08a:	1a51      	subs	r1, r2, r1
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	f8ad 1020 	strh.w	r1, [sp, #32]
 800c092:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c096:	f007 ff2f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c09a:	9005      	str	r0, [sp, #20]
 800c09c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800c09e:	b1f8      	cbz	r0, 800c0e0 <FRAMEWIN_DrawSkinFlex+0x318>
 800c0a0:	2002      	movs	r0, #2
 800c0a2:	f006 fb2b 	bl	80126fc <GUI_SetTextMode>
 800c0a6:	9905      	ldr	r1, [sp, #20]
 800c0a8:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
 800c0ac:	f3c2 03c0 	ubfx	r3, r2, #3, #1
 800c0b0:	330e      	adds	r3, #14
 800c0b2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c0b6:	6880      	ldr	r0, [r0, #8]
 800c0b8:	f006 fb58 	bl	801276c <GUI_SetColor>
 800c0bc:	9905      	ldr	r1, [sp, #20]
 800c0be:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c0c0:	f006 fb26 	bl	8012710 <GUI_SetFont>
 800c0c4:	9a05      	ldr	r2, [sp, #20]
 800c0c6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c0c8:	f007 ff16 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c0cc:	9b05      	ldr	r3, [sp, #20]
 800c0ce:	9006      	str	r0, [sp, #24]
 800c0d0:	a907      	add	r1, sp, #28
 800c0d2:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 800c0d6:	f007 f906 	bl	80132e6 <GUI_DispStringInRect>
 800c0da:	a806      	add	r0, sp, #24
 800c0dc:	f007 ff1a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c0e0:	a805      	add	r0, sp, #20
 800c0e2:	f007 ff17 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c0e6:	e024      	b.n	800c132 <FRAMEWIN_DrawSkinFlex+0x36a>
 800c0e8:	6920      	ldr	r0, [r4, #16]
 800c0ea:	6961      	ldr	r1, [r4, #20]
 800c0ec:	69a2      	ldr	r2, [r4, #24]
 800c0ee:	69e3      	ldr	r3, [r4, #28]
 800c0f0:	f8ad 001c 	strh.w	r0, [sp, #28]
 800c0f4:	68a8      	ldr	r0, [r5, #8]
 800c0f6:	f8ad 101e 	strh.w	r1, [sp, #30]
 800c0fa:	f8ad 2020 	strh.w	r2, [sp, #32]
 800c0fe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c102:	f006 fb33 	bl	801276c <GUI_SetColor>
 800c106:	a807      	add	r0, sp, #28
 800c108:	f006 fcec 	bl	8012ae4 <GUI_FillRectEx>
 800c10c:	e011      	b.n	800c132 <FRAMEWIN_DrawSkinFlex+0x36a>
 800c10e:	6820      	ldr	r0, [r4, #0]
 800c110:	f007 fef2 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c114:	a912      	add	r1, sp, #72	; 0x48
 800c116:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800c11a:	f841 0d34 	str.w	r0, [r1, #-52]!
 800c11e:	f042 030c 	orr.w	r3, r2, #12
 800c122:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800c126:	4608      	mov	r0, r1
 800c128:	f007 fef4 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	f001 fa4f 	bl	800d5d0 <WM_SetHasTrans>
 800c132:	2000      	movs	r0, #0
 800c134:	e002      	b.n	800c13c <FRAMEWIN_DrawSkinFlex+0x374>
 800c136:	1c98      	adds	r0, r3, #2
 800c138:	4647      	mov	r7, r8
 800c13a:	e6f8      	b.n	800bf2e <FRAMEWIN_DrawSkinFlex+0x166>
 800c13c:	b012      	add	sp, #72	; 0x48
 800c13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c142:	bf00      	nop

0800c144 <_GetBorderSize>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	b08a      	sub	sp, #40	; 0x28
 800c148:	4605      	mov	r5, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	f007 fed4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c150:	ab0a      	add	r3, sp, #40	; 0x28
 800c152:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800c154:	f843 0d28 	str.w	r0, [r3, #-40]!
 800c158:	4668      	mov	r0, sp
 800c15a:	f007 fedb 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c15e:	9501      	str	r5, [sp, #4]
 800c160:	2c03      	cmp	r4, #3
 800c162:	d80b      	bhi.n	800c17c <_GetBorderSize+0x38>
 800c164:	e8df f004 	tbb	[pc, r4]
 800c168:	08060402 	.word	0x08060402
 800c16c:	2018      	movs	r0, #24
 800c16e:	e004      	b.n	800c17a <_GetBorderSize+0x36>
 800c170:	2016      	movs	r0, #22
 800c172:	e002      	b.n	800c17a <_GetBorderSize+0x36>
 800c174:	2015      	movs	r0, #21
 800c176:	e000      	b.n	800c17a <_GetBorderSize+0x36>
 800c178:	2017      	movs	r0, #23
 800c17a:	9002      	str	r0, [sp, #8]
 800c17c:	a801      	add	r0, sp, #4
 800c17e:	47b0      	blx	r6
 800c180:	b00a      	add	sp, #40	; 0x28
 800c182:	bd70      	pop	{r4, r5, r6, pc}

0800c184 <_Create>:
 800c184:	b530      	push	{r4, r5, lr}
 800c186:	b08b      	sub	sp, #44	; 0x2c
 800c188:	4605      	mov	r5, r0
 800c18a:	f007 feb5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c18e:	ab0a      	add	r3, sp, #40	; 0x28
 800c190:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800c192:	f843 0d28 	str.w	r0, [r3, #-40]!
 800c196:	4668      	mov	r0, sp
 800c198:	6894      	ldr	r4, [r2, #8]
 800c19a:	f007 febb 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	9002      	str	r0, [sp, #8]
 800c1a2:	a80a      	add	r0, sp, #40	; 0x28
 800c1a4:	6861      	ldr	r1, [r4, #4]
 800c1a6:	f840 5d24 	str.w	r5, [r0, #-36]!
 800c1aa:	4788      	blx	r1
 800c1ac:	b00b      	add	sp, #44	; 0x2c
 800c1ae:	bd30      	pop	{r4, r5, pc}

0800c1b0 <_Paint>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	b08f      	sub	sp, #60	; 0x3c
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	f007 fe9e 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c1bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c1be:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800c1c0:	9202      	str	r2, [sp, #8]
 800c1c2:	688e      	ldr	r6, [r1, #8]
 800c1c4:	9004      	str	r0, [sp, #16]
 800c1c6:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800c1c8:	f000 f9a6 	bl	800c518 <FRAMEWIN__CalcTitleHeight>
 800c1cc:	4682      	mov	sl, r0
 800c1ce:	a80e      	add	r0, sp, #56	; 0x38
 800c1d0:	f850 7d28 	ldr.w	r7, [r0, #-40]!
 800c1d4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c1d8:	9303      	str	r3, [sp, #12]
 800c1da:	f007 fe9b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f001 fd4c 	bl	800dc7c <WM_GetWindowSizeX>
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f001 fd5c 	bl	800dca4 <WM_GetWindowSizeY>
 800c1ec:	6832      	ldr	r2, [r6, #0]
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	4683      	mov	fp, r0
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	4790      	blx	r2
 800c1f6:	6833      	ldr	r3, [r6, #0]
 800c1f8:	2103      	movs	r1, #3
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4798      	blx	r3
 800c200:	6836      	ldr	r6, [r6, #0]
 800c202:	4681      	mov	r9, r0
 800c204:	2100      	movs	r1, #0
 800c206:	4620      	mov	r0, r4
 800c208:	47b0      	blx	r6
 800c20a:	4606      	mov	r6, r0
 800c20c:	2000      	movs	r0, #0
 800c20e:	9405      	str	r4, [sp, #20]
 800c210:	f002 fd18 	bl	800ec44 <WM__InitIVRSearch>
 800c214:	2800      	cmp	r0, #0
 800c216:	d03c      	beq.n	800c292 <_Paint+0xe2>
 800c218:	2000      	movs	r0, #0
 800c21a:	f108 31ff 	add.w	r1, r8, #4294967295
 800c21e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c222:	230b      	movs	r3, #11
 800c224:	900a      	str	r0, [sp, #40]	; 0x28
 800c226:	9009      	str	r0, [sp, #36]	; 0x24
 800c228:	910b      	str	r1, [sp, #44]	; 0x2c
 800c22a:	920c      	str	r2, [sp, #48]	; 0x30
 800c22c:	9306      	str	r3, [sp, #24]
 800c22e:	a805      	add	r0, sp, #20
 800c230:	47a8      	blx	r5
 800c232:	9903      	ldr	r1, [sp, #12]
 800c234:	9709      	str	r7, [sp, #36]	; 0x24
 800c236:	eb06 030a 	add.w	r3, r6, sl
 800c23a:	ebc9 0008 	rsb	r0, r9, r8
 800c23e:	1e42      	subs	r2, r0, #1
 800c240:	fa03 f081 	sxtah	r0, r3, r1
 800c244:	1e41      	subs	r1, r0, #1
 800c246:	200e      	movs	r0, #14
 800c248:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c24c:	930a      	str	r3, [sp, #40]	; 0x28
 800c24e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c250:	910c      	str	r1, [sp, #48]	; 0x30
 800c252:	9006      	str	r0, [sp, #24]
 800c254:	a805      	add	r0, sp, #20
 800c256:	47a8      	blx	r5
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	9a00      	ldr	r2, [sp, #0]
 800c25c:	9709      	str	r7, [sp, #36]	; 0x24
 800c25e:	1e59      	subs	r1, r3, #1
 800c260:	2005      	movs	r0, #5
 800c262:	920b      	str	r2, [sp, #44]	; 0x2c
 800c264:	910c      	str	r1, [sp, #48]	; 0x30
 800c266:	9006      	str	r0, [sp, #24]
 800c268:	960a      	str	r6, [sp, #40]	; 0x28
 800c26a:	a805      	add	r0, sp, #20
 800c26c:	47a8      	blx	r5
 800c26e:	a909      	add	r1, sp, #36	; 0x24
 800c270:	aa0b      	add	r2, sp, #44	; 0x2c
 800c272:	4620      	mov	r0, r4
 800c274:	f000 f95f 	bl	800c536 <FRAMEWIN__GetTitleLimits>
 800c278:	2002      	movs	r0, #2
 800c27a:	f006 fa3f 	bl	80126fc <GUI_SetTextMode>
 800c27e:	9802      	ldr	r0, [sp, #8]
 800c280:	f006 fa46 	bl	8012710 <GUI_SetFont>
 800c284:	2212      	movs	r2, #18
 800c286:	9206      	str	r2, [sp, #24]
 800c288:	a805      	add	r0, sp, #20
 800c28a:	47a8      	blx	r5
 800c28c:	f002 fc1a 	bl	800eac4 <WM__GetNextIVR>
 800c290:	e7c0      	b.n	800c214 <_Paint+0x64>
 800c292:	b00f      	add	sp, #60	; 0x3c
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c298 <FRAMEWIN_SetDefaultSkin>:
 800c298:	4a06      	ldr	r2, [pc, #24]	; (800c2b4 <FRAMEWIN_SetDefaultSkin+0x1c>)
 800c29a:	4b07      	ldr	r3, [pc, #28]	; (800c2b8 <FRAMEWIN_SetDefaultSkin+0x20>)
 800c29c:	4907      	ldr	r1, [pc, #28]	; (800c2bc <FRAMEWIN_SetDefaultSkin+0x24>)
 800c29e:	b510      	push	{r4, lr}
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	6048      	str	r0, [r1, #4]
 800c2a4:	4a06      	ldr	r2, [pc, #24]	; (800c2c0 <FRAMEWIN_SetDefaultSkin+0x28>)
 800c2a6:	c903      	ldmia	r1, {r0, r1}
 800c2a8:	69d4      	ldr	r4, [r2, #28]
 800c2aa:	3218      	adds	r2, #24
 800c2ac:	e882 0003 	stmia.w	r2, {r0, r1}
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	bd10      	pop	{r4, pc}
 800c2b4:	200001a8 	.word	0x200001a8
 800c2b8:	200001dc 	.word	0x200001dc
 800c2bc:	200001a0 	.word	0x200001a0
 800c2c0:	200001b4 	.word	0x200001b4

0800c2c4 <FRAMEWIN_SetFont>:
 800c2c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c2c8:	460e      	mov	r6, r1
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d029      	beq.n	800c324 <FRAMEWIN_SetFont+0x60>
 800c2d0:	f007 fe12 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c2d4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800c2d6:	9003      	str	r0, [sp, #12]
 800c2d8:	688d      	ldr	r5, [r1, #8]
 800c2da:	f000 f91d 	bl	800c518 <FRAMEWIN__CalcTitleHeight>
 800c2de:	4680      	mov	r8, r0
 800c2e0:	a804      	add	r0, sp, #16
 800c2e2:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800c2e6:	6356      	str	r6, [r2, #52]	; 0x34
 800c2e8:	f007 fe14 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c2ec:	682e      	ldr	r6, [r5, #0]
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	47b0      	blx	r6
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	2103      	movs	r1, #3
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4798      	blx	r3
 800c2fe:	2100      	movs	r1, #0
 800c300:	4606      	mov	r6, r0
 800c302:	682d      	ldr	r5, [r5, #0]
 800c304:	4620      	mov	r0, r4
 800c306:	47a8      	blx	r5
 800c308:	4605      	mov	r5, r0
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 f9ca 	bl	800c6a4 <FRAMEWIN__UpdatePositions>
 800c310:	4620      	mov	r0, r4
 800c312:	9500      	str	r5, [sp, #0]
 800c314:	4641      	mov	r1, r8
 800c316:	463a      	mov	r2, r7
 800c318:	4633      	mov	r3, r6
 800c31a:	f008 fdba 	bl	8014e92 <FRAMEWIN__UpdateButtons>
 800c31e:	4620      	mov	r0, r4
 800c320:	f002 fa50 	bl	800e7c4 <WM_InvalidateWindow>
 800c324:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

0800c328 <FRAMEWIN_SetTextColor>:
 800c328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c32a:	460c      	mov	r4, r1
 800c32c:	4605      	mov	r5, r0
 800c32e:	b160      	cbz	r0, 800c34a <FRAMEWIN_SetTextColor+0x22>
 800c330:	f007 fde2 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c334:	4602      	mov	r2, r0
 800c336:	a802      	add	r0, sp, #8
 800c338:	6414      	str	r4, [r2, #64]	; 0x40
 800c33a:	f840 2d04 	str.w	r2, [r0, #-4]!
 800c33e:	6454      	str	r4, [r2, #68]	; 0x44
 800c340:	f007 fde8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c344:	4628      	mov	r0, r5
 800c346:	f002 fa3d 	bl	800e7c4 <WM_InvalidateWindow>
 800c34a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c34c <FRAMEWIN_GetActive>:
 800c34c:	b513      	push	{r0, r1, r4, lr}
 800c34e:	4604      	mov	r4, r0
 800c350:	b158      	cbz	r0, 800c36a <FRAMEWIN_GetActive+0x1e>
 800c352:	f007 fdd1 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c356:	ab02      	add	r3, sp, #8
 800c358:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 800c35c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c360:	4618      	mov	r0, r3
 800c362:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800c366:	f007 fdd5 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c36a:	4620      	mov	r0, r4
 800c36c:	bd1c      	pop	{r2, r3, r4, pc}

0800c36e <FRAMEWIN_CreateIndirect>:
 800c36e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c370:	b089      	sub	sp, #36	; 0x24
 800c372:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800c376:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800c37a:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800c37e:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800c382:	9100      	str	r1, [sp, #0]
 800c384:	2100      	movs	r1, #0
 800c386:	9101      	str	r1, [sp, #4]
 800c388:	8a44      	ldrh	r4, [r0, #18]
 800c38a:	9402      	str	r4, [sp, #8]
 800c38c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800c390:	9103      	str	r1, [sp, #12]
 800c392:	6844      	ldr	r4, [r0, #4]
 800c394:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c396:	9404      	str	r4, [sp, #16]
 800c398:	9105      	str	r1, [sp, #20]
 800c39a:	6984      	ldr	r4, [r0, #24]
 800c39c:	18f9      	adds	r1, r7, r3
 800c39e:	eb0e 0002 	add.w	r0, lr, r2
 800c3a2:	9406      	str	r4, [sp, #24]
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	462b      	mov	r3, r5
 800c3a8:	f000 f9d2 	bl	800c750 <FRAMEWIN_CreateUser>
 800c3ac:	b009      	add	sp, #36	; 0x24
 800c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3b0 <_SetActive>:
 800c3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	f007 fd9f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c3ba:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800c3be:	9001      	str	r0, [sp, #4]
 800c3c0:	f002 0108 	and.w	r1, r2, #8
 800c3c4:	b28b      	uxth	r3, r1
 800c3c6:	b11d      	cbz	r5, 800c3d0 <_SetActive+0x20>
 800c3c8:	b953      	cbnz	r3, 800c3e0 <_SetActive+0x30>
 800c3ca:	f042 0208 	orr.w	r2, r2, #8
 800c3ce:	e002      	b.n	800c3d6 <_SetActive+0x26>
 800c3d0:	b133      	cbz	r3, 800c3e0 <_SetActive+0x30>
 800c3d2:	f022 0208 	bic.w	r2, r2, #8
 800c3d6:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f002 f9f2 	bl	800e7c4 <WM_InvalidateWindow>
 800c3e0:	a801      	add	r0, sp, #4
 800c3e2:	f007 fd97 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c3e6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c3e8 <FRAMEWIN__GetBorderSize>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	b08a      	sub	sp, #40	; 0x28
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	f007 fd82 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c3f4:	ab0a      	add	r3, sp, #40	; 0x28
 800c3f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800c3f8:	f843 0d28 	str.w	r0, [r3, #-40]!
 800c3fc:	4668      	mov	r0, sp
 800c3fe:	6896      	ldr	r6, [r2, #8]
 800c400:	f007 fd88 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c404:	9501      	str	r5, [sp, #4]
 800c406:	2c03      	cmp	r4, #3
 800c408:	d80b      	bhi.n	800c422 <FRAMEWIN__GetBorderSize+0x3a>
 800c40a:	e8df f004 	tbb	[pc, r4]
 800c40e:	0402      	.short	0x0402
 800c410:	0806      	.short	0x0806
 800c412:	2018      	movs	r0, #24
 800c414:	e004      	b.n	800c420 <FRAMEWIN__GetBorderSize+0x38>
 800c416:	2016      	movs	r0, #22
 800c418:	e002      	b.n	800c420 <FRAMEWIN__GetBorderSize+0x38>
 800c41a:	2015      	movs	r0, #21
 800c41c:	e000      	b.n	800c420 <FRAMEWIN__GetBorderSize+0x38>
 800c41e:	2017      	movs	r0, #23
 800c420:	9002      	str	r0, [sp, #8]
 800c422:	6871      	ldr	r1, [r6, #4]
 800c424:	a801      	add	r0, sp, #4
 800c426:	4788      	blx	r1
 800c428:	b00a      	add	sp, #40	; 0x28
 800c42a:	bd70      	pop	{r4, r5, r6, pc}

0800c42c <FRAMEWIN__cbClient>:
 800c42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c430:	6845      	ldr	r5, [r0, #4]
 800c432:	b087      	sub	sp, #28
 800c434:	4604      	mov	r4, r0
 800c436:	4628      	mov	r0, r5
 800c438:	f001 fc53 	bl	800dce2 <WM_GetParent>
 800c43c:	4606      	mov	r6, r0
 800c43e:	f007 fd5b 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c442:	4603      	mov	r3, r0
 800c444:	a806      	add	r0, sp, #24
 800c446:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800c448:	f840 3d14 	str.w	r3, [r0, #-20]!
 800c44c:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 800c450:	f8d3 9080 	ldr.w	r9, [r3, #128]	; 0x80
 800c454:	f007 fd5e 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c458:	6820      	ldr	r0, [r4, #0]
 800c45a:	380e      	subs	r0, #14
 800c45c:	2814      	cmp	r0, #20
 800c45e:	d850      	bhi.n	800c502 <FRAMEWIN__cbClient+0xd6>
 800c460:	e8df f000 	tbb	[pc, r0]
 800c464:	4f4f0b2f 	.word	0x4f4f0b2f
 800c468:	54544f4f 	.word	0x54544f4f
 800c46c:	4f4f544f 	.word	0x4f4f544f
 800c470:	4f4f4f4f 	.word	0x4f4f4f4f
 800c474:	4f4f2a1e 	.word	0x4f4f2a1e
 800c478:	4c          	.byte	0x4c
 800c479:	00          	.byte	0x00
 800c47a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800c47e:	4590      	cmp	r8, r2
 800c480:	d004      	beq.n	800c48c <FRAMEWIN__cbClient+0x60>
 800c482:	4640      	mov	r0, r8
 800c484:	f005 fba0 	bl	8011bc8 <LCD_SetBkColor>
 800c488:	f007 f924 	bl	80136d4 <GUI_Clear>
 800c48c:	2f00      	cmp	r7, #0
 800c48e:	d040      	beq.n	800c512 <FRAMEWIN__cbClient+0xe6>
 800c490:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c494:	ae02      	add	r6, sp, #8
 800c496:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800c49a:	9503      	str	r5, [sp, #12]
 800c49c:	4630      	mov	r0, r6
 800c49e:	e033      	b.n	800c508 <FRAMEWIN__cbClient+0xdc>
 800c4a0:	68e1      	ldr	r1, [r4, #12]
 800c4a2:	2900      	cmp	r1, #0
 800c4a4:	d035      	beq.n	800c512 <FRAMEWIN__cbClient+0xe6>
 800c4a6:	f1b9 0f00 	cmp.w	r9, #0
 800c4aa:	d023      	beq.n	800c4f4 <FRAMEWIN__cbClient+0xc8>
 800c4ac:	45a9      	cmp	r9, r5
 800c4ae:	d021      	beq.n	800c4f4 <FRAMEWIN__cbClient+0xc8>
 800c4b0:	4648      	mov	r0, r9
 800c4b2:	f001 f949 	bl	800d748 <WM_SetFocus>
 800c4b6:	e02c      	b.n	800c512 <FRAMEWIN__cbClient+0xe6>
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	f008 f95c 	bl	8014778 <WIDGET_HandleActive>
 800c4c0:	e027      	b.n	800c512 <FRAMEWIN__cbClient+0xe6>
 800c4c2:	68e3      	ldr	r3, [r4, #12]
 800c4c4:	6858      	ldr	r0, [r3, #4]
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	dd1b      	ble.n	800c502 <FRAMEWIN__cbClient+0xd6>
 800c4ca:	6819      	ldr	r1, [r3, #0]
 800c4cc:	2909      	cmp	r1, #9
 800c4ce:	d011      	beq.n	800c4f4 <FRAMEWIN__cbClient+0xc8>
 800c4d0:	290a      	cmp	r1, #10
 800c4d2:	d116      	bne.n	800c502 <FRAMEWIN__cbClient+0xd6>
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	f001 f8d5 	bl	800d684 <WM_SetFocusOnPrevChild>
 800c4da:	4604      	mov	r4, r0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f007 fd0b 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	a806      	add	r0, sp, #24
 800c4e6:	f840 2d14 	str.w	r2, [r0, #-20]!
 800c4ea:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
 800c4ee:	f007 fd11 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c4f2:	e00e      	b.n	800c512 <FRAMEWIN__cbClient+0xe6>
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f001 f8f5 	bl	800d6e4 <WM_SetFocusOnNextChild>
 800c4fa:	e7ee      	b.n	800c4da <FRAMEWIN__cbClient+0xae>
 800c4fc:	f8c4 800c 	str.w	r8, [r4, #12]
 800c500:	e007      	b.n	800c512 <FRAMEWIN__cbClient+0xe6>
 800c502:	b11f      	cbz	r7, 800c50c <FRAMEWIN__cbClient+0xe0>
 800c504:	6066      	str	r6, [r4, #4]
 800c506:	4620      	mov	r0, r4
 800c508:	47b8      	blx	r7
 800c50a:	e002      	b.n	800c512 <FRAMEWIN__cbClient+0xe6>
 800c50c:	4620      	mov	r0, r4
 800c50e:	f002 fd83 	bl	800f018 <WM_DefaultProc>
 800c512:	b007      	add	sp, #28
 800c514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c518 <FRAMEWIN__CalcTitleHeight>:
 800c518:	b508      	push	{r3, lr}
 800c51a:	4603      	mov	r3, r0
 800c51c:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 800c51e:	f000 0120 	and.w	r1, r0, #32
 800c522:	b288      	uxth	r0, r1
 800c524:	b130      	cbz	r0, 800c534 <FRAMEWIN__CalcTitleHeight+0x1c>
 800c526:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 800c52a:	b918      	cbnz	r0, 800c534 <FRAMEWIN__CalcTitleHeight+0x1c>
 800c52c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c52e:	f006 fab7 	bl	8012aa0 <GUI_GetYSizeOfFont>
 800c532:	3002      	adds	r0, #2
 800c534:	bd08      	pop	{r3, pc}

0800c536 <FRAMEWIN__GetTitleLimits>:
 800c536:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c538:	b085      	sub	sp, #20
 800c53a:	4604      	mov	r4, r0
 800c53c:	460d      	mov	r5, r1
 800c53e:	4616      	mov	r6, r2
 800c540:	f007 fcda 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c544:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800c546:	9000      	str	r0, [sp, #0]
 800c548:	c803      	ldmia	r0, {r0, r1}
 800c54a:	6897      	ldr	r7, [r2, #8]
 800c54c:	ab04      	add	r3, sp, #16
 800c54e:	e903 0003 	stmdb	r3, {r0, r1}
 800c552:	4668      	mov	r0, sp
 800c554:	f007 fcde 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	4620      	mov	r0, r4
 800c55c:	2100      	movs	r1, #0
 800c55e:	4790      	blx	r2
 800c560:	4607      	mov	r7, r0
 800c562:	4620      	mov	r0, r4
 800c564:	f001 fbe8 	bl	800dd38 <WM_GetFirstChild>
 800c568:	4604      	mov	r4, r0
 800c56a:	b350      	cbz	r0, 800c5c2 <FRAMEWIN__GetTitleLimits+0x8c>
 800c56c:	4620      	mov	r0, r4
 800c56e:	f007 fcc3 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c572:	4603      	mov	r3, r0
 800c574:	f9bd e00a 	ldrsh.w	lr, [sp, #10]
 800c578:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 800c57c:	9001      	str	r0, [sp, #4]
 800c57e:	ebce 0c0c 	rsb	ip, lr, ip
 800c582:	45bc      	cmp	ip, r7
 800c584:	8800      	ldrh	r0, [r0, #0]
 800c586:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c58a:	8899      	ldrh	r1, [r3, #4]
 800c58c:	d112      	bne.n	800c5b4 <FRAMEWIN__GetTitleLimits+0x7e>
 800c58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c590:	061b      	lsls	r3, r3, #24
 800c592:	b212      	sxth	r2, r2
 800c594:	d507      	bpl.n	800c5a6 <FRAMEWIN__GetTitleLimits+0x70>
 800c596:	b200      	sxth	r0, r0
 800c598:	1a81      	subs	r1, r0, r2
 800c59a:	6832      	ldr	r2, [r6, #0]
 800c59c:	4291      	cmp	r1, r2
 800c59e:	dc09      	bgt.n	800c5b4 <FRAMEWIN__GetTitleLimits+0x7e>
 800c5a0:	1e4b      	subs	r3, r1, #1
 800c5a2:	6033      	str	r3, [r6, #0]
 800c5a4:	e006      	b.n	800c5b4 <FRAMEWIN__GetTitleLimits+0x7e>
 800c5a6:	b208      	sxth	r0, r1
 800c5a8:	1a81      	subs	r1, r0, r2
 800c5aa:	682a      	ldr	r2, [r5, #0]
 800c5ac:	4291      	cmp	r1, r2
 800c5ae:	db01      	blt.n	800c5b4 <FRAMEWIN__GetTitleLimits+0x7e>
 800c5b0:	1c4b      	adds	r3, r1, #1
 800c5b2:	602b      	str	r3, [r5, #0]
 800c5b4:	a801      	add	r0, sp, #4
 800c5b6:	f007 fcad 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f001 fb99 	bl	800dcf2 <WM_GetNextSibling>
 800c5c0:	e7d2      	b.n	800c568 <FRAMEWIN__GetTitleLimits+0x32>
 800c5c2:	b005      	add	sp, #20
 800c5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5c6 <FRAMEWIN__CalcPositions>:
 800c5c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460f      	mov	r7, r1
 800c5d0:	f007 fc92 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c5d4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800c5d6:	9003      	str	r0, [sp, #12]
 800c5d8:	6895      	ldr	r5, [r2, #8]
 800c5da:	2101      	movs	r1, #1
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	4620      	mov	r0, r4
 800c5e0:	4798      	blx	r3
 800c5e2:	682e      	ldr	r6, [r5, #0]
 800c5e4:	2103      	movs	r1, #3
 800c5e6:	4683      	mov	fp, r0
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	47b0      	blx	r6
 800c5ec:	682a      	ldr	r2, [r5, #0]
 800c5ee:	2102      	movs	r1, #2
 800c5f0:	4681      	mov	r9, r0
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	4790      	blx	r2
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	9001      	str	r0, [sp, #4]
 800c5fa:	682d      	ldr	r5, [r5, #0]
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	47a8      	blx	r5
 800c600:	4605      	mov	r5, r0
 800c602:	9803      	ldr	r0, [sp, #12]
 800c604:	f001 fb2c 	bl	800dc60 <WM__GetWindowSizeX>
 800c608:	4682      	mov	sl, r0
 800c60a:	9803      	ldr	r0, [sp, #12]
 800c60c:	f001 fb2f 	bl	800dc6e <WM__GetWindowSizeY>
 800c610:	4680      	mov	r8, r0
 800c612:	9803      	ldr	r0, [sp, #12]
 800c614:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800c616:	f001 0320 	and.w	r3, r1, #32
 800c61a:	b29e      	uxth	r6, r3
 800c61c:	b10e      	cbz	r6, 800c622 <FRAMEWIN__CalcPositions+0x5c>
 800c61e:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 800c622:	f7ff ff79 	bl	800c518 <FRAMEWIN__CalcTitleHeight>
 800c626:	4602      	mov	r2, r0
 800c628:	9803      	ldr	r0, [sp, #12]
 800c62a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800c62c:	b118      	cbz	r0, 800c636 <FRAMEWIN__CalcPositions+0x70>
 800c62e:	9200      	str	r2, [sp, #0]
 800c630:	f001 fb38 	bl	800dca4 <WM_GetWindowSizeY>
 800c634:	9a00      	ldr	r2, [sp, #0]
 800c636:	803a      	strh	r2, [r7, #0]
 800c638:	b292      	uxth	r2, r2
 800c63a:	1993      	adds	r3, r2, r6
 800c63c:	b2a9      	uxth	r1, r5
 800c63e:	18ce      	adds	r6, r1, r3
 800c640:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	8078      	strh	r0, [r7, #2]
 800c648:	ebc9 0c0a 	rsb	ip, r9, sl
 800c64c:	3901      	subs	r1, #1
 800c64e:	1830      	adds	r0, r6, r0
 800c650:	f108 38ff 	add.w	r8, r8, #4294967295
 800c654:	fa1f f98c 	uxth.w	r9, ip
 800c658:	1852      	adds	r2, r2, r1
 800c65a:	fa1f fb8b 	uxth.w	fp, fp
 800c65e:	80f8      	strh	r0, [r7, #6]
 800c660:	ebc3 0008 	rsb	r0, r3, r8
 800c664:	8178      	strh	r0, [r7, #10]
 800c666:	827a      	strh	r2, [r7, #18]
 800c668:	f8a7 b004 	strh.w	fp, [r7, #4]
 800c66c:	f8a7 9008 	strh.w	r9, [r7, #8]
 800c670:	f8a7 b00c 	strh.w	fp, [r7, #12]
 800c674:	f8a7 9010 	strh.w	r9, [r7, #16]
 800c678:	81fd      	strh	r5, [r7, #14]
 800c67a:	a803      	add	r0, sp, #12
 800c67c:	f007 fc4a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c680:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 800c684:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c688:	9005      	str	r0, [sp, #20]
 800c68a:	a904      	add	r1, sp, #16
 800c68c:	aa05      	add	r2, sp, #20
 800c68e:	4620      	mov	r0, r4
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	f7ff ff50 	bl	800c536 <FRAMEWIN__GetTitleLimits>
 800c696:	9904      	ldr	r1, [sp, #16]
 800c698:	9a05      	ldr	r2, [sp, #20]
 800c69a:	81b9      	strh	r1, [r7, #12]
 800c69c:	823a      	strh	r2, [r7, #16]
 800c69e:	b007      	add	sp, #28
 800c6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6a4 <FRAMEWIN__UpdatePositions>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	f007 fc25 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	a806      	add	r0, sp, #24
 800c6b2:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800c6b4:	f840 2d18 	str.w	r2, [r0, #-24]!
 800c6b8:	4668      	mov	r0, sp
 800c6ba:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
 800c6bc:	f007 fc2a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c6c0:	b904      	cbnz	r4, 800c6c4 <FRAMEWIN__UpdatePositions+0x20>
 800c6c2:	b32d      	cbz	r5, 800c710 <FRAMEWIN__UpdatePositions+0x6c>
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	a901      	add	r1, sp, #4
 800c6c8:	f7ff ff7d 	bl	800c5c6 <FRAMEWIN__CalcPositions>
 800c6cc:	b1ac      	cbz	r4, 800c6fa <FRAMEWIN__UpdatePositions+0x56>
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800c6d4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800c6d8:	f001 f9c0 	bl	800da5c <WM_MoveChildTo>
 800c6dc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800c6e0:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800c6e4:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800c6e8:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800c6ec:	1ac9      	subs	r1, r1, r3
 800c6ee:	1a13      	subs	r3, r2, r0
 800c6f0:	3101      	adds	r1, #1
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	f000 ff92 	bl	800d61e <WM_SetSize>
 800c6fa:	b14d      	cbz	r5, 800c710 <FRAMEWIN__UpdatePositions+0x6c>
 800c6fc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800c700:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800c704:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800c708:	4628      	mov	r0, r5
 800c70a:	1ad2      	subs	r2, r2, r3
 800c70c:	f001 f9a6 	bl	800da5c <WM_MoveChildTo>
 800c710:	b006      	add	sp, #24
 800c712:	bd70      	pop	{r4, r5, r6, pc}

0800c714 <FRAMEWIN_SetText>:
 800c714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c716:	460d      	mov	r5, r1
 800c718:	4604      	mov	r4, r0
 800c71a:	b1c0      	cbz	r0, 800c74e <FRAMEWIN_SetText+0x3a>
 800c71c:	f007 fbec 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c720:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800c722:	9000      	str	r0, [sp, #0]
 800c724:	4668      	mov	r0, sp
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	f007 fbf4 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c72c:	a801      	add	r0, sp, #4
 800c72e:	4629      	mov	r1, r5
 800c730:	f005 faba 	bl	8011ca8 <GUI__SetText>
 800c734:	b158      	cbz	r0, 800c74e <FRAMEWIN_SetText+0x3a>
 800c736:	4620      	mov	r0, r4
 800c738:	f007 fbde 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c73c:	9901      	ldr	r1, [sp, #4]
 800c73e:	9000      	str	r0, [sp, #0]
 800c740:	6701      	str	r1, [r0, #112]	; 0x70
 800c742:	4668      	mov	r0, sp
 800c744:	f007 fbe6 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c748:	4620      	mov	r0, r4
 800c74a:	f002 f83b 	bl	800e7c4 <WM_InvalidateWindow>
 800c74e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c750 <FRAMEWIN_CreateUser>:
 800c750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c754:	b08b      	sub	sp, #44	; 0x2c
 800c756:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800c758:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800c75c:	9400      	str	r4, [sp, #0]
 800c75e:	4c35      	ldr	r4, [pc, #212]	; (800c834 <FRAMEWIN_CreateUser+0xe4>)
 800c760:	9402      	str	r4, [sp, #8]
 800c762:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c764:	f449 5680 	orr.w	r6, r9, #4096	; 0x1000
 800c768:	3460      	adds	r4, #96	; 0x60
 800c76a:	9601      	str	r6, [sp, #4]
 800c76c:	9403      	str	r4, [sp, #12]
 800c76e:	f002 f8e5 	bl	800e93c <WM_CreateWindowAsChild>
 800c772:	4606      	mov	r6, r0
 800c774:	2800      	cmp	r0, #0
 800c776:	d058      	beq.n	800c82a <FRAMEWIN_CreateUser+0xda>
 800c778:	f007 fbbe 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c77c:	4d2e      	ldr	r5, [pc, #184]	; (800c838 <FRAMEWIN_CreateUser+0xe8>)
 800c77e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c780:	9004      	str	r0, [sp, #16]
 800c782:	2230      	movs	r2, #48	; 0x30
 800c784:	f007 fff0 	bl	8014768 <WIDGET__Init>
 800c788:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c78c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c78e:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 800c792:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800c796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c79a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c79c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c7a0:	4d26      	ldr	r5, [pc, #152]	; (800c83c <FRAMEWIN_CreateUser+0xec>)
 800c7a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800c7a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c7aa:	6829      	ldr	r1, [r5, #0]
 800c7ac:	667b      	str	r3, [r7, #100]	; 0x64
 800c7ae:	2400      	movs	r4, #0
 800c7b0:	f8a7 007c 	strh.w	r0, [r7, #124]	; 0x7c
 800c7b4:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800c7b8:	66fc      	str	r4, [r7, #108]	; 0x6c
 800c7ba:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800c7be:	65f9      	str	r1, [r7, #92]	; 0x5c
 800c7c0:	4640      	mov	r0, r8
 800c7c2:	f007 fba7 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	a905      	add	r1, sp, #20
 800c7ca:	f7ff fefc 	bl	800c5c6 <FRAMEWIN__CalcPositions>
 800c7ce:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 800c7d2:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800c7d6:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800c7da:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800c7de:	9403      	str	r4, [sp, #12]
 800c7e0:	1a7b      	subs	r3, r7, r1
 800c7e2:	f241 7782 	movw	r7, #6018	; 0x1782
 800c7e6:	9701      	str	r7, [sp, #4]
 800c7e8:	4f15      	ldr	r7, [pc, #84]	; (800c840 <FRAMEWIN_CreateUser+0xf0>)
 800c7ea:	9600      	str	r6, [sp, #0]
 800c7ec:	1a12      	subs	r2, r2, r0
 800c7ee:	3201      	adds	r2, #1
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	9702      	str	r7, [sp, #8]
 800c7f4:	f002 f8a2 	bl	800e93c <WM_CreateWindowAsChild>
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	6828      	ldr	r0, [r5, #0]
 800c7fc:	6841      	ldr	r1, [r0, #4]
 800c7fe:	4630      	mov	r0, r6
 800c800:	4788      	blx	r1
 800c802:	4630      	mov	r0, r6
 800c804:	f007 fb78 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c808:	9004      	str	r0, [sp, #16]
 800c80a:	6684      	str	r4, [r0, #104]	; 0x68
 800c80c:	4640      	mov	r0, r8
 800c80e:	f007 fb81 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c812:	f242 0204 	movw	r2, #8196	; 0x2004
 800c816:	ea09 0302 	and.w	r3, r9, r2
 800c81a:	b913      	cbnz	r3, 800c822 <FRAMEWIN_CreateUser+0xd2>
 800c81c:	4630      	mov	r0, r6
 800c81e:	f001 f9d2 	bl	800dbc6 <WM_DisableMemdev>
 800c822:	4630      	mov	r0, r6
 800c824:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c826:	f7ff ff75 	bl	800c714 <FRAMEWIN_SetText>
 800c82a:	4630      	mov	r0, r6
 800c82c:	b00b      	add	sp, #44	; 0x2c
 800c82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c832:	bf00      	nop
 800c834:	0800c875 	.word	0x0800c875
 800c838:	200001b4 	.word	0x200001b4
 800c83c:	200001dc 	.word	0x200001dc
 800c840:	0800c42d 	.word	0x0800c42d

0800c844 <FRAMEWIN_SetTextAlign>:
 800c844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c846:	460c      	mov	r4, r1
 800c848:	4605      	mov	r5, r0
 800c84a:	b170      	cbz	r0, 800c86a <FRAMEWIN_SetTextAlign+0x26>
 800c84c:	f007 fb54 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c850:	f9b0 205a 	ldrsh.w	r2, [r0, #90]	; 0x5a
 800c854:	9001      	str	r0, [sp, #4]
 800c856:	42a2      	cmp	r2, r4
 800c858:	d004      	beq.n	800c864 <FRAMEWIN_SetTextAlign+0x20>
 800c85a:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 800c85e:	4628      	mov	r0, r5
 800c860:	f001 ffb0 	bl	800e7c4 <WM_InvalidateWindow>
 800c864:	a801      	add	r0, sp, #4
 800c866:	f007 fb55 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c86a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c86c <FRAMEWIN_SetActive>:
 800c86c:	b108      	cbz	r0, 800c872 <FRAMEWIN_SetActive+0x6>
 800c86e:	f7ff bd9f 	b.w	800c3b0 <_SetActive>
 800c872:	4770      	bx	lr

0800c874 <FRAMEWIN_Callback>:
 800c874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c878:	6844      	ldr	r4, [r0, #4]
 800c87a:	b08c      	sub	sp, #48	; 0x30
 800c87c:	4605      	mov	r5, r0
 800c87e:	4620      	mov	r0, r4
 800c880:	f007 fb3a 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c884:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800c886:	9001      	str	r0, [sp, #4]
 800c888:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 800c88c:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 800c890:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 800c894:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 800c898:	b113      	cbz	r3, 800c8a0 <FRAMEWIN_Callback+0x2c>
 800c89a:	f8d3 a000 	ldr.w	sl, [r3]
 800c89e:	e000      	b.n	800c8a2 <FRAMEWIN_Callback+0x2e>
 800c8a0:	469a      	mov	sl, r3
 800c8a2:	a801      	add	r0, sp, #4
 800c8a4:	f007 fb36 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c8a8:	b13f      	cbz	r7, 800c8ba <FRAMEWIN_Callback+0x46>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	4798      	blx	r3
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f040 8118 	bne.w	800cae6 <FRAMEWIN_Callback+0x272>
 800c8b6:	683f      	ldr	r7, [r7, #0]
 800c8b8:	e7f6      	b.n	800c8a8 <FRAMEWIN_Callback+0x34>
 800c8ba:	6828      	ldr	r0, [r5, #0]
 800c8bc:	2817      	cmp	r0, #23
 800c8be:	f000 808d 	beq.w	800c9dc <FRAMEWIN_Callback+0x168>
 800c8c2:	dc18      	bgt.n	800c8f6 <FRAMEWIN_Callback+0x82>
 800c8c4:	280f      	cmp	r0, #15
 800c8c6:	d044      	beq.n	800c952 <FRAMEWIN_Callback+0xde>
 800c8c8:	dc06      	bgt.n	800c8d8 <FRAMEWIN_Callback+0x64>
 800c8ca:	280b      	cmp	r0, #11
 800c8cc:	f000 80f7 	beq.w	800cabe <FRAMEWIN_Callback+0x24a>
 800c8d0:	280d      	cmp	r0, #13
 800c8d2:	f040 8100 	bne.w	800cad6 <FRAMEWIN_Callback+0x262>
 800c8d6:	e0c2      	b.n	800ca5e <FRAMEWIN_Callback+0x1ea>
 800c8d8:	2811      	cmp	r0, #17
 800c8da:	d01c      	beq.n	800c916 <FRAMEWIN_Callback+0xa2>
 800c8dc:	2814      	cmp	r0, #20
 800c8de:	f040 80fa 	bne.w	800cad6 <FRAMEWIN_Callback+0x262>
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	a907      	add	r1, sp, #28
 800c8e6:	f7ff fe6e 	bl	800c5c6 <FRAMEWIN__CalcPositions>
 800c8ea:	ab08      	add	r3, sp, #32
 800c8ec:	cb03      	ldmia	r3!, {r0, r1}
 800c8ee:	68ea      	ldr	r2, [r5, #12]
 800c8f0:	6010      	str	r0, [r2, #0]
 800c8f2:	6051      	str	r1, [r2, #4]
 800c8f4:	e0f7      	b.n	800cae6 <FRAMEWIN_Callback+0x272>
 800c8f6:	2826      	cmp	r0, #38	; 0x26
 800c8f8:	d073      	beq.n	800c9e2 <FRAMEWIN_Callback+0x16e>
 800c8fa:	dc05      	bgt.n	800c908 <FRAMEWIN_Callback+0x94>
 800c8fc:	281e      	cmp	r0, #30
 800c8fe:	d07d      	beq.n	800c9fc <FRAMEWIN_Callback+0x188>
 800c900:	2820      	cmp	r0, #32
 800c902:	f040 80e8 	bne.w	800cad6 <FRAMEWIN_Callback+0x262>
 800c906:	e0ba      	b.n	800ca7e <FRAMEWIN_Callback+0x20a>
 800c908:	282a      	cmp	r0, #42	; 0x2a
 800c90a:	d014      	beq.n	800c936 <FRAMEWIN_Callback+0xc2>
 800c90c:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 800c910:	f040 80e1 	bne.w	800cad6 <FRAMEWIN_Callback+0x262>
 800c914:	e024      	b.n	800c960 <FRAMEWIN_Callback+0xec>
 800c916:	4620      	mov	r0, r4
 800c918:	68ee      	ldr	r6, [r5, #12]
 800c91a:	f007 faed 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c91e:	9002      	str	r0, [sp, #8]
 800c920:	8931      	ldrh	r1, [r6, #8]
 800c922:	2901      	cmp	r1, #1
 800c924:	d105      	bne.n	800c932 <FRAMEWIN_Callback+0xbe>
 800c926:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800c92a:	f442 7380 	orr.w	r3, r2, #256	; 0x100
 800c92e:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 800c932:	a802      	add	r0, sp, #8
 800c934:	e0cd      	b.n	800cad2 <FRAMEWIN_Callback+0x25e>
 800c936:	4620      	mov	r0, r4
 800c938:	f007 fade 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c93c:	68eb      	ldr	r3, [r5, #12]
 800c93e:	9001      	str	r0, [sp, #4]
 800c940:	b113      	cbz	r3, 800c948 <FRAMEWIN_Callback+0xd4>
 800c942:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800c946:	e002      	b.n	800c94e <FRAMEWIN_Callback+0xda>
 800c948:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800c94c:	60e8      	str	r0, [r5, #12]
 800c94e:	a801      	add	r0, sp, #4
 800c950:	e041      	b.n	800c9d6 <FRAMEWIN_Callback+0x162>
 800c952:	f1ba 0f00 	cmp.w	sl, #0
 800c956:	f000 80be 	beq.w	800cad6 <FRAMEWIN_Callback+0x262>
 800c95a:	4620      	mov	r0, r4
 800c95c:	47d0      	blx	sl
 800c95e:	e0ba      	b.n	800cad6 <FRAMEWIN_Callback+0x262>
 800c960:	4620      	mov	r0, r4
 800c962:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800c966:	f007 fac7 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c96a:	ae0c      	add	r6, sp, #48	; 0x30
 800c96c:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 800c970:	f846 0d28 	str.w	r0, [r6, #-40]!
 800c974:	4630      	mov	r0, r6
 800c976:	f007 facd 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c97a:	68e8      	ldr	r0, [r5, #12]
 800c97c:	2800      	cmp	r0, #0
 800c97e:	f000 80b2 	beq.w	800cae6 <FRAMEWIN_Callback+0x272>
 800c982:	f898 1008 	ldrb.w	r1, [r8, #8]
 800c986:	b1d9      	cbz	r1, 800c9c0 <FRAMEWIN_Callback+0x14c>
 800c988:	f007 0008 	and.w	r0, r7, #8
 800c98c:	b281      	uxth	r1, r0
 800c98e:	b911      	cbnz	r1, 800c996 <FRAMEWIN_Callback+0x122>
 800c990:	4620      	mov	r0, r4
 800c992:	f000 fed9 	bl	800d748 <WM_SetFocus>
 800c996:	4620      	mov	r0, r4
 800c998:	f001 fa44 	bl	800de24 <WM_BringToTop>
 800c99c:	f407 7288 	and.w	r2, r7, #272	; 0x110
 800c9a0:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800c9a4:	f040 809f 	bne.w	800cae6 <FRAMEWIN_Callback+0x272>
 800c9a8:	f007 0780 	and.w	r7, r7, #128	; 0x80
 800c9ac:	b2bb      	uxth	r3, r7
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f040 8099 	bne.w	800cae6 <FRAMEWIN_Callback+0x272>
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	4641      	mov	r1, r8
 800c9b8:	2205      	movs	r2, #5
 800c9ba:	f000 ff31 	bl	800d820 <WM_SetCaptureMove>
 800c9be:	e092      	b.n	800cae6 <FRAMEWIN_Callback+0x272>
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f007 fa99 	bl	8013ef8 <GUI_ALLOC_LockH>
 800c9c6:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800c9ca:	9002      	str	r0, [sp, #8]
 800c9cc:	f422 7380 	bic.w	r3, r2, #256	; 0x100
 800c9d0:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f007 fa9d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800c9da:	e084      	b.n	800cae6 <FRAMEWIN_Callback+0x272>
 800c9dc:	f8c5 800c 	str.w	r8, [r5, #12]
 800c9e0:	e081      	b.n	800cae6 <FRAMEWIN_Callback+0x272>
 800c9e2:	68e9      	ldr	r1, [r5, #12]
 800c9e4:	2902      	cmp	r1, #2
 800c9e6:	d17e      	bne.n	800cae6 <FRAMEWIN_Callback+0x272>
 800c9e8:	9106      	str	r1, [sp, #24]
 800c9ea:	a90c      	add	r1, sp, #48	; 0x30
 800c9ec:	2227      	movs	r2, #39	; 0x27
 800c9ee:	f841 2d24 	str.w	r2, [r1, #-36]!
 800c9f2:	68a8      	ldr	r0, [r5, #8]
 800c9f4:	9405      	str	r4, [sp, #20]
 800c9f6:	f000 fd5b 	bl	800d4b0 <WM__SendMessage>
 800c9fa:	e074      	b.n	800cae6 <FRAMEWIN_Callback+0x272>
 800c9fc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800ca00:	f1b9 0f01 	cmp.w	r9, #1
 800ca04:	d126      	bne.n	800ca54 <FRAMEWIN_Callback+0x1e0>
 800ca06:	4630      	mov	r0, r6
 800ca08:	f001 f8e8 	bl	800dbdc <WM_IsWindow>
 800ca0c:	b158      	cbz	r0, 800ca26 <FRAMEWIN_Callback+0x1b2>
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f000 fe9a 	bl	800d748 <WM_SetFocus>
 800ca14:	4630      	mov	r0, r6
 800ca16:	f001 f907 	bl	800dc28 <WM_HasFocus>
 800ca1a:	b198      	cbz	r0, 800ca44 <FRAMEWIN_Callback+0x1d0>
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	4649      	mov	r1, r9
 800ca20:	f007 fe79 	bl	8014716 <WIDGET_OrState>
 800ca24:	e00e      	b.n	800ca44 <FRAMEWIN_Callback+0x1d0>
 800ca26:	4640      	mov	r0, r8
 800ca28:	f000 fe5c 	bl	800d6e4 <WM_SetFocusOnNextChild>
 800ca2c:	4606      	mov	r6, r0
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f007 fa62 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ca34:	ab0c      	add	r3, sp, #48	; 0x30
 800ca36:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 800ca3a:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f007 fa68 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ca44:	4620      	mov	r0, r4
 800ca46:	2101      	movs	r1, #1
 800ca48:	f7ff ff10 	bl	800c86c <FRAMEWIN_SetActive>
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	d14a      	bne.n	800cae6 <FRAMEWIN_Callback+0x272>
 800ca50:	60ee      	str	r6, [r5, #12]
 800ca52:	e048      	b.n	800cae6 <FRAMEWIN_Callback+0x272>
 800ca54:	4620      	mov	r0, r4
 800ca56:	4639      	mov	r1, r7
 800ca58:	f7ff ff08 	bl	800c86c <FRAMEWIN_SetActive>
 800ca5c:	e043      	b.n	800cae6 <FRAMEWIN_Callback+0x272>
 800ca5e:	f009 0908 	and.w	r9, r9, #8
 800ca62:	fa1f f189 	uxth.w	r1, r9
 800ca66:	2900      	cmp	r1, #0
 800ca68:	d135      	bne.n	800cad6 <FRAMEWIN_Callback+0x262>
 800ca6a:	68ea      	ldr	r2, [r5, #12]
 800ca6c:	68d3      	ldr	r3, [r2, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d031      	beq.n	800cad6 <FRAMEWIN_Callback+0x262>
 800ca72:	7a18      	ldrb	r0, [r3, #8]
 800ca74:	b378      	cbz	r0, 800cad6 <FRAMEWIN_Callback+0x262>
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 fe66 	bl	800d748 <WM_SetFocus>
 800ca7c:	e02b      	b.n	800cad6 <FRAMEWIN_Callback+0x262>
 800ca7e:	68ee      	ldr	r6, [r5, #12]
 800ca80:	b34e      	cbz	r6, 800cad6 <FRAMEWIN_Callback+0x262>
 800ca82:	6870      	ldr	r0, [r6, #4]
 800ca84:	4621      	mov	r1, r4
 800ca86:	f000 fd4b 	bl	800d520 <WM__IsAncestorOrSelf>
 800ca8a:	b120      	cbz	r0, 800ca96 <FRAMEWIN_Callback+0x222>
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	2101      	movs	r1, #1
 800ca90:	f7ff fc8e 	bl	800c3b0 <_SetActive>
 800ca94:	e01f      	b.n	800cad6 <FRAMEWIN_Callback+0x262>
 800ca96:	4620      	mov	r0, r4
 800ca98:	4639      	mov	r1, r7
 800ca9a:	f7ff fc89 	bl	800c3b0 <_SetActive>
 800ca9e:	6830      	ldr	r0, [r6, #0]
 800caa0:	4621      	mov	r1, r4
 800caa2:	f000 fd2c 	bl	800d4fe <WM__IsAncestor>
 800caa6:	b1b0      	cbz	r0, 800cad6 <FRAMEWIN_Callback+0x262>
 800caa8:	4620      	mov	r0, r4
 800caaa:	f007 fa25 	bl	8013ef8 <GUI_ALLOC_LockH>
 800caae:	a90c      	add	r1, sp, #48	; 0x30
 800cab0:	6832      	ldr	r2, [r6, #0]
 800cab2:	f841 0d28 	str.w	r0, [r1, #-40]!
 800cab6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800caba:	4608      	mov	r0, r1
 800cabc:	e009      	b.n	800cad2 <FRAMEWIN_Callback+0x25e>
 800cabe:	4620      	mov	r0, r4
 800cac0:	f007 fa1a 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cac4:	ae0c      	add	r6, sp, #48	; 0x30
 800cac6:	f846 0d2c 	str.w	r0, [r6, #-44]!
 800caca:	3070      	adds	r0, #112	; 0x70
 800cacc:	f007 fc66 	bl	801439c <GUI_ALLOC_FreePtr>
 800cad0:	4630      	mov	r0, r6
 800cad2:	f007 fa1f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cad6:	4620      	mov	r0, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	f007 fe4d 	bl	8014778 <WIDGET_HandleActive>
 800cade:	b110      	cbz	r0, 800cae6 <FRAMEWIN_Callback+0x272>
 800cae0:	4628      	mov	r0, r5
 800cae2:	f002 fa99 	bl	800f018 <WM_DefaultProc>
 800cae6:	b00c      	add	sp, #48	; 0x30
 800cae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800caec <DIALOG_GetBkColor>:
 800caec:	4b01      	ldr	r3, [pc, #4]	; (800caf4 <DIALOG_GetBkColor+0x8>)
 800caee:	6818      	ldr	r0, [r3, #0]
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	200001e0 	.word	0x200001e0

0800caf8 <GUI_CreateDialogBox>:
 800caf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cafc:	4605      	mov	r5, r0
 800cafe:	4688      	mov	r8, r1
 800cb00:	4614      	mov	r4, r2
 800cb02:	461e      	mov	r6, r3
 800cb04:	b913      	cbnz	r3, 800cb0c <GUI_CreateDialogBox+0x14>
 800cb06:	f001 f941 	bl	800dd8c <WM_GetDesktopWindow>
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	9400      	str	r4, [sp, #0]
 800cb0e:	4628      	mov	r0, r5
 800cb10:	682c      	ldr	r4, [r5, #0]
 800cb12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb16:	4631      	mov	r1, r6
 800cb18:	47a0      	blx	r4
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d037      	beq.n	800cb90 <GUI_CreateDialogBox+0x98>
 800cb20:	f001 f940 	bl	800dda4 <WM_GetClientWindow>
 800cb24:	8a69      	ldrh	r1, [r5, #18]
 800cb26:	4607      	mov	r7, r0
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f007 fdf4 	bl	8014716 <WIDGET_OrState>
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f000 fd2f 	bl	800d592 <WM_ShowWindow>
 800cb34:	4638      	mov	r0, r7
 800cb36:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb3a:	f000 fd2a 	bl	800d592 <WM_ShowWindow>
 800cb3e:	f1b8 0f00 	cmp.w	r8, #0
 800cb42:	dd0f      	ble.n	800cb64 <GUI_CreateDialogBox+0x6c>
 800cb44:	f855 cf1c 	ldr.w	ip, [r5, #28]!
 800cb48:	2200      	movs	r2, #0
 800cb4a:	9200      	str	r2, [sp, #0]
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	4639      	mov	r1, r7
 800cb50:	4613      	mov	r3, r2
 800cb52:	47e0      	blx	ip
 800cb54:	4681      	mov	r9, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d1ed      	bne.n	800cb36 <GUI_CreateDialogBox+0x3e>
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f001 fe74 	bl	800e848 <WM_DeleteWindow>
 800cb60:	464c      	mov	r4, r9
 800cb62:	e015      	b.n	800cb90 <GUI_CreateDialogBox+0x98>
 800cb64:	211d      	movs	r1, #29
 800cb66:	4638      	mov	r0, r7
 800cb68:	f000 fef3 	bl	800d952 <WM_SendMessageNoPara>
 800cb6c:	1c73      	adds	r3, r6, #1
 800cb6e:	d00f      	beq.n	800cb90 <GUI_CreateDialogBox+0x98>
 800cb70:	f001 f8d8 	bl	800dd24 <WM_GetFocussedWindow>
 800cb74:	b150      	cbz	r0, 800cb8c <GUI_CreateDialogBox+0x94>
 800cb76:	f007 f9b5 	bl	8013ee4 <GUI_ALLOC_h2p>
 800cb7a:	6980      	ldr	r0, [r0, #24]
 800cb7c:	42a0      	cmp	r0, r4
 800cb7e:	d007      	beq.n	800cb90 <GUI_CreateDialogBox+0x98>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d1f8      	bne.n	800cb76 <GUI_CreateDialogBox+0x7e>
 800cb84:	4620      	mov	r0, r4
 800cb86:	f000 fdad 	bl	800d6e4 <WM_SetFocusOnNextChild>
 800cb8a:	e001      	b.n	800cb90 <GUI_CreateDialogBox+0x98>
 800cb8c:	42a6      	cmp	r6, r4
 800cb8e:	d1f9      	bne.n	800cb84 <GUI_CreateDialogBox+0x8c>
 800cb90:	4620      	mov	r0, r4
 800cb92:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800cb96 <CHECKBOX_SetText>:
 800cb96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb98:	460e      	mov	r6, r1
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	b1e0      	cbz	r0, 800cbd8 <CHECKBOX_SetText+0x42>
 800cb9e:	b1d9      	cbz	r1, 800cbd8 <CHECKBOX_SetText+0x42>
 800cba0:	f007 f9aa 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cba4:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800cba6:	9000      	str	r0, [sp, #0]
 800cba8:	4668      	mov	r0, sp
 800cbaa:	9501      	str	r5, [sp, #4]
 800cbac:	f007 f9b2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cbb0:	a801      	add	r0, sp, #4
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	f005 f878 	bl	8011ca8 <GUI__SetText>
 800cbb8:	b170      	cbz	r0, 800cbd8 <CHECKBOX_SetText+0x42>
 800cbba:	9b01      	ldr	r3, [sp, #4]
 800cbbc:	42ab      	cmp	r3, r5
 800cbbe:	d008      	beq.n	800cbd2 <CHECKBOX_SetText+0x3c>
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f007 f999 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cbc6:	9901      	ldr	r1, [sp, #4]
 800cbc8:	9000      	str	r0, [sp, #0]
 800cbca:	6781      	str	r1, [r0, #120]	; 0x78
 800cbcc:	4668      	mov	r0, sp
 800cbce:	f007 f9a1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f001 fdf6 	bl	800e7c4 <WM_InvalidateWindow>
 800cbd8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800cbda <CHECKBOX_SetState>:
 800cbda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbdc:	460d      	mov	r5, r1
 800cbde:	4604      	mov	r4, r0
 800cbe0:	b1b8      	cbz	r0, 800cc12 <CHECKBOX_SetState+0x38>
 800cbe2:	f007 f989 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	a802      	add	r0, sp, #8
 800cbea:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
 800cbee:	f840 2d04 	str.w	r2, [r0, #-4]!
 800cbf2:	428d      	cmp	r5, r1
 800cbf4:	d20b      	bcs.n	800cc0e <CHECKBOX_SetState+0x34>
 800cbf6:	f882 5075 	strb.w	r5, [r2, #117]	; 0x75
 800cbfa:	f007 f98b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f001 fde0 	bl	800e7c4 <WM_InvalidateWindow>
 800cc04:	4620      	mov	r0, r4
 800cc06:	2105      	movs	r1, #5
 800cc08:	f000 ff1f 	bl	800da4a <WM_NotifyParent>
 800cc0c:	e001      	b.n	800cc12 <CHECKBOX_SetState+0x38>
 800cc0e:	f007 f981 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cc12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800cc14 <CHECKBOX_SetFont>:
 800cc14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc16:	460c      	mov	r4, r1
 800cc18:	4605      	mov	r5, r0
 800cc1a:	b160      	cbz	r0, 800cc36 <CHECKBOX_SetFont+0x22>
 800cc1c:	f007 f96c 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cc20:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cc22:	9001      	str	r0, [sp, #4]
 800cc24:	42a2      	cmp	r2, r4
 800cc26:	d003      	beq.n	800cc30 <CHECKBOX_SetFont+0x1c>
 800cc28:	6344      	str	r4, [r0, #52]	; 0x34
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f001 fdca 	bl	800e7c4 <WM_InvalidateWindow>
 800cc30:	a801      	add	r0, sp, #4
 800cc32:	f007 f96f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cc36:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800cc38 <CHECKBOX_CreateIndirect>:
 800cc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3a:	b087      	sub	sp, #28
 800cc3c:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800cc40:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800cc44:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800cc48:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800cc4c:	9100      	str	r1, [sp, #0]
 800cc4e:	2100      	movs	r1, #0
 800cc50:	9101      	str	r1, [sp, #4]
 800cc52:	8a44      	ldrh	r4, [r0, #18]
 800cc54:	9402      	str	r4, [sp, #8]
 800cc56:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800cc5a:	9103      	str	r1, [sp, #12]
 800cc5c:	6984      	ldr	r4, [r0, #24]
 800cc5e:	18f9      	adds	r1, r7, r3
 800cc60:	eb0e 0002 	add.w	r0, lr, r2
 800cc64:	9404      	str	r4, [sp, #16]
 800cc66:	4632      	mov	r2, r6
 800cc68:	462b      	mov	r3, r5
 800cc6a:	f000 f8ab 	bl	800cdc4 <CHECKBOX_CreateUser>
 800cc6e:	b007      	add	sp, #28
 800cc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cc74 <CHECKBOX__GetButtonSize>:
 800cc74:	b500      	push	{lr}
 800cc76:	b08b      	sub	sp, #44	; 0x2c
 800cc78:	2100      	movs	r1, #0
 800cc7a:	2224      	movs	r2, #36	; 0x24
 800cc7c:	a801      	add	r0, sp, #4
 800cc7e:	f00c fcb9 	bl	80195f4 <memset>
 800cc82:	4805      	ldr	r0, [pc, #20]	; (800cc98 <CHECKBOX__GetButtonSize+0x24>)
 800cc84:	6801      	ldr	r1, [r0, #0]
 800cc86:	688a      	ldr	r2, [r1, #8]
 800cc88:	2319      	movs	r3, #25
 800cc8a:	9302      	str	r3, [sp, #8]
 800cc8c:	a801      	add	r0, sp, #4
 800cc8e:	6853      	ldr	r3, [r2, #4]
 800cc90:	4798      	blx	r3
 800cc92:	b00b      	add	sp, #44	; 0x2c
 800cc94:	bd00      	pop	{pc}
 800cc96:	bf00      	nop
 800cc98:	20000220 	.word	0x20000220

0800cc9c <CHECKBOX_Callback>:
 800cc9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800cca0:	6844      	ldr	r4, [r0, #4]
 800cca2:	4605      	mov	r5, r0
 800cca4:	4629      	mov	r1, r5
 800cca6:	4620      	mov	r0, r4
 800cca8:	f007 fd66 	bl	8014778 <WIDGET_HandleActive>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f000 8086 	beq.w	800cdbe <CHECKBOX_Callback+0x122>
 800ccb2:	682b      	ldr	r3, [r5, #0]
 800ccb4:	2b0e      	cmp	r3, #14
 800ccb6:	d015      	beq.n	800cce4 <CHECKBOX_Callback+0x48>
 800ccb8:	dc0e      	bgt.n	800ccd8 <CHECKBOX_Callback+0x3c>
 800ccba:	2b0b      	cmp	r3, #11
 800ccbc:	d17c      	bne.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f007 f91a 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ccc4:	ac02      	add	r4, sp, #8
 800ccc6:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ccca:	3078      	adds	r0, #120	; 0x78
 800cccc:	f007 fb66 	bl	801439c <GUI_ALLOC_FreePtr>
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f007 f91f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ccd6:	e06f      	b.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800ccd8:	2b0f      	cmp	r3, #15
 800ccda:	d025      	beq.n	800cd28 <CHECKBOX_Callback+0x8c>
 800ccdc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800cce0:	d16a      	bne.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800cce2:	e031      	b.n	800cd48 <CHECKBOX_Callback+0xac>
 800cce4:	4620      	mov	r0, r4
 800cce6:	f007 f907 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ccea:	a902      	add	r1, sp, #8
 800ccec:	f841 0d04 	str.w	r0, [r1, #-4]!
 800ccf0:	f890 6074 	ldrb.w	r6, [r0, #116]	; 0x74
 800ccf4:	f890 7075 	ldrb.w	r7, [r0, #117]	; 0x75
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	f007 f90b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f000 fbf4 	bl	800d4ec <WM__IsEnabled>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d057      	beq.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800cd08:	68e8      	ldr	r0, [r5, #12]
 800cd0a:	6842      	ldr	r2, [r0, #4]
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	dd53      	ble.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800cd10:	6803      	ldr	r3, [r0, #0]
 800cd12:	2b20      	cmp	r3, #32
 800cd14:	d150      	bne.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800cd16:	1c7a      	adds	r2, r7, #1
 800cd18:	fb92 f1f6 	sdiv	r1, r2, r6
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	fb06 2111 	mls	r1, r6, r1, r2
 800cd22:	f7ff ff5a 	bl	800cbda <CHECKBOX_SetState>
 800cd26:	e047      	b.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f007 f8e5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cd2e:	ab02      	add	r3, sp, #8
 800cd30:	f843 0d04 	str.w	r0, [r3, #-4]!
 800cd34:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800cd36:	682d      	ldr	r5, [r5, #0]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f007 f8eb 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cd3e:	2d00      	cmp	r5, #0
 800cd40:	d03d      	beq.n	800cdbe <CHECKBOX_Callback+0x122>
 800cd42:	4620      	mov	r0, r4
 800cd44:	47a8      	blx	r5
 800cd46:	e03a      	b.n	800cdbe <CHECKBOX_Callback+0x122>
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f007 f8d5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cd4e:	4601      	mov	r1, r0
 800cd50:	a802      	add	r0, sp, #8
 800cd52:	f8b1 8030 	ldrh.w	r8, [r1, #48]	; 0x30
 800cd56:	f840 1d04 	str.w	r1, [r0, #-4]!
 800cd5a:	f891 7074 	ldrb.w	r7, [r1, #116]	; 0x74
 800cd5e:	f891 9075 	ldrb.w	r9, [r1, #117]	; 0x75
 800cd62:	f007 f8d7 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cd66:	68ee      	ldr	r6, [r5, #12]
 800cd68:	b1b6      	cbz	r6, 800cd98 <CHECKBOX_Callback+0xfc>
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f000 ff6a 	bl	800dc44 <WM_HasCaptured>
 800cd70:	4682      	mov	sl, r0
 800cd72:	b998      	cbnz	r0, 800cd9c <CHECKBOX_Callback+0x100>
 800cd74:	7a30      	ldrb	r0, [r6, #8]
 800cd76:	b1a0      	cbz	r0, 800cda2 <CHECKBOX_Callback+0x106>
 800cd78:	4620      	mov	r0, r4
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	f109 0901 	add.w	r9, r9, #1
 800cd80:	f000 fdb6 	bl	800d8f0 <WM_SetCapture>
 800cd84:	fb99 f2f7 	sdiv	r2, r9, r7
 800cd88:	fb07 9112 	mls	r1, r7, r2, r9
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f7ff ff24 	bl	800cbda <CHECKBOX_SetState>
 800cd92:	4656      	mov	r6, sl
 800cd94:	2101      	movs	r1, #1
 800cd96:	e006      	b.n	800cda6 <CHECKBOX_Callback+0x10a>
 800cd98:	2103      	movs	r1, #3
 800cd9a:	e004      	b.n	800cda6 <CHECKBOX_Callback+0x10a>
 800cd9c:	2600      	movs	r6, #0
 800cd9e:	4631      	mov	r1, r6
 800cda0:	e001      	b.n	800cda6 <CHECKBOX_Callback+0x10a>
 800cda2:	2601      	movs	r6, #1
 800cda4:	2102      	movs	r1, #2
 800cda6:	4620      	mov	r0, r4
 800cda8:	f000 fe4f 	bl	800da4a <WM_NotifyParent>
 800cdac:	2e01      	cmp	r6, #1
 800cdae:	d103      	bne.n	800cdb8 <CHECKBOX_Callback+0x11c>
 800cdb0:	fa0f f088 	sxth.w	r0, r8
 800cdb4:	f005 fe0a 	bl	80129cc <GUI_StoreKey>
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f002 f92d 	bl	800f018 <WM_DefaultProc>
 800cdbe:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800cdc4 <CHECKBOX_CreateUser>:
 800cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc8:	b086      	sub	sp, #24
 800cdca:	4680      	mov	r8, r0
 800cdcc:	460f      	mov	r7, r1
 800cdce:	461c      	mov	r4, r3
 800cdd0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cdd2:	4616      	mov	r6, r2
 800cdd4:	b92a      	cbnz	r2, 800cde2 <CHECKBOX_CreateUser+0x1e>
 800cdd6:	4b27      	ldr	r3, [pc, #156]	; (800ce74 <CHECKBOX_CreateUser+0xb0>)
 800cdd8:	6818      	ldr	r0, [r3, #0]
 800cdda:	6881      	ldr	r1, [r0, #8]
 800cddc:	680a      	ldr	r2, [r1, #0]
 800cdde:	4790      	blx	r2
 800cde0:	4606      	mov	r6, r0
 800cde2:	b92c      	cbnz	r4, 800cdf0 <CHECKBOX_CreateUser+0x2c>
 800cde4:	4c23      	ldr	r4, [pc, #140]	; (800ce74 <CHECKBOX_CreateUser+0xb0>)
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	6898      	ldr	r0, [r3, #8]
 800cdea:	6801      	ldr	r1, [r0, #0]
 800cdec:	4788      	blx	r1
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4a21      	ldr	r2, [pc, #132]	; (800ce78 <CHECKBOX_CreateUser+0xb4>)
 800cdf2:	4922      	ldr	r1, [pc, #136]	; (800ce7c <CHECKBOX_CreateUser+0xb8>)
 800cdf4:	68d0      	ldr	r0, [r2, #12]
 800cdf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cdf8:	9102      	str	r1, [sp, #8]
 800cdfa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800cdfe:	4298      	cmp	r0, r3
 800ce00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce02:	bf08      	it	eq
 800ce04:	f045 0501 	orreq.w	r5, r5, #1
 800ce08:	3254      	adds	r2, #84	; 0x54
 800ce0a:	e88d 0028 	stmia.w	sp, {r3, r5}
 800ce0e:	9203      	str	r2, [sp, #12]
 800ce10:	4640      	mov	r0, r8
 800ce12:	4639      	mov	r1, r7
 800ce14:	4632      	mov	r2, r6
 800ce16:	4623      	mov	r3, r4
 800ce18:	f001 fd90 	bl	800e93c <WM_CreateWindowAsChild>
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	b328      	cbz	r0, 800ce6c <CHECKBOX_CreateUser+0xa8>
 800ce20:	f007 f86a 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ce24:	4d14      	ldr	r5, [pc, #80]	; (800ce78 <CHECKBOX_CreateUser+0xb4>)
 800ce26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce28:	9005      	str	r0, [sp, #20]
 800ce2a:	2210      	movs	r2, #16
 800ce2c:	f007 fc9c 	bl	8014768 <WIDGET__Init>
 800ce30:	af06      	add	r7, sp, #24
 800ce32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce34:	f857 6d04 	ldr.w	r6, [r7, #-4]!
 800ce38:	f106 0434 	add.w	r4, r6, #52	; 0x34
 800ce3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ce4e:	4c09      	ldr	r4, [pc, #36]	; (800ce74 <CHECKBOX_CreateUser+0xb0>)
 800ce50:	6820      	ldr	r0, [r4, #0]
 800ce52:	2302      	movs	r3, #2
 800ce54:	210f      	movs	r1, #15
 800ce56:	6730      	str	r0, [r6, #112]	; 0x70
 800ce58:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	67f1      	str	r1, [r6, #124]	; 0x7c
 800ce60:	f007 f858 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ce64:	6822      	ldr	r2, [r4, #0]
 800ce66:	4640      	mov	r0, r8
 800ce68:	6853      	ldr	r3, [r2, #4]
 800ce6a:	4798      	blx	r3
 800ce6c:	4640      	mov	r0, r8
 800ce6e:	b006      	add	sp, #24
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	20000220 	.word	0x20000220
 800ce78:	200001e4 	.word	0x200001e4
 800ce7c:	0800cc9d 	.word	0x0800cc9d

0800ce80 <BUTTON_DrawSkinFlex>:
 800ce80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce82:	6883      	ldr	r3, [r0, #8]
 800ce84:	4a8b      	ldr	r2, [pc, #556]	; (800d0b4 <BUTTON_DrawSkinFlex+0x234>)
 800ce86:	4604      	mov	r4, r0
 800ce88:	6840      	ldr	r0, [r0, #4]
 800ce8a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800ce8e:	2805      	cmp	r0, #5
 800ce90:	b089      	sub	sp, #36	; 0x24
 800ce92:	d00e      	beq.n	800ceb2 <BUTTON_DrawSkinFlex+0x32>
 800ce94:	dc06      	bgt.n	800cea4 <BUTTON_DrawSkinFlex+0x24>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f040 8108 	bne.w	800d0ac <BUTTON_DrawSkinFlex+0x22c>
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	f000 fb97 	bl	800d5d0 <WM_SetHasTrans>
 800cea2:	e103      	b.n	800d0ac <BUTTON_DrawSkinFlex+0x22c>
 800cea4:	2806      	cmp	r0, #6
 800cea6:	f000 808a 	beq.w	800cfbe <BUTTON_DrawSkinFlex+0x13e>
 800ceaa:	2812      	cmp	r0, #18
 800ceac:	f040 80fe 	bne.w	800d0ac <BUTTON_DrawSkinFlex+0x22c>
 800ceb0:	e0ab      	b.n	800d00a <BUTTON_DrawSkinFlex+0x18a>
 800ceb2:	69ee      	ldr	r6, [r5, #28]
 800ceb4:	2e00      	cmp	r6, #0
 800ceb6:	d052      	beq.n	800cf5e <BUTTON_DrawSkinFlex+0xde>
 800ceb8:	9600      	str	r6, [sp, #0]
 800ceba:	682e      	ldr	r6, [r5, #0]
 800cebc:	9601      	str	r6, [sp, #4]
 800cebe:	6868      	ldr	r0, [r5, #4]
 800cec0:	9002      	str	r0, [sp, #8]
 800cec2:	68ab      	ldr	r3, [r5, #8]
 800cec4:	f104 0210 	add.w	r2, r4, #16
 800cec8:	9303      	str	r3, [sp, #12]
 800ceca:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cecc:	f005 f8ca 	bl	8012064 <GUI__DrawTwinArc4>
 800ced0:	2600      	movs	r6, #0
 800ced2:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800ced6:	f005 fc49 	bl	801276c <GUI_SetColor>
 800ceda:	69ef      	ldr	r7, [r5, #28]
 800cedc:	69a3      	ldr	r3, [r4, #24]
 800cede:	6960      	ldr	r0, [r4, #20]
 800cee0:	6921      	ldr	r1, [r4, #16]
 800cee2:	1bda      	subs	r2, r3, r7
 800cee4:	1830      	adds	r0, r6, r0
 800cee6:	1879      	adds	r1, r7, r1
 800cee8:	f005 fe8a 	bl	8012c00 <GUI_DrawHLine>
 800ceec:	69ef      	ldr	r7, [r5, #28]
 800ceee:	69e0      	ldr	r0, [r4, #28]
 800cef0:	6921      	ldr	r1, [r4, #16]
 800cef2:	69a2      	ldr	r2, [r4, #24]
 800cef4:	1b80      	subs	r0, r0, r6
 800cef6:	1879      	adds	r1, r7, r1
 800cef8:	1bd2      	subs	r2, r2, r7
 800cefa:	f005 fe81 	bl	8012c00 <GUI_DrawHLine>
 800cefe:	69eb      	ldr	r3, [r5, #28]
 800cf00:	6927      	ldr	r7, [r4, #16]
 800cf02:	6961      	ldr	r1, [r4, #20]
 800cf04:	69e2      	ldr	r2, [r4, #28]
 800cf06:	19f0      	adds	r0, r6, r7
 800cf08:	1859      	adds	r1, r3, r1
 800cf0a:	1ad2      	subs	r2, r2, r3
 800cf0c:	f005 fe36 	bl	8012b7c <GUI_DrawVLine>
 800cf10:	69eb      	ldr	r3, [r5, #28]
 800cf12:	69a0      	ldr	r0, [r4, #24]
 800cf14:	6967      	ldr	r7, [r4, #20]
 800cf16:	69e2      	ldr	r2, [r4, #28]
 800cf18:	1b80      	subs	r0, r0, r6
 800cf1a:	19d9      	adds	r1, r3, r7
 800cf1c:	1ad2      	subs	r2, r2, r3
 800cf1e:	3601      	adds	r6, #1
 800cf20:	f005 fe2c 	bl	8012b7c <GUI_DrawVLine>
 800cf24:	2e02      	cmp	r6, #2
 800cf26:	d1d4      	bne.n	800ced2 <BUTTON_DrawSkinFlex+0x52>
 800cf28:	68a8      	ldr	r0, [r5, #8]
 800cf2a:	f005 fc1f 	bl	801276c <GUI_SetColor>
 800cf2e:	69eb      	ldr	r3, [r5, #28]
 800cf30:	6920      	ldr	r0, [r4, #16]
 800cf32:	69e6      	ldr	r6, [r4, #28]
 800cf34:	6961      	ldr	r1, [r4, #20]
 800cf36:	18c7      	adds	r7, r0, r3
 800cf38:	1859      	adds	r1, r3, r1
 800cf3a:	1e7a      	subs	r2, r7, #1
 800cf3c:	1af3      	subs	r3, r6, r3
 800cf3e:	3002      	adds	r0, #2
 800cf40:	f005 fddc 	bl	8012afc <GUI_FillRect>
 800cf44:	69eb      	ldr	r3, [r5, #28]
 800cf46:	69a2      	ldr	r2, [r4, #24]
 800cf48:	6961      	ldr	r1, [r4, #20]
 800cf4a:	69e7      	ldr	r7, [r4, #28]
 800cf4c:	1ad0      	subs	r0, r2, r3
 800cf4e:	1859      	adds	r1, r3, r1
 800cf50:	3001      	adds	r0, #1
 800cf52:	3a02      	subs	r2, #2
 800cf54:	1afb      	subs	r3, r7, r3
 800cf56:	f005 fdd1 	bl	8012afc <GUI_FillRect>
 800cf5a:	69ee      	ldr	r6, [r5, #28]
 800cf5c:	e010      	b.n	800cf80 <BUTTON_DrawSkinFlex+0x100>
 800cf5e:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800cf62:	f104 0710 	add.w	r7, r4, #16
 800cf66:	f005 fc01 	bl	801276c <GUI_SetColor>
 800cf6a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800cf6e:	1830      	adds	r0, r6, r0
 800cf70:	1871      	adds	r1, r6, r1
 800cf72:	1b92      	subs	r2, r2, r6
 800cf74:	1b9b      	subs	r3, r3, r6
 800cf76:	3601      	adds	r6, #1
 800cf78:	f007 fa62 	bl	8014440 <GUI_DrawRect>
 800cf7c:	2e02      	cmp	r6, #2
 800cf7e:	d1ee      	bne.n	800cf5e <BUTTON_DrawSkinFlex+0xde>
 800cf80:	f104 0210 	add.w	r2, r4, #16
 800cf84:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cf86:	68ef      	ldr	r7, [r5, #12]
 800cf88:	9700      	str	r7, [sp, #0]
 800cf8a:	692f      	ldr	r7, [r5, #16]
 800cf8c:	18cb      	adds	r3, r1, r3
 800cf8e:	1830      	adds	r0, r6, r0
 800cf90:	3102      	adds	r1, #2
 800cf92:	1b92      	subs	r2, r2, r6
 800cf94:	105b      	asrs	r3, r3, #1
 800cf96:	9701      	str	r7, [sp, #4]
 800cf98:	f005 ff42 	bl	8012e20 <GUI_DrawGradientV>
 800cf9c:	69e3      	ldr	r3, [r4, #28]
 800cf9e:	6961      	ldr	r1, [r4, #20]
 800cfa0:	6920      	ldr	r0, [r4, #16]
 800cfa2:	185a      	adds	r2, r3, r1
 800cfa4:	1051      	asrs	r1, r2, #1
 800cfa6:	69a2      	ldr	r2, [r4, #24]
 800cfa8:	696c      	ldr	r4, [r5, #20]
 800cfaa:	9400      	str	r4, [sp, #0]
 800cfac:	69ac      	ldr	r4, [r5, #24]
 800cfae:	1830      	adds	r0, r6, r0
 800cfb0:	9401      	str	r4, [sp, #4]
 800cfb2:	3101      	adds	r1, #1
 800cfb4:	1b92      	subs	r2, r2, r6
 800cfb6:	3b02      	subs	r3, #2
 800cfb8:	f005 ff32 	bl	8012e20 <GUI_DrawGradientV>
 800cfbc:	e076      	b.n	800d0ac <BUTTON_DrawSkinFlex+0x22c>
 800cfbe:	6820      	ldr	r0, [r4, #0]
 800cfc0:	f006 ff9a 	bl	8013ef8 <GUI_ALLOC_LockH>
 800cfc4:	9004      	str	r0, [sp, #16]
 800cfc6:	6820      	ldr	r0, [r4, #0]
 800cfc8:	f000 fa90 	bl	800d4ec <WM__IsEnabled>
 800cfcc:	9d04      	ldr	r5, [sp, #16]
 800cfce:	b130      	cbz	r0, 800cfde <BUTTON_DrawSkinFlex+0x15e>
 800cfd0:	68a1      	ldr	r1, [r4, #8]
 800cfd2:	b951      	cbnz	r1, 800cfea <BUTTON_DrawSkinFlex+0x16a>
 800cfd4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800cfd6:	1c13      	adds	r3, r2, #0
 800cfd8:	bf18      	it	ne
 800cfda:	2301      	movne	r3, #1
 800cfdc:	e006      	b.n	800cfec <BUTTON_DrawSkinFlex+0x16c>
 800cfde:	6f68      	ldr	r0, [r5, #116]	; 0x74
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	bf14      	ite	ne
 800cfe4:	2302      	movne	r3, #2
 800cfe6:	2300      	moveq	r3, #0
 800cfe8:	e000      	b.n	800cfec <BUTTON_DrawSkinFlex+0x16c>
 800cfea:	2300      	movs	r3, #0
 800cfec:	a808      	add	r0, sp, #32
 800cfee:	f850 5d10 	ldr.w	r5, [r0, #-16]!
 800cff2:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 800cff6:	6ecd      	ldr	r5, [r1, #108]	; 0x6c
 800cff8:	f006 ff8c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800cffc:	2200      	movs	r2, #0
 800cffe:	4628      	mov	r0, r5
 800d000:	6821      	ldr	r1, [r4, #0]
 800d002:	4613      	mov	r3, r2
 800d004:	f007 ff2d 	bl	8014e62 <GUI_DRAW__Draw>
 800d008:	e050      	b.n	800d0ac <BUTTON_DrawSkinFlex+0x22c>
 800d00a:	6820      	ldr	r0, [r4, #0]
 800d00c:	f006 ff74 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d010:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800d012:	9004      	str	r0, [sp, #16]
 800d014:	2e00      	cmp	r6, #0
 800d016:	d046      	beq.n	800d0a6 <BUTTON_DrawSkinFlex+0x226>
 800d018:	68a1      	ldr	r1, [r4, #8]
 800d01a:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 800d01e:	b121      	cbz	r1, 800d02a <BUTTON_DrawSkinFlex+0x1aa>
 800d020:	2903      	cmp	r1, #3
 800d022:	bf0c      	ite	eq
 800d024:	2402      	moveq	r4, #2
 800d026:	2400      	movne	r4, #0
 800d028:	e000      	b.n	800d02c <BUTTON_DrawSkinFlex+0x1ac>
 800d02a:	2401      	movs	r4, #1
 800d02c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800d030:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800d032:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800d034:	f005 fb6c 	bl	8012710 <GUI_SetFont>
 800d038:	4620      	mov	r0, r4
 800d03a:	f005 fb97 	bl	801276c <GUI_SetColor>
 800d03e:	a806      	add	r0, sp, #24
 800d040:	f005 fd4c 	bl	8012adc <GUI_GetClientRect>
 800d044:	8ba8      	ldrh	r0, [r5, #28]
 800d046:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800d04a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d04e:	1881      	adds	r1, r0, r2
 800d050:	1a1c      	subs	r4, r3, r0
 800d052:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800d056:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d05a:	ac08      	add	r4, sp, #32
 800d05c:	1c82      	adds	r2, r0, #2
 800d05e:	f8ad 1018 	strh.w	r1, [sp, #24]
 800d062:	f8ad 201a 	strh.w	r2, [sp, #26]
 800d066:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800d06a:	f854 2d10 	ldr.w	r2, [r4, #-16]!
 800d06e:	1e8b      	subs	r3, r1, #2
 800d070:	a806      	add	r0, sp, #24
 800d072:	f9b2 105e 	ldrsh.w	r1, [r2, #94]	; 0x5e
 800d076:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 800d07a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d07e:	f005 fccb 	bl	8012a18 <GUI_MoveRect>
 800d082:	4620      	mov	r0, r4
 800d084:	f006 ff46 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d088:	2002      	movs	r0, #2
 800d08a:	f005 fb37 	bl	80126fc <GUI_SetTextMode>
 800d08e:	4630      	mov	r0, r6
 800d090:	f006 ff32 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d094:	ac08      	add	r4, sp, #32
 800d096:	a906      	add	r1, sp, #24
 800d098:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800d09c:	463a      	mov	r2, r7
 800d09e:	f006 f922 	bl	80132e6 <GUI_DispStringInRect>
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	e000      	b.n	800d0a8 <BUTTON_DrawSkinFlex+0x228>
 800d0a6:	a804      	add	r0, sp, #16
 800d0a8:	f006 ff34 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	b009      	add	sp, #36	; 0x24
 800d0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	08029698 	.word	0x08029698

0800d0b8 <_Create>:
 800d0b8:	b530      	push	{r4, r5, lr}
 800d0ba:	b08b      	sub	sp, #44	; 0x2c
 800d0bc:	2100      	movs	r1, #0
 800d0be:	4604      	mov	r4, r0
 800d0c0:	2224      	movs	r2, #36	; 0x24
 800d0c2:	a801      	add	r0, sp, #4
 800d0c4:	f00c fa96 	bl	80195f4 <memset>
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f006 ff15 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d0ce:	ab0a      	add	r3, sp, #40	; 0x28
 800d0d0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800d0d2:	f843 0d28 	str.w	r0, [r3, #-40]!
 800d0d6:	6895      	ldr	r5, [r2, #8]
 800d0d8:	4668      	mov	r0, sp
 800d0da:	f006 ff1b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d0de:	2000      	movs	r0, #0
 800d0e0:	9002      	str	r0, [sp, #8]
 800d0e2:	9401      	str	r4, [sp, #4]
 800d0e4:	6829      	ldr	r1, [r5, #0]
 800d0e6:	a801      	add	r0, sp, #4
 800d0e8:	4788      	blx	r1
 800d0ea:	b00b      	add	sp, #44	; 0x2c
 800d0ec:	bd30      	pop	{r4, r5, pc}

0800d0ee <_Paint>:
 800d0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f2:	b08a      	sub	sp, #40	; 0x28
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	f006 feff 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	a80a      	add	r0, sp, #40	; 0x28
 800d0fe:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800d100:	f840 3d28 	str.w	r3, [r0, #-40]!
 800d104:	4668      	mov	r0, sp
 800d106:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800d108:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 800d10a:	f006 ff03 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d10e:	4628      	mov	r0, r5
 800d110:	f000 fdb4 	bl	800dc7c <WM_GetWindowSizeX>
 800d114:	4680      	mov	r8, r0
 800d116:	4628      	mov	r0, r5
 800d118:	f000 fdc4 	bl	800dca4 <WM_GetWindowSizeY>
 800d11c:	2100      	movs	r1, #0
 800d11e:	1e43      	subs	r3, r0, #1
 800d120:	f108 32ff 	add.w	r2, r8, #4294967295
 800d124:	f016 0610 	ands.w	r6, r6, #16
 800d128:	9501      	str	r5, [sp, #4]
 800d12a:	9106      	str	r1, [sp, #24]
 800d12c:	9105      	str	r1, [sp, #20]
 800d12e:	9207      	str	r2, [sp, #28]
 800d130:	9308      	str	r3, [sp, #32]
 800d132:	d001      	beq.n	800d138 <_Paint+0x4a>
 800d134:	2203      	movs	r2, #3
 800d136:	e00a      	b.n	800d14e <_Paint+0x60>
 800d138:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800d13c:	b281      	uxth	r1, r0
 800d13e:	b109      	cbz	r1, 800d144 <_Paint+0x56>
 800d140:	9603      	str	r6, [sp, #12]
 800d142:	e005      	b.n	800d150 <_Paint+0x62>
 800d144:	07fb      	lsls	r3, r7, #31
 800d146:	d501      	bpl.n	800d14c <_Paint+0x5e>
 800d148:	2201      	movs	r2, #1
 800d14a:	e000      	b.n	800d14e <_Paint+0x60>
 800d14c:	2202      	movs	r2, #2
 800d14e:	9203      	str	r2, [sp, #12]
 800d150:	2305      	movs	r3, #5
 800d152:	9302      	str	r3, [sp, #8]
 800d154:	a801      	add	r0, sp, #4
 800d156:	47a0      	blx	r4
 800d158:	2006      	movs	r0, #6
 800d15a:	9002      	str	r0, [sp, #8]
 800d15c:	a801      	add	r0, sp, #4
 800d15e:	47a0      	blx	r4
 800d160:	2112      	movs	r1, #18
 800d162:	9102      	str	r1, [sp, #8]
 800d164:	a801      	add	r0, sp, #4
 800d166:	47a0      	blx	r4
 800d168:	220a      	movs	r2, #10
 800d16a:	9202      	str	r2, [sp, #8]
 800d16c:	a801      	add	r0, sp, #4
 800d16e:	47a0      	blx	r4
 800d170:	b00a      	add	sp, #40	; 0x28
 800d172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d178 <BUTTON_SetSkin>:
 800d178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d17a:	460d      	mov	r5, r1
 800d17c:	4604      	mov	r4, r0
 800d17e:	f006 febb 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d182:	4906      	ldr	r1, [pc, #24]	; (800d19c <BUTTON_SetSkin+0x24>)
 800d184:	4602      	mov	r2, r0
 800d186:	a802      	add	r0, sp, #8
 800d188:	6651      	str	r1, [r2, #100]	; 0x64
 800d18a:	f840 2d04 	str.w	r2, [r0, #-4]!
 800d18e:	6595      	str	r5, [r2, #88]	; 0x58
 800d190:	f006 fec0 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d194:	4620      	mov	r0, r4
 800d196:	f001 fb15 	bl	800e7c4 <WM_InvalidateWindow>
 800d19a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800d19c:	200002a4 	.word	0x200002a4

0800d1a0 <BUTTON_SetDefaultSkin>:
 800d1a0:	4903      	ldr	r1, [pc, #12]	; (800d1b0 <BUTTON_SetDefaultSkin+0x10>)
 800d1a2:	4a04      	ldr	r2, [pc, #16]	; (800d1b4 <BUTTON_SetDefaultSkin+0x14>)
 800d1a4:	4b04      	ldr	r3, [pc, #16]	; (800d1b8 <BUTTON_SetDefaultSkin+0x18>)
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800d1aa:	6248      	str	r0, [r1, #36]	; 0x24
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4770      	bx	lr
 800d1b0:	200002b4 	.word	0x200002b4
 800d1b4:	200002a4 	.word	0x200002a4
 800d1b8:	200002e4 	.word	0x200002e4

0800d1bc <BUTTON_CreateIndirect>:
 800d1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1be:	4604      	mov	r4, r0
 800d1c0:	b087      	sub	sp, #28
 800d1c2:	8a65      	ldrh	r5, [r4, #18]
 800d1c4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 800d1c8:	9100      	str	r1, [sp, #0]
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 800d1d0:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 800d1d4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 800d1d8:	9101      	str	r1, [sp, #4]
 800d1da:	9502      	str	r5, [sp, #8]
 800d1dc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d1e0:	69a5      	ldr	r5, [r4, #24]
 800d1e2:	9103      	str	r1, [sp, #12]
 800d1e4:	9504      	str	r5, [sp, #16]
 800d1e6:	eb0e 0103 	add.w	r1, lr, r3
 800d1ea:	1880      	adds	r0, r0, r2
 800d1ec:	4633      	mov	r3, r6
 800d1ee:	463a      	mov	r2, r7
 800d1f0:	f000 f8d6 	bl	800d3a0 <BUTTON_CreateUser>
 800d1f4:	6861      	ldr	r1, [r4, #4]
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	f000 f91a 	bl	800d430 <BUTTON_SetText>
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	b007      	add	sp, #28
 800d200:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d202 <BUTTON_CreateAsChild>:
 800d202:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d204:	9c06      	ldr	r4, [sp, #24]
 800d206:	9400      	str	r4, [sp, #0]
 800d208:	9c08      	ldr	r4, [sp, #32]
 800d20a:	9401      	str	r4, [sp, #4]
 800d20c:	2400      	movs	r4, #0
 800d20e:	9402      	str	r4, [sp, #8]
 800d210:	9c07      	ldr	r4, [sp, #28]
 800d212:	9403      	str	r4, [sp, #12]
 800d214:	f000 f8fc 	bl	800d410 <BUTTON_CreateEx>
 800d218:	b004      	add	sp, #16
 800d21a:	bd10      	pop	{r4, pc}

0800d21c <_OnButtonPressed>:
 800d21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d21e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d222:	4604      	mov	r4, r0
 800d224:	f007 fa77 	bl	8014716 <WIDGET_OrState>
 800d228:	4620      	mov	r0, r4
 800d22a:	f006 fe65 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d22e:	ab02      	add	r3, sp, #8
 800d230:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800d232:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d236:	4618      	mov	r0, r3
 800d238:	f006 fe6c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d23c:	07ab      	lsls	r3, r5, #30
 800d23e:	d503      	bpl.n	800d248 <_OnButtonPressed+0x2c>
 800d240:	4620      	mov	r0, r4
 800d242:	2101      	movs	r1, #1
 800d244:	f000 fc01 	bl	800da4a <WM_NotifyParent>
 800d248:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800d24a <_OnButtonReleased>:
 800d24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d24c:	4605      	mov	r5, r0
 800d24e:	460c      	mov	r4, r1
 800d250:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d254:	f007 fa74 	bl	8014740 <WIDGET_AndState>
 800d258:	4628      	mov	r0, r5
 800d25a:	f006 fe4d 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d25e:	4602      	mov	r2, r0
 800d260:	a802      	add	r0, sp, #8
 800d262:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800d264:	f840 2d04 	str.w	r2, [r0, #-4]!
 800d268:	8e17      	ldrh	r7, [r2, #48]	; 0x30
 800d26a:	f006 fe53 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d26e:	2c02      	cmp	r4, #2
 800d270:	d102      	bne.n	800d278 <_OnButtonReleased+0x2e>
 800d272:	4638      	mov	r0, r7
 800d274:	f005 fbaa 	bl	80129cc <GUI_StoreKey>
 800d278:	07b2      	lsls	r2, r6, #30
 800d27a:	d503      	bpl.n	800d284 <_OnButtonReleased+0x3a>
 800d27c:	4628      	mov	r0, r5
 800d27e:	4621      	mov	r1, r4
 800d280:	f000 fbe3 	bl	800da4a <WM_NotifyParent>
 800d284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d286 <_OnTouchDefault>:
 800d286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d288:	460d      	mov	r5, r1
 800d28a:	4604      	mov	r4, r0
 800d28c:	f006 fe34 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d290:	ab02      	add	r3, sp, #8
 800d292:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 800d294:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d298:	4618      	mov	r0, r3
 800d29a:	f006 fe3b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d29e:	68ea      	ldr	r2, [r5, #12]
 800d2a0:	b162      	cbz	r2, 800d2bc <_OnTouchDefault+0x36>
 800d2a2:	7a10      	ldrb	r0, [r2, #8]
 800d2a4:	f406 7180 	and.w	r1, r6, #256	; 0x100
 800d2a8:	b120      	cbz	r0, 800d2b4 <_OnTouchDefault+0x2e>
 800d2aa:	b959      	cbnz	r1, 800d2c4 <_OnTouchDefault+0x3e>
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f7ff ffb5 	bl	800d21c <_OnButtonPressed>
 800d2b2:	e007      	b.n	800d2c4 <_OnTouchDefault+0x3e>
 800d2b4:	b131      	cbz	r1, 800d2c4 <_OnTouchDefault+0x3e>
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	2102      	movs	r1, #2
 800d2ba:	e001      	b.n	800d2c0 <_OnTouchDefault+0x3a>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	2103      	movs	r1, #3
 800d2c0:	f7ff ffc3 	bl	800d24a <_OnButtonReleased>
 800d2c4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

0800d2c8 <BUTTON_Callback>:
 800d2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2ca:	6844      	ldr	r4, [r0, #4]
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f007 fa51 	bl	8014778 <WIDGET_HandleActive>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d05d      	beq.n	800d396 <BUTTON_Callback+0xce>
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	2b0f      	cmp	r3, #15
 800d2de:	d016      	beq.n	800d30e <BUTTON_Callback+0x46>
 800d2e0:	dc04      	bgt.n	800d2ec <BUTTON_Callback+0x24>
 800d2e2:	2b0b      	cmp	r3, #11
 800d2e4:	d023      	beq.n	800d32e <BUTTON_Callback+0x66>
 800d2e6:	2b0e      	cmp	r3, #14
 800d2e8:	d152      	bne.n	800d390 <BUTTON_Callback+0xc8>
 800d2ea:	e032      	b.n	800d352 <BUTTON_Callback+0x8a>
 800d2ec:	2b28      	cmp	r3, #40	; 0x28
 800d2ee:	d048      	beq.n	800d382 <BUTTON_Callback+0xba>
 800d2f0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800d2f4:	d005      	beq.n	800d302 <BUTTON_Callback+0x3a>
 800d2f6:	2b11      	cmp	r3, #17
 800d2f8:	d14a      	bne.n	800d390 <BUTTON_Callback+0xc8>
 800d2fa:	4827      	ldr	r0, [pc, #156]	; (800d398 <BUTTON_Callback+0xd0>)
 800d2fc:	6803      	ldr	r3, [r0, #0]
 800d2fe:	b913      	cbnz	r3, 800d306 <BUTTON_Callback+0x3e>
 800d300:	e049      	b.n	800d396 <BUTTON_Callback+0xce>
 800d302:	4926      	ldr	r1, [pc, #152]	; (800d39c <BUTTON_Callback+0xd4>)
 800d304:	680b      	ldr	r3, [r1, #0]
 800d306:	4620      	mov	r0, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	4798      	blx	r3
 800d30c:	e043      	b.n	800d396 <BUTTON_Callback+0xce>
 800d30e:	4620      	mov	r0, r4
 800d310:	f006 fdf2 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d314:	a902      	add	r1, sp, #8
 800d316:	f841 0d04 	str.w	r0, [r1, #-4]!
 800d31a:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800d31c:	682d      	ldr	r5, [r5, #0]
 800d31e:	4608      	mov	r0, r1
 800d320:	f006 fdf8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d324:	2d00      	cmp	r5, #0
 800d326:	d036      	beq.n	800d396 <BUTTON_Callback+0xce>
 800d328:	4620      	mov	r0, r4
 800d32a:	47a8      	blx	r5
 800d32c:	e033      	b.n	800d396 <BUTTON_Callback+0xce>
 800d32e:	4620      	mov	r0, r4
 800d330:	f006 fde2 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d334:	ac02      	add	r4, sp, #8
 800d336:	9001      	str	r0, [sp, #4]
 800d338:	3068      	adds	r0, #104	; 0x68
 800d33a:	f007 f82f 	bl	801439c <GUI_ALLOC_FreePtr>
 800d33e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800d342:	2103      	movs	r1, #3
 800d344:	306c      	adds	r0, #108	; 0x6c
 800d346:	f007 f831 	bl	80143ac <GUI_ALLOC_FreePtrArray>
 800d34a:	4620      	mov	r0, r4
 800d34c:	f006 fde2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d350:	e01e      	b.n	800d390 <BUTTON_Callback+0xc8>
 800d352:	68ea      	ldr	r2, [r5, #12]
 800d354:	ca0c      	ldmia	r2, {r2, r3}
 800d356:	2a0d      	cmp	r2, #13
 800d358:	d002      	beq.n	800d360 <BUTTON_Callback+0x98>
 800d35a:	2a20      	cmp	r2, #32
 800d35c:	d111      	bne.n	800d382 <BUTTON_Callback+0xba>
 800d35e:	e006      	b.n	800d36e <BUTTON_Callback+0xa6>
 800d360:	2b00      	cmp	r3, #0
 800d362:	dd0e      	ble.n	800d382 <BUTTON_Callback+0xba>
 800d364:	4620      	mov	r0, r4
 800d366:	f7ff ff59 	bl	800d21c <_OnButtonPressed>
 800d36a:	4620      	mov	r0, r4
 800d36c:	e005      	b.n	800d37a <BUTTON_Callback+0xb2>
 800d36e:	2b00      	cmp	r3, #0
 800d370:	4620      	mov	r0, r4
 800d372:	dd02      	ble.n	800d37a <BUTTON_Callback+0xb2>
 800d374:	f7ff ff52 	bl	800d21c <_OnButtonPressed>
 800d378:	e00d      	b.n	800d396 <BUTTON_Callback+0xce>
 800d37a:	2102      	movs	r1, #2
 800d37c:	f7ff ff65 	bl	800d24a <_OnButtonReleased>
 800d380:	e009      	b.n	800d396 <BUTTON_Callback+0xce>
 800d382:	68ea      	ldr	r2, [r5, #12]
 800d384:	b922      	cbnz	r2, 800d390 <BUTTON_Callback+0xc8>
 800d386:	4620      	mov	r0, r4
 800d388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d38c:	f007 f9d8 	bl	8014740 <WIDGET_AndState>
 800d390:	4628      	mov	r0, r5
 800d392:	f001 fe41 	bl	800f018 <WM_DefaultProc>
 800d396:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800d398:	2000e020 	.word	0x2000e020
 800d39c:	200002b0 	.word	0x200002b0

0800d3a0 <BUTTON_CreateUser>:
 800d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d3a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d3a8:	9400      	str	r4, [sp, #0]
 800d3aa:	4c16      	ldr	r4, [pc, #88]	; (800d404 <BUTTON_CreateUser+0x64>)
 800d3ac:	9701      	str	r7, [sp, #4]
 800d3ae:	9402      	str	r4, [sp, #8]
 800d3b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d3b2:	344c      	adds	r4, #76	; 0x4c
 800d3b4:	9403      	str	r4, [sp, #12]
 800d3b6:	f001 fac1 	bl	800e93c <WM_CreateWindowAsChild>
 800d3ba:	4607      	mov	r7, r0
 800d3bc:	b1f8      	cbz	r0, 800d3fe <BUTTON_CreateUser+0x5e>
 800d3be:	f006 fd9b 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d3c2:	4d11      	ldr	r5, [pc, #68]	; (800d408 <BUTTON_CreateUser+0x68>)
 800d3c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d3c6:	9005      	str	r0, [sp, #20]
 800d3c8:	2210      	movs	r2, #16
 800d3ca:	f007 f9cd 	bl	8014768 <WIDGET__Init>
 800d3ce:	ae06      	add	r6, sp, #24
 800d3d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3d2:	f856 ed04 	ldr.w	lr, [r6, #-4]!
 800d3d6:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 800d3da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d3e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3e8:	4c08      	ldr	r4, [pc, #32]	; (800d40c <BUTTON_CreateUser+0x6c>)
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 800d3f2:	f006 fd8f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d3f6:	6820      	ldr	r0, [r4, #0]
 800d3f8:	6841      	ldr	r1, [r0, #4]
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	4788      	blx	r1
 800d3fe:	4638      	mov	r0, r7
 800d400:	b007      	add	sp, #28
 800d402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d404:	0800d2c9 	.word	0x0800d2c9
 800d408:	200002b4 	.word	0x200002b4
 800d40c:	200002e4 	.word	0x200002e4

0800d410 <BUTTON_CreateEx>:
 800d410:	b510      	push	{r4, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	9c08      	ldr	r4, [sp, #32]
 800d416:	9400      	str	r4, [sp, #0]
 800d418:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d41a:	9401      	str	r4, [sp, #4]
 800d41c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d41e:	9402      	str	r4, [sp, #8]
 800d420:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d422:	9403      	str	r4, [sp, #12]
 800d424:	2400      	movs	r4, #0
 800d426:	9404      	str	r4, [sp, #16]
 800d428:	f7ff ffba 	bl	800d3a0 <BUTTON_CreateUser>
 800d42c:	b006      	add	sp, #24
 800d42e:	bd10      	pop	{r4, pc}

0800d430 <BUTTON_SetText>:
 800d430:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d432:	460c      	mov	r4, r1
 800d434:	4605      	mov	r5, r0
 800d436:	b300      	cbz	r0, 800d47a <BUTTON_SetText+0x4a>
 800d438:	f006 fd5e 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d43c:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800d43e:	9000      	str	r0, [sp, #0]
 800d440:	4668      	mov	r0, sp
 800d442:	9601      	str	r6, [sp, #4]
 800d444:	f006 fd66 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d448:	4621      	mov	r1, r4
 800d44a:	a801      	add	r0, sp, #4
 800d44c:	f004 fc2c 	bl	8011ca8 <GUI__SetText>
 800d450:	f1d0 0401 	rsbs	r4, r0, #1
 800d454:	bf38      	it	cc
 800d456:	2400      	movcc	r4, #0
 800d458:	b984      	cbnz	r4, 800d47c <BUTTON_SetText+0x4c>
 800d45a:	9b01      	ldr	r3, [sp, #4]
 800d45c:	42b3      	cmp	r3, r6
 800d45e:	d008      	beq.n	800d472 <BUTTON_SetText+0x42>
 800d460:	4628      	mov	r0, r5
 800d462:	f006 fd49 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d466:	9901      	ldr	r1, [sp, #4]
 800d468:	9000      	str	r0, [sp, #0]
 800d46a:	6681      	str	r1, [r0, #104]	; 0x68
 800d46c:	4668      	mov	r0, sp
 800d46e:	f006 fd51 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d472:	4628      	mov	r0, r5
 800d474:	f001 f9a6 	bl	800e7c4 <WM_InvalidateWindow>
 800d478:	e000      	b.n	800d47c <BUTTON_SetText+0x4c>
 800d47a:	2401      	movs	r4, #1
 800d47c:	4620      	mov	r0, r4
 800d47e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800d480 <BUTTON_SetFont>:
 800d480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d482:	460c      	mov	r4, r1
 800d484:	4605      	mov	r5, r0
 800d486:	b158      	cbz	r0, 800d4a0 <BUTTON_SetFont+0x20>
 800d488:	f006 fd36 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d48c:	4602      	mov	r2, r0
 800d48e:	a802      	add	r0, sp, #8
 800d490:	6554      	str	r4, [r2, #84]	; 0x54
 800d492:	f840 2d04 	str.w	r2, [r0, #-4]!
 800d496:	f006 fd3d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d49a:	4628      	mov	r0, r5
 800d49c:	f001 f992 	bl	800e7c4 <WM_InvalidateWindow>
 800d4a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800d4a2 <BUTTON_SetFocussable>:
 800d4a2:	b111      	cbz	r1, 800d4aa <BUTTON_SetFocussable+0x8>
 800d4a4:	2110      	movs	r1, #16
 800d4a6:	f007 b936 	b.w	8014716 <WIDGET_OrState>
 800d4aa:	2110      	movs	r1, #16
 800d4ac:	f007 b948 	b.w	8014740 <WIDGET_AndState>

0800d4b0 <WM__SendMessage>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	4c0d      	ldr	r4, [pc, #52]	; (800d4e8 <WM__SendMessage+0x38>)
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	2b13      	cmp	r3, #19
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	460d      	mov	r5, r1
 800d4bc:	dc12      	bgt.n	800d4e4 <WM__SendMessage+0x34>
 800d4be:	f006 fd11 	bl	8013ee4 <GUI_ALLOC_h2p>
 800d4c2:	6901      	ldr	r1, [r0, #16]
 800d4c4:	606e      	str	r6, [r5, #4]
 800d4c6:	b141      	cbz	r1, 800d4da <WM__SendMessage+0x2a>
 800d4c8:	6822      	ldr	r2, [r4, #0]
 800d4ca:	1c50      	adds	r0, r2, #1
 800d4cc:	6020      	str	r0, [r4, #0]
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	4788      	blx	r1
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	1e59      	subs	r1, r3, #1
 800d4d6:	6021      	str	r1, [r4, #0]
 800d4d8:	bd70      	pop	{r4, r5, r6, pc}
 800d4da:	4628      	mov	r0, r5
 800d4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4e0:	f001 bd9a 	b.w	800f018 <WM_DefaultProc>
 800d4e4:	bd70      	pop	{r4, r5, r6, pc}
 800d4e6:	bf00      	nop
 800d4e8:	2000e024 	.word	0x2000e024

0800d4ec <WM__IsEnabled>:
 800d4ec:	b508      	push	{r3, lr}
 800d4ee:	f006 fcf9 	bl	8013ee4 <GUI_ALLOC_h2p>
 800d4f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d4f4:	f080 0110 	eor.w	r1, r0, #16
 800d4f8:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800d4fc:	bd08      	pop	{r3, pc}

0800d4fe <WM__IsAncestor>:
 800d4fe:	b510      	push	{r4, lr}
 800d500:	460c      	mov	r4, r1
 800d502:	b908      	cbnz	r0, 800d508 <WM__IsAncestor+0xa>
 800d504:	2000      	movs	r0, #0
 800d506:	bd10      	pop	{r4, pc}
 800d508:	2900      	cmp	r1, #0
 800d50a:	d0fb      	beq.n	800d504 <WM__IsAncestor+0x6>
 800d50c:	f006 fcea 	bl	8013ee4 <GUI_ALLOC_h2p>
 800d510:	6980      	ldr	r0, [r0, #24]
 800d512:	42a0      	cmp	r0, r4
 800d514:	d002      	beq.n	800d51c <WM__IsAncestor+0x1e>
 800d516:	2800      	cmp	r0, #0
 800d518:	d1f8      	bne.n	800d50c <WM__IsAncestor+0xe>
 800d51a:	e7f3      	b.n	800d504 <WM__IsAncestor+0x6>
 800d51c:	2001      	movs	r0, #1
 800d51e:	bd10      	pop	{r4, pc}

0800d520 <WM__IsAncestorOrSelf>:
 800d520:	4288      	cmp	r0, r1
 800d522:	d001      	beq.n	800d528 <WM__IsAncestorOrSelf+0x8>
 800d524:	f7ff bfeb 	b.w	800d4fe <WM__IsAncestor>
 800d528:	2001      	movs	r0, #1
 800d52a:	4770      	bx	lr

0800d52c <WM__GetUserDataEx>:
 800d52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d52e:	460f      	mov	r7, r1
 800d530:	4614      	mov	r4, r2
 800d532:	461e      	mov	r6, r3
 800d534:	4605      	mov	r5, r0
 800d536:	b1a0      	cbz	r0, 800d562 <WM__GetUserDataEx+0x36>
 800d538:	f006 fd0c 	bl	8013f54 <GUI_ALLOC_GetSize>
 800d53c:	1b80      	subs	r0, r0, r6
 800d53e:	4284      	cmp	r4, r0
 800d540:	bfa8      	it	ge
 800d542:	4604      	movge	r4, r0
 800d544:	4628      	mov	r0, r5
 800d546:	f006 fcd7 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d54a:	ad02      	add	r5, sp, #8
 800d54c:	4601      	mov	r1, r0
 800d54e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d552:	1989      	adds	r1, r1, r6
 800d554:	4638      	mov	r0, r7
 800d556:	4622      	mov	r2, r4
 800d558:	f7f3 fd5c 	bl	8001014 <memcpy>
 800d55c:	4628      	mov	r0, r5
 800d55e:	f006 fcd9 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d562:	4620      	mov	r0, r4
 800d564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d566 <WM_GetUserData>:
 800d566:	232c      	movs	r3, #44	; 0x2c
 800d568:	f7ff bfe0 	b.w	800d52c <WM__GetUserDataEx>

0800d56c <WM_InvalidateWindowAndDescs>:
 800d56c:	b510      	push	{r4, lr}
 800d56e:	4604      	mov	r4, r0
 800d570:	b170      	cbz	r0, 800d590 <WM_InvalidateWindowAndDescs+0x24>
 800d572:	f001 f927 	bl	800e7c4 <WM_InvalidateWindow>
 800d576:	4620      	mov	r0, r4
 800d578:	f000 fbde 	bl	800dd38 <WM_GetFirstChild>
 800d57c:	4604      	mov	r4, r0
 800d57e:	b13c      	cbz	r4, 800d590 <WM_InvalidateWindowAndDescs+0x24>
 800d580:	4620      	mov	r0, r4
 800d582:	f7ff fff3 	bl	800d56c <WM_InvalidateWindowAndDescs>
 800d586:	4620      	mov	r0, r4
 800d588:	f006 fcac 	bl	8013ee4 <GUI_ALLOC_h2p>
 800d58c:	6a04      	ldr	r4, [r0, #32]
 800d58e:	e7f6      	b.n	800d57e <WM_InvalidateWindowAndDescs+0x12>
 800d590:	bd10      	pop	{r4, pc}

0800d592 <WM_ShowWindow>:
 800d592:	b513      	push	{r0, r1, r4, lr}
 800d594:	4604      	mov	r4, r0
 800d596:	b170      	cbz	r0, 800d5b6 <WM_ShowWindow+0x24>
 800d598:	f006 fcae 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d59c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d59e:	9001      	str	r0, [sp, #4]
 800d5a0:	0793      	lsls	r3, r2, #30
 800d5a2:	d405      	bmi.n	800d5b0 <WM_ShowWindow+0x1e>
 800d5a4:	f042 0102 	orr.w	r1, r2, #2
 800d5a8:	6281      	str	r1, [r0, #40]	; 0x28
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f7ff ffde 	bl	800d56c <WM_InvalidateWindowAndDescs>
 800d5b0:	a801      	add	r0, sp, #4
 800d5b2:	f006 fcaf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d5b6:	bd1c      	pop	{r2, r3, r4, pc}

0800d5b8 <WM_SetUserClipRect>:
 800d5b8:	4b04      	ldr	r3, [pc, #16]	; (800d5cc <WM_SetUserClipRect+0x14>)
 800d5ba:	6819      	ldr	r1, [r3, #0]
 800d5bc:	b510      	push	{r4, lr}
 800d5be:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800d5c0:	6448      	str	r0, [r1, #68]	; 0x44
 800d5c2:	f000 ff4b 	bl	800e45c <WM__ActivateClipRect>
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	bd10      	pop	{r4, pc}
 800d5ca:	bf00      	nop
 800d5cc:	20000308 	.word	0x20000308

0800d5d0 <WM_SetHasTrans>:
 800d5d0:	b513      	push	{r0, r1, r4, lr}
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	b1b8      	cbz	r0, 800d606 <WM_SetHasTrans+0x36>
 800d5d6:	f006 fc8f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d5da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d5dc:	9001      	str	r0, [sp, #4]
 800d5de:	07db      	lsls	r3, r3, #31
 800d5e0:	d40e      	bmi.n	800d600 <WM_SetHasTrans+0x30>
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f008 f854 	bl	8015690 <WM_ValidateWindow>
 800d5e8:	9801      	ldr	r0, [sp, #4]
 800d5ea:	4b07      	ldr	r3, [pc, #28]	; (800d608 <WM_SetHasTrans+0x38>)
 800d5ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d5ee:	f042 0101 	orr.w	r1, r2, #1
 800d5f2:	6281      	str	r1, [r0, #40]	; 0x28
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	1c42      	adds	r2, r0, #1
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	f001 f8e2 	bl	800e7c4 <WM_InvalidateWindow>
 800d600:	a801      	add	r0, sp, #4
 800d602:	f006 fc87 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d606:	bd1c      	pop	{r2, r3, r4, pc}
 800d608:	2000eb34 	.word	0x2000eb34

0800d60c <WM_GetHasTrans>:
 800d60c:	b508      	push	{r3, lr}
 800d60e:	b128      	cbz	r0, 800d61c <WM_GetHasTrans+0x10>
 800d610:	f006 fc68 	bl	8013ee4 <GUI_ALLOC_h2p>
 800d614:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d616:	f000 0001 	and.w	r0, r0, #1
 800d61a:	bd08      	pop	{r3, pc}
 800d61c:	bd08      	pop	{r3, pc}

0800d61e <WM_SetSize>:
 800d61e:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800d622:	460e      	mov	r6, r1
 800d624:	4690      	mov	r8, r2
 800d626:	4607      	mov	r7, r0
 800d628:	b1d8      	cbz	r0, 800d662 <WM_SetSize+0x44>
 800d62a:	f006 fc65 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d62e:	4603      	mov	r3, r0
 800d630:	a802      	add	r0, sp, #8
 800d632:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d636:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d63a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d63e:	1a8d      	subs	r5, r1, r2
 800d640:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d648:	43e9      	mvns	r1, r5
 800d64a:	1ad5      	subs	r5, r2, r3
 800d64c:	1876      	adds	r6, r6, r1
 800d64e:	43e9      	mvns	r1, r5
 800d650:	eb08 0501 	add.w	r5, r8, r1
 800d654:	f006 fc5e 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d658:	4638      	mov	r0, r7
 800d65a:	4631      	mov	r1, r6
 800d65c:	462a      	mov	r2, r5
 800d65e:	f000 f97a 	bl	800d956 <WM_ResizeWindow>
 800d662:	e8bd 81ee 	ldmia.w	sp!, {r1, r2, r3, r5, r6, r7, r8, pc}

0800d666 <_GetPrevChild>:
 800d666:	b510      	push	{r4, lr}
 800d668:	4604      	mov	r4, r0
 800d66a:	b918      	cbnz	r0, 800d674 <_GetPrevChild+0xe>
 800d66c:	4620      	mov	r0, r4
 800d66e:	f007 ffe7 	bl	8015640 <WM__GetLastSibling>
 800d672:	e003      	b.n	800d67c <_GetPrevChild+0x16>
 800d674:	f007 ffd1 	bl	801561a <WM__GetPrevSibling>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d0f7      	beq.n	800d66c <_GetPrevChild+0x6>
 800d67c:	42a0      	cmp	r0, r4
 800d67e:	bf08      	it	eq
 800d680:	2000      	moveq	r0, #0
 800d682:	bd10      	pop	{r4, pc}

0800d684 <WM_SetFocusOnPrevChild>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4604      	mov	r4, r0
 800d688:	b1c0      	cbz	r0, 800d6bc <WM_SetFocusOnPrevChild+0x38>
 800d68a:	f007 ffe5 	bl	8015658 <WM__GetFocussedChild>
 800d68e:	f7ff ffea 	bl	800d666 <_GetPrevChild>
 800d692:	4605      	mov	r5, r0
 800d694:	4604      	mov	r4, r0
 800d696:	4620      	mov	r0, r4
 800d698:	f000 faa2 	bl	800dbe0 <WM_IsFocussable>
 800d69c:	b930      	cbnz	r0, 800d6ac <WM_SetFocusOnPrevChild+0x28>
 800d69e:	b12c      	cbz	r4, 800d6ac <WM_SetFocusOnPrevChild+0x28>
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f7ff ffe0 	bl	800d666 <_GetPrevChild>
 800d6a6:	42a8      	cmp	r0, r5
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	d1f4      	bne.n	800d696 <WM_SetFocusOnPrevChild+0x12>
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f000 f84b 	bl	800d748 <WM_SetFocus>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	bf0c      	ite	eq
 800d6b6:	4620      	moveq	r0, r4
 800d6b8:	2000      	movne	r0, #0
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	bd38      	pop	{r3, r4, r5, pc}

0800d6be <_GetNextChild>:
 800d6be:	b538      	push	{r3, r4, r5, lr}
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	b921      	cbnz	r1, 800d6d0 <_GetNextChild+0x12>
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	f006 fc0c 	bl	8013ee4 <GUI_ALLOC_h2p>
 800d6cc:	69c0      	ldr	r0, [r0, #28]
 800d6ce:	e005      	b.n	800d6dc <_GetNextChild+0x1e>
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	f006 fc07 	bl	8013ee4 <GUI_ALLOC_h2p>
 800d6d6:	6a00      	ldr	r0, [r0, #32]
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d0f4      	beq.n	800d6c6 <_GetNextChild+0x8>
 800d6dc:	42a0      	cmp	r0, r4
 800d6de:	bf08      	it	eq
 800d6e0:	2000      	moveq	r0, #0
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}

0800d6e4 <WM_SetFocusOnNextChild>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	4605      	mov	r5, r0
 800d6e8:	b340      	cbz	r0, 800d73c <WM_SetFocusOnNextChild+0x58>
 800d6ea:	f007 ffb5 	bl	8015658 <WM__GetFocussedChild>
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	f7ff ffe4 	bl	800d6be <_GetNextChild>
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 fa70 	bl	800dbe0 <WM_IsFocussable>
 800d700:	b938      	cbnz	r0, 800d712 <WM_SetFocusOnNextChild+0x2e>
 800d702:	b13c      	cbz	r4, 800d714 <WM_SetFocusOnNextChild+0x30>
 800d704:	4621      	mov	r1, r4
 800d706:	4628      	mov	r0, r5
 800d708:	f7ff ffd9 	bl	800d6be <_GetNextChild>
 800d70c:	42b0      	cmp	r0, r6
 800d70e:	4604      	mov	r4, r0
 800d710:	d1f3      	bne.n	800d6fa <WM_SetFocusOnNextChild+0x16>
 800d712:	b90c      	cbnz	r4, 800d718 <WM_SetFocusOnNextChild+0x34>
 800d714:	2400      	movs	r4, #0
 800d716:	e012      	b.n	800d73e <WM_SetFocusOnNextChild+0x5a>
 800d718:	4d0a      	ldr	r5, [pc, #40]	; (800d744 <WM_SetFocusOnNextChild+0x60>)
 800d71a:	4620      	mov	r0, r4
 800d71c:	682e      	ldr	r6, [r5, #0]
 800d71e:	f001 f855 	bl	800e7cc <WM__GetTopLevelLayer>
 800d722:	3001      	adds	r0, #1
 800d724:	d00b      	beq.n	800d73e <WM_SetFocusOnNextChild+0x5a>
 800d726:	4620      	mov	r0, r4
 800d728:	f001 f850 	bl	800e7cc <WM__GetTopLevelLayer>
 800d72c:	6028      	str	r0, [r5, #0]
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 f80a 	bl	800d748 <WM_SetFocus>
 800d734:	602e      	str	r6, [r5, #0]
 800d736:	2800      	cmp	r0, #0
 800d738:	d1ec      	bne.n	800d714 <WM_SetFocusOnNextChild+0x30>
 800d73a:	e000      	b.n	800d73e <WM_SetFocusOnNextChild+0x5a>
 800d73c:	4604      	mov	r4, r0
 800d73e:	4620      	mov	r0, r4
 800d740:	bd70      	pop	{r4, r5, r6, pc}
 800d742:	bf00      	nop
 800d744:	2000eb0c 	.word	0x2000eb0c

0800d748 <WM_SetFocus>:
 800d748:	b530      	push	{r4, r5, lr}
 800d74a:	b087      	sub	sp, #28
 800d74c:	4604      	mov	r4, r0
 800d74e:	2100      	movs	r1, #0
 800d750:	a802      	add	r0, sp, #8
 800d752:	2210      	movs	r2, #16
 800d754:	f00b ff4e 	bl	80195f4 <memset>
 800d758:	2c00      	cmp	r4, #0
 800d75a:	d03a      	beq.n	800d7d2 <WM_SetFocus+0x8a>
 800d75c:	4b1f      	ldr	r3, [pc, #124]	; (800d7dc <WM_SetFocus+0x94>)
 800d75e:	4820      	ldr	r0, [pc, #128]	; (800d7e0 <WM_SetFocus+0x98>)
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d766:	4284      	cmp	r4, r0
 800d768:	d033      	beq.n	800d7d2 <WM_SetFocus+0x8a>
 800d76a:	211e      	movs	r1, #30
 800d76c:	e88d 0011 	stmia.w	sp, {r0, r4}
 800d770:	9102      	str	r1, [sp, #8]
 800d772:	b110      	cbz	r0, 800d77a <WM_SetFocus+0x32>
 800d774:	a902      	add	r1, sp, #8
 800d776:	f7ff fe9b 	bl	800d4b0 <WM__SendMessage>
 800d77a:	2501      	movs	r5, #1
 800d77c:	4620      	mov	r0, r4
 800d77e:	a902      	add	r1, sp, #8
 800d780:	9505      	str	r5, [sp, #20]
 800d782:	f7ff fe95 	bl	800d4b0 <WM__SendMessage>
 800d786:	9d05      	ldr	r5, [sp, #20]
 800d788:	bb25      	cbnz	r5, 800d7d4 <WM_SetFocus+0x8c>
 800d78a:	4b14      	ldr	r3, [pc, #80]	; (800d7dc <WM_SetFocus+0x94>)
 800d78c:	4814      	ldr	r0, [pc, #80]	; (800d7e0 <WM_SetFocus+0x98>)
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
 800d794:	4620      	mov	r0, r4
 800d796:	f000 faa4 	bl	800dce2 <WM_GetParent>
 800d79a:	4604      	mov	r4, r0
 800d79c:	b138      	cbz	r0, 800d7ae <WM_SetFocus+0x66>
 800d79e:	a900      	add	r1, sp, #0
 800d7a0:	2220      	movs	r2, #32
 800d7a2:	9105      	str	r1, [sp, #20]
 800d7a4:	a902      	add	r1, sp, #8
 800d7a6:	9202      	str	r2, [sp, #8]
 800d7a8:	f7ff fe82 	bl	800d4b0 <WM__SendMessage>
 800d7ac:	e7f2      	b.n	800d794 <WM_SetFocus+0x4c>
 800d7ae:	9c00      	ldr	r4, [sp, #0]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 fa13 	bl	800dbdc <WM_IsWindow>
 800d7b6:	b168      	cbz	r0, 800d7d4 <WM_SetFocus+0x8c>
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f000 fa92 	bl	800dce2 <WM_GetParent>
 800d7be:	4604      	mov	r4, r0
 800d7c0:	b140      	cbz	r0, 800d7d4 <WM_SetFocus+0x8c>
 800d7c2:	2120      	movs	r1, #32
 800d7c4:	9102      	str	r1, [sp, #8]
 800d7c6:	ab00      	add	r3, sp, #0
 800d7c8:	a902      	add	r1, sp, #8
 800d7ca:	9305      	str	r3, [sp, #20]
 800d7cc:	f7ff fe70 	bl	800d4b0 <WM__SendMessage>
 800d7d0:	e7f2      	b.n	800d7b8 <WM_SetFocus+0x70>
 800d7d2:	2501      	movs	r5, #1
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	b007      	add	sp, #28
 800d7d8:	bd30      	pop	{r4, r5, pc}
 800d7da:	bf00      	nop
 800d7dc:	2000eb0c 	.word	0x2000eb0c
 800d7e0:	2000eafc 	.word	0x2000eafc

0800d7e4 <WM_SetDesktopColorEx>:
 800d7e4:	2901      	cmp	r1, #1
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	bf88      	it	hi
 800d7ea:	f06f 4470 	mvnhi.w	r4, #4026531840	; 0xf0000000
 800d7ee:	d809      	bhi.n	800d804 <WM_SetDesktopColorEx+0x20>
 800d7f0:	4b05      	ldr	r3, [pc, #20]	; (800d808 <WM_SetDesktopColorEx+0x24>)
 800d7f2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800d7f6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 800d7fa:	4804      	ldr	r0, [pc, #16]	; (800d80c <WM_SetDesktopColorEx+0x28>)
 800d7fc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d800:	f000 ffe0 	bl	800e7c4 <WM_InvalidateWindow>
 800d804:	4620      	mov	r0, r4
 800d806:	bd10      	pop	{r4, pc}
 800d808:	2000eb18 	.word	0x2000eb18
 800d80c:	2000eaec 	.word	0x2000eaec

0800d810 <WM_SetDesktopColor>:
 800d810:	4b02      	ldr	r3, [pc, #8]	; (800d81c <WM_SetDesktopColor+0xc>)
 800d812:	6819      	ldr	r1, [r3, #0]
 800d814:	7c49      	ldrb	r1, [r1, #17]
 800d816:	f7ff bfe5 	b.w	800d7e4 <WM_SetDesktopColorEx>
 800d81a:	bf00      	nop
 800d81c:	20000308 	.word	0x20000308

0800d820 <WM_SetCaptureMove>:
 800d820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d824:	b085      	sub	sp, #20
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	4691      	mov	r9, r2
 800d82c:	4698      	mov	r8, r3
 800d82e:	f000 fa09 	bl	800dc44 <WM_HasCaptured>
 800d832:	4e21      	ldr	r6, [pc, #132]	; (800d8b8 <WM_SetCaptureMove+0x98>)
 800d834:	b940      	cbnz	r0, 800d848 <WM_SetCaptureMove+0x28>
 800d836:	4620      	mov	r0, r4
 800d838:	2101      	movs	r1, #1
 800d83a:	f000 f859 	bl	800d8f0 <WM_SetCapture>
 800d83e:	682b      	ldr	r3, [r5, #0]
 800d840:	6868      	ldr	r0, [r5, #4]
 800d842:	8033      	strh	r3, [r6, #0]
 800d844:	8070      	strh	r0, [r6, #2]
 800d846:	e034      	b.n	800d8b2 <WM_SetCaptureMove+0x92>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800d84e:	f9b6 7000 	ldrsh.w	r7, [r6]
 800d852:	686d      	ldr	r5, [r5, #4]
 800d854:	1bdf      	subs	r7, r3, r7
 800d856:	1a2d      	subs	r5, r5, r0
 800d858:	4620      	mov	r0, r4
 800d85a:	f1b9 0f00 	cmp.w	r9, #0
 800d85e:	d102      	bne.n	800d866 <WM_SetCaptureMove+0x46>
 800d860:	f1b8 0f00 	cmp.w	r8, #0
 800d864:	d021      	beq.n	800d8aa <WM_SetCaptureMove+0x8a>
 800d866:	4669      	mov	r1, sp
 800d868:	f000 fa30 	bl	800dccc <WM_GetWindowRectEx>
 800d86c:	f1b8 0f00 	cmp.w	r8, #0
 800d870:	d005      	beq.n	800d87e <WM_SetCaptureMove+0x5e>
 800d872:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800d876:	1e4a      	subs	r2, r1, #1
 800d878:	4490      	add	r8, r2
 800d87a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d87e:	4620      	mov	r0, r4
 800d880:	f000 fa2f 	bl	800dce2 <WM_GetParent>
 800d884:	a902      	add	r1, sp, #8
 800d886:	f000 fa21 	bl	800dccc <WM_GetWindowRectEx>
 800d88a:	4668      	mov	r0, sp
 800d88c:	4639      	mov	r1, r7
 800d88e:	462a      	mov	r2, r5
 800d890:	f005 f8c2 	bl	8012a18 <GUI_MoveRect>
 800d894:	a802      	add	r0, sp, #8
 800d896:	4601      	mov	r1, r0
 800d898:	464a      	mov	r2, r9
 800d89a:	f004 fa3f 	bl	8011d1c <GUI__ReduceRect>
 800d89e:	4668      	mov	r0, sp
 800d8a0:	a902      	add	r1, sp, #8
 800d8a2:	f004 ffbd 	bl	8012820 <GUI_RectsIntersect>
 800d8a6:	b120      	cbz	r0, 800d8b2 <WM_SetCaptureMove+0x92>
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4639      	mov	r1, r7
 800d8ac:	462a      	mov	r2, r5
 800d8ae:	f000 f988 	bl	800dbc2 <WM_MoveWindow>
 800d8b2:	b005      	add	sp, #20
 800d8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8b8:	2000e028 	.word	0x2000e028

0800d8bc <WM__ReleaseCapture>:
 800d8bc:	b530      	push	{r4, r5, lr}
 800d8be:	4d0a      	ldr	r5, [pc, #40]	; (800d8e8 <WM__ReleaseCapture+0x2c>)
 800d8c0:	4c0a      	ldr	r4, [pc, #40]	; (800d8ec <WM__ReleaseCapture+0x30>)
 800d8c2:	682b      	ldr	r3, [r5, #0]
 800d8c4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800d8c8:	b085      	sub	sp, #20
 800d8ca:	b150      	cbz	r0, 800d8e2 <WM__ReleaseCapture+0x26>
 800d8cc:	a904      	add	r1, sp, #16
 800d8ce:	2218      	movs	r2, #24
 800d8d0:	f841 2d10 	str.w	r2, [r1, #-16]!
 800d8d4:	4669      	mov	r1, sp
 800d8d6:	f7ff fdeb 	bl	800d4b0 <WM__SendMessage>
 800d8da:	6828      	ldr	r0, [r5, #0]
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800d8e2:	b005      	add	sp, #20
 800d8e4:	bd30      	pop	{r4, r5, pc}
 800d8e6:	bf00      	nop
 800d8e8:	2000eb0c 	.word	0x2000eb0c
 800d8ec:	2000eb28 	.word	0x2000eb28

0800d8f0 <WM_SetCapture>:
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	4b09      	ldr	r3, [pc, #36]	; (800d918 <WM_SetCapture+0x28>)
 800d8f4:	4a09      	ldr	r2, [pc, #36]	; (800d91c <WM_SetCapture+0x2c>)
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	6818      	ldr	r0, [r3, #0]
 800d8fa:	460f      	mov	r7, r1
 800d8fc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800d900:	42a1      	cmp	r1, r4
 800d902:	4615      	mov	r5, r2
 800d904:	461e      	mov	r6, r3
 800d906:	d001      	beq.n	800d90c <WM_SetCapture+0x1c>
 800d908:	f7ff ffd8 	bl	800d8bc <WM__ReleaseCapture>
 800d90c:	6832      	ldr	r2, [r6, #0]
 800d90e:	4b04      	ldr	r3, [pc, #16]	; (800d920 <WM_SetCapture+0x30>)
 800d910:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 800d914:	701f      	strb	r7, [r3, #0]
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d918:	2000eb0c 	.word	0x2000eb0c
 800d91c:	2000eb28 	.word	0x2000eb28
 800d920:	2000eb10 	.word	0x2000eb10

0800d924 <WM_ReleaseCapture>:
 800d924:	f7ff bfca 	b.w	800d8bc <WM__ReleaseCapture>

0800d928 <WM_SetCallback>:
 800d928:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d92a:	460e      	mov	r6, r1
 800d92c:	4605      	mov	r5, r0
 800d92e:	b168      	cbz	r0, 800d94c <WM_SetCallback+0x24>
 800d930:	f006 fae2 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d934:	4602      	mov	r2, r0
 800d936:	a802      	add	r0, sp, #8
 800d938:	6914      	ldr	r4, [r2, #16]
 800d93a:	f840 2d04 	str.w	r2, [r0, #-4]!
 800d93e:	6116      	str	r6, [r2, #16]
 800d940:	f006 fae8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800d944:	4628      	mov	r0, r5
 800d946:	f000 ff3d 	bl	800e7c4 <WM_InvalidateWindow>
 800d94a:	e000      	b.n	800d94e <WM_SetCallback+0x26>
 800d94c:	4604      	mov	r4, r0
 800d94e:	4620      	mov	r0, r4
 800d950:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0800d952 <WM_SendMessageNoPara>:
 800d952:	f007 be45 	b.w	80155e0 <WM__SendMessageNoPara>

0800d956 <WM_ResizeWindow>:
 800d956:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d958:	ea52 0301 	orrs.w	r3, r2, r1
 800d95c:	b08b      	sub	sp, #44	; 0x2c
 800d95e:	4606      	mov	r6, r0
 800d960:	460c      	mov	r4, r1
 800d962:	4615      	mov	r5, r2
 800d964:	d06f      	beq.n	800da46 <WM_ResizeWindow+0xf0>
 800d966:	2800      	cmp	r0, #0
 800d968:	d06d      	beq.n	800da46 <WM_ResizeWindow+0xf0>
 800d96a:	f006 fac5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800d96e:	4603      	mov	r3, r0
 800d970:	9003      	str	r0, [sp, #12]
 800d972:	c803      	ldmia	r0, {r0, r1}
 800d974:	aa04      	add	r2, sp, #16
 800d976:	af06      	add	r7, sp, #24
 800d978:	e882 0003 	stmia.w	r2, {r0, r1}
 800d97c:	e887 0003 	stmia.w	r7, {r0, r1}
 800d980:	b17c      	cbz	r4, 800d9a2 <WM_ResizeWindow+0x4c>
 800d982:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d984:	f400 7120 	and.w	r1, r0, #640	; 0x280
 800d988:	2980      	cmp	r1, #128	; 0x80
 800d98a:	d105      	bne.n	800d998 <WM_ResizeWindow+0x42>
 800d98c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800d990:	1b38      	subs	r0, r7, r4
 800d992:	f8ad 0018 	strh.w	r0, [sp, #24]
 800d996:	e004      	b.n	800d9a2 <WM_ResizeWindow+0x4c>
 800d998:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d99c:	18a4      	adds	r4, r4, r2
 800d99e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d9a2:	b185      	cbz	r5, 800d9c6 <WM_ResizeWindow+0x70>
 800d9a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d9a6:	f401 62a0 	and.w	r2, r1, #1280	; 0x500
 800d9aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d9ae:	d105      	bne.n	800d9bc <WM_ResizeWindow+0x66>
 800d9b0:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800d9b4:	1b78      	subs	r0, r7, r5
 800d9b6:	f8ad 001a 	strh.w	r0, [sp, #26]
 800d9ba:	e004      	b.n	800d9c6 <WM_ResizeWindow+0x70>
 800d9bc:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 800d9c0:	192d      	adds	r5, r5, r4
 800d9c2:	f8ad 501e 	strh.w	r5, [sp, #30]
 800d9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c8:	03da      	lsls	r2, r3, #15
 800d9ca:	d502      	bpl.n	800d9d2 <WM_ResizeWindow+0x7c>
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f000 fd79 	bl	800e4c4 <WM__InvalidateDrawAndDescs>
 800d9d2:	aa06      	add	r2, sp, #24
 800d9d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9d8:	9c03      	ldr	r4, [sp, #12]
 800d9da:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d9e0:	078b      	lsls	r3, r1, #30
 800d9e2:	d509      	bpl.n	800d9f8 <WM_ResizeWindow+0xa2>
 800d9e4:	a808      	add	r0, sp, #32
 800d9e6:	a904      	add	r1, sp, #16
 800d9e8:	f005 f826 	bl	8012a38 <GUI_MergeRect>
 800d9ec:	9a03      	ldr	r2, [sp, #12]
 800d9ee:	a808      	add	r0, sp, #32
 800d9f0:	6991      	ldr	r1, [r2, #24]
 800d9f2:	6a12      	ldr	r2, [r2, #32]
 800d9f4:	f000 fe61 	bl	800e6ba <WM__InvalidateRectEx>
 800d9f8:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 800d9fc:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800da00:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800da04:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800da08:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800da0c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800da10:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800da14:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800da18:	ebc0 000e 	rsb	r0, r0, lr
 800da1c:	1ae3      	subs	r3, r4, r3
 800da1e:	ac0a      	add	r4, sp, #40	; 0x28
 800da20:	1aaa      	subs	r2, r5, r2
 800da22:	9000      	str	r0, [sp, #0]
 800da24:	1a79      	subs	r1, r7, r1
 800da26:	9803      	ldr	r0, [sp, #12]
 800da28:	f007 fd58 	bl	80154dc <WM__UpdateChildPositions>
 800da2c:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800da30:	f101 0008 	add.w	r0, r1, #8
 800da34:	f004 fa26 	bl	8011e84 <GUI__IntersectRect>
 800da38:	4630      	mov	r0, r6
 800da3a:	2105      	movs	r1, #5
 800da3c:	f000 fe70 	bl	800e720 <WM__SendMsgNoData>
 800da40:	4620      	mov	r0, r4
 800da42:	f006 fa67 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800da46:	b00b      	add	sp, #44	; 0x2c
 800da48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da4a <WM_NotifyParent>:
 800da4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da4c:	2326      	movs	r3, #38	; 0x26
 800da4e:	9103      	str	r1, [sp, #12]
 800da50:	4669      	mov	r1, sp
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	f008 f886 	bl	8015b64 <WM_SendToParent>
 800da58:	b005      	add	sp, #20
 800da5a:	bd00      	pop	{pc}

0800da5c <WM_MoveChildTo>:
 800da5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da5e:	460f      	mov	r7, r1
 800da60:	4616      	mov	r6, r2
 800da62:	4605      	mov	r5, r0
 800da64:	b320      	cbz	r0, 800dab0 <WM_MoveChildTo+0x54>
 800da66:	f000 f93c 	bl	800dce2 <WM_GetParent>
 800da6a:	b308      	cbz	r0, 800dab0 <WM_MoveChildTo+0x54>
 800da6c:	f006 fa44 	bl	8013ef8 <GUI_ALLOC_LockH>
 800da70:	9000      	str	r0, [sp, #0]
 800da72:	4628      	mov	r0, r5
 800da74:	f006 fa40 	bl	8013ef8 <GUI_ALLOC_LockH>
 800da78:	ab02      	add	r3, sp, #8
 800da7a:	4604      	mov	r4, r0
 800da7c:	9001      	str	r0, [sp, #4]
 800da7e:	f853 0d08 	ldr.w	r0, [r3, #-8]!
 800da82:	f9b4 2000 	ldrsh.w	r2, [r4]
 800da86:	f9b0 1000 	ldrsh.w	r1, [r0]
 800da8a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800da8e:	1a8b      	subs	r3, r1, r2
 800da90:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800da94:	1a42      	subs	r2, r0, r1
 800da96:	4668      	mov	r0, sp
 800da98:	18ff      	adds	r7, r7, r3
 800da9a:	18b6      	adds	r6, r6, r2
 800da9c:	f006 fa3a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800daa0:	a801      	add	r0, sp, #4
 800daa2:	f006 fa37 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800daa6:	4628      	mov	r0, r5
 800daa8:	4639      	mov	r1, r7
 800daaa:	4632      	mov	r2, r6
 800daac:	f000 f837 	bl	800db1e <WM__MoveWindow>
 800dab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800dab2 <_MoveDescendents>:
 800dab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab6:	b088      	sub	sp, #32
 800dab8:	4606      	mov	r6, r0
 800daba:	460c      	mov	r4, r1
 800dabc:	4615      	mov	r5, r2
 800dabe:	a804      	add	r0, sp, #16
 800dac0:	2100      	movs	r1, #0
 800dac2:	2210      	movs	r2, #16
 800dac4:	f00b fd96 	bl	80195f4 <memset>
 800dac8:	b336      	cbz	r6, 800db18 <_MoveDescendents+0x66>
 800daca:	4630      	mov	r0, r6
 800dacc:	f006 fa14 	bl	8013ef8 <GUI_ALLOC_LockH>
 800dad0:	4621      	mov	r1, r4
 800dad2:	462a      	mov	r2, r5
 800dad4:	9001      	str	r0, [sp, #4]
 800dad6:	f004 ff9f 	bl	8012a18 <GUI_MoveRect>
 800dada:	9801      	ldr	r0, [sp, #4]
 800dadc:	4621      	mov	r1, r4
 800dade:	3008      	adds	r0, #8
 800dae0:	462a      	mov	r2, r5
 800dae2:	f004 ff99 	bl	8012a18 <GUI_MoveRect>
 800dae6:	a808      	add	r0, sp, #32
 800dae8:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 800daec:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800daf0:	6a17      	ldr	r7, [r2, #32]
 800daf2:	f006 fa0f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800daf6:	4640      	mov	r0, r8
 800daf8:	4621      	mov	r1, r4
 800dafa:	462a      	mov	r2, r5
 800dafc:	f7ff ffd9 	bl	800dab2 <_MoveDescendents>
 800db00:	a802      	add	r0, sp, #8
 800db02:	2303      	movs	r3, #3
 800db04:	9007      	str	r0, [sp, #28]
 800db06:	a904      	add	r1, sp, #16
 800db08:	4630      	mov	r0, r6
 800db0a:	9304      	str	r3, [sp, #16]
 800db0c:	9402      	str	r4, [sp, #8]
 800db0e:	9503      	str	r5, [sp, #12]
 800db10:	463e      	mov	r6, r7
 800db12:	f7ff fccd 	bl	800d4b0 <WM__SendMessage>
 800db16:	e7d7      	b.n	800dac8 <_MoveDescendents+0x16>
 800db18:	b008      	add	sp, #32
 800db1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db1e <WM__MoveWindow>:
 800db1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db22:	b08a      	sub	sp, #40	; 0x28
 800db24:	4606      	mov	r6, r0
 800db26:	460d      	mov	r5, r1
 800db28:	4614      	mov	r4, r2
 800db2a:	a806      	add	r0, sp, #24
 800db2c:	2100      	movs	r1, #0
 800db2e:	2210      	movs	r2, #16
 800db30:	f00b fd60 	bl	80195f4 <memset>
 800db34:	2e00      	cmp	r6, #0
 800db36:	d041      	beq.n	800dbbc <WM__MoveWindow+0x9e>
 800db38:	b90d      	cbnz	r5, 800db3e <WM__MoveWindow+0x20>
 800db3a:	2c00      	cmp	r4, #0
 800db3c:	d03e      	beq.n	800dbbc <WM__MoveWindow+0x9e>
 800db3e:	4630      	mov	r0, r6
 800db40:	f006 f9da 	bl	8013ef8 <GUI_ALLOC_LockH>
 800db44:	4603      	mov	r3, r0
 800db46:	9001      	str	r0, [sp, #4]
 800db48:	c803      	ldmia	r0, {r0, r1}
 800db4a:	af02      	add	r7, sp, #8
 800db4c:	e887 0003 	stmia.w	r7, {r0, r1}
 800db50:	4622      	mov	r2, r4
 800db52:	4618      	mov	r0, r3
 800db54:	4629      	mov	r1, r5
 800db56:	f004 ff5f 	bl	8012a18 <GUI_MoveRect>
 800db5a:	9801      	ldr	r0, [sp, #4]
 800db5c:	4629      	mov	r1, r5
 800db5e:	3008      	adds	r0, #8
 800db60:	4622      	mov	r2, r4
 800db62:	f004 ff59 	bl	8012a18 <GUI_MoveRect>
 800db66:	a80a      	add	r0, sp, #40	; 0x28
 800db68:	f850 2d24 	ldr.w	r2, [r0, #-36]!
 800db6c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800db70:	f006 f9d0 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800db74:	4629      	mov	r1, r5
 800db76:	4622      	mov	r2, r4
 800db78:	4640      	mov	r0, r8
 800db7a:	f7ff ff9a 	bl	800dab2 <_MoveDescendents>
 800db7e:	4630      	mov	r0, r6
 800db80:	f006 f9ba 	bl	8013ef8 <GUI_ALLOC_LockH>
 800db84:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800db86:	9001      	str	r0, [sp, #4]
 800db88:	078a      	lsls	r2, r1, #30
 800db8a:	d50a      	bpl.n	800dba2 <WM__MoveWindow+0x84>
 800db8c:	6981      	ldr	r1, [r0, #24]
 800db8e:	b141      	cbz	r1, 800dba2 <WM__MoveWindow+0x84>
 800db90:	6a02      	ldr	r2, [r0, #32]
 800db92:	f000 fda9 	bl	800e6e8 <WM__InvalidateParent>
 800db96:	9a01      	ldr	r2, [sp, #4]
 800db98:	4638      	mov	r0, r7
 800db9a:	6991      	ldr	r1, [r2, #24]
 800db9c:	6a12      	ldr	r2, [r2, #32]
 800db9e:	f000 fda3 	bl	800e6e8 <WM__InvalidateParent>
 800dba2:	a801      	add	r0, sp, #4
 800dba4:	f006 f9b6 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dba8:	2003      	movs	r0, #3
 800dbaa:	9006      	str	r0, [sp, #24]
 800dbac:	ab04      	add	r3, sp, #16
 800dbae:	4630      	mov	r0, r6
 800dbb0:	a906      	add	r1, sp, #24
 800dbb2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb4:	9504      	str	r5, [sp, #16]
 800dbb6:	9405      	str	r4, [sp, #20]
 800dbb8:	f7ff fc7a 	bl	800d4b0 <WM__SendMessage>
 800dbbc:	b00a      	add	sp, #40	; 0x28
 800dbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbc2 <WM_MoveWindow>:
 800dbc2:	f7ff bfac 	b.w	800db1e <WM__MoveWindow>

0800dbc6 <WM_DisableMemdev>:
 800dbc6:	b508      	push	{r3, lr}
 800dbc8:	b138      	cbz	r0, 800dbda <WM_DisableMemdev+0x14>
 800dbca:	f006 f98b 	bl	8013ee4 <GUI_ALLOC_h2p>
 800dbce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dbd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dbd4:	f021 0204 	bic.w	r2, r1, #4
 800dbd8:	6282      	str	r2, [r0, #40]	; 0x28
 800dbda:	bd08      	pop	{r3, pc}

0800dbdc <WM_IsWindow>:
 800dbdc:	f000 bc62 	b.w	800e4a4 <WM__IsWindow>

0800dbe0 <WM_IsFocussable>:
 800dbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbe2:	b150      	cbz	r0, 800dbfa <WM_IsFocussable+0x1a>
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	aa04      	add	r2, sp, #16
 800dbe8:	9103      	str	r1, [sp, #12]
 800dbea:	231f      	movs	r3, #31
 800dbec:	4669      	mov	r1, sp
 800dbee:	f842 3d10 	str.w	r3, [r2, #-16]!
 800dbf2:	f000 fd91 	bl	800e718 <WM_SendMessage>
 800dbf6:	9803      	ldr	r0, [sp, #12]
 800dbf8:	e7ff      	b.n	800dbfa <WM_IsFocussable+0x1a>
 800dbfa:	b005      	add	sp, #20
 800dbfc:	bd00      	pop	{pc}

0800dbfe <WM_HideWindow>:
 800dbfe:	b513      	push	{r0, r1, r4, lr}
 800dc00:	b188      	cbz	r0, 800dc26 <WM_HideWindow+0x28>
 800dc02:	f006 f979 	bl	8013ef8 <GUI_ALLOC_LockH>
 800dc06:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800dc08:	ac02      	add	r4, sp, #8
 800dc0a:	0791      	lsls	r1, r2, #30
 800dc0c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800dc10:	d506      	bpl.n	800dc20 <WM_HideWindow+0x22>
 800dc12:	f022 0102 	bic.w	r1, r2, #2
 800dc16:	6281      	str	r1, [r0, #40]	; 0x28
 800dc18:	6a02      	ldr	r2, [r0, #32]
 800dc1a:	6981      	ldr	r1, [r0, #24]
 800dc1c:	f000 fd4d 	bl	800e6ba <WM__InvalidateRectEx>
 800dc20:	4620      	mov	r0, r4
 800dc22:	f006 f977 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dc26:	bd1c      	pop	{r2, r3, r4, pc}

0800dc28 <WM_HasFocus>:
 800dc28:	4b04      	ldr	r3, [pc, #16]	; (800dc3c <WM_HasFocus+0x14>)
 800dc2a:	4905      	ldr	r1, [pc, #20]	; (800dc40 <WM_HasFocus+0x18>)
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800dc32:	1ac2      	subs	r2, r0, r3
 800dc34:	4250      	negs	r0, r2
 800dc36:	4150      	adcs	r0, r2
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	2000eb0c 	.word	0x2000eb0c
 800dc40:	2000eafc 	.word	0x2000eafc

0800dc44 <WM_HasCaptured>:
 800dc44:	4b04      	ldr	r3, [pc, #16]	; (800dc58 <WM_HasCaptured+0x14>)
 800dc46:	4905      	ldr	r1, [pc, #20]	; (800dc5c <WM_HasCaptured+0x18>)
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800dc4e:	1ac2      	subs	r2, r0, r3
 800dc50:	4250      	negs	r0, r2
 800dc52:	4150      	adcs	r0, r2
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	2000eb0c 	.word	0x2000eb0c
 800dc5c:	2000eb28 	.word	0x2000eb28

0800dc60 <WM__GetWindowSizeX>:
 800dc60:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800dc64:	f9b0 3000 	ldrsh.w	r3, [r0]
 800dc68:	1ad0      	subs	r0, r2, r3
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	4770      	bx	lr

0800dc6e <WM__GetWindowSizeY>:
 800dc6e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800dc72:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800dc76:	1ad0      	subs	r0, r2, r3
 800dc78:	3001      	adds	r0, #1
 800dc7a:	4770      	bx	lr

0800dc7c <WM_GetWindowSizeX>:
 800dc7c:	b513      	push	{r0, r1, r4, lr}
 800dc7e:	b908      	cbnz	r0, 800dc84 <WM_GetWindowSizeX+0x8>
 800dc80:	f000 ff1a 	bl	800eab8 <WM_GetActiveWindow>
 800dc84:	f006 f938 	bl	8013ef8 <GUI_ALLOC_LockH>
 800dc88:	ab02      	add	r3, sp, #8
 800dc8a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800dc8e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dc92:	f843 0d04 	str.w	r0, [r3, #-4]!
 800dc96:	1aa0      	subs	r0, r4, r2
 800dc98:	1c44      	adds	r4, r0, #1
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f006 f93a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dca0:	4620      	mov	r0, r4
 800dca2:	bd1c      	pop	{r2, r3, r4, pc}

0800dca4 <WM_GetWindowSizeY>:
 800dca4:	b513      	push	{r0, r1, r4, lr}
 800dca6:	b908      	cbnz	r0, 800dcac <WM_GetWindowSizeY+0x8>
 800dca8:	f000 ff06 	bl	800eab8 <WM_GetActiveWindow>
 800dcac:	f006 f924 	bl	8013ef8 <GUI_ALLOC_LockH>
 800dcb0:	ab02      	add	r3, sp, #8
 800dcb2:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800dcb6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dcba:	f843 0d04 	str.w	r0, [r3, #-4]!
 800dcbe:	1aa0      	subs	r0, r4, r2
 800dcc0:	1c44      	adds	r4, r0, #1
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f006 f926 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dcc8:	4620      	mov	r0, r4
 800dcca:	bd1c      	pop	{r2, r3, r4, pc}

0800dccc <WM_GetWindowRectEx>:
 800dccc:	b510      	push	{r4, lr}
 800dcce:	460c      	mov	r4, r1
 800dcd0:	b130      	cbz	r0, 800dce0 <WM_GetWindowRectEx+0x14>
 800dcd2:	b129      	cbz	r1, 800dce0 <WM_GetWindowRectEx+0x14>
 800dcd4:	f006 f906 	bl	8013ee4 <GUI_ALLOC_h2p>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	cb03      	ldmia	r3!, {r0, r1}
 800dcdc:	6020      	str	r0, [r4, #0]
 800dcde:	6061      	str	r1, [r4, #4]
 800dce0:	bd10      	pop	{r4, pc}

0800dce2 <WM_GetParent>:
 800dce2:	b508      	push	{r3, lr}
 800dce4:	4603      	mov	r3, r0
 800dce6:	b110      	cbz	r0, 800dcee <WM_GetParent+0xc>
 800dce8:	f006 f8fc 	bl	8013ee4 <GUI_ALLOC_h2p>
 800dcec:	6983      	ldr	r3, [r0, #24]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	bd08      	pop	{r3, pc}

0800dcf2 <WM_GetNextSibling>:
 800dcf2:	b508      	push	{r3, lr}
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	b110      	cbz	r0, 800dcfe <WM_GetNextSibling+0xc>
 800dcf8:	f006 f8f4 	bl	8013ee4 <GUI_ALLOC_h2p>
 800dcfc:	6a03      	ldr	r3, [r0, #32]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	bd08      	pop	{r3, pc}

0800dd02 <WM_GetId>:
 800dd02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd04:	4604      	mov	r4, r0
 800dd06:	2100      	movs	r1, #0
 800dd08:	2210      	movs	r2, #16
 800dd0a:	4668      	mov	r0, sp
 800dd0c:	f00b fc72 	bl	80195f4 <memset>
 800dd10:	2315      	movs	r3, #21
 800dd12:	4620      	mov	r0, r4
 800dd14:	4669      	mov	r1, sp
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	f000 fcfe 	bl	800e718 <WM_SendMessage>
 800dd1c:	9803      	ldr	r0, [sp, #12]
 800dd1e:	b004      	add	sp, #16
 800dd20:	bd10      	pop	{r4, pc}
	...

0800dd24 <WM_GetFocussedWindow>:
 800dd24:	4b02      	ldr	r3, [pc, #8]	; (800dd30 <WM_GetFocussedWindow+0xc>)
 800dd26:	4803      	ldr	r0, [pc, #12]	; (800dd34 <WM_GetFocussedWindow+0x10>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800dd2e:	4770      	bx	lr
 800dd30:	2000eb0c 	.word	0x2000eb0c
 800dd34:	2000eafc 	.word	0x2000eafc

0800dd38 <WM_GetFirstChild>:
 800dd38:	b508      	push	{r3, lr}
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	b110      	cbz	r0, 800dd44 <WM_GetFirstChild+0xc>
 800dd3e:	f006 f8d1 	bl	8013ee4 <GUI_ALLOC_h2p>
 800dd42:	69c3      	ldr	r3, [r0, #28]
 800dd44:	4618      	mov	r0, r3
 800dd46:	bd08      	pop	{r3, pc}

0800dd48 <_GetDialogItem>:
 800dd48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	f006 f8d4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800dd50:	ab02      	add	r3, sp, #8
 800dd52:	69c4      	ldr	r4, [r0, #28]
 800dd54:	f843 0d04 	str.w	r0, [r3, #-4]!
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f006 f8db 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dd5e:	b17c      	cbz	r4, 800dd80 <_GetDialogItem+0x38>
 800dd60:	4620      	mov	r0, r4
 800dd62:	f7ff ffce 	bl	800dd02 <WM_GetId>
 800dd66:	42a8      	cmp	r0, r5
 800dd68:	d00a      	beq.n	800dd80 <_GetDialogItem+0x38>
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	f7ff ffeb 	bl	800dd48 <_GetDialogItem>
 800dd72:	b920      	cbnz	r0, 800dd7e <_GetDialogItem+0x36>
 800dd74:	4620      	mov	r0, r4
 800dd76:	f006 f8b5 	bl	8013ee4 <GUI_ALLOC_h2p>
 800dd7a:	6a04      	ldr	r4, [r0, #32]
 800dd7c:	e7ef      	b.n	800dd5e <_GetDialogItem+0x16>
 800dd7e:	4604      	mov	r4, r0
 800dd80:	4620      	mov	r0, r4
 800dd82:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800dd84 <WM_GetDialogItem>:
 800dd84:	b108      	cbz	r0, 800dd8a <WM_GetDialogItem+0x6>
 800dd86:	f7ff bfdf 	b.w	800dd48 <_GetDialogItem>
 800dd8a:	4770      	bx	lr

0800dd8c <WM_GetDesktopWindow>:
 800dd8c:	4b03      	ldr	r3, [pc, #12]	; (800dd9c <WM_GetDesktopWindow+0x10>)
 800dd8e:	4904      	ldr	r1, [pc, #16]	; (800dda0 <WM_GetDesktopWindow+0x14>)
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	7c42      	ldrb	r2, [r0, #17]
 800dd94:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	20000308 	.word	0x20000308
 800dda0:	2000eaec 	.word	0x2000eaec

0800dda4 <WM_GetClientWindow>:
 800dda4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dda6:	a904      	add	r1, sp, #16
 800dda8:	2217      	movs	r2, #23
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f841 2d10 	str.w	r2, [r1, #-16]!
 800ddb0:	4669      	mov	r1, sp
 800ddb2:	9303      	str	r3, [sp, #12]
 800ddb4:	f000 fcb0 	bl	800e718 <WM_SendMessage>
 800ddb8:	9803      	ldr	r0, [sp, #12]
 800ddba:	b005      	add	sp, #20
 800ddbc:	bd00      	pop	{pc}

0800ddbe <WM__GetClientRectEx>:
 800ddbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	b158      	cbz	r0, 800dddc <WM__GetClientRectEx+0x1e>
 800ddc4:	b151      	cbz	r1, 800dddc <WM__GetClientRectEx+0x1e>
 800ddc6:	f006 f897 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ddca:	ac02      	add	r4, sp, #8
 800ddcc:	4629      	mov	r1, r5
 800ddce:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ddd2:	f000 fcaf 	bl	800e734 <WM__GetClientRectWin>
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	f006 f89c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dddc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800ddde <WM_GetClientRectEx>:
 800ddde:	f7ff bfee 	b.w	800ddbe <WM__GetClientRectEx>
	...

0800dde4 <WM_GetClientRect>:
 800dde4:	4b04      	ldr	r3, [pc, #16]	; (800ddf8 <WM_GetClientRect+0x14>)
 800dde6:	4601      	mov	r1, r0
 800dde8:	6818      	ldr	r0, [r3, #0]
 800ddea:	b910      	cbnz	r0, 800ddf2 <WM_GetClientRect+0xe>
 800ddec:	4803      	ldr	r0, [pc, #12]	; (800ddfc <WM_GetClientRect+0x18>)
 800ddee:	6802      	ldr	r2, [r0, #0]
 800ddf0:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800ddf2:	f7ff bfe4 	b.w	800ddbe <WM__GetClientRectEx>
 800ddf6:	bf00      	nop
 800ddf8:	2000eae8 	.word	0x2000eae8
 800ddfc:	20000308 	.word	0x20000308

0800de00 <WM_GetBkColor>:
 800de00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de02:	b140      	cbz	r0, 800de16 <WM_GetBkColor+0x16>
 800de04:	a904      	add	r1, sp, #16
 800de06:	2322      	movs	r3, #34	; 0x22
 800de08:	f841 3d10 	str.w	r3, [r1, #-16]!
 800de0c:	4669      	mov	r1, sp
 800de0e:	f000 fc83 	bl	800e718 <WM_SendMessage>
 800de12:	9803      	ldr	r0, [sp, #12]
 800de14:	e001      	b.n	800de1a <WM_GetBkColor+0x1a>
 800de16:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 800de1a:	b005      	add	sp, #20
 800de1c:	bd00      	pop	{pc}

0800de1e <_cbInvalidateOne>:
 800de1e:	f000 bcd1 	b.w	800e7c4 <WM_InvalidateWindow>
	...

0800de24 <WM_BringToTop>:
 800de24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de26:	4604      	mov	r4, r0
 800de28:	2800      	cmp	r0, #0
 800de2a:	d032      	beq.n	800de92 <WM_BringToTop+0x6e>
 800de2c:	f006 f864 	bl	8013ef8 <GUI_ALLOC_LockH>
 800de30:	4603      	mov	r3, r0
 800de32:	9000      	str	r0, [sp, #0]
 800de34:	6a00      	ldr	r0, [r0, #32]
 800de36:	b908      	cbnz	r0, 800de3c <WM_BringToTop+0x18>
 800de38:	4668      	mov	r0, sp
 800de3a:	e00e      	b.n	800de5a <WM_BringToTop+0x36>
 800de3c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800de3e:	070a      	lsls	r2, r1, #28
 800de40:	d411      	bmi.n	800de66 <WM_BringToTop+0x42>
 800de42:	f006 f859 	bl	8013ef8 <GUI_ALLOC_LockH>
 800de46:	ad02      	add	r5, sp, #8
 800de48:	f845 0d04 	str.w	r0, [r5, #-4]!
 800de4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800de4e:	0703      	lsls	r3, r0, #28
 800de50:	d506      	bpl.n	800de60 <WM_BringToTop+0x3c>
 800de52:	4668      	mov	r0, sp
 800de54:	f006 f85e 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800de58:	4628      	mov	r0, r5
 800de5a:	f006 f85b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800de5e:	e018      	b.n	800de92 <WM_BringToTop+0x6e>
 800de60:	4628      	mov	r0, r5
 800de62:	f006 f857 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800de66:	aa02      	add	r2, sp, #8
 800de68:	4668      	mov	r0, sp
 800de6a:	f852 5d08 	ldr.w	r5, [r2, #-8]!
 800de6e:	69ad      	ldr	r5, [r5, #24]
 800de70:	f006 f850 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800de74:	4620      	mov	r0, r4
 800de76:	f000 faa3 	bl	800e3c0 <WM__RemoveWindowFromList>
 800de7a:	4629      	mov	r1, r5
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 fa51 	bl	800e324 <WM__InsertWindowIntoList>
 800de82:	4620      	mov	r0, r4
 800de84:	f000 fc9e 	bl	800e7c4 <WM_InvalidateWindow>
 800de88:	4620      	mov	r0, r4
 800de8a:	4902      	ldr	r1, [pc, #8]	; (800de94 <WM_BringToTop+0x70>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	f007 ff05 	bl	8015c9c <WM_ForEachDesc>
 800de92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800de94:	0800de1f 	.word	0x0800de1f

0800de98 <_OnExit>:
 800de98:	4a0a      	ldr	r2, [pc, #40]	; (800dec4 <_OnExit+0x2c>)
 800de9a:	480b      	ldr	r0, [pc, #44]	; (800dec8 <_OnExit+0x30>)
 800de9c:	490b      	ldr	r1, [pc, #44]	; (800decc <_OnExit+0x34>)
 800de9e:	2300      	movs	r3, #0
 800dea0:	7013      	strb	r3, [r2, #0]
 800dea2:	6003      	str	r3, [r0, #0]
 800dea4:	600b      	str	r3, [r1, #0]
 800dea6:	480a      	ldr	r0, [pc, #40]	; (800ded0 <_OnExit+0x38>)
 800dea8:	4a0a      	ldr	r2, [pc, #40]	; (800ded4 <_OnExit+0x3c>)
 800deaa:	490b      	ldr	r1, [pc, #44]	; (800ded8 <_OnExit+0x40>)
 800deac:	6003      	str	r3, [r0, #0]
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	600b      	str	r3, [r1, #0]
 800deb2:	6043      	str	r3, [r0, #4]
 800deb4:	6053      	str	r3, [r2, #4]
 800deb6:	4809      	ldr	r0, [pc, #36]	; (800dedc <_OnExit+0x44>)
 800deb8:	4a09      	ldr	r2, [pc, #36]	; (800dee0 <_OnExit+0x48>)
 800deba:	490a      	ldr	r1, [pc, #40]	; (800dee4 <_OnExit+0x4c>)
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	6013      	str	r3, [r2, #0]
 800dec0:	600b      	str	r3, [r1, #0]
 800dec2:	4770      	bx	lr
 800dec4:	2000e054 	.word	0x2000e054
 800dec8:	2000e02c 	.word	0x2000e02c
 800decc:	2000eb20 	.word	0x2000eb20
 800ded0:	2000eafc 	.word	0x2000eafc
 800ded4:	2000eb28 	.word	0x2000eb28
 800ded8:	2000eb34 	.word	0x2000eb34
 800dedc:	2000eae8 	.word	0x2000eae8
 800dee0:	2000eb14 	.word	0x2000eb14
 800dee4:	2000eb24 	.word	0x2000eb24

0800dee8 <_Paint1>:
 800dee8:	b510      	push	{r4, lr}
 800deea:	4604      	mov	r4, r0
 800deec:	f005 fffa 	bl	8013ee4 <GUI_ALLOC_h2p>
 800def0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800def2:	4a04      	ldr	r2, [pc, #16]	; (800df04 <_Paint1+0x1c>)
 800def4:	4904      	ldr	r1, [pc, #16]	; (800df08 <_Paint1+0x20>)
 800def6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800defa:	bf08      	it	eq
 800defc:	4611      	moveq	r1, r2
 800defe:	4620      	mov	r0, r4
 800df00:	4788      	blx	r1
 800df02:	bd10      	pop	{r4, pc}
 800df04:	0800ed59 	.word	0x0800ed59
 800df08:	0800f319 	.word	0x0800f319

0800df0c <_Paint1Trans>:
 800df0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800df10:	4c21      	ldr	r4, [pc, #132]	; (800df98 <_Paint1Trans+0x8c>)
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	4605      	mov	r5, r0
 800df16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800df18:	f005 ffee 	bl	8013ef8 <GUI_ALLOC_LockH>
 800df1c:	9000      	str	r0, [sp, #0]
 800df1e:	4628      	mov	r0, r5
 800df20:	f005 ffea 	bl	8013ef8 <GUI_ALLOC_LockH>
 800df24:	4601      	mov	r1, r0
 800df26:	9001      	str	r0, [sp, #4]
 800df28:	9800      	ldr	r0, [sp, #0]
 800df2a:	3008      	adds	r0, #8
 800df2c:	f004 fc78 	bl	8012820 <GUI_RectsIntersect>
 800df30:	4606      	mov	r6, r0
 800df32:	b340      	cbz	r0, 800df86 <_Paint1Trans+0x7a>
 800df34:	ae02      	add	r6, sp, #8
 800df36:	6820      	ldr	r0, [r4, #0]
 800df38:	9901      	ldr	r1, [sp, #4]
 800df3a:	f856 2d08 	ldr.w	r2, [r6, #-8]!
 800df3e:	f8d0 804c 	ldr.w	r8, [r0, #76]	; 0x4c
 800df42:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800df44:	4e15      	ldr	r6, [pc, #84]	; (800df9c <_Paint1Trans+0x90>)
 800df46:	f101 0008 	add.w	r0, r1, #8
 800df4a:	3208      	adds	r2, #8
 800df4c:	f003 ff68 	bl	8011e20 <GUI__IntersectRects>
 800df50:	4668      	mov	r0, sp
 800df52:	f005 ffdf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800df56:	a802      	add	r0, sp, #8
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800df5e:	6035      	str	r5, [r6, #0]
 800df60:	f9b2 1000 	ldrsh.w	r1, [r2]
 800df64:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800df68:	64d9      	str	r1, [r3, #76]	; 0x4c
 800df6a:	651a      	str	r2, [r3, #80]	; 0x50
 800df6c:	f005 ffd2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800df70:	4628      	mov	r0, r5
 800df72:	f7ff ffb9 	bl	800dee8 <_Paint1>
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	2000      	movs	r0, #0
 800df7a:	6030      	str	r0, [r6, #0]
 800df7c:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 800df80:	651f      	str	r7, [r3, #80]	; 0x50
 800df82:	2001      	movs	r0, #1
 800df84:	e006      	b.n	800df94 <_Paint1Trans+0x88>
 800df86:	4668      	mov	r0, sp
 800df88:	f005 ffc4 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800df8c:	a801      	add	r0, sp, #4
 800df8e:	f005 ffc1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800df92:	4630      	mov	r0, r6
 800df94:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 800df98:	20000308 	.word	0x20000308
 800df9c:	2000eae8 	.word	0x2000eae8

0800dfa0 <_PaintTransChildren>:
 800dfa0:	b530      	push	{r4, r5, lr}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	f005 ffa7 	bl	8013ef8 <GUI_ALLOC_LockH>
 800dfaa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800dfac:	9001      	str	r0, [sp, #4]
 800dfae:	0793      	lsls	r3, r2, #30
 800dfb0:	d404      	bmi.n	800dfbc <_PaintTransChildren+0x1c>
 800dfb2:	a801      	add	r0, sp, #4
 800dfb4:	f005 ffae 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dfb8:	b005      	add	sp, #20
 800dfba:	bd30      	pop	{r4, r5, pc}
 800dfbc:	69c4      	ldr	r4, [r0, #28]
 800dfbe:	2c00      	cmp	r4, #0
 800dfc0:	d0f7      	beq.n	800dfb2 <_PaintTransChildren+0x12>
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f005 ff98 	bl	8013ef8 <GUI_ALLOC_LockH>
 800dfc8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800dfca:	9000      	str	r0, [sp, #0]
 800dfcc:	f001 0203 	and.w	r2, r1, #3
 800dfd0:	2a03      	cmp	r2, #3
 800dfd2:	d133      	bne.n	800e03c <_PaintTransChildren+0x9c>
 800dfd4:	9901      	ldr	r1, [sp, #4]
 800dfd6:	3108      	adds	r1, #8
 800dfd8:	f004 fc22 	bl	8012820 <GUI_RectsIntersect>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d02d      	beq.n	800e03c <_PaintTransChildren+0x9c>
 800dfe0:	9801      	ldr	r0, [sp, #4]
 800dfe2:	3008      	adds	r0, #8
 800dfe4:	c803      	ldmia	r0, {r0, r1}
 800dfe6:	ab04      	add	r3, sp, #16
 800dfe8:	e903 0003 	stmdb	r3, {r0, r1}
 800dfec:	a801      	add	r0, sp, #4
 800dfee:	f005 ff91 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dff2:	4668      	mov	r0, sp
 800dff4:	f005 ff8e 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800dff8:	4620      	mov	r0, r4
 800dffa:	f7ff ff87 	bl	800df0c <_Paint1Trans>
 800dffe:	b170      	cbz	r0, 800e01e <_PaintTransChildren+0x7e>
 800e000:	4620      	mov	r0, r4
 800e002:	f005 ff6f 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e006:	9000      	str	r0, [sp, #0]
 800e008:	4620      	mov	r0, r4
 800e00a:	f7ff ffc9 	bl	800dfa0 <_PaintTransChildren>
 800e00e:	4620      	mov	r0, r4
 800e010:	f005 ff68 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e014:	9000      	str	r0, [sp, #0]
 800e016:	4628      	mov	r0, r5
 800e018:	f005 ff64 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e01c:	9001      	str	r0, [sp, #4]
 800e01e:	4628      	mov	r0, r5
 800e020:	f005 ff6a 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e024:	9001      	str	r0, [sp, #4]
 800e026:	4620      	mov	r0, r4
 800e028:	f005 ff66 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e02c:	a904      	add	r1, sp, #16
 800e02e:	9000      	str	r0, [sp, #0]
 800e030:	9c01      	ldr	r4, [sp, #4]
 800e032:	e911 0003 	ldmdb	r1, {r0, r1}
 800e036:	3408      	adds	r4, #8
 800e038:	e884 0003 	stmia.w	r4, {r0, r1}
 800e03c:	a804      	add	r0, sp, #16
 800e03e:	f850 2d10 	ldr.w	r2, [r0, #-16]!
 800e042:	4668      	mov	r0, sp
 800e044:	6a14      	ldr	r4, [r2, #32]
 800e046:	f005 ff65 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e04a:	e7b8      	b.n	800dfbe <_PaintTransChildren+0x1e>

0800e04c <_Findy1>:
 800e04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e04e:	4606      	mov	r6, r0
 800e050:	b085      	sub	sp, #20
 800e052:	460c      	mov	r4, r1
 800e054:	4615      	mov	r5, r2
 800e056:	2e00      	cmp	r6, #0
 800e058:	d04c      	beq.n	800e0f4 <_Findy1+0xa8>
 800e05a:	4630      	mov	r0, r6
 800e05c:	f005 ff4c 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e060:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800e062:	9001      	str	r0, [sp, #4]
 800e064:	07ba      	lsls	r2, r7, #30
 800e066:	4601      	mov	r1, r0
 800e068:	d53d      	bpl.n	800e0e6 <_Findy1+0x9a>
 800e06a:	ae02      	add	r6, sp, #8
 800e06c:	b125      	cbz	r5, 800e078 <_Findy1+0x2c>
 800e06e:	4630      	mov	r0, r6
 800e070:	462a      	mov	r2, r5
 800e072:	f003 fed5 	bl	8011e20 <GUI__IntersectRects>
 800e076:	e002      	b.n	800e07e <_Findy1+0x32>
 800e078:	c803      	ldmia	r0, {r0, r1}
 800e07a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e07e:	4620      	mov	r0, r4
 800e080:	4631      	mov	r1, r6
 800e082:	f004 fbcd 	bl	8012820 <GUI_RectsIntersect>
 800e086:	b370      	cbz	r0, 800e0e6 <_Findy1+0x9a>
 800e088:	f017 0f01 	tst.w	r7, #1
 800e08c:	9b01      	ldr	r3, [sp, #4]
 800e08e:	d11e      	bne.n	800e0ce <_Findy1+0x82>
 800e090:	b13d      	cbz	r5, 800e0a2 <_Findy1+0x56>
 800e092:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e096:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 800e09a:	4282      	cmp	r2, r0
 800e09c:	bfa8      	it	ge
 800e09e:	4610      	movge	r0, r2
 800e0a0:	e001      	b.n	800e0a6 <_Findy1+0x5a>
 800e0a2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800e0a6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e0aa:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 800e0ae:	4288      	cmp	r0, r1
 800e0b0:	dd06      	ble.n	800e0c0 <_Findy1+0x74>
 800e0b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e0b6:	b211      	sxth	r1, r2
 800e0b8:	428e      	cmp	r6, r1
 800e0ba:	db14      	blt.n	800e0e6 <_Findy1+0x9a>
 800e0bc:	1e53      	subs	r3, r2, #1
 800e0be:	e004      	b.n	800e0ca <_Findy1+0x7e>
 800e0c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e0c4:	b218      	sxth	r0, r3
 800e0c6:	4286      	cmp	r6, r0
 800e0c8:	dd0d      	ble.n	800e0e6 <_Findy1+0x9a>
 800e0ca:	80e3      	strh	r3, [r4, #6]
 800e0cc:	e00b      	b.n	800e0e6 <_Findy1+0x9a>
 800e0ce:	69de      	ldr	r6, [r3, #28]
 800e0d0:	b14e      	cbz	r6, 800e0e6 <_Findy1+0x9a>
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	aa02      	add	r2, sp, #8
 800e0d8:	f7ff ffb8 	bl	800e04c <_Findy1>
 800e0dc:	4630      	mov	r0, r6
 800e0de:	f005 ff01 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e0e2:	6a06      	ldr	r6, [r0, #32]
 800e0e4:	e7f4      	b.n	800e0d0 <_Findy1+0x84>
 800e0e6:	a804      	add	r0, sp, #16
 800e0e8:	f850 6d0c 	ldr.w	r6, [r0, #-12]!
 800e0ec:	6a36      	ldr	r6, [r6, #32]
 800e0ee:	f005 ff11 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e0f2:	e7b0      	b.n	800e056 <_Findy1+0xa>
 800e0f4:	b005      	add	sp, #20
 800e0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0f8 <_Findx0>:
 800e0f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	460e      	mov	r6, r1
 800e100:	4617      	mov	r7, r2
 800e102:	2400      	movs	r4, #0
 800e104:	2d00      	cmp	r5, #0
 800e106:	d038      	beq.n	800e17a <_Findx0+0x82>
 800e108:	4628      	mov	r0, r5
 800e10a:	f005 fef5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e10e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 800e112:	9001      	str	r0, [sp, #4]
 800e114:	f018 0f02 	tst.w	r8, #2
 800e118:	4601      	mov	r1, r0
 800e11a:	d027      	beq.n	800e16c <_Findx0+0x74>
 800e11c:	ad02      	add	r5, sp, #8
 800e11e:	b127      	cbz	r7, 800e12a <_Findx0+0x32>
 800e120:	4628      	mov	r0, r5
 800e122:	463a      	mov	r2, r7
 800e124:	f003 fe7c 	bl	8011e20 <GUI__IntersectRects>
 800e128:	e002      	b.n	800e130 <_Findx0+0x38>
 800e12a:	c803      	ldmia	r0, {r0, r1}
 800e12c:	e885 0003 	stmia.w	r5, {r0, r1}
 800e130:	4630      	mov	r0, r6
 800e132:	4629      	mov	r1, r5
 800e134:	f004 fb74 	bl	8012820 <GUI_RectsIntersect>
 800e138:	b1c0      	cbz	r0, 800e16c <_Findx0+0x74>
 800e13a:	f018 0f01 	tst.w	r8, #1
 800e13e:	d105      	bne.n	800e14c <_Findx0+0x54>
 800e140:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800e144:	1c41      	adds	r1, r0, #1
 800e146:	8031      	strh	r1, [r6, #0]
 800e148:	2401      	movs	r4, #1
 800e14a:	e00f      	b.n	800e16c <_Findx0+0x74>
 800e14c:	9b01      	ldr	r3, [sp, #4]
 800e14e:	69dd      	ldr	r5, [r3, #28]
 800e150:	b165      	cbz	r5, 800e16c <_Findx0+0x74>
 800e152:	4628      	mov	r0, r5
 800e154:	4631      	mov	r1, r6
 800e156:	aa02      	add	r2, sp, #8
 800e158:	f7ff ffce 	bl	800e0f8 <_Findx0>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	bf18      	it	ne
 800e160:	2401      	movne	r4, #1
 800e162:	4628      	mov	r0, r5
 800e164:	f005 febe 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e168:	6a05      	ldr	r5, [r0, #32]
 800e16a:	e7f1      	b.n	800e150 <_Findx0+0x58>
 800e16c:	a804      	add	r0, sp, #16
 800e16e:	f850 2d0c 	ldr.w	r2, [r0, #-12]!
 800e172:	6a15      	ldr	r5, [r2, #32]
 800e174:	f005 fece 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e178:	e7c4      	b.n	800e104 <_Findx0+0xc>
 800e17a:	4620      	mov	r0, r4
 800e17c:	b004      	add	sp, #16
 800e17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e182 <_Findx1>:
 800e182:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e184:	4604      	mov	r4, r0
 800e186:	b085      	sub	sp, #20
 800e188:	460d      	mov	r5, r1
 800e18a:	4616      	mov	r6, r2
 800e18c:	2c00      	cmp	r4, #0
 800e18e:	d031      	beq.n	800e1f4 <_Findx1+0x72>
 800e190:	4620      	mov	r0, r4
 800e192:	f005 feb1 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e196:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800e198:	9001      	str	r0, [sp, #4]
 800e19a:	4601      	mov	r1, r0
 800e19c:	07b8      	lsls	r0, r7, #30
 800e19e:	d522      	bpl.n	800e1e6 <_Findx1+0x64>
 800e1a0:	ac02      	add	r4, sp, #8
 800e1a2:	b126      	cbz	r6, 800e1ae <_Findx1+0x2c>
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	4632      	mov	r2, r6
 800e1a8:	f003 fe3a 	bl	8011e20 <GUI__IntersectRects>
 800e1ac:	e002      	b.n	800e1b4 <_Findx1+0x32>
 800e1ae:	c903      	ldmia	r1, {r0, r1}
 800e1b0:	e884 0003 	stmia.w	r4, {r0, r1}
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	f004 fb32 	bl	8012820 <GUI_RectsIntersect>
 800e1bc:	b198      	cbz	r0, 800e1e6 <_Findx1+0x64>
 800e1be:	07f9      	lsls	r1, r7, #31
 800e1c0:	d404      	bmi.n	800e1cc <_Findx1+0x4a>
 800e1c2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800e1c6:	1e41      	subs	r1, r0, #1
 800e1c8:	80a9      	strh	r1, [r5, #4]
 800e1ca:	e00c      	b.n	800e1e6 <_Findx1+0x64>
 800e1cc:	9b01      	ldr	r3, [sp, #4]
 800e1ce:	69dc      	ldr	r4, [r3, #28]
 800e1d0:	b14c      	cbz	r4, 800e1e6 <_Findx1+0x64>
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	aa02      	add	r2, sp, #8
 800e1d8:	f7ff ffd3 	bl	800e182 <_Findx1>
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f005 fe81 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e1e2:	6a04      	ldr	r4, [r0, #32]
 800e1e4:	e7f4      	b.n	800e1d0 <_Findx1+0x4e>
 800e1e6:	a804      	add	r0, sp, #16
 800e1e8:	f850 2d0c 	ldr.w	r2, [r0, #-12]!
 800e1ec:	6a14      	ldr	r4, [r2, #32]
 800e1ee:	f005 fe91 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e1f2:	e7cb      	b.n	800e18c <_Findx1+0xa>
 800e1f4:	b005      	add	sp, #20
 800e1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1f8 <WM__PaintWinAndOverlays>:
 800e1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	f005 fe7c 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e200:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e202:	9001      	str	r0, [sp, #4]
 800e204:	f640 0301 	movw	r3, #2049	; 0x801
 800e208:	4013      	ands	r3, r2
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d005      	beq.n	800e21a <WM__PaintWinAndOverlays+0x22>
 800e20e:	a801      	add	r0, sp, #4
 800e210:	f005 fe80 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e214:	4620      	mov	r0, r4
 800e216:	f7ff fe67 	bl	800dee8 <_Paint1>
 800e21a:	4813      	ldr	r0, [pc, #76]	; (800e268 <WM__PaintWinAndOverlays+0x70>)
 800e21c:	6801      	ldr	r1, [r0, #0]
 800e21e:	b311      	cbz	r1, 800e266 <WM__PaintWinAndOverlays+0x6e>
 800e220:	4620      	mov	r0, r4
 800e222:	f7ff febd 	bl	800dfa0 <_PaintTransChildren>
 800e226:	4620      	mov	r0, r4
 800e228:	f005 fe5c 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e22c:	6985      	ldr	r5, [r0, #24]
 800e22e:	6a04      	ldr	r4, [r0, #32]
 800e230:	b1cd      	cbz	r5, 800e266 <WM__PaintWinAndOverlays+0x6e>
 800e232:	b194      	cbz	r4, 800e25a <WM__PaintWinAndOverlays+0x62>
 800e234:	4620      	mov	r0, r4
 800e236:	f005 fe55 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e23a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e23c:	f002 0303 	and.w	r3, r2, #3
 800e240:	2b03      	cmp	r3, #3
 800e242:	d102      	bne.n	800e24a <WM__PaintWinAndOverlays+0x52>
 800e244:	4620      	mov	r0, r4
 800e246:	f7ff fe61 	bl	800df0c <_Paint1Trans>
 800e24a:	4620      	mov	r0, r4
 800e24c:	f7ff fea8 	bl	800dfa0 <_PaintTransChildren>
 800e250:	4620      	mov	r0, r4
 800e252:	f005 fe47 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e256:	6a04      	ldr	r4, [r0, #32]
 800e258:	e7eb      	b.n	800e232 <WM__PaintWinAndOverlays+0x3a>
 800e25a:	4628      	mov	r0, r5
 800e25c:	f005 fe42 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e260:	6a04      	ldr	r4, [r0, #32]
 800e262:	6985      	ldr	r5, [r0, #24]
 800e264:	e7e4      	b.n	800e230 <WM__PaintWinAndOverlays+0x38>
 800e266:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800e268:	2000eb34 	.word	0x2000eb34

0800e26c <_cbPaintMemDev>:
 800e26c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e26e:	4d14      	ldr	r5, [pc, #80]	; (800e2c0 <_cbPaintMemDev+0x54>)
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	4606      	mov	r6, r0
 800e274:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e276:	f005 fe3f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e27a:	f100 0308 	add.w	r3, r0, #8
 800e27e:	9001      	str	r0, [sp, #4]
 800e280:	682a      	ldr	r2, [r5, #0]
 800e282:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e286:	3208      	adds	r2, #8
 800e288:	ac02      	add	r4, sp, #8
 800e28a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e28e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e292:	e883 0003 	stmia.w	r3, {r0, r1}
 800e296:	a801      	add	r0, sp, #4
 800e298:	f005 fe3c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e29c:	6830      	ldr	r0, [r6, #0]
 800e29e:	f7ff ffab 	bl	800e1f8 <WM__PaintWinAndOverlays>
 800e2a2:	6828      	ldr	r0, [r5, #0]
 800e2a4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800e2a6:	f005 fe27 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e2aa:	f100 0308 	add.w	r3, r0, #8
 800e2ae:	9001      	str	r0, [sp, #4]
 800e2b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e2b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2b8:	a801      	add	r0, sp, #4
 800e2ba:	f005 fe2b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e2be:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 800e2c0:	20000308 	.word	0x20000308

0800e2c4 <WM__ClipAtParentBorders>:
 800e2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2c6:	4607      	mov	r7, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f005 fe14 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e2d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e2d2:	ac02      	add	r4, sp, #8
 800e2d4:	f013 0602 	ands.w	r6, r3, #2
 800e2d8:	4601      	mov	r1, r0
 800e2da:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e2de:	d104      	bne.n	800e2ea <WM__ClipAtParentBorders+0x26>
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f005 fe17 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	e019      	b.n	800e31e <WM__ClipAtParentBorders+0x5a>
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	f003 fdca 	bl	8011e84 <GUI__IntersectRect>
 800e2f0:	9801      	ldr	r0, [sp, #4]
 800e2f2:	6986      	ldr	r6, [r0, #24]
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	b96e      	cbnz	r6, 800e314 <WM__ClipAtParentBorders+0x50>
 800e2f8:	f005 fe0c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e2fc:	4908      	ldr	r1, [pc, #32]	; (800e320 <WM__ClipAtParentBorders+0x5c>)
 800e2fe:	680a      	ldr	r2, [r1, #0]
 800e300:	4295      	cmp	r5, r2
 800e302:	d00b      	beq.n	800e31c <WM__ClipAtParentBorders+0x58>
 800e304:	684b      	ldr	r3, [r1, #4]
 800e306:	ebb5 0c03 	subs.w	ip, r5, r3
 800e30a:	f1dc 0000 	rsbs	r0, ip, #0
 800e30e:	eb50 000c 	adcs.w	r0, r0, ip
 800e312:	e004      	b.n	800e31e <WM__ClipAtParentBorders+0x5a>
 800e314:	f005 fdfe 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e318:	4635      	mov	r5, r6
 800e31a:	e7d6      	b.n	800e2ca <WM__ClipAtParentBorders+0x6>
 800e31c:	2001      	movs	r0, #1
 800e31e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e320:	2000eaec 	.word	0x2000eaec

0800e324 <WM__InsertWindowIntoList>:
 800e324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e326:	4604      	mov	r4, r0
 800e328:	460d      	mov	r5, r1
 800e32a:	2900      	cmp	r1, #0
 800e32c:	d047      	beq.n	800e3be <WM__InsertWindowIntoList+0x9a>
 800e32e:	f005 fde3 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e332:	2300      	movs	r3, #0
 800e334:	6185      	str	r5, [r0, #24]
 800e336:	9001      	str	r0, [sp, #4]
 800e338:	6203      	str	r3, [r0, #32]
 800e33a:	4628      	mov	r0, r5
 800e33c:	f005 fddc 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e340:	9901      	ldr	r1, [sp, #4]
 800e342:	69c5      	ldr	r5, [r0, #28]
 800e344:	9002      	str	r0, [sp, #8]
 800e346:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800e348:	b92d      	cbnz	r5, 800e356 <WM__InsertWindowIntoList+0x32>
 800e34a:	61c4      	str	r4, [r0, #28]
 800e34c:	a801      	add	r0, sp, #4
 800e34e:	f005 fde1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e352:	a802      	add	r0, sp, #8
 800e354:	e031      	b.n	800e3ba <WM__InsertWindowIntoList+0x96>
 800e356:	4628      	mov	r0, r5
 800e358:	f005 fdce 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e35c:	f006 0608 	and.w	r6, r6, #8
 800e360:	9003      	str	r0, [sp, #12]
 800e362:	b976      	cbnz	r6, 800e382 <WM__InsertWindowIntoList+0x5e>
 800e364:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e366:	0702      	lsls	r2, r0, #28
 800e368:	d50b      	bpl.n	800e382 <WM__InsertWindowIntoList+0x5e>
 800e36a:	9a01      	ldr	r2, [sp, #4]
 800e36c:	9b02      	ldr	r3, [sp, #8]
 800e36e:	6215      	str	r5, [r2, #32]
 800e370:	61dc      	str	r4, [r3, #28]
 800e372:	a801      	add	r0, sp, #4
 800e374:	f005 fdce 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e378:	a802      	add	r0, sp, #8
 800e37a:	f005 fdcb 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e37e:	a803      	add	r0, sp, #12
 800e380:	e01b      	b.n	800e3ba <WM__InsertWindowIntoList+0x96>
 800e382:	a802      	add	r0, sp, #8
 800e384:	f005 fdc6 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e388:	a803      	add	r0, sp, #12
 800e38a:	f005 fdc3 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e38e:	4628      	mov	r0, r5
 800e390:	f005 fda8 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e394:	9003      	str	r0, [sp, #12]
 800e396:	9a03      	ldr	r2, [sp, #12]
 800e398:	6a15      	ldr	r5, [r2, #32]
 800e39a:	b90d      	cbnz	r5, 800e3a0 <WM__InsertWindowIntoList+0x7c>
 800e39c:	6214      	str	r4, [r2, #32]
 800e39e:	e00b      	b.n	800e3b8 <WM__InsertWindowIntoList+0x94>
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	f005 fd9f 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e3a6:	2e00      	cmp	r6, #0
 800e3a8:	d1f4      	bne.n	800e394 <WM__InsertWindowIntoList+0x70>
 800e3aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e3ac:	071b      	lsls	r3, r3, #28
 800e3ae:	d5f1      	bpl.n	800e394 <WM__InsertWindowIntoList+0x70>
 800e3b0:	9903      	ldr	r1, [sp, #12]
 800e3b2:	9801      	ldr	r0, [sp, #4]
 800e3b4:	620c      	str	r4, [r1, #32]
 800e3b6:	6205      	str	r5, [r0, #32]
 800e3b8:	a801      	add	r0, sp, #4
 800e3ba:	f005 fdab 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e3be:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0800e3c0 <WM__RemoveWindowFromList>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	f005 fd8e 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	6980      	ldr	r0, [r0, #24]
 800e3cc:	b1a8      	cbz	r0, 800e3fa <WM__RemoveWindowFromList+0x3a>
 800e3ce:	f005 fd89 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e3d2:	69c3      	ldr	r3, [r0, #28]
 800e3d4:	42a3      	cmp	r3, r4
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	d105      	bne.n	800e3e6 <WM__RemoveWindowFromList+0x26>
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f005 fd82 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e3e0:	6a00      	ldr	r0, [r0, #32]
 800e3e2:	61f0      	str	r0, [r6, #28]
 800e3e4:	bd70      	pop	{r4, r5, r6, pc}
 800e3e6:	b143      	cbz	r3, 800e3fa <WM__RemoveWindowFromList+0x3a>
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f005 fd7b 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e3ee:	6a03      	ldr	r3, [r0, #32]
 800e3f0:	42a3      	cmp	r3, r4
 800e3f2:	d1f8      	bne.n	800e3e6 <WM__RemoveWindowFromList+0x26>
 800e3f4:	6a29      	ldr	r1, [r5, #32]
 800e3f6:	6201      	str	r1, [r0, #32]
 800e3f8:	bd70      	pop	{r4, r5, r6, pc}
 800e3fa:	bd70      	pop	{r4, r5, r6, pc}

0800e3fc <WM__Client2Screen>:
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	4608      	mov	r0, r1
 800e400:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e404:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e408:	f004 bb06 	b.w	8012a18 <GUI_MoveRect>

0800e40c <_SetClipRectUserIntersect>:
 800e40c:	4b11      	ldr	r3, [pc, #68]	; (800e454 <_SetClipRectUserIntersect+0x48>)
 800e40e:	b530      	push	{r4, r5, lr}
 800e410:	681c      	ldr	r4, [r3, #0]
 800e412:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e414:	b085      	sub	sp, #20
 800e416:	4605      	mov	r5, r0
 800e418:	b1ba      	cbz	r2, 800e44a <_SetClipRectUserIntersect+0x3e>
 800e41a:	6810      	ldr	r0, [r2, #0]
 800e41c:	6851      	ldr	r1, [r2, #4]
 800e41e:	ab02      	add	r3, sp, #8
 800e420:	c303      	stmia	r3!, {r0, r1}
 800e422:	480d      	ldr	r0, [pc, #52]	; (800e458 <_SetClipRectUserIntersect+0x4c>)
 800e424:	6800      	ldr	r0, [r0, #0]
 800e426:	b900      	cbnz	r0, 800e42a <_SetClipRectUserIntersect+0x1e>
 800e428:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e42a:	f005 fd65 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e42e:	ac04      	add	r4, sp, #16
 800e430:	a902      	add	r1, sp, #8
 800e432:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800e436:	f7ff ffe1 	bl	800e3fc <WM__Client2Screen>
 800e43a:	4620      	mov	r0, r4
 800e43c:	f005 fd6a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e440:	a802      	add	r0, sp, #8
 800e442:	4629      	mov	r1, r5
 800e444:	f003 fd1e 	bl	8011e84 <GUI__IntersectRect>
 800e448:	a802      	add	r0, sp, #8
 800e44a:	f002 ff01 	bl	8011250 <LCD_SetClipRectEx>
 800e44e:	b005      	add	sp, #20
 800e450:	bd30      	pop	{r4, r5, pc}
 800e452:	bf00      	nop
 800e454:	20000308 	.word	0x20000308
 800e458:	2000eae8 	.word	0x2000eae8

0800e45c <WM__ActivateClipRect>:
 800e45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e45e:	4b0e      	ldr	r3, [pc, #56]	; (800e498 <WM__ActivateClipRect+0x3c>)
 800e460:	6818      	ldr	r0, [r3, #0]
 800e462:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800e466:	b10a      	cbz	r2, 800e46c <WM__ActivateClipRect+0x10>
 800e468:	480c      	ldr	r0, [pc, #48]	; (800e49c <WM__ActivateClipRect+0x40>)
 800e46a:	e011      	b.n	800e490 <WM__ActivateClipRect+0x34>
 800e46c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800e46e:	f005 fd43 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e472:	9001      	str	r0, [sp, #4]
 800e474:	c803      	ldmia	r0, {r0, r1}
 800e476:	ac02      	add	r4, sp, #8
 800e478:	e884 0003 	stmia.w	r4, {r0, r1}
 800e47c:	a801      	add	r0, sp, #4
 800e47e:	f005 fd49 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e482:	4907      	ldr	r1, [pc, #28]	; (800e4a0 <WM__ActivateClipRect+0x44>)
 800e484:	6809      	ldr	r1, [r1, #0]
 800e486:	b111      	cbz	r1, 800e48e <WM__ActivateClipRect+0x32>
 800e488:	4620      	mov	r0, r4
 800e48a:	f7ff ff1b 	bl	800e2c4 <WM__ClipAtParentBorders>
 800e48e:	4620      	mov	r0, r4
 800e490:	f7ff ffbc 	bl	800e40c <_SetClipRectUserIntersect>
 800e494:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800e496:	bf00      	nop
 800e498:	20000308 	.word	0x20000308
 800e49c:	2000e040 	.word	0x2000e040
 800e4a0:	2000eae8 	.word	0x2000eae8

0800e4a4 <WM__IsWindow>:
 800e4a4:	4b06      	ldr	r3, [pc, #24]	; (800e4c0 <WM__IsWindow+0x1c>)
 800e4a6:	b510      	push	{r4, lr}
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	6818      	ldr	r0, [r3, #0]
 800e4ac:	b128      	cbz	r0, 800e4ba <WM__IsWindow+0x16>
 800e4ae:	42a0      	cmp	r0, r4
 800e4b0:	d004      	beq.n	800e4bc <WM__IsWindow+0x18>
 800e4b2:	f005 fd17 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e4b6:	6940      	ldr	r0, [r0, #20]
 800e4b8:	e7f8      	b.n	800e4ac <WM__IsWindow+0x8>
 800e4ba:	bd10      	pop	{r4, pc}
 800e4bc:	2001      	movs	r0, #1
 800e4be:	bd10      	pop	{r4, pc}
 800e4c0:	2000eb08 	.word	0x2000eb08

0800e4c4 <WM__InvalidateDrawAndDescs>:
 800e4c4:	b513      	push	{r0, r1, r4, lr}
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	b300      	cbz	r0, 800e50c <WM__InvalidateDrawAndDescs+0x48>
 800e4ca:	f005 fd15 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e4ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e4d0:	9001      	str	r0, [sp, #4]
 800e4d2:	0791      	lsls	r1, r2, #30
 800e4d4:	d517      	bpl.n	800e506 <WM__InvalidateDrawAndDescs+0x42>
 800e4d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e4d8:	b140      	cbz	r0, 800e4ec <WM__InvalidateDrawAndDescs+0x28>
 800e4da:	4b0d      	ldr	r3, [pc, #52]	; (800e510 <WM__InvalidateDrawAndDescs+0x4c>)
 800e4dc:	6819      	ldr	r1, [r3, #0]
 800e4de:	42a1      	cmp	r1, r4
 800e4e0:	d004      	beq.n	800e4ec <WM__InvalidateDrawAndDescs+0x28>
 800e4e2:	f001 fdaf 	bl	8010044 <GUI_MEMDEV_Delete>
 800e4e6:	9a01      	ldr	r2, [sp, #4]
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	6250      	str	r0, [r2, #36]	; 0x24
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f7ff fc23 	bl	800dd38 <WM_GetFirstChild>
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	b13c      	cbz	r4, 800e506 <WM__InvalidateDrawAndDescs+0x42>
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f7ff ffe4 	bl	800e4c4 <WM__InvalidateDrawAndDescs>
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f005 fcf1 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e502:	6a04      	ldr	r4, [r0, #32]
 800e504:	e7f6      	b.n	800e4f4 <WM__InvalidateDrawAndDescs+0x30>
 800e506:	a801      	add	r0, sp, #4
 800e508:	f005 fd04 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e50c:	bd1c      	pop	{r2, r3, r4, pc}
 800e50e:	bf00      	nop
 800e510:	2000eb30 	.word	0x2000eb30

0800e514 <WM__RemoveFromLinList>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	4b08      	ldr	r3, [pc, #32]	; (800e538 <WM__RemoveFromLinList+0x24>)
 800e518:	4605      	mov	r5, r0
 800e51a:	6818      	ldr	r0, [r3, #0]
 800e51c:	b150      	cbz	r0, 800e534 <WM__RemoveFromLinList+0x20>
 800e51e:	f005 fce1 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e522:	4604      	mov	r4, r0
 800e524:	6940      	ldr	r0, [r0, #20]
 800e526:	42a8      	cmp	r0, r5
 800e528:	d1f8      	bne.n	800e51c <WM__RemoveFromLinList+0x8>
 800e52a:	f005 fcdb 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e52e:	6940      	ldr	r0, [r0, #20]
 800e530:	6160      	str	r0, [r4, #20]
 800e532:	bd38      	pop	{r3, r4, r5, pc}
 800e534:	bd38      	pop	{r3, r4, r5, pc}
 800e536:	bf00      	nop
 800e538:	2000eb08 	.word	0x2000eb08

0800e53c <WM__RectIsNZ>:
 800e53c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e540:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e544:	429a      	cmp	r2, r3
 800e546:	dc08      	bgt.n	800e55a <WM__RectIsNZ+0x1e>
 800e548:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800e54c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800e550:	4291      	cmp	r1, r2
 800e552:	bfcc      	ite	gt
 800e554:	2000      	movgt	r0, #0
 800e556:	2001      	movle	r0, #1
 800e558:	4770      	bx	lr
 800e55a:	2000      	movs	r0, #0
 800e55c:	4770      	bx	lr
	...

0800e560 <_Invalidate1Abs>:
 800e560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e562:	b085      	sub	sp, #20
 800e564:	4606      	mov	r6, r0
 800e566:	460d      	mov	r5, r1
 800e568:	4617      	mov	r7, r2
 800e56a:	f005 fcbb 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e56e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e570:	9001      	str	r0, [sp, #4]
 800e572:	07a0      	lsls	r0, r4, #30
 800e574:	d534      	bpl.n	800e5e0 <_Invalidate1Abs+0x80>
 800e576:	4628      	mov	r0, r5
 800e578:	f7ff ffe0 	bl	800e53c <WM__RectIsNZ>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d02f      	beq.n	800e5e0 <_Invalidate1Abs+0x80>
 800e580:	f640 0301 	movw	r3, #2049	; 0x801
 800e584:	4023      	ands	r3, r4
 800e586:	2b01      	cmp	r3, #1
 800e588:	d02a      	beq.n	800e5e0 <_Invalidate1Abs+0x80>
 800e58a:	4630      	mov	r0, r6
 800e58c:	f005 fcb4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e590:	ac02      	add	r4, sp, #8
 800e592:	4602      	mov	r2, r0
 800e594:	9001      	str	r0, [sp, #4]
 800e596:	4629      	mov	r1, r5
 800e598:	4620      	mov	r0, r4
 800e59a:	f003 fc41 	bl	8011e20 <GUI__IntersectRects>
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f7ff ffcc 	bl	800e53c <WM__RectIsNZ>
 800e5a4:	b1c8      	cbz	r0, 800e5da <_Invalidate1Abs+0x7a>
 800e5a6:	9a01      	ldr	r2, [sp, #4]
 800e5a8:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800e5aa:	f244 0120 	movw	r1, #16416	; 0x4020
 800e5ae:	4031      	ands	r1, r6
 800e5b0:	f102 0508 	add.w	r5, r2, #8
 800e5b4:	b129      	cbz	r1, 800e5c2 <_Invalidate1Abs+0x62>
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	4622      	mov	r2, r4
 800e5bc:	f004 fa3c 	bl	8012a38 <GUI_MergeRect>
 800e5c0:	e00b      	b.n	800e5da <_Invalidate1Abs+0x7a>
 800e5c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e5c6:	e885 0003 	stmia.w	r5, {r0, r1}
 800e5ca:	4806      	ldr	r0, [pc, #24]	; (800e5e4 <_Invalidate1Abs+0x84>)
 800e5cc:	8803      	ldrh	r3, [r0, #0]
 800e5ce:	433e      	orrs	r6, r7
 800e5d0:	6296      	str	r6, [r2, #40]	; 0x28
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	8002      	strh	r2, [r0, #0]
 800e5d6:	f003 ffdb 	bl	8012590 <GUI_SignalEvent>
 800e5da:	a801      	add	r0, sp, #4
 800e5dc:	f005 fc9a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e5e0:	b005      	add	sp, #20
 800e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5e4:	2000eb04 	.word	0x2000eb04

0800e5e8 <WM_InvalidateWindowAndDescsEx>:
 800e5e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e5ea:	460e      	mov	r6, r1
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	b338      	cbz	r0, 800e642 <WM_InvalidateWindowAndDescsEx+0x5a>
 800e5f2:	f005 fc81 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e5f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e5f8:	9001      	str	r0, [sp, #4]
 800e5fa:	079b      	lsls	r3, r3, #30
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	d403      	bmi.n	800e608 <WM_InvalidateWindowAndDescsEx+0x20>
 800e600:	a801      	add	r0, sp, #4
 800e602:	f005 fc87 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e606:	e01c      	b.n	800e642 <WM_InvalidateWindowAndDescsEx+0x5a>
 800e608:	a802      	add	r0, sp, #8
 800e60a:	4631      	mov	r1, r6
 800e60c:	f003 fc08 	bl	8011e20 <GUI__IntersectRects>
 800e610:	2800      	cmp	r0, #0
 800e612:	d0f5      	beq.n	800e600 <WM_InvalidateWindowAndDescsEx+0x18>
 800e614:	a801      	add	r0, sp, #4
 800e616:	f005 fc7d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e61a:	4620      	mov	r0, r4
 800e61c:	a902      	add	r1, sp, #8
 800e61e:	462a      	mov	r2, r5
 800e620:	f7ff ff9e 	bl	800e560 <_Invalidate1Abs>
 800e624:	4620      	mov	r0, r4
 800e626:	f7ff fb87 	bl	800dd38 <WM_GetFirstChild>
 800e62a:	4604      	mov	r4, r0
 800e62c:	b14c      	cbz	r4, 800e642 <WM_InvalidateWindowAndDescsEx+0x5a>
 800e62e:	4620      	mov	r0, r4
 800e630:	a902      	add	r1, sp, #8
 800e632:	462a      	mov	r2, r5
 800e634:	f7ff ffd8 	bl	800e5e8 <WM_InvalidateWindowAndDescsEx>
 800e638:	4620      	mov	r0, r4
 800e63a:	f005 fc53 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e63e:	6a04      	ldr	r4, [r0, #32]
 800e640:	e7f4      	b.n	800e62c <WM_InvalidateWindowAndDescsEx+0x44>
 800e642:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0800e644 <WM__InvalidateRect>:
 800e644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e648:	4680      	mov	r8, r0
 800e64a:	4617      	mov	r7, r2
 800e64c:	461d      	mov	r5, r3
 800e64e:	460c      	mov	r4, r1
 800e650:	2900      	cmp	r1, #0
 800e652:	d030      	beq.n	800e6b6 <WM__InvalidateRect+0x72>
 800e654:	4608      	mov	r0, r1
 800e656:	f005 fc4f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e65a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800e65c:	9001      	str	r0, [sp, #4]
 800e65e:	07b1      	lsls	r1, r6, #30
 800e660:	4602      	mov	r2, r0
 800e662:	d525      	bpl.n	800e6b0 <WM__InvalidateRect+0x6c>
 800e664:	a802      	add	r0, sp, #8
 800e666:	4641      	mov	r1, r8
 800e668:	f003 fbda 	bl	8011e20 <GUI__IntersectRects>
 800e66c:	b300      	cbz	r0, 800e6b0 <WM__InvalidateRect+0x6c>
 800e66e:	f640 0301 	movw	r3, #2049	; 0x801
 800e672:	4033      	ands	r3, r6
 800e674:	2b01      	cmp	r3, #1
 800e676:	d107      	bne.n	800e688 <WM__InvalidateRect+0x44>
 800e678:	9a01      	ldr	r2, [sp, #4]
 800e67a:	a802      	add	r0, sp, #8
 800e67c:	6991      	ldr	r1, [r2, #24]
 800e67e:	6a12      	ldr	r2, [r2, #32]
 800e680:	462b      	mov	r3, r5
 800e682:	f7ff ffdf 	bl	800e644 <WM__InvalidateRect>
 800e686:	e004      	b.n	800e692 <WM__InvalidateRect+0x4e>
 800e688:	4620      	mov	r0, r4
 800e68a:	a902      	add	r1, sp, #8
 800e68c:	462a      	mov	r2, r5
 800e68e:	f7ff ff67 	bl	800e560 <_Invalidate1Abs>
 800e692:	9801      	ldr	r0, [sp, #4]
 800e694:	69c4      	ldr	r4, [r0, #28]
 800e696:	b15c      	cbz	r4, 800e6b0 <WM__InvalidateRect+0x6c>
 800e698:	42bc      	cmp	r4, r7
 800e69a:	d009      	beq.n	800e6b0 <WM__InvalidateRect+0x6c>
 800e69c:	4620      	mov	r0, r4
 800e69e:	a902      	add	r1, sp, #8
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	f7ff ffa1 	bl	800e5e8 <WM_InvalidateWindowAndDescsEx>
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f005 fc1c 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e6ac:	6a04      	ldr	r4, [r0, #32]
 800e6ae:	e7f2      	b.n	800e696 <WM__InvalidateRect+0x52>
 800e6b0:	a801      	add	r0, sp, #4
 800e6b2:	f005 fc2f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e6b6:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

0800e6ba <WM__InvalidateRectEx>:
 800e6ba:	2320      	movs	r3, #32
 800e6bc:	f7ff bfc2 	b.w	800e644 <WM__InvalidateRect>

0800e6c0 <WM__DetachWindow>:
 800e6c0:	b513      	push	{r0, r1, r4, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	f005 fc18 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e6c8:	6981      	ldr	r1, [r0, #24]
 800e6ca:	9001      	str	r0, [sp, #4]
 800e6cc:	b141      	cbz	r1, 800e6e0 <WM__DetachWindow+0x20>
 800e6ce:	6a02      	ldr	r2, [r0, #32]
 800e6d0:	f7ff fff3 	bl	800e6ba <WM__InvalidateRectEx>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f7ff fe73 	bl	800e3c0 <WM__RemoveWindowFromList>
 800e6da:	9801      	ldr	r0, [sp, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	6182      	str	r2, [r0, #24]
 800e6e0:	a801      	add	r0, sp, #4
 800e6e2:	f005 fc17 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e6e6:	bd1c      	pop	{r2, r3, r4, pc}

0800e6e8 <WM__InvalidateParent>:
 800e6e8:	b570      	push	{r4, r5, r6, lr}
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	4608      	mov	r0, r1
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	4616      	mov	r6, r2
 800e6f2:	f005 fbf7 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e6f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e6f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	4621      	mov	r1, r4
 800e700:	4632      	mov	r2, r6
 800e702:	bf0c      	ite	eq
 800e704:	2320      	moveq	r3, #32
 800e706:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800e70a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e70e:	f7ff bf99 	b.w	800e644 <WM__InvalidateRect>

0800e712 <WM__Invalidate1Abs>:
 800e712:	2220      	movs	r2, #32
 800e714:	f7ff bf24 	b.w	800e560 <_Invalidate1Abs>

0800e718 <WM_SendMessage>:
 800e718:	b108      	cbz	r0, 800e71e <WM_SendMessage+0x6>
 800e71a:	f7fe bec9 	b.w	800d4b0 <WM__SendMessage>
 800e71e:	4770      	bx	lr

0800e720 <WM__SendMsgNoData>:
 800e720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e722:	ab04      	add	r3, sp, #16
 800e724:	9001      	str	r0, [sp, #4]
 800e726:	f843 1d10 	str.w	r1, [r3, #-16]!
 800e72a:	4669      	mov	r1, sp
 800e72c:	f7fe fec0 	bl	800d4b0 <WM__SendMessage>
 800e730:	b005      	add	sp, #20
 800e732:	bd00      	pop	{pc}

0800e734 <WM__GetClientRectWin>:
 800e734:	2300      	movs	r3, #0
 800e736:	800b      	strh	r3, [r1, #0]
 800e738:	8882      	ldrh	r2, [r0, #4]
 800e73a:	804b      	strh	r3, [r1, #2]
 800e73c:	8803      	ldrh	r3, [r0, #0]
 800e73e:	1ad2      	subs	r2, r2, r3
 800e740:	808a      	strh	r2, [r1, #4]
 800e742:	88c2      	ldrh	r2, [r0, #6]
 800e744:	8840      	ldrh	r0, [r0, #2]
 800e746:	1a13      	subs	r3, r2, r0
 800e748:	80cb      	strh	r3, [r1, #6]
 800e74a:	4770      	bx	lr

0800e74c <WM_InvalidateRect>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	460e      	mov	r6, r1
 800e750:	b086      	sub	sp, #24
 800e752:	4604      	mov	r4, r0
 800e754:	2800      	cmp	r0, #0
 800e756:	d033      	beq.n	800e7c0 <WM_InvalidateRect+0x74>
 800e758:	f005 fbce 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e75c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800e75e:	9001      	str	r0, [sp, #4]
 800e760:	07ab      	lsls	r3, r5, #30
 800e762:	d52a      	bpl.n	800e7ba <WM_InvalidateRect+0x6e>
 800e764:	c803      	ldmia	r0, {r0, r1}
 800e766:	ab06      	add	r3, sp, #24
 800e768:	e903 0003 	stmdb	r3, {r0, r1}
 800e76c:	03e8      	lsls	r0, r5, #15
 800e76e:	d502      	bpl.n	800e776 <WM_InvalidateRect+0x2a>
 800e770:	4620      	mov	r0, r4
 800e772:	f7ff fea7 	bl	800e4c4 <WM__InvalidateDrawAndDescs>
 800e776:	b15e      	cbz	r6, 800e790 <WM_InvalidateRect+0x44>
 800e778:	6830      	ldr	r0, [r6, #0]
 800e77a:	6871      	ldr	r1, [r6, #4]
 800e77c:	aa02      	add	r2, sp, #8
 800e77e:	c203      	stmia	r2!, {r0, r1}
 800e780:	9801      	ldr	r0, [sp, #4]
 800e782:	a902      	add	r1, sp, #8
 800e784:	f7ff fe3a 	bl	800e3fc <WM__Client2Screen>
 800e788:	a804      	add	r0, sp, #16
 800e78a:	a902      	add	r1, sp, #8
 800e78c:	f003 fb7a 	bl	8011e84 <GUI__IntersectRect>
 800e790:	a804      	add	r0, sp, #16
 800e792:	4621      	mov	r1, r4
 800e794:	f7ff fd96 	bl	800e2c4 <WM__ClipAtParentBorders>
 800e798:	b178      	cbz	r0, 800e7ba <WM_InvalidateRect+0x6e>
 800e79a:	f640 0001 	movw	r0, #2049	; 0x801
 800e79e:	4028      	ands	r0, r5
 800e7a0:	2801      	cmp	r0, #1
 800e7a2:	d106      	bne.n	800e7b2 <WM_InvalidateRect+0x66>
 800e7a4:	9b01      	ldr	r3, [sp, #4]
 800e7a6:	a804      	add	r0, sp, #16
 800e7a8:	6999      	ldr	r1, [r3, #24]
 800e7aa:	6a1a      	ldr	r2, [r3, #32]
 800e7ac:	f7ff ff85 	bl	800e6ba <WM__InvalidateRectEx>
 800e7b0:	e003      	b.n	800e7ba <WM_InvalidateRect+0x6e>
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	a904      	add	r1, sp, #16
 800e7b6:	f7ff ffac 	bl	800e712 <WM__Invalidate1Abs>
 800e7ba:	a801      	add	r0, sp, #4
 800e7bc:	f005 fbaa 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e7c0:	b006      	add	sp, #24
 800e7c2:	bd70      	pop	{r4, r5, r6, pc}

0800e7c4 <WM_InvalidateWindow>:
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	f7ff bfc1 	b.w	800e74c <WM_InvalidateRect>
	...

0800e7cc <WM__GetTopLevelLayer>:
 800e7cc:	b510      	push	{r4, lr}
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	f005 fb88 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e7d4:	6980      	ldr	r0, [r0, #24]
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d1f9      	bne.n	800e7ce <WM__GetTopLevelLayer+0x2>
 800e7da:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <WM__GetTopLevelLayer+0x24>)
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	4294      	cmp	r4, r2
 800e7e0:	d005      	beq.n	800e7ee <WM__GetTopLevelLayer+0x22>
 800e7e2:	6858      	ldr	r0, [r3, #4]
 800e7e4:	4284      	cmp	r4, r0
 800e7e6:	bf14      	ite	ne
 800e7e8:	f04f 30ff 	movne.w	r0, #4294967295
 800e7ec:	2001      	moveq	r0, #1
 800e7ee:	bd10      	pop	{r4, pc}
 800e7f0:	2000eaec 	.word	0x2000eaec

0800e7f4 <WM__SelectTopLevelLayer>:
 800e7f4:	b508      	push	{r3, lr}
 800e7f6:	f7ff ffe9 	bl	800e7cc <WM__GetTopLevelLayer>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	db03      	blt.n	800e806 <WM__SelectTopLevelLayer+0x12>
 800e7fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e802:	f003 bfdb 	b.w	80127bc <GUI_SelectLayer>
 800e806:	bd08      	pop	{r3, pc}

0800e808 <WM_SelectWindow>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	4b0d      	ldr	r3, [pc, #52]	; (800e840 <WM_SelectWindow+0x38>)
 800e80c:	6819      	ldr	r1, [r3, #0]
 800e80e:	4604      	mov	r4, r0
 800e810:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800e812:	b908      	cbnz	r0, 800e818 <WM_SelectWindow+0x10>
 800e814:	4a0b      	ldr	r2, [pc, #44]	; (800e844 <WM_SelectWindow+0x3c>)
 800e816:	6814      	ldr	r4, [r2, #0]
 800e818:	648c      	str	r4, [r1, #72]	; 0x48
 800e81a:	4620      	mov	r0, r4
 800e81c:	f7ff ffea 	bl	800e7f4 <WM__SelectTopLevelLayer>
 800e820:	f003 f91e 	bl	8011a60 <LCD_SetClipRectMax>
 800e824:	4620      	mov	r0, r4
 800e826:	f005 fb5d 	bl	8013ee4 <GUI_ALLOC_h2p>
 800e82a:	4b05      	ldr	r3, [pc, #20]	; (800e840 <WM_SelectWindow+0x38>)
 800e82c:	f9b0 1000 	ldrsh.w	r1, [r0]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800e836:	64d9      	str	r1, [r3, #76]	; 0x4c
 800e838:	6518      	str	r0, [r3, #80]	; 0x50
 800e83a:	4628      	mov	r0, r5
 800e83c:	bd38      	pop	{r3, r4, r5, pc}
 800e83e:	bf00      	nop
 800e840:	20000308 	.word	0x20000308
 800e844:	2000eb08 	.word	0x2000eb08

0800e848 <WM_DeleteWindow>:
 800e848:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e84a:	4604      	mov	r4, r0
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d061      	beq.n	800e914 <WM_DeleteWindow+0xcc>
 800e850:	f7ff fe28 	bl	800e4a4 <WM__IsWindow>
 800e854:	2800      	cmp	r0, #0
 800e856:	d05d      	beq.n	800e914 <WM_DeleteWindow+0xcc>
 800e858:	4620      	mov	r0, r4
 800e85a:	f7ff ffb7 	bl	800e7cc <WM__GetTopLevelLayer>
 800e85e:	210b      	movs	r1, #11
 800e860:	4606      	mov	r6, r0
 800e862:	4620      	mov	r0, r4
 800e864:	f7ff ff5c 	bl	800e720 <WM__SendMsgNoData>
 800e868:	4620      	mov	r0, r4
 800e86a:	f007 f957 	bl	8015b1c <WM__DeleteAssocTimer>
 800e86e:	4620      	mov	r0, r4
 800e870:	f005 fb42 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e874:	9001      	str	r0, [sp, #4]
 800e876:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e878:	b108      	cbz	r0, 800e87e <WM_DeleteWindow+0x36>
 800e87a:	f001 fbe3 	bl	8010044 <GUI_MEMDEV_Delete>
 800e87e:	4826      	ldr	r0, [pc, #152]	; (800e918 <WM_DeleteWindow+0xd0>)
 800e880:	4b26      	ldr	r3, [pc, #152]	; (800e91c <WM_DeleteWindow+0xd4>)
 800e882:	6805      	ldr	r5, [r0, #0]
 800e884:	4a26      	ldr	r2, [pc, #152]	; (800e920 <WM_DeleteWindow+0xd8>)
 800e886:	4827      	ldr	r0, [pc, #156]	; (800e924 <WM_DeleteWindow+0xdc>)
 800e888:	2100      	movs	r1, #0
 800e88a:	6019      	str	r1, [r3, #0]
 800e88c:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800e890:	42a3      	cmp	r3, r4
 800e892:	bf08      	it	eq
 800e894:	f842 1025 	streq.w	r1, [r2, r5, lsl #2]
 800e898:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
 800e89c:	42a1      	cmp	r1, r4
 800e89e:	d102      	bne.n	800e8a6 <WM_DeleteWindow+0x5e>
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 800e8a6:	4d20      	ldr	r5, [pc, #128]	; (800e928 <WM_DeleteWindow+0xe0>)
 800e8a8:	682d      	ldr	r5, [r5, #0]
 800e8aa:	b12d      	cbz	r5, 800e8b8 <WM_DeleteWindow+0x70>
 800e8ac:	6868      	ldr	r0, [r5, #4]
 800e8ae:	42a0      	cmp	r0, r4
 800e8b0:	d1fa      	bne.n	800e8a8 <WM_DeleteWindow+0x60>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	606b      	str	r3, [r5, #4]
 800e8b6:	e7f7      	b.n	800e8a8 <WM_DeleteWindow+0x60>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	2107      	movs	r1, #7
 800e8bc:	f7ff f8c5 	bl	800da4a <WM_NotifyParent>
 800e8c0:	9d01      	ldr	r5, [sp, #4]
 800e8c2:	69e8      	ldr	r0, [r5, #28]
 800e8c4:	f7ff ffc0 	bl	800e848 <WM_DeleteWindow>
 800e8c8:	69eb      	ldr	r3, [r5, #28]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d1f9      	bne.n	800e8c2 <WM_DeleteWindow+0x7a>
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f7ff fef6 	bl	800e6c0 <WM__DetachWindow>
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f7ff fe1d 	bl	800e514 <WM__RemoveFromLinList>
 800e8da:	9801      	ldr	r0, [sp, #4]
 800e8dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e8de:	07d9      	lsls	r1, r3, #31
 800e8e0:	d503      	bpl.n	800e8ea <WM_DeleteWindow+0xa2>
 800e8e2:	4a12      	ldr	r2, [pc, #72]	; (800e92c <WM_DeleteWindow+0xe4>)
 800e8e4:	6811      	ldr	r1, [r2, #0]
 800e8e6:	1e48      	subs	r0, r1, #1
 800e8e8:	6010      	str	r0, [r2, #0]
 800e8ea:	069a      	lsls	r2, r3, #26
 800e8ec:	d503      	bpl.n	800e8f6 <WM_DeleteWindow+0xae>
 800e8ee:	4b10      	ldr	r3, [pc, #64]	; (800e930 <WM_DeleteWindow+0xe8>)
 800e8f0:	881a      	ldrh	r2, [r3, #0]
 800e8f2:	1e51      	subs	r1, r2, #1
 800e8f4:	8019      	strh	r1, [r3, #0]
 800e8f6:	a801      	add	r0, sp, #4
 800e8f8:	f005 fb0c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e8fc:	480d      	ldr	r0, [pc, #52]	; (800e934 <WM_DeleteWindow+0xec>)
 800e8fe:	8803      	ldrh	r3, [r0, #0]
 800e900:	1e5a      	subs	r2, r3, #1
 800e902:	8002      	strh	r2, [r0, #0]
 800e904:	4620      	mov	r0, r4
 800e906:	f005 fb31 	bl	8013f6c <GUI_ALLOC_Free>
 800e90a:	490b      	ldr	r1, [pc, #44]	; (800e938 <WM_DeleteWindow+0xf0>)
 800e90c:	f851 0026 	ldr.w	r0, [r1, r6, lsl #2]
 800e910:	f7ff ff7a 	bl	800e808 <WM_SelectWindow>
 800e914:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800e916:	bf00      	nop
 800e918:	2000eb0c 	.word	0x2000eb0c
 800e91c:	2000e050 	.word	0x2000e050
 800e920:	2000eafc 	.word	0x2000eafc
 800e924:	2000eb28 	.word	0x2000eb28
 800e928:	2000eb20 	.word	0x2000eb20
 800e92c:	2000eb34 	.word	0x2000eb34
 800e930:	2000eb04 	.word	0x2000eb04
 800e934:	2000eae4 	.word	0x2000eae4
 800e938:	2000eaec 	.word	0x2000eaec

0800e93c <WM_CreateWindowAsChild>:
 800e93c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e940:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e942:	469b      	mov	fp, r3
 800e944:	4b4e      	ldr	r3, [pc, #312]	; (800ea80 <WM_CreateWindowAsChild+0x144>)
 800e946:	4680      	mov	r8, r0
 800e948:	4689      	mov	r9, r1
 800e94a:	4692      	mov	sl, r2
 800e94c:	681d      	ldr	r5, [r3, #0]
 800e94e:	bb66      	cbnz	r6, 800e9aa <WM_CreateWindowAsChild+0x6e>
 800e950:	484c      	ldr	r0, [pc, #304]	; (800ea84 <WM_CreateWindowAsChild+0x148>)
 800e952:	8801      	ldrh	r1, [r0, #0]
 800e954:	b361      	cbz	r1, 800e9b0 <WM_CreateWindowAsChild+0x74>
 800e956:	4a4c      	ldr	r2, [pc, #304]	; (800ea88 <WM_CreateWindowAsChild+0x14c>)
 800e958:	4b4c      	ldr	r3, [pc, #304]	; (800ea8c <WM_CreateWindowAsChild+0x150>)
 800e95a:	6814      	ldr	r4, [r2, #0]
 800e95c:	7c60      	ldrb	r0, [r4, #17]
 800e95e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800e962:	1c4c      	adds	r4, r1, #1
 800e964:	d024      	beq.n	800e9b0 <WM_CreateWindowAsChild+0x74>
 800e966:	b319      	cbz	r1, 800e9b0 <WM_CreateWindowAsChild+0x74>
 800e968:	460e      	mov	r6, r1
 800e96a:	4630      	mov	r0, r6
 800e96c:	f005 fac4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e970:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e974:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800e978:	9001      	str	r0, [sp, #4]
 800e97a:	4490      	add	r8, r2
 800e97c:	44a1      	add	r9, r4
 800e97e:	f1ba 0f00 	cmp.w	sl, #0
 800e982:	d105      	bne.n	800e990 <WM_CreateWindowAsChild+0x54>
 800e984:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800e988:	ebc2 030a 	rsb	r3, r2, sl
 800e98c:	f103 0a01 	add.w	sl, r3, #1
 800e990:	f1bb 0f00 	cmp.w	fp, #0
 800e994:	d105      	bne.n	800e9a2 <WM_CreateWindowAsChild+0x66>
 800e996:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800e99a:	ebc4 000b 	rsb	r0, r4, fp
 800e99e:	f100 0b01 	add.w	fp, r0, #1
 800e9a2:	a801      	add	r0, sp, #4
 800e9a4:	f005 fab6 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800e9a8:	e002      	b.n	800e9b0 <WM_CreateWindowAsChild+0x74>
 800e9aa:	1c70      	adds	r0, r6, #1
 800e9ac:	d1dd      	bne.n	800e96a <WM_CreateWindowAsChild+0x2e>
 800e9ae:	2600      	movs	r6, #0
 800e9b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e9b2:	302c      	adds	r0, #44	; 0x2c
 800e9b4:	f005 fd14 	bl	80143e0 <GUI_ALLOC_AllocZero>
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d05c      	beq.n	800ea78 <WM_CreateWindowAsChild+0x13c>
 800e9be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e9c0:	432f      	orrs	r7, r5
 800e9c2:	4d30      	ldr	r5, [pc, #192]	; (800ea84 <WM_CreateWindowAsChild+0x148>)
 800e9c4:	8829      	ldrh	r1, [r5, #0]
 800e9c6:	1c4a      	adds	r2, r1, #1
 800e9c8:	802a      	strh	r2, [r5, #0]
 800e9ca:	f005 fa95 	bl	8013ef8 <GUI_ALLOC_LockH>
 800e9ce:	ab02      	add	r3, sp, #8
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	f843 0d08 	str.w	r0, [r3, #-8]!
 800e9d6:	492e      	ldr	r1, [pc, #184]	; (800ea90 <WM_CreateWindowAsChild+0x154>)
 800e9d8:	f8a0 8000 	strh.w	r8, [r0]
 800e9dc:	f8a0 9002 	strh.w	r9, [r0, #2]
 800e9e0:	44d0      	add	r8, sl
 800e9e2:	44d9      	add	r9, fp
 800e9e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e9e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e9ea:	f109 39ff 	add.w	r9, r9, #4294967295
 800e9ee:	4039      	ands	r1, r7
 800e9f0:	f8a0 8004 	strh.w	r8, [r0, #4]
 800e9f4:	f8a0 9006 	strh.w	r9, [r0, #6]
 800e9f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e9fa:	ea42 0301 	orr.w	r3, r2, r1
 800e9fe:	6128      	str	r0, [r5, #16]
 800ea00:	62ab      	str	r3, [r5, #40]	; 0x28
 800ea02:	4668      	mov	r0, sp
 800ea04:	f005 fa86 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ea08:	4922      	ldr	r1, [pc, #136]	; (800ea94 <WM_CreateWindowAsChild+0x158>)
 800ea0a:	6808      	ldr	r0, [r1, #0]
 800ea0c:	b148      	cbz	r0, 800ea22 <WM_CreateWindowAsChild+0xe6>
 800ea0e:	f005 fa69 	bl	8013ee4 <GUI_ALLOC_h2p>
 800ea12:	4605      	mov	r5, r0
 800ea14:	4620      	mov	r0, r4
 800ea16:	f005 fa65 	bl	8013ee4 <GUI_ALLOC_h2p>
 800ea1a:	696a      	ldr	r2, [r5, #20]
 800ea1c:	6142      	str	r2, [r0, #20]
 800ea1e:	616c      	str	r4, [r5, #20]
 800ea20:	e000      	b.n	800ea24 <WM_CreateWindowAsChild+0xe8>
 800ea22:	600c      	str	r4, [r1, #0]
 800ea24:	4620      	mov	r0, r4
 800ea26:	4631      	mov	r1, r6
 800ea28:	f7ff fc7c 	bl	800e324 <WM__InsertWindowIntoList>
 800ea2c:	06b8      	lsls	r0, r7, #26
 800ea2e:	d502      	bpl.n	800ea36 <WM_CreateWindowAsChild+0xfa>
 800ea30:	4620      	mov	r0, r4
 800ea32:	f7ff fee9 	bl	800e808 <WM_SelectWindow>
 800ea36:	07f9      	lsls	r1, r7, #31
 800ea38:	d503      	bpl.n	800ea42 <WM_CreateWindowAsChild+0x106>
 800ea3a:	4817      	ldr	r0, [pc, #92]	; (800ea98 <WM_CreateWindowAsChild+0x15c>)
 800ea3c:	6803      	ldr	r3, [r0, #0]
 800ea3e:	1c59      	adds	r1, r3, #1
 800ea40:	6001      	str	r1, [r0, #0]
 800ea42:	067a      	lsls	r2, r7, #25
 800ea44:	d502      	bpl.n	800ea4c <WM_CreateWindowAsChild+0x110>
 800ea46:	4620      	mov	r0, r4
 800ea48:	f007 f946 	bl	8015cd8 <WM_BringToBottom>
 800ea4c:	07bb      	lsls	r3, r7, #30
 800ea4e:	d50f      	bpl.n	800ea70 <WM_CreateWindowAsChild+0x134>
 800ea50:	4620      	mov	r0, r4
 800ea52:	f005 fa51 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ea56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ea58:	aa02      	add	r2, sp, #8
 800ea5a:	f043 0102 	orr.w	r1, r3, #2
 800ea5e:	f842 0d08 	str.w	r0, [r2, #-8]!
 800ea62:	6281      	str	r1, [r0, #40]	; 0x28
 800ea64:	4668      	mov	r0, sp
 800ea66:	f005 fa55 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f7ff feaa 	bl	800e7c4 <WM_InvalidateWindow>
 800ea70:	4620      	mov	r0, r4
 800ea72:	2101      	movs	r1, #1
 800ea74:	f7ff fe54 	bl	800e720 <WM__SendMsgNoData>
 800ea78:	4620      	mov	r0, r4
 800ea7a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7e:	bf00      	nop
 800ea80:	2000eb14 	.word	0x2000eb14
 800ea84:	2000eae4 	.word	0x2000eae4
 800ea88:	20000308 	.word	0x20000308
 800ea8c:	2000eaec 	.word	0x2000eaec
 800ea90:	003f3f9f 	.word	0x003f3f9f
 800ea94:	2000eb08 	.word	0x2000eb08
 800ea98:	2000eb34 	.word	0x2000eb34

0800ea9c <WM_CreateWindow>:
 800ea9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea9e:	2400      	movs	r4, #0
 800eaa0:	9400      	str	r4, [sp, #0]
 800eaa2:	9c06      	ldr	r4, [sp, #24]
 800eaa4:	9401      	str	r4, [sp, #4]
 800eaa6:	9c07      	ldr	r4, [sp, #28]
 800eaa8:	9402      	str	r4, [sp, #8]
 800eaaa:	9c08      	ldr	r4, [sp, #32]
 800eaac:	9403      	str	r4, [sp, #12]
 800eaae:	f7ff ff45 	bl	800e93c <WM_CreateWindowAsChild>
 800eab2:	b004      	add	sp, #16
 800eab4:	bd10      	pop	{r4, pc}
	...

0800eab8 <WM_GetActiveWindow>:
 800eab8:	4b01      	ldr	r3, [pc, #4]	; (800eac0 <WM_GetActiveWindow+0x8>)
 800eaba:	6818      	ldr	r0, [r3, #0]
 800eabc:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800eabe:	4770      	bx	lr
 800eac0:	20000308 	.word	0x20000308

0800eac4 <WM__GetNextIVR>:
 800eac4:	b530      	push	{r4, r5, lr}
 800eac6:	4b5d      	ldr	r3, [pc, #372]	; (800ec3c <WM__GetNextIVR+0x178>)
 800eac8:	6818      	ldr	r0, [r3, #0]
 800eaca:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800eace:	b085      	sub	sp, #20
 800ead0:	2800      	cmp	r0, #0
 800ead2:	f000 80b1 	beq.w	800ec38 <WM__GetNextIVR+0x174>
 800ead6:	4b5a      	ldr	r3, [pc, #360]	; (800ec40 <WM__GetNextIVR+0x17c>)
 800ead8:	6959      	ldr	r1, [r3, #20]
 800eada:	2901      	cmp	r1, #1
 800eadc:	dc2c      	bgt.n	800eb38 <WM__GetNextIVR+0x74>
 800eade:	f103 0108 	add.w	r1, r3, #8
 800eae2:	691a      	ldr	r2, [r3, #16]
 800eae4:	c903      	ldmia	r1, {r0, r1}
 800eae6:	3201      	adds	r2, #1
 800eae8:	ac04      	add	r4, sp, #16
 800eaea:	611a      	str	r2, [r3, #16]
 800eaec:	e904 0003 	stmdb	r4, {r0, r1}
 800eaf0:	b922      	cbnz	r2, 800eafc <WM__GetNextIVR+0x38>
 800eaf2:	881a      	ldrh	r2, [r3, #0]
 800eaf4:	f8ad 2008 	strh.w	r2, [sp, #8]
 800eaf8:	885a      	ldrh	r2, [r3, #2]
 800eafa:	e012      	b.n	800eb22 <WM__GetNextIVR+0x5e>
 800eafc:	8998      	ldrh	r0, [r3, #12]
 800eafe:	8959      	ldrh	r1, [r3, #10]
 800eb00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eb04:	f8ad 100a 	strh.w	r1, [sp, #10]
 800eb08:	1c42      	adds	r2, r0, #1
 800eb0a:	b294      	uxth	r4, r2
 800eb0c:	b220      	sxth	r0, r4
 800eb0e:	4283      	cmp	r3, r0
 800eb10:	f8ad 4008 	strh.w	r4, [sp, #8]
 800eb14:	da07      	bge.n	800eb26 <WM__GetNextIVR+0x62>
 800eb16:	484a      	ldr	r0, [pc, #296]	; (800ec40 <WM__GetNextIVR+0x17c>)
 800eb18:	8804      	ldrh	r4, [r0, #0]
 800eb1a:	89c3      	ldrh	r3, [r0, #14]
 800eb1c:	f8ad 4008 	strh.w	r4, [sp, #8]
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	f8ad 200a 	strh.w	r2, [sp, #10]
 800eb26:	4c46      	ldr	r4, [pc, #280]	; (800ec40 <WM__GetNextIVR+0x17c>)
 800eb28:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800eb2c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800eb30:	4299      	cmp	r1, r3
 800eb32:	dd05      	ble.n	800eb40 <WM__GetNextIVR+0x7c>
 800eb34:	4b42      	ldr	r3, [pc, #264]	; (800ec40 <WM__GetNextIVR+0x17c>)
 800eb36:	6959      	ldr	r1, [r3, #20]
 800eb38:	1e48      	subs	r0, r1, #1
 800eb3a:	6158      	str	r0, [r3, #20]
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e07b      	b.n	800ec38 <WM__GetNextIVR+0x174>
 800eb40:	4d3e      	ldr	r5, [pc, #248]	; (800ec3c <WM__GetNextIVR+0x178>)
 800eb42:	6828      	ldr	r0, [r5, #0]
 800eb44:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800eb46:	f005 f9d7 	bl	8013ef8 <GUI_ALLOC_LockH>
 800eb4a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800eb4e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800eb52:	9001      	str	r0, [sp, #4]
 800eb54:	428a      	cmp	r2, r1
 800eb56:	d118      	bne.n	800eb8a <WM__GetNextIVR+0xc6>
 800eb58:	6828      	ldr	r0, [r5, #0]
 800eb5a:	88e3      	ldrh	r3, [r4, #6]
 800eb5c:	88a4      	ldrh	r4, [r4, #4]
 800eb5e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800eb60:	f8ad 300e 	strh.w	r3, [sp, #14]
 800eb64:	f8ad 400c 	strh.w	r4, [sp, #12]
 800eb68:	b152      	cbz	r2, 800eb80 <WM__GetNextIVR+0xbc>
 800eb6a:	4610      	mov	r0, r2
 800eb6c:	f005 f9ba 	bl	8013ee4 <GUI_ALLOC_h2p>
 800eb70:	4604      	mov	r4, r0
 800eb72:	2200      	movs	r2, #0
 800eb74:	6a00      	ldr	r0, [r0, #32]
 800eb76:	a902      	add	r1, sp, #8
 800eb78:	f7ff fa68 	bl	800e04c <_Findy1>
 800eb7c:	69a2      	ldr	r2, [r4, #24]
 800eb7e:	e7f3      	b.n	800eb68 <WM__GetNextIVR+0xa4>
 800eb80:	9901      	ldr	r1, [sp, #4]
 800eb82:	69c8      	ldr	r0, [r1, #28]
 800eb84:	a902      	add	r1, sp, #8
 800eb86:	f7ff fa61 	bl	800e04c <_Findy1>
 800eb8a:	4b2c      	ldr	r3, [pc, #176]	; (800ec3c <WM__GetNextIVR+0x178>)
 800eb8c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800eb90:	681c      	ldr	r4, [r3, #0]
 800eb92:	f8ad 200c 	strh.w	r2, [sp, #12]
 800eb96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800eb98:	ac02      	add	r4, sp, #8
 800eb9a:	b162      	cbz	r2, 800ebb6 <WM__GetNextIVR+0xf2>
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	f005 f9a1 	bl	8013ee4 <GUI_ALLOC_h2p>
 800eba2:	4621      	mov	r1, r4
 800eba4:	4605      	mov	r5, r0
 800eba6:	2200      	movs	r2, #0
 800eba8:	6a00      	ldr	r0, [r0, #32]
 800ebaa:	f7ff faa5 	bl	800e0f8 <_Findx0>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d1eb      	bne.n	800eb8a <WM__GetNextIVR+0xc6>
 800ebb2:	69aa      	ldr	r2, [r5, #24]
 800ebb4:	e7f0      	b.n	800eb98 <WM__GetNextIVR+0xd4>
 800ebb6:	9801      	ldr	r0, [sp, #4]
 800ebb8:	4621      	mov	r1, r4
 800ebba:	69c0      	ldr	r0, [r0, #28]
 800ebbc:	f7ff fa9c 	bl	800e0f8 <_Findx0>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d1e2      	bne.n	800eb8a <WM__GetNextIVR+0xc6>
 800ebc4:	4b1e      	ldr	r3, [pc, #120]	; (800ec40 <WM__GetNextIVR+0x17c>)
 800ebc6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800ebca:	889a      	ldrh	r2, [r3, #4]
 800ebcc:	b210      	sxth	r0, r2
 800ebce:	4281      	cmp	r1, r0
 800ebd0:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ebd4:	dd08      	ble.n	800ebe8 <WM__GetNextIVR+0x124>
 800ebd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ebda:	3308      	adds	r3, #8
 800ebdc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ebe0:	a801      	add	r0, sp, #4
 800ebe2:	f005 f997 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ebe6:	e796      	b.n	800eb16 <WM__GetNextIVR+0x52>
 800ebe8:	4d14      	ldr	r5, [pc, #80]	; (800ec3c <WM__GetNextIVR+0x178>)
 800ebea:	682c      	ldr	r4, [r5, #0]
 800ebec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ebee:	ac02      	add	r4, sp, #8
 800ebf0:	b152      	cbz	r2, 800ec08 <WM__GetNextIVR+0x144>
 800ebf2:	4610      	mov	r0, r2
 800ebf4:	f005 f976 	bl	8013ee4 <GUI_ALLOC_h2p>
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	6a00      	ldr	r0, [r0, #32]
 800ebfe:	4621      	mov	r1, r4
 800ec00:	f7ff fabf 	bl	800e182 <_Findx1>
 800ec04:	69aa      	ldr	r2, [r5, #24]
 800ec06:	e7f2      	b.n	800ebee <WM__GetNextIVR+0x12a>
 800ec08:	ad04      	add	r5, sp, #16
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	f855 3d0c 	ldr.w	r3, [r5, #-12]!
 800ec10:	69d8      	ldr	r0, [r3, #28]
 800ec12:	f7ff fab6 	bl	800e182 <_Findx1>
 800ec16:	4628      	mov	r0, r5
 800ec18:	f005 f97c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ec1c:	4b08      	ldr	r3, [pc, #32]	; (800ec40 <WM__GetNextIVR+0x17c>)
 800ec1e:	691a      	ldr	r2, [r3, #16]
 800ec20:	f644 6120 	movw	r1, #20000	; 0x4e20
 800ec24:	428a      	cmp	r2, r1
 800ec26:	dc85      	bgt.n	800eb34 <WM__GetNextIVR+0x70>
 800ec28:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ec2c:	3308      	adds	r3, #8
 800ec2e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec32:	f7ff fc13 	bl	800e45c <WM__ActivateClipRect>
 800ec36:	2001      	movs	r0, #1
 800ec38:	b005      	add	sp, #20
 800ec3a:	bd30      	pop	{r4, r5, pc}
 800ec3c:	20000308 	.word	0x20000308
 800ec40:	2000e038 	.word	0x2000e038

0800ec44 <WM__InitIVRSearch>:
 800ec44:	b570      	push	{r4, r5, r6, lr}
 800ec46:	4b3b      	ldr	r3, [pc, #236]	; (800ed34 <WM__InitIVRSearch+0xf0>)
 800ec48:	4605      	mov	r5, r0
 800ec4a:	6818      	ldr	r0, [r3, #0]
 800ec4c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800ec50:	b086      	sub	sp, #24
 800ec52:	b912      	cbnz	r2, 800ec5a <WM__InitIVRSearch+0x16>
 800ec54:	f7ff fc02 	bl	800e45c <WM__ActivateClipRect>
 800ec58:	e068      	b.n	800ed2c <WM__InitIVRSearch+0xe8>
 800ec5a:	4c37      	ldr	r4, [pc, #220]	; (800ed38 <WM__InitIVRSearch+0xf4>)
 800ec5c:	6961      	ldr	r1, [r4, #20]
 800ec5e:	1c4b      	adds	r3, r1, #1
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	6163      	str	r3, [r4, #20]
 800ec64:	dc62      	bgt.n	800ed2c <WM__InitIVRSearch+0xe8>
 800ec66:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800ec68:	f005 f946 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ec6c:	4933      	ldr	r1, [pc, #204]	; (800ed3c <WM__InitIVRSearch+0xf8>)
 800ec6e:	9000      	str	r0, [sp, #0]
 800ec70:	780b      	ldrb	r3, [r1, #0]
 800ec72:	f04f 32ff 	mov.w	r2, #4294967295
 800ec76:	6122      	str	r2, [r4, #16]
 800ec78:	b123      	cbz	r3, 800ec84 <WM__InitIVRSearch+0x40>
 800ec7a:	f100 0108 	add.w	r1, r0, #8
 800ec7e:	ac02      	add	r4, sp, #8
 800ec80:	c903      	ldmia	r1, {r0, r1}
 800ec82:	e005      	b.n	800ec90 <WM__InitIVRSearch+0x4c>
 800ec84:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800ec86:	f016 0602 	ands.w	r6, r6, #2
 800ec8a:	d009      	beq.n	800eca0 <WM__InitIVRSearch+0x5c>
 800ec8c:	c803      	ldmia	r0, {r0, r1}
 800ec8e:	ac02      	add	r4, sp, #8
 800ec90:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec94:	b165      	cbz	r5, 800ecb0 <WM__InitIVRSearch+0x6c>
 800ec96:	a802      	add	r0, sp, #8
 800ec98:	4629      	mov	r1, r5
 800ec9a:	f003 f8f3 	bl	8011e84 <GUI__IntersectRect>
 800ec9e:	e007      	b.n	800ecb0 <WM__InitIVRSearch+0x6c>
 800eca0:	6960      	ldr	r0, [r4, #20]
 800eca2:	1e42      	subs	r2, r0, #1
 800eca4:	4668      	mov	r0, sp
 800eca6:	6162      	str	r2, [r4, #20]
 800eca8:	f005 f934 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ecac:	4630      	mov	r0, r6
 800ecae:	e03e      	b.n	800ed2e <WM__InitIVRSearch+0xea>
 800ecb0:	4b20      	ldr	r3, [pc, #128]	; (800ed34 <WM__InitIVRSearch+0xf0>)
 800ecb2:	6818      	ldr	r0, [r3, #0]
 800ecb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ecb6:	b1ca      	cbz	r2, 800ecec <WM__InitIVRSearch+0xa8>
 800ecb8:	9c00      	ldr	r4, [sp, #0]
 800ecba:	6851      	ldr	r1, [r2, #4]
 800ecbc:	9401      	str	r4, [sp, #4]
 800ecbe:	6810      	ldr	r0, [r2, #0]
 800ecc0:	4c1f      	ldr	r4, [pc, #124]	; (800ed40 <WM__InitIVRSearch+0xfc>)
 800ecc2:	ab04      	add	r3, sp, #16
 800ecc4:	c303      	stmia	r3!, {r0, r1}
 800ecc6:	6821      	ldr	r1, [r4, #0]
 800ecc8:	b131      	cbz	r1, 800ecd8 <WM__InitIVRSearch+0x94>
 800ecca:	a801      	add	r0, sp, #4
 800eccc:	f005 f922 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ecd0:	6820      	ldr	r0, [r4, #0]
 800ecd2:	f005 f911 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ecd6:	9001      	str	r0, [sp, #4]
 800ecd8:	9801      	ldr	r0, [sp, #4]
 800ecda:	a904      	add	r1, sp, #16
 800ecdc:	f7ff fb8e 	bl	800e3fc <WM__Client2Screen>
 800ece0:	a802      	add	r0, sp, #8
 800ece2:	a904      	add	r1, sp, #16
 800ece4:	f003 f8ce 	bl	8011e84 <GUI__IntersectRect>
 800ece8:	a801      	add	r0, sp, #4
 800ecea:	e000      	b.n	800ecee <WM__InitIVRSearch+0xaa>
 800ecec:	4668      	mov	r0, sp
 800ecee:	f005 f911 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ecf2:	4813      	ldr	r0, [pc, #76]	; (800ed40 <WM__InitIVRSearch+0xfc>)
 800ecf4:	6801      	ldr	r1, [r0, #0]
 800ecf6:	ac02      	add	r4, sp, #8
 800ecf8:	b129      	cbz	r1, 800ed06 <WM__InitIVRSearch+0xc2>
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7ff fae2 	bl	800e2c4 <WM__ClipAtParentBorders>
 800ed00:	b908      	cbnz	r0, 800ed06 <WM__InitIVRSearch+0xc2>
 800ed02:	4b0d      	ldr	r3, [pc, #52]	; (800ed38 <WM__InitIVRSearch+0xf4>)
 800ed04:	e007      	b.n	800ed16 <WM__InitIVRSearch+0xd2>
 800ed06:	4a0b      	ldr	r2, [pc, #44]	; (800ed34 <WM__InitIVRSearch+0xf0>)
 800ed08:	6813      	ldr	r3, [r2, #0]
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ed0e:	f7ff fad9 	bl	800e2c4 <WM__ClipAtParentBorders>
 800ed12:	4b09      	ldr	r3, [pc, #36]	; (800ed38 <WM__InitIVRSearch+0xf4>)
 800ed14:	b918      	cbnz	r0, 800ed1e <WM__InitIVRSearch+0xda>
 800ed16:	6959      	ldr	r1, [r3, #20]
 800ed18:	1e4a      	subs	r2, r1, #1
 800ed1a:	615a      	str	r2, [r3, #20]
 800ed1c:	e007      	b.n	800ed2e <WM__InitIVRSearch+0xea>
 800ed1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed22:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed26:	f7ff fecd 	bl	800eac4 <WM__GetNextIVR>
 800ed2a:	e000      	b.n	800ed2e <WM__InitIVRSearch+0xea>
 800ed2c:	2001      	movs	r0, #1
 800ed2e:	b006      	add	sp, #24
 800ed30:	bd70      	pop	{r4, r5, r6, pc}
 800ed32:	bf00      	nop
 800ed34:	20000308 	.word	0x20000308
 800ed38:	2000e038 	.word	0x2000e038
 800ed3c:	2000eb11 	.word	0x2000eb11
 800ed40:	2000eae8 	.word	0x2000eae8

0800ed44 <WM_SetDefault>:
 800ed44:	b508      	push	{r3, lr}
 800ed46:	f003 fcef 	bl	8012728 <GL_SetDefault>
 800ed4a:	4b02      	ldr	r3, [pc, #8]	; (800ed54 <WM_SetDefault+0x10>)
 800ed4c:	6818      	ldr	r0, [r3, #0]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	6442      	str	r2, [r0, #68]	; 0x44
 800ed52:	bd08      	pop	{r3, pc}
 800ed54:	20000308 	.word	0x20000308

0800ed58 <WM__Paint1>:
 800ed58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed5a:	b089      	sub	sp, #36	; 0x24
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	f005 f8cb 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ed62:	6907      	ldr	r7, [r0, #16]
 800ed64:	9001      	str	r0, [sp, #4]
 800ed66:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800ed68:	3008      	adds	r0, #8
 800ed6a:	c803      	ldmia	r0, {r0, r1}
 800ed6c:	ad02      	add	r5, sp, #8
 800ed6e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ed72:	a801      	add	r0, sp, #4
 800ed74:	f005 f8ce 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ed78:	2f00      	cmp	r7, #0
 800ed7a:	d030      	beq.n	800edde <WM__Paint1+0x86>
 800ed7c:	07b2      	lsls	r2, r6, #30
 800ed7e:	d52e      	bpl.n	800edde <WM__Paint1+0x86>
 800ed80:	4620      	mov	r0, r4
 800ed82:	212e      	movs	r1, #46	; 0x2e
 800ed84:	f7fe fde5 	bl	800d952 <WM_SendMessageNoPara>
 800ed88:	4b16      	ldr	r3, [pc, #88]	; (800ede4 <WM__Paint1+0x8c>)
 800ed8a:	781a      	ldrb	r2, [r3, #0]
 800ed8c:	1c50      	adds	r0, r2, #1
 800ed8e:	7018      	strb	r0, [r3, #0]
 800ed90:	04f3      	lsls	r3, r6, #19
 800ed92:	d50a      	bpl.n	800edaa <WM__Paint1+0x52>
 800ed94:	220f      	movs	r2, #15
 800ed96:	9405      	str	r4, [sp, #20]
 800ed98:	9204      	str	r2, [sp, #16]
 800ed9a:	9507      	str	r5, [sp, #28]
 800ed9c:	f7ff ffd2 	bl	800ed44 <WM_SetDefault>
 800eda0:	4620      	mov	r0, r4
 800eda2:	a904      	add	r1, sp, #16
 800eda4:	f7fe fb84 	bl	800d4b0 <WM__SendMessage>
 800eda8:	e011      	b.n	800edce <WM__Paint1+0x76>
 800edaa:	4628      	mov	r0, r5
 800edac:	f7ff ff4a 	bl	800ec44 <WM__InitIVRSearch>
 800edb0:	b168      	cbz	r0, 800edce <WM__Paint1+0x76>
 800edb2:	210f      	movs	r1, #15
 800edb4:	ab02      	add	r3, sp, #8
 800edb6:	9104      	str	r1, [sp, #16]
 800edb8:	9307      	str	r3, [sp, #28]
 800edba:	9405      	str	r4, [sp, #20]
 800edbc:	f7ff ffc2 	bl	800ed44 <WM_SetDefault>
 800edc0:	4620      	mov	r0, r4
 800edc2:	a904      	add	r1, sp, #16
 800edc4:	f7fe fb74 	bl	800d4b0 <WM__SendMessage>
 800edc8:	f7ff fe7c 	bl	800eac4 <WM__GetNextIVR>
 800edcc:	e7f0      	b.n	800edb0 <WM__Paint1+0x58>
 800edce:	4805      	ldr	r0, [pc, #20]	; (800ede4 <WM__Paint1+0x8c>)
 800edd0:	7801      	ldrb	r1, [r0, #0]
 800edd2:	1e4b      	subs	r3, r1, #1
 800edd4:	7003      	strb	r3, [r0, #0]
 800edd6:	212f      	movs	r1, #47	; 0x2f
 800edd8:	4620      	mov	r0, r4
 800edda:	f7fe fdba 	bl	800d952 <WM_SendMessageNoPara>
 800edde:	b009      	add	sp, #36	; 0x24
 800ede0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede2:	bf00      	nop
 800ede4:	2000eb11 	.word	0x2000eb11

0800ede8 <WM__Paint>:
 800ede8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edec:	b088      	sub	sp, #32
 800edee:	ae06      	add	r6, sp, #24
 800edf0:	9003      	str	r0, [sp, #12]
 800edf2:	f005 f881 	bl	8013ef8 <GUI_ALLOC_LockH>
 800edf6:	4603      	mov	r3, r0
 800edf8:	f100 0208 	add.w	r2, r0, #8
 800edfc:	9005      	str	r0, [sp, #20]
 800edfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee02:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800ee04:	699f      	ldr	r7, [r3, #24]
 800ee06:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ee0a:	f244 0420 	movw	r4, #16416	; 0x4020
 800ee0e:	e886 0003 	stmia.w	r6, {r0, r1}
 800ee12:	402c      	ands	r4, r5
 800ee14:	a805      	add	r0, sp, #20
 800ee16:	f005 f87d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ee1a:	2c00      	cmp	r4, #0
 800ee1c:	d035      	beq.n	800ee8a <WM__Paint+0xa2>
 800ee1e:	f1b8 0f00 	cmp.w	r8, #0
 800ee22:	d017      	beq.n	800ee54 <WM__Paint+0x6c>
 800ee24:	4630      	mov	r0, r6
 800ee26:	9903      	ldr	r1, [sp, #12]
 800ee28:	f7ff fa4c 	bl	800e2c4 <WM__ClipAtParentBorders>
 800ee2c:	b190      	cbz	r0, 800ee54 <WM__Paint+0x6c>
 800ee2e:	9803      	ldr	r0, [sp, #12]
 800ee30:	f7ff fcea 	bl	800e808 <WM_SelectWindow>
 800ee34:	0768      	lsls	r0, r5, #29
 800ee36:	d50f      	bpl.n	800ee58 <WM__Paint+0x70>
 800ee38:	b127      	cbz	r7, 800ee44 <WM__Paint+0x5c>
 800ee3a:	f005 0501 	and.w	r5, r5, #1
 800ee3e:	f085 0501 	eor.w	r5, r5, #1
 800ee42:	e000      	b.n	800ee46 <WM__Paint+0x5e>
 800ee44:	2501      	movs	r5, #1
 800ee46:	9500      	str	r5, [sp, #0]
 800ee48:	a806      	add	r0, sp, #24
 800ee4a:	4912      	ldr	r1, [pc, #72]	; (800ee94 <WM__Paint+0xac>)
 800ee4c:	aa03      	add	r2, sp, #12
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f000 fabc 	bl	800f3cc <GUI_MEMDEV_Draw>
 800ee54:	2400      	movs	r4, #0
 800ee56:	e003      	b.n	800ee60 <WM__Paint+0x78>
 800ee58:	9803      	ldr	r0, [sp, #12]
 800ee5a:	f7ff f9cd 	bl	800e1f8 <WM__PaintWinAndOverlays>
 800ee5e:	2401      	movs	r4, #1
 800ee60:	9803      	ldr	r0, [sp, #12]
 800ee62:	f005 f849 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ee66:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ee68:	9005      	str	r0, [sp, #20]
 800ee6a:	f421 4380 	bic.w	r3, r1, #16384	; 0x4000
 800ee6e:	f023 0220 	bic.w	r2, r3, #32
 800ee72:	0489      	lsls	r1, r1, #18
 800ee74:	bf48      	it	mi
 800ee76:	f042 0204 	orrmi.w	r2, r2, #4
 800ee7a:	6282      	str	r2, [r0, #40]	; 0x28
 800ee7c:	a805      	add	r0, sp, #20
 800ee7e:	f005 f849 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ee82:	4805      	ldr	r0, [pc, #20]	; (800ee98 <WM__Paint+0xb0>)
 800ee84:	8801      	ldrh	r1, [r0, #0]
 800ee86:	1e4b      	subs	r3, r1, #1
 800ee88:	8003      	strh	r3, [r0, #0]
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	b008      	add	sp, #32
 800ee8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee92:	bf00      	nop
 800ee94:	0800e26d 	.word	0x0800e26d
 800ee98:	2000eb04 	.word	0x2000eb04

0800ee9c <WM_Exec>:
 800ee9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eea0:	4b4b      	ldr	r3, [pc, #300]	; (800efd0 <WM_Exec+0x134>)
 800eea2:	6818      	ldr	r0, [r3, #0]
 800eea4:	b09f      	sub	sp, #124	; 0x7c
 800eea6:	b100      	cbz	r0, 800eeaa <WM_Exec+0xe>
 800eea8:	4780      	blx	r0
 800eeaa:	2600      	movs	r6, #0
 800eeac:	4949      	ldr	r1, [pc, #292]	; (800efd4 <WM_Exec+0x138>)
 800eeae:	680a      	ldr	r2, [r1, #0]
 800eeb0:	b1e2      	cbz	r2, 800eeec <WM_Exec+0x50>
 800eeb2:	4c49      	ldr	r4, [pc, #292]	; (800efd8 <WM_Exec+0x13c>)
 800eeb4:	6824      	ldr	r4, [r4, #0]
 800eeb6:	b1bc      	cbz	r4, 800eee8 <WM_Exec+0x4c>
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f005 f81d 	bl	8013ef8 <GUI_ALLOC_LockH>
 800eebe:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800eec0:	a91e      	add	r1, sp, #120	; 0x78
 800eec2:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 800eec6:	f841 0d74 	str.w	r0, [r1, #-116]!
 800eeca:	6945      	ldr	r5, [r0, #20]
 800eecc:	d007      	beq.n	800eede <WM_Exec+0x42>
 800eece:	4608      	mov	r0, r1
 800eed0:	f005 f820 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800eed4:	4620      	mov	r0, r4
 800eed6:	f7ff fcb7 	bl	800e848 <WM_DeleteWindow>
 800eeda:	462c      	mov	r4, r5
 800eedc:	e7eb      	b.n	800eeb6 <WM_Exec+0x1a>
 800eede:	4608      	mov	r0, r1
 800eee0:	462c      	mov	r4, r5
 800eee2:	f005 f817 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800eee6:	e7e6      	b.n	800eeb6 <WM_Exec+0x1a>
 800eee8:	4d3a      	ldr	r5, [pc, #232]	; (800efd4 <WM_Exec+0x138>)
 800eeea:	602c      	str	r4, [r5, #0]
 800eeec:	4b3b      	ldr	r3, [pc, #236]	; (800efdc <WM_Exec+0x140>)
 800eeee:	6818      	ldr	r0, [r3, #0]
 800eef0:	b100      	cbz	r0, 800eef4 <WM_Exec+0x58>
 800eef2:	4780      	blx	r0
 800eef4:	493a      	ldr	r1, [pc, #232]	; (800efe0 <WM_Exec+0x144>)
 800eef6:	680a      	ldr	r2, [r1, #0]
 800eef8:	b92a      	cbnz	r2, 800ef06 <WM_Exec+0x6a>
 800eefa:	4c3a      	ldr	r4, [pc, #232]	; (800efe4 <WM_Exec+0x148>)
 800eefc:	6825      	ldr	r5, [r4, #0]
 800eefe:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800ef02:	b143      	cbz	r3, 800ef16 <WM_Exec+0x7a>
 800ef04:	e003      	b.n	800ef0e <WM_Exec+0x72>
 800ef06:	4790      	blx	r2
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d0f6      	beq.n	800eefa <WM_Exec+0x5e>
 800ef0c:	e055      	b.n	800efba <WM_Exec+0x11e>
 800ef0e:	f003 fd65 	bl	80129dc <GUI_PollKeyMsg>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d151      	bne.n	800efba <WM_Exec+0x11e>
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	f890 5054 	ldrb.w	r5, [r0, #84]	; 0x54
 800ef1c:	b14d      	cbz	r5, 800ef32 <WM_Exec+0x96>
 800ef1e:	4932      	ldr	r1, [pc, #200]	; (800efe8 <WM_Exec+0x14c>)
 800ef20:	880d      	ldrh	r5, [r1, #0]
 800ef22:	b135      	cbz	r5, 800ef32 <WM_Exec+0x96>
 800ef24:	4a31      	ldr	r2, [pc, #196]	; (800efec <WM_Exec+0x150>)
 800ef26:	6815      	ldr	r5, [r2, #0]
 800ef28:	2d00      	cmp	r5, #0
 800ef2a:	d048      	beq.n	800efbe <WM_Exec+0x122>
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	4798      	blx	r3
 800ef30:	2501      	movs	r5, #1
 800ef32:	482c      	ldr	r0, [pc, #176]	; (800efe4 <WM_Exec+0x148>)
 800ef34:	6801      	ldr	r1, [r0, #0]
 800ef36:	f891 2054 	ldrb.w	r2, [r1, #84]	; 0x54
 800ef3a:	b912      	cbnz	r2, 800ef42 <WM_Exec+0xa6>
 800ef3c:	2d00      	cmp	r5, #0
 800ef3e:	d133      	bne.n	800efa8 <WM_Exec+0x10c>
 800ef40:	e041      	b.n	800efc6 <WM_Exec+0x12a>
 800ef42:	4b29      	ldr	r3, [pc, #164]	; (800efe8 <WM_Exec+0x14c>)
 800ef44:	8818      	ldrh	r0, [r3, #0]
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d0f8      	beq.n	800ef3c <WM_Exec+0xa0>
 800ef4a:	4f29      	ldr	r7, [pc, #164]	; (800eff0 <WM_Exec+0x154>)
 800ef4c:	683c      	ldr	r4, [r7, #0]
 800ef4e:	b90c      	cbnz	r4, 800ef54 <WM_Exec+0xb8>
 800ef50:	4c21      	ldr	r4, [pc, #132]	; (800efd8 <WM_Exec+0x13c>)
 800ef52:	6824      	ldr	r4, [r4, #0]
 800ef54:	a802      	add	r0, sp, #8
 800ef56:	f003 fc4f 	bl	80127f8 <GUI_SaveContext_W>
 800ef5a:	4922      	ldr	r1, [pc, #136]	; (800efe4 <WM_Exec+0x148>)
 800ef5c:	680a      	ldr	r2, [r1, #0]
 800ef5e:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 800ef62:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800ef64:	b924      	cbnz	r4, 800ef70 <WM_Exec+0xd4>
 800ef66:	2400      	movs	r4, #0
 800ef68:	e00d      	b.n	800ef86 <WM_Exec+0xea>
 800ef6a:	f1b9 0f00 	cmp.w	r9, #0
 800ef6e:	d10a      	bne.n	800ef86 <WM_Exec+0xea>
 800ef70:	4620      	mov	r0, r4
 800ef72:	f7ff ff39 	bl	800ede8 <WM__Paint>
 800ef76:	4681      	mov	r9, r0
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f004 ffb3 	bl	8013ee4 <GUI_ALLOC_h2p>
 800ef7e:	6944      	ldr	r4, [r0, #20]
 800ef80:	2c00      	cmp	r4, #0
 800ef82:	d1f2      	bne.n	800ef6a <WM_Exec+0xce>
 800ef84:	e7ef      	b.n	800ef66 <WM_Exec+0xca>
 800ef86:	4b1a      	ldr	r3, [pc, #104]	; (800eff0 <WM_Exec+0x154>)
 800ef88:	4640      	mov	r0, r8
 800ef8a:	601c      	str	r4, [r3, #0]
 800ef8c:	f003 fbee 	bl	801276c <GUI_SetColor>
 800ef90:	4638      	mov	r0, r7
 800ef92:	f003 fbe9 	bl	8012768 <GUI_SetBkColor>
 800ef96:	a802      	add	r0, sp, #8
 800ef98:	f003 fc38 	bl	801280c <GUI_RestoreContext>
 800ef9c:	4812      	ldr	r0, [pc, #72]	; (800efe8 <WM_Exec+0x14c>)
 800ef9e:	8801      	ldrh	r1, [r0, #0]
 800efa0:	2900      	cmp	r1, #0
 800efa2:	d0cb      	beq.n	800ef3c <WM_Exec+0xa0>
 800efa4:	2601      	movs	r6, #1
 800efa6:	e7c4      	b.n	800ef32 <WM_Exec+0x96>
 800efa8:	4a10      	ldr	r2, [pc, #64]	; (800efec <WM_Exec+0x150>)
 800efaa:	6810      	ldr	r0, [r2, #0]
 800efac:	b110      	cbz	r0, 800efb4 <WM_Exec+0x118>
 800efae:	6843      	ldr	r3, [r0, #4]
 800efb0:	4798      	blx	r3
 800efb2:	e008      	b.n	800efc6 <WM_Exec+0x12a>
 800efb4:	f002 ff2c 	bl	8011e10 <GUI__ManageCache>
 800efb8:	e005      	b.n	800efc6 <WM_Exec+0x12a>
 800efba:	2601      	movs	r6, #1
 800efbc:	e776      	b.n	800eeac <WM_Exec+0x10>
 800efbe:	2001      	movs	r0, #1
 800efc0:	f002 ff26 	bl	8011e10 <GUI__ManageCache>
 800efc4:	e7b4      	b.n	800ef30 <WM_Exec+0x94>
 800efc6:	4630      	mov	r0, r6
 800efc8:	b01f      	add	sp, #124	; 0x7c
 800efca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efce:	bf00      	nop
 800efd0:	2000eaf8 	.word	0x2000eaf8
 800efd4:	2000e02c 	.word	0x2000e02c
 800efd8:	2000eb08 	.word	0x2000eb08
 800efdc:	2000eaf4 	.word	0x2000eaf4
 800efe0:	2000eb68 	.word	0x2000eb68
 800efe4:	20000308 	.word	0x20000308
 800efe8:	2000eb04 	.word	0x2000eb04
 800efec:	2000eb24 	.word	0x2000eb24
 800eff0:	2000e050 	.word	0x2000e050

0800eff4 <WM_Activate>:
 800eff4:	4b02      	ldr	r3, [pc, #8]	; (800f000 <WM_Activate+0xc>)
 800eff6:	6818      	ldr	r0, [r3, #0]
 800eff8:	2201      	movs	r2, #1
 800effa:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800effe:	4770      	bx	lr
 800f000:	20000308 	.word	0x20000308

0800f004 <WM_Deactivate>:
 800f004:	4b03      	ldr	r3, [pc, #12]	; (800f014 <WM_Deactivate+0x10>)
 800f006:	6818      	ldr	r0, [r3, #0]
 800f008:	2200      	movs	r2, #0
 800f00a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800f00e:	f002 bd27 	b.w	8011a60 <LCD_SetClipRectMax>
 800f012:	bf00      	nop
 800f014:	20000308 	.word	0x20000308

0800f018 <WM_DefaultProc>:
 800f018:	b510      	push	{r4, lr}
 800f01a:	4604      	mov	r4, r0
 800f01c:	6840      	ldr	r0, [r0, #4]
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	68e1      	ldr	r1, [r4, #12]
 800f022:	2b17      	cmp	r3, #23
 800f024:	d00f      	beq.n	800f046 <WM_DefaultProc+0x2e>
 800f026:	dc06      	bgt.n	800f036 <WM_DefaultProc+0x1e>
 800f028:	2b0e      	cmp	r3, #14
 800f02a:	d00e      	beq.n	800f04a <WM_DefaultProc+0x32>
 800f02c:	2b14      	cmp	r3, #20
 800f02e:	d114      	bne.n	800f05a <WM_DefaultProc+0x42>
 800f030:	f7fe fec5 	bl	800ddbe <WM__GetClientRectEx>
 800f034:	e011      	b.n	800f05a <WM_DefaultProc+0x42>
 800f036:	2b22      	cmp	r3, #34	; 0x22
 800f038:	d00c      	beq.n	800f054 <WM_DefaultProc+0x3c>
 800f03a:	2b28      	cmp	r3, #40	; 0x28
 800f03c:	d10d      	bne.n	800f05a <WM_DefaultProc+0x42>
 800f03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f042:	f7ff bbbf 	b.w	800e7c4 <WM_InvalidateWindow>
 800f046:	60e0      	str	r0, [r4, #12]
 800f048:	bd10      	pop	{r4, pc}
 800f04a:	4621      	mov	r1, r4
 800f04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f050:	f006 bd88 	b.w	8015b64 <WM_SendToParent>
 800f054:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 800f058:	e000      	b.n	800f05c <WM_DefaultProc+0x44>
 800f05a:	2000      	movs	r0, #0
 800f05c:	60e0      	str	r0, [r4, #12]
 800f05e:	bd10      	pop	{r4, pc}

0800f060 <cbBackWin>:
 800f060:	6803      	ldr	r3, [r0, #0]
 800f062:	2b0e      	cmp	r3, #14
 800f064:	b510      	push	{r4, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	d002      	beq.n	800f070 <cbBackWin+0x10>
 800f06a:	2b0f      	cmp	r3, #15
 800f06c:	d121      	bne.n	800f0b2 <cbBackWin+0x52>
 800f06e:	e008      	b.n	800f082 <cbBackWin+0x22>
 800f070:	68c3      	ldr	r3, [r0, #12]
 800f072:	6858      	ldr	r0, [r3, #4]
 800f074:	2801      	cmp	r0, #1
 800f076:	d121      	bne.n	800f0bc <cbBackWin+0x5c>
 800f078:	6818      	ldr	r0, [r3, #0]
 800f07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f07e:	f003 bca5 	b.w	80129cc <GUI_StoreKey>
 800f082:	4a0f      	ldr	r2, [pc, #60]	; (800f0c0 <cbBackWin+0x60>)
 800f084:	6840      	ldr	r0, [r0, #4]
 800f086:	6811      	ldr	r1, [r2, #0]
 800f088:	4288      	cmp	r0, r1
 800f08a:	d006      	beq.n	800f09a <cbBackWin+0x3a>
 800f08c:	6853      	ldr	r3, [r2, #4]
 800f08e:	4298      	cmp	r0, r3
 800f090:	bf14      	ite	ne
 800f092:	f04f 30ff 	movne.w	r0, #4294967295
 800f096:	2001      	moveq	r0, #1
 800f098:	e000      	b.n	800f09c <cbBackWin+0x3c>
 800f09a:	2000      	movs	r0, #0
 800f09c:	4a09      	ldr	r2, [pc, #36]	; (800f0c4 <cbBackWin+0x64>)
 800f09e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800f0a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f0a6:	4288      	cmp	r0, r1
 800f0a8:	d003      	beq.n	800f0b2 <cbBackWin+0x52>
 800f0aa:	f003 fb5d 	bl	8012768 <GUI_SetBkColor>
 800f0ae:	f004 fb11 	bl	80136d4 <GUI_Clear>
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0b8:	f7ff bfae 	b.w	800f018 <WM_DefaultProc>
 800f0bc:	bd10      	pop	{r4, pc}
 800f0be:	bf00      	nop
 800f0c0:	2000eaec 	.word	0x2000eaec
 800f0c4:	2000eb18 	.word	0x2000eb18

0800f0c8 <WM_Init>:
 800f0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0ca:	4b2b      	ldr	r3, [pc, #172]	; (800f178 <WM_Init+0xb0>)
 800f0cc:	7818      	ldrb	r0, [r3, #0]
 800f0ce:	2800      	cmp	r0, #0
 800f0d0:	d14f      	bne.n	800f172 <WM_Init+0xaa>
 800f0d2:	492a      	ldr	r1, [pc, #168]	; (800f17c <WM_Init+0xb4>)
 800f0d4:	4a2a      	ldr	r2, [pc, #168]	; (800f180 <WM_Init+0xb8>)
 800f0d6:	4c2b      	ldr	r4, [pc, #172]	; (800f184 <WM_Init+0xbc>)
 800f0d8:	6008      	str	r0, [r1, #0]
 800f0da:	6010      	str	r0, [r2, #0]
 800f0dc:	6823      	ldr	r3, [r4, #0]
 800f0de:	492a      	ldr	r1, [pc, #168]	; (800f188 <WM_Init+0xc0>)
 800f0e0:	4a2a      	ldr	r2, [pc, #168]	; (800f18c <WM_Init+0xc4>)
 800f0e2:	6458      	str	r0, [r3, #68]	; 0x44
 800f0e4:	8008      	strh	r0, [r1, #0]
 800f0e6:	8010      	strh	r0, [r2, #0]
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f004 f9e0 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 800f0f0:	b1c8      	cbz	r0, 800f126 <WM_Init+0x5e>
 800f0f2:	4827      	ldr	r0, [pc, #156]	; (800f190 <WM_Init+0xc8>)
 800f0f4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800f0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0fc:	f04f 0e02 	mov.w	lr, #2
 800f100:	9002      	str	r0, [sp, #8]
 800f102:	2000      	movs	r0, #0
 800f104:	e88d 4008 	stmia.w	sp, {r3, lr}
 800f108:	4601      	mov	r1, r0
 800f10a:	4613      	mov	r3, r2
 800f10c:	9003      	str	r0, [sp, #12]
 800f10e:	f7ff fc15 	bl	800e93c <WM_CreateWindowAsChild>
 800f112:	4b20      	ldr	r3, [pc, #128]	; (800f194 <WM_Init+0xcc>)
 800f114:	4a20      	ldr	r2, [pc, #128]	; (800f198 <WM_Init+0xd0>)
 800f116:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f11a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f11e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f122:	f7ff fb4f 	bl	800e7c4 <WM_InvalidateWindow>
 800f126:	3401      	adds	r4, #1
 800f128:	2c02      	cmp	r4, #2
 800f12a:	d1de      	bne.n	800f0ea <WM_Init+0x22>
 800f12c:	481b      	ldr	r0, [pc, #108]	; (800f19c <WM_Init+0xd4>)
 800f12e:	f006 fdb7 	bl	8015ca0 <WM__AddCriticalHandle>
 800f132:	481b      	ldr	r0, [pc, #108]	; (800f1a0 <WM_Init+0xd8>)
 800f134:	f006 fdb4 	bl	8015ca0 <WM__AddCriticalHandle>
 800f138:	481a      	ldr	r0, [pc, #104]	; (800f1a4 <WM_Init+0xdc>)
 800f13a:	f006 fdb1 	bl	8015ca0 <WM__AddCriticalHandle>
 800f13e:	481a      	ldr	r0, [pc, #104]	; (800f1a8 <WM_Init+0xe0>)
 800f140:	f006 fdae 	bl	8015ca0 <WM__AddCriticalHandle>
 800f144:	4819      	ldr	r0, [pc, #100]	; (800f1ac <WM_Init+0xe4>)
 800f146:	f006 fdab 	bl	8015ca0 <WM__AddCriticalHandle>
 800f14a:	4819      	ldr	r0, [pc, #100]	; (800f1b0 <WM_Init+0xe8>)
 800f14c:	f006 fda8 	bl	8015ca0 <WM__AddCriticalHandle>
 800f150:	4810      	ldr	r0, [pc, #64]	; (800f194 <WM_Init+0xcc>)
 800f152:	6800      	ldr	r0, [r0, #0]
 800f154:	f7ff fb58 	bl	800e808 <WM_SelectWindow>
 800f158:	f7ff ff4c 	bl	800eff4 <WM_Activate>
 800f15c:	4b06      	ldr	r3, [pc, #24]	; (800f178 <WM_Init+0xb0>)
 800f15e:	4815      	ldr	r0, [pc, #84]	; (800f1b4 <WM_Init+0xec>)
 800f160:	4a15      	ldr	r2, [pc, #84]	; (800f1b8 <WM_Init+0xf0>)
 800f162:	2101      	movs	r1, #1
 800f164:	7019      	strb	r1, [r3, #0]
 800f166:	6002      	str	r2, [r0, #0]
 800f168:	b004      	add	sp, #16
 800f16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f16e:	f004 bac1 	b.w	80136f4 <GUI__RegisterExit>
 800f172:	b004      	add	sp, #16
 800f174:	bd10      	pop	{r4, pc}
 800f176:	bf00      	nop
 800f178:	2000e054 	.word	0x2000e054
 800f17c:	2000eb08 	.word	0x2000eb08
 800f180:	2000e050 	.word	0x2000e050
 800f184:	20000308 	.word	0x20000308
 800f188:	2000eb04 	.word	0x2000eb04
 800f18c:	2000eae4 	.word	0x2000eae4
 800f190:	0800f061 	.word	0x0800f061
 800f194:	2000eaec 	.word	0x2000eaec
 800f198:	2000eb18 	.word	0x2000eb18
 800f19c:	2000ec48 	.word	0x2000ec48
 800f1a0:	2000ec38 	.word	0x2000ec38
 800f1a4:	2000ec28 	.word	0x2000ec28
 800f1a8:	2000ec50 	.word	0x2000ec50
 800f1ac:	2000ec40 	.word	0x2000ec40
 800f1b0:	2000ec30 	.word	0x2000ec30
 800f1b4:	2000e030 	.word	0x2000e030
 800f1b8:	0800de99 	.word	0x0800de99

0800f1bc <_CreateStaticDevice>:
 800f1bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1c0:	b087      	sub	sp, #28
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	f004 fe98 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	a806      	add	r0, sp, #24
 800f1cc:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800f1d0:	f9b3 7000 	ldrsh.w	r7, [r3]
 800f1d4:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800f1d8:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800f1dc:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f1e0:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 800f1e4:	f004 fe96 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f1e8:	1bf0      	subs	r0, r6, r7
 800f1ea:	1c46      	adds	r6, r0, #1
 800f1ec:	ebc8 0105 	rsb	r1, r8, r5
 800f1f0:	1c4d      	adds	r5, r1, #1
 800f1f2:	2e00      	cmp	r6, #0
 800f1f4:	dd4b      	ble.n	800f28e <_CreateStaticDevice+0xd2>
 800f1f6:	2d00      	cmp	r5, #0
 800f1f8:	dd49      	ble.n	800f28e <_CreateStaticDevice+0xd2>
 800f1fa:	f1b9 0f00 	cmp.w	r9, #0
 800f1fe:	d048      	beq.n	800f292 <_CreateStaticDevice+0xd6>
 800f200:	4648      	mov	r0, r9
 800f202:	f004 fe79 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f206:	a906      	add	r1, sp, #24
 800f208:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800f20c:	f841 0d08 	str.w	r0, [r1, #-8]!
 800f210:	88c5      	ldrh	r5, [r0, #6]
 800f212:	4608      	mov	r0, r1
 800f214:	f004 fe7e 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f218:	42be      	cmp	r6, r7
 800f21a:	d102      	bne.n	800f222 <_CreateStaticDevice+0x66>
 800f21c:	b22d      	sxth	r5, r5
 800f21e:	4545      	cmp	r5, r8
 800f220:	d030      	beq.n	800f284 <_CreateStaticDevice+0xc8>
 800f222:	4648      	mov	r0, r9
 800f224:	4639      	mov	r1, r7
 800f226:	4642      	mov	r2, r8
 800f228:	f000 f884 	bl	800f334 <GUI_MEMDEV_SetOrg>
 800f22c:	e02a      	b.n	800f284 <_CreateStaticDevice+0xc8>
 800f22e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f230:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
 800f234:	6283      	str	r3, [r0, #40]	; 0x28
 800f236:	4608      	mov	r0, r1
 800f238:	f004 fe6c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f23c:	4638      	mov	r0, r7
 800f23e:	f000 ff5d 	bl	80100fc <GUI_MEMDEV_Select>
 800f242:	4680      	mov	r8, r0
 800f244:	4648      	mov	r0, r9
 800f246:	f003 fa93 	bl	8012770 <GUI__AlphaSuppressMixing>
 800f24a:	4638      	mov	r0, r7
 800f24c:	fb05 f706 	mul.w	r7, r5, r6
 800f250:	4e2c      	ldr	r6, [pc, #176]	; (800f304 <_CreateStaticDevice+0x148>)
 800f252:	4d2d      	ldr	r5, [pc, #180]	; (800f308 <_CreateStaticDevice+0x14c>)
 800f254:	f000 f8ae 	bl	800f3b4 <GUI_MEMDEV_GetDataPtr>
 800f258:	7831      	ldrb	r1, [r6, #0]
 800f25a:	4e2c      	ldr	r6, [pc, #176]	; (800f30c <_CreateStaticDevice+0x150>)
 800f25c:	00ba      	lsls	r2, r7, #2
 800f25e:	f002 fcf9 	bl	8011c54 <GUI__memset>
 800f262:	4620      	mov	r0, r4
 800f264:	682f      	ldr	r7, [r5, #0]
 800f266:	6034      	str	r4, [r6, #0]
 800f268:	f006 fd06 	bl	8015c78 <WM_GetWindowOrgX>
 800f26c:	6028      	str	r0, [r5, #0]
 800f26e:	4620      	mov	r0, r4
 800f270:	f7ff fd72 	bl	800ed58 <WM__Paint1>
 800f274:	2000      	movs	r0, #0
 800f276:	602f      	str	r7, [r5, #0]
 800f278:	6030      	str	r0, [r6, #0]
 800f27a:	f003 fa79 	bl	8012770 <GUI__AlphaSuppressMixing>
 800f27e:	4640      	mov	r0, r8
 800f280:	f000 ff3c 	bl	80100fc <GUI_MEMDEV_Select>
 800f284:	4620      	mov	r0, r4
 800f286:	f004 fe2d 	bl	8013ee4 <GUI_ALLOC_h2p>
 800f28a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f28c:	e037      	b.n	800f2fe <_CreateStaticDevice+0x142>
 800f28e:	2000      	movs	r0, #0
 800f290:	e035      	b.n	800f2fe <_CreateStaticDevice+0x142>
 800f292:	f7fe fd7b 	bl	800dd8c <WM_GetDesktopWindow>
 800f296:	4284      	cmp	r4, r0
 800f298:	d112      	bne.n	800f2c0 <_CreateStaticDevice+0x104>
 800f29a:	f002 f897 	bl	80113cc <LCD_GetXSize>
 800f29e:	4681      	mov	r9, r0
 800f2a0:	f002 f89c 	bl	80113dc <LCD_GetYSize>
 800f2a4:	454e      	cmp	r6, r9
 800f2a6:	dc02      	bgt.n	800f2ae <_CreateStaticDevice+0xf2>
 800f2a8:	4285      	cmp	r5, r0
 800f2aa:	dd09      	ble.n	800f2c0 <_CreateStaticDevice+0x104>
 800f2ac:	e000      	b.n	800f2b0 <_CreateStaticDevice+0xf4>
 800f2ae:	464e      	mov	r6, r9
 800f2b0:	4285      	cmp	r5, r0
 800f2b2:	bfa8      	it	ge
 800f2b4:	4605      	movge	r5, r0
 800f2b6:	4631      	mov	r1, r6
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	f7fe f9af 	bl	800d61e <WM_SetSize>
 800f2c0:	4a13      	ldr	r2, [pc, #76]	; (800f310 <_CreateStaticDevice+0x154>)
 800f2c2:	4b14      	ldr	r3, [pc, #80]	; (800f314 <_CreateStaticDevice+0x158>)
 800f2c4:	9201      	str	r2, [sp, #4]
 800f2c6:	f04f 0901 	mov.w	r9, #1
 800f2ca:	4641      	mov	r1, r8
 800f2cc:	9302      	str	r3, [sp, #8]
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	4632      	mov	r2, r6
 800f2d2:	462b      	mov	r3, r5
 800f2d4:	f8cd 9000 	str.w	r9, [sp]
 800f2d8:	f000 fe22 	bl	800ff20 <GUI_MEMDEV__CreateFixed>
 800f2dc:	4607      	mov	r7, r0
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f004 fe0a 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f2e4:	a906      	add	r1, sp, #24
 800f2e6:	6247      	str	r7, [r0, #36]	; 0x24
 800f2e8:	f841 0d04 	str.w	r0, [r1, #-4]!
 800f2ec:	2f00      	cmp	r7, #0
 800f2ee:	d19e      	bne.n	800f22e <_CreateStaticDevice+0x72>
 800f2f0:	4608      	mov	r0, r1
 800f2f2:	f004 fe0f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f7ff fd2e 	bl	800ed58 <WM__Paint1>
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	b007      	add	sp, #28
 800f300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f304:	200002e8 	.word	0x200002e8
 800f308:	2000eb40 	.word	0x2000eb40
 800f30c:	2000eb30 	.word	0x2000eb30
 800f310:	080296e8 	.word	0x080296e8
 800f314:	080342a8 	.word	0x080342a8

0800f318 <GUI_MEMDEV_Paint1Static>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4605      	mov	r5, r0
 800f31c:	2405      	movs	r4, #5
 800f31e:	4628      	mov	r0, r5
 800f320:	f7ff ff4c 	bl	800f1bc <_CreateStaticDevice>
 800f324:	b910      	cbnz	r0, 800f32c <GUI_MEMDEV_Paint1Static+0x14>
 800f326:	3c01      	subs	r4, #1
 800f328:	d1f9      	bne.n	800f31e <GUI_MEMDEV_Paint1Static+0x6>
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f330:	f007 b9da 	b.w	80166e8 <GUI_MEMDEV_Write>

0800f334 <GUI_MEMDEV_SetOrg>:
 800f334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f336:	460d      	mov	r5, r1
 800f338:	4614      	mov	r4, r2
 800f33a:	b918      	cbnz	r0, 800f344 <GUI_MEMDEV_SetOrg+0x10>
 800f33c:	4b11      	ldr	r3, [pc, #68]	; (800f384 <GUI_MEMDEV_SetOrg+0x50>)
 800f33e:	6818      	ldr	r0, [r3, #0]
 800f340:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f342:	b1e8      	cbz	r0, 800f380 <GUI_MEMDEV_SetOrg+0x4c>
 800f344:	f004 fdd8 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f348:	b2a4      	uxth	r4, r4
 800f34a:	b2ad      	uxth	r5, r5
 800f34c:	80c4      	strh	r4, [r0, #6]
 800f34e:	8085      	strh	r5, [r0, #4]
 800f350:	9000      	str	r0, [sp, #0]
 800f352:	f002 fb85 	bl	8011a60 <LCD_SetClipRectMax>
 800f356:	9900      	ldr	r1, [sp, #0]
 800f358:	6948      	ldr	r0, [r1, #20]
 800f35a:	b170      	cbz	r0, 800f37a <GUI_MEMDEV_SetOrg+0x46>
 800f35c:	f004 fdcc 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f360:	9b00      	ldr	r3, [sp, #0]
 800f362:	9001      	str	r0, [sp, #4]
 800f364:	891a      	ldrh	r2, [r3, #8]
 800f366:	8959      	ldrh	r1, [r3, #10]
 800f368:	8082      	strh	r2, [r0, #4]
 800f36a:	80c1      	strh	r1, [r0, #6]
 800f36c:	b112      	cbz	r2, 800f374 <GUI_MEMDEV_SetOrg+0x40>
 800f36e:	b109      	cbz	r1, 800f374 <GUI_MEMDEV_SetOrg+0x40>
 800f370:	8005      	strh	r5, [r0, #0]
 800f372:	8044      	strh	r4, [r0, #2]
 800f374:	a801      	add	r0, sp, #4
 800f376:	f004 fdcd 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f37a:	4668      	mov	r0, sp
 800f37c:	f004 fdca 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f380:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800f382:	bf00      	nop
 800f384:	20000308 	.word	0x20000308

0800f388 <GUI_MEMDEV_GetYSize>:
 800f388:	b513      	push	{r0, r1, r4, lr}
 800f38a:	b920      	cbnz	r0, 800f396 <GUI_MEMDEV_GetYSize+0xe>
 800f38c:	4b08      	ldr	r3, [pc, #32]	; (800f3b0 <GUI_MEMDEV_GetYSize+0x28>)
 800f38e:	6818      	ldr	r0, [r3, #0]
 800f390:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f392:	4604      	mov	r4, r0
 800f394:	b148      	cbz	r0, 800f3aa <GUI_MEMDEV_GetYSize+0x22>
 800f396:	f004 fdaf 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f39a:	a902      	add	r1, sp, #8
 800f39c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800f3a0:	f841 0d04 	str.w	r0, [r1, #-4]!
 800f3a4:	4608      	mov	r0, r1
 800f3a6:	f004 fdb5 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	bd1c      	pop	{r2, r3, r4, pc}
 800f3ae:	bf00      	nop
 800f3b0:	20000308 	.word	0x20000308

0800f3b4 <GUI_MEMDEV_GetDataPtr>:
 800f3b4:	b513      	push	{r0, r1, r4, lr}
 800f3b6:	f004 fd9f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	a802      	add	r0, sp, #8
 800f3be:	f840 4d04 	str.w	r4, [r0, #-4]!
 800f3c2:	f004 fda7 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f3c6:	f104 0018 	add.w	r0, r4, #24
 800f3ca:	bd1c      	pop	{r2, r3, r4, pc}

0800f3cc <GUI_MEMDEV_Draw>:
 800f3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d0:	461e      	mov	r6, r3
 800f3d2:	4b46      	ldr	r3, [pc, #280]	; (800f4ec <GUI_MEMDEV_Draw+0x120>)
 800f3d4:	b087      	sub	sp, #28
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	6818      	ldr	r0, [r3, #0]
 800f3da:	9102      	str	r1, [sp, #8]
 800f3dc:	7c45      	ldrb	r5, [r0, #17]
 800f3de:	4944      	ldr	r1, [pc, #272]	; (800f4f0 <GUI_MEMDEV_Draw+0x124>)
 800f3e0:	4693      	mov	fp, r2
 800f3e2:	574a      	ldrsb	r2, [r1, r5]
 800f3e4:	2a01      	cmp	r2, #1
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	dd06      	ble.n	800f3f8 <GUI_MEMDEV_Draw+0x2c>
 800f3ea:	f001 ffdc 	bl	80113a6 <LCD_GetXSizeEx>
 800f3ee:	4680      	mov	r8, r0
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	f001 ffdb 	bl	80113ac <LCD_GetYSizeEx>
 800f3f6:	e005      	b.n	800f404 <GUI_MEMDEV_Draw+0x38>
 800f3f8:	f001 ffdb 	bl	80113b2 <LCD_GetVXSizeEx>
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4628      	mov	r0, r5
 800f400:	f001 ffda 	bl	80113b8 <LCD_GetVYSizeEx>
 800f404:	4605      	mov	r5, r0
 800f406:	b32c      	cbz	r4, 800f454 <GUI_MEMDEV_Draw+0x88>
 800f408:	a804      	add	r0, sp, #16
 800f40a:	a905      	add	r1, sp, #20
 800f40c:	f003 fb56 	bl	8012abc <GUI_GetOrg>
 800f410:	9b04      	ldr	r3, [sp, #16]
 800f412:	f9b4 9000 	ldrsh.w	r9, [r4]
 800f416:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 800f41a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f41e:	eb08 0103 	add.w	r1, r8, r3
 800f422:	9b05      	ldr	r3, [sp, #20]
 800f424:	1e4a      	subs	r2, r1, #1
 800f426:	18ed      	adds	r5, r5, r3
 800f428:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f42c:	1e6b      	subs	r3, r5, #1
 800f42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f432:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800f436:	4282      	cmp	r2, r0
 800f438:	bfd4      	ite	le
 800f43a:	ebc9 0002 	rsble	r0, r9, r2
 800f43e:	ebc9 0000 	rsbgt	r0, r9, r0
 800f442:	428b      	cmp	r3, r1
 800f444:	bfd4      	ite	le
 800f446:	ebc7 0103 	rsble	r1, r7, r3
 800f44a:	ebc7 0101 	rsbgt	r1, r7, r1
 800f44e:	1c42      	adds	r2, r0, #1
 800f450:	1c4d      	adds	r5, r1, #1
 800f452:	e002      	b.n	800f45a <GUI_MEMDEV_Draw+0x8e>
 800f454:	4642      	mov	r2, r8
 800f456:	4627      	mov	r7, r4
 800f458:	46a1      	mov	r9, r4
 800f45a:	b906      	cbnz	r6, 800f45e <GUI_MEMDEV_Draw+0x92>
 800f45c:	426e      	negs	r6, r5
 800f45e:	2a00      	cmp	r2, #0
 800f460:	dd3f      	ble.n	800f4e2 <GUI_MEMDEV_Draw+0x116>
 800f462:	2d00      	cmp	r5, #0
 800f464:	dd3d      	ble.n	800f4e2 <GUI_MEMDEV_Draw+0x116>
 800f466:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f468:	4648      	mov	r0, r9
 800f46a:	9400      	str	r4, [sp, #0]
 800f46c:	4639      	mov	r1, r7
 800f46e:	4633      	mov	r3, r6
 800f470:	f000 fe0a 	bl	8010088 <GUI_MEMDEV_CreateEx>
 800f474:	4604      	mov	r4, r0
 800f476:	b920      	cbnz	r0, 800f482 <GUI_MEMDEV_Draw+0xb6>
 800f478:	4658      	mov	r0, fp
 800f47a:	9a02      	ldr	r2, [sp, #8]
 800f47c:	4790      	blx	r2
 800f47e:	2001      	movs	r0, #1
 800f480:	e030      	b.n	800f4e4 <GUI_MEMDEV_Draw+0x118>
 800f482:	f7ff ff81 	bl	800f388 <GUI_MEMDEV_GetYSize>
 800f486:	4682      	mov	sl, r0
 800f488:	f1ca 0600 	rsb	r6, sl, #0
 800f48c:	4620      	mov	r0, r4
 800f48e:	f000 fe35 	bl	80100fc <GUI_MEMDEV_Select>
 800f492:	46a8      	mov	r8, r5
 800f494:	9603      	str	r6, [sp, #12]
 800f496:	2600      	movs	r6, #0
 800f498:	45d0      	cmp	r8, sl
 800f49a:	da03      	bge.n	800f4a4 <GUI_MEMDEV_Draw+0xd8>
 800f49c:	4620      	mov	r0, r4
 800f49e:	4641      	mov	r1, r8
 800f4a0:	f007 fa1e 	bl	80168e0 <GUI_MEMDEV_ReduceYSize>
 800f4a4:	b13e      	cbz	r6, 800f4b6 <GUI_MEMDEV_Draw+0xea>
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	4649      	mov	r1, r9
 800f4aa:	19f2      	adds	r2, r6, r7
 800f4ac:	f7ff ff42 	bl	800f334 <GUI_MEMDEV_SetOrg>
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f007 fa2b 	bl	801690c <GUI_MEMDEV_Clear>
 800f4b6:	4658      	mov	r0, fp
 800f4b8:	9a02      	ldr	r2, [sp, #8]
 800f4ba:	4790      	blx	r2
 800f4bc:	4b0d      	ldr	r3, [pc, #52]	; (800f4f4 <GUI_MEMDEV_Draw+0x128>)
 800f4be:	6819      	ldr	r1, [r3, #0]
 800f4c0:	b109      	cbz	r1, 800f4c6 <GUI_MEMDEV_Draw+0xfa>
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	4788      	blx	r1
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f000 fe90 	bl	80101ec <GUI_MEMDEV_CopyToLCD>
 800f4cc:	4456      	add	r6, sl
 800f4ce:	9803      	ldr	r0, [sp, #12]
 800f4d0:	42ae      	cmp	r6, r5
 800f4d2:	4480      	add	r8, r0
 800f4d4:	dbe0      	blt.n	800f498 <GUI_MEMDEV_Draw+0xcc>
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f000 fdb4 	bl	8010044 <GUI_MEMDEV_Delete>
 800f4dc:	2000      	movs	r0, #0
 800f4de:	f000 fe0d 	bl	80100fc <GUI_MEMDEV_Select>
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	b007      	add	sp, #28
 800f4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ea:	bf00      	nop
 800f4ec:	20000308 	.word	0x20000308
 800f4f0:	2000eb38 	.word	0x2000eb38
 800f4f4:	2000e058 	.word	0x2000e058

0800f4f8 <_GetDevData>:
 800f4f8:	4802      	ldr	r0, [pc, #8]	; (800f504 <_GetDevData+0xc>)
 800f4fa:	2901      	cmp	r1, #1
 800f4fc:	bf18      	it	ne
 800f4fe:	2000      	movne	r0, #0
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	080296e8 	.word	0x080296e8

0800f508 <_GetDevFunc>:
 800f508:	4802      	ldr	r0, [pc, #8]	; (800f514 <_GetDevFunc+0xc>)
 800f50a:	2916      	cmp	r1, #22
 800f50c:	bf18      	it	ne
 800f50e:	2000      	movne	r0, #0
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	080164f9 	.word	0x080164f9

0800f518 <_GetDevProp>:
 800f518:	2908      	cmp	r1, #8
 800f51a:	bf0c      	ite	eq
 800f51c:	2020      	moveq	r0, #32
 800f51e:	2000      	movne	r0, #0
 800f520:	4770      	bx	lr

0800f522 <_SetOrg>:
 800f522:	6800      	ldr	r0, [r0, #0]
 800f524:	b508      	push	{r3, lr}
 800f526:	68c3      	ldr	r3, [r0, #12]
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	4798      	blx	r3
 800f52c:	bd08      	pop	{r3, pc}

0800f52e <_GetRect>:
 800f52e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f530:	6880      	ldr	r0, [r0, #8]
 800f532:	460c      	mov	r4, r1
 800f534:	f004 fce0 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f538:	4603      	mov	r3, r0
 800f53a:	a802      	add	r0, sp, #8
 800f53c:	8899      	ldrh	r1, [r3, #4]
 800f53e:	891d      	ldrh	r5, [r3, #8]
 800f540:	88da      	ldrh	r2, [r3, #6]
 800f542:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f546:	895b      	ldrh	r3, [r3, #10]
 800f548:	8021      	strh	r1, [r4, #0]
 800f54a:	1949      	adds	r1, r1, r5
 800f54c:	3901      	subs	r1, #1
 800f54e:	8062      	strh	r2, [r4, #2]
 800f550:	18d2      	adds	r2, r2, r3
 800f552:	80a1      	strh	r1, [r4, #4]
 800f554:	1e51      	subs	r1, r2, #1
 800f556:	80e1      	strh	r1, [r4, #6]
 800f558:	f004 fcdc 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f55c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0800f560 <_XY2PTR>:
 800f560:	4b0e      	ldr	r3, [pc, #56]	; (800f59c <_XY2PTR+0x3c>)
 800f562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f564:	4605      	mov	r5, r0
 800f566:	6818      	ldr	r0, [r3, #0]
 800f568:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f56a:	460e      	mov	r6, r1
 800f56c:	f004 fcc4 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f570:	4602      	mov	r2, r0
 800f572:	a802      	add	r0, sp, #8
 800f574:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800f578:	68d3      	ldr	r3, [r2, #12]
 800f57a:	f840 2d04 	str.w	r2, [r0, #-4]!
 800f57e:	f102 0118 	add.w	r1, r2, #24
 800f582:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f586:	1b36      	subs	r6, r6, r4
 800f588:	fb03 1106 	mla	r1, r3, r6, r1
 800f58c:	1aad      	subs	r5, r5, r2
 800f58e:	eb01 0485 	add.w	r4, r1, r5, lsl #2
 800f592:	f004 fcbf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f596:	4620      	mov	r0, r4
 800f598:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800f59a:	bf00      	nop
 800f59c:	20000308 	.word	0x20000308

0800f5a0 <_GetPixelIndex>:
 800f5a0:	b508      	push	{r3, lr}
 800f5a2:	4608      	mov	r0, r1
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	f7ff ffdb 	bl	800f560 <_XY2PTR>
 800f5aa:	6800      	ldr	r0, [r0, #0]
 800f5ac:	bd08      	pop	{r3, pc}
	...

0800f5b0 <_XorPixel>:
 800f5b0:	4b15      	ldr	r3, [pc, #84]	; (800f608 <_XorPixel+0x58>)
 800f5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5b4:	6818      	ldr	r0, [r3, #0]
 800f5b6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f5b8:	4615      	mov	r5, r2
 800f5ba:	460e      	mov	r6, r1
 800f5bc:	f004 fc9c 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	9000      	str	r0, [sp, #0]
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	f7ff ffcb 	bl	800f560 <_XY2PTR>
 800f5ca:	9900      	ldr	r1, [sp, #0]
 800f5cc:	680a      	ldr	r2, [r1, #0]
 800f5ce:	6913      	ldr	r3, [r2, #16]
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	6898      	ldr	r0, [r3, #8]
 800f5d4:	4780      	blx	r0
 800f5d6:	6821      	ldr	r1, [r4, #0]
 800f5d8:	9b00      	ldr	r3, [sp, #0]
 800f5da:	ea81 0200 	eor.w	r2, r1, r0
 800f5de:	6022      	str	r2, [r4, #0]
 800f5e0:	6958      	ldr	r0, [r3, #20]
 800f5e2:	b160      	cbz	r0, 800f5fe <_XorPixel+0x4e>
 800f5e4:	f004 fc88 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f5e8:	ac02      	add	r4, sp, #8
 800f5ea:	6882      	ldr	r2, [r0, #8]
 800f5ec:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f5f0:	6813      	ldr	r3, [r2, #0]
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	462a      	mov	r2, r5
 800f5f6:	4798      	blx	r3
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f004 fc8b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f5fe:	4668      	mov	r0, sp
 800f600:	f004 fc88 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f604:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800f606:	bf00      	nop
 800f608:	20000308 	.word	0x20000308

0800f60c <_SetPixelIndex>:
 800f60c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f60e:	461c      	mov	r4, r3
 800f610:	4b10      	ldr	r3, [pc, #64]	; (800f654 <_SetPixelIndex+0x48>)
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f616:	460e      	mov	r6, r1
 800f618:	4615      	mov	r5, r2
 800f61a:	f004 fc6d 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f61e:	4629      	mov	r1, r5
 800f620:	9000      	str	r0, [sp, #0]
 800f622:	4630      	mov	r0, r6
 800f624:	f7ff ff9c 	bl	800f560 <_XY2PTR>
 800f628:	9900      	ldr	r1, [sp, #0]
 800f62a:	6004      	str	r4, [r0, #0]
 800f62c:	6948      	ldr	r0, [r1, #20]
 800f62e:	b160      	cbz	r0, 800f64a <_SetPixelIndex+0x3e>
 800f630:	f004 fc62 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f634:	ac02      	add	r4, sp, #8
 800f636:	6883      	ldr	r3, [r0, #8]
 800f638:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4631      	mov	r1, r6
 800f640:	462a      	mov	r2, r5
 800f642:	4798      	blx	r3
 800f644:	4620      	mov	r0, r4
 800f646:	f004 fc65 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f64a:	4668      	mov	r0, sp
 800f64c:	f004 fc62 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f650:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 800f652:	bf00      	nop
 800f654:	20000308 	.word	0x20000308

0800f658 <_DrawVLine>:
 800f658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f65c:	461e      	mov	r6, r3
 800f65e:	4b2b      	ldr	r3, [pc, #172]	; (800f70c <_DrawVLine+0xb4>)
 800f660:	6818      	ldr	r0, [r3, #0]
 800f662:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f664:	460f      	mov	r7, r1
 800f666:	4614      	mov	r4, r2
 800f668:	f004 fc46 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f66c:	9000      	str	r0, [sp, #0]
 800f66e:	6940      	ldr	r0, [r0, #20]
 800f670:	b108      	cbz	r0, 800f676 <_DrawVLine+0x1e>
 800f672:	f004 fc41 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f676:	9001      	str	r0, [sp, #4]
 800f678:	4621      	mov	r1, r4
 800f67a:	4638      	mov	r0, r7
 800f67c:	f7ff ff70 	bl	800f560 <_XY2PTR>
 800f680:	4a22      	ldr	r2, [pc, #136]	; (800f70c <_DrawVLine+0xb4>)
 800f682:	9b00      	ldr	r3, [sp, #0]
 800f684:	4605      	mov	r5, r0
 800f686:	6810      	ldr	r0, [r2, #0]
 800f688:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800f68c:	7c02      	ldrb	r2, [r0, #16]
 800f68e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800f690:	07d2      	lsls	r2, r2, #31
 800f692:	f8d1 9000 	ldr.w	r9, [r1]
 800f696:	d51f      	bpl.n	800f6d8 <_DrawVLine+0x80>
 800f698:	6818      	ldr	r0, [r3, #0]
 800f69a:	6902      	ldr	r2, [r0, #16]
 800f69c:	6891      	ldr	r1, [r2, #8]
 800f69e:	4788      	blx	r1
 800f6a0:	4680      	mov	r8, r0
 800f6a2:	9801      	ldr	r0, [sp, #4]
 800f6a4:	b128      	cbz	r0, 800f6b2 <_DrawVLine+0x5a>
 800f6a6:	6883      	ldr	r3, [r0, #8]
 800f6a8:	4639      	mov	r1, r7
 800f6aa:	f8d3 c000 	ldr.w	ip, [r3]
 800f6ae:	4622      	mov	r2, r4
 800f6b0:	47e0      	blx	ip
 800f6b2:	9900      	ldr	r1, [sp, #0]
 800f6b4:	6828      	ldr	r0, [r5, #0]
 800f6b6:	68cb      	ldr	r3, [r1, #12]
 800f6b8:	3401      	adds	r4, #1
 800f6ba:	ea80 0208 	eor.w	r2, r0, r8
 800f6be:	42b4      	cmp	r4, r6
 800f6c0:	602a      	str	r2, [r5, #0]
 800f6c2:	441d      	add	r5, r3
 800f6c4:	dded      	ble.n	800f6a2 <_DrawVLine+0x4a>
 800f6c6:	4668      	mov	r0, sp
 800f6c8:	f004 fc24 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f6cc:	9801      	ldr	r0, [sp, #4]
 800f6ce:	b1d0      	cbz	r0, 800f706 <_DrawVLine+0xae>
 800f6d0:	a801      	add	r0, sp, #4
 800f6d2:	f004 fc1f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f6d6:	e016      	b.n	800f706 <_DrawVLine+0xae>
 800f6d8:	9b01      	ldr	r3, [sp, #4]
 800f6da:	b163      	cbz	r3, 800f6f6 <_DrawVLine+0x9e>
 800f6dc:	9801      	ldr	r0, [sp, #4]
 800f6de:	6881      	ldr	r1, [r0, #8]
 800f6e0:	4622      	mov	r2, r4
 800f6e2:	680b      	ldr	r3, [r1, #0]
 800f6e4:	3401      	adds	r4, #1
 800f6e6:	4639      	mov	r1, r7
 800f6e8:	4798      	blx	r3
 800f6ea:	42b4      	cmp	r4, r6
 800f6ec:	f8c5 9000 	str.w	r9, [r5]
 800f6f0:	4445      	add	r5, r8
 800f6f2:	ddf3      	ble.n	800f6dc <_DrawVLine+0x84>
 800f6f4:	e7e7      	b.n	800f6c6 <_DrawVLine+0x6e>
 800f6f6:	1b34      	subs	r4, r6, r4
 800f6f8:	3401      	adds	r4, #1
 800f6fa:	3c01      	subs	r4, #1
 800f6fc:	f8c5 9000 	str.w	r9, [r5]
 800f700:	4445      	add	r5, r8
 800f702:	d1fa      	bne.n	800f6fa <_DrawVLine+0xa2>
 800f704:	e7df      	b.n	800f6c6 <_DrawVLine+0x6e>
 800f706:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 800f70a:	bf00      	nop
 800f70c:	20000308 	.word	0x20000308

0800f710 <_FillRect>:
 800f710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f714:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f7c8 <_FillRect+0xb8>
 800f718:	4614      	mov	r4, r2
 800f71a:	f8d8 2000 	ldr.w	r2, [r8]
 800f71e:	b085      	sub	sp, #20
 800f720:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800f722:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800f726:	461d      	mov	r5, r3
 800f728:	460f      	mov	r7, r1
 800f72a:	f004 fbe5 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f72e:	4621      	mov	r1, r4
 800f730:	9002      	str	r0, [sp, #8]
 800f732:	4638      	mov	r0, r7
 800f734:	f7ff ff14 	bl	800f560 <_XY2PTR>
 800f738:	f8d8 3000 	ldr.w	r3, [r8]
 800f73c:	4606      	mov	r6, r0
 800f73e:	9802      	ldr	r0, [sp, #8]
 800f740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f742:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f746:	6940      	ldr	r0, [r0, #20]
 800f748:	f8d2 b000 	ldr.w	fp, [r2]
 800f74c:	1be9      	subs	r1, r5, r7
 800f74e:	1c4d      	adds	r5, r1, #1
 800f750:	b338      	cbz	r0, 800f7a2 <_FillRect+0x92>
 800f752:	f004 fbd1 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f756:	f10d 0810 	add.w	r8, sp, #16
 800f75a:	ebc4 0109 	rsb	r1, r4, r9
 800f75e:	f848 0d04 	str.w	r0, [r8, #-4]!
 800f762:	1c4b      	adds	r3, r1, #1
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	4639      	mov	r1, r7
 800f768:	4622      	mov	r2, r4
 800f76a:	462b      	mov	r3, r5
 800f76c:	f007 f8a3 	bl	80168b6 <GUI_USAGE_AddRect>
 800f770:	4640      	mov	r0, r8
 800f772:	f004 fbcf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f776:	e014      	b.n	800f7a2 <_FillRect+0x92>
 800f778:	4813      	ldr	r0, [pc, #76]	; (800f7c8 <_FillRect+0xb8>)
 800f77a:	6802      	ldr	r2, [r0, #0]
 800f77c:	7c11      	ldrb	r1, [r2, #16]
 800f77e:	07c9      	lsls	r1, r1, #31
 800f780:	d512      	bpl.n	800f7a8 <_FillRect+0x98>
 800f782:	9a02      	ldr	r2, [sp, #8]
 800f784:	6811      	ldr	r1, [r2, #0]
 800f786:	6908      	ldr	r0, [r1, #16]
 800f788:	6883      	ldr	r3, [r0, #8]
 800f78a:	4798      	blx	r3
 800f78c:	4632      	mov	r2, r6
 800f78e:	462b      	mov	r3, r5
 800f790:	6811      	ldr	r1, [r2, #0]
 800f792:	3b01      	subs	r3, #1
 800f794:	ea81 0100 	eor.w	r1, r1, r0
 800f798:	f842 1b04 	str.w	r1, [r2], #4
 800f79c:	d1f8      	bne.n	800f790 <_FillRect+0x80>
 800f79e:	4456      	add	r6, sl
 800f7a0:	3401      	adds	r4, #1
 800f7a2:	454c      	cmp	r4, r9
 800f7a4:	dde8      	ble.n	800f778 <_FillRect+0x68>
 800f7a6:	e008      	b.n	800f7ba <_FillRect+0xaa>
 800f7a8:	2d00      	cmp	r5, #0
 800f7aa:	ddf8      	ble.n	800f79e <_FillRect+0x8e>
 800f7ac:	462b      	mov	r3, r5
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	3b01      	subs	r3, #1
 800f7b2:	f840 bb04 	str.w	fp, [r0], #4
 800f7b6:	d1fb      	bne.n	800f7b0 <_FillRect+0xa0>
 800f7b8:	e7f1      	b.n	800f79e <_FillRect+0x8e>
 800f7ba:	a802      	add	r0, sp, #8
 800f7bc:	f004 fbaa 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f7c0:	b005      	add	sp, #20
 800f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20000308 	.word	0x20000308

0800f7cc <_DrawHLine>:
 800f7cc:	b507      	push	{r0, r1, r2, lr}
 800f7ce:	9200      	str	r2, [sp, #0]
 800f7d0:	f7ff ff9e 	bl	800f710 <_FillRect>
 800f7d4:	bd0e      	pop	{r1, r2, r3, pc}
	...

0800f7d8 <_DrawBitmap>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	469a      	mov	sl, r3
 800f7de:	4b98      	ldr	r3, [pc, #608]	; (800fa40 <_DrawBitmap+0x268>)
 800f7e0:	4681      	mov	r9, r0
 800f7e2:	6818      	ldr	r0, [r3, #0]
 800f7e4:	b093      	sub	sp, #76	; 0x4c
 800f7e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800f7e8:	9208      	str	r2, [sp, #32]
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800f7f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	f000 8372 	beq.w	800fedc <_DrawBitmap+0x704>
 800f7f8:	f004 fb7e 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f7fc:	9010      	str	r0, [sp, #64]	; 0x40
 800f7fe:	6940      	ldr	r0, [r0, #20]
 800f800:	b108      	cbz	r0, 800f806 <_DrawBitmap+0x2e>
 800f802:	f004 fb79 	bl	8013ef8 <GUI_ALLOC_LockH>
 800f806:	9011      	str	r0, [sp, #68]	; 0x44
 800f808:	a812      	add	r0, sp, #72	; 0x48
 800f80a:	f850 1d08 	ldr.w	r1, [r0, #-8]!
 800f80e:	68ca      	ldr	r2, [r1, #12]
 800f810:	920c      	str	r2, [sp, #48]	; 0x30
 800f812:	f004 fb7f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800f816:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f818:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f81a:	18e4      	adds	r4, r4, r3
 800f81c:	9405      	str	r4, [sp, #20]
 800f81e:	b168      	cbz	r0, 800f83c <_DrawBitmap+0x64>
 800f820:	4987      	ldr	r1, [pc, #540]	; (800fa40 <_DrawBitmap+0x268>)
 800f822:	680a      	ldr	r2, [r1, #0]
 800f824:	7c13      	ldrb	r3, [r2, #16]
 800f826:	f003 0102 	and.w	r1, r3, #2
 800f82a:	b2ca      	uxtb	r2, r1
 800f82c:	b932      	cbnz	r2, 800f83c <_DrawBitmap+0x64>
 800f82e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f830:	9a08      	ldr	r2, [sp, #32]
 800f832:	9300      	str	r3, [sp, #0]
 800f834:	4621      	mov	r1, r4
 800f836:	4653      	mov	r3, sl
 800f838:	f007 f83d 	bl	80168b6 <GUI_USAGE_AddRect>
 800f83c:	9805      	ldr	r0, [sp, #20]
 800f83e:	9908      	ldr	r1, [sp, #32]
 800f840:	f7ff fe8e 	bl	800f560 <_XY2PTR>
 800f844:	4680      	mov	r8, r0
 800f846:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f848:	2817      	cmp	r0, #23
 800f84a:	dd5b      	ble.n	800f904 <_DrawBitmap+0x12c>
 800f84c:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800f850:	9707      	str	r7, [sp, #28]
 800f852:	2700      	movs	r7, #0
 800f854:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f856:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f858:	428f      	cmp	r7, r1
 800f85a:	da4f      	bge.n	800f8fc <_DrawBitmap+0x124>
 800f85c:	b130      	cbz	r0, 800f86c <_DrawBitmap+0x94>
 800f85e:	6883      	ldr	r3, [r0, #8]
 800f860:	9a08      	ldr	r2, [sp, #32]
 800f862:	685c      	ldr	r4, [r3, #4]
 800f864:	9905      	ldr	r1, [sp, #20]
 800f866:	18ba      	adds	r2, r7, r2
 800f868:	4653      	mov	r3, sl
 800f86a:	47a0      	blx	r4
 800f86c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f870:	68c1      	ldr	r1, [r0, #12]
 800f872:	b129      	cbz	r1, 800f880 <_DrawBitmap+0xa8>
 800f874:	4640      	mov	r0, r8
 800f876:	4659      	mov	r1, fp
 800f878:	9a07      	ldr	r2, [sp, #28]
 800f87a:	f7f1 fbcb 	bl	8001014 <memcpy>
 800f87e:	e037      	b.n	800f8f0 <_DrawBitmap+0x118>
 800f880:	4644      	mov	r4, r8
 800f882:	4655      	mov	r5, sl
 800f884:	465e      	mov	r6, fp
 800f886:	1d33      	adds	r3, r6, #4
 800f888:	9306      	str	r3, [sp, #24]
 800f88a:	461a      	mov	r2, r3
 800f88c:	4629      	mov	r1, r5
 800f88e:	f04f 0e00 	mov.w	lr, #0
 800f892:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800f896:	b908      	cbnz	r0, 800f89c <_DrawBitmap+0xc4>
 800f898:	f10e 0e01 	add.w	lr, lr, #1
 800f89c:	3901      	subs	r1, #1
 800f89e:	b1a0      	cbz	r0, 800f8ca <_DrawBitmap+0xf2>
 800f8a0:	f1be 0f00 	cmp.w	lr, #0
 800f8a4:	d015      	beq.n	800f8d2 <_DrawBitmap+0xfa>
 800f8a6:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	4631      	mov	r1, r6
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	9304      	str	r3, [sp, #16]
 800f8b2:	f8cd e00c 	str.w	lr, [sp, #12]
 800f8b6:	f7f1 fbad 	bl	8001014 <memcpy>
 800f8ba:	9804      	ldr	r0, [sp, #16]
 800f8bc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f8c0:	1824      	adds	r4, r4, r0
 800f8c2:	1836      	adds	r6, r6, r0
 800f8c4:	ebcc 0505 	rsb	r5, ip, r5
 800f8c8:	e010      	b.n	800f8ec <_DrawBitmap+0x114>
 800f8ca:	3204      	adds	r2, #4
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	d1e0      	bne.n	800f892 <_DrawBitmap+0xba>
 800f8d0:	e7e6      	b.n	800f8a0 <_DrawBitmap+0xc8>
 800f8d2:	6830      	ldr	r0, [r6, #0]
 800f8d4:	0e06      	lsrs	r6, r0, #24
 800f8d6:	2eff      	cmp	r6, #255	; 0xff
 800f8d8:	d005      	beq.n	800f8e6 <_DrawBitmap+0x10e>
 800f8da:	43f3      	mvns	r3, r6
 800f8dc:	6821      	ldr	r1, [r4, #0]
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	f002 fcac 	bl	801223c <GUI__MixColors>
 800f8e4:	6020      	str	r0, [r4, #0]
 800f8e6:	9e06      	ldr	r6, [sp, #24]
 800f8e8:	3404      	adds	r4, #4
 800f8ea:	3d01      	subs	r5, #1
 800f8ec:	2d00      	cmp	r5, #0
 800f8ee:	d1ca      	bne.n	800f886 <_DrawBitmap+0xae>
 800f8f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f8f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8f4:	448b      	add	fp, r1
 800f8f6:	4490      	add	r8, r2
 800f8f8:	3701      	adds	r7, #1
 800f8fa:	e7ab      	b.n	800f854 <_DrawBitmap+0x7c>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	f040 82ea 	bne.w	800fed6 <_DrawBitmap+0x6fe>
 800f902:	e2eb      	b.n	800fedc <_DrawBitmap+0x704>
 800f904:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800f906:	2c10      	cmp	r4, #16
 800f908:	d137      	bne.n	800f97a <_DrawBitmap+0x1a2>
 800f90a:	f10b 0702 	add.w	r7, fp, #2
 800f90e:	f1a8 0804 	sub.w	r8, r8, #4
 800f912:	2500      	movs	r5, #0
 800f914:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f916:	42a5      	cmp	r5, r4
 800f918:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f91a:	f280 8099 	bge.w	800fa50 <_DrawBitmap+0x278>
 800f91e:	9e08      	ldr	r6, [sp, #32]
 800f920:	19aa      	adds	r2, r5, r6
 800f922:	9207      	str	r2, [sp, #28]
 800f924:	b12c      	cbz	r4, 800f932 <_DrawBitmap+0x15a>
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	9905      	ldr	r1, [sp, #20]
 800f92a:	685e      	ldr	r6, [r3, #4]
 800f92c:	4620      	mov	r0, r4
 800f92e:	4653      	mov	r3, sl
 800f930:	47b0      	blx	r6
 800f932:	f8cd 8018 	str.w	r8, [sp, #24]
 800f936:	46bb      	mov	fp, r7
 800f938:	4656      	mov	r6, sl
 800f93a:	9a05      	ldr	r2, [sp, #20]
 800f93c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f940:	eb02 000a 	add.w	r0, r2, sl
 800f944:	1b81      	subs	r1, r0, r6
 800f946:	685a      	ldr	r2, [r3, #4]
 800f948:	f83b 0c02 	ldrh.w	r0, [fp, #-2]
 800f94c:	9104      	str	r1, [sp, #16]
 800f94e:	4790      	blx	r2
 800f950:	9906      	ldr	r1, [sp, #24]
 800f952:	f841 0f04 	str.w	r0, [r1, #4]!
 800f956:	9106      	str	r1, [sp, #24]
 800f958:	9904      	ldr	r1, [sp, #16]
 800f95a:	b124      	cbz	r4, 800f966 <_DrawBitmap+0x18e>
 800f95c:	68a0      	ldr	r0, [r4, #8]
 800f95e:	9a07      	ldr	r2, [sp, #28]
 800f960:	6803      	ldr	r3, [r0, #0]
 800f962:	4620      	mov	r0, r4
 800f964:	4798      	blx	r3
 800f966:	3e01      	subs	r6, #1
 800f968:	f10b 0b02 	add.w	fp, fp, #2
 800f96c:	d1e5      	bne.n	800f93a <_DrawBitmap+0x162>
 800f96e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800f970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f972:	3501      	adds	r5, #1
 800f974:	193f      	adds	r7, r7, r4
 800f976:	4490      	add	r8, r2
 800f978:	e7cc      	b.n	800f914 <_DrawBitmap+0x13c>
 800f97a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f97c:	2908      	cmp	r1, #8
 800f97e:	d16b      	bne.n	800fa58 <_DrawBitmap+0x280>
 800f980:	9e08      	ldr	r6, [sp, #32]
 800f982:	f108 0804 	add.w	r8, r8, #4
 800f986:	9b08      	ldr	r3, [sp, #32]
 800f988:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f98a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f98c:	1af1      	subs	r1, r6, r3
 800f98e:	4291      	cmp	r1, r2
 800f990:	f1a8 0004 	sub.w	r0, r8, #4
 800f994:	da5c      	bge.n	800fa50 <_DrawBitmap+0x278>
 800f996:	4b2a      	ldr	r3, [pc, #168]	; (800fa40 <_DrawBitmap+0x268>)
 800f998:	6819      	ldr	r1, [r3, #0]
 800f99a:	7c0a      	ldrb	r2, [r1, #16]
 800f99c:	b35d      	cbz	r5, 800f9f6 <_DrawBitmap+0x21e>
 800f99e:	f012 0303 	ands.w	r3, r2, #3
 800f9a2:	d004      	beq.n	800f9ae <_DrawBitmap+0x1d6>
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	d14d      	bne.n	800fa44 <_DrawBitmap+0x26c>
 800f9a8:	46c1      	mov	r9, r8
 800f9aa:	9f05      	ldr	r7, [sp, #20]
 800f9ac:	e01c      	b.n	800f9e8 <_DrawBitmap+0x210>
 800f9ae:	f81b 4003 	ldrb.w	r4, [fp, r3]
 800f9b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	4553      	cmp	r3, sl
 800f9be:	d1f6      	bne.n	800f9ae <_DrawBitmap+0x1d6>
 800f9c0:	e040      	b.n	800fa44 <_DrawBitmap+0x26c>
 800f9c2:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
 800f9c6:	f849 1c04 	str.w	r1, [r9, #-4]
 800f9ca:	b12c      	cbz	r4, 800f9d8 <_DrawBitmap+0x200>
 800f9cc:	68a2      	ldr	r2, [r4, #8]
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	6813      	ldr	r3, [r2, #0]
 800f9d2:	4639      	mov	r1, r7
 800f9d4:	4632      	mov	r2, r6
 800f9d6:	4798      	blx	r3
 800f9d8:	9805      	ldr	r0, [sp, #20]
 800f9da:	3701      	adds	r7, #1
 800f9dc:	eb00 010a 	add.w	r1, r0, sl
 800f9e0:	42b9      	cmp	r1, r7
 800f9e2:	f109 0904 	add.w	r9, r9, #4
 800f9e6:	d02d      	beq.n	800fa44 <_DrawBitmap+0x26c>
 800f9e8:	9a05      	ldr	r2, [sp, #20]
 800f9ea:	ebc2 030b 	rsb	r3, r2, fp
 800f9ee:	5dd8      	ldrb	r0, [r3, r7]
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	d0f1      	beq.n	800f9d8 <_DrawBitmap+0x200>
 800f9f4:	e7e5      	b.n	800f9c2 <_DrawBitmap+0x1ea>
 800f9f6:	f012 0303 	ands.w	r3, r2, #3
 800f9fa:	d004      	beq.n	800fa06 <_DrawBitmap+0x22e>
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d121      	bne.n	800fa44 <_DrawBitmap+0x26c>
 800fa00:	46c1      	mov	r9, r8
 800fa02:	9f05      	ldr	r7, [sp, #20]
 800fa04:	e015      	b.n	800fa32 <_DrawBitmap+0x25a>
 800fa06:	4659      	mov	r1, fp
 800fa08:	4652      	mov	r2, sl
 800fa0a:	f7f1 fb03 	bl	8001014 <memcpy>
 800fa0e:	e019      	b.n	800fa44 <_DrawBitmap+0x26c>
 800fa10:	f849 2c04 	str.w	r2, [r9, #-4]
 800fa14:	b12c      	cbz	r4, 800fa22 <_DrawBitmap+0x24a>
 800fa16:	68a3      	ldr	r3, [r4, #8]
 800fa18:	4620      	mov	r0, r4
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4639      	mov	r1, r7
 800fa1e:	4632      	mov	r2, r6
 800fa20:	4798      	blx	r3
 800fa22:	9805      	ldr	r0, [sp, #20]
 800fa24:	3701      	adds	r7, #1
 800fa26:	eb00 010a 	add.w	r1, r0, sl
 800fa2a:	42b9      	cmp	r1, r7
 800fa2c:	f109 0904 	add.w	r9, r9, #4
 800fa30:	d008      	beq.n	800fa44 <_DrawBitmap+0x26c>
 800fa32:	9805      	ldr	r0, [sp, #20]
 800fa34:	ebc0 010b 	rsb	r1, r0, fp
 800fa38:	5dca      	ldrb	r2, [r1, r7]
 800fa3a:	2a00      	cmp	r2, #0
 800fa3c:	d0f1      	beq.n	800fa22 <_DrawBitmap+0x24a>
 800fa3e:	e7e7      	b.n	800fa10 <_DrawBitmap+0x238>
 800fa40:	20000308 	.word	0x20000308
 800fa44:	981e      	ldr	r0, [sp, #120]	; 0x78
 800fa46:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fa48:	4483      	add	fp, r0
 800fa4a:	3601      	adds	r6, #1
 800fa4c:	4488      	add	r8, r1
 800fa4e:	e79a      	b.n	800f986 <_DrawBitmap+0x1ae>
 800fa50:	2c00      	cmp	r4, #0
 800fa52:	f040 8240 	bne.w	800fed6 <_DrawBitmap+0x6fe>
 800fa56:	e241      	b.n	800fedc <_DrawBitmap+0x704>
 800fa58:	4ab0      	ldr	r2, [pc, #704]	; (800fd1c <_DrawBitmap+0x544>)
 800fa5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fa5c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800fa5e:	2d00      	cmp	r5, #0
 800fa60:	bf14      	ite	ne
 800fa62:	46a9      	movne	r9, r5
 800fa64:	4691      	moveq	r9, r2
 800fa66:	9a08      	ldr	r2, [sp, #32]
 800fa68:	0058      	lsls	r0, r3, #1
 800fa6a:	00a1      	lsls	r1, r4, #2
 800fa6c:	f108 0804 	add.w	r8, r8, #4
 800fa70:	900d      	str	r0, [sp, #52]	; 0x34
 800fa72:	910e      	str	r1, [sp, #56]	; 0x38
 800fa74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800fa78:	9206      	str	r2, [sp, #24]
 800fa7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa7c:	9806      	ldr	r0, [sp, #24]
 800fa7e:	9908      	ldr	r1, [sp, #32]
 800fa80:	1f1c      	subs	r4, r3, #4
 800fa82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fa84:	1a42      	subs	r2, r0, r1
 800fa86:	429a      	cmp	r2, r3
 800fa88:	f280 8223 	bge.w	800fed2 <_DrawBitmap+0x6fa>
 800fa8c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800fa8e:	2902      	cmp	r1, #2
 800fa90:	f000 80a1 	beq.w	800fbd6 <_DrawBitmap+0x3fe>
 800fa94:	2904      	cmp	r1, #4
 800fa96:	f000 8147 	beq.w	800fd28 <_DrawBitmap+0x550>
 800fa9a:	2901      	cmp	r1, #1
 800fa9c:	f040 820f 	bne.w	800febe <_DrawBitmap+0x6e6>
 800faa0:	f8df 8280 	ldr.w	r8, [pc, #640]	; 800fd24 <_DrawBitmap+0x54c>
 800faa4:	f8d8 5000 	ldr.w	r5, [r8]
 800faa8:	6e28      	ldr	r0, [r5, #96]	; 0x60
 800faaa:	f004 fa25 	bl	8013ef8 <GUI_ALLOC_LockH>
 800faae:	f89b 3000 	ldrb.w	r3, [fp]
 800fab2:	4a9b      	ldr	r2, [pc, #620]	; (800fd20 <_DrawBitmap+0x548>)
 800fab4:	9920      	ldr	r1, [sp, #128]	; 0x80
 800fab6:	5cd5      	ldrb	r5, [r2, r3]
 800fab8:	9010      	str	r0, [sp, #64]	; 0x40
 800faba:	f1c1 0708 	rsb	r7, r1, #8
 800fabe:	fa45 f501 	asr.w	r5, r5, r1
 800fac2:	f8d8 1000 	ldr.w	r1, [r8]
 800fac6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800faca:	7c0b      	ldrb	r3, [r1, #16]
 800facc:	f003 0203 	and.w	r2, r3, #3
 800fad0:	2a02      	cmp	r2, #2
 800fad2:	4656      	mov	r6, sl
 800fad4:	d01d      	beq.n	800fb12 <_DrawBitmap+0x33a>
 800fad6:	2a03      	cmp	r2, #3
 800fad8:	d059      	beq.n	800fb8e <_DrawBitmap+0x3b6>
 800fada:	2a01      	cmp	r2, #1
 800fadc:	d057      	beq.n	800fb8e <_DrawBitmap+0x3b6>
 800fade:	465a      	mov	r2, fp
 800fae0:	42be      	cmp	r6, r7
 800fae2:	bf38      	it	cc
 800fae4:	4637      	movcc	r7, r6
 800fae6:	1bf6      	subs	r6, r6, r7
 800fae8:	463b      	mov	r3, r7
 800faea:	4621      	mov	r1, r4
 800faec:	f005 0001 	and.w	r0, r5, #1
 800faf0:	086d      	lsrs	r5, r5, #1
 800faf2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800faf6:	3b01      	subs	r3, #1
 800faf8:	f841 0b04 	str.w	r0, [r1], #4
 800fafc:	d1f6      	bne.n	800faec <_DrawBitmap+0x314>
 800fafe:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800fb02:	2e00      	cmp	r6, #0
 800fb04:	d063      	beq.n	800fbce <_DrawBitmap+0x3f6>
 800fb06:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800fb0a:	4d85      	ldr	r5, [pc, #532]	; (800fd20 <_DrawBitmap+0x548>)
 800fb0c:	5ded      	ldrb	r5, [r5, r7]
 800fb0e:	2708      	movs	r7, #8
 800fb10:	e7e6      	b.n	800fae0 <_DrawBitmap+0x308>
 800fb12:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800fb16:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fb1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800fb1c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800fb20:	42be      	cmp	r6, r7
 800fb22:	bf38      	it	cc
 800fb24:	4637      	movcc	r7, r6
 800fb26:	1bf6      	subs	r6, r6, r7
 800fb28:	f1bc 0f00 	cmp.w	ip, #0
 800fb2c:	d022      	beq.n	800fb74 <_DrawBitmap+0x39c>
 800fb2e:	b91d      	cbnz	r5, 800fb38 <_DrawBitmap+0x360>
 800fb30:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800fb34:	44b8      	add	r8, r7
 800fb36:	e021      	b.n	800fb7c <_DrawBitmap+0x3a4>
 800fb38:	07e8      	lsls	r0, r5, #31
 800fb3a:	d50c      	bpl.n	800fb56 <_DrawBitmap+0x37e>
 800fb3c:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800fb40:	9a06      	ldr	r2, [sp, #24]
 800fb42:	6803      	ldr	r3, [r0, #0]
 800fb44:	f8cd c00c 	str.w	ip, [sp, #12]
 800fb48:	4660      	mov	r0, ip
 800fb4a:	4641      	mov	r1, r8
 800fb4c:	4798      	blx	r3
 800fb4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fb54:	6021      	str	r1, [r4, #0]
 800fb56:	3404      	adds	r4, #4
 800fb58:	3f01      	subs	r7, #1
 800fb5a:	f108 0801 	add.w	r8, r8, #1
 800fb5e:	d00d      	beq.n	800fb7c <_DrawBitmap+0x3a4>
 800fb60:	086d      	lsrs	r5, r5, #1
 800fb62:	e7e4      	b.n	800fb2e <_DrawBitmap+0x356>
 800fb64:	07e9      	lsls	r1, r5, #31
 800fb66:	bf44      	itt	mi
 800fb68:	980b      	ldrmi	r0, [sp, #44]	; 0x2c
 800fb6a:	6020      	strmi	r0, [r4, #0]
 800fb6c:	3404      	adds	r4, #4
 800fb6e:	3f01      	subs	r7, #1
 800fb70:	d004      	beq.n	800fb7c <_DrawBitmap+0x3a4>
 800fb72:	086d      	lsrs	r5, r5, #1
 800fb74:	2d00      	cmp	r5, #0
 800fb76:	d1f5      	bne.n	800fb64 <_DrawBitmap+0x38c>
 800fb78:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800fb7c:	b33e      	cbz	r6, 800fbce <_DrawBitmap+0x3f6>
 800fb7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb80:	4f67      	ldr	r7, [pc, #412]	; (800fd20 <_DrawBitmap+0x548>)
 800fb82:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fb86:	5c3d      	ldrb	r5, [r7, r0]
 800fb88:	9209      	str	r2, [sp, #36]	; 0x24
 800fb8a:	2708      	movs	r7, #8
 800fb8c:	e7c8      	b.n	800fb20 <_DrawBitmap+0x348>
 800fb8e:	6802      	ldr	r2, [r0, #0]
 800fb90:	6911      	ldr	r1, [r2, #16]
 800fb92:	6888      	ldr	r0, [r1, #8]
 800fb94:	4780      	blx	r0
 800fb96:	4659      	mov	r1, fp
 800fb98:	42be      	cmp	r6, r7
 800fb9a:	bf38      	it	cc
 800fb9c:	4637      	movcc	r7, r6
 800fb9e:	1bf6      	subs	r6, r6, r7
 800fba0:	1d23      	adds	r3, r4, #4
 800fba2:	46be      	mov	lr, r7
 800fba4:	07ea      	lsls	r2, r5, #31
 800fba6:	d504      	bpl.n	800fbb2 <_DrawBitmap+0x3da>
 800fba8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800fbac:	4042      	eors	r2, r0
 800fbae:	f843 2c04 	str.w	r2, [r3, #-4]
 800fbb2:	086d      	lsrs	r5, r5, #1
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	f1be 0e01 	subs.w	lr, lr, #1
 800fbba:	d1f3      	bne.n	800fba4 <_DrawBitmap+0x3cc>
 800fbbc:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800fbc0:	b12e      	cbz	r6, 800fbce <_DrawBitmap+0x3f6>
 800fbc2:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 800fbc6:	4d56      	ldr	r5, [pc, #344]	; (800fd20 <_DrawBitmap+0x548>)
 800fbc8:	5ded      	ldrb	r5, [r5, r7]
 800fbca:	2708      	movs	r7, #8
 800fbcc:	e7e4      	b.n	800fb98 <_DrawBitmap+0x3c0>
 800fbce:	a810      	add	r0, sp, #64	; 0x40
 800fbd0:	f004 f9a0 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800fbd4:	e173      	b.n	800febe <_DrawBitmap+0x6e6>
 800fbd6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800fbd8:	4b52      	ldr	r3, [pc, #328]	; (800fd24 <_DrawBitmap+0x54c>)
 800fbda:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fbdc:	f89b 1000 	ldrb.w	r1, [fp]
 800fbe0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800fbe4:	f1c6 0204 	rsb	r2, r6, #4
 800fbe8:	b2d5      	uxtb	r5, r2
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	fa01 f100 	lsl.w	r1, r1, r0
 800fbf0:	b2ce      	uxtb	r6, r1
 800fbf2:	7c11      	ldrb	r1, [r2, #16]
 800fbf4:	f001 0003 	and.w	r0, r1, #3
 800fbf8:	2801      	cmp	r0, #1
 800fbfa:	d06a      	beq.n	800fcd2 <_DrawBitmap+0x4fa>
 800fbfc:	d308      	bcc.n	800fc10 <_DrawBitmap+0x438>
 800fbfe:	2802      	cmp	r0, #2
 800fc00:	f040 815d 	bne.w	800febe <_DrawBitmap+0x6e6>
 800fc04:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fc08:	4657      	mov	r7, sl
 800fc0a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fc0e:	e040      	b.n	800fc92 <_DrawBitmap+0x4ba>
 800fc10:	465a      	mov	r2, fp
 800fc12:	4653      	mov	r3, sl
 800fc14:	429d      	cmp	r5, r3
 800fc16:	bfc8      	it	gt
 800fc18:	b2dd      	uxtbgt	r5, r3
 800fc1a:	1b5b      	subs	r3, r3, r5
 800fc1c:	4629      	mov	r1, r5
 800fc1e:	4620      	mov	r0, r4
 800fc20:	09b7      	lsrs	r7, r6, #6
 800fc22:	3901      	subs	r1, #1
 800fc24:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 800fc28:	00b6      	lsls	r6, r6, #2
 800fc2a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800fc2e:	f840 7b04 	str.w	r7, [r0], #4
 800fc32:	b2f6      	uxtb	r6, r6
 800fc34:	d1f4      	bne.n	800fc20 <_DrawBitmap+0x448>
 800fc36:	3d01      	subs	r5, #1
 800fc38:	b2e8      	uxtb	r0, r5
 800fc3a:	1c45      	adds	r5, r0, #1
 800fc3c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f000 813c 	beq.w	800febe <_DrawBitmap+0x6e6>
 800fc46:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800fc4a:	2504      	movs	r5, #4
 800fc4c:	e7e2      	b.n	800fc14 <_DrawBitmap+0x43c>
 800fc4e:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800fc52:	d127      	bne.n	800fca4 <_DrawBitmap+0x4cc>
 800fc54:	9907      	ldr	r1, [sp, #28]
 800fc56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc58:	1c48      	adds	r0, r1, #1
 800fc5a:	9007      	str	r0, [sp, #28]
 800fc5c:	1d13      	adds	r3, r2, #4
 800fc5e:	9a07      	ldr	r2, [sp, #28]
 800fc60:	9309      	str	r3, [sp, #36]	; 0x24
 800fc62:	eb05 0108 	add.w	r1, r5, r8
 800fc66:	b2c8      	uxtb	r0, r1
 800fc68:	b2d3      	uxtb	r3, r2
 800fc6a:	00b6      	lsls	r6, r6, #2
 800fc6c:	4298      	cmp	r0, r3
 800fc6e:	b2f6      	uxtb	r6, r6
 800fc70:	d1ed      	bne.n	800fc4e <_DrawBitmap+0x476>
 800fc72:	3d01      	subs	r5, #1
 800fc74:	b2ed      	uxtb	r5, r5
 800fc76:	1c69      	adds	r1, r5, #1
 800fc78:	f108 0801 	add.w	r8, r8, #1
 800fc7c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800fc80:	44a8      	add	r8, r5
 800fc82:	2f00      	cmp	r7, #0
 800fc84:	f000 811b 	beq.w	800febe <_DrawBitmap+0x6e6>
 800fc88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fc8a:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800fc8e:	2504      	movs	r5, #4
 800fc90:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc92:	42bd      	cmp	r5, r7
 800fc94:	bfc8      	it	gt
 800fc96:	b2fd      	uxtbgt	r5, r7
 800fc98:	1d23      	adds	r3, r4, #4
 800fc9a:	1b7f      	subs	r7, r7, r5
 800fc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc9e:	f8cd 801c 	str.w	r8, [sp, #28]
 800fca2:	e7d4      	b.n	800fc4e <_DrawBitmap+0x476>
 800fca4:	09b2      	lsrs	r2, r6, #6
 800fca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fca8:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
 800fcac:	f840 1c04 	str.w	r1, [r0, #-4]
 800fcb0:	f1bc 0f00 	cmp.w	ip, #0
 800fcb4:	d0ce      	beq.n	800fc54 <_DrawBitmap+0x47c>
 800fcb6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800fcba:	9907      	ldr	r1, [sp, #28]
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	f8cd c00c 	str.w	ip, [sp, #12]
 800fcc2:	920f      	str	r2, [sp, #60]	; 0x3c
 800fcc4:	4660      	mov	r0, ip
 800fcc6:	9a06      	ldr	r2, [sp, #24]
 800fcc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcca:	4798      	blx	r3
 800fccc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fcd0:	e7c0      	b.n	800fc54 <_DrawBitmap+0x47c>
 800fcd2:	4658      	mov	r0, fp
 800fcd4:	4653      	mov	r3, sl
 800fcd6:	429d      	cmp	r5, r3
 800fcd8:	bfc8      	it	gt
 800fcda:	b2dd      	uxtbgt	r5, r3
 800fcdc:	1b5b      	subs	r3, r3, r5
 800fcde:	1d22      	adds	r2, r4, #4
 800fce0:	462f      	mov	r7, r5
 800fce2:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800fce6:	d005      	beq.n	800fcf4 <_DrawBitmap+0x51c>
 800fce8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800fcec:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800fcf0:	f842 1c04 	str.w	r1, [r2, #-4]
 800fcf4:	3f01      	subs	r7, #1
 800fcf6:	00b6      	lsls	r6, r6, #2
 800fcf8:	3204      	adds	r2, #4
 800fcfa:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800fcfe:	b2f6      	uxtb	r6, r6
 800fd00:	d1ef      	bne.n	800fce2 <_DrawBitmap+0x50a>
 800fd02:	3d01      	subs	r5, #1
 800fd04:	b2e9      	uxtb	r1, r5
 800fd06:	1c4d      	adds	r5, r1, #1
 800fd08:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f000 80d6 	beq.w	800febe <_DrawBitmap+0x6e6>
 800fd12:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800fd16:	2504      	movs	r5, #4
 800fd18:	e7dd      	b.n	800fcd6 <_DrawBitmap+0x4fe>
 800fd1a:	bf00      	nop
 800fd1c:	080296a8 	.word	0x080296a8
 800fd20:	08034184 	.word	0x08034184
 800fd24:	20000308 	.word	0x20000308
 800fd28:	496e      	ldr	r1, [pc, #440]	; (800fee4 <_DrawBitmap+0x70c>)
 800fd2a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fd2c:	680a      	ldr	r2, [r1, #0]
 800fd2e:	f89b 3000 	ldrb.w	r3, [fp]
 800fd32:	7c10      	ldrb	r0, [r2, #16]
 800fd34:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fd36:	f000 0103 	and.w	r1, r0, #3
 800fd3a:	fa03 f305 	lsl.w	r3, r3, r5
 800fd3e:	2901      	cmp	r1, #1
 800fd40:	b2dd      	uxtb	r5, r3
 800fd42:	f000 8096 	beq.w	800fe72 <_DrawBitmap+0x69a>
 800fd46:	d303      	bcc.n	800fd50 <_DrawBitmap+0x578>
 800fd48:	2902      	cmp	r1, #2
 800fd4a:	f040 80b8 	bne.w	800febe <_DrawBitmap+0x6e6>
 800fd4e:	e031      	b.n	800fdb4 <_DrawBitmap+0x5dc>
 800fd50:	9920      	ldr	r1, [sp, #128]	; 0x80
 800fd52:	b159      	cbz	r1, 800fd6c <_DrawBitmap+0x594>
 800fd54:	092d      	lsrs	r5, r5, #4
 800fd56:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fd5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fd5e:	6020      	str	r0, [r4, #0]
 800fd60:	f10b 0201 	add.w	r2, fp, #1
 800fd64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fd66:	f89b 5001 	ldrb.w	r5, [fp, #1]
 800fd6a:	e001      	b.n	800fd70 <_DrawBitmap+0x598>
 800fd6c:	4653      	mov	r3, sl
 800fd6e:	465a      	mov	r2, fp
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	dd17      	ble.n	800fda4 <_DrawBitmap+0x5cc>
 800fd74:	1058      	asrs	r0, r3, #1
 800fd76:	f104 0108 	add.w	r1, r4, #8
 800fd7a:	f003 0301 	and.w	r3, r3, #1
 800fd7e:	1816      	adds	r6, r2, r0
 800fd80:	092f      	lsrs	r7, r5, #4
 800fd82:	f005 050f 	and.w	r5, r5, #15
 800fd86:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 800fd8a:	f841 7c08 	str.w	r7, [r1, #-8]
 800fd8e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800fd92:	f841 5c04 	str.w	r5, [r1, #-4]
 800fd96:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800fd9a:	3108      	adds	r1, #8
 800fd9c:	42b2      	cmp	r2, r6
 800fd9e:	d1ef      	bne.n	800fd80 <_DrawBitmap+0x5a8>
 800fda0:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 808a 	beq.w	800febe <_DrawBitmap+0x6e6>
 800fdaa:	092d      	lsrs	r5, r5, #4
 800fdac:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 800fdb0:	6022      	str	r2, [r4, #0]
 800fdb2:	e084      	b.n	800febe <_DrawBitmap+0x6e6>
 800fdb4:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800fdb6:	b1bf      	cbz	r7, 800fde8 <_DrawBitmap+0x610>
 800fdb8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800fdbc:	d00a      	beq.n	800fdd4 <_DrawBitmap+0x5fc>
 800fdbe:	092b      	lsrs	r3, r5, #4
 800fdc0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800fdc4:	6025      	str	r5, [r4, #0]
 800fdc6:	b12e      	cbz	r6, 800fdd4 <_DrawBitmap+0x5fc>
 800fdc8:	68b4      	ldr	r4, [r6, #8]
 800fdca:	9905      	ldr	r1, [sp, #20]
 800fdcc:	6827      	ldr	r7, [r4, #0]
 800fdce:	9a06      	ldr	r2, [sp, #24]
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	47b8      	blx	r7
 800fdd4:	9a05      	ldr	r2, [sp, #20]
 800fdd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fdd8:	f89b 5001 	ldrb.w	r5, [fp, #1]
 800fddc:	1c57      	adds	r7, r2, #1
 800fdde:	f10a 3cff 	add.w	ip, sl, #4294967295
 800fde2:	f10b 0801 	add.w	r8, fp, #1
 800fde6:	e00f      	b.n	800fe08 <_DrawBitmap+0x630>
 800fde8:	46d4      	mov	ip, sl
 800fdea:	46d8      	mov	r8, fp
 800fdec:	9f05      	ldr	r7, [sp, #20]
 800fdee:	e00b      	b.n	800fe08 <_DrawBitmap+0x630>
 800fdf0:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800fdf4:	d10c      	bne.n	800fe10 <_DrawBitmap+0x638>
 800fdf6:	f015 050f 	ands.w	r5, r5, #15
 800fdfa:	d11a      	bne.n	800fe32 <_DrawBitmap+0x65a>
 800fdfc:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800fe00:	3408      	adds	r4, #8
 800fe02:	3702      	adds	r7, #2
 800fe04:	f1ac 0c02 	sub.w	ip, ip, #2
 800fe08:	f1bc 0f01 	cmp.w	ip, #1
 800fe0c:	dcf0      	bgt.n	800fdf0 <_DrawBitmap+0x618>
 800fe0e:	e020      	b.n	800fe52 <_DrawBitmap+0x67a>
 800fe10:	092a      	lsrs	r2, r5, #4
 800fe12:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 800fe16:	6020      	str	r0, [r4, #0]
 800fe18:	2e00      	cmp	r6, #0
 800fe1a:	d0ec      	beq.n	800fdf6 <_DrawBitmap+0x61e>
 800fe1c:	68b1      	ldr	r1, [r6, #8]
 800fe1e:	9a06      	ldr	r2, [sp, #24]
 800fe20:	680b      	ldr	r3, [r1, #0]
 800fe22:	f8cd c00c 	str.w	ip, [sp, #12]
 800fe26:	4630      	mov	r0, r6
 800fe28:	4639      	mov	r1, r7
 800fe2a:	4798      	blx	r3
 800fe2c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fe30:	e7e1      	b.n	800fdf6 <_DrawBitmap+0x61e>
 800fe32:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 800fe36:	6062      	str	r2, [r4, #4]
 800fe38:	2e00      	cmp	r6, #0
 800fe3a:	d0df      	beq.n	800fdfc <_DrawBitmap+0x624>
 800fe3c:	68b0      	ldr	r0, [r6, #8]
 800fe3e:	9a06      	ldr	r2, [sp, #24]
 800fe40:	6803      	ldr	r3, [r0, #0]
 800fe42:	f8cd c00c 	str.w	ip, [sp, #12]
 800fe46:	4630      	mov	r0, r6
 800fe48:	1c79      	adds	r1, r7, #1
 800fe4a:	4798      	blx	r3
 800fe4c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800fe50:	e7d4      	b.n	800fdfc <_DrawBitmap+0x624>
 800fe52:	f1bc 0f00 	cmp.w	ip, #0
 800fe56:	d032      	beq.n	800febe <_DrawBitmap+0x6e6>
 800fe58:	092d      	lsrs	r5, r5, #4
 800fe5a:	d030      	beq.n	800febe <_DrawBitmap+0x6e6>
 800fe5c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fe60:	6020      	str	r0, [r4, #0]
 800fe62:	b366      	cbz	r6, 800febe <_DrawBitmap+0x6e6>
 800fe64:	68b1      	ldr	r1, [r6, #8]
 800fe66:	9a06      	ldr	r2, [sp, #24]
 800fe68:	680b      	ldr	r3, [r1, #0]
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	4639      	mov	r1, r7
 800fe6e:	4798      	blx	r3
 800fe70:	e025      	b.n	800febe <_DrawBitmap+0x6e6>
 800fe72:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800fe74:	f1c6 0002 	rsb	r0, r6, #2
 800fe78:	b2c3      	uxtb	r3, r0
 800fe7a:	465e      	mov	r6, fp
 800fe7c:	4652      	mov	r2, sl
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	bfc8      	it	gt
 800fe82:	b2d3      	uxtbgt	r3, r2
 800fe84:	1ad2      	subs	r2, r2, r3
 800fe86:	1d20      	adds	r0, r4, #4
 800fe88:	461f      	mov	r7, r3
 800fe8a:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800fe8e:	d005      	beq.n	800fe9c <_DrawBitmap+0x6c4>
 800fe90:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800fe94:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800fe98:	f840 1c04 	str.w	r1, [r0, #-4]
 800fe9c:	3f01      	subs	r7, #1
 800fe9e:	012d      	lsls	r5, r5, #4
 800fea0:	3004      	adds	r0, #4
 800fea2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800fea6:	b2ed      	uxtb	r5, r5
 800fea8:	d1ef      	bne.n	800fe8a <_DrawBitmap+0x6b2>
 800feaa:	3b01      	subs	r3, #1
 800feac:	b2d9      	uxtb	r1, r3
 800feae:	1c48      	adds	r0, r1, #1
 800feb0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800feb4:	b11a      	cbz	r2, 800febe <_DrawBitmap+0x6e6>
 800feb6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 800feba:	2302      	movs	r3, #2
 800febc:	e7df      	b.n	800fe7e <_DrawBitmap+0x6a6>
 800febe:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800fec0:	9806      	ldr	r0, [sp, #24]
 800fec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fec6:	44a3      	add	fp, r4
 800fec8:	1c43      	adds	r3, r0, #1
 800feca:	1854      	adds	r4, r2, r1
 800fecc:	9306      	str	r3, [sp, #24]
 800fece:	940a      	str	r4, [sp, #40]	; 0x28
 800fed0:	e5d3      	b.n	800fa7a <_DrawBitmap+0x2a2>
 800fed2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fed4:	b110      	cbz	r0, 800fedc <_DrawBitmap+0x704>
 800fed6:	a811      	add	r0, sp, #68	; 0x44
 800fed8:	f004 f81c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800fedc:	b013      	add	sp, #76	; 0x4c
 800fede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee2:	bf00      	nop
 800fee4:	20000308 	.word	0x20000308

0800fee8 <GUI_MEMDEV__WriteToActiveAt>:
 800fee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800feec:	460e      	mov	r6, r1
 800feee:	4690      	mov	r8, r2
 800fef0:	4607      	mov	r7, r0
 800fef2:	f004 f801 	bl	8013ef8 <GUI_ALLOC_LockH>
 800fef6:	ac02      	add	r4, sp, #8
 800fef8:	6803      	ldr	r3, [r0, #0]
 800fefa:	f844 0d04 	str.w	r0, [r4, #-4]!
 800fefe:	68d8      	ldr	r0, [r3, #12]
 800ff00:	2116      	movs	r1, #22
 800ff02:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ff04:	2000      	movs	r0, #0
 800ff06:	4790      	blx	r2
 800ff08:	4605      	mov	r5, r0
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f004 f802 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800ff10:	b11d      	cbz	r5, 800ff1a <GUI_MEMDEV__WriteToActiveAt+0x32>
 800ff12:	4638      	mov	r0, r7
 800ff14:	4631      	mov	r1, r6
 800ff16:	4642      	mov	r2, r8
 800ff18:	47a8      	blx	r5
 800ff1a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
	...

0800ff20 <GUI_MEMDEV__CreateFixed>:
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff24:	461d      	mov	r5, r3
 800ff26:	4b3c      	ldr	r3, [pc, #240]	; (8010018 <GUI_MEMDEV__CreateFixed+0xf8>)
 800ff28:	b087      	sub	sp, #28
 800ff2a:	681c      	ldr	r4, [r3, #0]
 800ff2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ff2e:	7c63      	ldrb	r3, [r4, #17]
 800ff30:	4683      	mov	fp, r0
 800ff32:	468a      	mov	sl, r1
 800ff34:	4690      	mov	r8, r2
 800ff36:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ff38:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f003 faca 	bl	80134d4 <GUI_DEVICE_Create>
 800ff40:	4604      	mov	r4, r0
 800ff42:	b378      	cbz	r0, 800ffa4 <GUI_MEMDEV__CreateFixed+0x84>
 800ff44:	6900      	ldr	r0, [r0, #16]
 800ff46:	6881      	ldr	r1, [r0, #8]
 800ff48:	4788      	blx	r1
 800ff4a:	f001 fac9 	bl	80114e0 <LCD__GetBPPDevice>
 800ff4e:	fb08 f600 	mul.w	r6, r8, r0
 800ff52:	1df2      	adds	r2, r6, #7
 800ff54:	08d6      	lsrs	r6, r2, #3
 800ff56:	9003      	str	r0, [sp, #12]
 800ff58:	f004 f93e 	bl	80141d8 <GUI_ALLOC_RequestSize>
 800ff5c:	f017 0901 	ands.w	r9, r7, #1
 800ff60:	d104      	bne.n	800ff6c <GUI_MEMDEV__CreateFixed+0x4c>
 800ff62:	2704      	movs	r7, #4
 800ff64:	fb90 f0f7 	sdiv	r0, r0, r7
 800ff68:	2303      	movs	r3, #3
 800ff6a:	4358      	muls	r0, r3
 800ff6c:	2d00      	cmp	r5, #0
 800ff6e:	dc06      	bgt.n	800ff7e <GUI_MEMDEV__CreateFixed+0x5e>
 800ff70:	3818      	subs	r0, #24
 800ff72:	426d      	negs	r5, r5
 800ff74:	fbb0 f0f6 	udiv	r0, r0, r6
 800ff78:	42a8      	cmp	r0, r5
 800ff7a:	bfb8      	it	lt
 800ff7c:	4605      	movlt	r5, r0
 800ff7e:	f1b9 0f00 	cmp.w	r9, #0
 800ff82:	d109      	bne.n	800ff98 <GUI_MEMDEV__CreateFixed+0x78>
 800ff84:	f8cd 9000 	str.w	r9, [sp]
 800ff88:	4658      	mov	r0, fp
 800ff8a:	4651      	mov	r1, sl
 800ff8c:	4642      	mov	r2, r8
 800ff8e:	462b      	mov	r3, r5
 800ff90:	f006 fc54 	bl	801683c <GUI_USAGE_BM_Create>
 800ff94:	4607      	mov	r7, r0
 800ff96:	e000      	b.n	800ff9a <GUI_MEMDEV__CreateFixed+0x7a>
 800ff98:	2700      	movs	r7, #0
 800ff9a:	2d00      	cmp	r5, #0
 800ff9c:	dc05      	bgt.n	800ffaa <GUI_MEMDEV__CreateFixed+0x8a>
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f003 fa96 	bl	80134d0 <GUI_DEVICE_Delete>
 800ffa4:	f04f 0900 	mov.w	r9, #0
 800ffa8:	e031      	b.n	801000e <GUI_MEMDEV__CreateFixed+0xee>
 800ffaa:	fb06 f005 	mul.w	r0, r6, r5
 800ffae:	3018      	adds	r0, #24
 800ffb0:	f1b9 0f00 	cmp.w	r9, #0
 800ffb4:	d002      	beq.n	800ffbc <GUI_MEMDEV__CreateFixed+0x9c>
 800ffb6:	f004 f9ed 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 800ffba:	e001      	b.n	800ffc0 <GUI_MEMDEV__CreateFixed+0xa0>
 800ffbc:	f004 fa10 	bl	80143e0 <GUI_ALLOC_AllocZero>
 800ffc0:	4681      	mov	r9, r0
 800ffc2:	b940      	cbnz	r0, 800ffd6 <GUI_MEMDEV__CreateFixed+0xb6>
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f003 fa83 	bl	80134d0 <GUI_DEVICE_Delete>
 800ffca:	2f00      	cmp	r7, #0
 800ffcc:	d0ea      	beq.n	800ffa4 <GUI_MEMDEV__CreateFixed+0x84>
 800ffce:	4638      	mov	r0, r7
 800ffd0:	f003 ffcc 	bl	8013f6c <GUI_ALLOC_Free>
 800ffd4:	e01b      	b.n	801000e <GUI_MEMDEV__CreateFixed+0xee>
 800ffd6:	f003 ff8f 	bl	8013ef8 <GUI_ALLOC_LockH>
 800ffda:	9a03      	ldr	r2, [sp, #12]
 800ffdc:	4601      	mov	r1, r0
 800ffde:	a806      	add	r0, sp, #24
 800ffe0:	610a      	str	r2, [r1, #16]
 800ffe2:	f840 1d04 	str.w	r1, [r0, #-4]!
 800ffe6:	f8a1 b004 	strh.w	fp, [r1, #4]
 800ffea:	600c      	str	r4, [r1, #0]
 800ffec:	f8a1 a006 	strh.w	sl, [r1, #6]
 800fff0:	f8a1 8008 	strh.w	r8, [r1, #8]
 800fff4:	814d      	strh	r5, [r1, #10]
 800fff6:	60ce      	str	r6, [r1, #12]
 800fff8:	614f      	str	r7, [r1, #20]
 800fffa:	f003 ff8b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 800fffe:	4806      	ldr	r0, [pc, #24]	; (8010018 <GUI_MEMDEV__CreateFixed+0xf8>)
 8010000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010002:	6801      	ldr	r1, [r0, #0]
 8010004:	6123      	str	r3, [r4, #16]
 8010006:	f8c4 9008 	str.w	r9, [r4, #8]
 801000a:	7c4a      	ldrb	r2, [r1, #17]
 801000c:	61a2      	str	r2, [r4, #24]
 801000e:	4648      	mov	r0, r9
 8010010:	b007      	add	sp, #28
 8010012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010016:	bf00      	nop
 8010018:	20000308 	.word	0x20000308

0801001c <GUI_MEMDEV_GetBitsPerPixel>:
 801001c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801001e:	4605      	mov	r5, r0
 8010020:	b170      	cbz	r0, 8010040 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8010022:	f003 ff69 	bl	8013ef8 <GUI_ALLOC_LockH>
 8010026:	ac02      	add	r4, sp, #8
 8010028:	6803      	ldr	r3, [r0, #0]
 801002a:	f844 0d04 	str.w	r0, [r4, #-4]!
 801002e:	6918      	ldr	r0, [r3, #16]
 8010030:	6881      	ldr	r1, [r0, #8]
 8010032:	4788      	blx	r1
 8010034:	f001 fa54 	bl	80114e0 <LCD__GetBPPDevice>
 8010038:	4605      	mov	r5, r0
 801003a:	4620      	mov	r0, r4
 801003c:	f003 ff6a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8010040:	4628      	mov	r0, r5
 8010042:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08010044 <GUI_MEMDEV_Delete>:
 8010044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010046:	4604      	mov	r4, r0
 8010048:	b1d0      	cbz	r0, 8010080 <GUI_MEMDEV_Delete+0x3c>
 801004a:	4b0e      	ldr	r3, [pc, #56]	; (8010084 <GUI_MEMDEV_Delete+0x40>)
 801004c:	6818      	ldr	r0, [r3, #0]
 801004e:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8010050:	42a1      	cmp	r1, r4
 8010052:	d101      	bne.n	8010058 <GUI_MEMDEV_Delete+0x14>
 8010054:	f002 fbc6 	bl	80127e4 <GUI_SelectLCD>
 8010058:	4620      	mov	r0, r4
 801005a:	f003 ff4d 	bl	8013ef8 <GUI_ALLOC_LockH>
 801005e:	9001      	str	r0, [sp, #4]
 8010060:	6940      	ldr	r0, [r0, #20]
 8010062:	b108      	cbz	r0, 8010068 <GUI_MEMDEV_Delete+0x24>
 8010064:	f006 fc14 	bl	8016890 <GUI_USAGE_DecUseCnt>
 8010068:	ad02      	add	r5, sp, #8
 801006a:	f855 2d04 	ldr.w	r2, [r5, #-4]!
 801006e:	6810      	ldr	r0, [r2, #0]
 8010070:	f003 fa2e 	bl	80134d0 <GUI_DEVICE_Delete>
 8010074:	4628      	mov	r0, r5
 8010076:	f003 ff4d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801007a:	4620      	mov	r0, r4
 801007c:	f003 ff76 	bl	8013f6c <GUI_ALLOC_Free>
 8010080:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8010082:	bf00      	nop
 8010084:	20000308 	.word	0x20000308

08010088 <GUI_MEMDEV_CreateEx>:
 8010088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801008c:	469a      	mov	sl, r3
 801008e:	4b18      	ldr	r3, [pc, #96]	; (80100f0 <GUI_MEMDEV_CreateEx+0x68>)
 8010090:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010092:	4607      	mov	r7, r0
 8010094:	6818      	ldr	r0, [r3, #0]
 8010096:	4688      	mov	r8, r1
 8010098:	7c40      	ldrb	r0, [r0, #17]
 801009a:	4916      	ldr	r1, [pc, #88]	; (80100f4 <GUI_MEMDEV_CreateEx+0x6c>)
 801009c:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80100a0:	4691      	mov	r9, r2
 80100a2:	68e2      	ldr	r2, [r4, #12]
 80100a4:	6816      	ldr	r6, [r2, #0]
 80100a6:	2e04      	cmp	r6, #4
 80100a8:	d005      	beq.n	80100b6 <GUI_MEMDEV_CreateEx+0x2e>
 80100aa:	6824      	ldr	r4, [r4, #0]
 80100ac:	2c00      	cmp	r4, #0
 80100ae:	d1f8      	bne.n	80100a2 <GUI_MEMDEV_CreateEx+0x1a>
 80100b0:	f003 f9fe 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 80100b4:	4604      	mov	r4, r0
 80100b6:	68e3      	ldr	r3, [r4, #12]
 80100b8:	4620      	mov	r0, r4
 80100ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100bc:	2101      	movs	r1, #1
 80100be:	4790      	blx	r2
 80100c0:	4606      	mov	r6, r0
 80100c2:	b188      	cbz	r0, 80100e8 <GUI_MEMDEV_CreateEx+0x60>
 80100c4:	6924      	ldr	r4, [r4, #16]
 80100c6:	68a0      	ldr	r0, [r4, #8]
 80100c8:	4780      	blx	r0
 80100ca:	3001      	adds	r0, #1
 80100cc:	bf04      	itt	eq
 80100ce:	4c0a      	ldreq	r4, [pc, #40]	; (80100f8 <GUI_MEMDEV_CreateEx+0x70>)
 80100d0:	f045 0501 	orreq.w	r5, r5, #1
 80100d4:	e88d 0060 	stmia.w	sp, {r5, r6}
 80100d8:	9402      	str	r4, [sp, #8]
 80100da:	4638      	mov	r0, r7
 80100dc:	4641      	mov	r1, r8
 80100de:	464a      	mov	r2, r9
 80100e0:	4653      	mov	r3, sl
 80100e2:	f7ff ff1d 	bl	800ff20 <GUI_MEMDEV__CreateFixed>
 80100e6:	e7ff      	b.n	80100e8 <GUI_MEMDEV_CreateEx+0x60>
 80100e8:	b004      	add	sp, #16
 80100ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ee:	bf00      	nop
 80100f0:	20000308 	.word	0x20000308
 80100f4:	2000eb5c 	.word	0x2000eb5c
 80100f8:	080342a8 	.word	0x080342a8

080100fc <GUI_MEMDEV_Select>:
 80100fc:	4b11      	ldr	r3, [pc, #68]	; (8010144 <GUI_MEMDEV_Select+0x48>)
 80100fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	4604      	mov	r4, r0
 8010104:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8010106:	461f      	mov	r7, r3
 8010108:	b910      	cbnz	r0, 8010110 <GUI_MEMDEV_Select+0x14>
 801010a:	f002 fb6b 	bl	80127e4 <GUI_SelectLCD>
 801010e:	e016      	b.n	801013e <GUI_MEMDEV_Select+0x42>
 8010110:	b10e      	cbz	r6, 8010116 <GUI_MEMDEV_Select+0x1a>
 8010112:	f002 fb67 	bl	80127e4 <GUI_SelectLCD>
 8010116:	f7fe ff75 	bl	800f004 <WM_Deactivate>
 801011a:	4620      	mov	r0, r4
 801011c:	f003 feec 	bl	8013ef8 <GUI_ALLOC_LockH>
 8010120:	ad02      	add	r5, sp, #8
 8010122:	6839      	ldr	r1, [r7, #0]
 8010124:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010128:	660c      	str	r4, [r1, #96]	; 0x60
 801012a:	6800      	ldr	r0, [r0, #0]
 801012c:	f003 f9fa 	bl	8013524 <GUI_DEVICE_Link>
 8010130:	4628      	mov	r0, r5
 8010132:	f003 feef 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8010136:	f001 f879 	bl	801122c <LCD_UpdateColorIndices>
 801013a:	f001 fc91 	bl	8011a60 <LCD_SetClipRectMax>
 801013e:	4630      	mov	r0, r6
 8010140:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010142:	bf00      	nop
 8010144:	20000308 	.word	0x20000308

08010148 <GUI_MEMDEV_CopyToLCDAt>:
 8010148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801014c:	460c      	mov	r4, r1
 801014e:	b085      	sub	sp, #20
 8010150:	4615      	mov	r5, r2
 8010152:	4606      	mov	r6, r0
 8010154:	2800      	cmp	r0, #0
 8010156:	d042      	beq.n	80101de <GUI_MEMDEV_CopyToLCDAt+0x96>
 8010158:	2000      	movs	r0, #0
 801015a:	f002 fae3 	bl	8012724 <GUI_SetDrawMode>
 801015e:	4b21      	ldr	r3, [pc, #132]	; (80101e4 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 8010160:	4607      	mov	r7, r0
 8010162:	6818      	ldr	r0, [r3, #0]
 8010164:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 8010168:	4630      	mov	r0, r6
 801016a:	f003 fec5 	bl	8013ef8 <GUI_ALLOC_LockH>
 801016e:	6801      	ldr	r1, [r0, #0]
 8010170:	9001      	str	r0, [sp, #4]
 8010172:	6988      	ldr	r0, [r1, #24]
 8010174:	f002 fb22 	bl	80127bc <GUI_SelectLayer>
 8010178:	4a1b      	ldr	r2, [pc, #108]	; (80101e8 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 801017a:	4294      	cmp	r4, r2
 801017c:	4681      	mov	r9, r0
 801017e:	d104      	bne.n	801018a <GUI_MEMDEV_CopyToLCDAt+0x42>
 8010180:	9d01      	ldr	r5, [sp, #4]
 8010182:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8010186:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801018a:	9b01      	ldr	r3, [sp, #4]
 801018c:	f8ad 4008 	strh.w	r4, [sp, #8]
 8010190:	8918      	ldrh	r0, [r3, #8]
 8010192:	895b      	ldrh	r3, [r3, #10]
 8010194:	f8ad 500a 	strh.w	r5, [sp, #10]
 8010198:	1e41      	subs	r1, r0, #1
 801019a:	1e58      	subs	r0, r3, #1
 801019c:	190a      	adds	r2, r1, r4
 801019e:	1941      	adds	r1, r0, r5
 80101a0:	f8ad 200c 	strh.w	r2, [sp, #12]
 80101a4:	f8ad 100e 	strh.w	r1, [sp, #14]
 80101a8:	f7fe ff24 	bl	800eff4 <WM_Activate>
 80101ac:	a801      	add	r0, sp, #4
 80101ae:	f003 feb1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80101b2:	a802      	add	r0, sp, #8
 80101b4:	f7fe fd46 	bl	800ec44 <WM__InitIVRSearch>
 80101b8:	b948      	cbnz	r0, 80101ce <GUI_MEMDEV_CopyToLCDAt+0x86>
 80101ba:	4648      	mov	r0, r9
 80101bc:	f002 fafe 	bl	80127bc <GUI_SelectLayer>
 80101c0:	4640      	mov	r0, r8
 80101c2:	f7ff ff9b 	bl	80100fc <GUI_MEMDEV_Select>
 80101c6:	4638      	mov	r0, r7
 80101c8:	f002 faac 	bl	8012724 <GUI_SetDrawMode>
 80101cc:	e007      	b.n	80101de <GUI_MEMDEV_CopyToLCDAt+0x96>
 80101ce:	4630      	mov	r0, r6
 80101d0:	4621      	mov	r1, r4
 80101d2:	462a      	mov	r2, r5
 80101d4:	f005 fe04 	bl	8015de0 <GUI_MEMDEV__WriteToActiveOpaque>
 80101d8:	f7fe fc74 	bl	800eac4 <WM__GetNextIVR>
 80101dc:	e7ec      	b.n	80101b8 <GUI_MEMDEV_CopyToLCDAt+0x70>
 80101de:	b005      	add	sp, #20
 80101e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101e4:	20000308 	.word	0x20000308
 80101e8:	fffff001 	.word	0xfffff001

080101ec <GUI_MEMDEV_CopyToLCD>:
 80101ec:	4901      	ldr	r1, [pc, #4]	; (80101f4 <GUI_MEMDEV_CopyToLCD+0x8>)
 80101ee:	460a      	mov	r2, r1
 80101f0:	f7ff bfaa 	b.w	8010148 <GUI_MEMDEV_CopyToLCDAt>
 80101f4:	fffff001 	.word	0xfffff001

080101f8 <_SetPhysRAMAddr>:
 80101f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fa:	4604      	mov	r4, r0
 80101fc:	460e      	mov	r6, r1
 80101fe:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8010202:	212a      	movs	r1, #42	; 0x2a
 8010204:	4615      	mov	r5, r2
 8010206:	4798      	blx	r3
 8010208:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801020a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 801020e:	1872      	adds	r2, r6, r1
 8010210:	f3c2 210f 	ubfx	r1, r2, #8, #16
 8010214:	4620      	mov	r0, r4
 8010216:	47b8      	blx	r7
 8010218:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801021a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801021e:	b2b7      	uxth	r7, r6
 8010220:	1839      	adds	r1, r7, r0
 8010222:	b2c9      	uxtb	r1, r1
 8010224:	4620      	mov	r0, r4
 8010226:	4798      	blx	r3
 8010228:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801022a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801022e:	18b6      	adds	r6, r6, r2
 8010230:	4620      	mov	r0, r4
 8010232:	f3c6 210f 	ubfx	r1, r6, #8, #16
 8010236:	4798      	blx	r3
 8010238:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801023a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 801023e:	1839      	adds	r1, r7, r0
 8010240:	b2c9      	uxtb	r1, r1
 8010242:	4620      	mov	r0, r4
 8010244:	4790      	blx	r2
 8010246:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 801024a:	4620      	mov	r0, r4
 801024c:	212b      	movs	r1, #43	; 0x2b
 801024e:	47b0      	blx	r6
 8010250:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010252:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8010256:	18e9      	adds	r1, r5, r3
 8010258:	4620      	mov	r0, r4
 801025a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 801025e:	4790      	blx	r2
 8010260:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010262:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010266:	b2ae      	uxth	r6, r5
 8010268:	1831      	adds	r1, r6, r0
 801026a:	b2c9      	uxtb	r1, r1
 801026c:	4620      	mov	r0, r4
 801026e:	4798      	blx	r3
 8010270:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010272:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010276:	18a9      	adds	r1, r5, r2
 8010278:	4620      	mov	r0, r4
 801027a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 801027e:	4798      	blx	r3
 8010280:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010282:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010286:	1832      	adds	r2, r6, r0
 8010288:	b2d1      	uxtb	r1, r2
 801028a:	4620      	mov	r0, r4
 801028c:	4798      	blx	r3
 801028e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8010292:	4620      	mov	r0, r4
 8010294:	212c      	movs	r1, #44	; 0x2c
 8010296:	4790      	blx	r2
 8010298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801029a <_SetRect>:
 801029a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801029e:	4604      	mov	r4, r0
 80102a0:	4688      	mov	r8, r1
 80102a2:	461f      	mov	r7, r3
 80102a4:	212a      	movs	r1, #42	; 0x2a
 80102a6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80102aa:	9d06      	ldr	r5, [sp, #24]
 80102ac:	4616      	mov	r6, r2
 80102ae:	4798      	blx	r3
 80102b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80102b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80102b6:	eb08 0201 	add.w	r2, r8, r1
 80102ba:	4620      	mov	r0, r4
 80102bc:	f3c2 210f 	ubfx	r1, r2, #8, #16
 80102c0:	4798      	blx	r3
 80102c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80102c4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80102c8:	eb08 0100 	add.w	r1, r8, r0
 80102cc:	b2c9      	uxtb	r1, r1
 80102ce:	4620      	mov	r0, r4
 80102d0:	4790      	blx	r2
 80102d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80102d4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80102d8:	18f9      	adds	r1, r7, r3
 80102da:	4620      	mov	r0, r4
 80102dc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80102e0:	4790      	blx	r2
 80102e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80102e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80102e8:	1839      	adds	r1, r7, r0
 80102ea:	b2c9      	uxtb	r1, r1
 80102ec:	4620      	mov	r0, r4
 80102ee:	4798      	blx	r3
 80102f0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80102f4:	4620      	mov	r0, r4
 80102f6:	212b      	movs	r1, #43	; 0x2b
 80102f8:	4790      	blx	r2
 80102fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80102fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010300:	1831      	adds	r1, r6, r0
 8010302:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8010306:	4620      	mov	r0, r4
 8010308:	4798      	blx	r3
 801030a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801030c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010310:	18b1      	adds	r1, r6, r2
 8010312:	4620      	mov	r0, r4
 8010314:	b2c9      	uxtb	r1, r1
 8010316:	4798      	blx	r3
 8010318:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801031a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801031e:	182a      	adds	r2, r5, r0
 8010320:	f3c2 210f 	ubfx	r1, r2, #8, #16
 8010324:	4620      	mov	r0, r4
 8010326:	4798      	blx	r3
 8010328:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801032a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801032e:	186a      	adds	r2, r5, r1
 8010330:	4620      	mov	r0, r4
 8010332:	b2d1      	uxtb	r1, r2
 8010334:	4798      	blx	r3
 8010336:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 801033a:	4620      	mov	r0, r4
 801033c:	212c      	movs	r1, #44	; 0x2c
 801033e:	4790      	blx	r2
 8010340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010344 <_SetOrientation>:
 8010344:	b513      	push	{r0, r1, r4, lr}
 8010346:	4a0d      	ldr	r2, [pc, #52]	; (801037c <_SetOrientation+0x38>)
 8010348:	4604      	mov	r4, r0
 801034a:	6851      	ldr	r1, [r2, #4]
 801034c:	6810      	ldr	r0, [r2, #0]
 801034e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8010352:	466b      	mov	r3, sp
 8010354:	c303      	stmia	r3!, {r0, r1}
 8010356:	4620      	mov	r0, r4
 8010358:	2136      	movs	r1, #54	; 0x36
 801035a:	4790      	blx	r2
 801035c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801035e:	a902      	add	r1, sp, #8
 8010360:	180b      	adds	r3, r1, r0
 8010362:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8010364:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8010368:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801036c:	f020 01e0 	bic.w	r1, r0, #224	; 0xe0
 8010370:	430a      	orrs	r2, r1
 8010372:	4620      	mov	r0, r4
 8010374:	b291      	uxth	r1, r2
 8010376:	4798      	blx	r3
 8010378:	bd1c      	pop	{r2, r3, r4, pc}
 801037a:	bf00      	nop
 801037c:	0801fdd8 	.word	0x0801fdd8

08010380 <_ReadPixel_16bpp_B8>:
 8010380:	b513      	push	{r0, r1, r4, lr}
 8010382:	4604      	mov	r4, r0
 8010384:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8010388:	202e      	movs	r0, #46	; 0x2e
 801038a:	4798      	blx	r3
 801038c:	6a21      	ldr	r1, [r4, #32]
 801038e:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8010392:	4668      	mov	r0, sp
 8010394:	3103      	adds	r1, #3
 8010396:	4790      	blx	r2
 8010398:	6a20      	ldr	r0, [r4, #32]
 801039a:	ab00      	add	r3, sp, #0
 801039c:	181b      	adds	r3, r3, r0
 801039e:	f81d 2000 	ldrb.w	r2, [sp, r0]
 80103a2:	7859      	ldrb	r1, [r3, #1]
 80103a4:	789b      	ldrb	r3, [r3, #2]
 80103a6:	08d0      	lsrs	r0, r2, #3
 80103a8:	02c2      	lsls	r2, r0, #11
 80103aa:	0889      	lsrs	r1, r1, #2
 80103ac:	ea42 1141 	orr.w	r1, r2, r1, lsl #5
 80103b0:	ea41 00d3 	orr.w	r0, r1, r3, lsr #3
 80103b4:	bd1c      	pop	{r2, r3, r4, pc}

080103b6 <_ReadPixel_16bpp_B16_I>:
 80103b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103b8:	4604      	mov	r4, r0
 80103ba:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 80103be:	202e      	movs	r0, #46	; 0x2e
 80103c0:	4798      	blx	r3
 80103c2:	6a21      	ldr	r1, [r4, #32]
 80103c4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 80103c8:	4668      	mov	r0, sp
 80103ca:	3102      	adds	r1, #2
 80103cc:	4790      	blx	r2
 80103ce:	6a20      	ldr	r0, [r4, #32]
 80103d0:	ab00      	add	r3, sp, #0
 80103d2:	eb03 0140 	add.w	r1, r3, r0, lsl #1
 80103d6:	f83d 0010 	ldrh.w	r0, [sp, r0, lsl #1]
 80103da:	884a      	ldrh	r2, [r1, #2]
 80103dc:	f402 437c 	and.w	r3, r2, #64512	; 0xfc00
 80103e0:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 80103e4:	ea41 1253 	orr.w	r2, r1, r3, lsr #5
 80103e8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80103ec:	ea42 2003 	orr.w	r0, r2, r3, lsl #8
 80103f0:	b004      	add	sp, #16
 80103f2:	bd10      	pop	{r4, pc}

080103f4 <_SetReg_B8>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4604      	mov	r4, r0
 80103f8:	460d      	mov	r5, r1
 80103fa:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80103fe:	0a08      	lsrs	r0, r1, #8
 8010400:	4798      	blx	r3
 8010402:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8010406:	b2e8      	uxtb	r0, r5
 8010408:	4788      	blx	r1
 801040a:	bd38      	pop	{r3, r4, r5, pc}

0801040c <_SetReg_B16>:
 801040c:	b508      	push	{r3, lr}
 801040e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8010412:	4608      	mov	r0, r1
 8010414:	4798      	blx	r3
 8010416:	bd08      	pop	{r3, pc}

08010418 <_WritePara_B8>:
 8010418:	b508      	push	{r3, lr}
 801041a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 801041e:	b2c8      	uxtb	r0, r1
 8010420:	4798      	blx	r3
 8010422:	bd08      	pop	{r3, pc}

08010424 <_WritePara_B16>:
 8010424:	b508      	push	{r3, lr}
 8010426:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 801042a:	4608      	mov	r0, r1
 801042c:	4798      	blx	r3
 801042e:	bd08      	pop	{r3, pc}

08010430 <_SetInterface>:
 8010430:	2908      	cmp	r1, #8
 8010432:	d006      	beq.n	8010442 <_SetInterface+0x12>
 8010434:	2910      	cmp	r1, #16
 8010436:	d10a      	bne.n	801044e <_SetInterface+0x1e>
 8010438:	4b05      	ldr	r3, [pc, #20]	; (8010450 <_SetInterface+0x20>)
 801043a:	4906      	ldr	r1, [pc, #24]	; (8010454 <_SetInterface+0x24>)
 801043c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8010440:	e003      	b.n	801044a <_SetInterface+0x1a>
 8010442:	4a05      	ldr	r2, [pc, #20]	; (8010458 <_SetInterface+0x28>)
 8010444:	4905      	ldr	r1, [pc, #20]	; (801045c <_SetInterface+0x2c>)
 8010446:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 801044a:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 801044e:	4770      	bx	lr
 8010450:	0801040d 	.word	0x0801040d
 8010454:	08010425 	.word	0x08010425
 8010458:	080103f5 	.word	0x080103f5
 801045c:	08010419 	.word	0x08010419

08010460 <_ReadRect_16bpp_B16_I>:
 8010460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010462:	b087      	sub	sp, #28
 8010464:	6884      	ldr	r4, [r0, #8]
 8010466:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010468:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801046a:	9700      	str	r7, [sp, #0]
 801046c:	1a58      	subs	r0, r3, r1
 801046e:	1abd      	subs	r5, r7, r2
 8010470:	3001      	adds	r0, #1
 8010472:	3501      	adds	r5, #1
 8010474:	4345      	muls	r5, r0
 8010476:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 801047a:	4620      	mov	r0, r4
 801047c:	47b8      	blx	r7
 801047e:	202e      	movs	r0, #46	; 0x2e
 8010480:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8010484:	4798      	blx	r3
 8010486:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 801048a:	6a21      	ldr	r1, [r4, #32]
 801048c:	a802      	add	r0, sp, #8
 801048e:	4790      	blx	r2
 8010490:	2102      	movs	r1, #2
 8010492:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8010496:	a802      	add	r0, sp, #8
 8010498:	4798      	blx	r3
 801049a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801049e:	f401 407c 	and.w	r0, r1, #64512	; 0xfc00
 80104a2:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 80104a6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80104aa:	ea42 1350 	orr.w	r3, r2, r0, lsr #5
 80104ae:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80104b2:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
 80104b6:	3d01      	subs	r5, #1
 80104b8:	f826 2b02 	strh.w	r2, [r6], #2
 80104bc:	d1e8      	bne.n	8010490 <_ReadRect_16bpp_B16_I+0x30>
 80104be:	b007      	add	sp, #28
 80104c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080104c2 <_ReadRect_16bpp_B8>:
 80104c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104c4:	b085      	sub	sp, #20
 80104c6:	6884      	ldr	r4, [r0, #8]
 80104c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80104ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80104cc:	9700      	str	r7, [sp, #0]
 80104ce:	1a58      	subs	r0, r3, r1
 80104d0:	1abd      	subs	r5, r7, r2
 80104d2:	3001      	adds	r0, #1
 80104d4:	3501      	adds	r5, #1
 80104d6:	4345      	muls	r5, r0
 80104d8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80104dc:	4620      	mov	r0, r4
 80104de:	47b8      	blx	r7
 80104e0:	202e      	movs	r0, #46	; 0x2e
 80104e2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80104e6:	4798      	blx	r3
 80104e8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 80104ec:	6a21      	ldr	r1, [r4, #32]
 80104ee:	a802      	add	r0, sp, #8
 80104f0:	4790      	blx	r2
 80104f2:	2103      	movs	r1, #3
 80104f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80104f8:	a802      	add	r0, sp, #8
 80104fa:	4798      	blx	r3
 80104fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010500:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8010504:	08d3      	lsrs	r3, r2, #3
 8010506:	0888      	lsrs	r0, r1, #2
 8010508:	f89d 200a 	ldrb.w	r2, [sp, #10]
 801050c:	02d9      	lsls	r1, r3, #11
 801050e:	ea41 1040 	orr.w	r0, r1, r0, lsl #5
 8010512:	ea40 03d2 	orr.w	r3, r0, r2, lsr #3
 8010516:	3d01      	subs	r5, #1
 8010518:	f826 3b02 	strh.w	r3, [r6], #2
 801051c:	d1e9      	bne.n	80104f2 <_ReadRect_16bpp_B8+0x30>
 801051e:	b005      	add	sp, #20
 8010520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010524 <GUIDRV_FlexColor_SetFunc66709>:
 8010524:	b510      	push	{r4, lr}
 8010526:	4604      	mov	r4, r0
 8010528:	f000 fda8 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 801052c:	68a3      	ldr	r3, [r4, #8]
 801052e:	4a12      	ldr	r2, [pc, #72]	; (8010578 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 8010530:	4912      	ldr	r1, [pc, #72]	; (801057c <GUIDRV_FlexColor_SetFunc66709+0x58>)
 8010532:	4813      	ldr	r0, [pc, #76]	; (8010580 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 8010534:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8010538:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 801053c:	4a11      	ldr	r2, [pc, #68]	; (8010584 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 801053e:	4912      	ldr	r1, [pc, #72]	; (8010588 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 8010540:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 8010544:	2000      	movs	r0, #0
 8010546:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801054a:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
 801054e:	680a      	ldr	r2, [r1, #0]
 8010550:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 8010554:	480d      	ldr	r0, [pc, #52]	; (801058c <GUIDRV_FlexColor_SetFunc66709+0x68>)
 8010556:	490e      	ldr	r1, [pc, #56]	; (8010590 <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 8010558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 801055c:	6802      	ldr	r2, [r0, #0]
 801055e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8010562:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 8010564:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8010568:	4a0a      	ldr	r2, [pc, #40]	; (8010594 <GUIDRV_FlexColor_SetFunc66709+0x70>)
 801056a:	f021 0003 	bic.w	r0, r1, #3
 801056e:	84d8      	strh	r0, [r3, #38]	; 0x26
 8010570:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8010574:	bd10      	pop	{r4, pc}
 8010576:	bf00      	nop
 8010578:	080101f9 	.word	0x080101f9
 801057c:	08010345 	.word	0x08010345
 8010580:	0801029b 	.word	0x0801029b
 8010584:	08010381 	.word	0x08010381
 8010588:	200002ec 	.word	0x200002ec
 801058c:	200002f0 	.word	0x200002f0
 8010590:	080104c3 	.word	0x080104c3
 8010594:	08010431 	.word	0x08010431

08010598 <_ReadData>:
 8010598:	b508      	push	{r3, lr}
 801059a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 801059e:	4798      	blx	r3
 80105a0:	bd08      	pop	{r3, pc}

080105a2 <_WriteData>:
 80105a2:	b508      	push	{r3, lr}
 80105a4:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80105a8:	b288      	uxth	r0, r1
 80105aa:	4798      	blx	r3
 80105ac:	bd08      	pop	{r3, pc}
	...

080105b0 <_DrawBitmap>:
 80105b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b4:	b08d      	sub	sp, #52	; 0x34
 80105b6:	469a      	mov	sl, r3
 80105b8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80105ba:	6884      	ldr	r4, [r0, #8]
 80105bc:	9009      	str	r0, [sp, #36]	; 0x24
 80105be:	1e6b      	subs	r3, r5, #1
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	9108      	str	r1, [sp, #32]
 80105c4:	920a      	str	r2, [sp, #40]	; 0x28
 80105c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80105c8:	d903      	bls.n	80105d2 <_DrawBitmap+0x22>
 80105ca:	2d04      	cmp	r5, #4
 80105cc:	d001      	beq.n	80105d2 <_DrawBitmap+0x22>
 80105ce:	2d08      	cmp	r5, #8
 80105d0:	d106      	bne.n	80105e0 <_DrawBitmap+0x30>
 80105d2:	4891      	ldr	r0, [pc, #580]	; (8010818 <_DrawBitmap+0x268>)
 80105d4:	6801      	ldr	r1, [r0, #0]
 80105d6:	7c0a      	ldrb	r2, [r1, #16]
 80105d8:	f002 0703 	and.w	r7, r2, #3
 80105dc:	2f02      	cmp	r7, #2
 80105de:	d010      	beq.n	8010602 <_DrawBitmap+0x52>
 80105e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80105e2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80105e4:	9d08      	ldr	r5, [sp, #32]
 80105e6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80105e8:	183a      	adds	r2, r7, r0
 80105ea:	1929      	adds	r1, r5, r4
 80105ec:	1e55      	subs	r5, r2, #1
 80105ee:	9500      	str	r5, [sp, #0]
 80105f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80105f2:	eb01 030a 	add.w	r3, r1, sl
 80105f6:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 80105fa:	4628      	mov	r0, r5
 80105fc:	463a      	mov	r2, r7
 80105fe:	3b01      	subs	r3, #1
 8010600:	47a0      	blx	r4
 8010602:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010606:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010608:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801060a:	ebc7 010b 	rsb	r1, r7, fp
 801060e:	42a1      	cmp	r1, r4
 8010610:	f280 825b 	bge.w	8010aca <_DrawBitmap+0x51a>
 8010614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010616:	1e5f      	subs	r7, r3, #1
 8010618:	2f0f      	cmp	r7, #15
 801061a:	f200 824f 	bhi.w	8010abc <_DrawBitmap+0x50c>
 801061e:	e8df f017 	tbh	[pc, r7, lsl #1]
 8010622:	0010      	.short	0x0010
 8010624:	024d00ba 	.word	0x024d00ba
 8010628:	024d0145 	.word	0x024d0145
 801062c:	024d024d 	.word	0x024d024d
 8010630:	024d01df 	.word	0x024d01df
 8010634:	024d024d 	.word	0x024d024d
 8010638:	024d024d 	.word	0x024d024d
 801063c:	024d024d 	.word	0x024d024d
 8010640:	0247      	.short	0x0247
 8010642:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010644:	4d74      	ldr	r5, [pc, #464]	; (8010818 <_DrawBitmap+0x268>)
 8010646:	6872      	ldr	r2, [r6, #4]
 8010648:	6837      	ldr	r7, [r6, #0]
 801064a:	682e      	ldr	r6, [r5, #0]
 801064c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801064e:	9207      	str	r2, [sp, #28]
 8010650:	9808      	ldr	r0, [sp, #32]
 8010652:	7c32      	ldrb	r2, [r6, #16]
 8010654:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010656:	1843      	adds	r3, r0, r1
 8010658:	f002 0103 	and.w	r1, r2, #3
 801065c:	2902      	cmp	r1, #2
 801065e:	68a4      	ldr	r4, [r4, #8]
 8010660:	9305      	str	r3, [sp, #20]
 8010662:	d01d      	beq.n	80106a0 <_DrawBitmap+0xf0>
 8010664:	2903      	cmp	r1, #3
 8010666:	d070      	beq.n	801074a <_DrawBitmap+0x19a>
 8010668:	2901      	cmp	r1, #1
 801066a:	d06e      	beq.n	801074a <_DrawBitmap+0x19a>
 801066c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801066e:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8010672:	4656      	mov	r6, sl
 8010674:	f898 1000 	ldrb.w	r1, [r8]
 8010678:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 801067c:	2280      	movs	r2, #128	; 0x80
 801067e:	fa42 f205 	asr.w	r2, r2, r5
 8010682:	4211      	tst	r1, r2
 8010684:	bf16      	itet	ne
 8010686:	9907      	ldrne	r1, [sp, #28]
 8010688:	b2b8      	uxtheq	r0, r7
 801068a:	b288      	uxthne	r0, r1
 801068c:	3501      	adds	r5, #1
 801068e:	4798      	blx	r3
 8010690:	2d08      	cmp	r5, #8
 8010692:	bf04      	itt	eq
 8010694:	f108 0801 	addeq.w	r8, r8, #1
 8010698:	2500      	moveq	r5, #0
 801069a:	3e01      	subs	r6, #1
 801069c:	d1ea      	bne.n	8010674 <_DrawBitmap+0xc4>
 801069e:	e20d      	b.n	8010abc <_DrawBitmap+0x50c>
 80106a0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80106a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80106a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80106a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80106ac:	9606      	str	r6, [sp, #24]
 80106ae:	2500      	movs	r5, #0
 80106b0:	9203      	str	r2, [sp, #12]
 80106b2:	464e      	mov	r6, r9
 80106b4:	462b      	mov	r3, r5
 80106b6:	9803      	ldr	r0, [sp, #12]
 80106b8:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80106bc:	7801      	ldrb	r1, [r0, #0]
 80106be:	fa4c f708 	asr.w	r7, ip, r8
 80106c2:	ea11 0c07 	ands.w	ip, r1, r7
 80106c6:	d00b      	beq.n	80106e0 <_DrawBitmap+0x130>
 80106c8:	b913      	cbnz	r3, 80106d0 <_DrawBitmap+0x120>
 80106ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80106cc:	46b1      	mov	r9, r6
 80106ce:	9006      	str	r0, [sp, #24]
 80106d0:	9906      	ldr	r1, [sp, #24]
 80106d2:	9b07      	ldr	r3, [sp, #28]
 80106d4:	f821 3b02 	strh.w	r3, [r1], #2
 80106d8:	3501      	adds	r5, #1
 80106da:	9106      	str	r1, [sp, #24]
 80106dc:	2301      	movs	r3, #1
 80106de:	e017      	b.n	8010710 <_DrawBitmap+0x160>
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d114      	bne.n	801070e <_DrawBitmap+0x15e>
 80106e4:	f8cd b000 	str.w	fp, [sp]
 80106e8:	1e73      	subs	r3, r6, #1
 80106ea:	f8cd c010 	str.w	ip, [sp, #16]
 80106ee:	4620      	mov	r0, r4
 80106f0:	4649      	mov	r1, r9
 80106f2:	465a      	mov	r2, fp
 80106f4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80106f8:	47b8      	blx	r7
 80106fa:	4629      	mov	r1, r5
 80106fc:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8010700:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010702:	4790      	blx	r2
 8010704:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010708:	4665      	mov	r5, ip
 801070a:	4663      	mov	r3, ip
 801070c:	e000      	b.n	8010710 <_DrawBitmap+0x160>
 801070e:	4663      	mov	r3, ip
 8010710:	f108 0801 	add.w	r8, r8, #1
 8010714:	3601      	adds	r6, #1
 8010716:	f1b8 0f08 	cmp.w	r8, #8
 801071a:	d104      	bne.n	8010726 <_DrawBitmap+0x176>
 801071c:	9f03      	ldr	r7, [sp, #12]
 801071e:	1c7a      	adds	r2, r7, #1
 8010720:	9203      	str	r2, [sp, #12]
 8010722:	f04f 0800 	mov.w	r8, #0
 8010726:	9805      	ldr	r0, [sp, #20]
 8010728:	eb00 010a 	add.w	r1, r0, sl
 801072c:	42b1      	cmp	r1, r6
 801072e:	d1c2      	bne.n	80106b6 <_DrawBitmap+0x106>
 8010730:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010734:	18c3      	adds	r3, r0, r3
 8010736:	2d00      	cmp	r5, #0
 8010738:	f000 81c0 	beq.w	8010abc <_DrawBitmap+0x50c>
 801073c:	f8cd b000 	str.w	fp, [sp]
 8010740:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8010744:	4620      	mov	r0, r4
 8010746:	4649      	mov	r1, r9
 8010748:	e143      	b.n	80109d2 <_DrawBitmap+0x422>
 801074a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801074c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801074e:	46d0      	mov	r8, sl
 8010750:	2380      	movs	r3, #128	; 0x80
 8010752:	9805      	ldr	r0, [sp, #20]
 8010754:	782f      	ldrb	r7, [r5, #0]
 8010756:	fa43 f306 	asr.w	r3, r3, r6
 801075a:	eb00 090a 	add.w	r9, r0, sl
 801075e:	421f      	tst	r7, r3
 8010760:	ebc8 0909 	rsb	r9, r8, r9
 8010764:	d00e      	beq.n	8010784 <_DrawBitmap+0x1d4>
 8010766:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
 801076a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801076c:	4649      	mov	r1, r9
 801076e:	465a      	mov	r2, fp
 8010770:	47b8      	blx	r7
 8010772:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010774:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 8010778:	ea80 0301 	eor.w	r3, r0, r1
 801077c:	465a      	mov	r2, fp
 801077e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010780:	4649      	mov	r1, r9
 8010782:	47b8      	blx	r7
 8010784:	3601      	adds	r6, #1
 8010786:	2e08      	cmp	r6, #8
 8010788:	d101      	bne.n	801078e <_DrawBitmap+0x1de>
 801078a:	3501      	adds	r5, #1
 801078c:	2600      	movs	r6, #0
 801078e:	f1b8 0801 	subs.w	r8, r8, #1
 8010792:	d1dd      	bne.n	8010750 <_DrawBitmap+0x1a0>
 8010794:	e192      	b.n	8010abc <_DrawBitmap+0x50c>
 8010796:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010798:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801079a:	68a4      	ldr	r4, [r4, #8]
 801079c:	2a00      	cmp	r2, #0
 801079e:	f000 818d 	beq.w	8010abc <_DrawBitmap+0x50c>
 80107a2:	491d      	ldr	r1, [pc, #116]	; (8010818 <_DrawBitmap+0x268>)
 80107a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80107a6:	680f      	ldr	r7, [r1, #0]
 80107a8:	7803      	ldrb	r3, [r0, #0]
 80107aa:	7c3d      	ldrb	r5, [r7, #16]
 80107ac:	9305      	str	r3, [sp, #20]
 80107ae:	f015 0203 	ands.w	r2, r5, #3
 80107b2:	d012      	beq.n	80107da <_DrawBitmap+0x22a>
 80107b4:	2a02      	cmp	r2, #2
 80107b6:	f040 8181 	bne.w	8010abc <_DrawBitmap+0x50c>
 80107ba:	9e08      	ldr	r6, [sp, #32]
 80107bc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80107be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80107c0:	9919      	ldr	r1, [sp, #100]	; 0x64
 80107c2:	9307      	str	r3, [sp, #28]
 80107c4:	eb06 0900 	add.w	r9, r6, r0
 80107c8:	2500      	movs	r5, #0
 80107ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80107ce:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80107d2:	9106      	str	r1, [sp, #24]
 80107d4:	464e      	mov	r6, r9
 80107d6:	462b      	mov	r3, r5
 80107d8:	e040      	b.n	801085c <_DrawBitmap+0x2ac>
 80107da:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80107dc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80107de:	4656      	mov	r6, sl
 80107e0:	f1c5 0103 	rsb	r1, r5, #3
 80107e4:	004b      	lsls	r3, r1, #1
 80107e6:	f1c3 0006 	rsb	r0, r3, #6
 80107ea:	22c0      	movs	r2, #192	; 0xc0
 80107ec:	9905      	ldr	r1, [sp, #20]
 80107ee:	fa42 f200 	asr.w	r2, r2, r0
 80107f2:	400a      	ands	r2, r1
 80107f4:	fa22 f203 	lsr.w	r2, r2, r3
 80107f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80107fa:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80107fe:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
 8010802:	3501      	adds	r5, #1
 8010804:	4798      	blx	r3
 8010806:	2d04      	cmp	r5, #4
 8010808:	d103      	bne.n	8010812 <_DrawBitmap+0x262>
 801080a:	787d      	ldrb	r5, [r7, #1]
 801080c:	3701      	adds	r7, #1
 801080e:	9505      	str	r5, [sp, #20]
 8010810:	2500      	movs	r5, #0
 8010812:	3e01      	subs	r6, #1
 8010814:	d1e4      	bne.n	80107e0 <_DrawBitmap+0x230>
 8010816:	e151      	b.n	8010abc <_DrawBitmap+0x50c>
 8010818:	20000308 	.word	0x20000308
 801081c:	b913      	cbnz	r3, 8010824 <_DrawBitmap+0x274>
 801081e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8010820:	9603      	str	r6, [sp, #12]
 8010822:	9107      	str	r1, [sp, #28]
 8010824:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010826:	9f07      	ldr	r7, [sp, #28]
 8010828:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
 801082c:	f827 3b02 	strh.w	r3, [r7], #2
 8010830:	3501      	adds	r5, #1
 8010832:	9707      	str	r7, [sp, #28]
 8010834:	2301      	movs	r3, #1
 8010836:	f108 0801 	add.w	r8, r8, #1
 801083a:	3601      	adds	r6, #1
 801083c:	f1b8 0f04 	cmp.w	r8, #4
 8010840:	d107      	bne.n	8010852 <_DrawBitmap+0x2a2>
 8010842:	9a06      	ldr	r2, [sp, #24]
 8010844:	9806      	ldr	r0, [sp, #24]
 8010846:	7851      	ldrb	r1, [r2, #1]
 8010848:	1c47      	adds	r7, r0, #1
 801084a:	9105      	str	r1, [sp, #20]
 801084c:	9706      	str	r7, [sp, #24]
 801084e:	f04f 0800 	mov.w	r8, #0
 8010852:	eb09 020a 	add.w	r2, r9, sl
 8010856:	42b2      	cmp	r2, r6
 8010858:	f000 80b0 	beq.w	80109bc <_DrawBitmap+0x40c>
 801085c:	f1c8 0703 	rsb	r7, r8, #3
 8010860:	007a      	lsls	r2, r7, #1
 8010862:	f1c2 0006 	rsb	r0, r2, #6
 8010866:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 801086a:	9f05      	ldr	r7, [sp, #20]
 801086c:	fa4c f100 	asr.w	r1, ip, r0
 8010870:	ea01 0007 	and.w	r0, r1, r7
 8010874:	fa30 fc02 	lsrs.w	ip, r0, r2
 8010878:	d1d0      	bne.n	801081c <_DrawBitmap+0x26c>
 801087a:	2b01      	cmp	r3, #1
 801087c:	d114      	bne.n	80108a8 <_DrawBitmap+0x2f8>
 801087e:	f8cd b000 	str.w	fp, [sp]
 8010882:	1e73      	subs	r3, r6, #1
 8010884:	f8cd c010 	str.w	ip, [sp, #16]
 8010888:	4620      	mov	r0, r4
 801088a:	9903      	ldr	r1, [sp, #12]
 801088c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8010890:	465a      	mov	r2, fp
 8010892:	47b8      	blx	r7
 8010894:	4629      	mov	r1, r5
 8010896:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 801089a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801089c:	4790      	blx	r2
 801089e:	f8dd c010 	ldr.w	ip, [sp, #16]
 80108a2:	4665      	mov	r5, ip
 80108a4:	4663      	mov	r3, ip
 80108a6:	e7c6      	b.n	8010836 <_DrawBitmap+0x286>
 80108a8:	4663      	mov	r3, ip
 80108aa:	e7c4      	b.n	8010836 <_DrawBitmap+0x286>
 80108ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80108b0:	6884      	ldr	r4, [r0, #8]
 80108b2:	2a00      	cmp	r2, #0
 80108b4:	f000 8102 	beq.w	8010abc <_DrawBitmap+0x50c>
 80108b8:	4b85      	ldr	r3, [pc, #532]	; (8010ad0 <_DrawBitmap+0x520>)
 80108ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80108bc:	681f      	ldr	r7, [r3, #0]
 80108be:	7829      	ldrb	r1, [r5, #0]
 80108c0:	7c38      	ldrb	r0, [r7, #16]
 80108c2:	9105      	str	r1, [sp, #20]
 80108c4:	f010 0203 	ands.w	r2, r0, #3
 80108c8:	d012      	beq.n	80108f0 <_DrawBitmap+0x340>
 80108ca:	2a02      	cmp	r2, #2
 80108cc:	f040 80f6 	bne.w	8010abc <_DrawBitmap+0x50c>
 80108d0:	9e08      	ldr	r6, [sp, #32]
 80108d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80108d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80108d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80108d8:	9306      	str	r3, [sp, #24]
 80108da:	eb06 0905 	add.w	r9, r6, r5
 80108de:	2500      	movs	r5, #0
 80108e0:	9107      	str	r1, [sp, #28]
 80108e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80108e6:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80108ea:	464e      	mov	r6, r9
 80108ec:	462b      	mov	r3, r5
 80108ee:	e03d      	b.n	801096c <_DrawBitmap+0x3bc>
 80108f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80108f2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80108f4:	4656      	mov	r6, sl
 80108f6:	f1c5 0301 	rsb	r3, r5, #1
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	f1c3 0004 	rsb	r0, r3, #4
 8010900:	21f0      	movs	r1, #240	; 0xf0
 8010902:	fa41 f200 	asr.w	r2, r1, r0
 8010906:	9805      	ldr	r0, [sp, #20]
 8010908:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801090a:	4002      	ands	r2, r0
 801090c:	fa22 f203 	lsr.w	r2, r2, r3
 8010910:	3501      	adds	r5, #1
 8010912:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8010916:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 801091a:	4798      	blx	r3
 801091c:	2d02      	cmp	r5, #2
 801091e:	d103      	bne.n	8010928 <_DrawBitmap+0x378>
 8010920:	787d      	ldrb	r5, [r7, #1]
 8010922:	3701      	adds	r7, #1
 8010924:	9505      	str	r5, [sp, #20]
 8010926:	2500      	movs	r5, #0
 8010928:	3e01      	subs	r6, #1
 801092a:	d1e4      	bne.n	80108f6 <_DrawBitmap+0x346>
 801092c:	e0c6      	b.n	8010abc <_DrawBitmap+0x50c>
 801092e:	b913      	cbnz	r3, 8010936 <_DrawBitmap+0x386>
 8010930:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010932:	9603      	str	r6, [sp, #12]
 8010934:	9007      	str	r0, [sp, #28]
 8010936:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010938:	9f07      	ldr	r7, [sp, #28]
 801093a:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 801093e:	f827 3b02 	strh.w	r3, [r7], #2
 8010942:	3501      	adds	r5, #1
 8010944:	9707      	str	r7, [sp, #28]
 8010946:	2301      	movs	r3, #1
 8010948:	f108 0801 	add.w	r8, r8, #1
 801094c:	3601      	adds	r6, #1
 801094e:	f1b8 0f02 	cmp.w	r8, #2
 8010952:	d107      	bne.n	8010964 <_DrawBitmap+0x3b4>
 8010954:	9a06      	ldr	r2, [sp, #24]
 8010956:	9906      	ldr	r1, [sp, #24]
 8010958:	7850      	ldrb	r0, [r2, #1]
 801095a:	1c4f      	adds	r7, r1, #1
 801095c:	9005      	str	r0, [sp, #20]
 801095e:	9706      	str	r7, [sp, #24]
 8010960:	f04f 0800 	mov.w	r8, #0
 8010964:	eb09 020a 	add.w	r2, r9, sl
 8010968:	42b2      	cmp	r2, r6
 801096a:	d027      	beq.n	80109bc <_DrawBitmap+0x40c>
 801096c:	f1c8 0701 	rsb	r7, r8, #1
 8010970:	00b8      	lsls	r0, r7, #2
 8010972:	f1c0 0204 	rsb	r2, r0, #4
 8010976:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 801097a:	9f05      	ldr	r7, [sp, #20]
 801097c:	fa4c f102 	asr.w	r1, ip, r2
 8010980:	ea01 0207 	and.w	r2, r1, r7
 8010984:	fa32 fc00 	lsrs.w	ip, r2, r0
 8010988:	d1d1      	bne.n	801092e <_DrawBitmap+0x37e>
 801098a:	2b01      	cmp	r3, #1
 801098c:	d114      	bne.n	80109b8 <_DrawBitmap+0x408>
 801098e:	f8cd b000 	str.w	fp, [sp]
 8010992:	1e73      	subs	r3, r6, #1
 8010994:	f8cd c010 	str.w	ip, [sp, #16]
 8010998:	4620      	mov	r0, r4
 801099a:	9903      	ldr	r1, [sp, #12]
 801099c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80109a0:	465a      	mov	r2, fp
 80109a2:	47b8      	blx	r7
 80109a4:	4629      	mov	r1, r5
 80109a6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 80109aa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80109ac:	4790      	blx	r2
 80109ae:	f8dd c010 	ldr.w	ip, [sp, #16]
 80109b2:	4665      	mov	r5, ip
 80109b4:	4663      	mov	r3, ip
 80109b6:	e7c7      	b.n	8010948 <_DrawBitmap+0x398>
 80109b8:	4663      	mov	r3, ip
 80109ba:	e7c5      	b.n	8010948 <_DrawBitmap+0x398>
 80109bc:	f10a 33ff 	add.w	r3, sl, #4294967295
 80109c0:	444b      	add	r3, r9
 80109c2:	2d00      	cmp	r5, #0
 80109c4:	d07a      	beq.n	8010abc <_DrawBitmap+0x50c>
 80109c6:	f8cd b000 	str.w	fp, [sp]
 80109ca:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80109ce:	9903      	ldr	r1, [sp, #12]
 80109d0:	4620      	mov	r0, r4
 80109d2:	465a      	mov	r2, fp
 80109d4:	47b0      	blx	r6
 80109d6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 80109da:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80109dc:	4629      	mov	r1, r5
 80109de:	e06c      	b.n	8010aba <_DrawBitmap+0x50a>
 80109e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80109e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80109e4:	68ac      	ldr	r4, [r5, #8]
 80109e6:	2900      	cmp	r1, #0
 80109e8:	d068      	beq.n	8010abc <_DrawBitmap+0x50c>
 80109ea:	4b39      	ldr	r3, [pc, #228]	; (8010ad0 <_DrawBitmap+0x520>)
 80109ec:	681f      	ldr	r7, [r3, #0]
 80109ee:	7c38      	ldrb	r0, [r7, #16]
 80109f0:	f010 0203 	ands.w	r2, r0, #3
 80109f4:	d009      	beq.n	8010a0a <_DrawBitmap+0x45a>
 80109f6:	2a02      	cmp	r2, #2
 80109f8:	d160      	bne.n	8010abc <_DrawBitmap+0x50c>
 80109fa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80109fe:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8010a02:	2600      	movs	r6, #0
 8010a04:	464f      	mov	r7, r9
 8010a06:	4633      	mov	r3, r6
 8010a08:	e020      	b.n	8010a4c <_DrawBitmap+0x49c>
 8010a0a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8010a0c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010a0e:	eb01 000a 	add.w	r0, r1, sl
 8010a12:	1b42      	subs	r2, r0, r5
 8010a14:	2a00      	cmp	r2, #0
 8010a16:	dd51      	ble.n	8010abc <_DrawBitmap+0x50c>
 8010a18:	f815 1b01 	ldrb.w	r1, [r5], #1
 8010a1c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8010a1e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8010a22:	f837 0021 	ldrh.w	r0, [r7, r1, lsl #2]
 8010a26:	4798      	blx	r3
 8010a28:	e7f0      	b.n	8010a0c <_DrawBitmap+0x45c>
 8010a2a:	b913      	cbnz	r3, 8010a32 <_DrawBitmap+0x482>
 8010a2c:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8010a30:	46b9      	mov	r9, r7
 8010a32:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010a34:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
 8010a38:	f82c 0b02 	strh.w	r0, [ip], #2
 8010a3c:	3601      	adds	r6, #1
 8010a3e:	2301      	movs	r3, #1
 8010a40:	9d08      	ldr	r5, [sp, #32]
 8010a42:	3701      	adds	r7, #1
 8010a44:	eb0a 0205 	add.w	r2, sl, r5
 8010a48:	42ba      	cmp	r2, r7
 8010a4a:	d020      	beq.n	8010a8e <_DrawBitmap+0x4de>
 8010a4c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8010a4e:	9908      	ldr	r1, [sp, #32]
 8010a50:	1a68      	subs	r0, r5, r1
 8010a52:	f810 8007 	ldrb.w	r8, [r0, r7]
 8010a56:	f1b8 0f00 	cmp.w	r8, #0
 8010a5a:	d1e6      	bne.n	8010a2a <_DrawBitmap+0x47a>
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d114      	bne.n	8010a8a <_DrawBitmap+0x4da>
 8010a60:	f8cd b000 	str.w	fp, [sp]
 8010a64:	1e7b      	subs	r3, r7, #1
 8010a66:	f8cd c010 	str.w	ip, [sp, #16]
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	4649      	mov	r1, r9
 8010a6e:	465a      	mov	r2, fp
 8010a70:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8010a74:	47a8      	blx	r5
 8010a76:	4631      	mov	r1, r6
 8010a78:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8010a7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010a7e:	4790      	blx	r2
 8010a80:	4646      	mov	r6, r8
 8010a82:	4643      	mov	r3, r8
 8010a84:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010a88:	e7da      	b.n	8010a40 <_DrawBitmap+0x490>
 8010a8a:	4643      	mov	r3, r8
 8010a8c:	e7d8      	b.n	8010a40 <_DrawBitmap+0x490>
 8010a8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010a92:	18eb      	adds	r3, r5, r3
 8010a94:	b196      	cbz	r6, 8010abc <_DrawBitmap+0x50c>
 8010a96:	f8cd b000 	str.w	fp, [sp]
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	4649      	mov	r1, r9
 8010a9e:	465a      	mov	r2, fp
 8010aa0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8010aa4:	47b8      	blx	r7
 8010aa6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8010aaa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010aac:	4631      	mov	r1, r6
 8010aae:	e004      	b.n	8010aba <_DrawBitmap+0x50a>
 8010ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010ab2:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
 8010ab6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010ab8:	4651      	mov	r1, sl
 8010aba:	4790      	blx	r2
 8010abc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8010abe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010ac0:	1967      	adds	r7, r4, r5
 8010ac2:	9719      	str	r7, [sp, #100]	; 0x64
 8010ac4:	f10b 0b01 	add.w	fp, fp, #1
 8010ac8:	e59d      	b.n	8010606 <_DrawBitmap+0x56>
 8010aca:	b00d      	add	sp, #52	; 0x34
 8010acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad0:	20000308 	.word	0x20000308

08010ad4 <_FillRect>:
 8010ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	4f38      	ldr	r7, [pc, #224]	; (8010bbc <_FillRect+0xe8>)
 8010ada:	6884      	ldr	r4, [r0, #8]
 8010adc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8010ae0:	4682      	mov	sl, r0
 8010ae2:	6838      	ldr	r0, [r7, #0]
 8010ae4:	7c00      	ldrb	r0, [r0, #16]
 8010ae6:	07c0      	lsls	r0, r0, #31
 8010ae8:	460e      	mov	r6, r1
 8010aea:	4615      	mov	r5, r2
 8010aec:	4698      	mov	r8, r3
 8010aee:	d53d      	bpl.n	8010b6c <_FillRect+0x98>
 8010af0:	454d      	cmp	r5, r9
 8010af2:	dc61      	bgt.n	8010bb8 <_FillRect+0xe4>
 8010af4:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 8010af8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8010afa:	f1bc 0f00 	cmp.w	ip, #0
 8010afe:	d101      	bne.n	8010b04 <_FillRect+0x30>
 8010b00:	46b3      	mov	fp, r6
 8010b02:	e007      	b.n	8010b14 <_FillRect+0x40>
 8010b04:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8010b08:	4650      	mov	r0, sl
 8010b0a:	4631      	mov	r1, r6
 8010b0c:	462a      	mov	r2, r5
 8010b0e:	4643      	mov	r3, r8
 8010b10:	47e0      	blx	ip
 8010b12:	e00d      	b.n	8010b30 <_FillRect+0x5c>
 8010b14:	45c3      	cmp	fp, r8
 8010b16:	dc0a      	bgt.n	8010b2e <_FillRect+0x5a>
 8010b18:	4659      	mov	r1, fp
 8010b1a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8010b1e:	4650      	mov	r0, sl
 8010b20:	462a      	mov	r2, r5
 8010b22:	4798      	blx	r3
 8010b24:	f10b 0b01 	add.w	fp, fp, #1
 8010b28:	f827 0b02 	strh.w	r0, [r7], #2
 8010b2c:	e7f2      	b.n	8010b14 <_FillRect+0x40>
 8010b2e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8010b30:	ebc6 0108 	rsb	r1, r6, r8
 8010b34:	f101 0b01 	add.w	fp, r1, #1
 8010b38:	3f02      	subs	r7, #2
 8010b3a:	465b      	mov	r3, fp
 8010b3c:	b13b      	cbz	r3, 8010b4e <_FillRect+0x7a>
 8010b3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010b40:	8879      	ldrh	r1, [r7, #2]
 8010b42:	ea81 0200 	eor.w	r2, r1, r0
 8010b46:	f827 2f02 	strh.w	r2, [r7, #2]!
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	e7f6      	b.n	8010b3c <_FillRect+0x68>
 8010b4e:	9500      	str	r5, [sp, #0]
 8010b50:	462a      	mov	r2, r5
 8010b52:	4620      	mov	r0, r4
 8010b54:	4631      	mov	r1, r6
 8010b56:	4643      	mov	r3, r8
 8010b58:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8010b5c:	47b8      	blx	r7
 8010b5e:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8010b62:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010b64:	4659      	mov	r1, fp
 8010b66:	4790      	blx	r2
 8010b68:	3501      	adds	r5, #1
 8010b6a:	e7c1      	b.n	8010af0 <_FillRect+0x1c>
 8010b6c:	1a5e      	subs	r6, r3, r1
 8010b6e:	ebc2 0509 	rsb	r5, r2, r9
 8010b72:	1c70      	adds	r0, r6, #1
 8010b74:	f8cd 9000 	str.w	r9, [sp]
 8010b78:	3501      	adds	r5, #1
 8010b7a:	4345      	muls	r5, r0
 8010b7c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8010b80:	4620      	mov	r0, r4
 8010b82:	47b0      	blx	r6
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 8010b88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010b8a:	f8d1 8000 	ldr.w	r8, [r1]
 8010b8e:	2001      	movs	r0, #1
 8010b90:	b195      	cbz	r5, 8010bb8 <_FillRect+0xe4>
 8010b92:	2dfa      	cmp	r5, #250	; 0xfa
 8010b94:	bf34      	ite	cc
 8010b96:	462e      	movcc	r6, r5
 8010b98:	26fa      	movcs	r6, #250	; 0xfa
 8010b9a:	b128      	cbz	r0, 8010ba8 <_FillRect+0xd4>
 8010b9c:	4638      	mov	r0, r7
 8010b9e:	fa1f f188 	uxth.w	r1, r8
 8010ba2:	4632      	mov	r2, r6
 8010ba4:	f001 f829 	bl	8011bfa <GUI__memset16>
 8010ba8:	4638      	mov	r0, r7
 8010baa:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8010bae:	4631      	mov	r1, r6
 8010bb0:	4790      	blx	r2
 8010bb2:	1bad      	subs	r5, r5, r6
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	e7eb      	b.n	8010b90 <_FillRect+0xbc>
 8010bb8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bbc:	20000308 	.word	0x20000308

08010bc0 <GUIDRV_FlexColor_SetMode16bppC0B16>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	f000 fa5a 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 8010bc8:	68a4      	ldr	r4, [r4, #8]
 8010bca:	4b10      	ldr	r3, [pc, #64]	; (8010c0c <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 8010bcc:	4810      	ldr	r0, [pc, #64]	; (8010c10 <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 8010bce:	4911      	ldr	r1, [pc, #68]	; (8010c14 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 8010bd0:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8010bd4:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
 8010bd8:	4b0f      	ldr	r3, [pc, #60]	; (8010c18 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 8010bda:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
 8010bde:	4a0f      	ldr	r2, [pc, #60]	; (8010c1c <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 8010be0:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8010be4:	480e      	ldr	r0, [pc, #56]	; (8010c20 <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 8010be6:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 8010bea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8010bee:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8010bf2:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8010bfc:	2110      	movs	r1, #16
 8010bfe:	4790      	blx	r2
 8010c00:	4808      	ldr	r0, [pc, #32]	; (8010c24 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 8010c02:	2310      	movs	r3, #16
 8010c04:	63a3      	str	r3, [r4, #56]	; 0x38
 8010c06:	6460      	str	r0, [r4, #68]	; 0x44
 8010c08:	bd10      	pop	{r4, pc}
 8010c0a:	bf00      	nop
 8010c0c:	080105b1 	.word	0x080105b1
 8010c10:	08010ad5 	.word	0x08010ad5
 8010c14:	08010fc7 	.word	0x08010fc7
 8010c18:	08010599 	.word	0x08010599
 8010c1c:	08010f33 	.word	0x08010f33
 8010c20:	080105a3 	.word	0x080105a3
 8010c24:	080344ac 	.word	0x080344ac

08010c28 <_Log2PhysX_X0Y0S0>:
 8010c28:	4608      	mov	r0, r1
 8010c2a:	4770      	bx	lr

08010c2c <_Log2PhysX_X1Y0S0>:
 8010c2c:	6800      	ldr	r0, [r0, #0]
 8010c2e:	1a41      	subs	r1, r0, r1
 8010c30:	1e48      	subs	r0, r1, #1
 8010c32:	4770      	bx	lr

08010c34 <_Log2PhysX_X0Y1S0>:
 8010c34:	4608      	mov	r0, r1
 8010c36:	4770      	bx	lr

08010c38 <_Log2PhysX_X1Y1S0>:
 8010c38:	6800      	ldr	r0, [r0, #0]
 8010c3a:	1a41      	subs	r1, r0, r1
 8010c3c:	1e48      	subs	r0, r1, #1
 8010c3e:	4770      	bx	lr

08010c40 <_Log2PhysX_X0Y0S1>:
 8010c40:	4610      	mov	r0, r2
 8010c42:	4770      	bx	lr

08010c44 <_Log2PhysX_X1Y0S1>:
 8010c44:	6840      	ldr	r0, [r0, #4]
 8010c46:	1a81      	subs	r1, r0, r2
 8010c48:	1e48      	subs	r0, r1, #1
 8010c4a:	4770      	bx	lr

08010c4c <_Log2PhysX_X0Y1S1>:
 8010c4c:	4610      	mov	r0, r2
 8010c4e:	4770      	bx	lr

08010c50 <_Log2PhysX_X1Y1S1>:
 8010c50:	6840      	ldr	r0, [r0, #4]
 8010c52:	1a81      	subs	r1, r0, r2
 8010c54:	1e48      	subs	r0, r1, #1
 8010c56:	4770      	bx	lr

08010c58 <_Log2PhysY_X0Y0S0>:
 8010c58:	4610      	mov	r0, r2
 8010c5a:	4770      	bx	lr

08010c5c <_Log2PhysY_X1Y0S0>:
 8010c5c:	4610      	mov	r0, r2
 8010c5e:	4770      	bx	lr

08010c60 <_Log2PhysY_X0Y1S0>:
 8010c60:	6840      	ldr	r0, [r0, #4]
 8010c62:	1a81      	subs	r1, r0, r2
 8010c64:	1e48      	subs	r0, r1, #1
 8010c66:	4770      	bx	lr

08010c68 <_Log2PhysY_X1Y1S0>:
 8010c68:	6840      	ldr	r0, [r0, #4]
 8010c6a:	1a81      	subs	r1, r0, r2
 8010c6c:	1e48      	subs	r0, r1, #1
 8010c6e:	4770      	bx	lr

08010c70 <_Log2PhysY_X0Y0S1>:
 8010c70:	4608      	mov	r0, r1
 8010c72:	4770      	bx	lr

08010c74 <_Log2PhysY_X1Y0S1>:
 8010c74:	4608      	mov	r0, r1
 8010c76:	4770      	bx	lr

08010c78 <_Log2PhysY_X0Y1S1>:
 8010c78:	6800      	ldr	r0, [r0, #0]
 8010c7a:	1a41      	subs	r1, r0, r1
 8010c7c:	1e48      	subs	r0, r1, #1
 8010c7e:	4770      	bx	lr

08010c80 <_Log2PhysY_X1Y1S1>:
 8010c80:	6800      	ldr	r0, [r0, #0]
 8010c82:	1a41      	subs	r1, r0, r1
 8010c84:	1e48      	subs	r0, r1, #1
 8010c86:	4770      	bx	lr

08010c88 <_SetPixelIndex>:
 8010c88:	b510      	push	{r4, lr}
 8010c8a:	6884      	ldr	r4, [r0, #8]
 8010c8c:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8010c90:	47a0      	blx	r4
 8010c92:	bd10      	pop	{r4, pc}

08010c94 <_GetPixelIndex>:
 8010c94:	b508      	push	{r3, lr}
 8010c96:	6883      	ldr	r3, [r0, #8]
 8010c98:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8010c9c:	4798      	blx	r3
 8010c9e:	bd08      	pop	{r3, pc}

08010ca0 <_XorPixel>:
 8010ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	460f      	mov	r7, r1
 8010ca6:	4616      	mov	r6, r2
 8010ca8:	6885      	ldr	r5, [r0, #8]
 8010caa:	f7ff fff3 	bl	8010c94 <_GetPixelIndex>
 8010cae:	9001      	str	r0, [sp, #4]
 8010cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	4639      	mov	r1, r7
 8010cba:	4632      	mov	r2, r6
 8010cbc:	ea8e 0303 	eor.w	r3, lr, r3
 8010cc0:	f7ff ffe2 	bl	8010c88 <_SetPixelIndex>
 8010cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08010cc6 <_DrawHLine>:
 8010cc6:	b513      	push	{r0, r1, r4, lr}
 8010cc8:	6884      	ldr	r4, [r0, #8]
 8010cca:	9200      	str	r2, [sp, #0]
 8010ccc:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8010cd0:	47a0      	blx	r4
 8010cd2:	bd1c      	pop	{r2, r3, r4, pc}

08010cd4 <_DrawVLine>:
 8010cd4:	b513      	push	{r0, r1, r4, lr}
 8010cd6:	6884      	ldr	r4, [r0, #8]
 8010cd8:	9300      	str	r3, [sp, #0]
 8010cda:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8010cde:	460b      	mov	r3, r1
 8010ce0:	47a0      	blx	r4
 8010ce2:	bd1c      	pop	{r2, r3, r4, pc}

08010ce4 <_FillRect>:
 8010ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ce6:	9c06      	ldr	r4, [sp, #24]
 8010ce8:	6885      	ldr	r5, [r0, #8]
 8010cea:	9400      	str	r4, [sp, #0]
 8010cec:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8010cf0:	47a0      	blx	r4
 8010cf2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08010cf4 <_DrawBitmap>:
 8010cf4:	b530      	push	{r4, r5, lr}
 8010cf6:	b087      	sub	sp, #28
 8010cf8:	6885      	ldr	r5, [r0, #8]
 8010cfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010cfc:	9400      	str	r4, [sp, #0]
 8010cfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010d00:	9401      	str	r4, [sp, #4]
 8010d02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010d04:	9402      	str	r4, [sp, #8]
 8010d06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010d08:	9403      	str	r4, [sp, #12]
 8010d0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010d0c:	9404      	str	r4, [sp, #16]
 8010d0e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8010d10:	9405      	str	r4, [sp, #20]
 8010d12:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 8010d16:	47a0      	blx	r4
 8010d18:	b007      	add	sp, #28
 8010d1a:	bd30      	pop	{r4, r5, pc}

08010d1c <_GetDevFunc_SetRect>:
 8010d1c:	4770      	bx	lr
	...

08010d20 <_GetDevFunc_SetRectOutside>:
 8010d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d22:	9e07      	ldr	r6, [sp, #28]
 8010d24:	6884      	ldr	r4, [r0, #8]
 8010d26:	4d0b      	ldr	r5, [pc, #44]	; (8010d54 <_GetDevFunc_SetRectOutside+0x34>)
 8010d28:	b176      	cbz	r6, 8010d48 <_GetDevFunc_SetRectOutside+0x28>
 8010d2a:	6828      	ldr	r0, [r5, #0]
 8010d2c:	b988      	cbnz	r0, 8010d52 <_GetDevFunc_SetRectOutside+0x32>
 8010d2e:	9e06      	ldr	r6, [sp, #24]
 8010d30:	9600      	str	r6, [sp, #0]
 8010d32:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8010d36:	4620      	mov	r0, r4
 8010d38:	47b0      	blx	r6
 8010d3a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8010d3e:	4a06      	ldr	r2, [pc, #24]	; (8010d58 <_GetDevFunc_SetRectOutside+0x38>)
 8010d40:	6029      	str	r1, [r5, #0]
 8010d42:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 8010d46:	e004      	b.n	8010d52 <_GetDevFunc_SetRectOutside+0x32>
 8010d48:	682b      	ldr	r3, [r5, #0]
 8010d4a:	b113      	cbz	r3, 8010d52 <_GetDevFunc_SetRectOutside+0x32>
 8010d4c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8010d50:	602e      	str	r6, [r5, #0]
 8010d52:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8010d54:	2000e05c 	.word	0x2000e05c
 8010d58:	08010d1d 	.word	0x08010d1d

08010d5c <_ReadPixelCust_16bpp>:
 8010d5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010d5e:	b508      	push	{r3, lr}
 8010d60:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8010d64:	6990      	ldr	r0, [r2, #24]
 8010d66:	4798      	blx	r3
 8010d68:	bd08      	pop	{r3, pc}

08010d6a <_ReadPixelCust_18bpp>:
 8010d6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010d6c:	b508      	push	{r3, lr}
 8010d6e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8010d72:	6990      	ldr	r0, [r2, #24]
 8010d74:	4798      	blx	r3
 8010d76:	bd08      	pop	{r3, pc}

08010d78 <_ReadRectCust_16bpp>:
 8010d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010d7e:	6884      	ldr	r4, [r0, #8]
 8010d80:	9500      	str	r5, [sp, #0]
 8010d82:	4688      	mov	r8, r1
 8010d84:	4617      	mov	r7, r2
 8010d86:	4699      	mov	r9, r3
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8010d8e:	47b0      	blx	r6
 8010d90:	1bed      	subs	r5, r5, r7
 8010d92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010d94:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8010d98:	ebc8 0009 	rsb	r0, r8, r9
 8010d9c:	f100 0801 	add.w	r8, r0, #1
 8010da0:	1c6a      	adds	r2, r5, #1
 8010da2:	6988      	ldr	r0, [r1, #24]
 8010da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010da6:	fb02 f208 	mul.w	r2, r2, r8
 8010daa:	4798      	blx	r3
 8010dac:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08010db0 <_ReadRectCust_18bpp>:
 8010db0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010db4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010db6:	6884      	ldr	r4, [r0, #8]
 8010db8:	9500      	str	r5, [sp, #0]
 8010dba:	4688      	mov	r8, r1
 8010dbc:	4617      	mov	r7, r2
 8010dbe:	4699      	mov	r9, r3
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8010dc6:	47b0      	blx	r6
 8010dc8:	1bed      	subs	r5, r5, r7
 8010dca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010dcc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8010dd0:	ebc8 0009 	rsb	r0, r8, r9
 8010dd4:	f100 0801 	add.w	r8, r0, #1
 8010dd8:	1c6a      	adds	r2, r5, #1
 8010dda:	6988      	ldr	r0, [r1, #24]
 8010ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010dde:	fb02 f208 	mul.w	r2, r2, r8
 8010de2:	4798      	blx	r3
 8010de4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08010de8 <_GetDevFunc>:
 8010de8:	3901      	subs	r1, #1
 8010dea:	2917      	cmp	r1, #23
 8010dec:	d824      	bhi.n	8010e38 <_GetDevFunc+0x50>
 8010dee:	e8df f001 	tbb	[pc, r1]
 8010df2:	2310      	.short	0x2310
 8010df4:	23232323 	.word	0x23232323
 8010df8:	0c232323 	.word	0x0c232323
 8010dfc:	23150e25 	.word	0x23150e25
 8010e00:	23232323 	.word	0x23232323
 8010e04:	1f232323 	.word	0x1f232323
 8010e08:	211a      	.short	0x211a
 8010e0a:	480d      	ldr	r0, [pc, #52]	; (8010e40 <_GetDevFunc+0x58>)
 8010e0c:	4770      	bx	lr
 8010e0e:	480d      	ldr	r0, [pc, #52]	; (8010e44 <_GetDevFunc+0x5c>)
 8010e10:	4770      	bx	lr
 8010e12:	6803      	ldr	r3, [r0, #0]
 8010e14:	6898      	ldr	r0, [r3, #8]
 8010e16:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8010e1a:	4770      	bx	lr
 8010e1c:	6802      	ldr	r2, [r0, #0]
 8010e1e:	6891      	ldr	r1, [r2, #8]
 8010e20:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
 8010e24:	4770      	bx	lr
 8010e26:	6803      	ldr	r3, [r0, #0]
 8010e28:	6898      	ldr	r0, [r3, #8]
 8010e2a:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8010e2e:	4770      	bx	lr
 8010e30:	4805      	ldr	r0, [pc, #20]	; (8010e48 <_GetDevFunc+0x60>)
 8010e32:	4770      	bx	lr
 8010e34:	4805      	ldr	r0, [pc, #20]	; (8010e4c <_GetDevFunc+0x64>)
 8010e36:	4770      	bx	lr
 8010e38:	2000      	movs	r0, #0
 8010e3a:	4770      	bx	lr
 8010e3c:	4804      	ldr	r0, [pc, #16]	; (8010e50 <_GetDevFunc+0x68>)
 8010e3e:	4770      	bx	lr
 8010e40:	080111ab 	.word	0x080111ab
 8010e44:	0801114d 	.word	0x0801114d
 8010e48:	080110b1 	.word	0x080110b1
 8010e4c:	08010d21 	.word	0x08010d21
 8010e50:	08011197 	.word	0x08011197

08010e54 <_GetDevProp>:
 8010e54:	3901      	subs	r1, #1
 8010e56:	6880      	ldr	r0, [r0, #8]
 8010e58:	290d      	cmp	r1, #13
 8010e5a:	d826      	bhi.n	8010eaa <_GetDevProp+0x56>
 8010e5c:	e8df f001 	tbb	[pc, r1]
 8010e60:	0f0d0b09 	.word	0x0f0d0b09
 8010e64:	11252525 	.word	0x11252525
 8010e68:	13282807 	.word	0x13282807
 8010e6c:	1f19      	.short	0x1f19
 8010e6e:	2000      	movs	r0, #0
 8010e70:	4770      	bx	lr
 8010e72:	6800      	ldr	r0, [r0, #0]
 8010e74:	4770      	bx	lr
 8010e76:	6840      	ldr	r0, [r0, #4]
 8010e78:	4770      	bx	lr
 8010e7a:	6880      	ldr	r0, [r0, #8]
 8010e7c:	4770      	bx	lr
 8010e7e:	68c0      	ldr	r0, [r0, #12]
 8010e80:	4770      	bx	lr
 8010e82:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8010e84:	4770      	bx	lr
 8010e86:	b1a0      	cbz	r0, 8010eb2 <_GetDevProp+0x5e>
 8010e88:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010e8a:	f012 0001 	ands.w	r0, r2, #1
 8010e8e:	d010      	beq.n	8010eb2 <_GetDevProp+0x5e>
 8010e90:	e00e      	b.n	8010eb0 <_GetDevProp+0x5c>
 8010e92:	b170      	cbz	r0, 8010eb2 <_GetDevProp+0x5e>
 8010e94:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8010e96:	f010 0002 	ands.w	r0, r0, #2
 8010e9a:	d109      	bne.n	8010eb0 <_GetDevProp+0x5c>
 8010e9c:	4770      	bx	lr
 8010e9e:	b140      	cbz	r0, 8010eb2 <_GetDevProp+0x5e>
 8010ea0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010ea2:	f013 0004 	ands.w	r0, r3, #4
 8010ea6:	d103      	bne.n	8010eb0 <_GetDevProp+0x5c>
 8010ea8:	4770      	bx	lr
 8010eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8010eae:	4770      	bx	lr
 8010eb0:	2001      	movs	r0, #1
 8010eb2:	4770      	bx	lr

08010eb4 <_GetDevData>:
 8010eb4:	6883      	ldr	r3, [r0, #8]
 8010eb6:	2901      	cmp	r1, #1
 8010eb8:	bf0c      	ite	eq
 8010eba:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8010ebc:	2000      	movne	r0, #0
 8010ebe:	4770      	bx	lr

08010ec0 <_GetRect>:
 8010ec0:	6883      	ldr	r3, [r0, #8]
 8010ec2:	6818      	ldr	r0, [r3, #0]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	800a      	strh	r2, [r1, #0]
 8010eca:	804a      	strh	r2, [r1, #2]
 8010ecc:	1e42      	subs	r2, r0, #1
 8010ece:	1e58      	subs	r0, r3, #1
 8010ed0:	808a      	strh	r2, [r1, #4]
 8010ed2:	80c8      	strh	r0, [r1, #6]
 8010ed4:	4770      	bx	lr
	...

08010ed8 <GUIDRV_FlexColor__SetLog2Phys>:
 8010ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eda:	4d10      	ldr	r5, [pc, #64]	; (8010f1c <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 8010edc:	462e      	mov	r6, r5
 8010ede:	4607      	mov	r7, r0
 8010ee0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010ee2:	b091      	sub	sp, #68	; 0x44
 8010ee4:	466c      	mov	r4, sp
 8010ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ee8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8010eec:	3520      	adds	r5, #32
 8010eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ef4:	ac08      	add	r4, sp, #32
 8010ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ef8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f02:	aa10      	add	r2, sp, #64	; 0x40
 8010f04:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8010f08:	f850 1c40 	ldr.w	r1, [r0, #-64]
 8010f0c:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8010f10:	f850 3c20 	ldr.w	r3, [r0, #-32]
 8010f14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010f18:	b011      	add	sp, #68	; 0x44
 8010f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f1c:	0801fde0 	.word	0x0801fde0

08010f20 <_SetOrg>:
 8010f20:	b507      	push	{r0, r1, r2, lr}
 8010f22:	6980      	ldr	r0, [r0, #24]
 8010f24:	e88d 0006 	stmia.w	sp, {r1, r2}
 8010f28:	2103      	movs	r1, #3
 8010f2a:	466a      	mov	r2, sp
 8010f2c:	f7f2 fac6 	bl	80034bc <LCD_X_DisplayDriver>
 8010f30:	bd0e      	pop	{r1, r2, r3, pc}

08010f32 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8010f32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f36:	6884      	ldr	r4, [r0, #8]
 8010f38:	4698      	mov	r8, r3
 8010f3a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010f3c:	f003 0002 	and.w	r0, r3, #2
 8010f40:	b285      	uxth	r5, r0
 8010f42:	4689      	mov	r9, r1
 8010f44:	4617      	mov	r7, r2
 8010f46:	2d00      	cmp	r5, #0
 8010f48:	d032      	beq.n	8010fb0 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x7e>
 8010f4a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8010f4e:	4620      	mov	r0, r4
 8010f50:	47b0      	blx	r6
 8010f52:	463a      	mov	r2, r7
 8010f54:	4606      	mov	r6, r0
 8010f56:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8010f5a:	4649      	mov	r1, r9
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	4798      	blx	r3
 8010f60:	6921      	ldr	r1, [r4, #16]
 8010f62:	69a2      	ldr	r2, [r4, #24]
 8010f64:	428e      	cmp	r6, r1
 8010f66:	4605      	mov	r5, r0
 8010f68:	bfac      	ite	ge
 8010f6a:	2100      	movge	r1, #0
 8010f6c:	2101      	movlt	r1, #1
 8010f6e:	6960      	ldr	r0, [r4, #20]
 8010f70:	4296      	cmp	r6, r2
 8010f72:	bfd4      	ite	le
 8010f74:	460f      	movle	r7, r1
 8010f76:	f041 0701 	orrgt.w	r7, r1, #1
 8010f7a:	4285      	cmp	r5, r0
 8010f7c:	bfac      	ite	ge
 8010f7e:	463b      	movge	r3, r7
 8010f80:	f047 0301 	orrlt.w	r3, r7, #1
 8010f84:	b913      	cbnz	r3, 8010f8c <GUIDRV_FlexColor__SetPixelIndexNoCache+0x5a>
 8010f86:	69e2      	ldr	r2, [r4, #28]
 8010f88:	4295      	cmp	r5, r2
 8010f8a:	dd0a      	ble.n	8010fa2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 8010f8c:	6861      	ldr	r1, [r4, #4]
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	1e4f      	subs	r7, r1, #1
 8010f92:	9700      	str	r7, [sp, #0]
 8010f94:	2100      	movs	r1, #0
 8010f96:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	460a      	mov	r2, r1
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	47b8      	blx	r7
 8010fa2:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	4631      	mov	r1, r6
 8010faa:	462a      	mov	r2, r5
 8010fac:	47b8      	blx	r7
 8010fae:	e003      	b.n	8010fb8 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x86>
 8010fb0:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	47a8      	blx	r5
 8010fb8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	4641      	mov	r1, r8
 8010fc0:	4790      	blx	r2
 8010fc2:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08010fc6 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8010fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fc8:	6884      	ldr	r4, [r0, #8]
 8010fca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010fcc:	f003 0002 	and.w	r0, r3, #2
 8010fd0:	b285      	uxth	r5, r0
 8010fd2:	460f      	mov	r7, r1
 8010fd4:	4616      	mov	r6, r2
 8010fd6:	2d00      	cmp	r5, #0
 8010fd8:	d045      	beq.n	8011066 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa0>
 8010fda:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8010fde:	4620      	mov	r0, r4
 8010fe0:	47a8      	blx	r5
 8010fe2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8010fe6:	4632      	mov	r2, r6
 8010fe8:	4605      	mov	r5, r0
 8010fea:	4639      	mov	r1, r7
 8010fec:	4620      	mov	r0, r4
 8010fee:	4798      	blx	r3
 8010ff0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	b11b      	cbz	r3, 8011000 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x3a>
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	2101      	movs	r1, #1
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	4798      	blx	r3
 8011000:	6920      	ldr	r0, [r4, #16]
 8011002:	69a2      	ldr	r2, [r4, #24]
 8011004:	6963      	ldr	r3, [r4, #20]
 8011006:	4285      	cmp	r5, r0
 8011008:	bfac      	ite	ge
 801100a:	2000      	movge	r0, #0
 801100c:	2001      	movlt	r0, #1
 801100e:	4295      	cmp	r5, r2
 8011010:	bfd4      	ite	le
 8011012:	4601      	movle	r1, r0
 8011014:	f040 0101 	orrgt.w	r1, r0, #1
 8011018:	429e      	cmp	r6, r3
 801101a:	bfac      	ite	ge
 801101c:	460a      	movge	r2, r1
 801101e:	f041 0201 	orrlt.w	r2, r1, #1
 8011022:	b912      	cbnz	r2, 801102a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x64>
 8011024:	69e0      	ldr	r0, [r4, #28]
 8011026:	4286      	cmp	r6, r0
 8011028:	dd0a      	ble.n	8011040 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x7a>
 801102a:	6867      	ldr	r7, [r4, #4]
 801102c:	6823      	ldr	r3, [r4, #0]
 801102e:	1e79      	subs	r1, r7, #1
 8011030:	9100      	str	r1, [sp, #0]
 8011032:	2100      	movs	r1, #0
 8011034:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8011038:	4620      	mov	r0, r4
 801103a:	460a      	mov	r2, r1
 801103c:	3b01      	subs	r3, #1
 801103e:	47b8      	blx	r7
 8011040:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8011044:	4629      	mov	r1, r5
 8011046:	4620      	mov	r0, r4
 8011048:	4632      	mov	r2, r6
 801104a:	4798      	blx	r3
 801104c:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8011050:	4620      	mov	r0, r4
 8011052:	47a8      	blx	r5
 8011054:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8011058:	4605      	mov	r5, r0
 801105a:	b16b      	cbz	r3, 8011078 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xb2>
 801105c:	4620      	mov	r0, r4
 801105e:	2100      	movs	r1, #0
 8011060:	2201      	movs	r2, #1
 8011062:	4798      	blx	r3
 8011064:	e008      	b.n	8011078 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xb2>
 8011066:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801106a:	4620      	mov	r0, r4
 801106c:	4798      	blx	r3
 801106e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8011072:	4620      	mov	r0, r4
 8011074:	4788      	blx	r1
 8011076:	4605      	mov	r5, r0
 8011078:	4628      	mov	r0, r5
 801107a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0801107c <GUIDRV_FlexColor__InitOnce>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	6885      	ldr	r5, [r0, #8]
 8011080:	4604      	mov	r4, r0
 8011082:	b995      	cbnz	r5, 80110aa <GUIDRV_FlexColor__InitOnce+0x2e>
 8011084:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8011088:	f003 f8bc 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 801108c:	4629      	mov	r1, r5
 801108e:	60a0      	str	r0, [r4, #8]
 8011090:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8011094:	f000 fdde 	bl	8011c54 <GUI__memset>
 8011098:	68a3      	ldr	r3, [r4, #8]
 801109a:	4904      	ldr	r1, [pc, #16]	; (80110ac <GUIDRV_FlexColor__InitOnce+0x30>)
 801109c:	641c      	str	r4, [r3, #64]	; 0x40
 801109e:	2202      	movs	r2, #2
 80110a0:	2001      	movs	r0, #1
 80110a2:	84da      	strh	r2, [r3, #38]	; 0x26
 80110a4:	6218      	str	r0, [r3, #32]
 80110a6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 80110aa:	bd38      	pop	{r3, r4, r5, pc}
 80110ac:	08010ed9 	.word	0x08010ed9

080110b0 <_SetDevFunc>:
 80110b0:	b570      	push	{r4, r5, r6, lr}
 80110b2:	4606      	mov	r6, r0
 80110b4:	460d      	mov	r5, r1
 80110b6:	4614      	mov	r4, r2
 80110b8:	f7ff ffe0 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 80110bc:	68b3      	ldr	r3, [r6, #8]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d03a      	beq.n	8011138 <_SetDevFunc+0x88>
 80110c2:	2d26      	cmp	r5, #38	; 0x26
 80110c4:	d002      	beq.n	80110cc <_SetDevFunc+0x1c>
 80110c6:	2d27      	cmp	r5, #39	; 0x27
 80110c8:	d136      	bne.n	8011138 <_SetDevFunc+0x88>
 80110ca:	e014      	b.n	80110f6 <_SetDevFunc+0x46>
 80110cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110ce:	2a10      	cmp	r2, #16
 80110d0:	d009      	beq.n	80110e6 <_SetDevFunc+0x36>
 80110d2:	2a12      	cmp	r2, #18
 80110d4:	d130      	bne.n	8011138 <_SetDevFunc+0x88>
 80110d6:	4819      	ldr	r0, [pc, #100]	; (801113c <_SetDevFunc+0x8c>)
 80110d8:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80110dc:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
 80110e0:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 80110e4:	bd70      	pop	{r4, r5, r6, pc}
 80110e6:	4916      	ldr	r1, [pc, #88]	; (8011140 <_SetDevFunc+0x90>)
 80110e8:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 80110ec:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
 80110f0:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 80110f4:	bd70      	pop	{r4, r5, r6, pc}
 80110f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110f8:	2a10      	cmp	r2, #16
 80110fa:	d002      	beq.n	8011102 <_SetDevFunc+0x52>
 80110fc:	2a12      	cmp	r2, #18
 80110fe:	d11b      	bne.n	8011138 <_SetDevFunc+0x88>
 8011100:	e00d      	b.n	801111e <_SetDevFunc+0x6e>
 8011102:	b13c      	cbz	r4, 8011114 <_SetDevFunc+0x64>
 8011104:	490f      	ldr	r1, [pc, #60]	; (8011144 <_SetDevFunc+0x94>)
 8011106:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 801110a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 801110e:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 8011112:	bd70      	pop	{r4, r5, r6, pc}
 8011114:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 8011118:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 801111c:	bd70      	pop	{r4, r5, r6, pc}
 801111e:	b13c      	cbz	r4, 8011130 <_SetDevFunc+0x80>
 8011120:	4809      	ldr	r0, [pc, #36]	; (8011148 <_SetDevFunc+0x98>)
 8011122:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8011126:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 801112a:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
 801112e:	bd70      	pop	{r4, r5, r6, pc}
 8011130:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 8011134:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 8011138:	bd70      	pop	{r4, r5, r6, pc}
 801113a:	bf00      	nop
 801113c:	08010d6b 	.word	0x08010d6b
 8011140:	08010d5d 	.word	0x08010d5d
 8011144:	08010d79 	.word	0x08010d79
 8011148:	08010db1 	.word	0x08010db1

0801114c <_GetDevFunc_Init>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	4605      	mov	r5, r0
 8011150:	f7ff ff94 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 8011154:	68ac      	ldr	r4, [r5, #8]
 8011156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801115a:	f003 f853 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 801115e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011160:	6821      	ldr	r1, [r4, #0]
 8011162:	66a0      	str	r0, [r4, #104]	; 0x68
 8011164:	1dd8      	adds	r0, r3, #7
 8011166:	10c0      	asrs	r0, r0, #3
 8011168:	4348      	muls	r0, r1
 801116a:	f003 f84b 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 801116e:	2101      	movs	r1, #1
 8011170:	66e0      	str	r0, [r4, #108]	; 0x6c
 8011172:	2200      	movs	r2, #0
 8011174:	69a8      	ldr	r0, [r5, #24]
 8011176:	f7f2 f9a1 	bl	80034bc <LCD_X_DisplayDriver>
 801117a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 801117e:	4605      	mov	r5, r0
 8011180:	4620      	mov	r0, r4
 8011182:	4790      	blx	r2
 8011184:	4620      	mov	r0, r4
 8011186:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801118a:	4798      	blx	r3
 801118c:	2d00      	cmp	r5, #0
 801118e:	bfd4      	ite	le
 8011190:	2000      	movle	r0, #0
 8011192:	2001      	movgt	r0, #1
 8011194:	bd38      	pop	{r3, r4, r5, pc}

08011196 <_GetDevFunc_SetSize>:
 8011196:	b570      	push	{r4, r5, r6, lr}
 8011198:	4604      	mov	r4, r0
 801119a:	460d      	mov	r5, r1
 801119c:	4616      	mov	r6, r2
 801119e:	f7ff ff6d 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 80111a2:	68a3      	ldr	r3, [r4, #8]
 80111a4:	e883 0060 	stmia.w	r3, {r5, r6}
 80111a8:	bd70      	pop	{r4, r5, r6, pc}

080111aa <_GetDevFunc_SetVSize>:
 80111aa:	b570      	push	{r4, r5, r6, lr}
 80111ac:	4604      	mov	r4, r0
 80111ae:	460d      	mov	r5, r1
 80111b0:	4616      	mov	r6, r2
 80111b2:	f7ff ff63 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 80111b6:	68a3      	ldr	r3, [r4, #8]
 80111b8:	609d      	str	r5, [r3, #8]
 80111ba:	60de      	str	r6, [r3, #12]
 80111bc:	bd70      	pop	{r4, r5, r6, pc}

080111be <GUIDRV_FlexColor_Config>:
 80111be:	b538      	push	{r3, r4, r5, lr}
 80111c0:	460c      	mov	r4, r1
 80111c2:	4605      	mov	r5, r0
 80111c4:	f7ff ff5a 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 80111c8:	6822      	ldr	r2, [r4, #0]
 80111ca:	68ab      	ldr	r3, [r5, #8]
 80111cc:	68a1      	ldr	r1, [r4, #8]
 80111ce:	6860      	ldr	r0, [r4, #4]
 80111d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80111d2:	074a      	lsls	r2, r1, #29
 80111d4:	6318      	str	r0, [r3, #48]	; 0x30
 80111d6:	6359      	str	r1, [r3, #52]	; 0x34
 80111d8:	d507      	bpl.n	80111ea <GUIDRV_FlexColor_Config+0x2c>
 80111da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80111de:	6898      	ldr	r0, [r3, #8]
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	68da      	ldr	r2, [r3, #12]
 80111e4:	6059      	str	r1, [r3, #4]
 80111e6:	609a      	str	r2, [r3, #8]
 80111e8:	60d8      	str	r0, [r3, #12]
 80111ea:	89a1      	ldrh	r1, [r4, #12]
 80111ec:	6920      	ldr	r0, [r4, #16]
 80111ee:	8499      	strh	r1, [r3, #36]	; 0x24
 80111f0:	b110      	cbz	r0, 80111f8 <GUIDRV_FlexColor_Config+0x3a>
 80111f2:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 80111f6:	621a      	str	r2, [r3, #32]
 80111f8:	bd38      	pop	{r3, r4, r5, pc}

080111fa <GUIDRV_FlexColor_SetFunc>:
 80111fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111fe:	4604      	mov	r4, r0
 8011200:	461f      	mov	r7, r3
 8011202:	4616      	mov	r6, r2
 8011204:	4688      	mov	r8, r1
 8011206:	f7ff ff39 	bl	801107c <GUIDRV_FlexColor__InitOnce>
 801120a:	68a5      	ldr	r5, [r4, #8]
 801120c:	4641      	mov	r1, r8
 801120e:	2268      	movs	r2, #104	; 0x68
 8011210:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8011214:	f7ef fefe 	bl	8001014 <memcpy>
 8011218:	4620      	mov	r0, r4
 801121a:	47b0      	blx	r6
 801121c:	4620      	mov	r0, r4
 801121e:	47b8      	blx	r7
 8011220:	6923      	ldr	r3, [r4, #16]
 8011222:	6898      	ldr	r0, [r3, #8]
 8011224:	4780      	blx	r0
 8011226:	62a8      	str	r0, [r5, #40]	; 0x28
 8011228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801122c <LCD_UpdateColorIndices>:
 801122c:	b510      	push	{r4, lr}
 801122e:	4c07      	ldr	r4, [pc, #28]	; (801124c <LCD_UpdateColorIndices+0x20>)
 8011230:	6823      	ldr	r3, [r4, #0]
 8011232:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011234:	f000 fc6c 	bl	8011b10 <LCD_Color2Index>
 8011238:	f000 fc8a 	bl	8011b50 <LCD_SetColorIndex>
 801123c:	6820      	ldr	r0, [r4, #0]
 801123e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011240:	f000 fc66 	bl	8011b10 <LCD_Color2Index>
 8011244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011248:	f000 bca0 	b.w	8011b8c <LCD_SetBkColorIndex>
 801124c:	20000308 	.word	0x20000308

08011250 <LCD_SetClipRectEx>:
 8011250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011252:	4c09      	ldr	r4, [pc, #36]	; (8011278 <LCD_SetClipRectEx+0x28>)
 8011254:	6823      	ldr	r3, [r4, #0]
 8011256:	4605      	mov	r5, r0
 8011258:	7c5a      	ldrb	r2, [r3, #17]
 801125a:	4808      	ldr	r0, [pc, #32]	; (801127c <LCD_SetClipRectEx+0x2c>)
 801125c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011260:	68c1      	ldr	r1, [r0, #12]
 8011262:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8011264:	4669      	mov	r1, sp
 8011266:	4798      	blx	r3
 8011268:	6820      	ldr	r0, [r4, #0]
 801126a:	4629      	mov	r1, r5
 801126c:	3008      	adds	r0, #8
 801126e:	466a      	mov	r2, sp
 8011270:	f000 fdd6 	bl	8011e20 <GUI__IntersectRects>
 8011274:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8011276:	bf00      	nop
 8011278:	20000308 	.word	0x20000308
 801127c:	2000eb5c 	.word	0x2000eb5c

08011280 <LCD_SetVSizeEx>:
 8011280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011282:	460d      	mov	r5, r1
 8011284:	4614      	mov	r4, r2
 8011286:	f002 f913 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 801128a:	9001      	str	r0, [sp, #4]
 801128c:	b908      	cbnz	r0, 8011292 <LCD_SetVSizeEx+0x12>
 801128e:	2001      	movs	r0, #1
 8011290:	e00c      	b.n	80112ac <LCD_SetVSizeEx+0x2c>
 8011292:	68c3      	ldr	r3, [r0, #12]
 8011294:	210a      	movs	r1, #10
 8011296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011298:	a801      	add	r0, sp, #4
 801129a:	4790      	blx	r2
 801129c:	4603      	mov	r3, r0
 801129e:	2800      	cmp	r0, #0
 80112a0:	d0f5      	beq.n	801128e <LCD_SetVSizeEx+0xe>
 80112a2:	9801      	ldr	r0, [sp, #4]
 80112a4:	4629      	mov	r1, r5
 80112a6:	4622      	mov	r2, r4
 80112a8:	4798      	blx	r3
 80112aa:	2000      	movs	r0, #0
 80112ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080112ae <LCD_SetSizeEx>:
 80112ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112b0:	460d      	mov	r5, r1
 80112b2:	4614      	mov	r4, r2
 80112b4:	f002 f8fc 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 80112b8:	9001      	str	r0, [sp, #4]
 80112ba:	b908      	cbnz	r0, 80112c0 <LCD_SetSizeEx+0x12>
 80112bc:	2001      	movs	r0, #1
 80112be:	e00c      	b.n	80112da <LCD_SetSizeEx+0x2c>
 80112c0:	68c3      	ldr	r3, [r0, #12]
 80112c2:	210b      	movs	r1, #11
 80112c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112c6:	a801      	add	r0, sp, #4
 80112c8:	4790      	blx	r2
 80112ca:	4603      	mov	r3, r0
 80112cc:	2800      	cmp	r0, #0
 80112ce:	d0f5      	beq.n	80112bc <LCD_SetSizeEx+0xe>
 80112d0:	9801      	ldr	r0, [sp, #4]
 80112d2:	4629      	mov	r1, r5
 80112d4:	4622      	mov	r2, r4
 80112d6:	4798      	blx	r3
 80112d8:	2000      	movs	r0, #0
 80112da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080112dc <LCD_SetPosEx>:
 80112dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112de:	460d      	mov	r5, r1
 80112e0:	4614      	mov	r4, r2
 80112e2:	f002 f8e5 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 80112e6:	9001      	str	r0, [sp, #4]
 80112e8:	b908      	cbnz	r0, 80112ee <LCD_SetPosEx+0x12>
 80112ea:	2001      	movs	r0, #1
 80112ec:	e00c      	b.n	8011308 <LCD_SetPosEx+0x2c>
 80112ee:	68c3      	ldr	r3, [r0, #12]
 80112f0:	2103      	movs	r1, #3
 80112f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112f4:	a801      	add	r0, sp, #4
 80112f6:	4790      	blx	r2
 80112f8:	4603      	mov	r3, r0
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d0f5      	beq.n	80112ea <LCD_SetPosEx+0xe>
 80112fe:	9801      	ldr	r0, [sp, #4]
 8011300:	4629      	mov	r1, r5
 8011302:	4622      	mov	r2, r4
 8011304:	4798      	blx	r3
 8011306:	2000      	movs	r0, #0
 8011308:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0801130a <LCD_SetLUTEntryEx>:
 801130a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801130c:	460d      	mov	r5, r1
 801130e:	4614      	mov	r4, r2
 8011310:	f002 f8ce 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011314:	9001      	str	r0, [sp, #4]
 8011316:	b908      	cbnz	r0, 801131c <LCD_SetLUTEntryEx+0x12>
 8011318:	2001      	movs	r0, #1
 801131a:	e00c      	b.n	8011336 <LCD_SetLUTEntryEx+0x2c>
 801131c:	68c3      	ldr	r3, [r0, #12]
 801131e:	2110      	movs	r1, #16
 8011320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011322:	a801      	add	r0, sp, #4
 8011324:	4790      	blx	r2
 8011326:	4603      	mov	r3, r0
 8011328:	2800      	cmp	r0, #0
 801132a:	d0f5      	beq.n	8011318 <LCD_SetLUTEntryEx+0xe>
 801132c:	9801      	ldr	r0, [sp, #4]
 801132e:	4629      	mov	r1, r5
 8011330:	4622      	mov	r2, r4
 8011332:	4798      	blx	r3
 8011334:	2000      	movs	r0, #0
 8011336:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08011338 <LCD_GetPosEx>:
 8011338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801133a:	460d      	mov	r5, r1
 801133c:	4614      	mov	r4, r2
 801133e:	f002 f8b7 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011342:	9001      	str	r0, [sp, #4]
 8011344:	b908      	cbnz	r0, 801134a <LCD_GetPosEx+0x12>
 8011346:	2001      	movs	r0, #1
 8011348:	e00c      	b.n	8011364 <LCD_GetPosEx+0x2c>
 801134a:	68c3      	ldr	r3, [r0, #12]
 801134c:	2104      	movs	r1, #4
 801134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011350:	a801      	add	r0, sp, #4
 8011352:	4790      	blx	r2
 8011354:	4603      	mov	r3, r0
 8011356:	2800      	cmp	r0, #0
 8011358:	d0f5      	beq.n	8011346 <LCD_GetPosEx+0xe>
 801135a:	9801      	ldr	r0, [sp, #4]
 801135c:	4629      	mov	r1, r5
 801135e:	4622      	mov	r2, r4
 8011360:	4798      	blx	r3
 8011362:	2000      	movs	r0, #0
 8011364:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08011366 <_GetDevProp>:
 8011366:	2801      	cmp	r0, #1
 8011368:	b510      	push	{r4, lr}
 801136a:	460c      	mov	r4, r1
 801136c:	dc08      	bgt.n	8011380 <_GetDevProp+0x1a>
 801136e:	f002 f89f 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011372:	b120      	cbz	r0, 801137e <_GetDevProp+0x18>
 8011374:	68c1      	ldr	r1, [r0, #12]
 8011376:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8011378:	4621      	mov	r1, r4
 801137a:	4790      	blx	r2
 801137c:	bd10      	pop	{r4, pc}
 801137e:	bd10      	pop	{r4, pc}
 8011380:	2000      	movs	r0, #0
 8011382:	bd10      	pop	{r4, pc}

08011384 <_GetMaxValue>:
 8011384:	b538      	push	{r3, r4, r5, lr}
 8011386:	4604      	mov	r4, r0
 8011388:	4621      	mov	r1, r4
 801138a:	2001      	movs	r0, #1
 801138c:	f7ff ffeb 	bl	8011366 <_GetDevProp>
 8011390:	4621      	mov	r1, r4
 8011392:	4605      	mov	r5, r0
 8011394:	2000      	movs	r0, #0
 8011396:	f7ff ffe6 	bl	8011366 <_GetDevProp>
 801139a:	42a8      	cmp	r0, r5
 801139c:	bfb8      	it	lt
 801139e:	4628      	movlt	r0, r5
 80113a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80113a4:	bd38      	pop	{r3, r4, r5, pc}

080113a6 <LCD_GetXSizeEx>:
 80113a6:	2101      	movs	r1, #1
 80113a8:	f7ff bfdd 	b.w	8011366 <_GetDevProp>

080113ac <LCD_GetYSizeEx>:
 80113ac:	2102      	movs	r1, #2
 80113ae:	f7ff bfda 	b.w	8011366 <_GetDevProp>

080113b2 <LCD_GetVXSizeEx>:
 80113b2:	2103      	movs	r1, #3
 80113b4:	f7ff bfd7 	b.w	8011366 <_GetDevProp>

080113b8 <LCD_GetVYSizeEx>:
 80113b8:	2104      	movs	r1, #4
 80113ba:	f7ff bfd4 	b.w	8011366 <_GetDevProp>

080113be <LCD_GetBitsPerPixelEx>:
 80113be:	2108      	movs	r1, #8
 80113c0:	f7ff bfd1 	b.w	8011366 <_GetDevProp>

080113c4 <LCD_GetNumColorsEx>:
 80113c4:	2109      	movs	r1, #9
 80113c6:	f7ff bfce 	b.w	8011366 <_GetDevProp>
	...

080113cc <LCD_GetXSize>:
 80113cc:	4b02      	ldr	r3, [pc, #8]	; (80113d8 <LCD_GetXSize+0xc>)
 80113ce:	6818      	ldr	r0, [r3, #0]
 80113d0:	7c40      	ldrb	r0, [r0, #17]
 80113d2:	f7ff bfe8 	b.w	80113a6 <LCD_GetXSizeEx>
 80113d6:	bf00      	nop
 80113d8:	20000308 	.word	0x20000308

080113dc <LCD_GetYSize>:
 80113dc:	4b02      	ldr	r3, [pc, #8]	; (80113e8 <LCD_GetYSize+0xc>)
 80113de:	6818      	ldr	r0, [r3, #0]
 80113e0:	7c40      	ldrb	r0, [r0, #17]
 80113e2:	f7ff bfe3 	b.w	80113ac <LCD_GetYSizeEx>
 80113e6:	bf00      	nop
 80113e8:	20000308 	.word	0x20000308

080113ec <LCD_GetNumColors>:
 80113ec:	4b02      	ldr	r3, [pc, #8]	; (80113f8 <LCD_GetNumColors+0xc>)
 80113ee:	6818      	ldr	r0, [r3, #0]
 80113f0:	7c40      	ldrb	r0, [r0, #17]
 80113f2:	f7ff bfe7 	b.w	80113c4 <LCD_GetNumColorsEx>
 80113f6:	bf00      	nop
 80113f8:	20000308 	.word	0x20000308

080113fc <GUI_GetBitsPerPixelEx>:
 80113fc:	b508      	push	{r3, lr}
 80113fe:	4b04      	ldr	r3, [pc, #16]	; (8011410 <GUI_GetBitsPerPixelEx+0x14>)
 8011400:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8011404:	68c1      	ldr	r1, [r0, #12]
 8011406:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8011408:	2108      	movs	r1, #8
 801140a:	4790      	blx	r2
 801140c:	bd08      	pop	{r3, pc}
 801140e:	bf00      	nop
 8011410:	2000eb5c 	.word	0x2000eb5c

08011414 <LCD_GetPaletteEx>:
 8011414:	b508      	push	{r3, lr}
 8011416:	f002 f84b 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 801141a:	b120      	cbz	r0, 8011426 <LCD_GetPaletteEx+0x12>
 801141c:	68c1      	ldr	r1, [r0, #12]
 801141e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011420:	2102      	movs	r1, #2
 8011422:	4790      	blx	r2
 8011424:	bd08      	pop	{r3, pc}
 8011426:	bd08      	pop	{r3, pc}

08011428 <LCD_GetPalette>:
 8011428:	4b02      	ldr	r3, [pc, #8]	; (8011434 <LCD_GetPalette+0xc>)
 801142a:	6818      	ldr	r0, [r3, #0]
 801142c:	7c40      	ldrb	r0, [r0, #17]
 801142e:	f7ff bff1 	b.w	8011414 <LCD_GetPaletteEx>
 8011432:	bf00      	nop
 8011434:	20000308 	.word	0x20000308

08011438 <GUI_GetpfIndex2ColorEx>:
 8011438:	4b02      	ldr	r3, [pc, #8]	; (8011444 <GUI_GetpfIndex2ColorEx+0xc>)
 801143a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801143e:	6901      	ldr	r1, [r0, #16]
 8011440:	6848      	ldr	r0, [r1, #4]
 8011442:	4770      	bx	lr
 8011444:	2000eb5c 	.word	0x2000eb5c

08011448 <GUI_GetpfColor2IndexEx>:
 8011448:	4b02      	ldr	r3, [pc, #8]	; (8011454 <GUI_GetpfColor2IndexEx+0xc>)
 801144a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801144e:	6901      	ldr	r1, [r0, #16]
 8011450:	6808      	ldr	r0, [r1, #0]
 8011452:	4770      	bx	lr
 8011454:	2000eb5c 	.word	0x2000eb5c

08011458 <LCD_GetVXSizeMax>:
 8011458:	2003      	movs	r0, #3
 801145a:	f7ff bf93 	b.w	8011384 <_GetMaxValue>

0801145e <LCD__GetBPP>:
 801145e:	2800      	cmp	r0, #0
 8011460:	d03d      	beq.n	80114de <LCD__GetBPP+0x80>
 8011462:	f030 0301 	bics.w	r3, r0, #1
 8011466:	d02b      	beq.n	80114c0 <LCD__GetBPP+0x62>
 8011468:	f030 0303 	bics.w	r3, r0, #3
 801146c:	d02a      	beq.n	80114c4 <LCD__GetBPP+0x66>
 801146e:	f030 0307 	bics.w	r3, r0, #7
 8011472:	d029      	beq.n	80114c8 <LCD__GetBPP+0x6a>
 8011474:	f030 030f 	bics.w	r3, r0, #15
 8011478:	d028      	beq.n	80114cc <LCD__GetBPP+0x6e>
 801147a:	f030 031f 	bics.w	r3, r0, #31
 801147e:	d027      	beq.n	80114d0 <LCD__GetBPP+0x72>
 8011480:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8011484:	d026      	beq.n	80114d4 <LCD__GetBPP+0x76>
 8011486:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 801148a:	f023 0101 	bic.w	r1, r3, #1
 801148e:	2900      	cmp	r1, #0
 8011490:	d022      	beq.n	80114d8 <LCD__GetBPP+0x7a>
 8011492:	f420 627f 	bic.w	r2, r0, #4080	; 0xff0
 8011496:	f022 030f 	bic.w	r3, r2, #15
 801149a:	2b00      	cmp	r3, #0
 801149c:	d01c      	beq.n	80114d8 <LCD__GetBPP+0x7a>
 801149e:	f420 41ff 	bic.w	r1, r0, #32640	; 0x7f80
 80114a2:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 80114a6:	b1ba      	cbz	r2, 80114d8 <LCD__GetBPP+0x7a>
 80114a8:	0c03      	lsrs	r3, r0, #16
 80114aa:	0419      	lsls	r1, r3, #16
 80114ac:	b1a1      	cbz	r1, 80114d8 <LCD__GetBPP+0x7a>
 80114ae:	0c82      	lsrs	r2, r0, #18
 80114b0:	0493      	lsls	r3, r2, #18
 80114b2:	b19b      	cbz	r3, 80114dc <LCD__GetBPP+0x7e>
 80114b4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80114b8:	bf0c      	ite	eq
 80114ba:	2018      	moveq	r0, #24
 80114bc:	2020      	movne	r0, #32
 80114be:	4770      	bx	lr
 80114c0:	2001      	movs	r0, #1
 80114c2:	4770      	bx	lr
 80114c4:	2002      	movs	r0, #2
 80114c6:	4770      	bx	lr
 80114c8:	2003      	movs	r0, #3
 80114ca:	4770      	bx	lr
 80114cc:	2004      	movs	r0, #4
 80114ce:	4770      	bx	lr
 80114d0:	2005      	movs	r0, #5
 80114d2:	4770      	bx	lr
 80114d4:	2008      	movs	r0, #8
 80114d6:	4770      	bx	lr
 80114d8:	2010      	movs	r0, #16
 80114da:	4770      	bx	lr
 80114dc:	2012      	movs	r0, #18
 80114de:	4770      	bx	lr

080114e0 <LCD__GetBPPDevice>:
 80114e0:	b508      	push	{r3, lr}
 80114e2:	f7ff ffbc 	bl	801145e <LCD__GetBPP>
 80114e6:	2801      	cmp	r0, #1
 80114e8:	d00f      	beq.n	801150a <LCD__GetBPPDevice+0x2a>
 80114ea:	1e83      	subs	r3, r0, #2
 80114ec:	2b06      	cmp	r3, #6
 80114ee:	d909      	bls.n	8011504 <LCD__GetBPPDevice+0x24>
 80114f0:	f1a0 0109 	sub.w	r1, r0, #9
 80114f4:	2907      	cmp	r1, #7
 80114f6:	d907      	bls.n	8011508 <LCD__GetBPPDevice+0x28>
 80114f8:	3811      	subs	r0, #17
 80114fa:	280f      	cmp	r0, #15
 80114fc:	bf94      	ite	ls
 80114fe:	2020      	movls	r0, #32
 8011500:	2000      	movhi	r0, #0
 8011502:	bd08      	pop	{r3, pc}
 8011504:	2008      	movs	r0, #8
 8011506:	bd08      	pop	{r3, pc}
 8011508:	2010      	movs	r0, #16
 801150a:	bd08      	pop	{r3, pc}

0801150c <_SetDrawMode>:
 801150c:	b570      	push	{r4, r5, r6, lr}
 801150e:	4b08      	ldr	r3, [pc, #32]	; (8011530 <_SetDrawMode+0x24>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	7c1a      	ldrb	r2, [r3, #16]
 8011514:	ea80 0102 	eor.w	r1, r0, r2
 8011518:	0749      	lsls	r1, r1, #29
 801151a:	d505      	bpl.n	8011528 <_SetDrawMode+0x1c>
 801151c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801151e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8011520:	6826      	ldr	r6, [r4, #0]
 8011522:	680d      	ldr	r5, [r1, #0]
 8011524:	6025      	str	r5, [r4, #0]
 8011526:	600e      	str	r6, [r1, #0]
 8011528:	7418      	strb	r0, [r3, #16]
 801152a:	4610      	mov	r0, r2
 801152c:	bd70      	pop	{r4, r5, r6, pc}
 801152e:	bf00      	nop
 8011530:	20000308 	.word	0x20000308

08011534 <LCD_SetDrawMode>:
 8011534:	b508      	push	{r3, lr}
 8011536:	4b02      	ldr	r3, [pc, #8]	; (8011540 <LCD_SetDrawMode+0xc>)
 8011538:	6819      	ldr	r1, [r3, #0]
 801153a:	688a      	ldr	r2, [r1, #8]
 801153c:	4790      	blx	r2
 801153e:	bd08      	pop	{r3, pc}
 8011540:	200002f4 	.word	0x200002f4

08011544 <LCD_DrawPixel>:
 8011544:	b538      	push	{r3, r4, r5, lr}
 8011546:	4b14      	ldr	r3, [pc, #80]	; (8011598 <LCD_DrawPixel+0x54>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	460a      	mov	r2, r1
 801154c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8011550:	428a      	cmp	r2, r1
 8011552:	4604      	mov	r4, r0
 8011554:	db1e      	blt.n	8011594 <LCD_DrawPixel+0x50>
 8011556:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801155a:	4282      	cmp	r2, r0
 801155c:	dc1a      	bgt.n	8011594 <LCD_DrawPixel+0x50>
 801155e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8011562:	428c      	cmp	r4, r1
 8011564:	db16      	blt.n	8011594 <LCD_DrawPixel+0x50>
 8011566:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801156a:	4284      	cmp	r4, r0
 801156c:	dc12      	bgt.n	8011594 <LCD_DrawPixel+0x50>
 801156e:	7c19      	ldrb	r1, [r3, #16]
 8011570:	7c58      	ldrb	r0, [r3, #17]
 8011572:	f011 0f01 	tst.w	r1, #1
 8011576:	4909      	ldr	r1, [pc, #36]	; (801159c <LCD_DrawPixel+0x58>)
 8011578:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801157c:	d004      	beq.n	8011588 <LCD_DrawPixel+0x44>
 801157e:	68c1      	ldr	r1, [r0, #12]
 8011580:	69cb      	ldr	r3, [r1, #28]
 8011582:	4621      	mov	r1, r4
 8011584:	4798      	blx	r3
 8011586:	bd38      	pop	{r3, r4, r5, pc}
 8011588:	68c5      	ldr	r5, [r0, #12]
 801158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801158c:	69ad      	ldr	r5, [r5, #24]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	4621      	mov	r1, r4
 8011592:	47a8      	blx	r5
 8011594:	bd38      	pop	{r3, r4, r5, pc}
 8011596:	bf00      	nop
 8011598:	20000308 	.word	0x20000308
 801159c:	2000eb5c 	.word	0x2000eb5c

080115a0 <LCD_DrawHLine>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4b10      	ldr	r3, [pc, #64]	; (80115e4 <LCD_DrawHLine+0x44>)
 80115a4:	681c      	ldr	r4, [r3, #0]
 80115a6:	460d      	mov	r5, r1
 80115a8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80115ac:	428d      	cmp	r5, r1
 80115ae:	db17      	blt.n	80115e0 <LCD_DrawHLine+0x40>
 80115b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80115b4:	429d      	cmp	r5, r3
 80115b6:	dc13      	bgt.n	80115e0 <LCD_DrawHLine+0x40>
 80115b8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80115bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115c0:	4288      	cmp	r0, r1
 80115c2:	bfa8      	it	ge
 80115c4:	4601      	movge	r1, r0
 80115c6:	429a      	cmp	r2, r3
 80115c8:	bfb8      	it	lt
 80115ca:	4613      	movlt	r3, r2
 80115cc:	428b      	cmp	r3, r1
 80115ce:	db07      	blt.n	80115e0 <LCD_DrawHLine+0x40>
 80115d0:	7c60      	ldrb	r0, [r4, #17]
 80115d2:	4a05      	ldr	r2, [pc, #20]	; (80115e8 <LCD_DrawHLine+0x48>)
 80115d4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80115d8:	68c4      	ldr	r4, [r0, #12]
 80115da:	462a      	mov	r2, r5
 80115dc:	68a4      	ldr	r4, [r4, #8]
 80115de:	47a0      	blx	r4
 80115e0:	bd38      	pop	{r3, r4, r5, pc}
 80115e2:	bf00      	nop
 80115e4:	20000308 	.word	0x20000308
 80115e8:	2000eb5c 	.word	0x2000eb5c

080115ec <LCD_DrawVLine>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4b10      	ldr	r3, [pc, #64]	; (8011630 <LCD_DrawVLine+0x44>)
 80115f0:	681c      	ldr	r4, [r3, #0]
 80115f2:	4605      	mov	r5, r0
 80115f4:	4610      	mov	r0, r2
 80115f6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80115fa:	4295      	cmp	r5, r2
 80115fc:	db17      	blt.n	801162e <LCD_DrawVLine+0x42>
 80115fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011602:	429d      	cmp	r5, r3
 8011604:	dc13      	bgt.n	801162e <LCD_DrawVLine+0x42>
 8011606:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801160a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801160e:	4291      	cmp	r1, r2
 8011610:	bfa8      	it	ge
 8011612:	460a      	movge	r2, r1
 8011614:	4298      	cmp	r0, r3
 8011616:	bfb8      	it	lt
 8011618:	4603      	movlt	r3, r0
 801161a:	4293      	cmp	r3, r2
 801161c:	db07      	blt.n	801162e <LCD_DrawVLine+0x42>
 801161e:	7c64      	ldrb	r4, [r4, #17]
 8011620:	4904      	ldr	r1, [pc, #16]	; (8011634 <LCD_DrawVLine+0x48>)
 8011622:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8011626:	68c4      	ldr	r4, [r0, #12]
 8011628:	4629      	mov	r1, r5
 801162a:	68e4      	ldr	r4, [r4, #12]
 801162c:	47a0      	blx	r4
 801162e:	bd38      	pop	{r3, r4, r5, pc}
 8011630:	20000308 	.word	0x20000308
 8011634:	2000eb5c 	.word	0x2000eb5c

08011638 <LCD_FillRect>:
 8011638:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801163a:	460e      	mov	r6, r1
 801163c:	4911      	ldr	r1, [pc, #68]	; (8011684 <LCD_FillRect+0x4c>)
 801163e:	680c      	ldr	r4, [r1, #0]
 8011640:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011648:	4288      	cmp	r0, r1
 801164a:	bfa8      	it	ge
 801164c:	4601      	movge	r1, r0
 801164e:	42aa      	cmp	r2, r5
 8011650:	bfb8      	it	lt
 8011652:	4615      	movlt	r5, r2
 8011654:	428d      	cmp	r5, r1
 8011656:	db14      	blt.n	8011682 <LCD_FillRect+0x4a>
 8011658:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801165c:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8011660:	4296      	cmp	r6, r2
 8011662:	bfa8      	it	ge
 8011664:	4632      	movge	r2, r6
 8011666:	4283      	cmp	r3, r0
 8011668:	bfa8      	it	ge
 801166a:	4603      	movge	r3, r0
 801166c:	4293      	cmp	r3, r2
 801166e:	db08      	blt.n	8011682 <LCD_FillRect+0x4a>
 8011670:	7c64      	ldrb	r4, [r4, #17]
 8011672:	4805      	ldr	r0, [pc, #20]	; (8011688 <LCD_FillRect+0x50>)
 8011674:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011678:	68c4      	ldr	r4, [r0, #12]
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	6924      	ldr	r4, [r4, #16]
 801167e:	462b      	mov	r3, r5
 8011680:	47a0      	blx	r4
 8011682:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8011684:	20000308 	.word	0x20000308
 8011688:	2000eb5c 	.word	0x2000eb5c

0801168c <LCD__DrawBitmap_1bpp>:
 801168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011690:	4e69      	ldr	r6, [pc, #420]	; (8011838 <LCD__DrawBitmap_1bpp+0x1ac>)
 8011692:	b08f      	sub	sp, #60	; 0x3c
 8011694:	6836      	ldr	r6, [r6, #0]
 8011696:	9008      	str	r0, [sp, #32]
 8011698:	4688      	mov	r8, r1
 801169a:	4615      	mov	r5, r2
 801169c:	469b      	mov	fp, r3
 801169e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80116a0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80116a2:	b166      	cbz	r6, 80116be <LCD__DrawBitmap_1bpp+0x32>
 80116a4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80116a6:	9404      	str	r4, [sp, #16]
 80116a8:	9500      	str	r5, [sp, #0]
 80116aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80116ac:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80116ae:	9501      	str	r5, [sp, #4]
 80116b0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80116b2:	9405      	str	r4, [sp, #20]
 80116b4:	9502      	str	r5, [sp, #8]
 80116b6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80116b8:	9503      	str	r5, [sp, #12]
 80116ba:	6834      	ldr	r4, [r6, #0]
 80116bc:	e054      	b.n	8011768 <LCD__DrawBitmap_1bpp+0xdc>
 80116be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80116c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80116c2:	430b      	orrs	r3, r1
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d151      	bne.n	801176c <LCD__DrawBitmap_1bpp+0xe0>
 80116c8:	485c      	ldr	r0, [pc, #368]	; (801183c <LCD__DrawBitmap_1bpp+0x1b0>)
 80116ca:	6800      	ldr	r0, [r0, #0]
 80116cc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80116d0:	ebc8 0102 	rsb	r1, r8, r2
 80116d4:	2900      	cmp	r1, #0
 80116d6:	dd08      	ble.n	80116ea <LCD__DrawBitmap_1bpp+0x5e>
 80116d8:	ebc1 030b 	rsb	r3, r1, fp
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f340 80a8 	ble.w	8011832 <LCD__DrawBitmap_1bpp+0x1a6>
 80116e2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80116e4:	fb01 4406 	mla	r4, r1, r6, r4
 80116e8:	e001      	b.n	80116ee <LCD__DrawBitmap_1bpp+0x62>
 80116ea:	465b      	mov	r3, fp
 80116ec:	4642      	mov	r2, r8
 80116ee:	44d8      	add	r8, fp
 80116f0:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80116f4:	f108 3cff 	add.w	ip, r8, #4294967295
 80116f8:	ebc1 080c 	rsb	r8, r1, ip
 80116fc:	f1b8 0f00 	cmp.w	r8, #0
 8011700:	dd04      	ble.n	801170c <LCD__DrawBitmap_1bpp+0x80>
 8011702:	ebc8 0303 	rsb	r3, r8, r3
 8011706:	2b00      	cmp	r3, #0
 8011708:	f340 8093 	ble.w	8011832 <LCD__DrawBitmap_1bpp+0x1a6>
 801170c:	9e08      	ldr	r6, [sp, #32]
 801170e:	1971      	adds	r1, r6, r5
 8011710:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8011714:	3901      	subs	r1, #1
 8011716:	1b89      	subs	r1, r1, r6
 8011718:	9e08      	ldr	r6, [sp, #32]
 801171a:	2900      	cmp	r1, #0
 801171c:	bfc8      	it	gt
 801171e:	ebc1 0505 	rsbgt	r5, r1, r5
 8011722:	1bf1      	subs	r1, r6, r7
 8011724:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8011728:	42b1      	cmp	r1, r6
 801172a:	da0b      	bge.n	8011744 <LCD__DrawBitmap_1bpp+0xb8>
 801172c:	ebc1 0c06 	rsb	ip, r1, r6
 8011730:	4467      	add	r7, ip
 8011732:	1b8e      	subs	r6, r1, r6
 8011734:	f02c 0c07 	bic.w	ip, ip, #7
 8011738:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 801173c:	19ad      	adds	r5, r5, r6
 801173e:	4461      	add	r1, ip
 8011740:	f007 0707 	and.w	r7, r7, #7
 8011744:	2d00      	cmp	r5, #0
 8011746:	dd74      	ble.n	8011832 <LCD__DrawBitmap_1bpp+0x1a6>
 8011748:	7c46      	ldrb	r6, [r0, #17]
 801174a:	483d      	ldr	r0, [pc, #244]	; (8011840 <LCD__DrawBitmap_1bpp+0x1b4>)
 801174c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8011750:	68c6      	ldr	r6, [r0, #12]
 8011752:	9300      	str	r3, [sp, #0]
 8011754:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011756:	9403      	str	r4, [sp, #12]
 8011758:	9301      	str	r3, [sp, #4]
 801175a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801175c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801175e:	9704      	str	r7, [sp, #16]
 8011760:	9302      	str	r3, [sp, #8]
 8011762:	9405      	str	r4, [sp, #20]
 8011764:	6874      	ldr	r4, [r6, #4]
 8011766:	462b      	mov	r3, r5
 8011768:	47a0      	blx	r4
 801176a:	e062      	b.n	8011832 <LCD__DrawBitmap_1bpp+0x1a6>
 801176c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801176e:	f1c0 0208 	rsb	r2, r0, #8
 8011772:	920c      	str	r2, [sp, #48]	; 0x30
 8011774:	4637      	mov	r7, r6
 8011776:	455e      	cmp	r6, fp
 8011778:	da5b      	bge.n	8011832 <LCD__DrawBitmap_1bpp+0x1a6>
 801177a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801177c:	4a2f      	ldr	r2, [pc, #188]	; (801183c <LCD__DrawBitmap_1bpp+0x1b0>)
 801177e:	eb08 0103 	add.w	r1, r8, r3
 8011782:	1e48      	subs	r0, r1, #1
 8011784:	6813      	ldr	r3, [r2, #0]
 8011786:	900b      	str	r0, [sp, #44]	; 0x2c
 8011788:	910a      	str	r1, [sp, #40]	; 0x28
 801178a:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801178e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011790:	4281      	cmp	r1, r0
 8011792:	db48      	blt.n	8011826 <LCD__DrawBitmap_1bpp+0x19a>
 8011794:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8011798:	4590      	cmp	r8, r2
 801179a:	dc44      	bgt.n	8011826 <LCD__DrawBitmap_1bpp+0x19a>
 801179c:	f04f 0900 	mov.w	r9, #0
 80117a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80117a4:	9409      	str	r4, [sp, #36]	; 0x24
 80117a6:	46cc      	mov	ip, r9
 80117a8:	45a9      	cmp	r9, r5
 80117aa:	da3c      	bge.n	8011826 <LCD__DrawBitmap_1bpp+0x19a>
 80117ac:	f1bc 0f00 	cmp.w	ip, #0
 80117b0:	d105      	bne.n	80117be <LCD__DrawBitmap_1bpp+0x132>
 80117b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117b4:	f810 7b01 	ldrb.w	r7, [r0], #1
 80117b8:	f04f 0c08 	mov.w	ip, #8
 80117bc:	9009      	str	r0, [sp, #36]	; 0x24
 80117be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80117c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80117c2:	fa47 f201 	asr.w	r2, r7, r1
 80117c6:	f012 0fff 	tst.w	r2, #255	; 0xff
 80117ca:	fa07 f703 	lsl.w	r7, r7, r3
 80117ce:	b2ff      	uxtb	r7, r7
 80117d0:	ebc3 0c0c 	rsb	ip, r3, ip
 80117d4:	d106      	bne.n	80117e4 <LCD__DrawBitmap_1bpp+0x158>
 80117d6:	4819      	ldr	r0, [pc, #100]	; (801183c <LCD__DrawBitmap_1bpp+0x1b0>)
 80117d8:	6801      	ldr	r1, [r0, #0]
 80117da:	7c0b      	ldrb	r3, [r1, #16]
 80117dc:	f003 0002 	and.w	r0, r3, #2
 80117e0:	b2c1      	uxtb	r1, r0
 80117e2:	b9d9      	cbnz	r1, 801181c <LCD__DrawBitmap_1bpp+0x190>
 80117e4:	4b15      	ldr	r3, [pc, #84]	; (801183c <LCD__DrawBitmap_1bpp+0x1b0>)
 80117e6:	6818      	ldr	r0, [r3, #0]
 80117e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80117ea:	981d      	ldr	r0, [sp, #116]	; 0x74
 80117ec:	6819      	ldr	r1, [r3, #0]
 80117ee:	b2d2      	uxtb	r2, r2
 80117f0:	910d      	str	r1, [sp, #52]	; 0x34
 80117f2:	b108      	cbz	r0, 80117f8 <LCD__DrawBitmap_1bpp+0x16c>
 80117f4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80117f8:	601a      	str	r2, [r3, #0]
 80117fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80117fc:	f8cd c01c 	str.w	ip, [sp, #28]
 8011800:	1e5a      	subs	r2, r3, #1
 8011802:	4650      	mov	r0, sl
 8011804:	4641      	mov	r1, r8
 8011806:	4452      	add	r2, sl
 8011808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801180a:	f7ff ff15 	bl	8011638 <LCD_FillRect>
 801180e:	490b      	ldr	r1, [pc, #44]	; (801183c <LCD__DrawBitmap_1bpp+0x1b0>)
 8011810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011812:	6808      	ldr	r0, [r1, #0]
 8011814:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011818:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801181a:	601a      	str	r2, [r3, #0]
 801181c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801181e:	f109 0901 	add.w	r9, r9, #1
 8011822:	448a      	add	sl, r1
 8011824:	e7c0      	b.n	80117a8 <LCD__DrawBitmap_1bpp+0x11c>
 8011826:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011828:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801182c:	3601      	adds	r6, #1
 801182e:	18e4      	adds	r4, r4, r3
 8011830:	e7a1      	b.n	8011776 <LCD__DrawBitmap_1bpp+0xea>
 8011832:	b00f      	add	sp, #60	; 0x3c
 8011834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011838:	2000eb3c 	.word	0x2000eb3c
 801183c:	20000308 	.word	0x20000308
 8011840:	2000eb5c 	.word	0x2000eb5c

08011844 <LCD_DrawBitmap>:
 8011844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011848:	f8df c210 	ldr.w	ip, [pc, #528]	; 8011a5c <LCD_DrawBitmap+0x218>
 801184c:	b091      	sub	sp, #68	; 0x44
 801184e:	f8dc c000 	ldr.w	ip, [ip]
 8011852:	9207      	str	r2, [sp, #28]
 8011854:	4605      	mov	r5, r0
 8011856:	4688      	mov	r8, r1
 8011858:	469b      	mov	fp, r3
 801185a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801185c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801185e:	f1bc 0f00 	cmp.w	ip, #0
 8011862:	d00c      	beq.n	801187e <LCD_DrawBitmap+0x3a>
 8011864:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8011866:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8011868:	9500      	str	r5, [sp, #0]
 801186a:	9701      	str	r7, [sp, #4]
 801186c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801186e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8011870:	9602      	str	r6, [sp, #8]
 8011872:	9503      	str	r5, [sp, #12]
 8011874:	9404      	str	r4, [sp, #16]
 8011876:	9705      	str	r7, [sp, #20]
 8011878:	f8dc 4000 	ldr.w	r4, [ip]
 801187c:	e081      	b.n	8011982 <LCD_DrawBitmap+0x13e>
 801187e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011880:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8011882:	433b      	orrs	r3, r7
 8011884:	2b01      	cmp	r3, #1
 8011886:	d17e      	bne.n	8011986 <LCD_DrawBitmap+0x142>
 8011888:	4872      	ldr	r0, [pc, #456]	; (8011a54 <LCD_DrawBitmap+0x210>)
 801188a:	6800      	ldr	r0, [r0, #0]
 801188c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011890:	1a53      	subs	r3, r2, r1
 8011892:	2b00      	cmp	r3, #0
 8011894:	dd08      	ble.n	80118a8 <LCD_DrawBitmap+0x64>
 8011896:	ebc3 010b 	rsb	r1, r3, fp
 801189a:	2900      	cmp	r1, #0
 801189c:	f340 80d6 	ble.w	8011a4c <LCD_DrawBitmap+0x208>
 80118a0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80118a2:	fb03 4407 	mla	r4, r3, r7, r4
 80118a6:	e001      	b.n	80118ac <LCD_DrawBitmap+0x68>
 80118a8:	4659      	mov	r1, fp
 80118aa:	4642      	mov	r2, r8
 80118ac:	eb08 0c0b 	add.w	ip, r8, fp
 80118b0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80118b4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80118b8:	ebc3 0808 	rsb	r8, r3, r8
 80118bc:	f1b8 0f00 	cmp.w	r8, #0
 80118c0:	dd04      	ble.n	80118cc <LCD_DrawBitmap+0x88>
 80118c2:	ebc8 0101 	rsb	r1, r8, r1
 80118c6:	2900      	cmp	r1, #0
 80118c8:	f340 80c0 	ble.w	8011a4c <LCD_DrawBitmap+0x208>
 80118cc:	9f07      	ldr	r7, [sp, #28]
 80118ce:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 80118d2:	19eb      	adds	r3, r5, r7
 80118d4:	3b01      	subs	r3, #1
 80118d6:	ebcc 0303 	rsb	r3, ip, r3
 80118da:	2b00      	cmp	r3, #0
 80118dc:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80118e0:	bfc4      	itt	gt
 80118e2:	ebc3 0707 	rsbgt	r7, r3, r7
 80118e6:	9707      	strgt	r7, [sp, #28]
 80118e8:	4565      	cmp	r5, ip
 80118ea:	da33      	bge.n	8011954 <LCD_DrawBitmap+0x110>
 80118ec:	9f07      	ldr	r7, [sp, #28]
 80118ee:	ebc5 030c 	rsb	r3, r5, ip
 80118f2:	1aff      	subs	r7, r7, r3
 80118f4:	2e08      	cmp	r6, #8
 80118f6:	9707      	str	r7, [sp, #28]
 80118f8:	d027      	beq.n	801194a <LCD_DrawBitmap+0x106>
 80118fa:	dc0d      	bgt.n	8011918 <LCD_DrawBitmap+0xd4>
 80118fc:	2e02      	cmp	r6, #2
 80118fe:	d014      	beq.n	801192a <LCD_DrawBitmap+0xe6>
 8011900:	2e04      	cmp	r6, #4
 8011902:	d01a      	beq.n	801193a <LCD_DrawBitmap+0xf6>
 8011904:	2e01      	cmp	r6, #1
 8011906:	d126      	bne.n	8011956 <LCD_DrawBitmap+0x112>
 8011908:	f023 0c07 	bic.w	ip, r3, #7
 801190c:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8011910:	4465      	add	r5, ip
 8011912:	f003 0307 	and.w	r3, r3, #7
 8011916:	e01e      	b.n	8011956 <LCD_DrawBitmap+0x112>
 8011918:	2e18      	cmp	r6, #24
 801191a:	d018      	beq.n	801194e <LCD_DrawBitmap+0x10a>
 801191c:	2e20      	cmp	r6, #32
 801191e:	d016      	beq.n	801194e <LCD_DrawBitmap+0x10a>
 8011920:	2e10      	cmp	r6, #16
 8011922:	d118      	bne.n	8011956 <LCD_DrawBitmap+0x112>
 8011924:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011928:	e013      	b.n	8011952 <LCD_DrawBitmap+0x10e>
 801192a:	f023 0c03 	bic.w	ip, r3, #3
 801192e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8011932:	4465      	add	r5, ip
 8011934:	f003 0303 	and.w	r3, r3, #3
 8011938:	e00d      	b.n	8011956 <LCD_DrawBitmap+0x112>
 801193a:	f023 0701 	bic.w	r7, r3, #1
 801193e:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8011942:	19ed      	adds	r5, r5, r7
 8011944:	f003 0301 	and.w	r3, r3, #1
 8011948:	e005      	b.n	8011956 <LCD_DrawBitmap+0x112>
 801194a:	18e4      	adds	r4, r4, r3
 801194c:	e001      	b.n	8011952 <LCD_DrawBitmap+0x10e>
 801194e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8011952:	4665      	mov	r5, ip
 8011954:	2300      	movs	r3, #0
 8011956:	9f07      	ldr	r7, [sp, #28]
 8011958:	2f00      	cmp	r7, #0
 801195a:	dd77      	ble.n	8011a4c <LCD_DrawBitmap+0x208>
 801195c:	f890 e011 	ldrb.w	lr, [r0, #17]
 8011960:	483d      	ldr	r0, [pc, #244]	; (8011a58 <LCD_DrawBitmap+0x214>)
 8011962:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8011964:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8011968:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801196c:	9403      	str	r4, [sp, #12]
 801196e:	e88d 0042 	stmia.w	sp, {r1, r6}
 8011972:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8011974:	9304      	str	r3, [sp, #16]
 8011976:	9702      	str	r7, [sp, #8]
 8011978:	9405      	str	r4, [sp, #20]
 801197a:	f8de 4004 	ldr.w	r4, [lr, #4]
 801197e:	9b07      	ldr	r3, [sp, #28]
 8011980:	4629      	mov	r1, r5
 8011982:	47a0      	blx	r4
 8011984:	e062      	b.n	8011a4c <LCD_DrawBitmap+0x208>
 8011986:	f1c6 0708 	rsb	r7, r6, #8
 801198a:	970e      	str	r7, [sp, #56]	; 0x38
 801198c:	46e0      	mov	r8, ip
 801198e:	460f      	mov	r7, r1
 8011990:	45dc      	cmp	ip, fp
 8011992:	da5b      	bge.n	8011a4c <LCD_DrawBitmap+0x208>
 8011994:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011996:	4b2f      	ldr	r3, [pc, #188]	; (8011a54 <LCD_DrawBitmap+0x210>)
 8011998:	1878      	adds	r0, r7, r1
 801199a:	1e42      	subs	r2, r0, #1
 801199c:	900c      	str	r0, [sp, #48]	; 0x30
 801199e:	6818      	ldr	r0, [r3, #0]
 80119a0:	920d      	str	r2, [sp, #52]	; 0x34
 80119a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80119a4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80119a8:	4291      	cmp	r1, r2
 80119aa:	db49      	blt.n	8011a40 <LCD_DrawBitmap+0x1fc>
 80119ac:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80119b0:	429f      	cmp	r7, r3
 80119b2:	dc45      	bgt.n	8011a40 <LCD_DrawBitmap+0x1fc>
 80119b4:	f04f 0900 	mov.w	r9, #0
 80119b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80119ba:	46aa      	mov	sl, r5
 80119bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80119c0:	9807      	ldr	r0, [sp, #28]
 80119c2:	4581      	cmp	r9, r0
 80119c4:	da3c      	bge.n	8011a40 <LCD_DrawBitmap+0x1fc>
 80119c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119c8:	b92a      	cbnz	r2, 80119d6 <LCD_DrawBitmap+0x192>
 80119ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119cc:	f811 8b01 	ldrb.w	r8, [r1], #1
 80119d0:	2308      	movs	r3, #8
 80119d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80119d4:	930a      	str	r3, [sp, #40]	; 0x28
 80119d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80119d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80119da:	fa48 f200 	asr.w	r2, r8, r0
 80119de:	1b8b      	subs	r3, r1, r6
 80119e0:	fa08 f806 	lsl.w	r8, r8, r6
 80119e4:	f012 0fff 	tst.w	r2, #255	; 0xff
 80119e8:	fa5f f888 	uxtb.w	r8, r8
 80119ec:	930a      	str	r3, [sp, #40]	; 0x28
 80119ee:	d106      	bne.n	80119fe <LCD_DrawBitmap+0x1ba>
 80119f0:	4818      	ldr	r0, [pc, #96]	; (8011a54 <LCD_DrawBitmap+0x210>)
 80119f2:	6801      	ldr	r1, [r0, #0]
 80119f4:	7c0b      	ldrb	r3, [r1, #16]
 80119f6:	f003 0002 	and.w	r0, r3, #2
 80119fa:	b2c1      	uxtb	r1, r0
 80119fc:	b9d9      	cbnz	r1, 8011a36 <LCD_DrawBitmap+0x1f2>
 80119fe:	4b15      	ldr	r3, [pc, #84]	; (8011a54 <LCD_DrawBitmap+0x210>)
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011a04:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8011a06:	6819      	ldr	r1, [r3, #0]
 8011a08:	b2d2      	uxtb	r2, r2
 8011a0a:	910f      	str	r1, [sp, #60]	; 0x3c
 8011a0c:	b108      	cbz	r0, 8011a12 <LCD_DrawBitmap+0x1ce>
 8011a0e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8011a12:	601a      	str	r2, [r3, #0]
 8011a14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a16:	f8cd c020 	str.w	ip, [sp, #32]
 8011a1a:	1e5a      	subs	r2, r3, #1
 8011a1c:	4650      	mov	r0, sl
 8011a1e:	4639      	mov	r1, r7
 8011a20:	4452      	add	r2, sl
 8011a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a24:	f7ff fe08 	bl	8011638 <LCD_FillRect>
 8011a28:	490a      	ldr	r1, [pc, #40]	; (8011a54 <LCD_DrawBitmap+0x210>)
 8011a2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a2c:	6808      	ldr	r0, [r1, #0]
 8011a2e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011a32:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011a34:	601a      	str	r2, [r3, #0]
 8011a36:	991a      	ldr	r1, [sp, #104]	; 0x68
 8011a38:	f109 0901 	add.w	r9, r9, #1
 8011a3c:	448a      	add	sl, r1
 8011a3e:	e7bf      	b.n	80119c0 <LCD_DrawBitmap+0x17c>
 8011a40:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8011a42:	f10c 0c01 	add.w	ip, ip, #1
 8011a46:	19e4      	adds	r4, r4, r7
 8011a48:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8011a4a:	e7a1      	b.n	8011990 <LCD_DrawBitmap+0x14c>
 8011a4c:	b011      	add	sp, #68	; 0x44
 8011a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a52:	bf00      	nop
 8011a54:	20000308 	.word	0x20000308
 8011a58:	2000eb5c 	.word	0x2000eb5c
 8011a5c:	2000eb3c 	.word	0x2000eb3c

08011a60 <LCD_SetClipRectMax>:
 8011a60:	b508      	push	{r3, lr}
 8011a62:	4b05      	ldr	r3, [pc, #20]	; (8011a78 <LCD_SetClipRectMax+0x18>)
 8011a64:	4805      	ldr	r0, [pc, #20]	; (8011a7c <LCD_SetClipRectMax+0x1c>)
 8011a66:	6819      	ldr	r1, [r3, #0]
 8011a68:	7c4a      	ldrb	r2, [r1, #17]
 8011a6a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011a6e:	68c3      	ldr	r3, [r0, #12]
 8011a70:	3108      	adds	r1, #8
 8011a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a74:	4790      	blx	r2
 8011a76:	bd08      	pop	{r3, pc}
 8011a78:	20000308 	.word	0x20000308
 8011a7c:	2000eb5c 	.word	0x2000eb5c

08011a80 <emWin_LCD_Init>:
 8011a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a82:	f7ff ffed 	bl	8011a60 <LCD_SetClipRectMax>
 8011a86:	f005 fdb5 	bl	80175f4 <LCD_InitColors>
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d13c      	bne.n	8011b0a <emWin_LCD_Init+0x8a>
 8011a90:	4605      	mov	r5, r0
 8011a92:	4628      	mov	r0, r5
 8011a94:	f001 fd0c 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011a98:	9001      	str	r0, [sp, #4]
 8011a9a:	b148      	cbz	r0, 8011ab0 <emWin_LCD_Init+0x30>
 8011a9c:	68c3      	ldr	r3, [r0, #12]
 8011a9e:	210c      	movs	r1, #12
 8011aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011aa2:	a801      	add	r0, sp, #4
 8011aa4:	4790      	blx	r2
 8011aa6:	4601      	mov	r1, r0
 8011aa8:	b370      	cbz	r0, 8011b08 <emWin_LCD_Init+0x88>
 8011aaa:	9801      	ldr	r0, [sp, #4]
 8011aac:	4788      	blx	r1
 8011aae:	4304      	orrs	r4, r0
 8011ab0:	3501      	adds	r5, #1
 8011ab2:	2d02      	cmp	r5, #2
 8011ab4:	d1ed      	bne.n	8011a92 <emWin_LCD_Init+0x12>
 8011ab6:	bb44      	cbnz	r4, 8011b0a <emWin_LCD_Init+0x8a>
 8011ab8:	f005 fde0 	bl	801767c <LCD_InitLUT>
 8011abc:	2401      	movs	r4, #1
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f001 fcf6 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011ac4:	9001      	str	r0, [sp, #4]
 8011ac6:	b1d0      	cbz	r0, 8011afe <emWin_LCD_Init+0x7e>
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f000 fe77 	bl	80127bc <GUI_SelectLayer>
 8011ace:	2004      	movs	r0, #4
 8011ad0:	f7ff fd30 	bl	8011534 <LCD_SetDrawMode>
 8011ad4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8011ad8:	2000      	movs	r0, #0
 8011ada:	4601      	mov	r1, r0
 8011adc:	4613      	mov	r3, r2
 8011ade:	f7ff fdab 	bl	8011638 <LCD_FillRect>
 8011ae2:	2000      	movs	r0, #0
 8011ae4:	f7ff fd26 	bl	8011534 <LCD_SetDrawMode>
 8011ae8:	a802      	add	r0, sp, #8
 8011aea:	210e      	movs	r1, #14
 8011aec:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8011af0:	68da      	ldr	r2, [r3, #12]
 8011af2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011af4:	4798      	blx	r3
 8011af6:	4601      	mov	r1, r0
 8011af8:	b108      	cbz	r0, 8011afe <emWin_LCD_Init+0x7e>
 8011afa:	9801      	ldr	r0, [sp, #4]
 8011afc:	4788      	blx	r1
 8011afe:	f114 34ff 	adds.w	r4, r4, #4294967295
 8011b02:	d2dc      	bcs.n	8011abe <emWin_LCD_Init+0x3e>
 8011b04:	2400      	movs	r4, #0
 8011b06:	e000      	b.n	8011b0a <emWin_LCD_Init+0x8a>
 8011b08:	2401      	movs	r4, #1
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

08011b10 <LCD_Color2Index>:
 8011b10:	b508      	push	{r3, lr}
 8011b12:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <LCD_Color2Index+0x18>)
 8011b14:	6819      	ldr	r1, [r3, #0]
 8011b16:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <LCD_Color2Index+0x1c>)
 8011b18:	7c4a      	ldrb	r2, [r1, #17]
 8011b1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b1e:	690a      	ldr	r2, [r1, #16]
 8011b20:	6813      	ldr	r3, [r2, #0]
 8011b22:	4798      	blx	r3
 8011b24:	bd08      	pop	{r3, pc}
 8011b26:	bf00      	nop
 8011b28:	20000308 	.word	0x20000308
 8011b2c:	2000eb5c 	.word	0x2000eb5c

08011b30 <LCD_Index2Color>:
 8011b30:	b508      	push	{r3, lr}
 8011b32:	4b05      	ldr	r3, [pc, #20]	; (8011b48 <LCD_Index2Color+0x18>)
 8011b34:	6819      	ldr	r1, [r3, #0]
 8011b36:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <LCD_Index2Color+0x1c>)
 8011b38:	7c4a      	ldrb	r2, [r1, #17]
 8011b3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b3e:	690a      	ldr	r2, [r1, #16]
 8011b40:	6853      	ldr	r3, [r2, #4]
 8011b42:	4798      	blx	r3
 8011b44:	bd08      	pop	{r3, pc}
 8011b46:	bf00      	nop
 8011b48:	20000308 	.word	0x20000308
 8011b4c:	2000eb5c 	.word	0x2000eb5c

08011b50 <LCD_SetColorIndex>:
 8011b50:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <LCD_SetColorIndex+0x18>)
 8011b52:	6819      	ldr	r1, [r3, #0]
 8011b54:	7c0a      	ldrb	r2, [r1, #16]
 8011b56:	f002 0304 	and.w	r3, r2, #4
 8011b5a:	b2da      	uxtb	r2, r3
 8011b5c:	b10a      	cbz	r2, 8011b62 <LCD_SetColorIndex+0x12>
 8011b5e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8011b60:	e000      	b.n	8011b64 <LCD_SetColorIndex+0x14>
 8011b62:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8011b64:	6008      	str	r0, [r1, #0]
 8011b66:	4770      	bx	lr
 8011b68:	20000308 	.word	0x20000308

08011b6c <_SetColor>:
 8011b6c:	b508      	push	{r3, lr}
 8011b6e:	4b06      	ldr	r3, [pc, #24]	; (8011b88 <_SetColor+0x1c>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011b74:	4281      	cmp	r1, r0
 8011b76:	d006      	beq.n	8011b86 <_SetColor+0x1a>
 8011b78:	6318      	str	r0, [r3, #48]	; 0x30
 8011b7a:	f7ff ffc9 	bl	8011b10 <LCD_Color2Index>
 8011b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011b82:	f7ff bfe5 	b.w	8011b50 <LCD_SetColorIndex>
 8011b86:	bd08      	pop	{r3, pc}
 8011b88:	20000308 	.word	0x20000308

08011b8c <LCD_SetBkColorIndex>:
 8011b8c:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <LCD_SetBkColorIndex+0x18>)
 8011b8e:	6819      	ldr	r1, [r3, #0]
 8011b90:	7c0a      	ldrb	r2, [r1, #16]
 8011b92:	f002 0304 	and.w	r3, r2, #4
 8011b96:	b2da      	uxtb	r2, r3
 8011b98:	b10a      	cbz	r2, 8011b9e <LCD_SetBkColorIndex+0x12>
 8011b9a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8011b9c:	e000      	b.n	8011ba0 <LCD_SetBkColorIndex+0x14>
 8011b9e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8011ba0:	6008      	str	r0, [r1, #0]
 8011ba2:	4770      	bx	lr
 8011ba4:	20000308 	.word	0x20000308

08011ba8 <_SetBkColor>:
 8011ba8:	b508      	push	{r3, lr}
 8011baa:	4b06      	ldr	r3, [pc, #24]	; (8011bc4 <_SetBkColor+0x1c>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011bb0:	4281      	cmp	r1, r0
 8011bb2:	d006      	beq.n	8011bc2 <_SetBkColor+0x1a>
 8011bb4:	6358      	str	r0, [r3, #52]	; 0x34
 8011bb6:	f7ff ffab 	bl	8011b10 <LCD_Color2Index>
 8011bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011bbe:	f7ff bfe5 	b.w	8011b8c <LCD_SetBkColorIndex>
 8011bc2:	bd08      	pop	{r3, pc}
 8011bc4:	20000308 	.word	0x20000308

08011bc8 <LCD_SetBkColor>:
 8011bc8:	b508      	push	{r3, lr}
 8011bca:	4b02      	ldr	r3, [pc, #8]	; (8011bd4 <LCD_SetBkColor+0xc>)
 8011bcc:	6819      	ldr	r1, [r3, #0]
 8011bce:	684a      	ldr	r2, [r1, #4]
 8011bd0:	4790      	blx	r2
 8011bd2:	bd08      	pop	{r3, pc}
 8011bd4:	200002f4 	.word	0x200002f4

08011bd8 <LCD_SetColor>:
 8011bd8:	b508      	push	{r3, lr}
 8011bda:	4b02      	ldr	r3, [pc, #8]	; (8011be4 <LCD_SetColor+0xc>)
 8011bdc:	6819      	ldr	r1, [r3, #0]
 8011bde:	680a      	ldr	r2, [r1, #0]
 8011be0:	4790      	blx	r2
 8011be2:	bd08      	pop	{r3, pc}
 8011be4:	200002f4 	.word	0x200002f4

08011be8 <GUI__strlen>:
 8011be8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bec:	b118      	cbz	r0, 8011bf6 <GUI__strlen+0xe>
 8011bee:	3301      	adds	r3, #1
 8011bf0:	5cc2      	ldrb	r2, [r0, r3]
 8011bf2:	2a00      	cmp	r2, #0
 8011bf4:	d1fb      	bne.n	8011bee <GUI__strlen+0x6>
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	4770      	bx	lr

08011bfa <GUI__memset16>:
 8011bfa:	0783      	lsls	r3, r0, #30
 8011bfc:	b570      	push	{r4, r5, r6, lr}
 8011bfe:	bf44      	itt	mi
 8011c00:	f820 1b02 	strhmi.w	r1, [r0], #2
 8011c04:	3a01      	submi	r2, #1
 8011c06:	0853      	lsrs	r3, r2, #1
 8011c08:	d020      	beq.n	8011c4c <GUI__memset16+0x52>
 8011c0a:	f04f 1501 	mov.w	r5, #65537	; 0x10001
 8011c0e:	434d      	muls	r5, r1
 8011c10:	2b03      	cmp	r3, #3
 8011c12:	dc02      	bgt.n	8011c1a <GUI__memset16+0x20>
 8011c14:	4606      	mov	r6, r0
 8011c16:	461c      	mov	r4, r3
 8011c18:	e011      	b.n	8011c3e <GUI__memset16+0x44>
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	461e      	mov	r6, r3
 8011c1e:	3e04      	subs	r6, #4
 8011c20:	6025      	str	r5, [r4, #0]
 8011c22:	6065      	str	r5, [r4, #4]
 8011c24:	60a5      	str	r5, [r4, #8]
 8011c26:	60e5      	str	r5, [r4, #12]
 8011c28:	3410      	adds	r4, #16
 8011c2a:	2e03      	cmp	r6, #3
 8011c2c:	dcf7      	bgt.n	8011c1e <GUI__memset16+0x24>
 8011c2e:	3b04      	subs	r3, #4
 8011c30:	089c      	lsrs	r4, r3, #2
 8011c32:	1c66      	adds	r6, r4, #1
 8011c34:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8011c38:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8011c3c:	e7ea      	b.n	8011c14 <GUI__memset16+0x1a>
 8011c3e:	b11c      	cbz	r4, 8011c48 <GUI__memset16+0x4e>
 8011c40:	f846 5b04 	str.w	r5, [r6], #4
 8011c44:	3c01      	subs	r4, #1
 8011c46:	e7fa      	b.n	8011c3e <GUI__memset16+0x44>
 8011c48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011c4c:	07d3      	lsls	r3, r2, #31
 8011c4e:	bf48      	it	mi
 8011c50:	8001      	strhmi	r1, [r0, #0]
 8011c52:	bd70      	pop	{r4, r5, r6, pc}

08011c54 <GUI__memset>:
 8011c54:	b570      	push	{r4, r5, r6, lr}
 8011c56:	b12a      	cbz	r2, 8011c64 <GUI__memset+0x10>
 8011c58:	0783      	lsls	r3, r0, #30
 8011c5a:	d003      	beq.n	8011c64 <GUI__memset+0x10>
 8011c5c:	f800 1b01 	strb.w	r1, [r0], #1
 8011c60:	3a01      	subs	r2, #1
 8011c62:	e7f8      	b.n	8011c56 <GUI__memset+0x2>
 8011c64:	0893      	lsrs	r3, r2, #2
 8011c66:	d101      	bne.n	8011c6c <GUI__memset+0x18>
 8011c68:	1882      	adds	r2, r0, r2
 8011c6a:	e017      	b.n	8011c9c <GUI__memset+0x48>
 8011c6c:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8011c70:	f002 0203 	and.w	r2, r2, #3
 8011c74:	434c      	muls	r4, r1
 8011c76:	2b03      	cmp	r3, #3
 8011c78:	dd06      	ble.n	8011c88 <GUI__memset+0x34>
 8011c7a:	6004      	str	r4, [r0, #0]
 8011c7c:	6044      	str	r4, [r0, #4]
 8011c7e:	6084      	str	r4, [r0, #8]
 8011c80:	60c4      	str	r4, [r0, #12]
 8011c82:	3b04      	subs	r3, #4
 8011c84:	3010      	adds	r0, #16
 8011c86:	e7f6      	b.n	8011c76 <GUI__memset+0x22>
 8011c88:	4605      	mov	r5, r0
 8011c8a:	461e      	mov	r6, r3
 8011c8c:	b11b      	cbz	r3, 8011c96 <GUI__memset+0x42>
 8011c8e:	f840 4b04 	str.w	r4, [r0], #4
 8011c92:	3b01      	subs	r3, #1
 8011c94:	e7fa      	b.n	8011c8c <GUI__memset+0x38>
 8011c96:	eb05 0086 	add.w	r0, r5, r6, lsl #2
 8011c9a:	e7e5      	b.n	8011c68 <GUI__memset+0x14>
 8011c9c:	4290      	cmp	r0, r2
 8011c9e:	d002      	beq.n	8011ca6 <GUI__memset+0x52>
 8011ca0:	f800 1b01 	strb.w	r1, [r0], #1
 8011ca4:	e7fa      	b.n	8011c9c <GUI__memset+0x48>
 8011ca6:	bd70      	pop	{r4, r5, r6, pc}

08011ca8 <GUI__SetText>:
 8011ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011caa:	6807      	ldr	r7, [r0, #0]
 8011cac:	4605      	mov	r5, r0
 8011cae:	4638      	mov	r0, r7
 8011cb0:	460e      	mov	r6, r1
 8011cb2:	f005 fd3b 	bl	801772c <GUI__strcmp_hp>
 8011cb6:	b908      	cbnz	r0, 8011cbc <GUI__SetText+0x14>
 8011cb8:	2000      	movs	r0, #0
 8011cba:	e02e      	b.n	8011d1a <GUI__SetText+0x72>
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f7ff ff93 	bl	8011be8 <GUI__strlen>
 8011cc2:	1c44      	adds	r4, r0, #1
 8011cc4:	4638      	mov	r0, r7
 8011cc6:	f002 f945 	bl	8013f54 <GUI_ALLOC_GetSize>
 8011cca:	4284      	cmp	r4, r0
 8011ccc:	d10f      	bne.n	8011cee <GUI__SetText+0x46>
 8011cce:	2c00      	cmp	r4, #0
 8011cd0:	d0f2      	beq.n	8011cb8 <GUI__SetText+0x10>
 8011cd2:	4638      	mov	r0, r7
 8011cd4:	f002 f910 	bl	8013ef8 <GUI_ALLOC_LockH>
 8011cd8:	ad02      	add	r5, sp, #8
 8011cda:	4631      	mov	r1, r6
 8011cdc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011ce0:	4622      	mov	r2, r4
 8011ce2:	f7ef f997 	bl	8001014 <memcpy>
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f002 f914 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8011cec:	e014      	b.n	8011d18 <GUI__SetText+0x70>
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f002 fb50 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 8011cf4:	4607      	mov	r7, r0
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d0de      	beq.n	8011cb8 <GUI__SetText+0x10>
 8011cfa:	f002 f8fd 	bl	8013ef8 <GUI_ALLOC_LockH>
 8011cfe:	ac02      	add	r4, sp, #8
 8011d00:	4631      	mov	r1, r6
 8011d02:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011d06:	f007 fd33 	bl	8019770 <strcpy>
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f002 f902 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8011d10:	4628      	mov	r0, r5
 8011d12:	f002 fb43 	bl	801439c <GUI_ALLOC_FreePtr>
 8011d16:	602f      	str	r7, [r5, #0]
 8011d18:	2001      	movs	r0, #1
 8011d1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08011d1c <GUI__ReduceRect>:
 8011d1c:	880b      	ldrh	r3, [r1, #0]
 8011d1e:	b292      	uxth	r2, r2
 8011d20:	18d3      	adds	r3, r2, r3
 8011d22:	8003      	strh	r3, [r0, #0]
 8011d24:	888b      	ldrh	r3, [r1, #4]
 8011d26:	1a9b      	subs	r3, r3, r2
 8011d28:	8083      	strh	r3, [r0, #4]
 8011d2a:	884b      	ldrh	r3, [r1, #2]
 8011d2c:	88c9      	ldrh	r1, [r1, #6]
 8011d2e:	18d3      	adds	r3, r2, r3
 8011d30:	1a8a      	subs	r2, r1, r2
 8011d32:	8043      	strh	r3, [r0, #2]
 8011d34:	80c2      	strh	r2, [r0, #6]
 8011d36:	4770      	bx	lr

08011d38 <GUI__ManageCacheEx>:
 8011d38:	2801      	cmp	r0, #1
 8011d3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d3c:	4604      	mov	r4, r0
 8011d3e:	460d      	mov	r5, r1
 8011d40:	dc5f      	bgt.n	8011e02 <GUI__ManageCacheEx+0xca>
 8011d42:	2901      	cmp	r1, #1
 8011d44:	d004      	beq.n	8011d50 <GUI__ManageCacheEx+0x18>
 8011d46:	2902      	cmp	r1, #2
 8011d48:	d020      	beq.n	8011d8c <GUI__ManageCacheEx+0x54>
 8011d4a:	2900      	cmp	r1, #0
 8011d4c:	d034      	beq.n	8011db8 <GUI__ManageCacheEx+0x80>
 8011d4e:	e058      	b.n	8011e02 <GUI__ManageCacheEx+0xca>
 8011d50:	4e2d      	ldr	r6, [pc, #180]	; (8011e08 <GUI__ManageCacheEx+0xd0>)
 8011d52:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8011d56:	b9af      	cbnz	r7, 8011d84 <GUI__ManageCacheEx+0x4c>
 8011d58:	f001 fbaa 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011d5c:	9001      	str	r0, [sp, #4]
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d04f      	beq.n	8011e02 <GUI__ManageCacheEx+0xca>
 8011d62:	68c2      	ldr	r2, [r0, #12]
 8011d64:	210d      	movs	r1, #13
 8011d66:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011d68:	a801      	add	r0, sp, #4
 8011d6a:	4798      	blx	r3
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	d047      	beq.n	8011e02 <GUI__ManageCacheEx+0xca>
 8011d72:	4629      	mov	r1, r5
 8011d74:	9801      	ldr	r0, [sp, #4]
 8011d76:	4790      	blx	r2
 8011d78:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011d7c:	1c41      	adds	r1, r0, #1
 8011d7e:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 8011d82:	e017      	b.n	8011db4 <GUI__ManageCacheEx+0x7c>
 8011d84:	3701      	adds	r7, #1
 8011d86:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8011d8a:	e03a      	b.n	8011e02 <GUI__ManageCacheEx+0xca>
 8011d8c:	f001 fb90 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011d90:	9001      	str	r0, [sp, #4]
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d035      	beq.n	8011e02 <GUI__ManageCacheEx+0xca>
 8011d96:	68c4      	ldr	r4, [r0, #12]
 8011d98:	210d      	movs	r1, #13
 8011d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d9c:	a801      	add	r0, sp, #4
 8011d9e:	4798      	blx	r3
 8011da0:	4604      	mov	r4, r0
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d02d      	beq.n	8011e02 <GUI__ManageCacheEx+0xca>
 8011da6:	4819      	ldr	r0, [pc, #100]	; (8011e0c <GUI__ManageCacheEx+0xd4>)
 8011da8:	6801      	ldr	r1, [r0, #0]
 8011daa:	b101      	cbz	r1, 8011dae <GUI__ManageCacheEx+0x76>
 8011dac:	4788      	blx	r1
 8011dae:	9801      	ldr	r0, [sp, #4]
 8011db0:	2102      	movs	r1, #2
 8011db2:	47a0      	blx	r4
 8011db4:	2000      	movs	r0, #0
 8011db6:	e025      	b.n	8011e04 <GUI__ManageCacheEx+0xcc>
 8011db8:	4b13      	ldr	r3, [pc, #76]	; (8011e08 <GUI__ManageCacheEx+0xd0>)
 8011dba:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8011dbe:	2901      	cmp	r1, #1
 8011dc0:	d001      	beq.n	8011dc6 <GUI__ManageCacheEx+0x8e>
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	e014      	b.n	8011df0 <GUI__ManageCacheEx+0xb8>
 8011dc6:	f001 fb73 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8011dca:	9001      	str	r0, [sp, #4]
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d0f8      	beq.n	8011dc2 <GUI__ManageCacheEx+0x8a>
 8011dd0:	68c0      	ldr	r0, [r0, #12]
 8011dd2:	210d      	movs	r1, #13
 8011dd4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8011dd6:	a801      	add	r0, sp, #4
 8011dd8:	4790      	blx	r2
 8011dda:	4605      	mov	r5, r0
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d0f0      	beq.n	8011dc2 <GUI__ManageCacheEx+0x8a>
 8011de0:	4b0a      	ldr	r3, [pc, #40]	; (8011e0c <GUI__ManageCacheEx+0xd4>)
 8011de2:	6819      	ldr	r1, [r3, #0]
 8011de4:	b101      	cbz	r1, 8011de8 <GUI__ManageCacheEx+0xb0>
 8011de6:	4788      	blx	r1
 8011de8:	9801      	ldr	r0, [sp, #4]
 8011dea:	2100      	movs	r1, #0
 8011dec:	47a8      	blx	r5
 8011dee:	2000      	movs	r0, #0
 8011df0:	4b05      	ldr	r3, [pc, #20]	; (8011e08 <GUI__ManageCacheEx+0xd0>)
 8011df2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8011df6:	2a00      	cmp	r2, #0
 8011df8:	bf18      	it	ne
 8011dfa:	3a01      	subne	r2, #1
 8011dfc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8011e00:	e000      	b.n	8011e04 <GUI__ManageCacheEx+0xcc>
 8011e02:	2001      	movs	r0, #1
 8011e04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011e06:	bf00      	nop
 8011e08:	2000e064 	.word	0x2000e064
 8011e0c:	2000e060 	.word	0x2000e060

08011e10 <GUI__ManageCache>:
 8011e10:	4b02      	ldr	r3, [pc, #8]	; (8011e1c <GUI__ManageCache+0xc>)
 8011e12:	4601      	mov	r1, r0
 8011e14:	6818      	ldr	r0, [r3, #0]
 8011e16:	7c40      	ldrb	r0, [r0, #17]
 8011e18:	f7ff bf8e 	b.w	8011d38 <GUI__ManageCacheEx>
 8011e1c:	20000308 	.word	0x20000308

08011e20 <GUI__IntersectRects>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011e26:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8011e2a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8011e2e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8011e32:	42b5      	cmp	r5, r6
 8011e34:	bfa8      	it	ge
 8011e36:	462e      	movge	r6, r5
 8011e38:	429c      	cmp	r4, r3
 8011e3a:	bfb8      	it	lt
 8011e3c:	461c      	movlt	r4, r3
 8011e3e:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8011e42:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011e46:	b2b3      	uxth	r3, r6
 8011e48:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8011e4c:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8011e50:	8043      	strh	r3, [r0, #2]
 8011e52:	42ae      	cmp	r6, r5
 8011e54:	bfb8      	it	lt
 8011e56:	4635      	movlt	r5, r6
 8011e58:	b2a4      	uxth	r4, r4
 8011e5a:	b2ad      	uxth	r5, r5
 8011e5c:	4291      	cmp	r1, r2
 8011e5e:	bfb8      	it	lt
 8011e60:	460a      	movlt	r2, r1
 8011e62:	8004      	strh	r4, [r0, #0]
 8011e64:	8085      	strh	r5, [r0, #4]
 8011e66:	b224      	sxth	r4, r4
 8011e68:	b22d      	sxth	r5, r5
 8011e6a:	b291      	uxth	r1, r2
 8011e6c:	42a5      	cmp	r5, r4
 8011e6e:	80c1      	strh	r1, [r0, #6]
 8011e70:	db06      	blt.n	8011e80 <GUI__IntersectRects+0x60>
 8011e72:	b208      	sxth	r0, r1
 8011e74:	b21b      	sxth	r3, r3
 8011e76:	4298      	cmp	r0, r3
 8011e78:	bfb4      	ite	lt
 8011e7a:	2000      	movlt	r0, #0
 8011e7c:	2001      	movge	r0, #1
 8011e7e:	bd70      	pop	{r4, r5, r6, pc}
 8011e80:	2000      	movs	r0, #0
 8011e82:	bd70      	pop	{r4, r5, r6, pc}

08011e84 <GUI__IntersectRect>:
 8011e84:	880b      	ldrh	r3, [r1, #0]
 8011e86:	b510      	push	{r4, lr}
 8011e88:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011e8c:	b21a      	sxth	r2, r3
 8011e8e:	4294      	cmp	r4, r2
 8011e90:	bfb8      	it	lt
 8011e92:	8003      	strhlt	r3, [r0, #0]
 8011e94:	884b      	ldrh	r3, [r1, #2]
 8011e96:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8011e9a:	b21a      	sxth	r2, r3
 8011e9c:	4294      	cmp	r4, r2
 8011e9e:	bfb8      	it	lt
 8011ea0:	8043      	strhlt	r3, [r0, #2]
 8011ea2:	888b      	ldrh	r3, [r1, #4]
 8011ea4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011ea8:	b21a      	sxth	r2, r3
 8011eaa:	4294      	cmp	r4, r2
 8011eac:	bfc8      	it	gt
 8011eae:	8083      	strhgt	r3, [r0, #4]
 8011eb0:	88cb      	ldrh	r3, [r1, #6]
 8011eb2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011eb6:	b21a      	sxth	r2, r3
 8011eb8:	4291      	cmp	r1, r2
 8011eba:	bfc8      	it	gt
 8011ebc:	80c3      	strhgt	r3, [r0, #6]
 8011ebe:	bd10      	pop	{r4, pc}

08011ec0 <_GetTwinArcPara>:
 8011ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec4:	fb01 f901 	mul.w	r9, r1, r1
 8011ec8:	1e47      	subs	r7, r0, #1
 8011eca:	4604      	mov	r4, r0
 8011ecc:	fb00 f000 	mul.w	r0, r0, r0
 8011ed0:	ebc9 0000 	rsb	r0, r9, r0
 8011ed4:	460d      	mov	r5, r1
 8011ed6:	4692      	mov	sl, r2
 8011ed8:	4698      	mov	r8, r3
 8011eda:	9e08      	ldr	r6, [sp, #32]
 8011edc:	f005 fc39 	bl	8017752 <GUI__sqrt32>
 8011ee0:	42bd      	cmp	r5, r7
 8011ee2:	f8ca 0000 	str.w	r0, [sl]
 8011ee6:	da10      	bge.n	8011f0a <_GetTwinArcPara+0x4a>
 8011ee8:	fb07 f107 	mul.w	r1, r7, r7
 8011eec:	ebc9 0001 	rsb	r0, r9, r1
 8011ef0:	f005 fc2f 	bl	8017752 <GUI__sqrt32>
 8011ef4:	3c02      	subs	r4, #2
 8011ef6:	42a5      	cmp	r5, r4
 8011ef8:	f8c8 0000 	str.w	r0, [r8]
 8011efc:	da03      	bge.n	8011f06 <_GetTwinArcPara+0x46>
 8011efe:	1e42      	subs	r2, r0, #1
 8011f00:	6032      	str	r2, [r6, #0]
 8011f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f06:	2300      	movs	r3, #0
 8011f08:	e002      	b.n	8011f10 <_GetTwinArcPara+0x50>
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	f8c8 3000 	str.w	r3, [r8]
 8011f10:	6033      	str	r3, [r6, #0]
 8011f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08011f18 <GUI__DrawTwinArc2>:
 8011f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1c:	461c      	mov	r4, r3
 8011f1e:	4b50      	ldr	r3, [pc, #320]	; (8012060 <GUI__DrawTwinArc2+0x148>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8011f24:	eb00 0805 	add.w	r8, r0, r5
 8011f28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011f2a:	eb01 0905 	add.w	r9, r1, r5
 8011f2e:	1815      	adds	r5, r2, r0
 8011f30:	b08b      	sub	sp, #44	; 0x2c
 8011f32:	1929      	adds	r1, r5, r4
 8011f34:	1e4a      	subs	r2, r1, #1
 8011f36:	a808      	add	r0, sp, #32
 8011f38:	f8ad 8020 	strh.w	r8, [sp, #32]
 8011f3c:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8011f40:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8011f44:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8011f48:	f7fc fe7c 	bl	800ec44 <WM__InitIVRSearch>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	f000 8083 	beq.w	8012058 <GUI__DrawTwinArc2+0x140>
 8011f52:	2c00      	cmp	r4, #0
 8011f54:	dc02      	bgt.n	8011f5c <GUI__DrawTwinArc2+0x44>
 8011f56:	f7fc fdb5 	bl	800eac4 <WM__GetNextIVR>
 8011f5a:	e7f7      	b.n	8011f4c <GUI__DrawTwinArc2+0x34>
 8011f5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011f5e:	f000 fc05 	bl	801276c <GUI_SetColor>
 8011f62:	1e67      	subs	r7, r4, #1
 8011f64:	462e      	mov	r6, r5
 8011f66:	3601      	adds	r6, #1
 8011f68:	b317      	cbz	r7, 8011fb0 <GUI__DrawTwinArc2+0x98>
 8011f6a:	ab07      	add	r3, sp, #28
 8011f6c:	4639      	mov	r1, r7
 8011f6e:	9300      	str	r3, [sp, #0]
 8011f70:	4620      	mov	r0, r4
 8011f72:	aa05      	add	r2, sp, #20
 8011f74:	ab06      	add	r3, sp, #24
 8011f76:	f7ff ffa3 	bl	8011ec0 <_GetTwinArcPara>
 8011f7a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8011f7e:	9905      	ldr	r1, [sp, #20]
 8011f80:	eb08 0004 	add.w	r0, r8, r4
 8011f84:	ebc4 0309 	rsb	r3, r4, r9
 8011f88:	ebcb 0200 	rsb	r2, fp, r0
 8011f8c:	eb03 0a01 	add.w	sl, r3, r1
 8011f90:	1a40      	subs	r0, r0, r1
 8011f92:	3a01      	subs	r2, #1
 8011f94:	4631      	mov	r1, r6
 8011f96:	9303      	str	r3, [sp, #12]
 8011f98:	f7ff fb02 	bl	80115a0 <LCD_DrawHLine>
 8011f9c:	9803      	ldr	r0, [sp, #12]
 8011f9e:	eb00 010b 	add.w	r1, r0, fp
 8011fa2:	1c48      	adds	r0, r1, #1
 8011fa4:	4652      	mov	r2, sl
 8011fa6:	4631      	mov	r1, r6
 8011fa8:	f7ff fafa 	bl	80115a0 <LCD_DrawHLine>
 8011fac:	3f01      	subs	r7, #1
 8011fae:	e7da      	b.n	8011f66 <GUI__DrawTwinArc2+0x4e>
 8011fb0:	2c01      	cmp	r4, #1
 8011fb2:	d0d0      	beq.n	8011f56 <GUI__DrawTwinArc2+0x3e>
 8011fb4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011fb6:	f000 fbd9 	bl	801276c <GUI_SetColor>
 8011fba:	1ea6      	subs	r6, r4, #2
 8011fbc:	b326      	cbz	r6, 8012008 <GUI__DrawTwinArc2+0xf0>
 8011fbe:	1961      	adds	r1, r4, r5
 8011fc0:	aa07      	add	r2, sp, #28
 8011fc2:	ebc6 0a01 	rsb	sl, r6, r1
 8011fc6:	9200      	str	r2, [sp, #0]
 8011fc8:	4631      	mov	r1, r6
 8011fca:	4620      	mov	r0, r4
 8011fcc:	aa05      	add	r2, sp, #20
 8011fce:	ab06      	add	r3, sp, #24
 8011fd0:	f7ff ff76 	bl	8011ec0 <_GetTwinArcPara>
 8011fd4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8011fd8:	9906      	ldr	r1, [sp, #24]
 8011fda:	eb08 0004 	add.w	r0, r8, r4
 8011fde:	ebc4 0309 	rsb	r3, r4, r9
 8011fe2:	ebcb 0200 	rsb	r2, fp, r0
 8011fe6:	185f      	adds	r7, r3, r1
 8011fe8:	1a40      	subs	r0, r0, r1
 8011fea:	3a01      	subs	r2, #1
 8011fec:	4651      	mov	r1, sl
 8011fee:	9303      	str	r3, [sp, #12]
 8011ff0:	f7ff fad6 	bl	80115a0 <LCD_DrawHLine>
 8011ff4:	9803      	ldr	r0, [sp, #12]
 8011ff6:	eb00 010b 	add.w	r1, r0, fp
 8011ffa:	1c48      	adds	r0, r1, #1
 8011ffc:	463a      	mov	r2, r7
 8011ffe:	4651      	mov	r1, sl
 8012000:	f7ff face 	bl	80115a0 <LCD_DrawHLine>
 8012004:	3e01      	subs	r6, #1
 8012006:	e7d9      	b.n	8011fbc <GUI__DrawTwinArc2+0xa4>
 8012008:	2c02      	cmp	r4, #2
 801200a:	d0a4      	beq.n	8011f56 <GUI__DrawTwinArc2+0x3e>
 801200c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801200e:	f000 fbad 	bl	801276c <GUI_SetColor>
 8012012:	1ee6      	subs	r6, r4, #3
 8012014:	2e00      	cmp	r6, #0
 8012016:	d09e      	beq.n	8011f56 <GUI__DrawTwinArc2+0x3e>
 8012018:	af07      	add	r7, sp, #28
 801201a:	4631      	mov	r1, r6
 801201c:	9700      	str	r7, [sp, #0]
 801201e:	4620      	mov	r0, r4
 8012020:	aa05      	add	r2, sp, #20
 8012022:	ab06      	add	r3, sp, #24
 8012024:	f7ff ff4c 	bl	8011ec0 <_GetTwinArcPara>
 8012028:	eb04 0a05 	add.w	sl, r4, r5
 801202c:	9807      	ldr	r0, [sp, #28]
 801202e:	eb08 0304 	add.w	r3, r8, r4
 8012032:	ebc6 0a0a 	rsb	sl, r6, sl
 8012036:	ebc4 0b09 	rsb	fp, r4, r9
 801203a:	1e5a      	subs	r2, r3, #1
 801203c:	eb0b 0700 	add.w	r7, fp, r0
 8012040:	4651      	mov	r1, sl
 8012042:	1a18      	subs	r0, r3, r0
 8012044:	f7ff faac 	bl	80115a0 <LCD_DrawHLine>
 8012048:	f10b 0001 	add.w	r0, fp, #1
 801204c:	4651      	mov	r1, sl
 801204e:	463a      	mov	r2, r7
 8012050:	f7ff faa6 	bl	80115a0 <LCD_DrawHLine>
 8012054:	3e01      	subs	r6, #1
 8012056:	e7dd      	b.n	8012014 <GUI__DrawTwinArc2+0xfc>
 8012058:	b00b      	add	sp, #44	; 0x2c
 801205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205e:	bf00      	nop
 8012060:	20000308 	.word	0x20000308

08012064 <GUI__DrawTwinArc4>:
 8012064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012068:	4d73      	ldr	r5, [pc, #460]	; (8012238 <GUI__DrawTwinArc4+0x1d4>)
 801206a:	682f      	ldr	r7, [r5, #0]
 801206c:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 801206e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8012070:	b08d      	sub	sp, #52	; 0x34
 8012072:	1980      	adds	r0, r0, r6
 8012074:	1949      	adds	r1, r1, r5
 8012076:	195f      	adds	r7, r3, r5
 8012078:	9004      	str	r0, [sp, #16]
 801207a:	1996      	adds	r6, r2, r6
 801207c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8012080:	a80a      	add	r0, sp, #40	; 0x28
 8012082:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8012084:	9105      	str	r1, [sp, #20]
 8012086:	460d      	mov	r5, r1
 8012088:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801208c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8012090:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8012094:	f7fc fdd6 	bl	800ec44 <WM__InitIVRSearch>
 8012098:	2800      	cmp	r0, #0
 801209a:	f000 80ca 	beq.w	8012232 <GUI__DrawTwinArc4+0x1ce>
 801209e:	2c00      	cmp	r4, #0
 80120a0:	dc02      	bgt.n	80120a8 <GUI__DrawTwinArc4+0x44>
 80120a2:	f7fc fd0f 	bl	800eac4 <WM__GetNextIVR>
 80120a6:	e7f7      	b.n	8012098 <GUI__DrawTwinArc4+0x34>
 80120a8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80120aa:	f000 fb5f 	bl	801276c <GUI_SetColor>
 80120ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80120b2:	1e65      	subs	r5, r4, #1
 80120b4:	f108 0801 	add.w	r8, r8, #1
 80120b8:	2d00      	cmp	r5, #0
 80120ba:	d035      	beq.n	8012128 <GUI__DrawTwinArc4+0xc4>
 80120bc:	1b39      	subs	r1, r7, r4
 80120be:	ab09      	add	r3, sp, #36	; 0x24
 80120c0:	eb01 0a05 	add.w	sl, r1, r5
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	4629      	mov	r1, r5
 80120c8:	4620      	mov	r0, r4
 80120ca:	aa07      	add	r2, sp, #28
 80120cc:	ab08      	add	r3, sp, #32
 80120ce:	f7ff fef7 	bl	8011ec0 <_GetTwinArcPara>
 80120d2:	9804      	ldr	r0, [sp, #16]
 80120d4:	9a08      	ldr	r2, [sp, #32]
 80120d6:	9907      	ldr	r1, [sp, #28]
 80120d8:	1903      	adds	r3, r0, r4
 80120da:	1a98      	subs	r0, r3, r2
 80120dc:	ebc4 0b06 	rsb	fp, r4, r6
 80120e0:	ebc1 0c03 	rsb	ip, r1, r3
 80120e4:	eb0b 0901 	add.w	r9, fp, r1
 80120e8:	1e43      	subs	r3, r0, #1
 80120ea:	eb0b 0102 	add.w	r1, fp, r2
 80120ee:	4660      	mov	r0, ip
 80120f0:	461a      	mov	r2, r3
 80120f2:	f101 0b01 	add.w	fp, r1, #1
 80120f6:	4641      	mov	r1, r8
 80120f8:	9302      	str	r3, [sp, #8]
 80120fa:	f8cd c00c 	str.w	ip, [sp, #12]
 80120fe:	f7ff fa4f 	bl	80115a0 <LCD_DrawHLine>
 8012102:	4658      	mov	r0, fp
 8012104:	4641      	mov	r1, r8
 8012106:	464a      	mov	r2, r9
 8012108:	f7ff fa4a 	bl	80115a0 <LCD_DrawHLine>
 801210c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012110:	9a02      	ldr	r2, [sp, #8]
 8012112:	4660      	mov	r0, ip
 8012114:	4651      	mov	r1, sl
 8012116:	f7ff fa43 	bl	80115a0 <LCD_DrawHLine>
 801211a:	4658      	mov	r0, fp
 801211c:	4651      	mov	r1, sl
 801211e:	464a      	mov	r2, r9
 8012120:	f7ff fa3e 	bl	80115a0 <LCD_DrawHLine>
 8012124:	3d01      	subs	r5, #1
 8012126:	e7c5      	b.n	80120b4 <GUI__DrawTwinArc4+0x50>
 8012128:	2c01      	cmp	r4, #1
 801212a:	d0ba      	beq.n	80120a2 <GUI__DrawTwinArc4+0x3e>
 801212c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801212e:	f000 fb1d 	bl	801276c <GUI_SetColor>
 8012132:	1ea5      	subs	r5, r4, #2
 8012134:	2d00      	cmp	r5, #0
 8012136:	d03b      	beq.n	80121b0 <GUI__DrawTwinArc4+0x14c>
 8012138:	9805      	ldr	r0, [sp, #20]
 801213a:	a909      	add	r1, sp, #36	; 0x24
 801213c:	ebc4 0e07 	rsb	lr, r4, r7
 8012140:	eb04 0800 	add.w	r8, r4, r0
 8012144:	9100      	str	r1, [sp, #0]
 8012146:	4620      	mov	r0, r4
 8012148:	4629      	mov	r1, r5
 801214a:	aa07      	add	r2, sp, #28
 801214c:	ab08      	add	r3, sp, #32
 801214e:	eb0e 0905 	add.w	r9, lr, r5
 8012152:	f7ff feb5 	bl	8011ec0 <_GetTwinArcPara>
 8012156:	9b04      	ldr	r3, [sp, #16]
 8012158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801215a:	9908      	ldr	r1, [sp, #32]
 801215c:	1918      	adds	r0, r3, r4
 801215e:	1a83      	subs	r3, r0, r2
 8012160:	ebc4 0a06 	rsb	sl, r4, r6
 8012164:	ebc1 0c00 	rsb	ip, r1, r0
 8012168:	3b01      	subs	r3, #1
 801216a:	ebc5 0b08 	rsb	fp, r5, r8
 801216e:	eb0a 0002 	add.w	r0, sl, r2
 8012172:	eb0a 0801 	add.w	r8, sl, r1
 8012176:	461a      	mov	r2, r3
 8012178:	f100 0a01 	add.w	sl, r0, #1
 801217c:	4659      	mov	r1, fp
 801217e:	4660      	mov	r0, ip
 8012180:	9302      	str	r3, [sp, #8]
 8012182:	f8cd c00c 	str.w	ip, [sp, #12]
 8012186:	f7ff fa0b 	bl	80115a0 <LCD_DrawHLine>
 801218a:	4650      	mov	r0, sl
 801218c:	4659      	mov	r1, fp
 801218e:	4642      	mov	r2, r8
 8012190:	f7ff fa06 	bl	80115a0 <LCD_DrawHLine>
 8012194:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012198:	9a02      	ldr	r2, [sp, #8]
 801219a:	4660      	mov	r0, ip
 801219c:	4649      	mov	r1, r9
 801219e:	f7ff f9ff 	bl	80115a0 <LCD_DrawHLine>
 80121a2:	4650      	mov	r0, sl
 80121a4:	4649      	mov	r1, r9
 80121a6:	4642      	mov	r2, r8
 80121a8:	f7ff f9fa 	bl	80115a0 <LCD_DrawHLine>
 80121ac:	3d01      	subs	r5, #1
 80121ae:	e7c1      	b.n	8012134 <GUI__DrawTwinArc4+0xd0>
 80121b0:	2c02      	cmp	r4, #2
 80121b2:	f43f af76 	beq.w	80120a2 <GUI__DrawTwinArc4+0x3e>
 80121b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80121b8:	f000 fad8 	bl	801276c <GUI_SetColor>
 80121bc:	1ee5      	subs	r5, r4, #3
 80121be:	2d00      	cmp	r5, #0
 80121c0:	f43f af6f 	beq.w	80120a2 <GUI__DrawTwinArc4+0x3e>
 80121c4:	9b05      	ldr	r3, [sp, #20]
 80121c6:	aa09      	add	r2, sp, #36	; 0x24
 80121c8:	4629      	mov	r1, r5
 80121ca:	eb04 0b03 	add.w	fp, r4, r3
 80121ce:	9200      	str	r2, [sp, #0]
 80121d0:	4620      	mov	r0, r4
 80121d2:	aa07      	add	r2, sp, #28
 80121d4:	ab08      	add	r3, sp, #32
 80121d6:	f7ff fe73 	bl	8011ec0 <_GetTwinArcPara>
 80121da:	9804      	ldr	r0, [sp, #16]
 80121dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121de:	1901      	adds	r1, r0, r4
 80121e0:	ebc2 0c01 	rsb	ip, r2, r1
 80121e4:	1e4b      	subs	r3, r1, #1
 80121e6:	ebc5 0b0b 	rsb	fp, r5, fp
 80121ea:	ebc4 0a06 	rsb	sl, r4, r6
 80121ee:	eb0a 0802 	add.w	r8, sl, r2
 80121f2:	4660      	mov	r0, ip
 80121f4:	461a      	mov	r2, r3
 80121f6:	f10a 0a01 	add.w	sl, sl, #1
 80121fa:	4659      	mov	r1, fp
 80121fc:	9302      	str	r3, [sp, #8]
 80121fe:	f8cd c00c 	str.w	ip, [sp, #12]
 8012202:	f7ff f9cd 	bl	80115a0 <LCD_DrawHLine>
 8012206:	4650      	mov	r0, sl
 8012208:	4659      	mov	r1, fp
 801220a:	4642      	mov	r2, r8
 801220c:	f7ff f9c8 	bl	80115a0 <LCD_DrawHLine>
 8012210:	ebc4 0907 	rsb	r9, r4, r7
 8012214:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012218:	9a02      	ldr	r2, [sp, #8]
 801221a:	44a9      	add	r9, r5
 801221c:	4660      	mov	r0, ip
 801221e:	4649      	mov	r1, r9
 8012220:	f7ff f9be 	bl	80115a0 <LCD_DrawHLine>
 8012224:	4650      	mov	r0, sl
 8012226:	4649      	mov	r1, r9
 8012228:	4642      	mov	r2, r8
 801222a:	f7ff f9b9 	bl	80115a0 <LCD_DrawHLine>
 801222e:	3d01      	subs	r5, #1
 8012230:	e7c5      	b.n	80121be <GUI__DrawTwinArc4+0x15a>
 8012232:	b00d      	add	sp, #52	; 0x34
 8012234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012238:	20000308 	.word	0x20000308

0801223c <GUI__MixColors>:
 801223c:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8012240:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8012244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012246:	d027      	beq.n	8012298 <GUI__MixColors+0x5c>
 8012248:	43d5      	mvns	r5, r2
 801224a:	b2eb      	uxtb	r3, r5
 801224c:	b2cd      	uxtb	r5, r1
 801224e:	b2c6      	uxtb	r6, r0
 8012250:	435d      	muls	r5, r3
 8012252:	fb06 5502 	mla	r5, r6, r2, r5
 8012256:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 801225a:	435e      	muls	r6, r3
 801225c:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 8012260:	fb04 6402 	mla	r4, r4, r2, r6
 8012264:	0a26      	lsrs	r6, r4, #8
 8012266:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 801226a:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 801226e:	435c      	muls	r4, r3
 8012270:	0e09      	lsrs	r1, r1, #24
 8012272:	434b      	muls	r3, r1
 8012274:	0e00      	lsrs	r0, r0, #24
 8012276:	fb07 4402 	mla	r4, r7, r2, r4
 801227a:	0a24      	lsrs	r4, r4, #8
 801227c:	fb00 3202 	mla	r2, r0, r2, r3
 8012280:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 8012284:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8012288:	0411      	lsls	r1, r2, #16
 801228a:	4318      	orrs	r0, r3
 801228c:	f404 027f 	and.w	r2, r4, #16711680	; 0xff0000
 8012290:	4310      	orrs	r0, r2
 8012292:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8012296:	4308      	orrs	r0, r1
 8012298:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801229c <_OnExit>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	4c0a      	ldr	r4, [pc, #40]	; (80122c8 <_OnExit+0x2c>)
 80122a0:	4d0a      	ldr	r5, [pc, #40]	; (80122cc <_OnExit+0x30>)
 80122a2:	6820      	ldr	r0, [r4, #0]
 80122a4:	4e0a      	ldr	r6, [pc, #40]	; (80122d0 <_OnExit+0x34>)
 80122a6:	f001 fe13 	bl	8013ed0 <GUI_ALLOC_FreeFixedBlock>
 80122aa:	6828      	ldr	r0, [r5, #0]
 80122ac:	f001 fe10 	bl	8013ed0 <GUI_ALLOC_FreeFixedBlock>
 80122b0:	6830      	ldr	r0, [r6, #0]
 80122b2:	f001 fe0d 	bl	8013ed0 <GUI_ALLOC_FreeFixedBlock>
 80122b6:	4a07      	ldr	r2, [pc, #28]	; (80122d4 <_OnExit+0x38>)
 80122b8:	4807      	ldr	r0, [pc, #28]	; (80122d8 <_OnExit+0x3c>)
 80122ba:	2300      	movs	r3, #0
 80122bc:	6033      	str	r3, [r6, #0]
 80122be:	602b      	str	r3, [r5, #0]
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	6013      	str	r3, [r2, #0]
 80122c4:	6003      	str	r3, [r0, #0]
 80122c6:	bd70      	pop	{r4, r5, r6, pc}
 80122c8:	2000e070 	.word	0x2000e070
 80122cc:	2000e06c 	.word	0x2000e06c
 80122d0:	2000e074 	.word	0x2000e074
 80122d4:	2000e078 	.word	0x2000e078
 80122d8:	2000e088 	.word	0x2000e088

080122dc <GUI__GetAlphaBuffer>:
 80122dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e0:	4698      	mov	r8, r3
 80122e2:	4b2a      	ldr	r3, [pc, #168]	; (801238c <GUI__GetAlphaBuffer+0xb0>)
 80122e4:	4616      	mov	r6, r2
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	4605      	mov	r5, r0
 80122ea:	460f      	mov	r7, r1
 80122ec:	b932      	cbnz	r2, 80122fc <GUI__GetAlphaBuffer+0x20>
 80122ee:	2001      	movs	r0, #1
 80122f0:	6018      	str	r0, [r3, #0]
 80122f2:	4927      	ldr	r1, [pc, #156]	; (8012390 <GUI__GetAlphaBuffer+0xb4>)
 80122f4:	4827      	ldr	r0, [pc, #156]	; (8012394 <GUI__GetAlphaBuffer+0xb8>)
 80122f6:	6001      	str	r1, [r0, #0]
 80122f8:	f001 f9fc 	bl	80136f4 <GUI__RegisterExit>
 80122fc:	4c26      	ldr	r4, [pc, #152]	; (8012398 <GUI__GetAlphaBuffer+0xbc>)
 80122fe:	6823      	ldr	r3, [r4, #0]
 8012300:	b933      	cbnz	r3, 8012310 <GUI__GetAlphaBuffer+0x34>
 8012302:	4a26      	ldr	r2, [pc, #152]	; (801239c <GUI__GetAlphaBuffer+0xc0>)
 8012304:	6810      	ldr	r0, [r2, #0]
 8012306:	6020      	str	r0, [r4, #0]
 8012308:	b910      	cbnz	r0, 8012310 <GUI__GetAlphaBuffer+0x34>
 801230a:	f7ff f8a5 	bl	8011458 <LCD_GetVXSizeMax>
 801230e:	6020      	str	r0, [r4, #0]
 8012310:	f1b8 0f00 	cmp.w	r8, #0
 8012314:	d002      	beq.n	801231c <GUI__GetAlphaBuffer+0x40>
 8012316:	6821      	ldr	r1, [r4, #0]
 8012318:	f8c8 1000 	str.w	r1, [r8]
 801231c:	b195      	cbz	r5, 8012344 <GUI__GetAlphaBuffer+0x68>
 801231e:	4c20      	ldr	r4, [pc, #128]	; (80123a0 <GUI__GetAlphaBuffer+0xc4>)
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	b953      	cbnz	r3, 801233a <GUI__GetAlphaBuffer+0x5e>
 8012324:	4a1c      	ldr	r2, [pc, #112]	; (8012398 <GUI__GetAlphaBuffer+0xbc>)
 8012326:	6810      	ldr	r0, [r2, #0]
 8012328:	0080      	lsls	r0, r0, #2
 801232a:	f001 ff6b 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 801232e:	6020      	str	r0, [r4, #0]
 8012330:	f1d0 0401 	rsbs	r4, r0, #1
 8012334:	bf38      	it	cc
 8012336:	2400      	movcc	r4, #0
 8012338:	e000      	b.n	801233c <GUI__GetAlphaBuffer+0x60>
 801233a:	2400      	movs	r4, #0
 801233c:	4918      	ldr	r1, [pc, #96]	; (80123a0 <GUI__GetAlphaBuffer+0xc4>)
 801233e:	680b      	ldr	r3, [r1, #0]
 8012340:	602b      	str	r3, [r5, #0]
 8012342:	e000      	b.n	8012346 <GUI__GetAlphaBuffer+0x6a>
 8012344:	462c      	mov	r4, r5
 8012346:	b177      	cbz	r7, 8012366 <GUI__GetAlphaBuffer+0x8a>
 8012348:	4d16      	ldr	r5, [pc, #88]	; (80123a4 <GUI__GetAlphaBuffer+0xc8>)
 801234a:	682a      	ldr	r2, [r5, #0]
 801234c:	b942      	cbnz	r2, 8012360 <GUI__GetAlphaBuffer+0x84>
 801234e:	4812      	ldr	r0, [pc, #72]	; (8012398 <GUI__GetAlphaBuffer+0xbc>)
 8012350:	6801      	ldr	r1, [r0, #0]
 8012352:	0088      	lsls	r0, r1, #2
 8012354:	f001 ff56 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 8012358:	6028      	str	r0, [r5, #0]
 801235a:	2800      	cmp	r0, #0
 801235c:	bf08      	it	eq
 801235e:	2401      	moveq	r4, #1
 8012360:	4b10      	ldr	r3, [pc, #64]	; (80123a4 <GUI__GetAlphaBuffer+0xc8>)
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	603a      	str	r2, [r7, #0]
 8012366:	b176      	cbz	r6, 8012386 <GUI__GetAlphaBuffer+0xaa>
 8012368:	4d0f      	ldr	r5, [pc, #60]	; (80123a8 <GUI__GetAlphaBuffer+0xcc>)
 801236a:	6828      	ldr	r0, [r5, #0]
 801236c:	b940      	cbnz	r0, 8012380 <GUI__GetAlphaBuffer+0xa4>
 801236e:	490a      	ldr	r1, [pc, #40]	; (8012398 <GUI__GetAlphaBuffer+0xbc>)
 8012370:	680b      	ldr	r3, [r1, #0]
 8012372:	0098      	lsls	r0, r3, #2
 8012374:	f001 ff46 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 8012378:	6028      	str	r0, [r5, #0]
 801237a:	2800      	cmp	r0, #0
 801237c:	bf08      	it	eq
 801237e:	2401      	moveq	r4, #1
 8012380:	4a09      	ldr	r2, [pc, #36]	; (80123a8 <GUI__GetAlphaBuffer+0xcc>)
 8012382:	6810      	ldr	r0, [r2, #0]
 8012384:	6030      	str	r0, [r6, #0]
 8012386:	4620      	mov	r0, r4
 8012388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238c:	2000e088 	.word	0x2000e088
 8012390:	0801229d 	.word	0x0801229d
 8012394:	2000e080 	.word	0x2000e080
 8012398:	2000e078 	.word	0x2000e078
 801239c:	2000eb64 	.word	0x2000eb64
 80123a0:	2000e070 	.word	0x2000e070
 80123a4:	2000e06c 	.word	0x2000e06c
 80123a8:	2000e074 	.word	0x2000e074

080123ac <GUI__DoAlphaBlending>:
 80123ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b0:	b093      	sub	sp, #76	; 0x4c
 80123b2:	2400      	movs	r4, #0
 80123b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80123b6:	900a      	str	r0, [sp, #40]	; 0x28
 80123b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80123ba:	4617      	mov	r7, r2
 80123bc:	4698      	mov	r8, r3
 80123be:	6034      	str	r4, [r6, #0]
 80123c0:	a80f      	add	r0, sp, #60	; 0x3c
 80123c2:	a910      	add	r1, sp, #64	; 0x40
 80123c4:	4622      	mov	r2, r4
 80123c6:	ab11      	add	r3, sp, #68	; 0x44
 80123c8:	f7ff ff88 	bl	80122dc <GUI__GetAlphaBuffer>
 80123cc:	4605      	mov	r5, r0
 80123ce:	2800      	cmp	r0, #0
 80123d0:	f040 80c4 	bne.w	801255c <GUI__DoAlphaBlending+0x1b0>
 80123d4:	4c63      	ldr	r4, [pc, #396]	; (8012564 <GUI__DoAlphaBlending+0x1b8>)
 80123d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80123d8:	6823      	ldr	r3, [r4, #0]
 80123da:	4963      	ldr	r1, [pc, #396]	; (8012568 <GUI__DoAlphaBlending+0x1bc>)
 80123dc:	7c58      	ldrb	r0, [r3, #17]
 80123de:	4590      	cmp	r8, r2
 80123e0:	bfa8      	it	ge
 80123e2:	4690      	movge	r8, r2
 80123e4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 80123e8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80123ec:	6913      	ldr	r3, [r2, #16]
 80123ee:	9206      	str	r2, [sp, #24]
 80123f0:	930c      	str	r3, [sp, #48]	; 0x30
 80123f2:	f7ff f803 	bl	80113fc <GUI_GetBitsPerPixelEx>
 80123f6:	9007      	str	r0, [sp, #28]
 80123f8:	6820      	ldr	r0, [r4, #0]
 80123fa:	4c5c      	ldr	r4, [pc, #368]	; (801256c <GUI__DoAlphaBlending+0x1c0>)
 80123fc:	7c40      	ldrb	r0, [r0, #17]
 80123fe:	f7ff f81b 	bl	8011438 <GUI_GetpfIndex2ColorEx>
 8012402:	42a0      	cmp	r0, r4
 8012404:	9004      	str	r0, [sp, #16]
 8012406:	d005      	beq.n	8012414 <GUI__DoAlphaBlending+0x68>
 8012408:	4d59      	ldr	r5, [pc, #356]	; (8012570 <GUI__DoAlphaBlending+0x1c4>)
 801240a:	1b41      	subs	r1, r0, r5
 801240c:	bf18      	it	ne
 801240e:	2101      	movne	r1, #1
 8012410:	9105      	str	r1, [sp, #20]
 8012412:	e000      	b.n	8012416 <GUI__DoAlphaBlending+0x6a>
 8012414:	9505      	str	r5, [sp, #20]
 8012416:	2500      	movs	r5, #0
 8012418:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801241a:	46ab      	mov	fp, r5
 801241c:	1d3a      	adds	r2, r7, #4
 801241e:	6838      	ldr	r0, [r7, #0]
 8012420:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012422:	920d      	str	r2, [sp, #52]	; 0x34
 8012424:	4798      	blx	r3
 8012426:	4681      	mov	r9, r0
 8012428:	0e00      	lsrs	r0, r0, #24
 801242a:	9008      	str	r0, [sp, #32]
 801242c:	f000 8088 	beq.w	8012540 <GUI__DoAlphaBlending+0x194>
 8012430:	f1bb 0f00 	cmp.w	fp, #0
 8012434:	d142      	bne.n	80124bc <GUI__DoAlphaBlending+0x110>
 8012436:	4a4b      	ldr	r2, [pc, #300]	; (8012564 <GUI__DoAlphaBlending+0x1b8>)
 8012438:	990a      	ldr	r1, [sp, #40]	; 0x28
 801243a:	6813      	ldr	r3, [r2, #0]
 801243c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801243e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8012442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012444:	eb05 0801 	add.w	r8, r5, r1
 8012448:	990a      	ldr	r1, [sp, #40]	; 0x28
 801244a:	4540      	cmp	r0, r8
 801244c:	bfc8      	it	gt
 801244e:	ebc8 0b00 	rsbgt	fp, r8, r0
 8012452:	eb01 0c02 	add.w	ip, r1, r2
 8012456:	9906      	ldr	r1, [sp, #24]
 8012458:	f8cd c00c 	str.w	ip, [sp, #12]
 801245c:	eb0b 0a05 	add.w	sl, fp, r5
 8012460:	9101      	str	r1, [sp, #4]
 8012462:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8012466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012468:	bfc8      	it	gt
 801246a:	4680      	movgt	r8, r0
 801246c:	eb03 000a 	add.w	r0, r3, sl
 8012470:	f10c 32ff 	add.w	r2, ip, #4294967295
 8012474:	9000      	str	r0, [sp, #0]
 8012476:	460b      	mov	r3, r1
 8012478:	4640      	mov	r0, r8
 801247a:	f005 f881 	bl	8017580 <GUI_ReadRectEx>
 801247e:	9a07      	ldr	r2, [sp, #28]
 8012480:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012482:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012486:	2a17      	cmp	r2, #23
 8012488:	dc06      	bgt.n	8012498 <GUI__DoAlphaBlending+0xec>
 801248a:	4450      	add	r0, sl
 801248c:	ebcb 0104 	rsb	r1, fp, r4
 8012490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012492:	f005 fa2f 	bl	80178f4 <GUI__ExpandPixelIndicesEx>
 8012496:	e001      	b.n	801249c <GUI__DoAlphaBlending+0xf0>
 8012498:	9a05      	ldr	r2, [sp, #20]
 801249a:	b912      	cbnz	r2, 80124a2 <GUI__DoAlphaBlending+0xf6>
 801249c:	f04f 0b01 	mov.w	fp, #1
 80124a0:	e00c      	b.n	80124bc <GUI__DoAlphaBlending+0x110>
 80124a2:	ebc8 0b0c 	rsb	fp, r8, ip
 80124a6:	4482      	add	sl, r0
 80124a8:	f8da 0000 	ldr.w	r0, [sl]
 80124ac:	9b04      	ldr	r3, [sp, #16]
 80124ae:	4798      	blx	r3
 80124b0:	f1bb 0b01 	subs.w	fp, fp, #1
 80124b4:	f84a 0b04 	str.w	r0, [sl], #4
 80124b8:	d1f6      	bne.n	80124a8 <GUI__DoAlphaBlending+0xfc>
 80124ba:	e7ef      	b.n	801249c <GUI__DoAlphaBlending+0xf0>
 80124bc:	492d      	ldr	r1, [pc, #180]	; (8012574 <GUI__DoAlphaBlending+0x1c8>)
 80124be:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80124c2:	f8d1 c000 	ldr.w	ip, [r1]
 80124c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80124c8:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 80124cc:	f1bc 0f00 	cmp.w	ip, #0
 80124d0:	d023      	beq.n	801251a <GUI__DoAlphaBlending+0x16e>
 80124d2:	4451      	add	r1, sl
 80124d4:	eb08 020a 	add.w	r2, r8, sl
 80124d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80124da:	9210      	str	r2, [sp, #64]	; 0x40
 80124dc:	4623      	mov	r3, r4
 80124de:	4638      	mov	r0, r7
 80124e0:	47e0      	blx	ip
 80124e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80124e4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80124e6:	2300      	movs	r3, #0
 80124e8:	58fd      	ldr	r5, [r7, r3]
 80124ea:	f005 407f 	and.w	r0, r5, #4278190080	; 0xff000000
 80124ee:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80124f2:	58d0      	ldr	r0, [r2, r3]
 80124f4:	d101      	bne.n	80124fa <GUI__DoAlphaBlending+0x14e>
 80124f6:	50c8      	str	r0, [r1, r3]
 80124f8:	e005      	b.n	8012506 <GUI__DoAlphaBlending+0x15a>
 80124fa:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80124fe:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8012502:	bf08      	it	eq
 8012504:	50cd      	streq	r5, [r1, r3]
 8012506:	3304      	adds	r3, #4
 8012508:	3c01      	subs	r4, #1
 801250a:	d1ed      	bne.n	80124e8 <GUI__DoAlphaBlending+0x13c>
 801250c:	6832      	ldr	r2, [r6, #0]
 801250e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012512:	f042 0101 	orr.w	r1, r2, #1
 8012516:	6031      	str	r1, [r6, #0]
 8012518:	e01e      	b.n	8012558 <GUI__DoAlphaBlending+0x1ac>
 801251a:	9f08      	ldr	r7, [sp, #32]
 801251c:	2fff      	cmp	r7, #255	; 0xff
 801251e:	d104      	bne.n	801252a <GUI__DoAlphaBlending+0x17e>
 8012520:	f851 700a 	ldr.w	r7, [r1, sl]
 8012524:	f848 700a 	str.w	r7, [r8, sl]
 8012528:	e011      	b.n	801254e <GUI__DoAlphaBlending+0x1a2>
 801252a:	9808      	ldr	r0, [sp, #32]
 801252c:	f851 100a 	ldr.w	r1, [r1, sl]
 8012530:	43c2      	mvns	r2, r0
 8012532:	b2d2      	uxtb	r2, r2
 8012534:	4648      	mov	r0, r9
 8012536:	f7ff fe81 	bl	801223c <GUI__MixColors>
 801253a:	f848 000a 	str.w	r0, [r8, sl]
 801253e:	e002      	b.n	8012546 <GUI__DoAlphaBlending+0x19a>
 8012540:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012542:	f847 9025 	str.w	r9, [r7, r5, lsl #2]
 8012546:	6833      	ldr	r3, [r6, #0]
 8012548:	f043 0101 	orr.w	r1, r3, #1
 801254c:	6031      	str	r1, [r6, #0]
 801254e:	3501      	adds	r5, #1
 8012550:	3c01      	subs	r4, #1
 8012552:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012554:	f47f af62 	bne.w	801241c <GUI__DoAlphaBlending+0x70>
 8012558:	9810      	ldr	r0, [sp, #64]	; 0x40
 801255a:	e000      	b.n	801255e <GUI__DoAlphaBlending+0x1b2>
 801255c:	4620      	mov	r0, r4
 801255e:	b013      	add	sp, #76	; 0x4c
 8012560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012564:	20000308 	.word	0x20000308
 8012568:	2000eb5c 	.word	0x2000eb5c
 801256c:	080144c3 	.word	0x080144c3
 8012570:	080144c1 	.word	0x080144c1
 8012574:	2000e07c 	.word	0x2000e07c

08012578 <GUI__AllocAlphaBuffer>:
 8012578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801257a:	b108      	cbz	r0, 8012580 <GUI__AllocAlphaBuffer+0x8>
 801257c:	aa03      	add	r2, sp, #12
 801257e:	e000      	b.n	8012582 <GUI__AllocAlphaBuffer+0xa>
 8012580:	4602      	mov	r2, r0
 8012582:	a801      	add	r0, sp, #4
 8012584:	a902      	add	r1, sp, #8
 8012586:	2300      	movs	r3, #0
 8012588:	f7ff fea8 	bl	80122dc <GUI__GetAlphaBuffer>
 801258c:	b005      	add	sp, #20
 801258e:	bd00      	pop	{pc}

08012590 <GUI_SignalEvent>:
 8012590:	b508      	push	{r3, lr}
 8012592:	4b02      	ldr	r3, [pc, #8]	; (801259c <GUI_SignalEvent+0xc>)
 8012594:	6818      	ldr	r0, [r3, #0]
 8012596:	b100      	cbz	r0, 801259a <GUI_SignalEvent+0xa>
 8012598:	4780      	blx	r0
 801259a:	bd08      	pop	{r3, pc}
 801259c:	2000e08c 	.word	0x2000e08c

080125a0 <_Unlink>:
 80125a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125a2:	4605      	mov	r5, r0
 80125a4:	b1f0      	cbz	r0, 80125e4 <_Unlink+0x44>
 80125a6:	f001 fca7 	bl	8013ef8 <GUI_ALLOC_LockH>
 80125aa:	4b0f      	ldr	r3, [pc, #60]	; (80125e8 <_Unlink+0x48>)
 80125ac:	9000      	str	r0, [sp, #0]
 80125ae:	681c      	ldr	r4, [r3, #0]
 80125b0:	42ac      	cmp	r4, r5
 80125b2:	d104      	bne.n	80125be <_Unlink+0x1e>
 80125b4:	6840      	ldr	r0, [r0, #4]
 80125b6:	6018      	str	r0, [r3, #0]
 80125b8:	e011      	b.n	80125de <_Unlink+0x3e>
 80125ba:	f001 fcab 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80125be:	b174      	cbz	r4, 80125de <_Unlink+0x3e>
 80125c0:	4620      	mov	r0, r4
 80125c2:	f001 fc99 	bl	8013ef8 <GUI_ALLOC_LockH>
 80125c6:	4601      	mov	r1, r0
 80125c8:	a802      	add	r0, sp, #8
 80125ca:	684c      	ldr	r4, [r1, #4]
 80125cc:	f840 1d04 	str.w	r1, [r0, #-4]!
 80125d0:	42ac      	cmp	r4, r5
 80125d2:	d1f2      	bne.n	80125ba <_Unlink+0x1a>
 80125d4:	9a00      	ldr	r2, [sp, #0]
 80125d6:	6853      	ldr	r3, [r2, #4]
 80125d8:	604b      	str	r3, [r1, #4]
 80125da:	f001 fc9b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80125de:	4668      	mov	r0, sp
 80125e0:	f001 fc98 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80125e4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80125e6:	bf00      	nop
 80125e8:	2000e094 	.word	0x2000e094

080125ec <GUI_TIMER__GetFirstTimer>:
 80125ec:	2300      	movs	r3, #0
 80125ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125f0:	6003      	str	r3, [r0, #0]
 80125f2:	4605      	mov	r5, r0
 80125f4:	4807      	ldr	r0, [pc, #28]	; (8012614 <GUI_TIMER__GetFirstTimer+0x28>)
 80125f6:	6804      	ldr	r4, [r0, #0]
 80125f8:	b154      	cbz	r4, 8012610 <GUI_TIMER__GetFirstTimer+0x24>
 80125fa:	4620      	mov	r0, r4
 80125fc:	f001 fc7c 	bl	8013ef8 <GUI_ALLOC_LockH>
 8012600:	a902      	add	r1, sp, #8
 8012602:	6902      	ldr	r2, [r0, #16]
 8012604:	f841 0d04 	str.w	r0, [r1, #-4]!
 8012608:	602a      	str	r2, [r5, #0]
 801260a:	4608      	mov	r0, r1
 801260c:	f001 fc82 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8012610:	4620      	mov	r0, r4
 8012612:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8012614:	2000e090 	.word	0x2000e090

08012618 <GUI_TIMER__GetNextTimerLin>:
 8012618:	2300      	movs	r3, #0
 801261a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801261c:	600b      	str	r3, [r1, #0]
 801261e:	460d      	mov	r5, r1
 8012620:	4604      	mov	r4, r0
 8012622:	b180      	cbz	r0, 8012646 <GUI_TIMER__GetNextTimerLin+0x2e>
 8012624:	f001 fc68 	bl	8013ef8 <GUI_ALLOC_LockH>
 8012628:	6884      	ldr	r4, [r0, #8]
 801262a:	9001      	str	r0, [sp, #4]
 801262c:	b144      	cbz	r4, 8012640 <GUI_TIMER__GetNextTimerLin+0x28>
 801262e:	a801      	add	r0, sp, #4
 8012630:	f001 fc70 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8012634:	4620      	mov	r0, r4
 8012636:	f001 fc5f 	bl	8013ef8 <GUI_ALLOC_LockH>
 801263a:	9001      	str	r0, [sp, #4]
 801263c:	6900      	ldr	r0, [r0, #16]
 801263e:	6028      	str	r0, [r5, #0]
 8012640:	a801      	add	r0, sp, #4
 8012642:	f001 fc67 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8012646:	4620      	mov	r0, r4
 8012648:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0801264c <GUI_TIMER_Delete>:
 801264c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801264e:	4604      	mov	r4, r0
 8012650:	b348      	cbz	r0, 80126a6 <GUI_TIMER_Delete+0x5a>
 8012652:	4e15      	ldr	r6, [pc, #84]	; (80126a8 <GUI_TIMER_Delete+0x5c>)
 8012654:	6835      	ldr	r5, [r6, #0]
 8012656:	4285      	cmp	r5, r0
 8012658:	d10b      	bne.n	8012672 <GUI_TIMER_Delete+0x26>
 801265a:	f001 fc4d 	bl	8013ef8 <GUI_ALLOC_LockH>
 801265e:	a902      	add	r1, sp, #8
 8012660:	f841 0d04 	str.w	r0, [r1, #-4]!
 8012664:	6880      	ldr	r0, [r0, #8]
 8012666:	6030      	str	r0, [r6, #0]
 8012668:	4608      	mov	r0, r1
 801266a:	e014      	b.n	8012696 <GUI_TIMER_Delete+0x4a>
 801266c:	4668      	mov	r0, sp
 801266e:	f001 fc51 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8012672:	4628      	mov	r0, r5
 8012674:	f001 fc40 	bl	8013ef8 <GUI_ALLOC_LockH>
 8012678:	6885      	ldr	r5, [r0, #8]
 801267a:	9000      	str	r0, [sp, #0]
 801267c:	42a5      	cmp	r5, r4
 801267e:	d1f5      	bne.n	801266c <GUI_TIMER_Delete+0x20>
 8012680:	4620      	mov	r0, r4
 8012682:	f001 fc39 	bl	8013ef8 <GUI_ALLOC_LockH>
 8012686:	9b00      	ldr	r3, [sp, #0]
 8012688:	6882      	ldr	r2, [r0, #8]
 801268a:	9001      	str	r0, [sp, #4]
 801268c:	609a      	str	r2, [r3, #8]
 801268e:	a801      	add	r0, sp, #4
 8012690:	f001 fc40 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8012694:	4668      	mov	r0, sp
 8012696:	f001 fc3d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801269a:	4620      	mov	r0, r4
 801269c:	f7ff ff80 	bl	80125a0 <_Unlink>
 80126a0:	4620      	mov	r0, r4
 80126a2:	f001 fc63 	bl	8013f6c <GUI_ALLOC_Free>
 80126a6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80126a8:	2000e090 	.word	0x2000e090

080126ac <GUI_TIMER_GetFlag>:
 80126ac:	b513      	push	{r0, r1, r4, lr}
 80126ae:	460c      	mov	r4, r1
 80126b0:	b168      	cbz	r0, 80126ce <GUI_TIMER_GetFlag+0x22>
 80126b2:	f001 fc21 	bl	8013ef8 <GUI_ALLOC_LockH>
 80126b6:	ab02      	add	r3, sp, #8
 80126b8:	8982      	ldrh	r2, [r0, #12]
 80126ba:	f843 0d04 	str.w	r0, [r3, #-4]!
 80126be:	4214      	tst	r4, r2
 80126c0:	4618      	mov	r0, r3
 80126c2:	bf0c      	ite	eq
 80126c4:	2400      	moveq	r4, #0
 80126c6:	2401      	movne	r4, #1
 80126c8:	f001 fc24 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80126cc:	e000      	b.n	80126d0 <GUI_TIMER_GetFlag+0x24>
 80126ce:	2401      	movs	r4, #1
 80126d0:	4620      	mov	r0, r4
 80126d2:	bd1c      	pop	{r2, r3, r4, pc}

080126d4 <GUI_TOUCH_StoreStateEx>:
 80126d4:	b538      	push	{r3, r4, r5, lr}
 80126d6:	4d08      	ldr	r5, [pc, #32]	; (80126f8 <GUI_TOUCH_StoreStateEx+0x24>)
 80126d8:	220c      	movs	r2, #12
 80126da:	4629      	mov	r1, r5
 80126dc:	4604      	mov	r4, r0
 80126de:	f006 fef3 	bl	80194c8 <memcmp>
 80126e2:	b140      	cbz	r0, 80126f6 <GUI_TOUCH_StoreStateEx+0x22>
 80126e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80126e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80126ec:	4620      	mov	r0, r4
 80126ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126f2:	f000 b911 	b.w	8012918 <GUI_PID_StoreState>
 80126f6:	bd38      	pop	{r3, r4, r5, pc}
 80126f8:	2000e098 	.word	0x2000e098

080126fc <GUI_SetTextMode>:
 80126fc:	4b03      	ldr	r3, [pc, #12]	; (801270c <GUI_SetTextMode+0x10>)
 80126fe:	6819      	ldr	r1, [r3, #0]
 8012700:	f9b1 202a 	ldrsh.w	r2, [r1, #42]	; 0x2a
 8012704:	8548      	strh	r0, [r1, #42]	; 0x2a
 8012706:	4610      	mov	r0, r2
 8012708:	4770      	bx	lr
 801270a:	bf00      	nop
 801270c:	20000308 	.word	0x20000308

08012710 <GUI_SetFont>:
 8012710:	4b03      	ldr	r3, [pc, #12]	; (8012720 <GUI_SetFont+0x10>)
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	69d1      	ldr	r1, [r2, #28]
 8012716:	b100      	cbz	r0, 801271a <GUI_SetFont+0xa>
 8012718:	61d0      	str	r0, [r2, #28]
 801271a:	4608      	mov	r0, r1
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	20000308 	.word	0x20000308

08012724 <GUI_SetDrawMode>:
 8012724:	f7fe bf06 	b.w	8011534 <LCD_SetDrawMode>

08012728 <GL_SetDefault>:
 8012728:	b508      	push	{r3, lr}
 801272a:	2000      	movs	r0, #0
 801272c:	f000 f81c 	bl	8012768 <GUI_SetBkColor>
 8012730:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012734:	f000 f81a 	bl	801276c <GUI_SetColor>
 8012738:	2001      	movs	r0, #1
 801273a:	f000 f8b9 	bl	80128b0 <GUI_SetPenSize>
 801273e:	2000      	movs	r0, #0
 8012740:	f005 fc96 	bl	8018070 <GUI_SetTextAlign>
 8012744:	2000      	movs	r0, #0
 8012746:	f7ff ffd9 	bl	80126fc <GUI_SetTextMode>
 801274a:	2000      	movs	r0, #0
 801274c:	f7ff ffea 	bl	8012724 <GUI_SetDrawMode>
 8012750:	4b04      	ldr	r3, [pc, #16]	; (8012764 <GL_SetDefault+0x3c>)
 8012752:	6818      	ldr	r0, [r3, #0]
 8012754:	f7ff ffdc 	bl	8012710 <GUI_SetFont>
 8012758:	2000      	movs	r0, #0
 801275a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801275e:	f005 bcab 	b.w	80180b8 <GUI_SetLineStyle>
 8012762:	bf00      	nop
 8012764:	2000030c 	.word	0x2000030c

08012768 <GUI_SetBkColor>:
 8012768:	f7ff ba2e 	b.w	8011bc8 <LCD_SetBkColor>

0801276c <GUI_SetColor>:
 801276c:	f7ff ba34 	b.w	8011bd8 <LCD_SetColor>

08012770 <GUI__AlphaSuppressMixing>:
 8012770:	4b07      	ldr	r3, [pc, #28]	; (8012790 <GUI__AlphaSuppressMixing+0x20>)
 8012772:	b510      	push	{r4, lr}
 8012774:	681c      	ldr	r4, [r3, #0]
 8012776:	b120      	cbz	r0, 8012782 <GUI__AlphaSuppressMixing+0x12>
 8012778:	2201      	movs	r2, #1
 801277a:	601a      	str	r2, [r3, #0]
 801277c:	f04f 30ff 	mov.w	r0, #4294967295
 8012780:	e002      	b.n	8012788 <GUI__AlphaSuppressMixing+0x18>
 8012782:	6018      	str	r0, [r3, #0]
 8012784:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012788:	f004 ffb2 	bl	80176f0 <LCD_AA_SetAndMask>
 801278c:	4620      	mov	r0, r4
 801278e:	bd10      	pop	{r4, pc}
 8012790:	2000e0a4 	.word	0x2000e0a4

08012794 <GUI_GetCursorLayer>:
 8012794:	2801      	cmp	r0, #1
 8012796:	d803      	bhi.n	80127a0 <GUI_GetCursorLayer+0xc>
 8012798:	4b02      	ldr	r3, [pc, #8]	; (80127a4 <GUI_GetCursorLayer+0x10>)
 801279a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801279e:	4770      	bx	lr
 80127a0:	2000      	movs	r0, #0
 80127a2:	4770      	bx	lr
 80127a4:	2000e0a8 	.word	0x2000e0a8

080127a8 <GUI_GetLayerPosEx>:
 80127a8:	b538      	push	{r3, r4, r5, lr}
 80127aa:	460d      	mov	r5, r1
 80127ac:	4614      	mov	r4, r2
 80127ae:	f7fe fdc3 	bl	8011338 <LCD_GetPosEx>
 80127b2:	b110      	cbz	r0, 80127ba <GUI_GetLayerPosEx+0x12>
 80127b4:	2300      	movs	r3, #0
 80127b6:	602b      	str	r3, [r5, #0]
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	bd38      	pop	{r3, r4, r5, pc}

080127bc <GUI_SelectLayer>:
 80127bc:	b538      	push	{r3, r4, r5, lr}
 80127be:	4b06      	ldr	r3, [pc, #24]	; (80127d8 <GUI_SelectLayer+0x1c>)
 80127c0:	4604      	mov	r4, r0
 80127c2:	6818      	ldr	r0, [r3, #0]
 80127c4:	2c01      	cmp	r4, #1
 80127c6:	7c45      	ldrb	r5, [r0, #17]
 80127c8:	d802      	bhi.n	80127d0 <GUI_SelectLayer+0x14>
 80127ca:	7444      	strb	r4, [r0, #17]
 80127cc:	f000 f80a 	bl	80127e4 <GUI_SelectLCD>
 80127d0:	4902      	ldr	r1, [pc, #8]	; (80127dc <GUI_SelectLayer+0x20>)
 80127d2:	4628      	mov	r0, r5
 80127d4:	600c      	str	r4, [r1, #0]
 80127d6:	bd38      	pop	{r3, r4, r5, pc}
 80127d8:	20000308 	.word	0x20000308
 80127dc:	2000eb0c 	.word	0x2000eb0c

080127e0 <GUI_SetLayerPosEx>:
 80127e0:	f7fe bd7c 	b.w	80112dc <LCD_SetPosEx>

080127e4 <GUI_SelectLCD>:
 80127e4:	b508      	push	{r3, lr}
 80127e6:	f004 fdbb 	bl	8017360 <LCD_SelectLCD>
 80127ea:	f7fe fd1f 	bl	801122c <LCD_UpdateColorIndices>
 80127ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80127f2:	f7fc bbff 	b.w	800eff4 <WM_Activate>
	...

080127f8 <GUI_SaveContext_W>:
 80127f8:	b508      	push	{r3, lr}
 80127fa:	4b03      	ldr	r3, [pc, #12]	; (8012808 <GUI_SaveContext_W+0x10>)
 80127fc:	2270      	movs	r2, #112	; 0x70
 80127fe:	6819      	ldr	r1, [r3, #0]
 8012800:	f7ee fc08 	bl	8001014 <memcpy>
 8012804:	bd08      	pop	{r3, pc}
 8012806:	bf00      	nop
 8012808:	20000308 	.word	0x20000308

0801280c <GUI_RestoreContext>:
 801280c:	b508      	push	{r3, lr}
 801280e:	4b03      	ldr	r3, [pc, #12]	; (801281c <GUI_RestoreContext+0x10>)
 8012810:	4601      	mov	r1, r0
 8012812:	2270      	movs	r2, #112	; 0x70
 8012814:	6818      	ldr	r0, [r3, #0]
 8012816:	f7ee fbfd 	bl	8001014 <memcpy>
 801281a:	bd08      	pop	{r3, pc}
 801281c:	20000308 	.word	0x20000308

08012820 <GUI_RectsIntersect>:
 8012820:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012824:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012828:	429a      	cmp	r2, r3
 801282a:	dc14      	bgt.n	8012856 <GUI_RectsIntersect+0x36>
 801282c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8012830:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012834:	429a      	cmp	r2, r3
 8012836:	dc0e      	bgt.n	8012856 <GUI_RectsIntersect+0x36>
 8012838:	f9b0 2000 	ldrsh.w	r2, [r0]
 801283c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012840:	429a      	cmp	r2, r3
 8012842:	dc08      	bgt.n	8012856 <GUI_RectsIntersect+0x36>
 8012844:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012848:	f9b1 1000 	ldrsh.w	r1, [r1]
 801284c:	4291      	cmp	r1, r2
 801284e:	bfcc      	ite	gt
 8012850:	2000      	movgt	r0, #0
 8012852:	2001      	movle	r0, #1
 8012854:	4770      	bx	lr
 8012856:	2000      	movs	r0, #0
 8012858:	4770      	bx	lr

0801285a <GUI_ALLOC_Realloc>:
 801285a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801285c:	4604      	mov	r4, r0
 801285e:	4608      	mov	r0, r1
 8012860:	460e      	mov	r6, r1
 8012862:	f001 fd97 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 8012866:	4605      	mov	r5, r0
 8012868:	b1f8      	cbz	r0, 80128aa <GUI_ALLOC_Realloc+0x50>
 801286a:	b1f4      	cbz	r4, 80128aa <GUI_ALLOC_Realloc+0x50>
 801286c:	4620      	mov	r0, r4
 801286e:	f001 fb71 	bl	8013f54 <GUI_ALLOC_GetSize>
 8012872:	42b0      	cmp	r0, r6
 8012874:	bfb4      	ite	lt
 8012876:	4607      	movlt	r7, r0
 8012878:	4637      	movge	r7, r6
 801287a:	4628      	mov	r0, r5
 801287c:	f001 fb3c 	bl	8013ef8 <GUI_ALLOC_LockH>
 8012880:	9000      	str	r0, [sp, #0]
 8012882:	4620      	mov	r0, r4
 8012884:	f001 fb38 	bl	8013ef8 <GUI_ALLOC_LockH>
 8012888:	ae02      	add	r6, sp, #8
 801288a:	4601      	mov	r1, r0
 801288c:	463a      	mov	r2, r7
 801288e:	9001      	str	r0, [sp, #4]
 8012890:	f856 0d08 	ldr.w	r0, [r6, #-8]!
 8012894:	f7ee fbbe 	bl	8001014 <memcpy>
 8012898:	4668      	mov	r0, sp
 801289a:	f001 fb3b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801289e:	a801      	add	r0, sp, #4
 80128a0:	f001 fb38 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80128a4:	4620      	mov	r0, r4
 80128a6:	f001 fb61 	bl	8013f6c <GUI_ALLOC_Free>
 80128aa:	4628      	mov	r0, r5
 80128ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

080128b0 <GUI_SetPenSize>:
 80128b0:	4b02      	ldr	r3, [pc, #8]	; (80128bc <GUI_SetPenSize+0xc>)
 80128b2:	6819      	ldr	r1, [r3, #0]
 80128b4:	7e0a      	ldrb	r2, [r1, #24]
 80128b6:	7608      	strb	r0, [r1, #24]
 80128b8:	4610      	mov	r0, r2
 80128ba:	4770      	bx	lr
 80128bc:	20000308 	.word	0x20000308

080128c0 <GUI_PID_GetState>:
 80128c0:	4a12      	ldr	r2, [pc, #72]	; (801290c <GUI_PID_GetState+0x4c>)
 80128c2:	4913      	ldr	r1, [pc, #76]	; (8012910 <GUI_PID_GetState+0x50>)
 80128c4:	6813      	ldr	r3, [r2, #0]
 80128c6:	b570      	push	{r4, r5, r6, lr}
 80128c8:	4604      	mov	r4, r0
 80128ca:	6808      	ldr	r0, [r1, #0]
 80128cc:	4d11      	ldr	r5, [pc, #68]	; (8012914 <GUI_PID_GetState+0x54>)
 80128ce:	4283      	cmp	r3, r0
 80128d0:	4616      	mov	r6, r2
 80128d2:	d10a      	bne.n	80128ea <GUI_PID_GetState+0x2a>
 80128d4:	42ab      	cmp	r3, r5
 80128d6:	d103      	bne.n	80128e0 <GUI_PID_GetState+0x20>
 80128d8:	333c      	adds	r3, #60	; 0x3c
 80128da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128de:	e001      	b.n	80128e4 <GUI_PID_GetState+0x24>
 80128e0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80128e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80128e8:	e00a      	b.n	8012900 <GUI_PID_GetState+0x40>
 80128ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80128f2:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80128f6:	4293      	cmp	r3, r2
 80128f8:	bf18      	it	ne
 80128fa:	f103 050c 	addne.w	r5, r3, #12
 80128fe:	6035      	str	r5, [r6, #0]
 8012900:	7a23      	ldrb	r3, [r4, #8]
 8012902:	1c18      	adds	r0, r3, #0
 8012904:	bf18      	it	ne
 8012906:	2001      	movne	r0, #1
 8012908:	bd70      	pop	{r4, r5, r6, pc}
 801290a:	bf00      	nop
 801290c:	200002fc 	.word	0x200002fc
 8012910:	200002f8 	.word	0x200002f8
 8012914:	2000e0b0 	.word	0x2000e0b0

08012918 <GUI_PID_StoreState>:
 8012918:	b570      	push	{r4, r5, r6, lr}
 801291a:	4b20      	ldr	r3, [pc, #128]	; (801299c <GUI_PID_StoreState+0x84>)
 801291c:	4a20      	ldr	r2, [pc, #128]	; (80129a0 <GUI_PID_StoreState+0x88>)
 801291e:	4921      	ldr	r1, [pc, #132]	; (80129a4 <GUI_PID_StoreState+0x8c>)
 8012920:	4d21      	ldr	r5, [pc, #132]	; (80129a8 <GUI_PID_StoreState+0x90>)
 8012922:	601a      	str	r2, [r3, #0]
 8012924:	680c      	ldr	r4, [r1, #0]
 8012926:	682b      	ldr	r3, [r5, #0]
 8012928:	429c      	cmp	r4, r3
 801292a:	d01d      	beq.n	8012968 <GUI_PID_StoreState+0x50>
 801292c:	4a1f      	ldr	r2, [pc, #124]	; (80129ac <GUI_PID_StoreState+0x94>)
 801292e:	7a01      	ldrb	r1, [r0, #8]
 8012930:	4293      	cmp	r3, r2
 8012932:	4615      	mov	r5, r2
 8012934:	bf14      	ite	ne
 8012936:	f1a3 020c 	subne.w	r2, r3, #12
 801293a:	f103 023c 	addeq.w	r2, r3, #60	; 0x3c
 801293e:	7a16      	ldrb	r6, [r2, #8]
 8012940:	428e      	cmp	r6, r1
 8012942:	d111      	bne.n	8012968 <GUI_PID_StoreState+0x50>
 8012944:	4294      	cmp	r4, r2
 8012946:	d00f      	beq.n	8012968 <GUI_PID_StoreState+0x50>
 8012948:	42aa      	cmp	r2, r5
 801294a:	d001      	beq.n	8012950 <GUI_PID_StoreState+0x38>
 801294c:	3a0c      	subs	r2, #12
 801294e:	e000      	b.n	8012952 <GUI_PID_StoreState+0x3a>
 8012950:	4a17      	ldr	r2, [pc, #92]	; (80129b0 <GUI_PID_StoreState+0x98>)
 8012952:	7a15      	ldrb	r5, [r2, #8]
 8012954:	428d      	cmp	r5, r1
 8012956:	d107      	bne.n	8012968 <GUI_PID_StoreState+0x50>
 8012958:	4914      	ldr	r1, [pc, #80]	; (80129ac <GUI_PID_StoreState+0x94>)
 801295a:	428b      	cmp	r3, r1
 801295c:	d001      	beq.n	8012962 <GUI_PID_StoreState+0x4a>
 801295e:	3b0c      	subs	r3, #12
 8012960:	e000      	b.n	8012964 <GUI_PID_StoreState+0x4c>
 8012962:	333c      	adds	r3, #60	; 0x3c
 8012964:	4a10      	ldr	r2, [pc, #64]	; (80129a8 <GUI_PID_StoreState+0x90>)
 8012966:	6013      	str	r3, [r2, #0]
 8012968:	c807      	ldmia	r0, {r0, r1, r2}
 801296a:	4d0f      	ldr	r5, [pc, #60]	; (80129a8 <GUI_PID_StoreState+0x90>)
 801296c:	682b      	ldr	r3, [r5, #0]
 801296e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012972:	480f      	ldr	r0, [pc, #60]	; (80129b0 <GUI_PID_StoreState+0x98>)
 8012974:	4283      	cmp	r3, r0
 8012976:	d001      	beq.n	801297c <GUI_PID_StoreState+0x64>
 8012978:	330c      	adds	r3, #12
 801297a:	e000      	b.n	801297e <GUI_PID_StoreState+0x66>
 801297c:	4b0b      	ldr	r3, [pc, #44]	; (80129ac <GUI_PID_StoreState+0x94>)
 801297e:	429c      	cmp	r4, r3
 8012980:	602b      	str	r3, [r5, #0]
 8012982:	d106      	bne.n	8012992 <GUI_PID_StoreState+0x7a>
 8012984:	4284      	cmp	r4, r0
 8012986:	d001      	beq.n	801298c <GUI_PID_StoreState+0x74>
 8012988:	340c      	adds	r4, #12
 801298a:	e000      	b.n	801298e <GUI_PID_StoreState+0x76>
 801298c:	4c07      	ldr	r4, [pc, #28]	; (80129ac <GUI_PID_StoreState+0x94>)
 801298e:	4905      	ldr	r1, [pc, #20]	; (80129a4 <GUI_PID_StoreState+0x8c>)
 8012990:	600c      	str	r4, [r1, #0]
 8012992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012996:	f7ff bdfb 	b.w	8012590 <GUI_SignalEvent>
 801299a:	bf00      	nop
 801299c:	2000eb68 	.word	0x2000eb68
 80129a0:	08015791 	.word	0x08015791
 80129a4:	200002fc 	.word	0x200002fc
 80129a8:	200002f8 	.word	0x200002f8
 80129ac:	2000e0b0 	.word	0x2000e0b0
 80129b0:	2000e0ec 	.word	0x2000e0ec

080129b4 <GUI_PID_IsEmpty>:
 80129b4:	4b03      	ldr	r3, [pc, #12]	; (80129c4 <GUI_PID_IsEmpty+0x10>)
 80129b6:	4904      	ldr	r1, [pc, #16]	; (80129c8 <GUI_PID_IsEmpty+0x14>)
 80129b8:	6818      	ldr	r0, [r3, #0]
 80129ba:	680a      	ldr	r2, [r1, #0]
 80129bc:	1a83      	subs	r3, r0, r2
 80129be:	4258      	negs	r0, r3
 80129c0:	4158      	adcs	r0, r3
 80129c2:	4770      	bx	lr
 80129c4:	200002fc 	.word	0x200002fc
 80129c8:	200002f8 	.word	0x200002f8

080129cc <GUI_StoreKey>:
 80129cc:	4b02      	ldr	r3, [pc, #8]	; (80129d8 <GUI_StoreKey+0xc>)
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	b902      	cbnz	r2, 80129d4 <GUI_StoreKey+0x8>
 80129d2:	6018      	str	r0, [r3, #0]
 80129d4:	f7ff bddc 	b.w	8012590 <GUI_SignalEvent>
 80129d8:	2000e0f8 	.word	0x2000e0f8

080129dc <GUI_PollKeyMsg>:
 80129dc:	4a0a      	ldr	r2, [pc, #40]	; (8012a08 <GUI_PollKeyMsg+0x2c>)
 80129de:	490b      	ldr	r1, [pc, #44]	; (8012a0c <GUI_PollKeyMsg+0x30>)
 80129e0:	6813      	ldr	r3, [r2, #0]
 80129e2:	6808      	ldr	r0, [r1, #0]
 80129e4:	4283      	cmp	r3, r0
 80129e6:	b510      	push	{r4, lr}
 80129e8:	d00c      	beq.n	8012a04 <GUI_PollKeyMsg+0x28>
 80129ea:	4c09      	ldr	r4, [pc, #36]	; (8012a10 <GUI_PollKeyMsg+0x34>)
 80129ec:	42a3      	cmp	r3, r4
 80129ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80129f2:	d001      	beq.n	80129f8 <GUI_PollKeyMsg+0x1c>
 80129f4:	3308      	adds	r3, #8
 80129f6:	e000      	b.n	80129fa <GUI_PollKeyMsg+0x1e>
 80129f8:	4b06      	ldr	r3, [pc, #24]	; (8012a14 <GUI_PollKeyMsg+0x38>)
 80129fa:	6013      	str	r3, [r2, #0]
 80129fc:	f003 f924 	bl	8015c48 <WM_OnKey>
 8012a00:	2001      	movs	r0, #1
 8012a02:	bd10      	pop	{r4, pc}
 8012a04:	2000      	movs	r0, #0
 8012a06:	bd10      	pop	{r4, pc}
 8012a08:	20000304 	.word	0x20000304
 8012a0c:	20000300 	.word	0x20000300
 8012a10:	2000e14c 	.word	0x2000e14c
 8012a14:	2000e0fc 	.word	0x2000e0fc

08012a18 <GUI_MoveRect>:
 8012a18:	b168      	cbz	r0, 8012a36 <GUI_MoveRect+0x1e>
 8012a1a:	8803      	ldrh	r3, [r0, #0]
 8012a1c:	b289      	uxth	r1, r1
 8012a1e:	18cb      	adds	r3, r1, r3
 8012a20:	8003      	strh	r3, [r0, #0]
 8012a22:	8883      	ldrh	r3, [r0, #4]
 8012a24:	18c9      	adds	r1, r1, r3
 8012a26:	8843      	ldrh	r3, [r0, #2]
 8012a28:	8081      	strh	r1, [r0, #4]
 8012a2a:	b292      	uxth	r2, r2
 8012a2c:	18d1      	adds	r1, r2, r3
 8012a2e:	88c3      	ldrh	r3, [r0, #6]
 8012a30:	8041      	strh	r1, [r0, #2]
 8012a32:	18d2      	adds	r2, r2, r3
 8012a34:	80c2      	strh	r2, [r0, #6]
 8012a36:	4770      	bx	lr

08012a38 <GUI_MergeRect>:
 8012a38:	b510      	push	{r4, lr}
 8012a3a:	b338      	cbz	r0, 8012a8c <GUI_MergeRect+0x54>
 8012a3c:	b309      	cbz	r1, 8012a82 <GUI_MergeRect+0x4a>
 8012a3e:	b30a      	cbz	r2, 8012a84 <GUI_MergeRect+0x4c>
 8012a40:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012a44:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012a48:	429c      	cmp	r4, r3
 8012a4a:	bfb8      	it	lt
 8012a4c:	4623      	movlt	r3, r4
 8012a4e:	8003      	strh	r3, [r0, #0]
 8012a50:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012a54:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012a58:	429c      	cmp	r4, r3
 8012a5a:	bfb8      	it	lt
 8012a5c:	4623      	movlt	r3, r4
 8012a5e:	8043      	strh	r3, [r0, #2]
 8012a60:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8012a64:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8012a68:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8012a6c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8012a70:	429c      	cmp	r4, r3
 8012a72:	bfa8      	it	ge
 8012a74:	4623      	movge	r3, r4
 8012a76:	4291      	cmp	r1, r2
 8012a78:	bfa8      	it	ge
 8012a7a:	460a      	movge	r2, r1
 8012a7c:	8083      	strh	r3, [r0, #4]
 8012a7e:	80c2      	strh	r2, [r0, #6]
 8012a80:	bd10      	pop	{r4, pc}
 8012a82:	4611      	mov	r1, r2
 8012a84:	680b      	ldr	r3, [r1, #0]
 8012a86:	6003      	str	r3, [r0, #0]
 8012a88:	6849      	ldr	r1, [r1, #4]
 8012a8a:	6041      	str	r1, [r0, #4]
 8012a8c:	bd10      	pop	{r4, pc}
	...

08012a90 <GUI_GotoXY>:
 8012a90:	4b02      	ldr	r3, [pc, #8]	; (8012a9c <GUI_GotoXY+0xc>)
 8012a92:	681a      	ldr	r2, [r3, #0]
 8012a94:	8450      	strh	r0, [r2, #34]	; 0x22
 8012a96:	8491      	strh	r1, [r2, #36]	; 0x24
 8012a98:	2000      	movs	r0, #0
 8012a9a:	4770      	bx	lr
 8012a9c:	20000308 	.word	0x20000308

08012aa0 <GUI_GetYSizeOfFont>:
 8012aa0:	7e02      	ldrb	r2, [r0, #24]
 8012aa2:	7ec0      	ldrb	r0, [r0, #27]
 8012aa4:	4350      	muls	r0, r2
 8012aa6:	4770      	bx	lr

08012aa8 <GUI_GetStringDistX>:
 8012aa8:	b510      	push	{r4, lr}
 8012aaa:	4604      	mov	r4, r0
 8012aac:	f004 ff0a 	bl	80178c4 <GUI__GetNumChars>
 8012ab0:	4601      	mov	r1, r0
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ab8:	f001 b87a 	b.w	8013bb0 <GUI__GetLineDistX>

08012abc <GUI_GetOrg>:
 8012abc:	4b04      	ldr	r3, [pc, #16]	; (8012ad0 <GUI_GetOrg+0x14>)
 8012abe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ac2:	6002      	str	r2, [r0, #0]
 8012ac4:	4803      	ldr	r0, [pc, #12]	; (8012ad4 <GUI_GetOrg+0x18>)
 8012ac6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012aca:	600b      	str	r3, [r1, #0]
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	2000eb4c 	.word	0x2000eb4c
 8012ad4:	2000eb44 	.word	0x2000eb44

08012ad8 <GUI_GetFontSizeY>:
 8012ad8:	f004 bf02 	b.w	80178e0 <GUI__GetFontSizeY>

08012adc <GUI_GetClientRect>:
 8012adc:	b108      	cbz	r0, 8012ae2 <GUI_GetClientRect+0x6>
 8012ade:	f7fb b981 	b.w	800dde4 <WM_GetClientRect>
 8012ae2:	4770      	bx	lr

08012ae4 <GUI_FillRectEx>:
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012aea:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8012aee:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012af2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012af6:	f000 b801 	b.w	8012afc <GUI_FillRect>
	...

08012afc <GUI_FillRect>:
 8012afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012afe:	4c0f      	ldr	r4, [pc, #60]	; (8012b3c <GUI_FillRect+0x40>)
 8012b00:	6826      	ldr	r6, [r4, #0]
 8012b02:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
 8012b04:	1947      	adds	r7, r0, r5
 8012b06:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8012b08:	f8ad 7000 	strh.w	r7, [sp]
 8012b0c:	180e      	adds	r6, r1, r0
 8012b0e:	181c      	adds	r4, r3, r0
 8012b10:	1955      	adds	r5, r2, r5
 8012b12:	4668      	mov	r0, sp
 8012b14:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012b18:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012b1c:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012b20:	f7fc f890 	bl	800ec44 <WM__InitIVRSearch>
 8012b24:	b140      	cbz	r0, 8012b38 <GUI_FillRect+0x3c>
 8012b26:	4638      	mov	r0, r7
 8012b28:	4631      	mov	r1, r6
 8012b2a:	462a      	mov	r2, r5
 8012b2c:	4623      	mov	r3, r4
 8012b2e:	f7fe fd83 	bl	8011638 <LCD_FillRect>
 8012b32:	f7fb ffc7 	bl	800eac4 <WM__GetNextIVR>
 8012b36:	e7f5      	b.n	8012b24 <GUI_FillRect+0x28>
 8012b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	20000308 	.word	0x20000308

08012b40 <GUI_Exec1>:
 8012b40:	4b08      	ldr	r3, [pc, #32]	; (8012b64 <GUI_Exec1+0x24>)
 8012b42:	6818      	ldr	r0, [r3, #0]
 8012b44:	b510      	push	{r4, lr}
 8012b46:	b120      	cbz	r0, 8012b52 <GUI_Exec1+0x12>
 8012b48:	4780      	blx	r0
 8012b4a:	1c04      	adds	r4, r0, #0
 8012b4c:	bf18      	it	ne
 8012b4e:	2401      	movne	r4, #1
 8012b50:	e000      	b.n	8012b54 <GUI_Exec1+0x14>
 8012b52:	4604      	mov	r4, r0
 8012b54:	f7fc f9a2 	bl	800ee9c <WM_Exec>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	bf0c      	ite	eq
 8012b5c:	4620      	moveq	r0, r4
 8012b5e:	2001      	movne	r0, #1
 8012b60:	bd10      	pop	{r4, pc}
 8012b62:	bf00      	nop
 8012b64:	2000eb48 	.word	0x2000eb48

08012b68 <GUI_Exec>:
 8012b68:	b510      	push	{r4, lr}
 8012b6a:	2400      	movs	r4, #0
 8012b6c:	f7ff ffe8 	bl	8012b40 <GUI_Exec1>
 8012b70:	b108      	cbz	r0, 8012b76 <GUI_Exec+0xe>
 8012b72:	2401      	movs	r4, #1
 8012b74:	e7fa      	b.n	8012b6c <GUI_Exec+0x4>
 8012b76:	4620      	mov	r0, r4
 8012b78:	bd10      	pop	{r4, pc}
	...

08012b7c <GUI_DrawVLine>:
 8012b7c:	4b0e      	ldr	r3, [pc, #56]	; (8012bb8 <GUI_DrawVLine+0x3c>)
 8012b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b80:	681c      	ldr	r4, [r3, #0]
 8012b82:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8012b84:	1986      	adds	r6, r0, r6
 8012b86:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8012b88:	180d      	adds	r5, r1, r0
 8012b8a:	1814      	adds	r4, r2, r0
 8012b8c:	b2b1      	uxth	r1, r6
 8012b8e:	4668      	mov	r0, sp
 8012b90:	f8ad 1000 	strh.w	r1, [sp]
 8012b94:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012b98:	f8ad 5002 	strh.w	r5, [sp, #2]
 8012b9c:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012ba0:	f7fc f850 	bl	800ec44 <WM__InitIVRSearch>
 8012ba4:	b138      	cbz	r0, 8012bb6 <GUI_DrawVLine+0x3a>
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	4629      	mov	r1, r5
 8012baa:	4622      	mov	r2, r4
 8012bac:	f7fe fd1e 	bl	80115ec <LCD_DrawVLine>
 8012bb0:	f7fb ff88 	bl	800eac4 <WM__GetNextIVR>
 8012bb4:	e7f6      	b.n	8012ba4 <GUI_DrawVLine+0x28>
 8012bb6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8012bb8:	20000308 	.word	0x20000308

08012bbc <GUI_DrawPixel>:
 8012bbc:	4b0f      	ldr	r3, [pc, #60]	; (8012bfc <GUI_DrawPixel+0x40>)
 8012bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bc0:	681a      	ldr	r2, [r3, #0]
 8012bc2:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8012bc4:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8012bc6:	1945      	adds	r5, r0, r5
 8012bc8:	b2a8      	uxth	r0, r5
 8012bca:	190c      	adds	r4, r1, r4
 8012bcc:	b2a1      	uxth	r1, r4
 8012bce:	f8ad 0004 	strh.w	r0, [sp, #4]
 8012bd2:	f8ad 0000 	strh.w	r0, [sp]
 8012bd6:	4668      	mov	r0, sp
 8012bd8:	f8ad 1006 	strh.w	r1, [sp, #6]
 8012bdc:	f8ad 1002 	strh.w	r1, [sp, #2]
 8012be0:	f7fc f830 	bl	800ec44 <WM__InitIVRSearch>
 8012be4:	b148      	cbz	r0, 8012bfa <GUI_DrawPixel+0x3e>
 8012be6:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <GUI_DrawPixel+0x40>)
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8012bec:	4621      	mov	r1, r4
 8012bee:	6843      	ldr	r3, [r0, #4]
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	4798      	blx	r3
 8012bf4:	f7fb ff66 	bl	800eac4 <WM__GetNextIVR>
 8012bf8:	e7f4      	b.n	8012be4 <GUI_DrawPixel+0x28>
 8012bfa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8012bfc:	20000308 	.word	0x20000308

08012c00 <GUI_DrawHLine>:
 8012c00:	4b10      	ldr	r3, [pc, #64]	; (8012c44 <GUI_DrawHLine+0x44>)
 8012c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c04:	681d      	ldr	r5, [r3, #0]
 8012c06:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8012c08:	190e      	adds	r6, r1, r4
 8012c0a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8012c0c:	f8ad 6000 	strh.w	r6, [sp]
 8012c10:	1845      	adds	r5, r0, r1
 8012c12:	b2a8      	uxth	r0, r5
 8012c14:	1914      	adds	r4, r2, r4
 8012c16:	f8ad 0002 	strh.w	r0, [sp, #2]
 8012c1a:	f8ad 0006 	strh.w	r0, [sp, #6]
 8012c1e:	4668      	mov	r0, sp
 8012c20:	f8ad 4004 	strh.w	r4, [sp, #4]
 8012c24:	f7fc f80e 	bl	800ec44 <WM__InitIVRSearch>
 8012c28:	b150      	cbz	r0, 8012c40 <GUI_DrawHLine+0x40>
 8012c2a:	4a06      	ldr	r2, [pc, #24]	; (8012c44 <GUI_DrawHLine+0x44>)
 8012c2c:	6813      	ldr	r3, [r2, #0]
 8012c2e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8012c30:	4630      	mov	r0, r6
 8012c32:	680b      	ldr	r3, [r1, #0]
 8012c34:	4622      	mov	r2, r4
 8012c36:	4629      	mov	r1, r5
 8012c38:	4798      	blx	r3
 8012c3a:	f7fb ff43 	bl	800eac4 <WM__GetNextIVR>
 8012c3e:	e7f3      	b.n	8012c28 <GUI_DrawHLine+0x28>
 8012c40:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8012c42:	bf00      	nop
 8012c44:	20000308 	.word	0x20000308

08012c48 <_DrawGradient>:
 8012c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c4c:	b091      	sub	sp, #68	; 0x44
 8012c4e:	4688      	mov	r8, r1
 8012c50:	4614      	mov	r4, r2
 8012c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012c54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012c56:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8012c58:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8012c5c:	9102      	str	r1, [sp, #8]
 8012c5e:	4605      	mov	r5, r0
 8012c60:	461e      	mov	r6, r3
 8012c62:	9201      	str	r2, [sp, #4]
 8012c64:	f005 fa4b 	bl	80180fe <GUI_GetColor>
 8012c68:	4557      	cmp	r7, sl
 8012c6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8012c6c:	d109      	bne.n	8012c82 <_DrawGradient+0x3a>
 8012c6e:	4638      	mov	r0, r7
 8012c70:	f7fe ffb2 	bl	8011bd8 <LCD_SetColor>
 8012c74:	9901      	ldr	r1, [sp, #4]
 8012c76:	b111      	cbz	r1, 8012c7e <_DrawGradient+0x36>
 8012c78:	4628      	mov	r0, r5
 8012c7a:	4641      	mov	r1, r8
 8012c7c:	e0b6      	b.n	8012dec <_DrawGradient+0x1a4>
 8012c7e:	4640      	mov	r0, r8
 8012c80:	e0ba      	b.n	8012df8 <_DrawGradient+0x1b0>
 8012c82:	fa5f fc87 	uxtb.w	ip, r7
 8012c86:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8012c8a:	f8cd c01c 	str.w	ip, [sp, #28]
 8012c8e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8012c92:	ea4f 6c17 	mov.w	ip, r7, lsr #24
 8012c96:	f8cd 9020 	str.w	r9, [sp, #32]
 8012c9a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8012c9e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8012ca2:	fa5f f08a 	uxtb.w	r0, sl
 8012ca6:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8012caa:	ebc9 0100 	rsb	r1, r9, r0
 8012cae:	ebb6 0308 	subs.w	r3, r6, r8
 8012cb2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8012cb6:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012cba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8012cbe:	910d      	str	r1, [sp, #52]	; 0x34
 8012cc0:	bf08      	it	eq
 8012cc2:	2301      	moveq	r3, #1
 8012cc4:	f3ca 4007 	ubfx	r0, sl, #16, #8
 8012cc8:	f3ca 2207 	ubfx	r2, sl, #8, #8
 8012ccc:	ebcc 0100 	rsb	r1, ip, r0
 8012cd0:	ebc9 6a1a 	rsb	sl, r9, sl, lsr #24
 8012cd4:	9303      	str	r3, [sp, #12]
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	ebce 0302 	rsb	r3, lr, r2
 8012cdc:	2700      	movs	r7, #0
 8012cde:	930c      	str	r3, [sp, #48]	; 0x30
 8012ce0:	910e      	str	r1, [sp, #56]	; 0x38
 8012ce2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8012ce6:	f108 33ff 	add.w	r3, r8, #4294967295
 8012cea:	9706      	str	r7, [sp, #24]
 8012cec:	9705      	str	r7, [sp, #20]
 8012cee:	9704      	str	r7, [sp, #16]
 8012cf0:	f04f 0901 	mov.w	r9, #1
 8012cf4:	f103 0a01 	add.w	sl, r3, #1
 8012cf8:	45b2      	cmp	sl, r6
 8012cfa:	dc6c      	bgt.n	8012dd6 <_DrawGradient+0x18e>
 8012cfc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012d00:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8012d04:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012d08:	fb97 f2fb 	sdiv	r2, r7, fp
 8012d0c:	eb0e 0102 	add.w	r1, lr, r2
 8012d10:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8012d14:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8012d18:	fb9c f2fe 	sdiv	r2, ip, lr
 8012d1c:	445a      	add	r2, fp
 8012d1e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8012d22:	b2d2      	uxtb	r2, r2
 8012d24:	0412      	lsls	r2, r2, #16
 8012d26:	ea42 6b01 	orr.w	fp, r2, r1, lsl #24
 8012d2a:	fb9c f1fe 	sdiv	r1, ip, lr
 8012d2e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012d32:	eb0c 0201 	add.w	r2, ip, r1
 8012d36:	f8dd c010 	ldr.w	ip, [sp, #16]
 8012d3a:	b2d1      	uxtb	r1, r2
 8012d3c:	fb9c f2fe 	sdiv	r2, ip, lr
 8012d40:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8012d44:	4472      	add	r2, lr
 8012d46:	b2d2      	uxtb	r2, r2
 8012d48:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8012d4c:	45c2      	cmp	sl, r8
 8012d4e:	ea4b 0b01 	orr.w	fp, fp, r1
 8012d52:	dd25      	ble.n	8012da0 <_DrawGradient+0x158>
 8012d54:	4583      	cmp	fp, r0
 8012d56:	d102      	bne.n	8012d5e <_DrawGradient+0x116>
 8012d58:	f109 0901 	add.w	r9, r9, #1
 8012d5c:	e020      	b.n	8012da0 <_DrawGradient+0x158>
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	f7fe ff3a 	bl	8011bd8 <LCD_SetColor>
 8012d64:	f1b9 0f01 	cmp.w	r9, #1
 8012d68:	9b00      	ldr	r3, [sp, #0]
 8012d6a:	d00f      	beq.n	8012d8c <_DrawGradient+0x144>
 8012d6c:	9a01      	ldr	r2, [sp, #4]
 8012d6e:	ebc9 010a 	rsb	r1, r9, sl
 8012d72:	b112      	cbz	r2, 8012d7a <_DrawGradient+0x132>
 8012d74:	4628      	mov	r0, r5
 8012d76:	4622      	mov	r2, r4
 8012d78:	e003      	b.n	8012d82 <_DrawGradient+0x13a>
 8012d7a:	4608      	mov	r0, r1
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	4629      	mov	r1, r5
 8012d80:	4623      	mov	r3, r4
 8012d82:	f7fe fc59 	bl	8011638 <LCD_FillRect>
 8012d86:	f04f 0901 	mov.w	r9, #1
 8012d8a:	e009      	b.n	8012da0 <_DrawGradient+0x158>
 8012d8c:	9801      	ldr	r0, [sp, #4]
 8012d8e:	b110      	cbz	r0, 8012d96 <_DrawGradient+0x14e>
 8012d90:	4628      	mov	r0, r5
 8012d92:	4619      	mov	r1, r3
 8012d94:	e001      	b.n	8012d9a <_DrawGradient+0x152>
 8012d96:	4618      	mov	r0, r3
 8012d98:	4629      	mov	r1, r5
 8012d9a:	4622      	mov	r2, r4
 8012d9c:	9b02      	ldr	r3, [sp, #8]
 8012d9e:	4798      	blx	r3
 8012da0:	f8dd c010 	ldr.w	ip, [sp, #16]
 8012da4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8012da8:	44f4      	add	ip, lr
 8012daa:	f8cd c010 	str.w	ip, [sp, #16]
 8012dae:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8012db2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8012db6:	44f4      	add	ip, lr
 8012db8:	f8cd c014 	str.w	ip, [sp, #20]
 8012dbc:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8012dc0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012dc4:	44f4      	add	ip, lr
 8012dc6:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8012dca:	f8cd c018 	str.w	ip, [sp, #24]
 8012dce:	4477      	add	r7, lr
 8012dd0:	4658      	mov	r0, fp
 8012dd2:	4653      	mov	r3, sl
 8012dd4:	e78e      	b.n	8012cf4 <_DrawGradient+0xac>
 8012dd6:	f7fe feff 	bl	8011bd8 <LCD_SetColor>
 8012dda:	f1b9 0f01 	cmp.w	r9, #1
 8012dde:	d00f      	beq.n	8012e00 <_DrawGradient+0x1b8>
 8012de0:	9801      	ldr	r0, [sp, #4]
 8012de2:	ebc9 0106 	rsb	r1, r9, r6
 8012de6:	b130      	cbz	r0, 8012df6 <_DrawGradient+0x1ae>
 8012de8:	4628      	mov	r0, r5
 8012dea:	3101      	adds	r1, #1
 8012dec:	4622      	mov	r2, r4
 8012dee:	4633      	mov	r3, r6
 8012df0:	f7fe fc22 	bl	8011638 <LCD_FillRect>
 8012df4:	e00e      	b.n	8012e14 <_DrawGradient+0x1cc>
 8012df6:	1c48      	adds	r0, r1, #1
 8012df8:	4629      	mov	r1, r5
 8012dfa:	4632      	mov	r2, r6
 8012dfc:	4623      	mov	r3, r4
 8012dfe:	e7f7      	b.n	8012df0 <_DrawGradient+0x1a8>
 8012e00:	9a01      	ldr	r2, [sp, #4]
 8012e02:	b112      	cbz	r2, 8012e0a <_DrawGradient+0x1c2>
 8012e04:	4628      	mov	r0, r5
 8012e06:	4631      	mov	r1, r6
 8012e08:	e001      	b.n	8012e0e <_DrawGradient+0x1c6>
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	4629      	mov	r1, r5
 8012e0e:	4622      	mov	r2, r4
 8012e10:	9b02      	ldr	r3, [sp, #8]
 8012e12:	4798      	blx	r3
 8012e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012e16:	b011      	add	sp, #68	; 0x44
 8012e18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e1c:	f7fe bedc 	b.w	8011bd8 <LCD_SetColor>

08012e20 <GUI_DrawGradientV>:
 8012e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e24:	4c15      	ldr	r4, [pc, #84]	; (8012e7c <GUI_DrawGradientV+0x5c>)
 8012e26:	6824      	ldr	r4, [r4, #0]
 8012e28:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8012e2a:	eb00 0905 	add.w	r9, r0, r5
 8012e2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8012e30:	b087      	sub	sp, #28
 8012e32:	eb01 0800 	add.w	r8, r1, r0
 8012e36:	181c      	adds	r4, r3, r0
 8012e38:	1955      	adds	r5, r2, r5
 8012e3a:	a804      	add	r0, sp, #16
 8012e3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012e3e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012e40:	f8ad 9010 	strh.w	r9, [sp, #16]
 8012e44:	f8ad 5014 	strh.w	r5, [sp, #20]
 8012e48:	f8ad 8012 	strh.w	r8, [sp, #18]
 8012e4c:	f8ad 4016 	strh.w	r4, [sp, #22]
 8012e50:	f7fb fef8 	bl	800ec44 <WM__InitIVRSearch>
 8012e54:	b170      	cbz	r0, 8012e74 <GUI_DrawGradientV+0x54>
 8012e56:	4b0a      	ldr	r3, [pc, #40]	; (8012e80 <GUI_DrawGradientV+0x60>)
 8012e58:	9700      	str	r7, [sp, #0]
 8012e5a:	2101      	movs	r1, #1
 8012e5c:	9302      	str	r3, [sp, #8]
 8012e5e:	9103      	str	r1, [sp, #12]
 8012e60:	4648      	mov	r0, r9
 8012e62:	4641      	mov	r1, r8
 8012e64:	462a      	mov	r2, r5
 8012e66:	4623      	mov	r3, r4
 8012e68:	9601      	str	r6, [sp, #4]
 8012e6a:	f7ff feed 	bl	8012c48 <_DrawGradient>
 8012e6e:	f7fb fe29 	bl	800eac4 <WM__GetNextIVR>
 8012e72:	e7ef      	b.n	8012e54 <GUI_DrawGradientV+0x34>
 8012e74:	b007      	add	sp, #28
 8012e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e7a:	bf00      	nop
 8012e7c:	20000308 	.word	0x20000308
 8012e80:	080115a1 	.word	0x080115a1

08012e84 <GUI_DrawGradientH>:
 8012e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e88:	4c15      	ldr	r4, [pc, #84]	; (8012ee0 <GUI_DrawGradientH+0x5c>)
 8012e8a:	6825      	ldr	r5, [r4, #0]
 8012e8c:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8012e8e:	eb00 0804 	add.w	r8, r0, r4
 8012e92:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8012e94:	b087      	sub	sp, #28
 8012e96:	eb01 0900 	add.w	r9, r1, r0
 8012e9a:	181d      	adds	r5, r3, r0
 8012e9c:	1914      	adds	r4, r2, r4
 8012e9e:	a804      	add	r0, sp, #16
 8012ea0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012ea2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012ea4:	f8ad 8010 	strh.w	r8, [sp, #16]
 8012ea8:	f8ad 4014 	strh.w	r4, [sp, #20]
 8012eac:	f8ad 9012 	strh.w	r9, [sp, #18]
 8012eb0:	f8ad 5016 	strh.w	r5, [sp, #22]
 8012eb4:	f7fb fec6 	bl	800ec44 <WM__InitIVRSearch>
 8012eb8:	b170      	cbz	r0, 8012ed8 <GUI_DrawGradientH+0x54>
 8012eba:	4b0a      	ldr	r3, [pc, #40]	; (8012ee4 <GUI_DrawGradientH+0x60>)
 8012ebc:	9700      	str	r7, [sp, #0]
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	9302      	str	r3, [sp, #8]
 8012ec2:	9103      	str	r1, [sp, #12]
 8012ec4:	4648      	mov	r0, r9
 8012ec6:	4641      	mov	r1, r8
 8012ec8:	462a      	mov	r2, r5
 8012eca:	4623      	mov	r3, r4
 8012ecc:	9601      	str	r6, [sp, #4]
 8012ece:	f7ff febb 	bl	8012c48 <_DrawGradient>
 8012ed2:	f7fb fdf7 	bl	800eac4 <WM__GetNextIVR>
 8012ed6:	e7ef      	b.n	8012eb8 <GUI_DrawGradientH+0x34>
 8012ed8:	b007      	add	sp, #28
 8012eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ede:	bf00      	nop
 8012ee0:	20000308 	.word	0x20000308
 8012ee4:	080115ed 	.word	0x080115ed

08012ee8 <_DrawBitmap>:
 8012ee8:	b510      	push	{r4, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	9c08      	ldr	r4, [sp, #32]
 8012eee:	9400      	str	r4, [sp, #0]
 8012ef0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012ef2:	9401      	str	r4, [sp, #4]
 8012ef4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012ef6:	9402      	str	r4, [sp, #8]
 8012ef8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012efa:	9403      	str	r4, [sp, #12]
 8012efc:	4c03      	ldr	r4, [pc, #12]	; (8012f0c <_DrawBitmap+0x24>)
 8012efe:	9404      	str	r4, [sp, #16]
 8012f00:	4c03      	ldr	r4, [pc, #12]	; (8012f10 <_DrawBitmap+0x28>)
 8012f02:	9405      	str	r4, [sp, #20]
 8012f04:	f004 fdae 	bl	8017a64 <GUI__DrawBitmap16bpp>
 8012f08:	b006      	add	sp, #24
 8012f0a:	bd10      	pop	{r4, pc}
 8012f0c:	080144ed 	.word	0x080144ed
 8012f10:	080342c0 	.word	0x080342c0

08012f14 <GL_DrawBitmap>:
 8012f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f18:	68c6      	ldr	r6, [r0, #12]
 8012f1a:	b087      	sub	sp, #28
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	2000      	movs	r0, #0
 8012f20:	4688      	mov	r8, r1
 8012f22:	4617      	mov	r7, r2
 8012f24:	f7ff fbfe 	bl	8012724 <GUI_SetDrawMode>
 8012f28:	4605      	mov	r5, r0
 8012f2a:	b126      	cbz	r6, 8012f36 <GL_DrawBitmap+0x22>
 8012f2c:	7933      	ldrb	r3, [r6, #4]
 8012f2e:	b113      	cbz	r3, 8012f36 <GL_DrawBitmap+0x22>
 8012f30:	f040 0002 	orr.w	r0, r0, #2
 8012f34:	e001      	b.n	8012f3a <GL_DrawBitmap+0x26>
 8012f36:	f025 0002 	bic.w	r0, r5, #2
 8012f3a:	f7ff fbf3 	bl	8012724 <GUI_SetDrawMode>
 8012f3e:	6921      	ldr	r1, [r4, #16]
 8012f40:	b169      	cbz	r1, 8012f5e <GL_DrawBitmap+0x4a>
 8012f42:	68a0      	ldr	r0, [r4, #8]
 8012f44:	8822      	ldrh	r2, [r4, #0]
 8012f46:	8863      	ldrh	r3, [r4, #2]
 8012f48:	9000      	str	r0, [sp, #0]
 8012f4a:	68e4      	ldr	r4, [r4, #12]
 8012f4c:	2001      	movs	r0, #1
 8012f4e:	9002      	str	r0, [sp, #8]
 8012f50:	9003      	str	r0, [sp, #12]
 8012f52:	9401      	str	r4, [sp, #4]
 8012f54:	680c      	ldr	r4, [r1, #0]
 8012f56:	4640      	mov	r0, r8
 8012f58:	4639      	mov	r1, r7
 8012f5a:	47a0      	blx	r4
 8012f5c:	e020      	b.n	8012fa0 <GL_DrawBitmap+0x8c>
 8012f5e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8012fb0 <GL_DrawBitmap+0x9c>
 8012f62:	4a12      	ldr	r2, [pc, #72]	; (8012fac <GL_DrawBitmap+0x98>)
 8012f64:	f8d9 3000 	ldr.w	r3, [r9]
 8012f68:	6816      	ldr	r6, [r2, #0]
 8012f6a:	68e0      	ldr	r0, [r4, #12]
 8012f6c:	7c5a      	ldrb	r2, [r3, #17]
 8012f6e:	4621      	mov	r1, r4
 8012f70:	47b0      	blx	r6
 8012f72:	b928      	cbnz	r0, 8012f80 <GL_DrawBitmap+0x6c>
 8012f74:	88e1      	ldrh	r1, [r4, #6]
 8012f76:	2901      	cmp	r1, #1
 8012f78:	bf04      	itt	eq
 8012f7a:	f8d9 1000 	ldreq.w	r1, [r9]
 8012f7e:	6b88      	ldreq	r0, [r1, #56]	; 0x38
 8012f80:	2101      	movs	r1, #1
 8012f82:	8822      	ldrh	r2, [r4, #0]
 8012f84:	8863      	ldrh	r3, [r4, #2]
 8012f86:	9100      	str	r1, [sp, #0]
 8012f88:	9101      	str	r1, [sp, #4]
 8012f8a:	88e1      	ldrh	r1, [r4, #6]
 8012f8c:	9102      	str	r1, [sp, #8]
 8012f8e:	88a1      	ldrh	r1, [r4, #4]
 8012f90:	9103      	str	r1, [sp, #12]
 8012f92:	68a1      	ldr	r1, [r4, #8]
 8012f94:	9005      	str	r0, [sp, #20]
 8012f96:	9104      	str	r1, [sp, #16]
 8012f98:	4640      	mov	r0, r8
 8012f9a:	4639      	mov	r1, r7
 8012f9c:	f7fe fc52 	bl	8011844 <LCD_DrawBitmap>
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	b007      	add	sp, #28
 8012fa4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fa8:	f7ff bbbc 	b.w	8012724 <GUI_SetDrawMode>
 8012fac:	20000310 	.word	0x20000310
 8012fb0:	20000308 	.word	0x20000308

08012fb4 <GUI_DrawBitmap>:
 8012fb4:	4b11      	ldr	r3, [pc, #68]	; (8012ffc <GUI_DrawBitmap+0x48>)
 8012fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012fb8:	4606      	mov	r6, r0
 8012fba:	6818      	ldr	r0, [r3, #0]
 8012fbc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8012fbe:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8012fc0:	8870      	ldrh	r0, [r6, #2]
 8012fc2:	194d      	adds	r5, r1, r5
 8012fc4:	8831      	ldrh	r1, [r6, #0]
 8012fc6:	f8ad 5000 	strh.w	r5, [sp]
 8012fca:	1914      	adds	r4, r2, r4
 8012fcc:	1e4a      	subs	r2, r1, #1
 8012fce:	1e41      	subs	r1, r0, #1
 8012fd0:	1953      	adds	r3, r2, r5
 8012fd2:	4668      	mov	r0, sp
 8012fd4:	190a      	adds	r2, r1, r4
 8012fd6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012fda:	f8ad 4002 	strh.w	r4, [sp, #2]
 8012fde:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012fe2:	f7fb fe2f 	bl	800ec44 <WM__InitIVRSearch>
 8012fe6:	b138      	cbz	r0, 8012ff8 <GUI_DrawBitmap+0x44>
 8012fe8:	4630      	mov	r0, r6
 8012fea:	4629      	mov	r1, r5
 8012fec:	4622      	mov	r2, r4
 8012fee:	f7ff ff91 	bl	8012f14 <GL_DrawBitmap>
 8012ff2:	f7fb fd67 	bl	800eac4 <WM__GetNextIVR>
 8012ff6:	e7f6      	b.n	8012fe6 <GUI_DrawBitmap+0x32>
 8012ff8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8012ffa:	bf00      	nop
 8012ffc:	20000308 	.word	0x20000308

08013000 <GUI_WrapGetNumLines>:
 8013000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013002:	4605      	mov	r5, r0
 8013004:	460e      	mov	r6, r1
 8013006:	4617      	mov	r7, r2
 8013008:	2400      	movs	r4, #0
 801300a:	4628      	mov	r0, r5
 801300c:	4631      	mov	r1, r6
 801300e:	463a      	mov	r2, r7
 8013010:	f004 fc42 	bl	8017898 <GUI__WrapGetNumBytesToNextLine>
 8013014:	b110      	cbz	r0, 801301c <GUI_WrapGetNumLines+0x1c>
 8013016:	182d      	adds	r5, r5, r0
 8013018:	3401      	adds	r4, #1
 801301a:	e7f6      	b.n	801300a <GUI_WrapGetNumLines+0xa>
 801301c:	4620      	mov	r0, r4
 801301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013020 <GUI_DispStringInRectWrap>:
 8013020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013024:	b089      	sub	sp, #36	; 0x24
 8013026:	460c      	mov	r4, r1
 8013028:	9202      	str	r2, [sp, #8]
 801302a:	9303      	str	r3, [sp, #12]
 801302c:	4605      	mov	r5, r0
 801302e:	2800      	cmp	r0, #0
 8013030:	f000 808e 	beq.w	8013150 <GUI_DispStringInRectWrap+0x130>
 8013034:	f8b1 9000 	ldrh.w	r9, [r1]
 8013038:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 801303c:	884e      	ldrh	r6, [r1, #2]
 801303e:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8013042:	fa0f f28a 	sxth.w	r2, sl
 8013046:	fa0f f389 	sxth.w	r3, r9
 801304a:	1ad0      	subs	r0, r2, r3
 801304c:	1c41      	adds	r1, r0, #1
 801304e:	9101      	str	r1, [sp, #4]
 8013050:	f000 fe48 	bl	8013ce4 <GUI_GetFontDistY>
 8013054:	9a02      	ldr	r2, [sp, #8]
 8013056:	f012 080c 	ands.w	r8, r2, #12
 801305a:	4607      	mov	r7, r0
 801305c:	d01e      	beq.n	801309c <GUI_DispStringInRectWrap+0x7c>
 801305e:	4628      	mov	r0, r5
 8013060:	9901      	ldr	r1, [sp, #4]
 8013062:	9a03      	ldr	r2, [sp, #12]
 8013064:	f7ff ffcc 	bl	8013000 <GUI_WrapGetNumLines>
 8013068:	f1b8 0f08 	cmp.w	r8, #8
 801306c:	d005      	beq.n	801307a <GUI_DispStringInRectWrap+0x5a>
 801306e:	f1b8 0f0c 	cmp.w	r8, #12
 8013072:	d007      	beq.n	8013084 <GUI_DispStringInRectWrap+0x64>
 8013074:	f1b8 0f04 	cmp.w	r8, #4
 8013078:	d110      	bne.n	801309c <GUI_DispStringInRectWrap+0x7c>
 801307a:	f10b 0101 	add.w	r1, fp, #1
 801307e:	fb07 1610 	mls	r6, r7, r0, r1
 8013082:	e00a      	b.n	801309a <GUI_DispStringInRectWrap+0x7a>
 8013084:	b233      	sxth	r3, r6
 8013086:	fa0f f18b 	sxth.w	r1, fp
 801308a:	1aca      	subs	r2, r1, r3
 801308c:	1c51      	adds	r1, r2, #1
 801308e:	fb07 1010 	mls	r0, r7, r0, r1
 8013092:	2302      	movs	r3, #2
 8013094:	fb90 f2f3 	sdiv	r2, r0, r3
 8013098:	1996      	adds	r6, r2, r6
 801309a:	b2b6      	uxth	r6, r6
 801309c:	4620      	mov	r0, r4
 801309e:	f7fa fa8b 	bl	800d5b8 <WM_SetUserClipRect>
 80130a2:	4680      	mov	r8, r0
 80130a4:	b178      	cbz	r0, 80130c6 <GUI_DispStringInRectWrap+0xa6>
 80130a6:	a804      	add	r0, sp, #16
 80130a8:	4621      	mov	r1, r4
 80130aa:	4642      	mov	r2, r8
 80130ac:	f8ad 9010 	strh.w	r9, [sp, #16]
 80130b0:	f8ad 6012 	strh.w	r6, [sp, #18]
 80130b4:	f8ad a014 	strh.w	sl, [sp, #20]
 80130b8:	f8ad b016 	strh.w	fp, [sp, #22]
 80130bc:	f7fe feb0 	bl	8011e20 <GUI__IntersectRects>
 80130c0:	a804      	add	r0, sp, #16
 80130c2:	f7fa fa79 	bl	800d5b8 <WM_SetUserClipRect>
 80130c6:	9a03      	ldr	r2, [sp, #12]
 80130c8:	9901      	ldr	r1, [sp, #4]
 80130ca:	4628      	mov	r0, r5
 80130cc:	f004 fbb4 	bl	8017838 <GUI__WrapGetNumCharsDisp>
 80130d0:	4683      	mov	fp, r0
 80130d2:	1e78      	subs	r0, r7, #1
 80130d4:	1983      	adds	r3, r0, r6
 80130d6:	4659      	mov	r1, fp
 80130d8:	4628      	mov	r0, r5
 80130da:	f8ad 301e 	strh.w	r3, [sp, #30]
 80130de:	f8ad 9018 	strh.w	r9, [sp, #24]
 80130e2:	f8ad 601a 	strh.w	r6, [sp, #26]
 80130e6:	f8ad a01c 	strh.w	sl, [sp, #28]
 80130ea:	f000 fd61 	bl	8013bb0 <GUI__GetLineDistX>
 80130ee:	9a02      	ldr	r2, [sp, #8]
 80130f0:	f002 0303 	and.w	r3, r2, #3
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d013      	beq.n	8013120 <GUI_DispStringInRectWrap+0x100>
 80130f8:	2b02      	cmp	r3, #2
 80130fa:	d004      	beq.n	8013106 <GUI_DispStringInRectWrap+0xe6>
 80130fc:	b9ab      	cbnz	r3, 801312a <GUI_DispStringInRectWrap+0x10a>
 80130fe:	8821      	ldrh	r1, [r4, #0]
 8013100:	f8ad 1018 	strh.w	r1, [sp, #24]
 8013104:	e011      	b.n	801312a <GUI_DispStringInRectWrap+0x10a>
 8013106:	8822      	ldrh	r2, [r4, #0]
 8013108:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 801310c:	b211      	sxth	r1, r2
 801310e:	ebc1 010e 	rsb	r1, r1, lr
 8013112:	1a08      	subs	r0, r1, r0
 8013114:	fb90 f3f3 	sdiv	r3, r0, r3
 8013118:	189a      	adds	r2, r3, r2
 801311a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801311e:	e004      	b.n	801312a <GUI_DispStringInRectWrap+0x10a>
 8013120:	88a1      	ldrh	r1, [r4, #4]
 8013122:	1c4b      	adds	r3, r1, #1
 8013124:	1a18      	subs	r0, r3, r0
 8013126:	f8ad 0018 	strh.w	r0, [sp, #24]
 801312a:	4628      	mov	r0, r5
 801312c:	4659      	mov	r1, fp
 801312e:	aa06      	add	r2, sp, #24
 8013130:	f000 fd6c 	bl	8013c0c <GUI__DispLine>
 8013134:	4628      	mov	r0, r5
 8013136:	9a03      	ldr	r2, [sp, #12]
 8013138:	9901      	ldr	r1, [sp, #4]
 801313a:	f004 fbad 	bl	8017898 <GUI__WrapGetNumBytesToNextLine>
 801313e:	182d      	adds	r5, r5, r0
 8013140:	19f6      	adds	r6, r6, r7
 8013142:	782a      	ldrb	r2, [r5, #0]
 8013144:	b2b6      	uxth	r6, r6
 8013146:	2a00      	cmp	r2, #0
 8013148:	d1bd      	bne.n	80130c6 <GUI_DispStringInRectWrap+0xa6>
 801314a:	4640      	mov	r0, r8
 801314c:	f7fa fa34 	bl	800d5b8 <WM_SetUserClipRect>
 8013150:	b009      	add	sp, #36	; 0x24
 8013152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013158 <GUI__DispStringInRect>:
 8013158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801315c:	b087      	sub	sp, #28
 801315e:	460c      	mov	r4, r1
 8013160:	9001      	str	r0, [sp, #4]
 8013162:	4691      	mov	r9, r2
 8013164:	461e      	mov	r6, r3
 8013166:	f000 fdbd 	bl	8013ce4 <GUI_GetFontDistY>
 801316a:	9f01      	ldr	r7, [sp, #4]
 801316c:	4680      	mov	r8, r0
 801316e:	b124      	cbz	r4, 801317a <GUI__DispStringInRect+0x22>
 8013170:	6820      	ldr	r0, [r4, #0]
 8013172:	6861      	ldr	r1, [r4, #4]
 8013174:	aa04      	add	r2, sp, #16
 8013176:	c203      	stmia	r2!, {r0, r1}
 8013178:	e002      	b.n	8013180 <GUI__DispStringInRect+0x28>
 801317a:	a804      	add	r0, sp, #16
 801317c:	f7ff fcae 	bl	8012adc <GUI_GetClientRect>
 8013180:	f019 0a0c 	ands.w	sl, r9, #12
 8013184:	d102      	bne.n	801318c <GUI__DispStringInRect+0x34>
 8013186:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 801318a:	e034      	b.n	80131f6 <GUI__DispStringInRect+0x9e>
 801318c:	4634      	mov	r4, r6
 801318e:	2500      	movs	r5, #0
 8013190:	b1a4      	cbz	r4, 80131bc <GUI__DispStringInRect+0x64>
 8013192:	4621      	mov	r1, r4
 8013194:	9801      	ldr	r0, [sp, #4]
 8013196:	f000 fce1 	bl	8013b5c <GUI__GetLineNumChars>
 801319a:	f8dd b004 	ldr.w	fp, [sp, #4]
 801319e:	4601      	mov	r1, r0
 80131a0:	1a24      	subs	r4, r4, r0
 80131a2:	4658      	mov	r0, fp
 80131a4:	f004 ff52 	bl	801804c <GUI_UC__NumChars2NumBytes>
 80131a8:	eb0b 0300 	add.w	r3, fp, r0
 80131ac:	a806      	add	r0, sp, #24
 80131ae:	3501      	adds	r5, #1
 80131b0:	f840 3d14 	str.w	r3, [r0, #-20]!
 80131b4:	f004 fb7a 	bl	80178ac <GUI__HandleEOLine>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d0e9      	beq.n	8013190 <GUI__DispStringInRect+0x38>
 80131bc:	f1ba 0f08 	cmp.w	sl, #8
 80131c0:	d005      	beq.n	80131ce <GUI__DispStringInRect+0x76>
 80131c2:	f1ba 0f0c 	cmp.w	sl, #12
 80131c6:	d008      	beq.n	80131da <GUI__DispStringInRect+0x82>
 80131c8:	f1ba 0f04 	cmp.w	sl, #4
 80131cc:	d112      	bne.n	80131f4 <GUI__DispStringInRect+0x9c>
 80131ce:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80131d2:	fb08 0215 	mls	r2, r8, r5, r0
 80131d6:	1c54      	adds	r4, r2, #1
 80131d8:	e00d      	b.n	80131f6 <GUI__DispStringInRect+0x9e>
 80131da:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80131de:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80131e2:	1a0a      	subs	r2, r1, r0
 80131e4:	1c54      	adds	r4, r2, #1
 80131e6:	fb08 4515 	mls	r5, r8, r5, r4
 80131ea:	2302      	movs	r3, #2
 80131ec:	fb95 f1f3 	sdiv	r1, r5, r3
 80131f0:	1844      	adds	r4, r0, r1
 80131f2:	e000      	b.n	80131f6 <GUI__DispStringInRect+0x9e>
 80131f4:	2400      	movs	r4, #0
 80131f6:	9701      	str	r7, [sp, #4]
 80131f8:	2500      	movs	r5, #0
 80131fa:	2e00      	cmp	r6, #0
 80131fc:	d04b      	beq.n	8013296 <GUI__DispStringInRect+0x13e>
 80131fe:	4631      	mov	r1, r6
 8013200:	9801      	ldr	r0, [sp, #4]
 8013202:	f000 fcab 	bl	8013b5c <GUI__GetLineNumChars>
 8013206:	4607      	mov	r7, r0
 8013208:	1a36      	subs	r6, r6, r0
 801320a:	4639      	mov	r1, r7
 801320c:	9801      	ldr	r0, [sp, #4]
 801320e:	f000 fccf 	bl	8013bb0 <GUI__GetLineDistX>
 8013212:	f009 0303 	and.w	r3, r9, #3
 8013216:	2b01      	cmp	r3, #1
 8013218:	d00f      	beq.n	801323a <GUI__DispStringInRect+0xe2>
 801321a:	2b02      	cmp	r3, #2
 801321c:	d003      	beq.n	8013226 <GUI__DispStringInRect+0xce>
 801321e:	b983      	cbnz	r3, 8013242 <GUI__DispStringInRect+0xea>
 8013220:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8013224:	e00d      	b.n	8013242 <GUI__DispStringInRect+0xea>
 8013226:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801322a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801322e:	1a6a      	subs	r2, r5, r1
 8013230:	1a15      	subs	r5, r2, r0
 8013232:	fb95 f3f3 	sdiv	r3, r5, r3
 8013236:	18cd      	adds	r5, r1, r3
 8013238:	e003      	b.n	8013242 <GUI__DispStringInRect+0xea>
 801323a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 801323e:	1a0a      	subs	r2, r1, r0
 8013240:	1c55      	adds	r5, r2, #1
 8013242:	4b16      	ldr	r3, [pc, #88]	; (801329c <GUI__DispStringInRect+0x144>)
 8013244:	6819      	ldr	r1, [r3, #0]
 8013246:	b2aa      	uxth	r2, r5
 8013248:	b2a3      	uxth	r3, r4
 801324a:	3801      	subs	r0, #1
 801324c:	844a      	strh	r2, [r1, #34]	; 0x22
 801324e:	848b      	strh	r3, [r1, #36]	; 0x24
 8013250:	f8ad 2008 	strh.w	r2, [sp, #8]
 8013254:	1941      	adds	r1, r0, r5
 8013256:	f108 32ff 	add.w	r2, r8, #4294967295
 801325a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801325e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8013262:	4639      	mov	r1, r7
 8013264:	1913      	adds	r3, r2, r4
 8013266:	9801      	ldr	r0, [sp, #4]
 8013268:	f8ad 300e 	strh.w	r3, [sp, #14]
 801326c:	aa02      	add	r2, sp, #8
 801326e:	f000 fccd 	bl	8013c0c <GUI__DispLine>
 8013272:	f8dd a004 	ldr.w	sl, [sp, #4]
 8013276:	4639      	mov	r1, r7
 8013278:	4650      	mov	r0, sl
 801327a:	f004 fee7 	bl	801804c <GUI_UC__NumChars2NumBytes>
 801327e:	af06      	add	r7, sp, #24
 8013280:	4450      	add	r0, sl
 8013282:	f847 0d14 	str.w	r0, [r7, #-20]!
 8013286:	f000 fd2d 	bl	8013ce4 <GUI_GetFontDistY>
 801328a:	1824      	adds	r4, r4, r0
 801328c:	4638      	mov	r0, r7
 801328e:	f004 fb0d 	bl	80178ac <GUI__HandleEOLine>
 8013292:	2800      	cmp	r0, #0
 8013294:	d0b1      	beq.n	80131fa <GUI__DispStringInRect+0xa2>
 8013296:	b007      	add	sp, #28
 8013298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801329c:	20000308 	.word	0x20000308

080132a0 <GUI_DispStringInRectMax>:
 80132a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80132a4:	460d      	mov	r5, r1
 80132a6:	4690      	mov	r8, r2
 80132a8:	461f      	mov	r7, r3
 80132aa:	4606      	mov	r6, r0
 80132ac:	b1c8      	cbz	r0, 80132e2 <GUI_DispStringInRectMax+0x42>
 80132ae:	b909      	cbnz	r1, 80132b4 <GUI_DispStringInRectMax+0x14>
 80132b0:	2400      	movs	r4, #0
 80132b2:	e00d      	b.n	80132d0 <GUI_DispStringInRectMax+0x30>
 80132b4:	4608      	mov	r0, r1
 80132b6:	f7fa f97f 	bl	800d5b8 <WM_SetUserClipRect>
 80132ba:	4604      	mov	r4, r0
 80132bc:	2800      	cmp	r0, #0
 80132be:	d0f7      	beq.n	80132b0 <GUI_DispStringInRectMax+0x10>
 80132c0:	4668      	mov	r0, sp
 80132c2:	4629      	mov	r1, r5
 80132c4:	4622      	mov	r2, r4
 80132c6:	f7fe fdab 	bl	8011e20 <GUI__IntersectRects>
 80132ca:	4668      	mov	r0, sp
 80132cc:	f7fa f974 	bl	800d5b8 <WM_SetUserClipRect>
 80132d0:	4630      	mov	r0, r6
 80132d2:	4629      	mov	r1, r5
 80132d4:	4642      	mov	r2, r8
 80132d6:	463b      	mov	r3, r7
 80132d8:	f7ff ff3e 	bl	8013158 <GUI__DispStringInRect>
 80132dc:	4620      	mov	r0, r4
 80132de:	f7fa f96b 	bl	800d5b8 <WM_SetUserClipRect>
 80132e2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

080132e6 <GUI_DispStringInRect>:
 80132e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80132ea:	f7ff bfd9 	b.w	80132a0 <GUI_DispStringInRectMax>
	...

080132f0 <GUI_DispStringHCenterAt>:
 80132f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132f2:	4b0b      	ldr	r3, [pc, #44]	; (8013320 <GUI_DispStringHCenterAt+0x30>)
 80132f4:	4605      	mov	r5, r0
 80132f6:	6818      	ldr	r0, [r3, #0]
 80132f8:	460f      	mov	r7, r1
 80132fa:	f9b0 102c 	ldrsh.w	r1, [r0, #44]	; 0x2c
 80132fe:	f041 0002 	orr.w	r0, r1, #2
 8013302:	4616      	mov	r6, r2
 8013304:	f004 feb4 	bl	8018070 <GUI_SetTextAlign>
 8013308:	4639      	mov	r1, r7
 801330a:	4604      	mov	r4, r0
 801330c:	4632      	mov	r2, r6
 801330e:	4628      	mov	r0, r5
 8013310:	f000 f810 	bl	8013334 <GUI_DispStringAt>
 8013314:	4620      	mov	r0, r4
 8013316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801331a:	f004 bea9 	b.w	8018070 <GUI_SetTextAlign>
 801331e:	bf00      	nop
 8013320:	20000308 	.word	0x20000308

08013324 <GUI_DispStringAtCEOL>:
 8013324:	b508      	push	{r3, lr}
 8013326:	f000 f805 	bl	8013334 <GUI_DispStringAt>
 801332a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801332e:	f000 b891 	b.w	8013454 <GUI_DispCEOL>
	...

08013334 <GUI_DispStringAt>:
 8013334:	4b02      	ldr	r3, [pc, #8]	; (8013340 <GUI_DispStringAt+0xc>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	8459      	strh	r1, [r3, #34]	; 0x22
 801333a:	849a      	strh	r2, [r3, #36]	; 0x24
 801333c:	f000 b802 	b.w	8013344 <GUI_DispString>
 8013340:	20000308 	.word	0x20000308

08013344 <GUI_DispString>:
 8013344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013348:	4604      	mov	r4, r0
 801334a:	2800      	cmp	r0, #0
 801334c:	d07d      	beq.n	801344a <GUI_DispString+0x106>
 801334e:	4d40      	ldr	r5, [pc, #256]	; (8013450 <GUI_DispString+0x10c>)
 8013350:	f000 fcc8 	bl	8013ce4 <GUI_GetFontDistY>
 8013354:	682b      	ldr	r3, [r5, #0]
 8013356:	4680      	mov	r8, r0
 8013358:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 801335c:	f000 fcaa 	bl	8013cb4 <GUI_GetYAdjust>
 8013360:	6829      	ldr	r1, [r5, #0]
 8013362:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
 8013364:	b287      	uxth	r7, r0
 8013366:	1bd0      	subs	r0, r2, r7
 8013368:	8488      	strh	r0, [r1, #36]	; 0x24
 801336a:	7823      	ldrb	r3, [r4, #0]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d060      	beq.n	8013432 <GUI_DispString+0xee>
 8013370:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8013374:	4620      	mov	r0, r4
 8013376:	f000 fbf1 	bl	8013b5c <GUI__GetLineNumChars>
 801337a:	4e35      	ldr	r6, [pc, #212]	; (8013450 <GUI_DispString+0x10c>)
 801337c:	4605      	mov	r5, r0
 801337e:	4629      	mov	r1, r5
 8013380:	4620      	mov	r0, r4
 8013382:	f000 fc15 	bl	8013bb0 <GUI__GetLineDistX>
 8013386:	6833      	ldr	r3, [r6, #0]
 8013388:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 801338a:	f001 0203 	and.w	r2, r1, #3
 801338e:	2a01      	cmp	r2, #1
 8013390:	d006      	beq.n	80133a0 <GUI_DispString+0x5c>
 8013392:	2a02      	cmp	r2, #2
 8013394:	d001      	beq.n	801339a <GUI_DispString+0x56>
 8013396:	2600      	movs	r6, #0
 8013398:	e003      	b.n	80133a2 <GUI_DispString+0x5e>
 801339a:	fb90 f6f2 	sdiv	r6, r0, r2
 801339e:	e000      	b.n	80133a2 <GUI_DispString+0x5e>
 80133a0:	4606      	mov	r6, r0
 80133a2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80133a4:	1b8a      	subs	r2, r1, r6
 80133a6:	b296      	uxth	r6, r2
 80133a8:	b2b1      	uxth	r1, r6
 80133aa:	8459      	strh	r1, [r3, #34]	; 0x22
 80133ac:	fa1f fa80 	uxth.w	sl, r0
 80133b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80133b2:	f8ad 1000 	strh.w	r1, [sp]
 80133b6:	f10a 30ff 	add.w	r0, sl, #4294967295
 80133ba:	1832      	adds	r2, r6, r0
 80133bc:	fa1f fb88 	uxth.w	fp, r8
 80133c0:	1e5e      	subs	r6, r3, #1
 80133c2:	eb0b 0106 	add.w	r1, fp, r6
 80133c6:	4e22      	ldr	r6, [pc, #136]	; (8013450 <GUI_DispString+0x10c>)
 80133c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80133cc:	f8ad 1006 	strh.w	r1, [sp, #6]
 80133d0:	4620      	mov	r0, r4
 80133d2:	4629      	mov	r1, r5
 80133d4:	466a      	mov	r2, sp
 80133d6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80133da:	f000 fc17 	bl	8013c0c <GUI__DispLine>
 80133de:	6830      	ldr	r0, [r6, #0]
 80133e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80133e4:	4629      	mov	r1, r5
 80133e6:	8482      	strh	r2, [r0, #36]	; 0x24
 80133e8:	4620      	mov	r0, r4
 80133ea:	f004 fe2f 	bl	801804c <GUI_UC__NumChars2NumBytes>
 80133ee:	5c23      	ldrb	r3, [r4, r0]
 80133f0:	2b0a      	cmp	r3, #10
 80133f2:	eb04 0200 	add.w	r2, r4, r0
 80133f6:	d001      	beq.n	80133fc <GUI_DispString+0xb8>
 80133f8:	2b0d      	cmp	r3, #13
 80133fa:	d112      	bne.n	8013422 <GUI_DispString+0xde>
 80133fc:	6833      	ldr	r3, [r6, #0]
 80133fe:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8013400:	f001 0003 	and.w	r0, r1, #3
 8013404:	1e41      	subs	r1, r0, #1
 8013406:	2901      	cmp	r1, #1
 8013408:	bf8a      	itet	hi
 801340a:	8c19      	ldrhhi	r1, [r3, #32]
 801340c:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 8013410:	8459      	strhhi	r1, [r3, #34]	; 0x22
 8013412:	7810      	ldrb	r0, [r2, #0]
 8013414:	280a      	cmp	r0, #10
 8013416:	d10a      	bne.n	801342e <GUI_DispString+0xea>
 8013418:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 801341a:	448b      	add	fp, r1
 801341c:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 8013420:	e005      	b.n	801342e <GUI_DispString+0xea>
 8013422:	f8bd 0000 	ldrh.w	r0, [sp]
 8013426:	6831      	ldr	r1, [r6, #0]
 8013428:	4482      	add	sl, r0
 801342a:	f8a1 a022 	strh.w	sl, [r1, #34]	; 0x22
 801342e:	7813      	ldrb	r3, [r2, #0]
 8013430:	b94b      	cbnz	r3, 8013446 <GUI_DispString+0x102>
 8013432:	4a07      	ldr	r2, [pc, #28]	; (8013450 <GUI_DispString+0x10c>)
 8013434:	6810      	ldr	r0, [r2, #0]
 8013436:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8013438:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801343a:	187f      	adds	r7, r7, r1
 801343c:	f023 0203 	bic.w	r2, r3, #3
 8013440:	8487      	strh	r7, [r0, #36]	; 0x24
 8013442:	8582      	strh	r2, [r0, #44]	; 0x2c
 8013444:	e001      	b.n	801344a <GUI_DispString+0x106>
 8013446:	1c54      	adds	r4, r2, #1
 8013448:	e78f      	b.n	801336a <GUI_DispString+0x26>
 801344a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344e:	bf00      	nop
 8013450:	20000308 	.word	0x20000308

08013454 <GUI_DispCEOL>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	4c0a      	ldr	r4, [pc, #40]	; (8013480 <GUI_DispCEOL+0x2c>)
 8013458:	6823      	ldr	r3, [r4, #0]
 801345a:	f9b3 5024 	ldrsh.w	r5, [r3, #36]	; 0x24
 801345e:	f000 fc29 	bl	8013cb4 <GUI_GetYAdjust>
 8013462:	6822      	ldr	r2, [r4, #0]
 8013464:	1a29      	subs	r1, r5, r0
 8013466:	69d0      	ldr	r0, [r2, #28]
 8013468:	7e43      	ldrb	r3, [r0, #25]
 801346a:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 801346e:	18cb      	adds	r3, r1, r3
 8013470:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8013474:	3b01      	subs	r3, #1
 8013476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801347a:	f000 b8f9 	b.w	8013670 <GUI_ClearRect>
 801347e:	bf00      	nop
 8013480:	20000308 	.word	0x20000308

08013484 <_UnlinkDevice>:
 8013484:	4b09      	ldr	r3, [pc, #36]	; (80134ac <_UnlinkDevice+0x28>)
 8013486:	6982      	ldr	r2, [r0, #24]
 8013488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801348c:	4281      	cmp	r1, r0
 801348e:	bf04      	itt	eq
 8013490:	6801      	ldreq	r1, [r0, #0]
 8013492:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 8013496:	6843      	ldr	r3, [r0, #4]
 8013498:	b10b      	cbz	r3, 801349e <_UnlinkDevice+0x1a>
 801349a:	6802      	ldr	r2, [r0, #0]
 801349c:	601a      	str	r2, [r3, #0]
 801349e:	6801      	ldr	r1, [r0, #0]
 80134a0:	b101      	cbz	r1, 80134a4 <_UnlinkDevice+0x20>
 80134a2:	604b      	str	r3, [r1, #4]
 80134a4:	2300      	movs	r3, #0
 80134a6:	6003      	str	r3, [r0, #0]
 80134a8:	6043      	str	r3, [r0, #4]
 80134aa:	4770      	bx	lr
 80134ac:	2000eb5c 	.word	0x2000eb5c

080134b0 <GUI_DEVICE__GetpDriver>:
 80134b0:	2801      	cmp	r0, #1
 80134b2:	dc09      	bgt.n	80134c8 <GUI_DEVICE__GetpDriver+0x18>
 80134b4:	4b05      	ldr	r3, [pc, #20]	; (80134cc <GUI_DEVICE__GetpDriver+0x1c>)
 80134b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80134ba:	b120      	cbz	r0, 80134c6 <GUI_DEVICE__GetpDriver+0x16>
 80134bc:	68c1      	ldr	r1, [r0, #12]
 80134be:	680a      	ldr	r2, [r1, #0]
 80134c0:	b11a      	cbz	r2, 80134ca <GUI_DEVICE__GetpDriver+0x1a>
 80134c2:	6800      	ldr	r0, [r0, #0]
 80134c4:	e7f9      	b.n	80134ba <GUI_DEVICE__GetpDriver+0xa>
 80134c6:	4770      	bx	lr
 80134c8:	2000      	movs	r0, #0
 80134ca:	4770      	bx	lr
 80134cc:	2000eb5c 	.word	0x2000eb5c

080134d0 <GUI_DEVICE_Delete>:
 80134d0:	f000 bcfe 	b.w	8013ed0 <GUI_ALLOC_FreeFixedBlock>

080134d4 <GUI_DEVICE_Create>:
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134d8:	4606      	mov	r6, r0
 80134da:	460d      	mov	r5, r1
 80134dc:	4617      	mov	r7, r2
 80134de:	461c      	mov	r4, r3
 80134e0:	dd01      	ble.n	80134e6 <GUI_DEVICE_Create+0x12>
 80134e2:	2000      	movs	r0, #0
 80134e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134e6:	201c      	movs	r0, #28
 80134e8:	f000 fe8c 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	d0f8      	beq.n	80134e2 <GUI_DEVICE_Create+0xe>
 80134f0:	b10d      	cbz	r5, 80134f6 <GUI_DEVICE_Create+0x22>
 80134f2:	6105      	str	r5, [r0, #16]
 80134f4:	e009      	b.n	801350a <GUI_DEVICE_Create+0x36>
 80134f6:	4b09      	ldr	r3, [pc, #36]	; (801351c <GUI_DEVICE_Create+0x48>)
 80134f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80134fc:	b12b      	cbz	r3, 801350a <GUI_DEVICE_Create+0x36>
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	b10a      	cbz	r2, 8013506 <GUI_DEVICE_Create+0x32>
 8013502:	4613      	mov	r3, r2
 8013504:	e7fb      	b.n	80134fe <GUI_DEVICE_Create+0x2a>
 8013506:	6919      	ldr	r1, [r3, #16]
 8013508:	6101      	str	r1, [r0, #16]
 801350a:	2200      	movs	r2, #0
 801350c:	6184      	str	r4, [r0, #24]
 801350e:	8287      	strh	r7, [r0, #20]
 8013510:	60c6      	str	r6, [r0, #12]
 8013512:	6002      	str	r2, [r0, #0]
 8013514:	6042      	str	r2, [r0, #4]
 8013516:	6082      	str	r2, [r0, #8]
 8013518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801351a:	bf00      	nop
 801351c:	2000eb5c 	.word	0x2000eb5c

08013520 <GUI_DEVICE_Unlink>:
 8013520:	f7ff bfb0 	b.w	8013484 <_UnlinkDevice>

08013524 <GUI_DEVICE_Link>:
 8013524:	b510      	push	{r4, lr}
 8013526:	b330      	cbz	r0, 8013576 <GUI_DEVICE_Link+0x52>
 8013528:	6982      	ldr	r2, [r0, #24]
 801352a:	2a01      	cmp	r2, #1
 801352c:	dc23      	bgt.n	8013576 <GUI_DEVICE_Link+0x52>
 801352e:	4919      	ldr	r1, [pc, #100]	; (8013594 <GUI_DEVICE_Link+0x70>)
 8013530:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8013534:	b913      	cbnz	r3, 801353c <GUI_DEVICE_Link+0x18>
 8013536:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 801353a:	e01a      	b.n	8013572 <GUI_DEVICE_Link+0x4e>
 801353c:	685c      	ldr	r4, [r3, #4]
 801353e:	b10c      	cbz	r4, 8013544 <GUI_DEVICE_Link+0x20>
 8013540:	4623      	mov	r3, r4
 8013542:	e7fb      	b.n	801353c <GUI_DEVICE_Link+0x18>
 8013544:	68c1      	ldr	r1, [r0, #12]
 8013546:	680c      	ldr	r4, [r1, #0]
 8013548:	68d9      	ldr	r1, [r3, #12]
 801354a:	6809      	ldr	r1, [r1, #0]
 801354c:	42a1      	cmp	r1, r4
 801354e:	dd03      	ble.n	8013558 <GUI_DEVICE_Link+0x34>
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d1f8      	bne.n	8013548 <GUI_DEVICE_Link+0x24>
 8013556:	e00e      	b.n	8013576 <GUI_DEVICE_Link+0x52>
 8013558:	d102      	bne.n	8013560 <GUI_DEVICE_Link+0x3c>
 801355a:	8a84      	ldrh	r4, [r0, #20]
 801355c:	2c01      	cmp	r4, #1
 801355e:	d011      	beq.n	8013584 <GUI_DEVICE_Link+0x60>
 8013560:	6859      	ldr	r1, [r3, #4]
 8013562:	b199      	cbz	r1, 801358c <GUI_DEVICE_Link+0x68>
 8013564:	6008      	str	r0, [r1, #0]
 8013566:	6041      	str	r1, [r0, #4]
 8013568:	6058      	str	r0, [r3, #4]
 801356a:	4298      	cmp	r0, r3
 801356c:	bf08      	it	eq
 801356e:	2300      	moveq	r3, #0
 8013570:	6003      	str	r3, [r0, #0]
 8013572:	2000      	movs	r0, #0
 8013574:	bd10      	pop	{r4, pc}
 8013576:	2001      	movs	r0, #1
 8013578:	bd10      	pop	{r4, pc}
 801357a:	4623      	mov	r3, r4
 801357c:	68e4      	ldr	r4, [r4, #12]
 801357e:	6824      	ldr	r4, [r4, #0]
 8013580:	428c      	cmp	r4, r1
 8013582:	dbed      	blt.n	8013560 <GUI_DEVICE_Link+0x3c>
 8013584:	681c      	ldr	r4, [r3, #0]
 8013586:	2c00      	cmp	r4, #0
 8013588:	d1f7      	bne.n	801357a <GUI_DEVICE_Link+0x56>
 801358a:	e7e9      	b.n	8013560 <GUI_DEVICE_Link+0x3c>
 801358c:	4901      	ldr	r1, [pc, #4]	; (8013594 <GUI_DEVICE_Link+0x70>)
 801358e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8013592:	e7e9      	b.n	8013568 <GUI_DEVICE_Link+0x44>
 8013594:	2000eb5c 	.word	0x2000eb5c

08013598 <GUI_DEVICE_CreateAndLink>:
 8013598:	b538      	push	{r3, r4, r5, lr}
 801359a:	461d      	mov	r5, r3
 801359c:	f7ff ff9a 	bl	80134d4 <GUI_DEVICE_Create>
 80135a0:	4604      	mov	r4, r0
 80135a2:	b148      	cbz	r0, 80135b8 <GUI_DEVICE_CreateAndLink+0x20>
 80135a4:	f7ff ffbe 	bl	8013524 <GUI_DEVICE_Link>
 80135a8:	68e3      	ldr	r3, [r4, #12]
 80135aa:	6818      	ldr	r0, [r3, #0]
 80135ac:	b920      	cbnz	r0, 80135b8 <GUI_DEVICE_CreateAndLink+0x20>
 80135ae:	4903      	ldr	r1, [pc, #12]	; (80135bc <GUI_DEVICE_CreateAndLink+0x24>)
 80135b0:	3516      	adds	r5, #22
 80135b2:	680a      	ldr	r2, [r1, #0]
 80135b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80135b8:	4620      	mov	r0, r4
 80135ba:	bd38      	pop	{r3, r4, r5, pc}
 80135bc:	20000308 	.word	0x20000308

080135c0 <_OnExit>:
 80135c0:	b510      	push	{r4, lr}
 80135c2:	4b07      	ldr	r3, [pc, #28]	; (80135e0 <_OnExit+0x20>)
 80135c4:	4807      	ldr	r0, [pc, #28]	; (80135e4 <_OnExit+0x24>)
 80135c6:	2400      	movs	r4, #0
 80135c8:	4621      	mov	r1, r4
 80135ca:	2270      	movs	r2, #112	; 0x70
 80135cc:	601c      	str	r4, [r3, #0]
 80135ce:	f7fe fb41 	bl	8011c54 <GUI__memset>
 80135d2:	4805      	ldr	r0, [pc, #20]	; (80135e8 <_OnExit+0x28>)
 80135d4:	4621      	mov	r1, r4
 80135d6:	2208      	movs	r2, #8
 80135d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135dc:	f7fe bb3a 	b.w	8011c54 <GUI__memset>
 80135e0:	2000e1d0 	.word	0x2000e1d0
 80135e4:	2000e158 	.word	0x2000e158
 80135e8:	2000eb5c 	.word	0x2000eb5c

080135ec <_InitContext.constprop.0>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4d19      	ldr	r5, [pc, #100]	; (8013654 <_InitContext.constprop.0+0x68>)
 80135f0:	4c19      	ldr	r4, [pc, #100]	; (8013658 <_InitContext.constprop.0+0x6c>)
 80135f2:	682b      	ldr	r3, [r5, #0]
 80135f4:	1d1a      	adds	r2, r3, #4
 80135f6:	7c59      	ldrb	r1, [r3, #17]
 80135f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80135fa:	f103 0008 	add.w	r0, r3, #8
 80135fe:	639b      	str	r3, [r3, #56]	; 0x38
 8013600:	641b      	str	r3, [r3, #64]	; 0x40
 8013602:	4b16      	ldr	r3, [pc, #88]	; (801365c <_InitContext.constprop.0+0x70>)
 8013604:	6160      	str	r0, [r4, #20]
 8013606:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801360a:	68c2      	ldr	r2, [r0, #12]
 801360c:	f104 0108 	add.w	r1, r4, #8
 8013610:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013612:	4798      	blx	r3
 8013614:	4912      	ldr	r1, [pc, #72]	; (8013660 <_InitContext.constprop.0+0x74>)
 8013616:	4813      	ldr	r0, [pc, #76]	; (8013664 <_InitContext.constprop.0+0x78>)
 8013618:	682b      	ldr	r3, [r5, #0]
 801361a:	680a      	ldr	r2, [r1, #0]
 801361c:	6660      	str	r0, [r4, #100]	; 0x64
 801361e:	3308      	adds	r3, #8
 8013620:	2001      	movs	r0, #1
 8013622:	6163      	str	r3, [r4, #20]
 8013624:	61e2      	str	r2, [r4, #28]
 8013626:	7620      	strb	r0, [r4, #24]
 8013628:	f7fa fbb0 	bl	800dd8c <WM_GetDesktopWindow>
 801362c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8013630:	2103      	movs	r1, #3
 8013632:	64a0      	str	r0, [r4, #72]	; 0x48
 8013634:	2000      	movs	r0, #0
 8013636:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
 801363a:	6322      	str	r2, [r4, #48]	; 0x30
 801363c:	6362      	str	r2, [r4, #52]	; 0x34
 801363e:	f7fe fac3 	bl	8011bc8 <LCD_SetBkColor>
 8013642:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013646:	f7fe fac7 	bl	8011bd8 <LCD_SetColor>
 801364a:	4807      	ldr	r0, [pc, #28]	; (8013668 <_InitContext.constprop.0+0x7c>)
 801364c:	4b07      	ldr	r3, [pc, #28]	; (801366c <_InitContext.constprop.0+0x80>)
 801364e:	6018      	str	r0, [r3, #0]
 8013650:	bd38      	pop	{r3, r4, r5, pc}
 8013652:	bf00      	nop
 8013654:	20000308 	.word	0x20000308
 8013658:	2000e158 	.word	0x2000e158
 801365c:	2000eb5c 	.word	0x2000eb5c
 8013660:	2000030c 	.word	0x2000030c
 8013664:	080342a0 	.word	0x080342a0
 8013668:	08035540 	.word	0x08035540
 801366c:	2000eb58 	.word	0x2000eb58

08013670 <GUI_ClearRect>:
 8013670:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013674:	4607      	mov	r7, r0
 8013676:	2004      	movs	r0, #4
 8013678:	469a      	mov	sl, r3
 801367a:	460e      	mov	r6, r1
 801367c:	4691      	mov	r9, r2
 801367e:	f7fd ff59 	bl	8011534 <LCD_SetDrawMode>
 8013682:	4b13      	ldr	r3, [pc, #76]	; (80136d0 <GUI_ClearRect+0x60>)
 8013684:	681c      	ldr	r4, [r3, #0]
 8013686:	4680      	mov	r8, r0
 8013688:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801368a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801368c:	197f      	adds	r7, r7, r5
 801368e:	1836      	adds	r6, r6, r0
 8013690:	eb0a 0400 	add.w	r4, sl, r0
 8013694:	444d      	add	r5, r9
 8013696:	4668      	mov	r0, sp
 8013698:	f8ad 7000 	strh.w	r7, [sp]
 801369c:	f8ad 5004 	strh.w	r5, [sp, #4]
 80136a0:	f8ad 6002 	strh.w	r6, [sp, #2]
 80136a4:	f8ad 4006 	strh.w	r4, [sp, #6]
 80136a8:	f7fb facc 	bl	800ec44 <WM__InitIVRSearch>
 80136ac:	b920      	cbnz	r0, 80136b8 <GUI_ClearRect+0x48>
 80136ae:	4640      	mov	r0, r8
 80136b0:	f7fd ff40 	bl	8011534 <LCD_SetDrawMode>
 80136b4:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 80136b8:	4638      	mov	r0, r7
 80136ba:	4631      	mov	r1, r6
 80136bc:	462a      	mov	r2, r5
 80136be:	4623      	mov	r3, r4
 80136c0:	f7fd ffba 	bl	8011638 <LCD_FillRect>
 80136c4:	f7fb f9fe 	bl	800eac4 <WM__GetNextIVR>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d1f5      	bne.n	80136b8 <GUI_ClearRect+0x48>
 80136cc:	e7ef      	b.n	80136ae <GUI_ClearRect+0x3e>
 80136ce:	bf00      	nop
 80136d0:	20000308 	.word	0x20000308

080136d4 <GUI_Clear>:
 80136d4:	2000      	movs	r0, #0
 80136d6:	b510      	push	{r4, lr}
 80136d8:	4601      	mov	r1, r0
 80136da:	f7ff f9d9 	bl	8012a90 <GUI_GotoXY>
 80136de:	4804      	ldr	r0, [pc, #16]	; (80136f0 <GUI_Clear+0x1c>)
 80136e0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80136e4:	4601      	mov	r1, r0
 80136e6:	4613      	mov	r3, r2
 80136e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136ec:	f7ff bfc0 	b.w	8013670 <GUI_ClearRect>
 80136f0:	ffffc001 	.word	0xffffc001

080136f4 <GUI__RegisterExit>:
 80136f4:	b480      	push	{r7}
 80136f6:	b083      	sub	sp, #12
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	f24e 1354 	movw	r3, #57684	; 0xe154
 8013700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	605a      	str	r2, [r3, #4]
 801370a:	f24e 1354 	movw	r3, #57684	; 0xe154
 801370e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	601a      	str	r2, [r3, #0]
 8013716:	f107 070c 	add.w	r7, r7, #12
 801371a:	46bd      	mov	sp, r7
 801371c:	bc80      	pop	{r7}
 801371e:	4770      	bx	lr

08013720 <GUI__Config>:
 8013720:	b508      	push	{r3, lr}
 8013722:	4b08      	ldr	r3, [pc, #32]	; (8013744 <GUI__Config+0x24>)
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	b962      	cbnz	r2, 8013742 <GUI__Config+0x22>
 8013728:	2001      	movs	r0, #1
 801372a:	6018      	str	r0, [r3, #0]
 801372c:	f7ef fef0 	bl	8003510 <GUI_X_Config>
 8013730:	f7ef fe7e 	bl	8003430 <LCD_X_Config>
 8013734:	4804      	ldr	r0, [pc, #16]	; (8013748 <GUI__Config+0x28>)
 8013736:	4905      	ldr	r1, [pc, #20]	; (801374c <GUI__Config+0x2c>)
 8013738:	6001      	str	r1, [r0, #0]
 801373a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801373e:	f7ff bfd9 	b.w	80136f4 <GUI__RegisterExit>
 8013742:	bd08      	pop	{r3, pc}
 8013744:	2000e1d0 	.word	0x2000e1d0
 8013748:	2000e1c8 	.word	0x2000e1c8
 801374c:	080135c1 	.word	0x080135c1

08013750 <GUI_Init>:
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
 8013756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801375a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801375e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013762:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8013766:	6812      	ldr	r2, [r2, #0]
 8013768:	f022 0201 	bic.w	r2, r2, #1
 801376c:	601a      	str	r2, [r3, #0]
 801376e:	f243 0308 	movw	r3, #12296	; 0x3008
 8013772:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013776:	f04f 0201 	mov.w	r2, #1
 801377a:	601a      	str	r2, [r3, #0]
 801377c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013780:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013784:	f24a 52c2 	movw	r2, #42434	; 0xa5c2
 8013788:	f2cf 4207 	movt	r2, #62471	; 0xf407
 801378c:	601a      	str	r2, [r3, #0]
 801378e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013792:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	f24b 53cd 	movw	r3, #46541	; 0xb5cd
 801379c:	f2cb 53e8 	movt	r3, #46568	; 0xb5e8
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d000      	beq.n	80137a6 <GUI_Init+0x56>
 80137a4:	e7fe      	b.n	80137a4 <GUI_Init+0x54>
 80137a6:	f7ff ffbb 	bl	8013720 <GUI__Config>
 80137aa:	f64e 333a 	movw	r3, #60218	; 0xeb3a
 80137ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80137b2:	f04f 022e 	mov.w	r2, #46	; 0x2e
 80137b6:	701a      	strb	r2, [r3, #0]
 80137b8:	f7ef feb2 	bl	8003520 <GUI_X_Init>
 80137bc:	f7ff ff16 	bl	80135ec <_InitContext.constprop.0>
 80137c0:	f7fe f95e 	bl	8011a80 <emWin_LCD_Init>
 80137c4:	6078      	str	r0, [r7, #4]
 80137c6:	f04f 0000 	mov.w	r0, #0
 80137ca:	f04f 0100 	mov.w	r1, #0
 80137ce:	f004 fc59 	bl	8018084 <GUI_SetOrg>
 80137d2:	f7fb fc79 	bl	800f0c8 <WM_Init>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	4618      	mov	r0, r3
 80137da:	f107 0708 	add.w	r7, r7, #8
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
 80137e2:	bf00      	nop

080137e4 <GUIPROP__FindChar>:
 80137e4:	b138      	cbz	r0, 80137f6 <GUIPROP__FindChar+0x12>
 80137e6:	8803      	ldrh	r3, [r0, #0]
 80137e8:	428b      	cmp	r3, r1
 80137ea:	d802      	bhi.n	80137f2 <GUIPROP__FindChar+0xe>
 80137ec:	8842      	ldrh	r2, [r0, #2]
 80137ee:	428a      	cmp	r2, r1
 80137f0:	d201      	bcs.n	80137f6 <GUIPROP__FindChar+0x12>
 80137f2:	6880      	ldr	r0, [r0, #8]
 80137f4:	e7f6      	b.n	80137e4 <GUIPROP__FindChar>
 80137f6:	4770      	bx	lr

080137f8 <GUIPROP_DispChar>:
 80137f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	4c38      	ldr	r4, [pc, #224]	; (80138e0 <GUIPROP_DispChar+0xe8>)
 80137fe:	6823      	ldr	r3, [r4, #0]
 8013800:	4605      	mov	r5, r0
 8013802:	69d8      	ldr	r0, [r3, #28]
 8013804:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8013808:	69c0      	ldr	r0, [r0, #28]
 801380a:	b089      	sub	sp, #36	; 0x24
 801380c:	4629      	mov	r1, r5
 801380e:	f7ff ffe9 	bl	80137e4 <GUIPROP__FindChar>
 8013812:	2800      	cmp	r0, #0
 8013814:	d061      	beq.n	80138da <GUIPROP_DispChar+0xe2>
 8013816:	f8b0 8000 	ldrh.w	r8, [r0]
 801381a:	6847      	ldr	r7, [r0, #4]
 801381c:	ebc8 0805 	rsb	r8, r8, r5
 8013820:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 8013824:	4648      	mov	r0, r9
 8013826:	f896 b002 	ldrb.w	fp, [r6, #2]
 801382a:	f7fd fe83 	bl	8011534 <LCD_SetDrawMode>
 801382e:	6825      	ldr	r5, [r4, #0]
 8013830:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8013834:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 8013838:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 801383c:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8013840:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8013844:	4682      	mov	sl, r0
 8013846:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 801384a:	f8cd c000 	str.w	ip, [sp]
 801384e:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8013852:	f8cd b00c 	str.w	fp, [sp, #12]
 8013856:	f04f 0c01 	mov.w	ip, #1
 801385a:	f8cd e004 	str.w	lr, [sp, #4]
 801385e:	f8cd c008 	str.w	ip, [sp, #8]
 8013862:	9306      	str	r3, [sp, #24]
 8013864:	6873      	ldr	r3, [r6, #4]
 8013866:	9304      	str	r3, [sp, #16]
 8013868:	6bad      	ldr	r5, [r5, #56]	; 0x38
 801386a:	9b06      	ldr	r3, [sp, #24]
 801386c:	9505      	str	r5, [sp, #20]
 801386e:	f7fd ffe9 	bl	8011844 <LCD_DrawBitmap>
 8013872:	6821      	ldr	r1, [r4, #0]
 8013874:	69ca      	ldr	r2, [r1, #28]
 8013876:	f892 b019 	ldrb.w	fp, [r2, #25]
 801387a:	7e10      	ldrb	r0, [r2, #24]
 801387c:	4583      	cmp	fp, r0
 801387e:	d920      	bls.n	80138c2 <GUIPROP_DispChar+0xca>
 8013880:	f1b9 0f02 	cmp.w	r9, #2
 8013884:	7ed5      	ldrb	r5, [r2, #27]
 8013886:	d01c      	beq.n	80138c2 <GUIPROP_DispChar+0xca>
 8013888:	9007      	str	r0, [sp, #28]
 801388a:	f004 fc38 	bl	80180fe <GUI_GetColor>
 801388e:	4681      	mov	r9, r0
 8013890:	f004 fc2e 	bl	80180f0 <GUI_GetBkColor>
 8013894:	f7fe ff6a 	bl	801276c <GUI_SetColor>
 8013898:	6824      	ldr	r4, [r4, #0]
 801389a:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 801389e:	69e1      	ldr	r1, [r4, #28]
 80138a0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80138a4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80138a8:	7eca      	ldrb	r2, [r1, #27]
 80138aa:	9907      	ldr	r1, [sp, #28]
 80138ac:	fb07 0202 	mla	r2, r7, r2, r0
 80138b0:	fb01 3105 	mla	r1, r1, r5, r3
 80138b4:	fb0b 3305 	mla	r3, fp, r5, r3
 80138b8:	f7fd febe 	bl	8011638 <LCD_FillRect>
 80138bc:	4648      	mov	r0, r9
 80138be:	f7fe ff55 	bl	801276c <GUI_SetColor>
 80138c2:	4650      	mov	r0, sl
 80138c4:	f7fd fe36 	bl	8011534 <LCD_SetDrawMode>
 80138c8:	4805      	ldr	r0, [pc, #20]	; (80138e0 <GUIPROP_DispChar+0xe8>)
 80138ca:	6803      	ldr	r3, [r0, #0]
 80138cc:	7870      	ldrb	r0, [r6, #1]
 80138ce:	69da      	ldr	r2, [r3, #28]
 80138d0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80138d2:	7e92      	ldrb	r2, [r2, #26]
 80138d4:	fb00 1202 	mla	r2, r0, r2, r1
 80138d8:	845a      	strh	r2, [r3, #34]	; 0x22
 80138da:	b009      	add	sp, #36	; 0x24
 80138dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e0:	20000308 	.word	0x20000308

080138e4 <GUIPROP_GetCharDistX>:
 80138e4:	4b0d      	ldr	r3, [pc, #52]	; (801391c <GUIPROP_GetCharDistX+0x38>)
 80138e6:	b570      	push	{r4, r5, r6, lr}
 80138e8:	4606      	mov	r6, r0
 80138ea:	6818      	ldr	r0, [r3, #0]
 80138ec:	69c5      	ldr	r5, [r0, #28]
 80138ee:	460c      	mov	r4, r1
 80138f0:	69e8      	ldr	r0, [r5, #28]
 80138f2:	4631      	mov	r1, r6
 80138f4:	f7ff ff76 	bl	80137e4 <GUIPROP__FindChar>
 80138f8:	b170      	cbz	r0, 8013918 <GUIPROP_GetCharDistX+0x34>
 80138fa:	8801      	ldrh	r1, [r0, #0]
 80138fc:	6842      	ldr	r2, [r0, #4]
 80138fe:	1a76      	subs	r6, r6, r1
 8013900:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8013904:	7ea9      	ldrb	r1, [r5, #26]
 8013906:	7858      	ldrb	r0, [r3, #1]
 8013908:	fb10 f001 	smulbb	r0, r0, r1
 801390c:	b124      	cbz	r4, 8013918 <GUIPROP_GetCharDistX+0x34>
 801390e:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 8013912:	fb12 f301 	smulbb	r3, r2, r1
 8013916:	6023      	str	r3, [r4, #0]
 8013918:	bd70      	pop	{r4, r5, r6, pc}
 801391a:	bf00      	nop
 801391c:	20000308 	.word	0x20000308

08013920 <GUIPROP_GetFontInfo>:
 8013920:	2301      	movs	r3, #1
 8013922:	800b      	strh	r3, [r1, #0]
 8013924:	4770      	bx	lr

08013926 <GUIPROP_IsInFont>:
 8013926:	b508      	push	{r3, lr}
 8013928:	69c0      	ldr	r0, [r0, #28]
 801392a:	f7ff ff5b 	bl	80137e4 <GUIPROP__FindChar>
 801392e:	3000      	adds	r0, #0
 8013930:	bf18      	it	ne
 8013932:	2001      	movne	r0, #1
 8013934:	bd08      	pop	{r3, pc}
	...

08013938 <GUIMONO_DispChar>:
 8013938:	4b52      	ldr	r3, [pc, #328]	; (8013a84 <GUIMONO_DispChar+0x14c>)
 801393a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	69d9      	ldr	r1, [r3, #28]
 8013942:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8013944:	69cc      	ldr	r4, [r1, #28]
 8013946:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8013948:	89a2      	ldrh	r2, [r4, #12]
 801394a:	4290      	cmp	r0, r2
 801394c:	b08b      	sub	sp, #44	; 0x2c
 801394e:	d308      	bcc.n	8013962 <GUIMONO_DispChar+0x2a>
 8013950:	89e6      	ldrh	r6, [r4, #14]
 8013952:	4286      	cmp	r6, r0
 8013954:	d305      	bcc.n	8013962 <GUIMONO_DispChar+0x2a>
 8013956:	f8d4 9000 	ldr.w	r9, [r4]
 801395a:	1a82      	subs	r2, r0, r2
 801395c:	f04f 3bff 	mov.w	fp, #4294967295
 8013960:	e015      	b.n	801398e <GUIMONO_DispChar+0x56>
 8013962:	68a2      	ldr	r2, [r4, #8]
 8013964:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013968:	2a00      	cmp	r2, #0
 801396a:	f000 8081 	beq.w	8013a70 <GUIMONO_DispChar+0x138>
 801396e:	8816      	ldrh	r6, [r2, #0]
 8013970:	42b0      	cmp	r0, r6
 8013972:	d37d      	bcc.n	8013a70 <GUIMONO_DispChar+0x138>
 8013974:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8013978:	4584      	cmp	ip, r0
 801397a:	d379      	bcc.n	8013a70 <GUIMONO_DispChar+0x138>
 801397c:	6852      	ldr	r2, [r2, #4]
 801397e:	1b80      	subs	r0, r0, r6
 8013980:	b280      	uxth	r0, r0
 8013982:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8013986:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 801398a:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 801398e:	1c50      	adds	r0, r2, #1
 8013990:	d06e      	beq.n	8013a70 <GUIMONO_DispChar+0x138>
 8013992:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8013996:	f891 8018 	ldrb.w	r8, [r1, #24]
 801399a:	7ca6      	ldrb	r6, [r4, #18]
 801399c:	fa0f f38a 	sxth.w	r3, sl
 80139a0:	fb18 f106 	smulbb	r1, r8, r6
 80139a4:	4618      	mov	r0, r3
 80139a6:	7c26      	ldrb	r6, [r4, #16]
 80139a8:	9107      	str	r1, [sp, #28]
 80139aa:	9308      	str	r3, [sp, #32]
 80139ac:	9206      	str	r2, [sp, #24]
 80139ae:	f7fd fdc1 	bl	8011534 <LCD_SetDrawMode>
 80139b2:	9009      	str	r0, [sp, #36]	; 0x24
 80139b4:	4833      	ldr	r0, [pc, #204]	; (8013a84 <GUIMONO_DispChar+0x14c>)
 80139b6:	6803      	ldr	r3, [r0, #0]
 80139b8:	69da      	ldr	r2, [r3, #28]
 80139ba:	7e91      	ldrb	r1, [r2, #26]
 80139bc:	9100      	str	r1, [sp, #0]
 80139be:	7ed0      	ldrb	r0, [r2, #27]
 80139c0:	2201      	movs	r2, #1
 80139c2:	9001      	str	r0, [sp, #4]
 80139c4:	9202      	str	r2, [sp, #8]
 80139c6:	7ca1      	ldrb	r1, [r4, #18]
 80139c8:	9806      	ldr	r0, [sp, #24]
 80139ca:	9a07      	ldr	r2, [sp, #28]
 80139cc:	9103      	str	r1, [sp, #12]
 80139ce:	fb02 9100 	mla	r1, r2, r0, r9
 80139d2:	9104      	str	r1, [sp, #16]
 80139d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139d6:	b23f      	sxth	r7, r7
 80139d8:	b22d      	sxth	r5, r5
 80139da:	9305      	str	r3, [sp, #20]
 80139dc:	4638      	mov	r0, r7
 80139de:	4629      	mov	r1, r5
 80139e0:	4632      	mov	r2, r6
 80139e2:	4643      	mov	r3, r8
 80139e4:	f7fd ff2e 	bl	8011844 <LCD_DrawBitmap>
 80139e8:	f1bb 3fff 	cmp.w	fp, #4294967295
 80139ec:	d01b      	beq.n	8013a26 <GUIMONO_DispChar+0xee>
 80139ee:	f04a 0002 	orr.w	r0, sl, #2
 80139f2:	b200      	sxth	r0, r0
 80139f4:	f7fd fd9e 	bl	8011534 <LCD_SetDrawMode>
 80139f8:	4a22      	ldr	r2, [pc, #136]	; (8013a84 <GUIMONO_DispChar+0x14c>)
 80139fa:	6813      	ldr	r3, [r2, #0]
 80139fc:	69d8      	ldr	r0, [r3, #28]
 80139fe:	7e81      	ldrb	r1, [r0, #26]
 8013a00:	9100      	str	r1, [sp, #0]
 8013a02:	7ec2      	ldrb	r2, [r0, #27]
 8013a04:	2001      	movs	r0, #1
 8013a06:	9201      	str	r2, [sp, #4]
 8013a08:	9002      	str	r0, [sp, #8]
 8013a0a:	9a07      	ldr	r2, [sp, #28]
 8013a0c:	7ca1      	ldrb	r1, [r4, #18]
 8013a0e:	fb02 900b 	mla	r0, r2, fp, r9
 8013a12:	9103      	str	r1, [sp, #12]
 8013a14:	9004      	str	r0, [sp, #16]
 8013a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a18:	4638      	mov	r0, r7
 8013a1a:	9305      	str	r3, [sp, #20]
 8013a1c:	4629      	mov	r1, r5
 8013a1e:	4632      	mov	r2, r6
 8013a20:	4643      	mov	r3, r8
 8013a22:	f7fd ff0f 	bl	8011844 <LCD_DrawBitmap>
 8013a26:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8013a84 <GUIMONO_DispChar+0x14c>
 8013a2a:	f8d8 1000 	ldr.w	r1, [r8]
 8013a2e:	69c8      	ldr	r0, [r1, #28]
 8013a30:	7e42      	ldrb	r2, [r0, #25]
 8013a32:	7e03      	ldrb	r3, [r0, #24]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d917      	bls.n	8013a68 <GUIMONO_DispChar+0x130>
 8013a38:	9908      	ldr	r1, [sp, #32]
 8013a3a:	2902      	cmp	r1, #2
 8013a3c:	d014      	beq.n	8013a68 <GUIMONO_DispChar+0x130>
 8013a3e:	f08a 0004 	eor.w	r0, sl, #4
 8013a42:	b200      	sxth	r0, r0
 8013a44:	f7fd fd76 	bl	8011534 <LCD_SetDrawMode>
 8013a48:	f8d8 2000 	ldr.w	r2, [r8]
 8013a4c:	69d3      	ldr	r3, [r2, #28]
 8013a4e:	f893 e018 	ldrb.w	lr, [r3, #24]
 8013a52:	7ed9      	ldrb	r1, [r3, #27]
 8013a54:	7e9a      	ldrb	r2, [r3, #26]
 8013a56:	7e5b      	ldrb	r3, [r3, #25]
 8013a58:	4638      	mov	r0, r7
 8013a5a:	fb0e 5101 	mla	r1, lr, r1, r5
 8013a5e:	fb06 7202 	mla	r2, r6, r2, r7
 8013a62:	18eb      	adds	r3, r5, r3
 8013a64:	f7fd fde8 	bl	8011638 <LCD_FillRect>
 8013a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a6a:	b2c0      	uxtb	r0, r0
 8013a6c:	f7fd fd62 	bl	8011534 <LCD_SetDrawMode>
 8013a70:	4904      	ldr	r1, [pc, #16]	; (8013a84 <GUIMONO_DispChar+0x14c>)
 8013a72:	7c60      	ldrb	r0, [r4, #17]
 8013a74:	680b      	ldr	r3, [r1, #0]
 8013a76:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8013a78:	1881      	adds	r1, r0, r2
 8013a7a:	8459      	strh	r1, [r3, #34]	; 0x22
 8013a7c:	b00b      	add	sp, #44	; 0x2c
 8013a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a82:	bf00      	nop
 8013a84:	20000308 	.word	0x20000308

08013a88 <GUIMONO_GetCharDistX>:
 8013a88:	4b04      	ldr	r3, [pc, #16]	; (8013a9c <GUIMONO_GetCharDistX+0x14>)
 8013a8a:	6818      	ldr	r0, [r3, #0]
 8013a8c:	69c2      	ldr	r2, [r0, #28]
 8013a8e:	69d3      	ldr	r3, [r2, #28]
 8013a90:	b109      	cbz	r1, 8013a96 <GUIMONO_GetCharDistX+0xe>
 8013a92:	7c18      	ldrb	r0, [r3, #16]
 8013a94:	6008      	str	r0, [r1, #0]
 8013a96:	7c58      	ldrb	r0, [r3, #17]
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop
 8013a9c:	20000308 	.word	0x20000308

08013aa0 <GUIMONO_GetFontInfo>:
 8013aa0:	2302      	movs	r3, #2
 8013aa2:	800b      	strh	r3, [r1, #0]
 8013aa4:	4770      	bx	lr

08013aa6 <GUIMONO_IsInFont>:
 8013aa6:	69c3      	ldr	r3, [r0, #28]
 8013aa8:	899a      	ldrh	r2, [r3, #12]
 8013aaa:	428a      	cmp	r2, r1
 8013aac:	d802      	bhi.n	8013ab4 <GUIMONO_IsInFont+0xe>
 8013aae:	89d8      	ldrh	r0, [r3, #14]
 8013ab0:	4288      	cmp	r0, r1
 8013ab2:	d20f      	bcs.n	8013ad4 <GUIMONO_IsInFont+0x2e>
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	b90b      	cbnz	r3, 8013abc <GUIMONO_IsInFont+0x16>
 8013ab8:	2000      	movs	r0, #0
 8013aba:	4770      	bx	lr
 8013abc:	881a      	ldrh	r2, [r3, #0]
 8013abe:	4291      	cmp	r1, r2
 8013ac0:	d3fa      	bcc.n	8013ab8 <GUIMONO_IsInFont+0x12>
 8013ac2:	8858      	ldrh	r0, [r3, #2]
 8013ac4:	4288      	cmp	r0, r1
 8013ac6:	d3f7      	bcc.n	8013ab8 <GUIMONO_IsInFont+0x12>
 8013ac8:	1a89      	subs	r1, r1, r2
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	f933 2021 	ldrsh.w	r2, [r3, r1, lsl #2]
 8013ad0:	2a00      	cmp	r2, #0
 8013ad2:	dbf1      	blt.n	8013ab8 <GUIMONO_IsInFont+0x12>
 8013ad4:	2001      	movs	r0, #1
 8013ad6:	4770      	bx	lr

08013ad8 <_Log2VisBuffered>:
 8013ad8:	4770      	bx	lr
	...

08013adc <_DispLine>:
 8013adc:	b513      	push	{r0, r1, r4, lr}
 8013ade:	4614      	mov	r4, r2
 8013ae0:	ab02      	add	r3, sp, #8
 8013ae2:	4a1b      	ldr	r2, [pc, #108]	; (8013b50 <_DispLine+0x74>)
 8013ae4:	f843 1d08 	str.w	r1, [r3, #-8]!
 8013ae8:	9001      	str	r0, [sp, #4]
 8013aea:	4669      	mov	r1, sp
 8013aec:	6813      	ldr	r3, [r2, #0]
 8013aee:	4798      	blx	r3
 8013af0:	9001      	str	r0, [sp, #4]
 8013af2:	4818      	ldr	r0, [pc, #96]	; (8013b54 <_DispLine+0x78>)
 8013af4:	6801      	ldr	r1, [r0, #0]
 8013af6:	6948      	ldr	r0, [r1, #20]
 8013af8:	b960      	cbnz	r0, 8013b14 <_DispLine+0x38>
 8013afa:	2001      	movs	r0, #1
 8013afc:	f7fe f988 	bl	8011e10 <GUI__ManageCache>
 8013b00:	4a14      	ldr	r2, [pc, #80]	; (8013b54 <_DispLine+0x78>)
 8013b02:	6813      	ldr	r3, [r2, #0]
 8013b04:	69d8      	ldr	r0, [r3, #28]
 8013b06:	6941      	ldr	r1, [r0, #20]
 8013b08:	b1c1      	cbz	r1, 8013b3c <_DispLine+0x60>
 8013b0a:	688b      	ldr	r3, [r1, #8]
 8013b0c:	9801      	ldr	r0, [sp, #4]
 8013b0e:	9900      	ldr	r1, [sp, #0]
 8013b10:	4798      	blx	r3
 8013b12:	e018      	b.n	8013b46 <_DispLine+0x6a>
 8013b14:	4621      	mov	r1, r4
 8013b16:	f7fe fe83 	bl	8012820 <GUI_RectsIntersect>
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	d1ed      	bne.n	8013afa <_DispLine+0x1e>
 8013b1e:	e015      	b.n	8013b4c <_DispLine+0x70>
 8013b20:	a801      	add	r0, sp, #4
 8013b22:	f004 fa7f 	bl	8018024 <GUI_UC__GetCharCodeInc>
 8013b26:	490b      	ldr	r1, [pc, #44]	; (8013b54 <_DispLine+0x78>)
 8013b28:	680a      	ldr	r2, [r1, #0]
 8013b2a:	69d3      	ldr	r3, [r2, #28]
 8013b2c:	6819      	ldr	r1, [r3, #0]
 8013b2e:	4604      	mov	r4, r0
 8013b30:	4788      	blx	r1
 8013b32:	4809      	ldr	r0, [pc, #36]	; (8013b58 <_DispLine+0x7c>)
 8013b34:	6802      	ldr	r2, [r0, #0]
 8013b36:	b10a      	cbz	r2, 8013b3c <_DispLine+0x60>
 8013b38:	4620      	mov	r0, r4
 8013b3a:	4790      	blx	r2
 8013b3c:	9a00      	ldr	r2, [sp, #0]
 8013b3e:	1e53      	subs	r3, r2, #1
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	9300      	str	r3, [sp, #0]
 8013b44:	daec      	bge.n	8013b20 <_DispLine+0x44>
 8013b46:	2000      	movs	r0, #0
 8013b48:	f7fe f962 	bl	8011e10 <GUI__ManageCache>
 8013b4c:	bd1c      	pop	{r2, r3, r4, pc}
 8013b4e:	bf00      	nop
 8013b50:	20000314 	.word	0x20000314
 8013b54:	20000308 	.word	0x20000308
 8013b58:	2000eb50 	.word	0x2000eb50

08013b5c <GUI__GetLineNumChars>:
 8013b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b5e:	460d      	mov	r5, r1
 8013b60:	9001      	str	r0, [sp, #4]
 8013b62:	4604      	mov	r4, r0
 8013b64:	b190      	cbz	r0, 8013b8c <GUI__GetLineNumChars+0x30>
 8013b66:	4b0a      	ldr	r3, [pc, #40]	; (8013b90 <GUI__GetLineNumChars+0x34>)
 8013b68:	681a      	ldr	r2, [r3, #0]
 8013b6a:	69d4      	ldr	r4, [r2, #28]
 8013b6c:	6964      	ldr	r4, [r4, #20]
 8013b6e:	b15c      	cbz	r4, 8013b88 <GUI__GetLineNumChars+0x2c>
 8013b70:	6864      	ldr	r4, [r4, #4]
 8013b72:	b14c      	cbz	r4, 8013b88 <GUI__GetLineNumChars+0x2c>
 8013b74:	47a0      	blx	r4
 8013b76:	4604      	mov	r4, r0
 8013b78:	e008      	b.n	8013b8c <GUI__GetLineNumChars+0x30>
 8013b7a:	a801      	add	r0, sp, #4
 8013b7c:	f004 fa52 	bl	8018024 <GUI_UC__GetCharCodeInc>
 8013b80:	b120      	cbz	r0, 8013b8c <GUI__GetLineNumChars+0x30>
 8013b82:	280a      	cmp	r0, #10
 8013b84:	d002      	beq.n	8013b8c <GUI__GetLineNumChars+0x30>
 8013b86:	3401      	adds	r4, #1
 8013b88:	42ac      	cmp	r4, r5
 8013b8a:	dbf6      	blt.n	8013b7a <GUI__GetLineNumChars+0x1e>
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013b90:	20000308 	.word	0x20000308

08013b94 <GUI__GetOverlap>:
 8013b94:	b513      	push	{r0, r1, r4, lr}
 8013b96:	a902      	add	r1, sp, #8
 8013b98:	2400      	movs	r4, #0
 8013b9a:	f841 4d04 	str.w	r4, [r1, #-4]!
 8013b9e:	f000 f8b3 	bl	8013d08 <GUI_GetCharDistXEx>
 8013ba2:	9b01      	ldr	r3, [sp, #4]
 8013ba4:	4283      	cmp	r3, r0
 8013ba6:	bfcc      	ite	gt
 8013ba8:	ebc0 0003 	rsbgt	r0, r0, r3
 8013bac:	4620      	movle	r0, r4
 8013bae:	bd1c      	pop	{r2, r3, r4, pc}

08013bb0 <GUI__GetLineDistX>:
 8013bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013bb2:	4a14      	ldr	r2, [pc, #80]	; (8013c04 <GUI__GetLineDistX+0x54>)
 8013bb4:	9001      	str	r0, [sp, #4]
 8013bb6:	ab02      	add	r3, sp, #8
 8013bb8:	6815      	ldr	r5, [r2, #0]
 8013bba:	f843 1d08 	str.w	r1, [r3, #-8]!
 8013bbe:	4669      	mov	r1, sp
 8013bc0:	47a8      	blx	r5
 8013bc2:	4605      	mov	r5, r0
 8013bc4:	9001      	str	r0, [sp, #4]
 8013bc6:	b1e0      	cbz	r0, 8013c02 <GUI__GetLineDistX+0x52>
 8013bc8:	490f      	ldr	r1, [pc, #60]	; (8013c08 <GUI__GetLineDistX+0x58>)
 8013bca:	680c      	ldr	r4, [r1, #0]
 8013bcc:	69e3      	ldr	r3, [r4, #28]
 8013bce:	695c      	ldr	r4, [r3, #20]
 8013bd0:	b124      	cbz	r4, 8013bdc <GUI__GetLineDistX+0x2c>
 8013bd2:	6824      	ldr	r4, [r4, #0]
 8013bd4:	b114      	cbz	r4, 8013bdc <GUI__GetLineDistX+0x2c>
 8013bd6:	9900      	ldr	r1, [sp, #0]
 8013bd8:	47a0      	blx	r4
 8013bda:	e012      	b.n	8013c02 <GUI__GetLineDistX+0x52>
 8013bdc:	4625      	mov	r5, r4
 8013bde:	9800      	ldr	r0, [sp, #0]
 8013be0:	1e42      	subs	r2, r0, #1
 8013be2:	2a00      	cmp	r2, #0
 8013be4:	9200      	str	r2, [sp, #0]
 8013be6:	db07      	blt.n	8013bf8 <GUI__GetLineDistX+0x48>
 8013be8:	a801      	add	r0, sp, #4
 8013bea:	f004 fa1b 	bl	8018024 <GUI_UC__GetCharCodeInc>
 8013bee:	4604      	mov	r4, r0
 8013bf0:	f000 f880 	bl	8013cf4 <GUI_GetCharDistX>
 8013bf4:	182d      	adds	r5, r5, r0
 8013bf6:	e7f2      	b.n	8013bde <GUI__GetLineDistX+0x2e>
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f7ff ffcb 	bl	8013b94 <GUI__GetOverlap>
 8013bfe:	1828      	adds	r0, r5, r0
 8013c00:	e7ff      	b.n	8013c02 <GUI__GetLineDistX+0x52>
 8013c02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013c04:	20000314 	.word	0x20000314
 8013c08:	20000308 	.word	0x20000308

08013c0c <GUI__DispLine>:
 8013c0c:	4b27      	ldr	r3, [pc, #156]	; (8013cac <GUI__DispLine+0xa0>)
 8013c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c10:	4605      	mov	r5, r0
 8013c12:	6818      	ldr	r0, [r3, #0]
 8013c14:	460c      	mov	r4, r1
 8013c16:	b160      	cbz	r0, 8013c32 <GUI__DispLine+0x26>
 8013c18:	2000      	movs	r0, #0
 8013c1a:	f7fb f813 	bl	800ec44 <WM__InitIVRSearch>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d042      	beq.n	8013ca8 <GUI__DispLine+0x9c>
 8013c22:	4628      	mov	r0, r5
 8013c24:	4621      	mov	r1, r4
 8013c26:	466a      	mov	r2, sp
 8013c28:	f7ff ff58 	bl	8013adc <_DispLine>
 8013c2c:	f7fa ff4a 	bl	800eac4 <WM__GetNextIVR>
 8013c30:	e7f5      	b.n	8013c1e <GUI__DispLine+0x12>
 8013c32:	6810      	ldr	r0, [r2, #0]
 8013c34:	6851      	ldr	r1, [r2, #4]
 8013c36:	466b      	mov	r3, sp
 8013c38:	c303      	stmia	r3!, {r0, r1}
 8013c3a:	491d      	ldr	r1, [pc, #116]	; (8013cb0 <GUI__DispLine+0xa4>)
 8013c3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013c40:	6808      	ldr	r0, [r1, #0]
 8013c42:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8013c46:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8013c4a:	18d1      	adds	r1, r2, r3
 8013c4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013c50:	f8ad 1000 	strh.w	r1, [sp]
 8013c54:	18c1      	adds	r1, r0, r3
 8013c56:	f8ad 1002 	strh.w	r1, [sp, #2]
 8013c5a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8013c5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013c62:	1840      	adds	r0, r0, r1
 8013c64:	18d2      	adds	r2, r2, r3
 8013c66:	f8ad 0006 	strh.w	r0, [sp, #6]
 8013c6a:	4668      	mov	r0, sp
 8013c6c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013c70:	f7fa ffe8 	bl	800ec44 <WM__InitIVRSearch>
 8013c74:	4b0e      	ldr	r3, [pc, #56]	; (8013cb0 <GUI__DispLine+0xa4>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	b940      	cbnz	r0, 8013c8c <GUI__DispLine+0x80>
 8013c7a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8013c7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013c7e:	1a88      	subs	r0, r1, r2
 8013c80:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8013c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c84:	8458      	strh	r0, [r3, #34]	; 0x22
 8013c86:	1a88      	subs	r0, r1, r2
 8013c88:	8498      	strh	r0, [r3, #36]	; 0x24
 8013c8a:	e00d      	b.n	8013ca8 <GUI__DispLine+0x9c>
 8013c8c:	f8bd 2000 	ldrh.w	r2, [sp]
 8013c90:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8013c94:	845a      	strh	r2, [r3, #34]	; 0x22
 8013c96:	8499      	strh	r1, [r3, #36]	; 0x24
 8013c98:	4628      	mov	r0, r5
 8013c9a:	4621      	mov	r1, r4
 8013c9c:	466a      	mov	r2, sp
 8013c9e:	f7ff ff1d 	bl	8013adc <_DispLine>
 8013ca2:	f7fa ff0f 	bl	800eac4 <WM__GetNextIVR>
 8013ca6:	e7e5      	b.n	8013c74 <GUI__DispLine+0x68>
 8013ca8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013caa:	bf00      	nop
 8013cac:	2000eb3c 	.word	0x2000eb3c
 8013cb0:	20000308 	.word	0x20000308

08013cb4 <GUI_GetYAdjust>:
 8013cb4:	4b0a      	ldr	r3, [pc, #40]	; (8013ce0 <GUI_GetYAdjust+0x2c>)
 8013cb6:	6818      	ldr	r0, [r3, #0]
 8013cb8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013cba:	f002 010c 	and.w	r1, r2, #12
 8013cbe:	2908      	cmp	r1, #8
 8013cc0:	d007      	beq.n	8013cd2 <GUI_GetYAdjust+0x1e>
 8013cc2:	290c      	cmp	r1, #12
 8013cc4:	d005      	beq.n	8013cd2 <GUI_GetYAdjust+0x1e>
 8013cc6:	2904      	cmp	r1, #4
 8013cc8:	d107      	bne.n	8013cda <GUI_GetYAdjust+0x26>
 8013cca:	69c3      	ldr	r3, [r0, #28]
 8013ccc:	7e18      	ldrb	r0, [r3, #24]
 8013cce:	3801      	subs	r0, #1
 8013cd0:	4770      	bx	lr
 8013cd2:	69c2      	ldr	r2, [r0, #28]
 8013cd4:	7e11      	ldrb	r1, [r2, #24]
 8013cd6:	0848      	lsrs	r0, r1, #1
 8013cd8:	4770      	bx	lr
 8013cda:	2000      	movs	r0, #0
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	20000308 	.word	0x20000308

08013ce4 <GUI_GetFontDistY>:
 8013ce4:	4b02      	ldr	r3, [pc, #8]	; (8013cf0 <GUI_GetFontDistY+0xc>)
 8013ce6:	6818      	ldr	r0, [r3, #0]
 8013ce8:	69c1      	ldr	r1, [r0, #28]
 8013cea:	7e48      	ldrb	r0, [r1, #25]
 8013cec:	4770      	bx	lr
 8013cee:	bf00      	nop
 8013cf0:	20000308 	.word	0x20000308

08013cf4 <GUI_GetCharDistX>:
 8013cf4:	b508      	push	{r3, lr}
 8013cf6:	4b03      	ldr	r3, [pc, #12]	; (8013d04 <GUI_GetCharDistX+0x10>)
 8013cf8:	6819      	ldr	r1, [r3, #0]
 8013cfa:	69ca      	ldr	r2, [r1, #28]
 8013cfc:	2100      	movs	r1, #0
 8013cfe:	6853      	ldr	r3, [r2, #4]
 8013d00:	4798      	blx	r3
 8013d02:	bd08      	pop	{r3, pc}
 8013d04:	20000308 	.word	0x20000308

08013d08 <GUI_GetCharDistXEx>:
 8013d08:	b508      	push	{r3, lr}
 8013d0a:	4b03      	ldr	r3, [pc, #12]	; (8013d18 <GUI_GetCharDistXEx+0x10>)
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	69d3      	ldr	r3, [r2, #28]
 8013d10:	685a      	ldr	r2, [r3, #4]
 8013d12:	4790      	blx	r2
 8013d14:	bd08      	pop	{r3, pc}
 8013d16:	bf00      	nop
 8013d18:	20000308 	.word	0x20000308

08013d1c <_PushFreeBlock>:
 8013d1c:	4b07      	ldr	r3, [pc, #28]	; (8013d3c <_PushFreeBlock+0x20>)
 8013d1e:	685a      	ldr	r2, [r3, #4]
 8013d20:	1c51      	adds	r1, r2, #1
 8013d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d24:	b510      	push	{r4, lr}
 8013d26:	6059      	str	r1, [r3, #4]
 8013d28:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8013d2c:	6a19      	ldr	r1, [r3, #32]
 8013d2e:	6061      	str	r1, [r4, #4]
 8013d30:	2100      	movs	r1, #0
 8013d32:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8013d36:	6218      	str	r0, [r3, #32]
 8013d38:	bd10      	pop	{r4, pc}
 8013d3a:	bf00      	nop
 8013d3c:	2000eb6c 	.word	0x2000eb6c

08013d40 <_OnExit>:
 8013d40:	b538      	push	{r3, r4, r5, lr}
 8013d42:	4d0b      	ldr	r5, [pc, #44]	; (8013d70 <_OnExit+0x30>)
 8013d44:	2400      	movs	r4, #0
 8013d46:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8013d4a:	4621      	mov	r1, r4
 8013d4c:	2280      	movs	r2, #128	; 0x80
 8013d4e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8013d52:	f7fd ff7f 	bl	8011c54 <GUI__memset>
 8013d56:	4628      	mov	r0, r5
 8013d58:	4621      	mov	r1, r4
 8013d5a:	22bc      	movs	r2, #188	; 0xbc
 8013d5c:	f7fd ff7a 	bl	8011c54 <GUI__memset>
 8013d60:	4804      	ldr	r0, [pc, #16]	; (8013d74 <_OnExit+0x34>)
 8013d62:	4621      	mov	r1, r4
 8013d64:	220c      	movs	r2, #12
 8013d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d6a:	f7fd bf73 	b.w	8011c54 <GUI__memset>
 8013d6e:	bf00      	nop
 8013d70:	2000eb6c 	.word	0x2000eb6c
 8013d74:	2000e1d4 	.word	0x2000e1d4

08013d78 <_RemoveFreeBlock>:
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	6841      	ldr	r1, [r0, #4]
 8013d7c:	230f      	movs	r3, #15
 8013d7e:	4a0c      	ldr	r2, [pc, #48]	; (8013db0 <_RemoveFreeBlock+0x38>)
 8013d80:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8013d84:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8013d86:	42a1      	cmp	r1, r4
 8013d88:	d202      	bcs.n	8013d90 <_RemoveFreeBlock+0x18>
 8013d8a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013d8e:	d2f6      	bcs.n	8013d7e <_RemoveFreeBlock+0x6>
 8013d90:	6814      	ldr	r4, [r2, #0]
 8013d92:	1a61      	subs	r1, r4, r1
 8013d94:	6011      	str	r1, [r2, #0]
 8013d96:	6882      	ldr	r2, [r0, #8]
 8013d98:	68c0      	ldr	r0, [r0, #12]
 8013d9a:	b102      	cbz	r2, 8013d9e <_RemoveFreeBlock+0x26>
 8013d9c:	6050      	str	r0, [r2, #4]
 8013d9e:	b108      	cbz	r0, 8013da4 <_RemoveFreeBlock+0x2c>
 8013da0:	6002      	str	r2, [r0, #0]
 8013da2:	bd10      	pop	{r4, pc}
 8013da4:	4902      	ldr	r1, [pc, #8]	; (8013db0 <_RemoveFreeBlock+0x38>)
 8013da6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8013daa:	641a      	str	r2, [r3, #64]	; 0x40
 8013dac:	bd10      	pop	{r4, pc}
 8013dae:	bf00      	nop
 8013db0:	2000eb6c 	.word	0x2000eb6c

08013db4 <_AddFreeMemory>:
 8013db4:	4b21      	ldr	r3, [pc, #132]	; (8013e3c <_AddFreeMemory+0x88>)
 8013db6:	689a      	ldr	r2, [r3, #8]
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	460c      	mov	r4, r1
 8013dc0:	1808      	adds	r0, r1, r0
 8013dc2:	1e51      	subs	r1, r2, #1
 8013dc4:	1872      	adds	r2, r6, r1
 8013dc6:	4290      	cmp	r0, r2
 8013dc8:	461e      	mov	r6, r3
 8013dca:	d805      	bhi.n	8013dd8 <_AddFreeMemory+0x24>
 8013dcc:	5963      	ldr	r3, [r4, r5]
 8013dce:	b91b      	cbnz	r3, 8013dd8 <_AddFreeMemory+0x24>
 8013dd0:	6841      	ldr	r1, [r0, #4]
 8013dd2:	186d      	adds	r5, r5, r1
 8013dd4:	f7ff ffd0 	bl	8013d78 <_RemoveFreeBlock>
 8013dd8:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8013dda:	4284      	cmp	r4, r0
 8013ddc:	d90a      	bls.n	8013df4 <_AddFreeMemory+0x40>
 8013dde:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8013de2:	1ba6      	subs	r6, r4, r6
 8013de4:	6832      	ldr	r2, [r6, #0]
 8013de6:	b92a      	cbnz	r2, 8013df4 <_AddFreeMemory+0x40>
 8013de8:	4630      	mov	r0, r6
 8013dea:	6874      	ldr	r4, [r6, #4]
 8013dec:	f7ff ffc4 	bl	8013d78 <_RemoveFreeBlock>
 8013df0:	192d      	adds	r5, r5, r4
 8013df2:	4634      	mov	r4, r6
 8013df4:	230f      	movs	r3, #15
 8013df6:	4811      	ldr	r0, [pc, #68]	; (8013e3c <_AddFreeMemory+0x88>)
 8013df8:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 8013dfc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8013dfe:	4295      	cmp	r5, r2
 8013e00:	d202      	bcs.n	8013e08 <_AddFreeMemory+0x54>
 8013e02:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013e06:	d2f6      	bcs.n	8013df6 <_AddFreeMemory+0x42>
 8013e08:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8013e0c:	1961      	adds	r1, r4, r5
 8013e0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013e10:	6124      	str	r4, [r4, #16]
 8013e12:	2000      	movs	r0, #0
 8013e14:	e884 0021 	stmia.w	r4, {r0, r5}
 8013e18:	60a2      	str	r2, [r4, #8]
 8013e1a:	f841 5c04 	str.w	r5, [r1, #-4]
 8013e1e:	f104 0108 	add.w	r1, r4, #8
 8013e22:	b102      	cbz	r2, 8013e26 <_AddFreeMemory+0x72>
 8013e24:	6051      	str	r1, [r2, #4]
 8013e26:	60e0      	str	r0, [r4, #12]
 8013e28:	4804      	ldr	r0, [pc, #16]	; (8013e3c <_AddFreeMemory+0x88>)
 8013e2a:	6802      	ldr	r2, [r0, #0]
 8013e2c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8013e30:	6419      	str	r1, [r3, #64]	; 0x40
 8013e32:	18a9      	adds	r1, r5, r2
 8013e34:	6001      	str	r1, [r0, #0]
 8013e36:	4628      	mov	r0, r5
 8013e38:	bd70      	pop	{r4, r5, r6, pc}
 8013e3a:	bf00      	nop
 8013e3c:	2000eb6c 	.word	0x2000eb6c

08013e40 <_RemoveHoles>:
 8013e40:	4b22      	ldr	r3, [pc, #136]	; (8013ecc <_RemoveHoles+0x8c>)
 8013e42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e46:	4683      	mov	fp, r0
 8013e48:	6898      	ldr	r0, [r3, #8]
 8013e4a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8013e4c:	f100 3aff 	add.w	sl, r0, #4294967295
 8013e50:	44a2      	add	sl, r4
 8013e52:	e894 0028 	ldmia.w	r4, {r3, r5}
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d130      	bne.n	8013ebc <_RemoveHoles+0x7c>
 8013e5a:	eb04 0805 	add.w	r8, r4, r5
 8013e5e:	45d0      	cmp	r8, sl
 8013e60:	d22c      	bcs.n	8013ebc <_RemoveHoles+0x7c>
 8013e62:	f854 9005 	ldr.w	r9, [r4, r5]
 8013e66:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013e6a:	f1b9 0f00 	cmp.w	r9, #0
 8013e6e:	d025      	beq.n	8013ebc <_RemoveHoles+0x7c>
 8013e70:	4e16      	ldr	r6, [pc, #88]	; (8013ecc <_RemoveHoles+0x8c>)
 8013e72:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8013e74:	f811 2039 	ldrb.w	r2, [r1, r9, lsl #3]
 8013e78:	2a01      	cmp	r2, #1
 8013e7a:	d11f      	bne.n	8013ebc <_RemoveHoles+0x7c>
 8013e7c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8013e7e:	4620      	mov	r0, r4
 8013e80:	9301      	str	r3, [sp, #4]
 8013e82:	f7ff ff79 	bl	8013d78 <_RemoveFreeBlock>
 8013e86:	f8d8 0000 	ldr.w	r0, [r8]
 8013e8a:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8013e8c:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8013e90:	4620      	mov	r0, r4
 8013e92:	6054      	str	r4, [r2, #4]
 8013e94:	4641      	mov	r1, r8
 8013e96:	463a      	mov	r2, r7
 8013e98:	f005 fb48 	bl	801952c <memmove>
 8013e9c:	9b01      	ldr	r3, [sp, #4]
 8013e9e:	4599      	cmp	r9, r3
 8013ea0:	d102      	bne.n	8013ea8 <_RemoveHoles+0x68>
 8013ea2:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8013ea4:	1b41      	subs	r1, r0, r5
 8013ea6:	6331      	str	r1, [r6, #48]	; 0x30
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	19e1      	adds	r1, r4, r7
 8013eac:	f7ff ff82 	bl	8013db4 <_AddFreeMemory>
 8013eb0:	f1bb 0f00 	cmp.w	fp, #0
 8013eb4:	d001      	beq.n	8013eba <_RemoveHoles+0x7a>
 8013eb6:	4583      	cmp	fp, r0
 8013eb8:	d905      	bls.n	8013ec6 <_RemoveHoles+0x86>
 8013eba:	463d      	mov	r5, r7
 8013ebc:	1964      	adds	r4, r4, r5
 8013ebe:	4554      	cmp	r4, sl
 8013ec0:	d3c7      	bcc.n	8013e52 <_RemoveHoles+0x12>
 8013ec2:	2001      	movs	r0, #1
 8013ec4:	e000      	b.n	8013ec8 <_RemoveHoles+0x88>
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ecc:	2000eb6c 	.word	0x2000eb6c

08013ed0 <GUI_ALLOC_FreeFixedBlock>:
 8013ed0:	b128      	cbz	r0, 8013ede <GUI_ALLOC_FreeFixedBlock+0xe>
 8013ed2:	4a03      	ldr	r2, [pc, #12]	; (8013ee0 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8013ed4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013ed6:	6003      	str	r3, [r0, #0]
 8013ed8:	b103      	cbz	r3, 8013edc <GUI_ALLOC_FreeFixedBlock+0xc>
 8013eda:	6058      	str	r0, [r3, #4]
 8013edc:	6390      	str	r0, [r2, #56]	; 0x38
 8013ede:	4770      	bx	lr
 8013ee0:	2000eb6c 	.word	0x2000eb6c

08013ee4 <GUI_ALLOC_h2p>:
 8013ee4:	b128      	cbz	r0, 8013ef2 <GUI_ALLOC_h2p+0xe>
 8013ee6:	4b03      	ldr	r3, [pc, #12]	; (8013ef4 <GUI_ALLOC_h2p+0x10>)
 8013ee8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013eea:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8013eee:	6840      	ldr	r0, [r0, #4]
 8013ef0:	3008      	adds	r0, #8
 8013ef2:	4770      	bx	lr
 8013ef4:	2000eb6c 	.word	0x2000eb6c

08013ef8 <GUI_ALLOC_LockH>:
 8013ef8:	4b05      	ldr	r3, [pc, #20]	; (8013f10 <GUI_ALLOC_LockH+0x18>)
 8013efa:	6999      	ldr	r1, [r3, #24]
 8013efc:	3101      	adds	r1, #1
 8013efe:	6199      	str	r1, [r3, #24]
 8013f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f02:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 8013f06:	3101      	adds	r1, #1
 8013f08:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8013f0c:	f7ff bfea 	b.w	8013ee4 <GUI_ALLOC_h2p>
 8013f10:	2000eb6c 	.word	0x2000eb6c

08013f14 <GUI_ALLOC_UnlockH>:
 8013f14:	b530      	push	{r4, r5, lr}
 8013f16:	6802      	ldr	r2, [r0, #0]
 8013f18:	4b09      	ldr	r3, [pc, #36]	; (8013f40 <GUI_ALLOC_UnlockH+0x2c>)
 8013f1a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8013f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f20:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8013f24:	2c01      	cmp	r4, #1
 8013f26:	d903      	bls.n	8013f30 <GUI_ALLOC_UnlockH+0x1c>
 8013f28:	699d      	ldr	r5, [r3, #24]
 8013f2a:	b10d      	cbz	r5, 8013f30 <GUI_ALLOC_UnlockH+0x1c>
 8013f2c:	3d01      	subs	r5, #1
 8013f2e:	619d      	str	r5, [r3, #24]
 8013f30:	2300      	movs	r3, #0
 8013f32:	3c01      	subs	r4, #1
 8013f34:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 8013f38:	6003      	str	r3, [r0, #0]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	bd30      	pop	{r4, r5, pc}
 8013f3e:	bf00      	nop
 8013f40:	2000eb6c 	.word	0x2000eb6c

08013f44 <GUI_ALLOC_AssignMemory>:
 8013f44:	4b02      	ldr	r3, [pc, #8]	; (8013f50 <GUI_ALLOC_AssignMemory+0xc>)
 8013f46:	f021 0103 	bic.w	r1, r1, #3
 8013f4a:	6018      	str	r0, [r3, #0]
 8013f4c:	6059      	str	r1, [r3, #4]
 8013f4e:	4770      	bx	lr
 8013f50:	2000e1d4 	.word	0x2000e1d4

08013f54 <GUI_ALLOC_GetSize>:
 8013f54:	b130      	cbz	r0, 8013f64 <GUI_ALLOC_GetSize+0x10>
 8013f56:	4b04      	ldr	r3, [pc, #16]	; (8013f68 <GUI_ALLOC_GetSize+0x14>)
 8013f58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013f5a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8013f5e:	6842      	ldr	r2, [r0, #4]
 8013f60:	6850      	ldr	r0, [r2, #4]
 8013f62:	380c      	subs	r0, #12
 8013f64:	4770      	bx	lr
 8013f66:	bf00      	nop
 8013f68:	2000eb6c 	.word	0x2000eb6c

08013f6c <GUI_ALLOC_Free>:
 8013f6c:	b510      	push	{r4, lr}
 8013f6e:	4604      	mov	r4, r0
 8013f70:	b188      	cbz	r0, 8013f96 <GUI_ALLOC_Free+0x2a>
 8013f72:	4b09      	ldr	r3, [pc, #36]	; (8013f98 <GUI_ALLOC_Free+0x2c>)
 8013f74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013f76:	f810 1034 	ldrb.w	r1, [r0, r4, lsl #3]
 8013f7a:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 8013f7e:	b151      	cbz	r1, 8013f96 <GUI_ALLOC_Free+0x2a>
 8013f80:	2901      	cmp	r1, #1
 8013f82:	d808      	bhi.n	8013f96 <GUI_ALLOC_Free+0x2a>
 8013f84:	6851      	ldr	r1, [r2, #4]
 8013f86:	6848      	ldr	r0, [r1, #4]
 8013f88:	f7ff ff14 	bl	8013db4 <_AddFreeMemory>
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f92:	f7ff bec3 	b.w	8013d1c <_PushFreeBlock>
 8013f96:	bd10      	pop	{r4, pc}
 8013f98:	2000eb6c 	.word	0x2000eb6c

08013f9c <_EnlargeBlocks>:
 8013f9c:	4b24      	ldr	r3, [pc, #144]	; (8014030 <_EnlargeBlocks+0x94>)
 8013f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa4:	b93a      	cbnz	r2, 8013fb6 <_EnlargeBlocks+0x1a>
 8013fa6:	4923      	ldr	r1, [pc, #140]	; (8014034 <_EnlargeBlocks+0x98>)
 8013fa8:	688a      	ldr	r2, [r1, #8]
 8013faa:	684b      	ldr	r3, [r1, #4]
 8013fac:	3208      	adds	r2, #8
 8013fae:	fbb3 f0f2 	udiv	r0, r3, r2
 8013fb2:	1c85      	adds	r5, r0, #2
 8013fb4:	e003      	b.n	8013fbe <_EnlargeBlocks+0x22>
 8013fb6:	68d8      	ldr	r0, [r3, #12]
 8013fb8:	1d05      	adds	r5, r0, #4
 8013fba:	eb05 05d0 	add.w	r5, r5, r0, lsr #3
 8013fbe:	00e8      	lsls	r0, r5, #3
 8013fc0:	f000 f970 	bl	80142a4 <_Alloc>
 8013fc4:	4680      	mov	r8, r0
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d02d      	beq.n	8014026 <_EnlargeBlocks+0x8a>
 8013fca:	4c19      	ldr	r4, [pc, #100]	; (8014030 <_EnlargeBlocks+0x94>)
 8013fcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013fce:	68e2      	ldr	r2, [r4, #12]
 8013fd0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8013fd2:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
 8013fd6:	00d2      	lsls	r2, r2, #3
 8013fd8:	6876      	ldr	r6, [r6, #4]
 8013fda:	3608      	adds	r6, #8
 8013fdc:	4630      	mov	r0, r6
 8013fde:	f7ed f819 	bl	8001014 <memcpy>
 8013fe2:	68e2      	ldr	r2, [r4, #12]
 8013fe4:	6326      	str	r6, [r4, #48]	; 0x30
 8013fe6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8013fea:	4613      	mov	r3, r2
 8013fec:	eb06 04c2 	add.w	r4, r6, r2, lsl #3
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	1e68      	subs	r0, r5, #1
 8013ff4:	4283      	cmp	r3, r0
 8013ff6:	d204      	bcs.n	8014002 <_EnlargeBlocks+0x66>
 8013ff8:	1860      	adds	r0, r4, r1
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	6043      	str	r3, [r0, #4]
 8013ffe:	3108      	adds	r1, #8
 8014000:	e7f7      	b.n	8013ff2 <_EnlargeBlocks+0x56>
 8014002:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8014006:	2400      	movs	r4, #0
 8014008:	4b09      	ldr	r3, [pc, #36]	; (8014030 <_EnlargeBlocks+0x94>)
 801400a:	604c      	str	r4, [r1, #4]
 801400c:	6858      	ldr	r0, [r3, #4]
 801400e:	621a      	str	r2, [r3, #32]
 8014010:	1a82      	subs	r2, r0, r2
 8014012:	1951      	adds	r1, r2, r5
 8014014:	6059      	str	r1, [r3, #4]
 8014016:	60dd      	str	r5, [r3, #12]
 8014018:	4638      	mov	r0, r7
 801401a:	b13f      	cbz	r7, 801402c <_EnlargeBlocks+0x90>
 801401c:	f7ff ffa6 	bl	8013f6c <GUI_ALLOC_Free>
 8014020:	4620      	mov	r0, r4
 8014022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014026:	2001      	movs	r0, #1
 8014028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014030:	2000eb6c 	.word	0x2000eb6c
 8014034:	2000e1d4 	.word	0x2000e1d4

08014038 <_InitOnce>:
 8014038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801403a:	4b54      	ldr	r3, [pc, #336]	; (801418c <_InitOnce+0x154>)
 801403c:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8014040:	2900      	cmp	r1, #0
 8014042:	f040 80a2 	bne.w	801418a <_InitOnce+0x152>
 8014046:	4852      	ldr	r0, [pc, #328]	; (8014190 <_InitOnce+0x158>)
 8014048:	2201      	movs	r2, #1
 801404a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801404e:	6842      	ldr	r2, [r0, #4]
 8014050:	6803      	ldr	r3, [r0, #0]
 8014052:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8014056:	bf28      	it	cs
 8014058:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 801405c:	0894      	lsrs	r4, r2, #2
 801405e:	2000      	movs	r0, #0
 8014060:	42a0      	cmp	r0, r4
 8014062:	d009      	beq.n	8014078 <_InitOnce+0x40>
 8014064:	1846      	adds	r6, r0, r1
 8014066:	25ff      	movs	r5, #255	; 0xff
 8014068:	fbb6 f7f5 	udiv	r7, r6, r5
 801406c:	fb05 6517 	mls	r5, r5, r7, r6
 8014070:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
 8014074:	3001      	adds	r0, #1
 8014076:	e7f3      	b.n	8014060 <_InitOnce+0x28>
 8014078:	2000      	movs	r0, #0
 801407a:	42a0      	cmp	r0, r4
 801407c:	d013      	beq.n	80140a6 <_InitOnce+0x6e>
 801407e:	25ff      	movs	r5, #255	; 0xff
 8014080:	1846      	adds	r6, r0, r1
 8014082:	fbb6 f7f5 	udiv	r7, r6, r5
 8014086:	fb05 6517 	mls	r5, r5, r7, r6
 801408a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801408e:	42af      	cmp	r7, r5
 8014090:	d007      	beq.n	80140a2 <_InitOnce+0x6a>
 8014092:	493f      	ldr	r1, [pc, #252]	; (8014190 <_InitOnce+0x158>)
 8014094:	688a      	ldr	r2, [r1, #8]
 8014096:	2a00      	cmp	r2, #0
 8014098:	d150      	bne.n	801413c <_InitOnce+0x104>
 801409a:	684b      	ldr	r3, [r1, #4]
 801409c:	089c      	lsrs	r4, r3, #2
 801409e:	608c      	str	r4, [r1, #8]
 80140a0:	e04c      	b.n	801413c <_InitOnce+0x104>
 80140a2:	3001      	adds	r0, #1
 80140a4:	e7e9      	b.n	801407a <_InitOnce+0x42>
 80140a6:	3101      	adds	r1, #1
 80140a8:	2902      	cmp	r1, #2
 80140aa:	d1d8      	bne.n	801405e <_InitOnce+0x26>
 80140ac:	0854      	lsrs	r4, r2, #1
 80140ae:	2100      	movs	r1, #0
 80140b0:	2000      	movs	r0, #0
 80140b2:	42a0      	cmp	r0, r4
 80140b4:	d009      	beq.n	80140ca <_InitOnce+0x92>
 80140b6:	1846      	adds	r6, r0, r1
 80140b8:	25ff      	movs	r5, #255	; 0xff
 80140ba:	fbb6 f7f5 	udiv	r7, r6, r5
 80140be:	fb05 6517 	mls	r5, r5, r7, r6
 80140c2:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
 80140c6:	3001      	adds	r0, #1
 80140c8:	e7f3      	b.n	80140b2 <_InitOnce+0x7a>
 80140ca:	2000      	movs	r0, #0
 80140cc:	42a0      	cmp	r0, r4
 80140ce:	d00c      	beq.n	80140ea <_InitOnce+0xb2>
 80140d0:	25ff      	movs	r5, #255	; 0xff
 80140d2:	1846      	adds	r6, r0, r1
 80140d4:	fbb6 f7f5 	udiv	r7, r6, r5
 80140d8:	fb05 6517 	mls	r5, r5, r7, r6
 80140dc:	f833 7010 	ldrh.w	r7, [r3, r0, lsl #1]
 80140e0:	b2ad      	uxth	r5, r5
 80140e2:	42af      	cmp	r7, r5
 80140e4:	d1d5      	bne.n	8014092 <_InitOnce+0x5a>
 80140e6:	3001      	adds	r0, #1
 80140e8:	e7f0      	b.n	80140cc <_InitOnce+0x94>
 80140ea:	3101      	adds	r1, #1
 80140ec:	2902      	cmp	r1, #2
 80140ee:	d1df      	bne.n	80140b0 <_InitOnce+0x78>
 80140f0:	2100      	movs	r1, #0
 80140f2:	2000      	movs	r0, #0
 80140f4:	4290      	cmp	r0, r2
 80140f6:	d008      	beq.n	801410a <_InitOnce+0xd2>
 80140f8:	1845      	adds	r5, r0, r1
 80140fa:	24ff      	movs	r4, #255	; 0xff
 80140fc:	fbb5 f6f4 	udiv	r6, r5, r4
 8014100:	fb04 5516 	mls	r5, r4, r6, r5
 8014104:	541d      	strb	r5, [r3, r0]
 8014106:	3001      	adds	r0, #1
 8014108:	e7f4      	b.n	80140f4 <_InitOnce+0xbc>
 801410a:	2000      	movs	r0, #0
 801410c:	4290      	cmp	r0, r2
 801410e:	d00b      	beq.n	8014128 <_InitOnce+0xf0>
 8014110:	24ff      	movs	r4, #255	; 0xff
 8014112:	1845      	adds	r5, r0, r1
 8014114:	fbb5 f6f4 	udiv	r6, r5, r4
 8014118:	fb04 5516 	mls	r5, r4, r6, r5
 801411c:	5c1e      	ldrb	r6, [r3, r0]
 801411e:	b2ec      	uxtb	r4, r5
 8014120:	42a6      	cmp	r6, r4
 8014122:	d1b6      	bne.n	8014092 <_InitOnce+0x5a>
 8014124:	3001      	adds	r0, #1
 8014126:	e7f1      	b.n	801410c <_InitOnce+0xd4>
 8014128:	3101      	adds	r1, #1
 801412a:	2902      	cmp	r1, #2
 801412c:	d1e1      	bne.n	80140f2 <_InitOnce+0xba>
 801412e:	2500      	movs	r5, #0
 8014130:	4295      	cmp	r5, r2
 8014132:	d0ae      	beq.n	8014092 <_InitOnce+0x5a>
 8014134:	2400      	movs	r4, #0
 8014136:	555c      	strb	r4, [r3, r5]
 8014138:	3501      	adds	r5, #1
 801413a:	e7f9      	b.n	8014130 <_InitOnce+0xf8>
 801413c:	4815      	ldr	r0, [pc, #84]	; (8014194 <_InitOnce+0x15c>)
 801413e:	4d16      	ldr	r5, [pc, #88]	; (8014198 <_InitOnce+0x160>)
 8014140:	6005      	str	r5, [r0, #0]
 8014142:	f7ff fad7 	bl	80136f4 <GUI__RegisterExit>
 8014146:	4911      	ldr	r1, [pc, #68]	; (801418c <_InitOnce+0x154>)
 8014148:	205a      	movs	r0, #90	; 0x5a
 801414a:	61c8      	str	r0, [r1, #28]
 801414c:	2300      	movs	r3, #0
 801414e:	4c0f      	ldr	r4, [pc, #60]	; (801418c <_InitOnce+0x154>)
 8014150:	2510      	movs	r5, #16
 8014152:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8014156:	fa05 f503 	lsl.w	r5, r5, r3
 801415a:	3301      	adds	r3, #1
 801415c:	2b10      	cmp	r3, #16
 801415e:	63d5      	str	r5, [r2, #60]	; 0x3c
 8014160:	d1f5      	bne.n	801414e <_InitOnce+0x116>
 8014162:	480b      	ldr	r0, [pc, #44]	; (8014190 <_InitOnce+0x158>)
 8014164:	6801      	ldr	r1, [r0, #0]
 8014166:	6840      	ldr	r0, [r0, #4]
 8014168:	6361      	str	r1, [r4, #52]	; 0x34
 801416a:	f1a0 0514 	sub.w	r5, r0, #20
 801416e:	194b      	adds	r3, r1, r5
 8014170:	2202      	movs	r2, #2
 8014172:	2501      	movs	r5, #1
 8014174:	60e2      	str	r2, [r4, #12]
 8014176:	6323      	str	r3, [r4, #48]	; 0x30
 8014178:	60a0      	str	r0, [r4, #8]
 801417a:	605d      	str	r5, [r3, #4]
 801417c:	6225      	str	r5, [r4, #32]
 801417e:	6065      	str	r5, [r4, #4]
 8014180:	f7ff fe18 	bl	8013db4 <_AddFreeMemory>
 8014184:	f7ff ff0a 	bl	8013f9c <_EnlargeBlocks>
 8014188:	62e5      	str	r5, [r4, #44]	; 0x2c
 801418a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801418c:	2000eb6c 	.word	0x2000eb6c
 8014190:	2000e1d4 	.word	0x2000e1d4
 8014194:	2000e1e0 	.word	0x2000e1e0
 8014198:	08013d41 	.word	0x08013d41

0801419c <GUI_ALLOC_GetMaxSize>:
 801419c:	b508      	push	{r3, lr}
 801419e:	f7ff ff4b 	bl	8014038 <_InitOnce>
 80141a2:	2200      	movs	r2, #0
 80141a4:	4b0b      	ldr	r3, [pc, #44]	; (80141d4 <GUI_ALLOC_GetMaxSize+0x38>)
 80141a6:	18d0      	adds	r0, r2, r3
 80141a8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 80141ac:	b113      	cbz	r3, 80141b4 <GUI_ALLOC_GetMaxSize+0x18>
 80141ae:	689b      	ldr	r3, [r3, #8]
 80141b0:	2000      	movs	r0, #0
 80141b2:	e00b      	b.n	80141cc <GUI_ALLOC_GetMaxSize+0x30>
 80141b4:	3a08      	subs	r2, #8
 80141b6:	f112 0f80 	cmn.w	r2, #128	; 0x80
 80141ba:	d1f3      	bne.n	80141a4 <GUI_ALLOC_GetMaxSize+0x8>
 80141bc:	e7f8      	b.n	80141b0 <GUI_ALLOC_GetMaxSize+0x14>
 80141be:	6859      	ldr	r1, [r3, #4]
 80141c0:	689a      	ldr	r2, [r3, #8]
 80141c2:	4288      	cmp	r0, r1
 80141c4:	bf38      	it	cc
 80141c6:	4608      	movcc	r0, r1
 80141c8:	b112      	cbz	r2, 80141d0 <GUI_ALLOC_GetMaxSize+0x34>
 80141ca:	6893      	ldr	r3, [r2, #8]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d1f6      	bne.n	80141be <GUI_ALLOC_GetMaxSize+0x22>
 80141d0:	380c      	subs	r0, #12
 80141d2:	bd08      	pop	{r3, pc}
 80141d4:	2000eb6c 	.word	0x2000eb6c

080141d8 <GUI_ALLOC_RequestSize>:
 80141d8:	b508      	push	{r3, lr}
 80141da:	f7ff ffdf 	bl	801419c <GUI_ALLOC_GetMaxSize>
 80141de:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80141e2:	f04f 0364 	mov.w	r3, #100	; 0x64
 80141e6:	4a06      	ldr	r2, [pc, #24]	; (8014200 <GUI_ALLOC_RequestSize+0x28>)
 80141e8:	d904      	bls.n	80141f4 <GUI_ALLOC_RequestSize+0x1c>
 80141ea:	fb90 f0f3 	sdiv	r0, r0, r3
 80141ee:	69d3      	ldr	r3, [r2, #28]
 80141f0:	4358      	muls	r0, r3
 80141f2:	bd08      	pop	{r3, pc}
 80141f4:	69d1      	ldr	r1, [r2, #28]
 80141f6:	4348      	muls	r0, r1
 80141f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80141fc:	bd08      	pop	{r3, pc}
 80141fe:	bf00      	nop
 8014200:	2000eb6c 	.word	0x2000eb6c

08014204 <GUI_ALLOC_GetFixedBlock>:
 8014204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014206:	4605      	mov	r5, r0
 8014208:	f7ff ff16 	bl	8014038 <_InitOnce>
 801420c:	4b24      	ldr	r3, [pc, #144]	; (80142a0 <GUI_ALLOC_GetFixedBlock+0x9c>)
 801420e:	1ce8      	adds	r0, r5, #3
 8014210:	f020 0103 	bic.w	r1, r0, #3
 8014214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014216:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8014218:	1d0d      	adds	r5, r1, #4
 801421a:	4295      	cmp	r5, r2
 801421c:	bf38      	it	cc
 801421e:	4615      	movcc	r5, r2
 8014220:	4604      	mov	r4, r0
 8014222:	b12c      	cbz	r4, 8014230 <GUI_ALLOC_GetFixedBlock+0x2c>
 8014224:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8014228:	42aa      	cmp	r2, r5
 801422a:	d02a      	beq.n	8014282 <GUI_ALLOC_GetFixedBlock+0x7e>
 801422c:	6824      	ldr	r4, [r4, #0]
 801422e:	e7f8      	b.n	8014222 <GUI_ALLOC_GetFixedBlock+0x1e>
 8014230:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8014232:	689b      	ldr	r3, [r3, #8]
 8014234:	18ff      	adds	r7, r7, r3
 8014236:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801423a:	1bbe      	subs	r6, r7, r6
 801423c:	6830      	ldr	r0, [r6, #0]
 801423e:	b128      	cbz	r0, 801424c <GUI_ALLOC_GetFixedBlock+0x48>
 8014240:	4620      	mov	r0, r4
 8014242:	f7ff fdfd 	bl	8013e40 <_RemoveHoles>
 8014246:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801424a:	1a7e      	subs	r6, r7, r1
 801424c:	6832      	ldr	r2, [r6, #0]
 801424e:	bb22      	cbnz	r2, 801429a <GUI_ALLOC_GetFixedBlock+0x96>
 8014250:	6873      	ldr	r3, [r6, #4]
 8014252:	42ab      	cmp	r3, r5
 8014254:	db21      	blt.n	801429a <GUI_ALLOC_GetFixedBlock+0x96>
 8014256:	1d1c      	adds	r4, r3, #4
 8014258:	1b60      	subs	r0, r4, r5
 801425a:	1834      	adds	r4, r6, r0
 801425c:	4630      	mov	r0, r6
 801425e:	f7ff fd8b 	bl	8013d78 <_RemoveFreeBlock>
 8014262:	490f      	ldr	r1, [pc, #60]	; (80142a0 <GUI_ALLOC_GetFixedBlock+0x9c>)
 8014264:	688a      	ldr	r2, [r1, #8]
 8014266:	6908      	ldr	r0, [r1, #16]
 8014268:	1b53      	subs	r3, r2, r5
 801426a:	182a      	adds	r2, r5, r0
 801426c:	608b      	str	r3, [r1, #8]
 801426e:	610a      	str	r2, [r1, #16]
 8014270:	6871      	ldr	r1, [r6, #4]
 8014272:	1b48      	subs	r0, r1, r5
 8014274:	d002      	beq.n	801427c <GUI_ALLOC_GetFixedBlock+0x78>
 8014276:	4631      	mov	r1, r6
 8014278:	f7ff fd9c 	bl	8013db4 <_AddFreeMemory>
 801427c:	f844 5c04 	str.w	r5, [r4, #-4]
 8014280:	e00b      	b.n	801429a <GUI_ALLOC_GetFixedBlock+0x96>
 8014282:	6823      	ldr	r3, [r4, #0]
 8014284:	b10b      	cbz	r3, 801428a <GUI_ALLOC_GetFixedBlock+0x86>
 8014286:	6861      	ldr	r1, [r4, #4]
 8014288:	6059      	str	r1, [r3, #4]
 801428a:	6862      	ldr	r2, [r4, #4]
 801428c:	b102      	cbz	r2, 8014290 <GUI_ALLOC_GetFixedBlock+0x8c>
 801428e:	6013      	str	r3, [r2, #0]
 8014290:	42a0      	cmp	r0, r4
 8014292:	d102      	bne.n	801429a <GUI_ALLOC_GetFixedBlock+0x96>
 8014294:	6820      	ldr	r0, [r4, #0]
 8014296:	4b02      	ldr	r3, [pc, #8]	; (80142a0 <GUI_ALLOC_GetFixedBlock+0x9c>)
 8014298:	6398      	str	r0, [r3, #56]	; 0x38
 801429a:	4620      	mov	r0, r4
 801429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801429e:	bf00      	nop
 80142a0:	2000eb6c 	.word	0x2000eb6c

080142a4 <_Alloc>:
 80142a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142a8:	4604      	mov	r4, r0
 80142aa:	f7ff fec5 	bl	8014038 <_InitOnce>
 80142ae:	4b38      	ldr	r3, [pc, #224]	; (8014390 <_Alloc+0xec>)
 80142b0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80142b2:	42b4      	cmp	r4, r6
 80142b4:	d302      	bcc.n	80142bc <_Alloc+0x18>
 80142b6:	1ce6      	adds	r6, r4, #3
 80142b8:	f026 0603 	bic.w	r6, r6, #3
 80142bc:	6818      	ldr	r0, [r3, #0]
 80142be:	4c34      	ldr	r4, [pc, #208]	; (8014390 <_Alloc+0xec>)
 80142c0:	360c      	adds	r6, #12
 80142c2:	4286      	cmp	r6, r0
 80142c4:	d860      	bhi.n	8014388 <_Alloc+0xe4>
 80142c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80142c8:	6862      	ldr	r2, [r4, #4]
 80142ca:	428a      	cmp	r2, r1
 80142cc:	d910      	bls.n	80142f0 <_Alloc+0x4c>
 80142ce:	4830      	ldr	r0, [pc, #192]	; (8014390 <_Alloc+0xec>)
 80142d0:	6842      	ldr	r2, [r0, #4]
 80142d2:	1e55      	subs	r5, r2, #1
 80142d4:	6045      	str	r5, [r0, #4]
 80142d6:	6a05      	ldr	r5, [r0, #32]
 80142d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80142da:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80142de:	eb02 0308 	add.w	r3, r2, r8
 80142e2:	6859      	ldr	r1, [r3, #4]
 80142e4:	6201      	str	r1, [r0, #32]
 80142e6:	2001      	movs	r0, #1
 80142e8:	f802 0035 	strb.w	r0, [r2, r5, lsl #3]
 80142ec:	b955      	cbnz	r5, 8014304 <_Alloc+0x60>
 80142ee:	e04b      	b.n	8014388 <_Alloc+0xe4>
 80142f0:	1e4d      	subs	r5, r1, #1
 80142f2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80142f4:	f7ff fe52 	bl	8013f9c <_EnlargeBlocks>
 80142f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80142fa:	1c59      	adds	r1, r3, #1
 80142fc:	62e1      	str	r1, [r4, #44]	; 0x2c
 80142fe:	2800      	cmp	r0, #0
 8014300:	d0e5      	beq.n	80142ce <_Alloc+0x2a>
 8014302:	e041      	b.n	8014388 <_Alloc+0xe4>
 8014304:	230f      	movs	r3, #15
 8014306:	4a22      	ldr	r2, [pc, #136]	; (8014390 <_Alloc+0xec>)
 8014308:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801430c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 801430e:	4286      	cmp	r6, r0
 8014310:	d20b      	bcs.n	801432a <_Alloc+0x86>
 8014312:	f113 33ff 	adds.w	r3, r3, #4294967295
 8014316:	d2f6      	bcs.n	8014306 <_Alloc+0x62>
 8014318:	e007      	b.n	801432a <_Alloc+0x86>
 801431a:	688c      	ldr	r4, [r1, #8]
 801431c:	6860      	ldr	r0, [r4, #4]
 801431e:	4286      	cmp	r6, r0
 8014320:	d90a      	bls.n	8014338 <_Alloc+0x94>
 8014322:	68a1      	ldr	r1, [r4, #8]
 8014324:	2900      	cmp	r1, #0
 8014326:	d1f8      	bne.n	801431a <_Alloc+0x76>
 8014328:	3301      	adds	r3, #1
 801432a:	2b0f      	cmp	r3, #15
 801432c:	d824      	bhi.n	8014378 <_Alloc+0xd4>
 801432e:	4a18      	ldr	r2, [pc, #96]	; (8014390 <_Alloc+0xec>)
 8014330:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014334:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014336:	e7f5      	b.n	8014324 <_Alloc+0x80>
 8014338:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8014390 <_Alloc+0xec>
 801433c:	6867      	ldr	r7, [r4, #4]
 801433e:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8014342:	1bba      	subs	r2, r7, r6
 8014344:	310c      	adds	r1, #12
 8014346:	4620      	mov	r0, r4
 8014348:	428a      	cmp	r2, r1
 801434a:	bf38      	it	cc
 801434c:	463e      	movcc	r6, r7
 801434e:	f7ff fd13 	bl	8013d78 <_RemoveFreeBlock>
 8014352:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8014356:	19a1      	adds	r1, r4, r6
 8014358:	eb03 0008 	add.w	r0, r3, r8
 801435c:	2200      	movs	r2, #0
 801435e:	42b7      	cmp	r7, r6
 8014360:	6044      	str	r4, [r0, #4]
 8014362:	e884 0060 	stmia.w	r4, {r5, r6}
 8014366:	60a2      	str	r2, [r4, #8]
 8014368:	6124      	str	r4, [r4, #16]
 801436a:	f841 6c04 	str.w	r6, [r1, #-4]
 801436e:	dd0c      	ble.n	801438a <_Alloc+0xe6>
 8014370:	1bb8      	subs	r0, r7, r6
 8014372:	f7ff fd1f 	bl	8013db4 <_AddFreeMemory>
 8014376:	e008      	b.n	801438a <_Alloc+0xe6>
 8014378:	4630      	mov	r0, r6
 801437a:	f7ff fd61 	bl	8013e40 <_RemoveHoles>
 801437e:	2800      	cmp	r0, #0
 8014380:	d0c0      	beq.n	8014304 <_Alloc+0x60>
 8014382:	4628      	mov	r0, r5
 8014384:	f7ff fcca 	bl	8013d1c <_PushFreeBlock>
 8014388:	2500      	movs	r5, #0
 801438a:	4628      	mov	r0, r5
 801438c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014390:	2000eb6c 	.word	0x2000eb6c

08014394 <GUI_ALLOC_AllocNoInit>:
 8014394:	b108      	cbz	r0, 801439a <GUI_ALLOC_AllocNoInit+0x6>
 8014396:	f7ff bf85 	b.w	80142a4 <_Alloc>
 801439a:	4770      	bx	lr

0801439c <GUI_ALLOC_FreePtr>:
 801439c:	b510      	push	{r4, lr}
 801439e:	4604      	mov	r4, r0
 80143a0:	6800      	ldr	r0, [r0, #0]
 80143a2:	f7ff fde3 	bl	8013f6c <GUI_ALLOC_Free>
 80143a6:	2300      	movs	r3, #0
 80143a8:	6023      	str	r3, [r4, #0]
 80143aa:	bd10      	pop	{r4, pc}

080143ac <GUI_ALLOC_FreePtrArray>:
 80143ac:	b570      	push	{r4, r5, r6, lr}
 80143ae:	4605      	mov	r5, r0
 80143b0:	460e      	mov	r6, r1
 80143b2:	2400      	movs	r4, #0
 80143b4:	42b4      	cmp	r4, r6
 80143b6:	da05      	bge.n	80143c4 <GUI_ALLOC_FreePtrArray+0x18>
 80143b8:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80143bc:	f7ff ffee 	bl	801439c <GUI_ALLOC_FreePtr>
 80143c0:	3401      	adds	r4, #1
 80143c2:	e7f7      	b.n	80143b4 <GUI_ALLOC_FreePtrArray+0x8>
 80143c4:	bd70      	pop	{r4, r5, r6, pc}

080143c6 <GUI_AddDecMin>:
 80143c6:	b570      	push	{r4, r5, r6, lr}
 80143c8:	460c      	mov	r4, r1
 80143ca:	4605      	mov	r5, r0
 80143cc:	f003 ff26 	bl	801821c <GUI_Long2Len>
 80143d0:	2200      	movs	r2, #0
 80143d2:	b2c1      	uxtb	r1, r0
 80143d4:	4623      	mov	r3, r4
 80143d6:	4628      	mov	r0, r5
 80143d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143dc:	f003 bf36 	b.w	801824c <GUI_AddDecShift>

080143e0 <GUI_ALLOC_AllocZero>:
 80143e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80143e2:	4605      	mov	r5, r0
 80143e4:	f7ff ffd6 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 80143e8:	4606      	mov	r6, r0
 80143ea:	b158      	cbz	r0, 8014404 <GUI_ALLOC_AllocZero+0x24>
 80143ec:	f7ff fd84 	bl	8013ef8 <GUI_ALLOC_LockH>
 80143f0:	ac02      	add	r4, sp, #8
 80143f2:	2100      	movs	r1, #0
 80143f4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80143f8:	462a      	mov	r2, r5
 80143fa:	f7fd fc2b 	bl	8011c54 <GUI__memset>
 80143fe:	4620      	mov	r0, r4
 8014400:	f7ff fd88 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014404:	4630      	mov	r0, r6
 8014406:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08014408 <GUI_ALLOC_AllocInit>:
 8014408:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801440a:	4605      	mov	r5, r0
 801440c:	460c      	mov	r4, r1
 801440e:	b909      	cbnz	r1, 8014414 <GUI_ALLOC_AllocInit+0xc>
 8014410:	2600      	movs	r6, #0
 8014412:	e013      	b.n	801443c <GUI_ALLOC_AllocInit+0x34>
 8014414:	4608      	mov	r0, r1
 8014416:	f7ff ffbd 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 801441a:	4606      	mov	r6, r0
 801441c:	2800      	cmp	r0, #0
 801441e:	d0f7      	beq.n	8014410 <GUI_ALLOC_AllocInit+0x8>
 8014420:	f7ff fd6a 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014424:	4629      	mov	r1, r5
 8014426:	9001      	str	r0, [sp, #4]
 8014428:	4622      	mov	r2, r4
 801442a:	b115      	cbz	r5, 8014432 <GUI_ALLOC_AllocInit+0x2a>
 801442c:	f7ec fdf2 	bl	8001014 <memcpy>
 8014430:	e001      	b.n	8014436 <GUI_ALLOC_AllocInit+0x2e>
 8014432:	f7fd fc0f 	bl	8011c54 <GUI__memset>
 8014436:	a801      	add	r0, sp, #4
 8014438:	f7ff fd6c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801443c:	4630      	mov	r0, r6
 801443e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08014440 <GUI_DrawRect>:
 8014440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014444:	4c1d      	ldr	r4, [pc, #116]	; (80144bc <GUI_DrawRect+0x7c>)
 8014446:	f8d4 e000 	ldr.w	lr, [r4]
 801444a:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 801444e:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8014452:	1905      	adds	r5, r0, r4
 8014454:	1914      	adds	r4, r2, r4
 8014456:	f89e 2018 	ldrb.w	r2, [lr, #24]
 801445a:	1e50      	subs	r0, r2, #1
 801445c:	198f      	adds	r7, r1, r6
 801445e:	b281      	uxth	r1, r0
 8014460:	1a78      	subs	r0, r7, r1
 8014462:	199e      	adds	r6, r3, r6
 8014464:	190a      	adds	r2, r1, r4
 8014466:	1a6b      	subs	r3, r5, r1
 8014468:	f8ad 0002 	strh.w	r0, [sp, #2]
 801446c:	1989      	adds	r1, r1, r6
 801446e:	4668      	mov	r0, sp
 8014470:	f8ad 3000 	strh.w	r3, [sp]
 8014474:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014478:	f8ad 1006 	strh.w	r1, [sp, #6]
 801447c:	f7fa fbe2 	bl	800ec44 <WM__InitIVRSearch>
 8014480:	b1d0      	cbz	r0, 80144b8 <GUI_DrawRect+0x78>
 8014482:	4628      	mov	r0, r5
 8014484:	4639      	mov	r1, r7
 8014486:	4622      	mov	r2, r4
 8014488:	f7fd f88a 	bl	80115a0 <LCD_DrawHLine>
 801448c:	f107 0901 	add.w	r9, r7, #1
 8014490:	4628      	mov	r0, r5
 8014492:	4631      	mov	r1, r6
 8014494:	4622      	mov	r2, r4
 8014496:	f106 38ff 	add.w	r8, r6, #4294967295
 801449a:	f7fd f881 	bl	80115a0 <LCD_DrawHLine>
 801449e:	4628      	mov	r0, r5
 80144a0:	4649      	mov	r1, r9
 80144a2:	4642      	mov	r2, r8
 80144a4:	f7fd f8a2 	bl	80115ec <LCD_DrawVLine>
 80144a8:	4620      	mov	r0, r4
 80144aa:	4649      	mov	r1, r9
 80144ac:	4642      	mov	r2, r8
 80144ae:	f7fd f89d 	bl	80115ec <LCD_DrawVLine>
 80144b2:	f7fa fb07 	bl	800eac4 <WM__GetNextIVR>
 80144b6:	e7e3      	b.n	8014480 <GUI_DrawRect+0x40>
 80144b8:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 80144bc:	20000308 	.word	0x20000308

080144c0 <LCD_Index2Color_888>:
 80144c0:	4770      	bx	lr

080144c2 <LCD_Index2Color_8888>:
 80144c2:	4770      	bx	lr

080144c4 <_Color2Index_8888>:
 80144c4:	4770      	bx	lr

080144c6 <_GetIndexMask_8888>:
 80144c6:	f04f 30ff 	mov.w	r0, #4294967295
 80144ca:	4770      	bx	lr

080144cc <_Color2IndexBulk>:
 80144cc:	b510      	push	{r4, lr}
 80144ce:	f850 4b04 	ldr.w	r4, [r0], #4
 80144d2:	3a01      	subs	r2, #1
 80144d4:	600c      	str	r4, [r1, #0]
 80144d6:	4419      	add	r1, r3
 80144d8:	d1f9      	bne.n	80144ce <_Color2IndexBulk+0x2>
 80144da:	bd10      	pop	{r4, pc}

080144dc <_Index2ColorBulk>:
 80144dc:	b510      	push	{r4, lr}
 80144de:	6804      	ldr	r4, [r0, #0]
 80144e0:	3a01      	subs	r2, #1
 80144e2:	f841 4b04 	str.w	r4, [r1], #4
 80144e6:	4418      	add	r0, r3
 80144e8:	d1f9      	bne.n	80144de <_Index2ColorBulk+0x2>
 80144ea:	bd10      	pop	{r4, pc}

080144ec <LCD_Index2Color_565>:
 80144ec:	f3c0 1345 	ubfx	r3, r0, #5, #6
 80144f0:	4a06      	ldr	r2, [pc, #24]	; (801450c <LCD_Index2Color_565+0x20>)
 80144f2:	5cd1      	ldrb	r1, [r2, r3]
 80144f4:	4b06      	ldr	r3, [pc, #24]	; (8014510 <LCD_Index2Color_565+0x24>)
 80144f6:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 80144fa:	f000 001f 	and.w	r0, r0, #31
 80144fe:	5c9a      	ldrb	r2, [r3, r2]
 8014500:	5c1b      	ldrb	r3, [r3, r0]
 8014502:	0412      	lsls	r2, r2, #16
 8014504:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 8014508:	18c8      	adds	r0, r1, r3
 801450a:	4770      	bx	lr
 801450c:	080352e0 	.word	0x080352e0
 8014510:	08035320 	.word	0x08035320

08014514 <_Color2Index_565>:
 8014514:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014518:	4a06      	ldr	r2, [pc, #24]	; (8014534 <_Color2Index_565+0x20>)
 801451a:	5cd1      	ldrb	r1, [r2, r3]
 801451c:	4b06      	ldr	r3, [pc, #24]	; (8014538 <_Color2Index_565+0x24>)
 801451e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8014522:	b2c0      	uxtb	r0, r0
 8014524:	5c9a      	ldrb	r2, [r3, r2]
 8014526:	5c1b      	ldrb	r3, [r3, r0]
 8014528:	02d2      	lsls	r2, r2, #11
 801452a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 801452e:	18c8      	adds	r0, r1, r3
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	08035340 	.word	0x08035340
 8014538:	08035440 	.word	0x08035440

0801453c <_GetIndexMask_565>:
 801453c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014540:	4770      	bx	lr
	...

08014544 <_Color2IndexBulk>:
 8014544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014546:	f850 4b04 	ldr.w	r4, [r0], #4
 801454a:	4e09      	ldr	r6, [pc, #36]	; (8014570 <_Color2IndexBulk+0x2c>)
 801454c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8014550:	5d77      	ldrb	r7, [r6, r5]
 8014552:	4d08      	ldr	r5, [pc, #32]	; (8014574 <_Color2IndexBulk+0x30>)
 8014554:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8014558:	b2e4      	uxtb	r4, r4
 801455a:	5dae      	ldrb	r6, [r5, r6]
 801455c:	5d2d      	ldrb	r5, [r5, r4]
 801455e:	02f6      	lsls	r6, r6, #11
 8014560:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8014564:	1974      	adds	r4, r6, r5
 8014566:	3a01      	subs	r2, #1
 8014568:	800c      	strh	r4, [r1, #0]
 801456a:	4419      	add	r1, r3
 801456c:	d1eb      	bne.n	8014546 <_Color2IndexBulk+0x2>
 801456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014570:	08035340 	.word	0x08035340
 8014574:	08035440 	.word	0x08035440

08014578 <_Index2ColorBulk>:
 8014578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801457a:	1e54      	subs	r4, r2, #1
 801457c:	fb04 0003 	mla	r0, r4, r3, r0
 8014580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014584:	8804      	ldrh	r4, [r0, #0]
 8014586:	4e0a      	ldr	r6, [pc, #40]	; (80145b0 <_Index2ColorBulk+0x38>)
 8014588:	f3c4 1545 	ubfx	r5, r4, #5, #6
 801458c:	1ac0      	subs	r0, r0, r3
 801458e:	5d77      	ldrb	r7, [r6, r5]
 8014590:	4d08      	ldr	r5, [pc, #32]	; (80145b4 <_Index2ColorBulk+0x3c>)
 8014592:	0ae6      	lsrs	r6, r4, #11
 8014594:	f004 041f 	and.w	r4, r4, #31
 8014598:	5dae      	ldrb	r6, [r5, r6]
 801459a:	5d2d      	ldrb	r5, [r5, r4]
 801459c:	0436      	lsls	r6, r6, #16
 801459e:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 80145a2:	1974      	adds	r4, r6, r5
 80145a4:	3a01      	subs	r2, #1
 80145a6:	f841 4904 	str.w	r4, [r1], #-4
 80145aa:	d1eb      	bne.n	8014584 <_Index2ColorBulk+0xc>
 80145ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ae:	bf00      	nop
 80145b0:	080352e0 	.word	0x080352e0
 80145b4:	08035320 	.word	0x08035320

080145b8 <WIDGET_SetEffect>:
 80145b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80145ba:	2300      	movs	r3, #0
 80145bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80145c0:	9103      	str	r1, [sp, #12]
 80145c2:	4669      	mov	r1, sp
 80145c4:	9302      	str	r3, [sp, #8]
 80145c6:	9200      	str	r2, [sp, #0]
 80145c8:	f7fa f8a6 	bl	800e718 <WM_SendMessage>
 80145cc:	b005      	add	sp, #20
 80145ce:	bd00      	pop	{pc}

080145d0 <_DrawDown>:
 80145d0:	4770      	bx	lr

080145d2 <_DrawUp>:
 80145d2:	4770      	bx	lr

080145d4 <_DrawDownRect>:
 80145d4:	4770      	bx	lr

080145d6 <_DrawUpRect>:
 80145d6:	4770      	bx	lr

080145d8 <_DrawFlat>:
 80145d8:	4770      	bx	lr

080145da <_EffectRequiresRedraw>:
 80145da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145dc:	460d      	mov	r5, r1
 80145de:	f100 0108 	add.w	r1, r0, #8
 80145e2:	4602      	mov	r2, r0
 80145e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80145e6:	c903      	ldmia	r1, {r0, r1}
 80145e8:	681c      	ldr	r4, [r3, #0]
 80145ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80145ee:	4610      	mov	r0, r2
 80145f0:	4669      	mov	r1, sp
 80145f2:	f001 f809 	bl	8015608 <WM__Screen2Client>
 80145f6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80145fa:	f9bd 3000 	ldrsh.w	r3, [sp]
 80145fe:	1902      	adds	r2, r0, r4
 8014600:	429a      	cmp	r2, r3
 8014602:	dc17      	bgt.n	8014634 <_EffectRequiresRedraw+0x5a>
 8014604:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8014608:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801460c:	1b08      	subs	r0, r1, r4
 801460e:	4290      	cmp	r0, r2
 8014610:	db10      	blt.n	8014634 <_EffectRequiresRedraw+0x5a>
 8014612:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014616:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 801461a:	1919      	adds	r1, r3, r4
 801461c:	4281      	cmp	r1, r0
 801461e:	dc09      	bgt.n	8014634 <_EffectRequiresRedraw+0x5a>
 8014620:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8014624:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8014628:	1b04      	subs	r4, r0, r4
 801462a:	4294      	cmp	r4, r2
 801462c:	bfac      	ite	ge
 801462e:	2000      	movge	r0, #0
 8014630:	2001      	movlt	r0, #1
 8014632:	e000      	b.n	8014636 <_EffectRequiresRedraw+0x5c>
 8014634:	2001      	movs	r0, #1
 8014636:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08014638 <WIDGET__RotateRect90>:
 8014638:	b570      	push	{r4, r5, r6, lr}
 801463a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801463e:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8014642:	8815      	ldrh	r5, [r2, #0]
 8014644:	8894      	ldrh	r4, [r2, #4]
 8014646:	1af0      	subs	r0, r6, r3
 8014648:	b283      	uxth	r3, r0
 801464a:	88d0      	ldrh	r0, [r2, #6]
 801464c:	8852      	ldrh	r2, [r2, #2]
 801464e:	80cc      	strh	r4, [r1, #6]
 8014650:	1a18      	subs	r0, r3, r0
 8014652:	1a9b      	subs	r3, r3, r2
 8014654:	8008      	strh	r0, [r1, #0]
 8014656:	808b      	strh	r3, [r1, #4]
 8014658:	804d      	strh	r5, [r1, #2]
 801465a:	bd70      	pop	{r4, r5, r6, pc}

0801465c <WIDGET__GetClientRect>:
 801465c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801465e:	b513      	push	{r0, r1, r4, lr}
 8014660:	f003 0008 	and.w	r0, r3, #8
 8014664:	460c      	mov	r4, r1
 8014666:	b281      	uxth	r1, r0
 8014668:	b179      	cbz	r1, 801468a <WIDGET__GetClientRect+0x2e>
 801466a:	4668      	mov	r0, sp
 801466c:	f7f9 fbba 	bl	800dde4 <WM_GetClientRect>
 8014670:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014674:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014678:	f8bd 0000 	ldrh.w	r0, [sp]
 801467c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8014680:	8022      	strh	r2, [r4, #0]
 8014682:	80a3      	strh	r3, [r4, #4]
 8014684:	8060      	strh	r0, [r4, #2]
 8014686:	80e1      	strh	r1, [r4, #6]
 8014688:	e002      	b.n	8014690 <WIDGET__GetClientRect+0x34>
 801468a:	4620      	mov	r0, r4
 801468c:	f7f9 fbaa 	bl	800dde4 <WM_GetClientRect>
 8014690:	bd1c      	pop	{r2, r3, r4, pc}

08014692 <WIDGET__GetBkColor>:
 8014692:	b508      	push	{r3, lr}
 8014694:	f7f9 fb25 	bl	800dce2 <WM_GetParent>
 8014698:	f7f9 fbb2 	bl	800de00 <WM_GetBkColor>
 801469c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80146a0:	4298      	cmp	r0, r3
 80146a2:	d103      	bne.n	80146ac <WIDGET__GetBkColor+0x1a>
 80146a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80146a8:	f7f8 ba20 	b.w	800caec <DIALOG_GetBkColor>
 80146ac:	bd08      	pop	{r3, pc}

080146ae <WIDGET__GetInsideRect>:
 80146ae:	b538      	push	{r3, r4, r5, lr}
 80146b0:	4604      	mov	r4, r0
 80146b2:	460d      	mov	r5, r1
 80146b4:	f7fa f83e 	bl	800e734 <WM__GetClientRectWin>
 80146b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	4628      	mov	r0, r5
 80146be:	4629      	mov	r1, r5
 80146c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146c4:	f7fd bb2a 	b.w	8011d1c <GUI__ReduceRect>

080146c8 <WIDGET__GetWindowSizeX>:
 80146c8:	b513      	push	{r0, r1, r4, lr}
 80146ca:	4604      	mov	r4, r0
 80146cc:	f7ff fc14 	bl	8013ef8 <GUI_ALLOC_LockH>
 80146d0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80146d2:	9001      	str	r0, [sp, #4]
 80146d4:	f003 0008 	and.w	r0, r3, #8
 80146d8:	b281      	uxth	r1, r0
 80146da:	4620      	mov	r0, r4
 80146dc:	b111      	cbz	r1, 80146e4 <WIDGET__GetWindowSizeX+0x1c>
 80146de:	f7f9 fae1 	bl	800dca4 <WM_GetWindowSizeY>
 80146e2:	e001      	b.n	80146e8 <WIDGET__GetWindowSizeX+0x20>
 80146e4:	f7f9 faca 	bl	800dc7c <WM_GetWindowSizeX>
 80146e8:	4604      	mov	r4, r0
 80146ea:	a801      	add	r0, sp, #4
 80146ec:	f7ff fc12 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80146f0:	4620      	mov	r0, r4
 80146f2:	bd1c      	pop	{r2, r3, r4, pc}

080146f4 <WIDGET_SetState>:
 80146f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146f6:	460c      	mov	r4, r1
 80146f8:	4605      	mov	r5, r0
 80146fa:	f7ff fbfd 	bl	8013ef8 <GUI_ALLOC_LockH>
 80146fe:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8014700:	9001      	str	r0, [sp, #4]
 8014702:	4294      	cmp	r4, r2
 8014704:	d003      	beq.n	801470e <WIDGET_SetState+0x1a>
 8014706:	8644      	strh	r4, [r0, #50]	; 0x32
 8014708:	4628      	mov	r0, r5
 801470a:	f7fa f85b 	bl	800e7c4 <WM_InvalidateWindow>
 801470e:	a801      	add	r0, sp, #4
 8014710:	f7ff fc00 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014714:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08014716 <WIDGET_OrState>:
 8014716:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014718:	460c      	mov	r4, r1
 801471a:	4605      	mov	r5, r0
 801471c:	b178      	cbz	r0, 801473e <WIDGET_OrState+0x28>
 801471e:	f7ff fbeb 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014722:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8014724:	9001      	str	r0, [sp, #4]
 8014726:	ea04 0102 	and.w	r1, r4, r2
 801472a:	428c      	cmp	r4, r1
 801472c:	d004      	beq.n	8014738 <WIDGET_OrState+0x22>
 801472e:	4314      	orrs	r4, r2
 8014730:	8644      	strh	r4, [r0, #50]	; 0x32
 8014732:	4628      	mov	r0, r5
 8014734:	f7fa f846 	bl	800e7c4 <WM_InvalidateWindow>
 8014738:	a801      	add	r0, sp, #4
 801473a:	f7ff fbeb 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801473e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08014740 <WIDGET_AndState>:
 8014740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014742:	460d      	mov	r5, r1
 8014744:	4604      	mov	r4, r0
 8014746:	b170      	cbz	r0, 8014766 <WIDGET_AndState+0x26>
 8014748:	f7ff fbd6 	bl	8013ef8 <GUI_ALLOC_LockH>
 801474c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801474e:	9001      	str	r0, [sp, #4]
 8014750:	ea22 0105 	bic.w	r1, r2, r5
 8014754:	428a      	cmp	r2, r1
 8014756:	d003      	beq.n	8014760 <WIDGET_AndState+0x20>
 8014758:	8641      	strh	r1, [r0, #50]	; 0x32
 801475a:	4620      	mov	r0, r4
 801475c:	f7fa f832 	bl	800e7c4 <WM_InvalidateWindow>
 8014760:	a801      	add	r0, sp, #4
 8014762:	f7ff fbd7 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014766:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08014768 <WIDGET__Init>:
 8014768:	4b02      	ldr	r3, [pc, #8]	; (8014774 <WIDGET__Init+0xc>)
 801476a:	8642      	strh	r2, [r0, #50]	; 0x32
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	8601      	strh	r1, [r0, #48]	; 0x30
 8014770:	62c3      	str	r3, [r0, #44]	; 0x2c
 8014772:	4770      	bx	lr
 8014774:	20000318 	.word	0x20000318

08014778 <WIDGET_HandleActive>:
 8014778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801477a:	460d      	mov	r5, r1
 801477c:	b085      	sub	sp, #20
 801477e:	4606      	mov	r6, r0
 8014780:	2800      	cmp	r0, #0
 8014782:	f000 8093 	beq.w	80148ac <WIDGET_HandleActive+0x134>
 8014786:	f7ff fbb7 	bl	8013ef8 <GUI_ALLOC_LockH>
 801478a:	682b      	ldr	r3, [r5, #0]
 801478c:	9002      	str	r0, [sp, #8]
 801478e:	2b15      	cmp	r3, #21
 8014790:	4602      	mov	r2, r0
 8014792:	d030      	beq.n	80147f6 <WIDGET_HandleActive+0x7e>
 8014794:	dc06      	bgt.n	80147a4 <WIDGET_HandleActive+0x2c>
 8014796:	2b11      	cmp	r3, #17
 8014798:	d030      	beq.n	80147fc <WIDGET_HandleActive+0x84>
 801479a:	2b14      	cmp	r3, #20
 801479c:	d07a      	beq.n	8014894 <WIDGET_HandleActive+0x11c>
 801479e:	2b0d      	cmp	r3, #13
 80147a0:	d17d      	bne.n	801489e <WIDGET_HandleActive+0x126>
 80147a2:	e03c      	b.n	801481e <WIDGET_HandleActive+0xa6>
 80147a4:	2b1e      	cmp	r3, #30
 80147a6:	d048      	beq.n	801483a <WIDGET_HandleActive+0xc2>
 80147a8:	dc04      	bgt.n	80147b4 <WIDGET_HandleActive+0x3c>
 80147aa:	2b16      	cmp	r3, #22
 80147ac:	d177      	bne.n	801489e <WIDGET_HandleActive+0x126>
 80147ae:	68eb      	ldr	r3, [r5, #12]
 80147b0:	8603      	strh	r3, [r0, #48]	; 0x30
 80147b2:	e072      	b.n	801489a <WIDGET_HandleActive+0x122>
 80147b4:	2b1f      	cmp	r3, #31
 80147b6:	d068      	beq.n	801488a <WIDGET_HandleActive+0x112>
 80147b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80147bc:	d16f      	bne.n	801489e <WIDGET_HandleActive+0x126>
 80147be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80147c0:	68ed      	ldr	r5, [r5, #12]
 80147c2:	6801      	ldr	r1, [r0, #0]
 80147c4:	62d5      	str	r5, [r2, #44]	; 0x2c
 80147c6:	682a      	ldr	r2, [r5, #0]
 80147c8:	a802      	add	r0, sp, #8
 80147ca:	1a8d      	subs	r5, r1, r2
 80147cc:	f7ff fba2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80147d0:	4630      	mov	r0, r6
 80147d2:	f7ff fb91 	bl	8013ef8 <GUI_ALLOC_LockH>
 80147d6:	ac04      	add	r4, sp, #16
 80147d8:	4269      	negs	r1, r5
 80147da:	f844 0d04 	str.w	r0, [r4, #-4]!
 80147de:	460a      	mov	r2, r1
 80147e0:	462b      	mov	r3, r5
 80147e2:	9500      	str	r5, [sp, #0]
 80147e4:	f000 fe7a 	bl	80154dc <WM__UpdateChildPositions>
 80147e8:	4620      	mov	r0, r4
 80147ea:	f7ff fb93 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80147ee:	4630      	mov	r0, r6
 80147f0:	f7f9 ffe8 	bl	800e7c4 <WM_InvalidateWindow>
 80147f4:	e051      	b.n	801489a <WIDGET_HandleActive+0x122>
 80147f6:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 80147fa:	e049      	b.n	8014890 <WIDGET_HandleActive+0x118>
 80147fc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80147fe:	f002 0310 	and.w	r3, r2, #16
 8014802:	b298      	uxth	r0, r3
 8014804:	2800      	cmp	r0, #0
 8014806:	d04a      	beq.n	801489e <WIDGET_HandleActive+0x126>
 8014808:	68e9      	ldr	r1, [r5, #12]
 801480a:	7a0c      	ldrb	r4, [r1, #8]
 801480c:	2c00      	cmp	r4, #0
 801480e:	d046      	beq.n	801489e <WIDGET_HandleActive+0x126>
 8014810:	a802      	add	r0, sp, #8
 8014812:	f7ff fb7f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014816:	4630      	mov	r0, r6
 8014818:	f7f8 ff96 	bl	800d748 <WM_SetFocus>
 801481c:	e03f      	b.n	801489e <WIDGET_HandleActive+0x126>
 801481e:	68e8      	ldr	r0, [r5, #12]
 8014820:	68c1      	ldr	r1, [r0, #12]
 8014822:	2900      	cmp	r1, #0
 8014824:	d03b      	beq.n	801489e <WIDGET_HandleActive+0x126>
 8014826:	7a0c      	ldrb	r4, [r1, #8]
 8014828:	2c00      	cmp	r4, #0
 801482a:	d038      	beq.n	801489e <WIDGET_HandleActive+0x126>
 801482c:	a802      	add	r0, sp, #8
 801482e:	f7ff fb71 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014832:	4630      	mov	r0, r6
 8014834:	f7f9 faf6 	bl	800de24 <WM_BringToTop>
 8014838:	e02f      	b.n	801489a <WIDGET_HandleActive+0x122>
 801483a:	68ef      	ldr	r7, [r5, #12]
 801483c:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801483e:	2f01      	cmp	r7, #1
 8014840:	d10a      	bne.n	8014858 <WIDGET_HandleActive+0xe0>
 8014842:	f001 0210 	and.w	r2, r1, #16
 8014846:	b294      	uxth	r4, r2
 8014848:	b16c      	cbz	r4, 8014866 <WIDGET_HandleActive+0xee>
 801484a:	4630      	mov	r0, r6
 801484c:	f041 0101 	orr.w	r1, r1, #1
 8014850:	f7ff ff50 	bl	80146f4 <WIDGET_SetState>
 8014854:	2708      	movs	r7, #8
 8014856:	e008      	b.n	801486a <WIDGET_HandleActive+0xf2>
 8014858:	f021 0101 	bic.w	r1, r1, #1
 801485c:	4630      	mov	r0, r6
 801485e:	f7ff ff49 	bl	80146f4 <WIDGET_SetState>
 8014862:	2709      	movs	r7, #9
 8014864:	e001      	b.n	801486a <WIDGET_HandleActive+0xf2>
 8014866:	f04f 37ff 	mov.w	r7, #4294967295
 801486a:	a802      	add	r0, sp, #8
 801486c:	f7ff fb52 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014870:	1c7b      	adds	r3, r7, #1
 8014872:	f04f 0400 	mov.w	r4, #0
 8014876:	d005      	beq.n	8014884 <WIDGET_HandleActive+0x10c>
 8014878:	4630      	mov	r0, r6
 801487a:	4639      	mov	r1, r7
 801487c:	f7f9 f8e5 	bl	800da4a <WM_NotifyParent>
 8014880:	60ec      	str	r4, [r5, #12]
 8014882:	e00d      	b.n	80148a0 <WIDGET_HandleActive+0x128>
 8014884:	2301      	movs	r3, #1
 8014886:	60eb      	str	r3, [r5, #12]
 8014888:	e00a      	b.n	80148a0 <WIDGET_HandleActive+0x128>
 801488a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801488c:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8014890:	60e8      	str	r0, [r5, #12]
 8014892:	e002      	b.n	801489a <WIDGET_HandleActive+0x122>
 8014894:	68e9      	ldr	r1, [r5, #12]
 8014896:	f7ff ff0a 	bl	80146ae <WIDGET__GetInsideRect>
 801489a:	2400      	movs	r4, #0
 801489c:	e000      	b.n	80148a0 <WIDGET_HandleActive+0x128>
 801489e:	2401      	movs	r4, #1
 80148a0:	9802      	ldr	r0, [sp, #8]
 80148a2:	b120      	cbz	r0, 80148ae <WIDGET_HandleActive+0x136>
 80148a4:	a802      	add	r0, sp, #8
 80148a6:	f7ff fb35 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80148aa:	e000      	b.n	80148ae <WIDGET_HandleActive+0x136>
 80148ac:	2401      	movs	r4, #1
 80148ae:	4620      	mov	r0, r4
 80148b0:	b005      	add	sp, #20
 80148b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148b4 <WIDGET__DrawFocusRect>:
 80148b4:	b513      	push	{r0, r1, r4, lr}
 80148b6:	4614      	mov	r4, r2
 80148b8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80148ba:	460b      	mov	r3, r1
 80148bc:	f002 0108 	and.w	r1, r2, #8
 80148c0:	b28a      	uxth	r2, r1
 80148c2:	b122      	cbz	r2, 80148ce <WIDGET__DrawFocusRect+0x1a>
 80148c4:	461a      	mov	r2, r3
 80148c6:	4669      	mov	r1, sp
 80148c8:	f7ff feb6 	bl	8014638 <WIDGET__RotateRect90>
 80148cc:	466b      	mov	r3, sp
 80148ce:	4618      	mov	r0, r3
 80148d0:	4621      	mov	r1, r4
 80148d2:	f003 fc1b 	bl	801810c <GUI_DrawFocusRect>
 80148d6:	bd1c      	pop	{r2, r3, r4, pc}

080148d8 <WIDGET__DrawVLine>:
 80148d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148da:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80148dc:	f004 0408 	and.w	r4, r4, #8
 80148e0:	b2a4      	uxth	r4, r4
 80148e2:	b1ac      	cbz	r4, 8014910 <WIDGET__DrawVLine+0x38>
 80148e4:	b289      	uxth	r1, r1
 80148e6:	f8ad 1000 	strh.w	r1, [sp]
 80148ea:	f8ad 1004 	strh.w	r1, [sp, #4]
 80148ee:	f8ad 2002 	strh.w	r2, [sp, #2]
 80148f2:	a902      	add	r1, sp, #8
 80148f4:	466a      	mov	r2, sp
 80148f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80148fa:	f7ff fe9d 	bl	8014638 <WIDGET__RotateRect90>
 80148fe:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8014902:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8014906:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801490a:	f7fe f979 	bl	8012c00 <GUI_DrawHLine>
 801490e:	e004      	b.n	801491a <WIDGET__DrawVLine+0x42>
 8014910:	4608      	mov	r0, r1
 8014912:	4611      	mov	r1, r2
 8014914:	461a      	mov	r2, r3
 8014916:	f7fe f931 	bl	8012b7c <GUI_DrawVLine>
 801491a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0801491c <WIDGET__FillRectEx>:
 801491c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801491e:	b507      	push	{r0, r1, r2, lr}
 8014920:	460a      	mov	r2, r1
 8014922:	f003 0108 	and.w	r1, r3, #8
 8014926:	b28b      	uxth	r3, r1
 8014928:	b11b      	cbz	r3, 8014932 <WIDGET__FillRectEx+0x16>
 801492a:	4669      	mov	r1, sp
 801492c:	f7ff fe84 	bl	8014638 <WIDGET__RotateRect90>
 8014930:	466a      	mov	r2, sp
 8014932:	4610      	mov	r0, r2
 8014934:	f7fe f8d6 	bl	8012ae4 <GUI_FillRectEx>
 8014938:	bd0e      	pop	{r1, r2, r3, pc}

0801493a <WIDGET__EFFECT_DrawDownRect>:
 801493a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801493c:	4605      	mov	r5, r0
 801493e:	460c      	mov	r4, r1
 8014940:	b919      	cbnz	r1, 801494a <WIDGET__EFFECT_DrawDownRect+0x10>
 8014942:	4668      	mov	r0, sp
 8014944:	f7f9 fa4e 	bl	800dde4 <WM_GetClientRect>
 8014948:	466c      	mov	r4, sp
 801494a:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801494c:	f003 0008 	and.w	r0, r3, #8
 8014950:	b281      	uxth	r1, r0
 8014952:	b129      	cbz	r1, 8014960 <WIDGET__EFFECT_DrawDownRect+0x26>
 8014954:	4622      	mov	r2, r4
 8014956:	4628      	mov	r0, r5
 8014958:	4669      	mov	r1, sp
 801495a:	f7ff fe6d 	bl	8014638 <WIDGET__RotateRect90>
 801495e:	466c      	mov	r4, sp
 8014960:	4628      	mov	r0, r5
 8014962:	4621      	mov	r1, r4
 8014964:	f7ff fe39 	bl	80145da <_EffectRequiresRedraw>
 8014968:	b118      	cbz	r0, 8014972 <WIDGET__EFFECT_DrawDownRect+0x38>
 801496a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801496c:	4620      	mov	r0, r4
 801496e:	6913      	ldr	r3, [r2, #16]
 8014970:	4798      	blx	r3
 8014972:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08014974 <WIDGET__EFFECT_DrawUpRect>:
 8014974:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8014976:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014978:	460c      	mov	r4, r1
 801497a:	f003 0108 	and.w	r1, r3, #8
 801497e:	b28a      	uxth	r2, r1
 8014980:	4605      	mov	r5, r0
 8014982:	b122      	cbz	r2, 801498e <WIDGET__EFFECT_DrawUpRect+0x1a>
 8014984:	4622      	mov	r2, r4
 8014986:	4669      	mov	r1, sp
 8014988:	f7ff fe56 	bl	8014638 <WIDGET__RotateRect90>
 801498c:	466c      	mov	r4, sp
 801498e:	4628      	mov	r0, r5
 8014990:	4621      	mov	r1, r4
 8014992:	f7ff fe22 	bl	80145da <_EffectRequiresRedraw>
 8014996:	b118      	cbz	r0, 80149a0 <WIDGET__EFFECT_DrawUpRect+0x2c>
 8014998:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801499a:	6883      	ldr	r3, [r0, #8]
 801499c:	4620      	mov	r0, r4
 801499e:	4798      	blx	r3
 80149a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

080149a4 <WIDGET_GetDefaultEffect>:
 80149a4:	4b01      	ldr	r3, [pc, #4]	; (80149ac <WIDGET_GetDefaultEffect+0x8>)
 80149a6:	6818      	ldr	r0, [r3, #0]
 80149a8:	4770      	bx	lr
 80149aa:	bf00      	nop
 80149ac:	20000318 	.word	0x20000318

080149b0 <_Create>:
 80149b0:	4770      	bx	lr

080149b2 <_Paint>:
 80149b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149b6:	b08b      	sub	sp, #44	; 0x2c
 80149b8:	4681      	mov	r9, r0
 80149ba:	f7ff fa9d 	bl	8013ef8 <GUI_ALLOC_LockH>
 80149be:	ae02      	add	r6, sp, #8
 80149c0:	a904      	add	r1, sp, #16
 80149c2:	9001      	str	r0, [sp, #4]
 80149c4:	f7ff fe4a 	bl	801465c <WIDGET__GetClientRect>
 80149c8:	4630      	mov	r0, r6
 80149ca:	a904      	add	r1, sp, #16
 80149cc:	2201      	movs	r2, #1
 80149ce:	f7fd f9a5 	bl	8011d1c <GUI__ReduceRect>
 80149d2:	9b01      	ldr	r3, [sp, #4]
 80149d4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80149d8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80149dc:	f9b3 1060 	ldrsh.w	r1, [r3, #96]	; 0x60
 80149e0:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80149e2:	1aa8      	subs	r0, r5, r2
 80149e4:	1c47      	adds	r7, r0, #1
 80149e6:	2002      	movs	r0, #2
 80149e8:	1a7d      	subs	r5, r7, r1
 80149ea:	fb91 f7f0 	sdiv	r7, r1, r0
 80149ee:	19d7      	adds	r7, r2, r7
 80149f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149f4:	4648      	mov	r0, r9
 80149f6:	ebc3 0802 	rsb	r8, r3, r2
 80149fa:	f1b8 0f01 	cmp.w	r8, #1
 80149fe:	bfb8      	it	lt
 8014a00:	f04f 0801 	movlt.w	r8, #1
 8014a04:	f7f8 fe02 	bl	800d60c <WM_GetHasTrans>
 8014a08:	b928      	cbnz	r0, 8014a16 <_Paint+0x64>
 8014a0a:	9901      	ldr	r1, [sp, #4]
 8014a0c:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8014a0e:	f7fd f8db 	bl	8011bc8 <LCD_SetBkColor>
 8014a12:	f7fe fe5f 	bl	80136d4 <GUI_Clear>
 8014a16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014a1a:	aa06      	add	r2, sp, #24
 8014a1c:	e882 0003 	stmia.w	r2, {r0, r1}
 8014a20:	9801      	ldr	r0, [sp, #4]
 8014a22:	f8ad 7020 	strh.w	r7, [sp, #32]
 8014a26:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
 8014a2a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8014a2c:	f04f 0e02 	mov.w	lr, #2
 8014a30:	fa0f f98c 	sxth.w	r9, ip
 8014a34:	fb99 f1fe 	sdiv	r1, r9, lr
 8014a38:	b2bb      	uxth	r3, r7
 8014a3a:	ebc1 0903 	rsb	r9, r1, r3
 8014a3e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8014a40:	1a89      	subs	r1, r1, r2
 8014a42:	4369      	muls	r1, r5
 8014a44:	fbb1 f2f8 	udiv	r2, r1, r8
 8014a48:	eb09 0102 	add.w	r1, r9, r2
 8014a4c:	b28a      	uxth	r2, r1
 8014a4e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8014a52:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014a56:	2605      	movs	r6, #5
 8014a58:	4494      	add	ip, r2
 8014a5a:	195b      	adds	r3, r3, r5
 8014a5c:	198a      	adds	r2, r1, r6
 8014a5e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014a62:	fb92 f3fe 	sdiv	r3, r2, lr
 8014a66:	b299      	uxth	r1, r3
 8014a68:	1e4a      	subs	r2, r1, #1
 8014a6a:	eb01 030e 	add.w	r3, r1, lr
 8014a6e:	a908      	add	r1, sp, #32
 8014a70:	f8ad 601a 	strh.w	r6, [sp, #26]
 8014a74:	f8ad c01c 	strh.w	ip, [sp, #28]
 8014a78:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8014a7c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014a80:	f7ff ff5b 	bl	801493a <WIDGET__EFFECT_DrawDownRect>
 8014a84:	2c00      	cmp	r4, #0
 8014a86:	da05      	bge.n	8014a94 <_Paint+0xe2>
 8014a88:	f108 0401 	add.w	r4, r8, #1
 8014a8c:	fb95 f6f6 	sdiv	r6, r5, r6
 8014a90:	42b4      	cmp	r4, r6
 8014a92:	dc13      	bgt.n	8014abc <_Paint+0x10a>
 8014a94:	2c01      	cmp	r4, #1
 8014a96:	dc12      	bgt.n	8014abe <_Paint+0x10c>
 8014a98:	9a01      	ldr	r2, [sp, #4]
 8014a9a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8014a9c:	f7fd f89c 	bl	8011bd8 <LCD_SetColor>
 8014aa0:	9801      	ldr	r0, [sp, #4]
 8014aa2:	a906      	add	r1, sp, #24
 8014aa4:	f7ff ff3a 	bl	801491c <WIDGET__FillRectEx>
 8014aa8:	9801      	ldr	r0, [sp, #4]
 8014aaa:	a906      	add	r1, sp, #24
 8014aac:	f7ff ff62 	bl	8014974 <WIDGET__EFFECT_DrawUpRect>
 8014ab0:	9b01      	ldr	r3, [sp, #4]
 8014ab2:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 8014ab6:	07c1      	lsls	r1, r0, #31
 8014ab8:	d416      	bmi.n	8014ae8 <_Paint+0x136>
 8014aba:	e020      	b.n	8014afe <_Paint+0x14c>
 8014abc:	240b      	movs	r4, #11
 8014abe:	9e01      	ldr	r6, [sp, #4]
 8014ac0:	6c70      	ldr	r0, [r6, #68]	; 0x44
 8014ac2:	f7fd f889 	bl	8011bd8 <LCD_SetColor>
 8014ac6:	2600      	movs	r6, #0
 8014ac8:	46b0      	mov	r8, r6
 8014aca:	1e60      	subs	r0, r4, #1
 8014acc:	fb96 f1f0 	sdiv	r1, r6, r0
 8014ad0:	2201      	movs	r2, #1
 8014ad2:	2303      	movs	r3, #3
 8014ad4:	9801      	ldr	r0, [sp, #4]
 8014ad6:	1879      	adds	r1, r7, r1
 8014ad8:	f108 0801 	add.w	r8, r8, #1
 8014adc:	f7ff fefc 	bl	80148d8 <WIDGET__DrawVLine>
 8014ae0:	45a0      	cmp	r8, r4
 8014ae2:	442e      	add	r6, r5
 8014ae4:	dbf1      	blt.n	8014aca <_Paint+0x118>
 8014ae6:	e7d7      	b.n	8014a98 <_Paint+0xe6>
 8014ae8:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8014aea:	07ca      	lsls	r2, r1, #31
 8014aec:	d507      	bpl.n	8014afe <_Paint+0x14c>
 8014aee:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8014af0:	f7fd f872 	bl	8011bd8 <LCD_SetColor>
 8014af4:	9801      	ldr	r0, [sp, #4]
 8014af6:	a904      	add	r1, sp, #16
 8014af8:	2200      	movs	r2, #0
 8014afa:	f7ff fedb 	bl	80148b4 <WIDGET__DrawFocusRect>
 8014afe:	a801      	add	r0, sp, #4
 8014b00:	f7ff fa08 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014b04:	b00b      	add	sp, #44	; 0x2c
 8014b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014b0a <_Create>:
 8014b0a:	4770      	bx	lr

08014b0c <_GetButtonSize>:
 8014b0c:	b513      	push	{r0, r1, r4, lr}
 8014b0e:	f7ff f9f3 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014b12:	ab02      	add	r3, sp, #8
 8014b14:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8014b16:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014b1a:	8854      	ldrh	r4, [r2, #2]
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7ff f9f9 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014b22:	4620      	mov	r0, r4
 8014b24:	bd1c      	pop	{r2, r3, r4, pc}
	...

08014b28 <_Paint>:
 8014b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b2c:	b08f      	sub	sp, #60	; 0x3c
 8014b2e:	2500      	movs	r5, #0
 8014b30:	4681      	mov	r9, r0
 8014b32:	950a      	str	r5, [sp, #40]	; 0x28
 8014b34:	950b      	str	r5, [sp, #44]	; 0x2c
 8014b36:	f7ff f9df 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014b3a:	f9b0 1060 	ldrsh.w	r1, [r0, #96]	; 0x60
 8014b3e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8014b40:	9102      	str	r1, [sp, #8]
 8014b42:	a90a      	add	r1, sp, #40	; 0x28
 8014b44:	8857      	ldrh	r7, [r2, #2]
 8014b46:	9007      	str	r0, [sp, #28]
 8014b48:	f7ff fd88 	bl	801465c <WIDGET__GetClientRect>
 8014b4c:	9e07      	ldr	r6, [sp, #28]
 8014b4e:	8e70      	ldrh	r0, [r6, #50]	; 0x32
 8014b50:	f000 0301 	and.w	r3, r0, #1
 8014b54:	4648      	mov	r0, r9
 8014b56:	9301      	str	r3, [sp, #4]
 8014b58:	f7f8 fcc8 	bl	800d4ec <WM__IsEnabled>
 8014b5c:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 8014b60:	9807      	ldr	r0, [sp, #28]
 8014b62:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8014b64:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 8014b68:	8832      	ldrh	r2, [r6, #0]
 8014b6a:	f8d0 804c 	ldr.w	r8, [r0, #76]	; 0x4c
 8014b6e:	1cd3      	adds	r3, r2, #3
 8014b70:	1d3c      	adds	r4, r7, #4
 8014b72:	1cfa      	adds	r2, r7, #3
 8014b74:	f8b0 7064 	ldrh.w	r7, [r0, #100]	; 0x64
 8014b78:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8014b7c:	1e7b      	subs	r3, r7, #1
 8014b7e:	fb03 2201 	mla	r2, r3, r1, r2
 8014b82:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014b84:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8014b88:	f7fd f826 	bl	8011bd8 <LCD_SetColor>
 8014b8c:	9807      	ldr	r0, [sp, #28]
 8014b8e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014b90:	f7fd fdbe 	bl	8012710 <GUI_SetFont>
 8014b94:	2002      	movs	r0, #2
 8014b96:	f7fd fdb1 	bl	80126fc <GUI_SetTextMode>
 8014b9a:	9f07      	ldr	r7, [sp, #28]
 8014b9c:	a908      	add	r1, sp, #32
 8014b9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014ba0:	f003 fa92 	bl	80180c8 <GUI_GetFontInfo>
 8014ba4:	f7ff f89e 	bl	8013ce4 <GUI_GetFontDistY>
 8014ba8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014bac:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 8014bb0:	f8b6 b000 	ldrh.w	fp, [r6]
 8014bb4:	1aca      	subs	r2, r1, r3
 8014bb6:	f10b 0106 	add.w	r1, fp, #6
 8014bba:	b2d7      	uxtb	r7, r2
 8014bbc:	42a3      	cmp	r3, r4
 8014bbe:	b28a      	uxth	r2, r1
 8014bc0:	9703      	str	r7, [sp, #12]
 8014bc2:	9204      	str	r2, [sp, #16]
 8014bc4:	dc04      	bgt.n	8014bd0 <_Paint+0xa8>
 8014bc6:	1ae5      	subs	r5, r4, r3
 8014bc8:	2402      	movs	r4, #2
 8014bca:	fb95 f7f4 	sdiv	r7, r5, r4
 8014bce:	b2bd      	uxth	r5, r7
 8014bd0:	3b01      	subs	r3, #1
 8014bd2:	280c      	cmp	r0, #12
 8014bd4:	bfcc      	ite	gt
 8014bd6:	2703      	movgt	r7, #3
 8014bd8:	2702      	movle	r7, #2
 8014bda:	1959      	adds	r1, r3, r5
 8014bdc:	b228      	sxth	r0, r5
 8014bde:	42b8      	cmp	r0, r7
 8014be0:	b28a      	uxth	r2, r1
 8014be2:	4648      	mov	r0, r9
 8014be4:	bfb8      	it	lt
 8014be6:	b2ef      	uxtblt	r7, r5
 8014be8:	9205      	str	r2, [sp, #20]
 8014bea:	f7f8 fd0f 	bl	800d60c <WM_GetHasTrans>
 8014bee:	b950      	cbnz	r0, 8014c06 <_Paint+0xde>
 8014bf0:	9c07      	ldr	r4, [sp, #28]
 8014bf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014bf4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8014bf8:	4298      	cmp	r0, r3
 8014bfa:	bf08      	it	eq
 8014bfc:	4841      	ldreq	r0, [pc, #260]	; (8014d04 <_Paint+0x1dc>)
 8014bfe:	f7fc ffe3 	bl	8011bc8 <LCD_SetBkColor>
 8014c02:	f7fe fd67 	bl	80136d4 <GUI_Clear>
 8014c06:	2400      	movs	r4, #0
 8014c08:	ab0e      	add	r3, sp, #56	; 0x38
 8014c0a:	f853 2d1c 	ldr.w	r2, [r3, #-28]!
 8014c0e:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8014c12:	428c      	cmp	r4, r1
 8014c14:	da64      	bge.n	8014ce0 <_Paint+0x1b8>
 8014c16:	f8b2 a062 	ldrh.w	sl, [r2, #98]	; 0x62
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7ff f97a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014c20:	fb0a fa04 	mul.w	sl, sl, r4
 8014c24:	2102      	movs	r1, #2
 8014c26:	eb0a 0201 	add.w	r2, sl, r1
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	f7fe f9c2 	bl	8012fb4 <GUI_DrawBitmap>
 8014c30:	9a02      	ldr	r2, [sp, #8]
 8014c32:	42a2      	cmp	r2, r4
 8014c34:	d112      	bne.n	8014c5c <_Paint+0x134>
 8014c36:	8831      	ldrh	r1, [r6, #0]
 8014c38:	f8b8 0000 	ldrh.w	r0, [r8]
 8014c3c:	2302      	movs	r3, #2
 8014c3e:	1a0a      	subs	r2, r1, r0
 8014c40:	fb92 f1f3 	sdiv	r1, r2, r3
 8014c44:	8870      	ldrh	r0, [r6, #2]
 8014c46:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 8014c4a:	1a80      	subs	r0, r0, r2
 8014c4c:	fb90 f3f3 	sdiv	r3, r0, r3
 8014c50:	1c9a      	adds	r2, r3, #2
 8014c52:	4640      	mov	r0, r8
 8014c54:	3102      	adds	r1, #2
 8014c56:	4452      	add	r2, sl
 8014c58:	f7fe f9ac 	bl	8012fb4 <GUI_DrawBitmap>
 8014c5c:	4648      	mov	r0, r9
 8014c5e:	f7ff f94b 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014c62:	4621      	mov	r1, r4
 8014c64:	9007      	str	r0, [sp, #28]
 8014c66:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8014c68:	f7f7 f899 	bl	800bd9e <GUI_ARRAY_GetpItemLocked>
 8014c6c:	9006      	str	r0, [sp, #24]
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d034      	beq.n	8014cdc <_Paint+0x1b4>
 8014c72:	7803      	ldrb	r3, [r0, #0]
 8014c74:	b37b      	cbz	r3, 8014cd6 <_Paint+0x1ae>
 8014c76:	9b05      	ldr	r3, [sp, #20]
 8014c78:	9a04      	ldr	r2, [sp, #16]
 8014c7a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014c7e:	2100      	movs	r1, #0
 8014c80:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8014c84:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 8014c88:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8014c8c:	f7fd ff0c 	bl	8012aa8 <GUI_GetStringDistX>
 8014c90:	f10b 0204 	add.w	r2, fp, #4
 8014c94:	1810      	adds	r0, r2, r0
 8014c96:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8014c9a:	2100      	movs	r1, #0
 8014c9c:	a80c      	add	r0, sp, #48	; 0x30
 8014c9e:	4652      	mov	r2, sl
 8014ca0:	f7fd feba 	bl	8012a18 <GUI_MoveRect>
 8014ca4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8014ca8:	9b03      	ldr	r3, [sp, #12]
 8014caa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8014cae:	9806      	ldr	r0, [sp, #24]
 8014cb0:	1ad2      	subs	r2, r2, r3
 8014cb2:	f7fe fb3f 	bl	8013334 <GUI_DispStringAt>
 8014cb6:	9901      	ldr	r1, [sp, #4]
 8014cb8:	b169      	cbz	r1, 8014cd6 <_Paint+0x1ae>
 8014cba:	9807      	ldr	r0, [sp, #28]
 8014cbc:	f9b0 2060 	ldrsh.w	r2, [r0, #96]	; 0x60
 8014cc0:	42a2      	cmp	r2, r4
 8014cc2:	d002      	beq.n	8014cca <_Paint+0x1a2>
 8014cc4:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8014cc8:	b12b      	cbz	r3, 8014cd6 <_Paint+0x1ae>
 8014cca:	b27a      	sxtb	r2, r7
 8014ccc:	a80a      	add	r0, sp, #40	; 0x28
 8014cce:	a90c      	add	r1, sp, #48	; 0x30
 8014cd0:	4252      	negs	r2, r2
 8014cd2:	f7fd f823 	bl	8011d1c <GUI__ReduceRect>
 8014cd6:	a806      	add	r0, sp, #24
 8014cd8:	f7ff f91c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014cdc:	3401      	adds	r4, #1
 8014cde:	e793      	b.n	8014c08 <_Paint+0xe0>
 8014ce0:	9801      	ldr	r0, [sp, #4]
 8014ce2:	b140      	cbz	r0, 8014cf6 <_Paint+0x1ce>
 8014ce4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	f7fc ff76 	bl	8011bd8 <LCD_SetColor>
 8014cec:	a80a      	add	r0, sp, #40	; 0x28
 8014cee:	2100      	movs	r1, #0
 8014cf0:	f003 fa0c 	bl	801810c <GUI_DrawFocusRect>
 8014cf4:	9b00      	ldr	r3, [sp, #0]
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7ff f90c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014cfc:	b00f      	add	sp, #60	; 0x3c
 8014cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d02:	bf00      	nop
 8014d04:	00c0c0c0 	.word	0x00c0c0c0

08014d08 <_Create>:
 8014d08:	4770      	bx	lr

08014d0a <_Paint>:
 8014d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0e:	b08b      	sub	sp, #44	; 0x2c
 8014d10:	f7ff f8f2 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014d14:	9000      	str	r0, [sp, #0]
 8014d16:	a806      	add	r0, sp, #24
 8014d18:	f7f9 f864 	bl	800dde4 <WM_GetClientRect>
 8014d1c:	9b00      	ldr	r3, [sp, #0]
 8014d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d20:	ad04      	add	r5, sp, #16
 8014d22:	4628      	mov	r0, r5
 8014d24:	a906      	add	r1, sp, #24
 8014d26:	6812      	ldr	r2, [r2, #0]
 8014d28:	f7fc fff8 	bl	8011d1c <GUI__ReduceRect>
 8014d2c:	9800      	ldr	r0, [sp, #0]
 8014d2e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8014d30:	f7f6 fe05 	bl	800b93e <PROGBAR__Value2Pos>
 8014d34:	4606      	mov	r6, r0
 8014d36:	9800      	ldr	r0, [sp, #0]
 8014d38:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 8014d3c:	07cb      	lsls	r3, r1, #31
 8014d3e:	d526      	bpl.n	8014d8e <_Paint+0x84>
 8014d40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014d44:	ac02      	add	r4, sp, #8
 8014d46:	e884 0003 	stmia.w	r4, {r0, r1}
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014d50:	f7f8 fc32 	bl	800d5b8 <WM_SetUserClipRect>
 8014d54:	9f00      	ldr	r7, [sp, #0]
 8014d56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014d58:	f7fc ff36 	bl	8011bc8 <LCD_SetBkColor>
 8014d5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8014d5e:	f7fc ff3b 	bl	8011bd8 <LCD_SetColor>
 8014d62:	f7fe fcb7 	bl	80136d4 <GUI_Clear>
 8014d66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014d6a:	3e01      	subs	r6, #1
 8014d6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8014d70:	4620      	mov	r0, r4
 8014d72:	f8ad 600e 	strh.w	r6, [sp, #14]
 8014d76:	f7f8 fc1f 	bl	800d5b8 <WM_SetUserClipRect>
 8014d7a:	9c00      	ldr	r4, [sp, #0]
 8014d7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014d7e:	f7fc ff23 	bl	8011bc8 <LCD_SetBkColor>
 8014d82:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8014d84:	f7fc ff28 	bl	8011bd8 <LCD_SetColor>
 8014d88:	f7fe fca4 	bl	80136d4 <GUI_Clear>
 8014d8c:	e05a      	b.n	8014e44 <_Paint+0x13a>
 8014d8e:	f7f6 fd90 	bl	800b8b2 <PROGBAR__GetTextLocked>
 8014d92:	9001      	str	r0, [sp, #4]
 8014d94:	b140      	cbz	r0, 8014da8 <_Paint+0x9e>
 8014d96:	9800      	ldr	r0, [sp, #0]
 8014d98:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014d9a:	f7fd fcb9 	bl	8012710 <GUI_SetFont>
 8014d9e:	9800      	ldr	r0, [sp, #0]
 8014da0:	9a01      	ldr	r2, [sp, #4]
 8014da2:	a908      	add	r1, sp, #32
 8014da4:	f7f6 fd88 	bl	800b8b8 <PROGBAR__GetTextRect>
 8014da8:	2002      	movs	r0, #2
 8014daa:	f7fd fca7 	bl	80126fc <GUI_SetTextMode>
 8014dae:	ad04      	add	r5, sp, #16
 8014db0:	4681      	mov	r9, r0
 8014db2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014db6:	ac02      	add	r4, sp, #8
 8014db8:	e884 0003 	stmia.w	r4, {r0, r1}
 8014dbc:	1e77      	subs	r7, r6, #1
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	f8ad 700c 	strh.w	r7, [sp, #12]
 8014dc4:	f7f8 fbf8 	bl	800d5b8 <WM_SetUserClipRect>
 8014dc8:	f8dd 8000 	ldr.w	r8, [sp]
 8014dcc:	9f01      	ldr	r7, [sp, #4]
 8014dce:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 8014dd2:	f9bd b020 	ldrsh.w	fp, [sp, #32]
 8014dd6:	f9bd a022 	ldrsh.w	sl, [sp, #34]	; 0x22
 8014dda:	f7fc fef5 	bl	8011bc8 <LCD_SetBkColor>
 8014dde:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8014de2:	f7fc fef9 	bl	8011bd8 <LCD_SetColor>
 8014de6:	f7fe fc75 	bl	80136d4 <GUI_Clear>
 8014dea:	b137      	cbz	r7, 8014dfa <_Paint+0xf0>
 8014dec:	4658      	mov	r0, fp
 8014dee:	4651      	mov	r1, sl
 8014df0:	f7fd fe4e 	bl	8012a90 <GUI_GotoXY>
 8014df4:	4638      	mov	r0, r7
 8014df6:	f7fe faa5 	bl	8013344 <GUI_DispString>
 8014dfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014dfe:	e884 0003 	stmia.w	r4, {r0, r1}
 8014e02:	4620      	mov	r0, r4
 8014e04:	f8ad 6008 	strh.w	r6, [sp, #8]
 8014e08:	f7f8 fbd6 	bl	800d5b8 <WM_SetUserClipRect>
 8014e0c:	9d00      	ldr	r5, [sp, #0]
 8014e0e:	9c01      	ldr	r4, [sp, #4]
 8014e10:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8014e12:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8014e16:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 8014e1a:	f7fc fed5 	bl	8011bc8 <LCD_SetBkColor>
 8014e1e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8014e20:	f7fc feda 	bl	8011bd8 <LCD_SetColor>
 8014e24:	f7fe fc56 	bl	80136d4 <GUI_Clear>
 8014e28:	b134      	cbz	r4, 8014e38 <_Paint+0x12e>
 8014e2a:	4638      	mov	r0, r7
 8014e2c:	4631      	mov	r1, r6
 8014e2e:	f7fd fe2f 	bl	8012a90 <GUI_GotoXY>
 8014e32:	4620      	mov	r0, r4
 8014e34:	f7fe fa86 	bl	8013344 <GUI_DispString>
 8014e38:	4648      	mov	r0, r9
 8014e3a:	f7fd fc5f 	bl	80126fc <GUI_SetTextMode>
 8014e3e:	a801      	add	r0, sp, #4
 8014e40:	f7ff f868 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014e44:	ac0a      	add	r4, sp, #40	; 0x28
 8014e46:	2000      	movs	r0, #0
 8014e48:	f7f8 fbb6 	bl	800d5b8 <WM_SetUserClipRect>
 8014e4c:	f854 0d28 	ldr.w	r0, [r4, #-40]!
 8014e50:	a906      	add	r1, sp, #24
 8014e52:	f7ff fd72 	bl	801493a <WIDGET__EFFECT_DrawDownRect>
 8014e56:	4668      	mov	r0, sp
 8014e58:	f7ff f85c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014e5c:	b00b      	add	sp, #44	; 0x2c
 8014e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e62 <GUI_DRAW__Draw>:
 8014e62:	e92d 43e3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, lr}
 8014e66:	4688      	mov	r8, r1
 8014e68:	4617      	mov	r7, r2
 8014e6a:	461e      	mov	r6, r3
 8014e6c:	4681      	mov	r9, r0
 8014e6e:	b170      	cbz	r0, 8014e8e <GUI_DRAW__Draw+0x2c>
 8014e70:	f7ff f842 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014e74:	4605      	mov	r5, r0
 8014e76:	a802      	add	r0, sp, #8
 8014e78:	682b      	ldr	r3, [r5, #0]
 8014e7a:	f840 5d04 	str.w	r5, [r0, #-4]!
 8014e7e:	681d      	ldr	r5, [r3, #0]
 8014e80:	f7ff f848 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014e84:	4648      	mov	r0, r9
 8014e86:	4641      	mov	r1, r8
 8014e88:	463a      	mov	r2, r7
 8014e8a:	4633      	mov	r3, r6
 8014e8c:	47a8      	blx	r5
 8014e8e:	e8bd 83ec 	ldmia.w	sp!, {r2, r3, r5, r6, r7, r8, r9, pc}

08014e92 <FRAMEWIN__UpdateButtons>:
 8014e92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e96:	b085      	sub	sp, #20
 8014e98:	4604      	mov	r4, r0
 8014e9a:	9301      	str	r3, [sp, #4]
 8014e9c:	4693      	mov	fp, r2
 8014e9e:	460d      	mov	r5, r1
 8014ea0:	f7ff f82a 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014ea4:	f10d 0810 	add.w	r8, sp, #16
 8014ea8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8014eaa:	f848 0d08 	str.w	r0, [r8, #-8]!
 8014eae:	688e      	ldr	r6, [r1, #8]
 8014eb0:	f7f7 fb32 	bl	800c518 <FRAMEWIN__CalcTitleHeight>
 8014eb4:	4607      	mov	r7, r0
 8014eb6:	4640      	mov	r0, r8
 8014eb8:	f7ff f82c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014ebc:	6832      	ldr	r2, [r6, #0]
 8014ebe:	2101      	movs	r1, #1
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	4790      	blx	r2
 8014ec4:	2103      	movs	r1, #3
 8014ec6:	6833      	ldr	r3, [r6, #0]
 8014ec8:	4681      	mov	r9, r0
 8014eca:	4620      	mov	r0, r4
 8014ecc:	4798      	blx	r3
 8014ece:	2100      	movs	r1, #0
 8014ed0:	4682      	mov	sl, r0
 8014ed2:	6832      	ldr	r2, [r6, #0]
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	4790      	blx	r2
 8014ed8:	42af      	cmp	r7, r5
 8014eda:	4680      	mov	r8, r0
 8014edc:	d107      	bne.n	8014eee <FRAMEWIN__UpdateButtons+0x5c>
 8014ede:	45d9      	cmp	r9, fp
 8014ee0:	d105      	bne.n	8014eee <FRAMEWIN__UpdateButtons+0x5c>
 8014ee2:	9801      	ldr	r0, [sp, #4]
 8014ee4:	4582      	cmp	sl, r0
 8014ee6:	d102      	bne.n	8014eee <FRAMEWIN__UpdateButtons+0x5c>
 8014ee8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014eea:	4588      	cmp	r8, r1
 8014eec:	d041      	beq.n	8014f72 <FRAMEWIN__UpdateButtons+0xe0>
 8014eee:	4620      	mov	r0, r4
 8014ef0:	f7f8 ff22 	bl	800dd38 <WM_GetFirstChild>
 8014ef4:	2600      	movs	r6, #0
 8014ef6:	1b7d      	subs	r5, r7, r5
 8014ef8:	4604      	mov	r4, r0
 8014efa:	4637      	mov	r7, r6
 8014efc:	2c00      	cmp	r4, #0
 8014efe:	d038      	beq.n	8014f72 <FRAMEWIN__UpdateButtons+0xe0>
 8014f00:	4620      	mov	r0, r4
 8014f02:	f7fe fff9 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014f06:	9003      	str	r0, [sp, #12]
 8014f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014f0a:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8014f0e:	2a80      	cmp	r2, #128	; 0x80
 8014f10:	d002      	beq.n	8014f18 <FRAMEWIN__UpdateButtons+0x86>
 8014f12:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8014f16:	d124      	bne.n	8014f62 <FRAMEWIN__UpdateButtons+0xd0>
 8014f18:	b125      	cbz	r5, 8014f24 <FRAMEWIN__UpdateButtons+0x92>
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	4629      	mov	r1, r5
 8014f1e:	462a      	mov	r2, r5
 8014f20:	f7f8 fd19 	bl	800d956 <WM_ResizeWindow>
 8014f24:	9803      	ldr	r0, [sp, #12]
 8014f26:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014f28:	060a      	lsls	r2, r1, #24
 8014f2a:	d50b      	bpl.n	8014f44 <FRAMEWIN__UpdateButtons+0xb2>
 8014f2c:	9b01      	ldr	r3, [sp, #4]
 8014f2e:	ebca 0203 	rsb	r2, sl, r3
 8014f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f34:	fb07 2115 	mls	r1, r7, r5, r2
 8014f38:	4620      	mov	r0, r4
 8014f3a:	ebc3 0208 	rsb	r2, r3, r8
 8014f3e:	3701      	adds	r7, #1
 8014f40:	f7f8 fe3f 	bl	800dbc2 <WM_MoveWindow>
 8014f44:	9803      	ldr	r0, [sp, #12]
 8014f46:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014f48:	058b      	lsls	r3, r1, #22
 8014f4a:	d50a      	bpl.n	8014f62 <FRAMEWIN__UpdateButtons+0xd0>
 8014f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f4e:	ebcb 0209 	rsb	r2, fp, r9
 8014f52:	fb06 2105 	mla	r1, r6, r5, r2
 8014f56:	4620      	mov	r0, r4
 8014f58:	ebc3 0208 	rsb	r2, r3, r8
 8014f5c:	3601      	adds	r6, #1
 8014f5e:	f7f8 fe30 	bl	800dbc2 <WM_MoveWindow>
 8014f62:	a803      	add	r0, sp, #12
 8014f64:	f7fe ffd6 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f7f8 fec2 	bl	800dcf2 <WM_GetNextSibling>
 8014f6e:	4604      	mov	r4, r0
 8014f70:	e7c4      	b.n	8014efc <FRAMEWIN__UpdateButtons+0x6a>
 8014f72:	b005      	add	sp, #20
 8014f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f78 <_GetBorderSize>:
 8014f78:	b513      	push	{r0, r1, r4, lr}
 8014f7a:	f7fe ffbd 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014f7e:	ab02      	add	r3, sp, #8
 8014f80:	f9b0 4056 	ldrsh.w	r4, [r0, #86]	; 0x56
 8014f84:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fe ffc3 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8014f8e:	4620      	mov	r0, r4
 8014f90:	bd1c      	pop	{r2, r3, r4, pc}
	...

08014f94 <_Create>:
 8014f94:	4901      	ldr	r1, [pc, #4]	; (8014f9c <_Create+0x8>)
 8014f96:	f000 b8f1 	b.w	801517c <FRAMEWIN_SetOwnerDraw>
 8014f9a:	bf00      	nop
 8014f9c:	080150c1 	.word	0x080150c1

08014fa0 <_Paint>:
 8014fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fa4:	b093      	sub	sp, #76	; 0x4c
 8014fa6:	4604      	mov	r4, r0
 8014fa8:	f7fe ffa6 	bl	8013ef8 <GUI_ALLOC_LockH>
 8014fac:	9001      	str	r0, [sp, #4]
 8014fae:	4620      	mov	r0, r4
 8014fb0:	f7f8 fe64 	bl	800dc7c <WM_GetWindowSizeX>
 8014fb4:	4680      	mov	r8, r0
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f7f8 fe74 	bl	800dca4 <WM_GetWindowSizeY>
 8014fbc:	ae04      	add	r6, sp, #16
 8014fbe:	9b01      	ldr	r3, [sp, #4]
 8014fc0:	4631      	mov	r1, r6
 8014fc2:	4681      	mov	r9, r0
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f8b3 5056 	ldrh.w	r5, [r3, #86]	; 0x56
 8014fca:	f7f7 fafc 	bl	800c5c6 <FRAMEWIN__CalcPositions>
 8014fce:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8014fd2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8014fd6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014fda:	b20a      	sxth	r2, r1
 8014fdc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8014fe0:	920d      	str	r2, [sp, #52]	; 0x34
 8014fe2:	2001      	movs	r0, #1
 8014fe4:	1e4a      	subs	r2, r1, #1
 8014fe6:	900a      	str	r0, [sp, #40]	; 0x28
 8014fe8:	b218      	sxth	r0, r3
 8014fea:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014fee:	900f      	str	r0, [sp, #60]	; 0x3c
 8014ff0:	b293      	uxth	r3, r2
 8014ff2:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 8014ff6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014ffa:	b21a      	sxth	r2, r3
 8014ffc:	b201      	sxth	r1, r0
 8014ffe:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015002:	1c53      	adds	r3, r2, #1
 8015004:	2000      	movs	r0, #0
 8015006:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 801500a:	9409      	str	r4, [sp, #36]	; 0x24
 801500c:	9611      	str	r6, [sp, #68]	; 0x44
 801500e:	9110      	str	r1, [sp, #64]	; 0x40
 8015010:	930e      	str	r3, [sp, #56]	; 0x38
 8015012:	f7f9 fe17 	bl	800ec44 <WM__InitIVRSearch>
 8015016:	b928      	cbnz	r0, 8015024 <_Paint+0x84>
 8015018:	a801      	add	r0, sp, #4
 801501a:	f7fe ff7b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801501e:	b013      	add	sp, #76	; 0x4c
 8015020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015024:	b22d      	sxth	r5, r5
 8015026:	fa05 f787 	sxtah	r7, r5, r7
 801502a:	a802      	add	r0, sp, #8
 801502c:	f7f8 fac4 	bl	800d5b8 <WM_SetUserClipRect>
 8015030:	9c01      	ldr	r4, [sp, #4]
 8015032:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8015034:	b10e      	cbz	r6, 801503a <_Paint+0x9a>
 8015036:	a809      	add	r0, sp, #36	; 0x24
 8015038:	47b0      	blx	r6
 801503a:	2000      	movs	r0, #0
 801503c:	f7f8 fabc 	bl	800d5b8 <WM_SetUserClipRect>
 8015040:	481e      	ldr	r0, [pc, #120]	; (80150bc <_Paint+0x11c>)
 8015042:	f7fc fdc9 	bl	8011bd8 <LCD_SetColor>
 8015046:	f108 34ff 	add.w	r4, r8, #4294967295
 801504a:	2000      	movs	r0, #0
 801504c:	4601      	mov	r1, r0
 801504e:	4622      	mov	r2, r4
 8015050:	1e6b      	subs	r3, r5, #1
 8015052:	f7fd fd53 	bl	8012afc <GUI_FillRect>
 8015056:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801505a:	f109 36ff 	add.w	r6, r9, #4294967295
 801505e:	2000      	movs	r0, #0
 8015060:	4601      	mov	r1, r0
 8015062:	3a01      	subs	r2, #1
 8015064:	4633      	mov	r3, r6
 8015066:	f7fd fd49 	bl	8012afc <GUI_FillRect>
 801506a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 801506e:	2100      	movs	r1, #0
 8015070:	3001      	adds	r0, #1
 8015072:	4622      	mov	r2, r4
 8015074:	4633      	mov	r3, r6
 8015076:	f7fd fd41 	bl	8012afc <GUI_FillRect>
 801507a:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 801507e:	2000      	movs	r0, #0
 8015080:	3101      	adds	r1, #1
 8015082:	4622      	mov	r2, r4
 8015084:	4633      	mov	r3, r6
 8015086:	f7fd fd39 	bl	8012afc <GUI_FillRect>
 801508a:	9b01      	ldr	r3, [sp, #4]
 801508c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801508e:	f002 0020 	and.w	r0, r2, #32
 8015092:	b281      	uxth	r1, r0
 8015094:	b141      	cbz	r1, 80150a8 <_Paint+0x108>
 8015096:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 801509a:	18fb      	adds	r3, r7, r3
 801509c:	2000      	movs	r0, #0
 801509e:	4639      	mov	r1, r7
 80150a0:	4622      	mov	r2, r4
 80150a2:	3b01      	subs	r3, #1
 80150a4:	f7fd fd2a 	bl	8012afc <GUI_FillRect>
 80150a8:	2d01      	cmp	r5, #1
 80150aa:	dd01      	ble.n	80150b0 <_Paint+0x110>
 80150ac:	f003 fa96 	bl	80185dc <WIDGET_EFFECT_3D_DrawUp>
 80150b0:	f7f9 fd08 	bl	800eac4 <WM__GetNextIVR>
 80150b4:	2800      	cmp	r0, #0
 80150b6:	d1b8      	bne.n	801502a <_Paint+0x8a>
 80150b8:	e7ae      	b.n	8015018 <_Paint+0x78>
 80150ba:	bf00      	nop
 80150bc:	00aaaaaa 	.word	0x00aaaaaa

080150c0 <FRAMEWIN_OwnerDraw>:
 80150c0:	b530      	push	{r4, r5, lr}
 80150c2:	4604      	mov	r4, r0
 80150c4:	b089      	sub	sp, #36	; 0x24
 80150c6:	6800      	ldr	r0, [r0, #0]
 80150c8:	f7fe ff16 	bl	8013ef8 <GUI_ALLOC_LockH>
 80150cc:	f8b0 507c 	ldrh.w	r5, [r0, #124]	; 0x7c
 80150d0:	9000      	str	r0, [sp, #0]
 80150d2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80150d4:	6a24      	ldr	r4, [r4, #32]
 80150d6:	f3c5 05c0 	ubfx	r5, r5, #3, #1
 80150da:	b108      	cbz	r0, 80150e0 <FRAMEWIN_OwnerDraw+0x20>
 80150dc:	f7fe ff0c 	bl	8013ef8 <GUI_ALLOC_LockH>
 80150e0:	4622      	mov	r2, r4
 80150e2:	9001      	str	r0, [sp, #4]
 80150e4:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80150e8:	6851      	ldr	r1, [r2, #4]
 80150ea:	8922      	ldrh	r2, [r4, #8]
 80150ec:	ab06      	add	r3, sp, #24
 80150ee:	c303      	stmia	r3!, {r0, r1}
 80150f0:	88a0      	ldrh	r0, [r4, #4]
 80150f2:	89e3      	ldrh	r3, [r4, #14]
 80150f4:	1e41      	subs	r1, r0, #1
 80150f6:	1c50      	adds	r0, r2, #1
 80150f8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80150fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015100:	8a61      	ldrh	r1, [r4, #18]
 8015102:	f8ad 000c 	strh.w	r0, [sp, #12]
 8015106:	1c50      	adds	r0, r2, #1
 8015108:	f8ad 100e 	strh.w	r1, [sp, #14]
 801510c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8015110:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015114:	9800      	ldr	r0, [sp, #0]
 8015116:	f8ad 300a 	strh.w	r3, [sp, #10]
 801511a:	1e4a      	subs	r2, r1, #1
 801511c:	3301      	adds	r3, #1
 801511e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015120:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015124:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015128:	f7fd faf2 	bl	8012710 <GUI_SetFont>
 801512c:	9b00      	ldr	r3, [sp, #0]
 801512e:	9801      	ldr	r0, [sp, #4]
 8015130:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8015134:	a906      	add	r1, sp, #24
 8015136:	aa04      	add	r2, sp, #16
 8015138:	f002 ff21 	bl	8017f7e <GUI__CalcTextRect>
 801513c:	9a00      	ldr	r2, [sp, #0]
 801513e:	f105 010c 	add.w	r1, r5, #12
 8015142:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8015146:	350e      	adds	r5, #14
 8015148:	6880      	ldr	r0, [r0, #8]
 801514a:	f7fc fd3d 	bl	8011bc8 <LCD_SetBkColor>
 801514e:	9b00      	ldr	r3, [sp, #0]
 8015150:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8015154:	6888      	ldr	r0, [r1, #8]
 8015156:	f7fc fd3f 	bl	8011bd8 <LCD_SetColor>
 801515a:	aa06      	add	r2, sp, #24
 801515c:	9801      	ldr	r0, [sp, #4]
 801515e:	a902      	add	r1, sp, #8
 8015160:	ab04      	add	r3, sp, #16
 8015162:	f003 f921 	bl	80183a8 <WIDGET__FillStringInRect>
 8015166:	4668      	mov	r0, sp
 8015168:	f7fe fed4 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801516c:	9a01      	ldr	r2, [sp, #4]
 801516e:	b112      	cbz	r2, 8015176 <FRAMEWIN_OwnerDraw+0xb6>
 8015170:	a801      	add	r0, sp, #4
 8015172:	f7fe fecf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015176:	2000      	movs	r0, #0
 8015178:	b009      	add	sp, #36	; 0x24
 801517a:	bd30      	pop	{r4, r5, pc}

0801517c <FRAMEWIN_SetOwnerDraw>:
 801517c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801517e:	460c      	mov	r4, r1
 8015180:	4605      	mov	r5, r0
 8015182:	b158      	cbz	r0, 801519c <FRAMEWIN_SetOwnerDraw+0x20>
 8015184:	f7fe feb8 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015188:	4602      	mov	r2, r0
 801518a:	a802      	add	r0, sp, #8
 801518c:	6614      	str	r4, [r2, #96]	; 0x60
 801518e:	f840 2d04 	str.w	r2, [r0, #-4]!
 8015192:	f7fe febf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015196:	4628      	mov	r0, r5
 8015198:	f7f9 fb14 	bl	800e7c4 <WM_InvalidateWindow>
 801519c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0801519e <_Create>:
 801519e:	4770      	bx	lr

080151a0 <_GetButtonSize>:
 80151a0:	b508      	push	{r3, lr}
 80151a2:	f7ff fbff 	bl	80149a4 <WIDGET_GetDefaultEffect>
 80151a6:	4b03      	ldr	r3, [pc, #12]	; (80151b4 <_GetButtonSize+0x14>)
 80151a8:	6800      	ldr	r0, [r0, #0]
 80151aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80151ac:	880a      	ldrh	r2, [r1, #0]
 80151ae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80151b2:	bd08      	pop	{r3, pc}
 80151b4:	200001e4 	.word	0x200001e4

080151b8 <_Paint>:
 80151b8:	b570      	push	{r4, r5, r6, lr}
 80151ba:	b088      	sub	sp, #32
 80151bc:	2300      	movs	r3, #0
 80151be:	4604      	mov	r4, r0
 80151c0:	9302      	str	r3, [sp, #8]
 80151c2:	9303      	str	r3, [sp, #12]
 80151c4:	f7fe fe98 	bl	8013ef8 <GUI_ALLOC_LockH>
 80151c8:	9000      	str	r0, [sp, #0]
 80151ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80151cc:	6805      	ldr	r5, [r0, #0]
 80151ce:	4620      	mov	r0, r4
 80151d0:	f7f8 f98c 	bl	800d4ec <WM__IsEnabled>
 80151d4:	4606      	mov	r6, r0
 80151d6:	4620      	mov	r0, r4
 80151d8:	f7f8 fa18 	bl	800d60c <WM_GetHasTrans>
 80151dc:	b960      	cbnz	r0, 80151f8 <_Paint+0x40>
 80151de:	9900      	ldr	r1, [sp, #0]
 80151e0:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80151e2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80151e6:	4290      	cmp	r0, r2
 80151e8:	d102      	bne.n	80151f0 <_Paint+0x38>
 80151ea:	4620      	mov	r0, r4
 80151ec:	f7ff fa51 	bl	8014692 <WIDGET__GetBkColor>
 80151f0:	f7fc fcea 	bl	8011bc8 <LCD_SetBkColor>
 80151f4:	f7fe fa6e 	bl	80136d4 <GUI_Clear>
 80151f8:	9b00      	ldr	r3, [sp, #0]
 80151fa:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80151fc:	8802      	ldrh	r2, [r0, #0]
 80151fe:	8840      	ldrh	r0, [r0, #2]
 8015200:	0069      	lsls	r1, r5, #1
 8015202:	b28b      	uxth	r3, r1
 8015204:	1e51      	subs	r1, r2, #1
 8015206:	185a      	adds	r2, r3, r1
 8015208:	1e41      	subs	r1, r0, #1
 801520a:	185b      	adds	r3, r3, r1
 801520c:	a802      	add	r0, sp, #8
 801520e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015212:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015216:	f7f8 f9cf 	bl	800d5b8 <WM_SetUserClipRect>
 801521a:	9a00      	ldr	r2, [sp, #0]
 801521c:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8015220:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015222:	f7fc fcd1 	bl	8011bc8 <LCD_SetBkColor>
 8015226:	f7fe fa55 	bl	80136d4 <GUI_Clear>
 801522a:	9900      	ldr	r1, [sp, #0]
 801522c:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
 8015230:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8015234:	eb01 0286 	add.w	r2, r1, r6, lsl #2
 8015238:	6d96      	ldr	r6, [r2, #88]	; 0x58
 801523a:	b15e      	cbz	r6, 8015254 <_Paint+0x9c>
 801523c:	4668      	mov	r0, sp
 801523e:	f7fe fe69 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015242:	4630      	mov	r0, r6
 8015244:	4629      	mov	r1, r5
 8015246:	462a      	mov	r2, r5
 8015248:	f7fd feb4 	bl	8012fb4 <GUI_DrawBitmap>
 801524c:	4620      	mov	r0, r4
 801524e:	f7fe fe53 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015252:	9000      	str	r0, [sp, #0]
 8015254:	a902      	add	r1, sp, #8
 8015256:	9800      	ldr	r0, [sp, #0]
 8015258:	f7ff fb6f 	bl	801493a <WIDGET__EFFECT_DrawDownRect>
 801525c:	2000      	movs	r0, #0
 801525e:	f7f8 f9ab 	bl	800d5b8 <WM_SetUserClipRect>
 8015262:	9800      	ldr	r0, [sp, #0]
 8015264:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8015266:	2900      	cmp	r1, #0
 8015268:	f000 8082 	beq.w	8015370 <_Paint+0x1b8>
 801526c:	ac04      	add	r4, sp, #16
 801526e:	4620      	mov	r0, r4
 8015270:	f7f8 fdb8 	bl	800dde4 <WM_GetClientRect>
 8015274:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015278:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801527c:	18d0      	adds	r0, r2, r3
 801527e:	9b00      	ldr	r3, [sp, #0]
 8015280:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8015284:	1c41      	adds	r1, r0, #1
 8015286:	1888      	adds	r0, r1, r2
 8015288:	f8ad 0010 	strh.w	r0, [sp, #16]
 801528c:	2002      	movs	r0, #2
 801528e:	f7fd fa35 	bl	80126fc <GUI_SetTextMode>
 8015292:	9900      	ldr	r1, [sp, #0]
 8015294:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8015296:	f7fc fc9f 	bl	8011bd8 <LCD_SetColor>
 801529a:	9b00      	ldr	r3, [sp, #0]
 801529c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801529e:	f7fd fa37 	bl	8012710 <GUI_SetFont>
 80152a2:	9a00      	ldr	r2, [sp, #0]
 80152a4:	6f90      	ldr	r0, [r2, #120]	; 0x78
 80152a6:	f7fe fe27 	bl	8013ef8 <GUI_ALLOC_LockH>
 80152aa:	9b00      	ldr	r3, [sp, #0]
 80152ac:	9001      	str	r0, [sp, #4]
 80152ae:	4621      	mov	r1, r4
 80152b0:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 80152b4:	f7fe f817 	bl	80132e6 <GUI_DispStringInRect>
 80152b8:	9800      	ldr	r0, [sp, #0]
 80152ba:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 80152bc:	07cb      	lsls	r3, r1, #31
 80152be:	d554      	bpl.n	801536a <_Paint+0x1b2>
 80152c0:	9801      	ldr	r0, [sp, #4]
 80152c2:	f7fd fbf1 	bl	8012aa8 <GUI_GetStringDistX>
 80152c6:	4605      	mov	r5, r0
 80152c8:	f7fd fc06 	bl	8012ad8 <GUI_GetFontSizeY>
 80152cc:	4603      	mov	r3, r0
 80152ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80152d2:	aa08      	add	r2, sp, #32
 80152d4:	e902 0003 	stmdb	r2, {r0, r1}
 80152d8:	9900      	ldr	r1, [sp, #0]
 80152da:	f8b1 2054 	ldrh.w	r2, [r1, #84]	; 0x54
 80152de:	f022 0003 	bic.w	r0, r2, #3
 80152e2:	b200      	sxth	r0, r0
 80152e4:	2804      	cmp	r0, #4
 80152e6:	d009      	beq.n	80152fc <_Paint+0x144>
 80152e8:	280c      	cmp	r0, #12
 80152ea:	d10c      	bne.n	8015306 <_Paint+0x14e>
 80152ec:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 80152f0:	1ae0      	subs	r0, r4, r3
 80152f2:	3001      	adds	r0, #1
 80152f4:	2402      	movs	r4, #2
 80152f6:	fb90 f0f4 	sdiv	r0, r0, r4
 80152fa:	e002      	b.n	8015302 <_Paint+0x14a>
 80152fc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8015300:	1ac0      	subs	r0, r0, r3
 8015302:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015306:	f022 020c 	bic.w	r2, r2, #12
 801530a:	b212      	sxth	r2, r2
 801530c:	2a01      	cmp	r2, #1
 801530e:	d00d      	beq.n	801532c <_Paint+0x174>
 8015310:	2a02      	cmp	r2, #2
 8015312:	d116      	bne.n	8015342 <_Paint+0x18a>
 8015314:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8015318:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801531c:	1a20      	subs	r0, r4, r0
 801531e:	1b40      	subs	r0, r0, r5
 8015320:	fb90 f2f2 	sdiv	r2, r0, r2
 8015324:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8015328:	1810      	adds	r0, r2, r0
 801532a:	e008      	b.n	801533e <_Paint+0x186>
 801532c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8015330:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8015334:	1882      	adds	r2, r0, r2
 8015336:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801533a:	1a12      	subs	r2, r2, r0
 801533c:	1b50      	subs	r0, r2, r5
 801533e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8015342:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8015346:	1e50      	subs	r0, r2, #1
 8015348:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801534c:	1945      	adds	r5, r0, r5
 801534e:	1e50      	subs	r0, r2, #1
 8015350:	18c3      	adds	r3, r0, r3
 8015352:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8015354:	f8ad 501c 	strh.w	r5, [sp, #28]
 8015358:	f8ad 301e 	strh.w	r3, [sp, #30]
 801535c:	f7fc fc3c 	bl	8011bd8 <LCD_SetColor>
 8015360:	a806      	add	r0, sp, #24
 8015362:	f04f 31ff 	mov.w	r1, #4294967295
 8015366:	f002 fed1 	bl	801810c <GUI_DrawFocusRect>
 801536a:	a801      	add	r0, sp, #4
 801536c:	f7fe fdd2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015370:	4668      	mov	r0, sp
 8015372:	f7fe fdcf 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015376:	b008      	add	sp, #32
 8015378:	bd70      	pop	{r4, r5, r6, pc}

0801537a <_Create>:
 801537a:	4770      	bx	lr

0801537c <_Paint>:
 801537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015380:	b088      	sub	sp, #32
 8015382:	4604      	mov	r4, r0
 8015384:	f7fe fdb8 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015388:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
 801538c:	9000      	str	r0, [sp, #0]
 801538e:	4620      	mov	r0, r4
 8015390:	f7f8 f8ac 	bl	800d4ec <WM__IsEnabled>
 8015394:	9b00      	ldr	r3, [sp, #0]
 8015396:	f3c8 2500 	ubfx	r5, r8, #8, #1
 801539a:	af02      	add	r7, sp, #8
 801539c:	2800      	cmp	r0, #0
 801539e:	bf14      	ite	ne
 80153a0:	462e      	movne	r6, r5
 80153a2:	2602      	moveq	r6, #2
 80153a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80153a6:	f7fd f9b3 	bl	8012710 <GUI_SetFont>
 80153aa:	4638      	mov	r0, r7
 80153ac:	f7fd fb96 	bl	8012adc <GUI_GetClientRect>
 80153b0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80153b4:	aa04      	add	r2, sp, #16
 80153b6:	e882 0003 	stmia.w	r2, {r0, r1}
 80153ba:	9800      	ldr	r0, [sp, #0]
 80153bc:	b91d      	cbnz	r5, 80153c6 <_Paint+0x4a>
 80153be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80153c0:	6850      	ldr	r0, [r2, #4]
 80153c2:	4780      	blx	r0
 80153c4:	e003      	b.n	80153ce <_Paint+0x52>
 80153c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80153c8:	694b      	ldr	r3, [r1, #20]
 80153ca:	b123      	cbz	r3, 80153d6 <_Paint+0x5a>
 80153cc:	4798      	blx	r3
 80153ce:	9900      	ldr	r1, [sp, #0]
 80153d0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	e00d      	b.n	80153f2 <_Paint+0x76>
 80153d6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80153d8:	f7fc fbfe 	bl	8011bd8 <LCD_SetColor>
 80153dc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80153e0:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 80153e4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80153e8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80153ec:	f7ff f828 	bl	8014440 <GUI_DrawRect>
 80153f0:	2201      	movs	r2, #1
 80153f2:	a804      	add	r0, sp, #16
 80153f4:	4601      	mov	r1, r0
 80153f6:	f7fc fc91 	bl	8011d1c <GUI__ReduceRect>
 80153fa:	9a00      	ldr	r2, [sp, #0]
 80153fc:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8015400:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015402:	f7fc fbe1 	bl	8011bc8 <LCD_SetBkColor>
 8015406:	9900      	ldr	r1, [sp, #0]
 8015408:	eb01 0386 	add.w	r3, r1, r6, lsl #2
 801540c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801540e:	f7fc fbe3 	bl	8011bd8 <LCD_SetColor>
 8015412:	a804      	add	r0, sp, #16
 8015414:	f7f8 f8d0 	bl	800d5b8 <WM_SetUserClipRect>
 8015418:	f7fe f95c 	bl	80136d4 <GUI_Clear>
 801541c:	2e02      	cmp	r6, #2
 801541e:	9e00      	ldr	r6, [sp, #0]
 8015420:	d005      	beq.n	801542e <_Paint+0xb2>
 8015422:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8015424:	2800      	cmp	r0, #0
 8015426:	bf14      	ite	ne
 8015428:	462b      	movne	r3, r5
 801542a:	2300      	moveq	r3, #0
 801542c:	e004      	b.n	8015438 <_Paint+0xbc>
 801542e:	6f72      	ldr	r2, [r6, #116]	; 0x74
 8015430:	2a00      	cmp	r2, #0
 8015432:	bf14      	ite	ne
 8015434:	2302      	movne	r3, #2
 8015436:	2300      	moveq	r3, #0
 8015438:	ae08      	add	r6, sp, #32
 801543a:	4668      	mov	r0, sp
 801543c:	f856 1d20 	ldr.w	r1, [r6, #-32]!
 8015440:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8015444:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8015446:	f7fe fd65 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801544a:	2200      	movs	r2, #0
 801544c:	4613      	mov	r3, r2
 801544e:	4630      	mov	r0, r6
 8015450:	4621      	mov	r1, r4
 8015452:	f7ff fd06 	bl	8014e62 <GUI_DRAW__Draw>
 8015456:	4620      	mov	r0, r4
 8015458:	f7fe fd4e 	bl	8013ef8 <GUI_ALLOC_LockH>
 801545c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801545e:	9000      	str	r0, [sp, #0]
 8015460:	b31b      	cbz	r3, 80154aa <_Paint+0x12e>
 8015462:	a804      	add	r0, sp, #16
 8015464:	c803      	ldmia	r0, {r0, r1}
 8015466:	ac06      	add	r4, sp, #24
 8015468:	e884 0003 	stmia.w	r4, {r0, r1}
 801546c:	b125      	cbz	r5, 8015478 <_Paint+0xfc>
 801546e:	2101      	movs	r1, #1
 8015470:	4620      	mov	r0, r4
 8015472:	460a      	mov	r2, r1
 8015474:	f7fd fad0 	bl	8012a18 <GUI_MoveRect>
 8015478:	9a00      	ldr	r2, [sp, #0]
 801547a:	4620      	mov	r0, r4
 801547c:	f9b2 105e 	ldrsh.w	r1, [r2, #94]	; 0x5e
 8015480:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 8015484:	f7fd fac8 	bl	8012a18 <GUI_MoveRect>
 8015488:	2002      	movs	r0, #2
 801548a:	f7fd f937 	bl	80126fc <GUI_SetTextMode>
 801548e:	9900      	ldr	r1, [sp, #0]
 8015490:	6e88      	ldr	r0, [r1, #104]	; 0x68
 8015492:	f7fe fd31 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015496:	9b00      	ldr	r3, [sp, #0]
 8015498:	9001      	str	r0, [sp, #4]
 801549a:	4621      	mov	r1, r4
 801549c:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 80154a0:	f7fd ff21 	bl	80132e6 <GUI_DispStringInRect>
 80154a4:	a801      	add	r0, sp, #4
 80154a6:	f7fe fd35 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80154aa:	f018 0f01 	tst.w	r8, #1
 80154ae:	d00c      	beq.n	80154ca <_Paint+0x14e>
 80154b0:	9800      	ldr	r0, [sp, #0]
 80154b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80154b4:	f7fc fb90 	bl	8011bd8 <LCD_SetColor>
 80154b8:	9a00      	ldr	r2, [sp, #0]
 80154ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80154bc:	6809      	ldr	r1, [r1, #0]
 80154be:	a802      	add	r0, sp, #8
 80154c0:	2902      	cmp	r1, #2
 80154c2:	bfb8      	it	lt
 80154c4:	2102      	movlt	r1, #2
 80154c6:	f002 fe21 	bl	801810c <GUI_DrawFocusRect>
 80154ca:	2000      	movs	r0, #0
 80154cc:	f7f8 f874 	bl	800d5b8 <WM_SetUserClipRect>
 80154d0:	4668      	mov	r0, sp
 80154d2:	f7fe fd1f 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80154d6:	b008      	add	sp, #32
 80154d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154dc <WM__UpdateChildPositions>:
 80154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e0:	b089      	sub	sp, #36	; 0x24
 80154e2:	69c4      	ldr	r4, [r0, #28]
 80154e4:	9303      	str	r3, [sp, #12]
 80154e6:	468a      	mov	sl, r1
 80154e8:	4693      	mov	fp, r2
 80154ea:	2c00      	cmp	r4, #0
 80154ec:	d075      	beq.n	80155da <WM__UpdateChildPositions+0xfe>
 80154ee:	4620      	mov	r0, r4
 80154f0:	f7fe fd02 	bl	8013ef8 <GUI_ALLOC_LockH>
 80154f4:	4603      	mov	r3, r0
 80154f6:	9005      	str	r0, [sp, #20]
 80154f8:	c803      	ldmia	r0, {r0, r1}
 80154fa:	aa08      	add	r2, sp, #32
 80154fc:	e902 0003 	stmdb	r2, {r0, r1}
 8015500:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8015502:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8015506:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801550a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801550e:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 8015512:	f401 7020 	and.w	r0, r1, #640	; 0x280
 8015516:	2880      	cmp	r0, #128	; 0x80
 8015518:	d009      	beq.n	801552e <WM__UpdateChildPositions+0x52>
 801551a:	f5b0 7f20 	cmp.w	r0, #640	; 0x280
 801551e:	d109      	bne.n	8015534 <WM__UpdateChildPositions+0x58>
 8015520:	9b03      	ldr	r3, [sp, #12]
 8015522:	eb0a 0908 	add.w	r9, sl, r8
 8015526:	fa1f fe89 	uxth.w	lr, r9
 801552a:	199f      	adds	r7, r3, r6
 801552c:	e009      	b.n	8015542 <WM__UpdateChildPositions+0x66>
 801552e:	9803      	ldr	r0, [sp, #12]
 8015530:	b287      	uxth	r7, r0
 8015532:	e001      	b.n	8015538 <WM__UpdateChildPositions+0x5c>
 8015534:	fa1f f78a 	uxth.w	r7, sl
 8015538:	eb07 0c08 	add.w	ip, r7, r8
 801553c:	fa1f fe8c 	uxth.w	lr, ip
 8015540:	19bf      	adds	r7, r7, r6
 8015542:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8015546:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801554a:	b2bb      	uxth	r3, r7
 801554c:	d009      	beq.n	8015562 <WM__UpdateChildPositions+0x86>
 801554e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8015552:	d109      	bne.n	8015568 <WM__UpdateChildPositions+0x8c>
 8015554:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015556:	eb0b 0902 	add.w	r9, fp, r2
 801555a:	fa1f f189 	uxth.w	r1, r9
 801555e:	1978      	adds	r0, r7, r5
 8015560:	e009      	b.n	8015576 <WM__UpdateChildPositions+0x9a>
 8015562:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015564:	b288      	uxth	r0, r1
 8015566:	e001      	b.n	801556c <WM__UpdateChildPositions+0x90>
 8015568:	fa1f f08b 	uxth.w	r0, fp
 801556c:	eb00 0c02 	add.w	ip, r0, r2
 8015570:	fa1f f18c 	uxth.w	r1, ip
 8015574:	1940      	adds	r0, r0, r5
 8015576:	fa0f f98e 	sxth.w	r9, lr
 801557a:	fa0f f888 	sxth.w	r8, r8
 801557e:	fa0f fc81 	sxth.w	ip, r1
 8015582:	b212      	sxth	r2, r2
 8015584:	ebb9 0108 	subs.w	r1, r9, r8
 8015588:	9202      	str	r2, [sp, #8]
 801558a:	b287      	uxth	r7, r0
 801558c:	ebc2 020c 	rsb	r2, r2, ip
 8015590:	d100      	bne.n	8015594 <WM__UpdateChildPositions+0xb8>
 8015592:	b132      	cbz	r2, 80155a2 <WM__UpdateChildPositions+0xc6>
 8015594:	4620      	mov	r0, r4
 8015596:	e88d 1008 	stmia.w	sp, {r3, ip}
 801559a:	f7f8 fb12 	bl	800dbc2 <WM_MoveWindow>
 801559e:	e89d 1008 	ldmia.w	sp, {r3, ip}
 80155a2:	9902      	ldr	r1, [sp, #8]
 80155a4:	b21b      	sxth	r3, r3
 80155a6:	b236      	sxth	r6, r6
 80155a8:	ebc9 0903 	rsb	r9, r9, r3
 80155ac:	ebc6 0808 	rsb	r8, r6, r8
 80155b0:	b23f      	sxth	r7, r7
 80155b2:	b22d      	sxth	r5, r5
 80155b4:	1b4d      	subs	r5, r1, r5
 80155b6:	ebcc 0e07 	rsb	lr, ip, r7
 80155ba:	eb19 0108 	adds.w	r1, r9, r8
 80155be:	eb0e 0205 	add.w	r2, lr, r5
 80155c2:	d100      	bne.n	80155c6 <WM__UpdateChildPositions+0xea>
 80155c4:	b112      	cbz	r2, 80155cc <WM__UpdateChildPositions+0xf0>
 80155c6:	4620      	mov	r0, r4
 80155c8:	f7f8 f9c5 	bl	800d956 <WM_ResizeWindow>
 80155cc:	a808      	add	r0, sp, #32
 80155ce:	f850 4d0c 	ldr.w	r4, [r0, #-12]!
 80155d2:	6a24      	ldr	r4, [r4, #32]
 80155d4:	f7fe fc9e 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80155d8:	e787      	b.n	80154ea <WM__UpdateChildPositions+0xe>
 80155da:	b009      	add	sp, #36	; 0x24
 80155dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155e0 <WM__SendMessageNoPara>:
 80155e0:	b530      	push	{r4, r5, lr}
 80155e2:	b085      	sub	sp, #20
 80155e4:	4604      	mov	r4, r0
 80155e6:	2210      	movs	r2, #16
 80155e8:	460d      	mov	r5, r1
 80155ea:	4668      	mov	r0, sp
 80155ec:	2100      	movs	r1, #0
 80155ee:	f004 f801 	bl	80195f4 <memset>
 80155f2:	4620      	mov	r0, r4
 80155f4:	f7fe fc76 	bl	8013ee4 <GUI_ALLOC_h2p>
 80155f8:	6903      	ldr	r3, [r0, #16]
 80155fa:	b11b      	cbz	r3, 8015604 <WM__SendMessageNoPara+0x24>
 80155fc:	9401      	str	r4, [sp, #4]
 80155fe:	9500      	str	r5, [sp, #0]
 8015600:	4668      	mov	r0, sp
 8015602:	4798      	blx	r3
 8015604:	b005      	add	sp, #20
 8015606:	bd30      	pop	{r4, r5, pc}

08015608 <WM__Screen2Client>:
 8015608:	f9b0 3000 	ldrsh.w	r3, [r0]
 801560c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015610:	4608      	mov	r0, r1
 8015612:	4252      	negs	r2, r2
 8015614:	4259      	negs	r1, r3
 8015616:	f7fd b9ff 	b.w	8012a18 <GUI_MoveRect>

0801561a <WM__GetPrevSibling>:
 801561a:	b538      	push	{r3, r4, r5, lr}
 801561c:	4605      	mov	r5, r0
 801561e:	f000 f82d 	bl	801567c <WM__GetFirstSibling>
 8015622:	4604      	mov	r4, r0
 8015624:	b154      	cbz	r4, 801563c <WM__GetPrevSibling+0x22>
 8015626:	42ac      	cmp	r4, r5
 8015628:	d007      	beq.n	801563a <WM__GetPrevSibling+0x20>
 801562a:	4620      	mov	r0, r4
 801562c:	f7fe fc5a 	bl	8013ee4 <GUI_ALLOC_h2p>
 8015630:	6a03      	ldr	r3, [r0, #32]
 8015632:	42ab      	cmp	r3, r5
 8015634:	d002      	beq.n	801563c <WM__GetPrevSibling+0x22>
 8015636:	461c      	mov	r4, r3
 8015638:	e7f4      	b.n	8015624 <WM__GetPrevSibling+0xa>
 801563a:	2400      	movs	r4, #0
 801563c:	4620      	mov	r0, r4
 801563e:	bd38      	pop	{r3, r4, r5, pc}

08015640 <WM__GetLastSibling>:
 8015640:	b510      	push	{r4, lr}
 8015642:	4604      	mov	r4, r0
 8015644:	b130      	cbz	r0, 8015654 <WM__GetLastSibling+0x14>
 8015646:	4620      	mov	r0, r4
 8015648:	f7fe fc4c 	bl	8013ee4 <GUI_ALLOC_h2p>
 801564c:	6a03      	ldr	r3, [r0, #32]
 801564e:	b10b      	cbz	r3, 8015654 <WM__GetLastSibling+0x14>
 8015650:	461c      	mov	r4, r3
 8015652:	e7f8      	b.n	8015646 <WM__GetLastSibling+0x6>
 8015654:	4620      	mov	r0, r4
 8015656:	bd10      	pop	{r4, pc}

08015658 <WM__GetFocussedChild>:
 8015658:	b538      	push	{r3, r4, r5, lr}
 801565a:	4d06      	ldr	r5, [pc, #24]	; (8015674 <WM__GetFocussedChild+0x1c>)
 801565c:	4c06      	ldr	r4, [pc, #24]	; (8015678 <WM__GetFocussedChild+0x20>)
 801565e:	682b      	ldr	r3, [r5, #0]
 8015660:	4601      	mov	r1, r0
 8015662:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8015666:	f002 ffce 	bl	8018606 <WM__IsChild>
 801566a:	b110      	cbz	r0, 8015672 <WM__GetFocussedChild+0x1a>
 801566c:	6828      	ldr	r0, [r5, #0]
 801566e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015672:	bd38      	pop	{r3, r4, r5, pc}
 8015674:	2000eb0c 	.word	0x2000eb0c
 8015678:	2000eafc 	.word	0x2000eafc

0801567c <WM__GetFirstSibling>:
 801567c:	b508      	push	{r3, lr}
 801567e:	f7f8 fb30 	bl	800dce2 <WM_GetParent>
 8015682:	b118      	cbz	r0, 801568c <WM__GetFirstSibling+0x10>
 8015684:	f7fe fc2e 	bl	8013ee4 <GUI_ALLOC_h2p>
 8015688:	69c0      	ldr	r0, [r0, #28]
 801568a:	bd08      	pop	{r3, pc}
 801568c:	bd08      	pop	{r3, pc}
	...

08015690 <WM_ValidateWindow>:
 8015690:	b507      	push	{r0, r1, r2, lr}
 8015692:	b178      	cbz	r0, 80156b4 <WM_ValidateWindow+0x24>
 8015694:	f7fe fc30 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015698:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801569a:	9001      	str	r0, [sp, #4]
 801569c:	069a      	lsls	r2, r3, #26
 801569e:	d506      	bpl.n	80156ae <WM_ValidateWindow+0x1e>
 80156a0:	f023 0120 	bic.w	r1, r3, #32
 80156a4:	6281      	str	r1, [r0, #40]	; 0x28
 80156a6:	4804      	ldr	r0, [pc, #16]	; (80156b8 <WM_ValidateWindow+0x28>)
 80156a8:	8802      	ldrh	r2, [r0, #0]
 80156aa:	1e53      	subs	r3, r2, #1
 80156ac:	8003      	strh	r3, [r0, #0]
 80156ae:	a801      	add	r0, sp, #4
 80156b0:	f7fe fc30 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80156b4:	bd0e      	pop	{r1, r2, r3, pc}
 80156b6:	bf00      	nop
 80156b8:	2000eb04 	.word	0x2000eb04

080156bc <WM__IsInModalArea>:
 80156bc:	4b12      	ldr	r3, [pc, #72]	; (8015708 <WM__IsInModalArea+0x4c>)
 80156be:	6819      	ldr	r1, [r3, #0]
 80156c0:	2900      	cmp	r1, #0
 80156c2:	b570      	push	{r4, r5, r6, lr}
 80156c4:	4604      	mov	r4, r0
 80156c6:	da0f      	bge.n	80156e8 <WM__IsInModalArea+0x2c>
 80156c8:	4e10      	ldr	r6, [pc, #64]	; (801570c <WM__IsInModalArea+0x50>)
 80156ca:	4d11      	ldr	r5, [pc, #68]	; (8015710 <WM__IsInModalArea+0x54>)
 80156cc:	6830      	ldr	r0, [r6, #0]
 80156ce:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
 80156d2:	4620      	mov	r0, r4
 80156d4:	6859      	ldr	r1, [r3, #4]
 80156d6:	f7f7 ff12 	bl	800d4fe <WM__IsAncestor>
 80156da:	6831      	ldr	r1, [r6, #0]
 80156dc:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 80156e0:	686a      	ldr	r2, [r5, #4]
 80156e2:	686b      	ldr	r3, [r5, #4]
 80156e4:	b942      	cbnz	r2, 80156f8 <WM__IsInModalArea+0x3c>
 80156e6:	e00c      	b.n	8015702 <WM__IsInModalArea+0x46>
 80156e8:	4a0a      	ldr	r2, [pc, #40]	; (8015714 <WM__IsInModalArea+0x58>)
 80156ea:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80156ee:	f7f7 ff06 	bl	800d4fe <WM__IsAncestor>
 80156f2:	2800      	cmp	r0, #0
 80156f4:	d1e8      	bne.n	80156c8 <WM__IsInModalArea+0xc>
 80156f6:	bd70      	pop	{r4, r5, r6, pc}
 80156f8:	b918      	cbnz	r0, 8015702 <WM__IsInModalArea+0x46>
 80156fa:	1ae1      	subs	r1, r4, r3
 80156fc:	4248      	negs	r0, r1
 80156fe:	4148      	adcs	r0, r1
 8015700:	bd70      	pop	{r4, r5, r6, pc}
 8015702:	2001      	movs	r0, #1
 8015704:	bd70      	pop	{r4, r5, r6, pc}
 8015706:	bf00      	nop
 8015708:	20000334 	.word	0x20000334
 801570c:	2000eb0c 	.word	0x2000eb0c
 8015710:	2000ec48 	.word	0x2000ec48
 8015714:	2000eaec 	.word	0x2000eaec

08015718 <WM__SendPIDMessage>:
 8015718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801571a:	4605      	mov	r5, r0
 801571c:	460c      	mov	r4, r1
 801571e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8015720:	ae04      	add	r6, sp, #16
 8015722:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
 8015726:	230d      	movs	r3, #13
 8015728:	9502      	str	r5, [sp, #8]
 801572a:	9300      	str	r3, [sp, #0]
 801572c:	462e      	mov	r6, r5
 801572e:	4630      	mov	r0, r6
 8015730:	f7f8 fa54 	bl	800dbdc <WM_IsWindow>
 8015734:	b150      	cbz	r0, 801574c <WM__SendPIDMessage+0x34>
 8015736:	4630      	mov	r0, r6
 8015738:	f7f8 fad3 	bl	800dce2 <WM_GetParent>
 801573c:	4606      	mov	r6, r0
 801573e:	2800      	cmp	r0, #0
 8015740:	d0f5      	beq.n	801572e <WM__SendPIDMessage+0x16>
 8015742:	4669      	mov	r1, sp
 8015744:	9403      	str	r4, [sp, #12]
 8015746:	f002 ff51 	bl	80185ec <WM__SendMessageIfEnabled>
 801574a:	e7f0      	b.n	801572e <WM__SendPIDMessage+0x16>
 801574c:	4628      	mov	r0, r5
 801574e:	4621      	mov	r1, r4
 8015750:	f002 ff4c 	bl	80185ec <WM__SendMessageIfEnabled>
 8015754:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08015756 <WM__SendTouchMessage>:
 8015756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015758:	68cc      	ldr	r4, [r1, #12]
 801575a:	4606      	mov	r6, r0
 801575c:	460d      	mov	r5, r1
 801575e:	b194      	cbz	r4, 8015786 <WM__SendTouchMessage+0x30>
 8015760:	f7fe fbca 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015764:	ab02      	add	r3, sp, #8
 8015766:	4602      	mov	r2, r0
 8015768:	f843 0d04 	str.w	r0, [r3, #-4]!
 801576c:	6821      	ldr	r1, [r4, #0]
 801576e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015772:	1a08      	subs	r0, r1, r0
 8015774:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8015778:	6862      	ldr	r2, [r4, #4]
 801577a:	6020      	str	r0, [r4, #0]
 801577c:	1a50      	subs	r0, r2, r1
 801577e:	6060      	str	r0, [r4, #4]
 8015780:	4618      	mov	r0, r3
 8015782:	f7fe fbc7 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015786:	4630      	mov	r0, r6
 8015788:	4629      	mov	r1, r5
 801578a:	f7ff ffc5 	bl	8015718 <WM__SendPIDMessage>
 801578e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08015790 <WM_HandlePID>:
 8015790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015792:	240c      	movs	r4, #12
 8015794:	b097      	sub	sp, #92	; 0x5c
 8015796:	2100      	movs	r1, #0
 8015798:	4622      	mov	r2, r4
 801579a:	a806      	add	r0, sp, #24
 801579c:	f003 ff2a 	bl	80195f4 <memset>
 80157a0:	f7fd f908 	bl	80129b4 <GUI_PID_IsEmpty>
 80157a4:	b108      	cbz	r0, 80157aa <WM_HandlePID+0x1a>
 80157a6:	2400      	movs	r4, #0
 80157a8:	e19b      	b.n	8015ae2 <WM_HandlePID+0x352>
 80157aa:	a809      	add	r0, sp, #36	; 0x24
 80157ac:	f7fd f888 	bl	80128c0 <GUI_PID_GetState>
 80157b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157b2:	1c5a      	adds	r2, r3, #1
 80157b4:	d111      	bne.n	80157da <WM_HandlePID+0x4a>
 80157b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157b8:	1c43      	adds	r3, r0, #1
 80157ba:	d11d      	bne.n	80157f8 <WM_HandlePID+0x68>
 80157bc:	4b8a      	ldr	r3, [pc, #552]	; (80159e8 <WM_HandlePID+0x258>)
 80157be:	4a8b      	ldr	r2, [pc, #556]	; (80159ec <WM_HandlePID+0x25c>)
 80157c0:	6819      	ldr	r1, [r3, #0]
 80157c2:	434c      	muls	r4, r1
 80157c4:	1913      	adds	r3, r2, r4
 80157c6:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80157ca:	7a18      	ldrb	r0, [r3, #8]
 80157cc:	4288      	cmp	r0, r1
 80157ce:	d0ea      	beq.n	80157a6 <WM_HandlePID+0x16>
 80157d0:	5914      	ldr	r4, [r2, r4]
 80157d2:	685a      	ldr	r2, [r3, #4]
 80157d4:	9409      	str	r4, [sp, #36]	; 0x24
 80157d6:	920a      	str	r2, [sp, #40]	; 0x28
 80157d8:	e00e      	b.n	80157f8 <WM_HandlePID+0x68>
 80157da:	2b00      	cmp	r3, #0
 80157dc:	db0c      	blt.n	80157f8 <WM_HandlePID+0x68>
 80157de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157e0:	2a00      	cmp	r2, #0
 80157e2:	db09      	blt.n	80157f8 <WM_HandlePID+0x68>
 80157e4:	4982      	ldr	r1, [pc, #520]	; (80159f0 <WM_HandlePID+0x260>)
 80157e6:	f9b1 0000 	ldrsh.w	r0, [r1]
 80157ea:	181c      	adds	r4, r3, r0
 80157ec:	4b81      	ldr	r3, [pc, #516]	; (80159f4 <WM_HandlePID+0x264>)
 80157ee:	9409      	str	r4, [sp, #36]	; 0x24
 80157f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80157f4:	1852      	adds	r2, r2, r1
 80157f6:	920a      	str	r2, [sp, #40]	; 0x28
 80157f8:	a804      	add	r0, sp, #16
 80157fa:	f000 fa51 	bl	8015ca0 <WM__AddCriticalHandle>
 80157fe:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8015802:	4c79      	ldr	r4, [pc, #484]	; (80159e8 <WM_HandlePID+0x258>)
 8015804:	2b01      	cmp	r3, #1
 8015806:	bf98      	it	ls
 8015808:	6023      	strls	r3, [r4, #0]
 801580a:	6820      	ldr	r0, [r4, #0]
 801580c:	a901      	add	r1, sp, #4
 801580e:	aa02      	add	r2, sp, #8
 8015810:	f7fc ffca 	bl	80127a8 <GUI_GetLayerPosEx>
 8015814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015816:	9901      	ldr	r1, [sp, #4]
 8015818:	9809      	ldr	r0, [sp, #36]	; 0x24
 801581a:	9a02      	ldr	r2, [sp, #8]
 801581c:	1a40      	subs	r0, r0, r1
 801581e:	1a99      	subs	r1, r3, r2
 8015820:	6823      	ldr	r3, [r4, #0]
 8015822:	4c72      	ldr	r4, [pc, #456]	; (80159ec <WM_HandlePID+0x25c>)
 8015824:	9009      	str	r0, [sp, #36]	; 0x24
 8015826:	220c      	movs	r2, #12
 8015828:	435a      	muls	r2, r3
 801582a:	18a3      	adds	r3, r4, r2
 801582c:	58a4      	ldr	r4, [r4, r2]
 801582e:	910a      	str	r1, [sp, #40]	; 0x28
 8015830:	4284      	cmp	r4, r0
 8015832:	d108      	bne.n	8015846 <WM_HandlePID+0xb6>
 8015834:	685a      	ldr	r2, [r3, #4]
 8015836:	428a      	cmp	r2, r1
 8015838:	d105      	bne.n	8015846 <WM_HandlePID+0xb6>
 801583a:	7a1c      	ldrb	r4, [r3, #8]
 801583c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8015840:	429c      	cmp	r4, r3
 8015842:	f000 814a 	beq.w	8015ada <WM_HandlePID+0x34a>
 8015846:	4d6c      	ldr	r5, [pc, #432]	; (80159f8 <WM_HandlePID+0x268>)
 8015848:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801584c:	f002 fcb4 	bl	80181b8 <GUI_CURSOR_SetPositionEx>
 8015850:	682e      	ldr	r6, [r5, #0]
 8015852:	b116      	cbz	r6, 801585a <WM_HandlePID+0xca>
 8015854:	a809      	add	r0, sp, #36	; 0x24
 8015856:	2100      	movs	r1, #0
 8015858:	47b0      	blx	r6
 801585a:	4963      	ldr	r1, [pc, #396]	; (80159e8 <WM_HandlePID+0x258>)
 801585c:	4a67      	ldr	r2, [pc, #412]	; (80159fc <WM_HandlePID+0x26c>)
 801585e:	6808      	ldr	r0, [r1, #0]
 8015860:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8015864:	b918      	cbnz	r0, 801586e <WM_HandlePID+0xde>
 8015866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015868:	990a      	ldr	r1, [sp, #40]	; 0x28
 801586a:	f000 f9d3 	bl	8015c14 <WM_Screen2hWin>
 801586e:	4c64      	ldr	r4, [pc, #400]	; (8015a00 <WM_HandlePID+0x270>)
 8015870:	9005      	str	r0, [sp, #20]
 8015872:	6823      	ldr	r3, [r4, #0]
 8015874:	b113      	cbz	r3, 801587c <WM_HandlePID+0xec>
 8015876:	9905      	ldr	r1, [sp, #20]
 8015878:	a809      	add	r0, sp, #36	; 0x24
 801587a:	4798      	blx	r3
 801587c:	4d5a      	ldr	r5, [pc, #360]	; (80159e8 <WM_HandlePID+0x258>)
 801587e:	4c61      	ldr	r4, [pc, #388]	; (8015a04 <WM_HandlePID+0x274>)
 8015880:	682e      	ldr	r6, [r5, #0]
 8015882:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
 8015886:	6842      	ldr	r2, [r0, #4]
 8015888:	9905      	ldr	r1, [sp, #20]
 801588a:	b302      	cbz	r2, 80158ce <WM_HandlePID+0x13e>
 801588c:	428a      	cmp	r2, r1
 801588e:	d01e      	beq.n	80158ce <WM_HandlePID+0x13e>
 8015890:	6840      	ldr	r0, [r0, #4]
 8015892:	f7ff ff13 	bl	80156bc <WM__IsInModalArea>
 8015896:	b1d0      	cbz	r0, 80158ce <WM_HandlePID+0x13e>
 8015898:	682b      	ldr	r3, [r5, #0]
 801589a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 801589e:	6870      	ldr	r0, [r6, #4]
 80158a0:	f7f7 fe24 	bl	800d4ec <WM__IsEnabled>
 80158a4:	b198      	cbz	r0, 80158ce <WM_HandlePID+0x13e>
 80158a6:	a809      	add	r0, sp, #36	; 0x24
 80158a8:	c807      	ldmia	r0, {r0, r1, r2}
 80158aa:	ab06      	add	r3, sp, #24
 80158ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80158b0:	6829      	ldr	r1, [r5, #0]
 80158b2:	9315      	str	r3, [sp, #84]	; 0x54
 80158b4:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 80158b8:	2212      	movs	r2, #18
 80158ba:	6870      	ldr	r0, [r6, #4]
 80158bc:	9212      	str	r2, [sp, #72]	; 0x48
 80158be:	a912      	add	r1, sp, #72	; 0x48
 80158c0:	f7ff ff49 	bl	8015756 <WM__SendTouchMessage>
 80158c4:	682d      	ldr	r5, [r5, #0]
 80158c6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80158ca:	2300      	movs	r3, #0
 80158cc:	6063      	str	r3, [r4, #4]
 80158ce:	9805      	ldr	r0, [sp, #20]
 80158d0:	f7ff fef4 	bl	80156bc <WM__IsInModalArea>
 80158d4:	b908      	cbnz	r0, 80158da <WM_HandlePID+0x14a>
 80158d6:	2400      	movs	r4, #0
 80158d8:	e0ef      	b.n	8015aba <WM_HandlePID+0x32a>
 80158da:	4e43      	ldr	r6, [pc, #268]	; (80159e8 <WM_HandlePID+0x258>)
 80158dc:	4a49      	ldr	r2, [pc, #292]	; (8015a04 <WM_HandlePID+0x274>)
 80158de:	6830      	ldr	r0, [r6, #0]
 80158e0:	9905      	ldr	r1, [sp, #20]
 80158e2:	4c42      	ldr	r4, [pc, #264]	; (80159ec <WM_HandlePID+0x25c>)
 80158e4:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
 80158e8:	6069      	str	r1, [r5, #4]
 80158ea:	250c      	movs	r5, #12
 80158ec:	fb05 4300 	mla	r3, r5, r0, r4
 80158f0:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80158f4:	7a18      	ldrb	r0, [r3, #8]
 80158f6:	4288      	cmp	r0, r1
 80158f8:	d05a      	beq.n	80159b0 <WM_HandlePID+0x220>
 80158fa:	9a05      	ldr	r2, [sp, #20]
 80158fc:	2a00      	cmp	r2, #0
 80158fe:	d057      	beq.n	80159b0 <WM_HandlePID+0x220>
 8015900:	9805      	ldr	r0, [sp, #20]
 8015902:	f7fe faf9 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015906:	6831      	ldr	r1, [r6, #0]
 8015908:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801590c:	9003      	str	r0, [sp, #12]
 801590e:	fb05 4201 	mla	r2, r5, r1, r4
 8015912:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8015916:	7a13      	ldrb	r3, [r2, #8]
 8015918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801591a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 801591e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8015922:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8015926:	1a53      	subs	r3, r2, r1
 8015928:	990a      	ldr	r1, [sp, #40]	; 0x28
 801592a:	930f      	str	r3, [sp, #60]	; 0x3c
 801592c:	1a0a      	subs	r2, r1, r0
 801592e:	eb0d 0005 	add.w	r0, sp, r5
 8015932:	9210      	str	r2, [sp, #64]	; 0x40
 8015934:	f7fe faee 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015938:	6836      	ldr	r6, [r6, #0]
 801593a:	2011      	movs	r0, #17
 801593c:	fb05 4506 	mla	r5, r5, r6, r4
 8015940:	9012      	str	r0, [sp, #72]	; 0x48
 8015942:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015946:	ac0c      	add	r4, sp, #48	; 0x30
 8015948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801594c:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8015950:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8015954:	7229      	strb	r1, [r5, #8]
 8015956:	ab0f      	add	r3, sp, #60	; 0x3c
 8015958:	9315      	str	r3, [sp, #84]	; 0x54
 801595a:	4d2b      	ldr	r5, [pc, #172]	; (8015a08 <WM_HandlePID+0x278>)
 801595c:	b124      	cbz	r4, 8015968 <WM_HandlePID+0x1d8>
 801595e:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
 8015962:	685c      	ldr	r4, [r3, #4]
 8015964:	9a05      	ldr	r2, [sp, #20]
 8015966:	605a      	str	r2, [r3, #4]
 8015968:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
 801596c:	a912      	add	r1, sp, #72	; 0x48
 801596e:	6846      	ldr	r6, [r0, #4]
 8015970:	9805      	ldr	r0, [sp, #20]
 8015972:	f002 fe3b 	bl	80185ec <WM__SendMessageIfEnabled>
 8015976:	491c      	ldr	r1, [pc, #112]	; (80159e8 <WM_HandlePID+0x258>)
 8015978:	680a      	ldr	r2, [r1, #0]
 801597a:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801597e:	a90c      	add	r1, sp, #48	; 0x30
 8015980:	686b      	ldr	r3, [r5, #4]
 8015982:	429e      	cmp	r6, r3
 8015984:	bf18      	it	ne
 8015986:	686b      	ldrne	r3, [r5, #4]
 8015988:	4e18      	ldr	r6, [pc, #96]	; (80159ec <WM_HandlePID+0x25c>)
 801598a:	bf18      	it	ne
 801598c:	9305      	strne	r3, [sp, #20]
 801598e:	200c      	movs	r0, #12
 8015990:	fb00 6502 	mla	r5, r0, r2, r6
 8015994:	c907      	ldmia	r1, {r0, r1, r2}
 8015996:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801599a:	b14c      	cbz	r4, 80159b0 <WM_HandlePID+0x220>
 801599c:	4620      	mov	r0, r4
 801599e:	f7f8 f91d 	bl	800dbdc <WM_IsWindow>
 80159a2:	b128      	cbz	r0, 80159b0 <WM_HandlePID+0x220>
 80159a4:	4a10      	ldr	r2, [pc, #64]	; (80159e8 <WM_HandlePID+0x258>)
 80159a6:	4b18      	ldr	r3, [pc, #96]	; (8015a08 <WM_HandlePID+0x278>)
 80159a8:	6810      	ldr	r0, [r2, #0]
 80159aa:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 80159ae:	6074      	str	r4, [r6, #4]
 80159b0:	4c0d      	ldr	r4, [pc, #52]	; (80159e8 <WM_HandlePID+0x258>)
 80159b2:	4d0e      	ldr	r5, [pc, #56]	; (80159ec <WM_HandlePID+0x25c>)
 80159b4:	6822      	ldr	r2, [r4, #0]
 80159b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80159ba:	200c      	movs	r0, #12
 80159bc:	4350      	muls	r0, r2
 80159be:	1829      	adds	r1, r5, r0
 80159c0:	7a0e      	ldrb	r6, [r1, #8]
 80159c2:	ea53 0406 	orrs.w	r4, r3, r6
 80159c6:	d05f      	beq.n	8015a88 <WM_HandlePID+0x2f8>
 80159c8:	4c0f      	ldr	r4, [pc, #60]	; (8015a08 <WM_HandlePID+0x278>)
 80159ca:	eb04 06c2 	add.w	r6, r4, r2, lsl #3
 80159ce:	f44f 7710 	mov.w	r7, #576	; 0x240
 80159d2:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80159d6:	9712      	str	r7, [sp, #72]	; 0x48
 80159d8:	9f05      	ldr	r7, [sp, #20]
 80159da:	45be      	cmp	lr, r7
 80159dc:	d02a      	beq.n	8015a34 <WM_HandlePID+0x2a4>
 80159de:	6876      	ldr	r6, [r6, #4]
 80159e0:	b346      	cbz	r6, 8015a34 <WM_HandlePID+0x2a4>
 80159e2:	b19b      	cbz	r3, 8015a0c <WM_HandlePID+0x27c>
 80159e4:	2300      	movs	r3, #0
 80159e6:	e018      	b.n	8015a1a <WM_HandlePID+0x28a>
 80159e8:	2000eb0c 	.word	0x2000eb0c
 80159ec:	2000e1f0 	.word	0x2000e1f0
 80159f0:	2000eb4c 	.word	0x2000eb4c
 80159f4:	2000eb44 	.word	0x2000eb44
 80159f8:	2000e1e8 	.word	0x2000e1e8
 80159fc:	2000eb28 	.word	0x2000eb28
 8015a00:	2000e1ec 	.word	0x2000e1ec
 8015a04:	2000ec28 	.word	0x2000ec28
 8015a08:	2000ec38 	.word	0x2000ec38
 8015a0c:	582d      	ldr	r5, [r5, r0]
 8015a0e:	6849      	ldr	r1, [r1, #4]
 8015a10:	f88d 3020 	strb.w	r3, [sp, #32]
 8015a14:	9506      	str	r5, [sp, #24]
 8015a16:	9107      	str	r1, [sp, #28]
 8015a18:	ab06      	add	r3, sp, #24
 8015a1a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8015a1e:	a912      	add	r1, sp, #72	; 0x48
 8015a20:	6850      	ldr	r0, [r2, #4]
 8015a22:	9315      	str	r3, [sp, #84]	; 0x54
 8015a24:	f7ff fe97 	bl	8015756 <WM__SendTouchMessage>
 8015a28:	482f      	ldr	r0, [pc, #188]	; (8015ae8 <WM_HandlePID+0x358>)
 8015a2a:	6806      	ldr	r6, [r0, #0]
 8015a2c:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015a30:	2500      	movs	r5, #0
 8015a32:	6065      	str	r5, [r4, #4]
 8015a34:	492c      	ldr	r1, [pc, #176]	; (8015ae8 <WM_HandlePID+0x358>)
 8015a36:	4b2d      	ldr	r3, [pc, #180]	; (8015aec <WM_HandlePID+0x35c>)
 8015a38:	680c      	ldr	r4, [r1, #0]
 8015a3a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8015a3e:	9e05      	ldr	r6, [sp, #20]
 8015a40:	220c      	movs	r2, #12
 8015a42:	fb02 3004 	mla	r0, r2, r4, r3
 8015a46:	7205      	strb	r5, [r0, #8]
 8015a48:	2e00      	cmp	r6, #0
 8015a4a:	d035      	beq.n	8015ab8 <WM_HandlePID+0x328>
 8015a4c:	a909      	add	r1, sp, #36	; 0x24
 8015a4e:	c907      	ldmia	r1, {r0, r1, r2}
 8015a50:	ab06      	add	r3, sp, #24
 8015a52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015a56:	4e26      	ldr	r6, [pc, #152]	; (8015af0 <WM_HandlePID+0x360>)
 8015a58:	b125      	cbz	r5, 8015a64 <WM_HandlePID+0x2d4>
 8015a5a:	9d05      	ldr	r5, [sp, #20]
 8015a5c:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8015a60:	6075      	str	r5, [r6, #4]
 8015a62:	e00a      	b.n	8015a7a <WM_HandlePID+0x2ea>
 8015a64:	4c23      	ldr	r4, [pc, #140]	; (8015af4 <WM_HandlePID+0x364>)
 8015a66:	7825      	ldrb	r5, [r4, #0]
 8015a68:	b10d      	cbz	r5, 8015a6e <WM_HandlePID+0x2de>
 8015a6a:	f7f7 ff5b 	bl	800d924 <WM_ReleaseCapture>
 8015a6e:	4a1e      	ldr	r2, [pc, #120]	; (8015ae8 <WM_HandlePID+0x358>)
 8015a70:	6810      	ldr	r0, [r2, #0]
 8015a72:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
 8015a76:	2300      	movs	r3, #0
 8015a78:	604b      	str	r3, [r1, #4]
 8015a7a:	ac06      	add	r4, sp, #24
 8015a7c:	9805      	ldr	r0, [sp, #20]
 8015a7e:	9415      	str	r4, [sp, #84]	; 0x54
 8015a80:	a912      	add	r1, sp, #72	; 0x48
 8015a82:	f7ff fe68 	bl	8015756 <WM__SendTouchMessage>
 8015a86:	e017      	b.n	8015ab8 <WM_HandlePID+0x328>
 8015a88:	9a05      	ldr	r2, [sp, #20]
 8015a8a:	2a00      	cmp	r2, #0
 8015a8c:	f43f af23 	beq.w	80158d6 <WM_HandlePID+0x146>
 8015a90:	9805      	ldr	r0, [sp, #20]
 8015a92:	f7f7 fd2b 	bl	800d4ec <WM__IsEnabled>
 8015a96:	2800      	cmp	r0, #0
 8015a98:	f43f af1d 	beq.w	80158d6 <WM_HandlePID+0x146>
 8015a9c:	ad09      	add	r5, sp, #36	; 0x24
 8015a9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015aa2:	ab06      	add	r3, sp, #24
 8015aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015aa8:	2010      	movs	r0, #16
 8015aaa:	9012      	str	r0, [sp, #72]	; 0x48
 8015aac:	a912      	add	r1, sp, #72	; 0x48
 8015aae:	9805      	ldr	r0, [sp, #20]
 8015ab0:	9315      	str	r3, [sp, #84]	; 0x54
 8015ab2:	f7ff fe50 	bl	8015756 <WM__SendTouchMessage>
 8015ab6:	e000      	b.n	8015aba <WM_HandlePID+0x32a>
 8015ab8:	2401      	movs	r4, #1
 8015aba:	4a0b      	ldr	r2, [pc, #44]	; (8015ae8 <WM_HandlePID+0x358>)
 8015abc:	490b      	ldr	r1, [pc, #44]	; (8015aec <WM_HandlePID+0x35c>)
 8015abe:	6816      	ldr	r6, [r2, #0]
 8015ac0:	200c      	movs	r0, #12
 8015ac2:	ab09      	add	r3, sp, #36	; 0x24
 8015ac4:	fb00 1506 	mla	r5, r0, r6, r1
 8015ac8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015acc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	4631      	mov	r1, r6
 8015ad4:	f000 f8ae 	bl	8015c34 <WM_PID__SetPrevState>
 8015ad8:	e000      	b.n	8015adc <WM_HandlePID+0x34c>
 8015ada:	2400      	movs	r4, #0
 8015adc:	a804      	add	r0, sp, #16
 8015ade:	f000 f8e7 	bl	8015cb0 <WM__RemoveCriticalHandle>
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	b017      	add	sp, #92	; 0x5c
 8015ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ae8:	2000eb0c 	.word	0x2000eb0c
 8015aec:	2000e1f0 	.word	0x2000e1f0
 8015af0:	2000ec38 	.word	0x2000ec38
 8015af4:	2000eb10 	.word	0x2000eb10

08015af8 <WM_DeleteTimer>:
 8015af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015afa:	4605      	mov	r5, r0
 8015afc:	b168      	cbz	r0, 8015b1a <WM_DeleteTimer+0x22>
 8015afe:	f7fe f9fb 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015b02:	ac02      	add	r4, sp, #8
 8015b04:	f844 0d04 	str.w	r0, [r4, #-4]!
 8015b08:	6800      	ldr	r0, [r0, #0]
 8015b0a:	f7fc fd9f 	bl	801264c <GUI_TIMER_Delete>
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f7fe fa00 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015b14:	4628      	mov	r0, r5
 8015b16:	f7fe fa29 	bl	8013f6c <GUI_ALLOC_Free>
 8015b1a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08015b1c <WM__DeleteAssocTimer>:
 8015b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b1e:	4605      	mov	r5, r0
 8015b20:	a801      	add	r0, sp, #4
 8015b22:	f7fc fd63 	bl	80125ec <GUI_TIMER__GetFirstTimer>
 8015b26:	4604      	mov	r4, r0
 8015b28:	b1dc      	cbz	r4, 8015b62 <WM__DeleteAssocTimer+0x46>
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	2101      	movs	r1, #1
 8015b2e:	f7fc fdbd 	bl	80126ac <GUI_TIMER_GetFlag>
 8015b32:	9b01      	ldr	r3, [sp, #4]
 8015b34:	b183      	cbz	r3, 8015b58 <WM__DeleteAssocTimer+0x3c>
 8015b36:	b178      	cbz	r0, 8015b58 <WM__DeleteAssocTimer+0x3c>
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7fe f9d3 	bl	8013ee4 <GUI_ALLOC_h2p>
 8015b3e:	6840      	ldr	r0, [r0, #4]
 8015b40:	42a8      	cmp	r0, r5
 8015b42:	d109      	bne.n	8015b58 <WM__DeleteAssocTimer+0x3c>
 8015b44:	4620      	mov	r0, r4
 8015b46:	a901      	add	r1, sp, #4
 8015b48:	9e01      	ldr	r6, [sp, #4]
 8015b4a:	f7fc fd65 	bl	8012618 <GUI_TIMER__GetNextTimerLin>
 8015b4e:	4604      	mov	r4, r0
 8015b50:	4630      	mov	r0, r6
 8015b52:	f7ff ffd1 	bl	8015af8 <WM_DeleteTimer>
 8015b56:	e7e7      	b.n	8015b28 <WM__DeleteAssocTimer+0xc>
 8015b58:	4620      	mov	r0, r4
 8015b5a:	a901      	add	r1, sp, #4
 8015b5c:	f7fc fd5c 	bl	8012618 <GUI_TIMER__GetNextTimerLin>
 8015b60:	e7e1      	b.n	8015b26 <WM__DeleteAssocTimer+0xa>
 8015b62:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08015b64 <WM_SendToParent>:
 8015b64:	b538      	push	{r3, r4, r5, lr}
 8015b66:	4605      	mov	r5, r0
 8015b68:	460c      	mov	r4, r1
 8015b6a:	b141      	cbz	r1, 8015b7e <WM_SendToParent+0x1a>
 8015b6c:	f7f8 f8b9 	bl	800dce2 <WM_GetParent>
 8015b70:	b128      	cbz	r0, 8015b7e <WM_SendToParent+0x1a>
 8015b72:	4621      	mov	r1, r4
 8015b74:	60a5      	str	r5, [r4, #8]
 8015b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b7a:	f7f7 bc99 	b.w	800d4b0 <WM__SendMessage>
 8015b7e:	bd38      	pop	{r3, r4, r5, pc}

08015b80 <WM__IsInWindow>:
 8015b80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015b82:	f013 0302 	ands.w	r3, r3, #2
 8015b86:	d012      	beq.n	8015bae <WM__IsInWindow+0x2e>
 8015b88:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015b8c:	4299      	cmp	r1, r3
 8015b8e:	db10      	blt.n	8015bb2 <WM__IsInWindow+0x32>
 8015b90:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015b94:	4299      	cmp	r1, r3
 8015b96:	dc0c      	bgt.n	8015bb2 <WM__IsInWindow+0x32>
 8015b98:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015b9c:	428a      	cmp	r2, r1
 8015b9e:	db08      	blt.n	8015bb2 <WM__IsInWindow+0x32>
 8015ba0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015ba4:	4282      	cmp	r2, r0
 8015ba6:	bfcc      	ite	gt
 8015ba8:	2000      	movgt	r0, #0
 8015baa:	2001      	movle	r0, #1
 8015bac:	4770      	bx	lr
 8015bae:	4618      	mov	r0, r3
 8015bb0:	4770      	bx	lr
 8015bb2:	2000      	movs	r0, #0
 8015bb4:	4770      	bx	lr

08015bb6 <_Screen2hWin>:
 8015bb6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bba:	460e      	mov	r6, r1
 8015bbc:	4617      	mov	r7, r2
 8015bbe:	4698      	mov	r8, r3
 8015bc0:	4605      	mov	r5, r0
 8015bc2:	b320      	cbz	r0, 8015c0e <_Screen2hWin+0x58>
 8015bc4:	f7fe f998 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015bc8:	4639      	mov	r1, r7
 8015bca:	4642      	mov	r2, r8
 8015bcc:	4604      	mov	r4, r0
 8015bce:	9001      	str	r0, [sp, #4]
 8015bd0:	f7ff ffd6 	bl	8015b80 <WM__IsInWindow>
 8015bd4:	4681      	mov	r9, r0
 8015bd6:	b920      	cbnz	r0, 8015be2 <_Screen2hWin+0x2c>
 8015bd8:	a801      	add	r0, sp, #4
 8015bda:	f7fe f99b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015bde:	464d      	mov	r5, r9
 8015be0:	e015      	b.n	8015c0e <_Screen2hWin+0x58>
 8015be2:	69e4      	ldr	r4, [r4, #28]
 8015be4:	b91c      	cbnz	r4, 8015bee <_Screen2hWin+0x38>
 8015be6:	a801      	add	r0, sp, #4
 8015be8:	f7fe f994 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015bec:	e00f      	b.n	8015c0e <_Screen2hWin+0x58>
 8015bee:	42b4      	cmp	r4, r6
 8015bf0:	d0f9      	beq.n	8015be6 <_Screen2hWin+0x30>
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	4631      	mov	r1, r6
 8015bf6:	463a      	mov	r2, r7
 8015bf8:	4643      	mov	r3, r8
 8015bfa:	f7ff ffdc 	bl	8015bb6 <_Screen2hWin>
 8015bfe:	2800      	cmp	r0, #0
 8015c00:	bf18      	it	ne
 8015c02:	4605      	movne	r5, r0
 8015c04:	4620      	mov	r0, r4
 8015c06:	f7fe f96d 	bl	8013ee4 <GUI_ALLOC_h2p>
 8015c0a:	6a04      	ldr	r4, [r0, #32]
 8015c0c:	e7ea      	b.n	8015be4 <_Screen2hWin+0x2e>
 8015c0e:	4628      	mov	r0, r5
 8015c10:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08015c14 <WM_Screen2hWin>:
 8015c14:	4b06      	ldr	r3, [pc, #24]	; (8015c30 <WM_Screen2hWin+0x1c>)
 8015c16:	b570      	push	{r4, r5, r6, lr}
 8015c18:	4605      	mov	r5, r0
 8015c1a:	6818      	ldr	r0, [r3, #0]
 8015c1c:	460c      	mov	r4, r1
 8015c1e:	f000 f833 	bl	8015c88 <WM_GetDesktopWindowEx>
 8015c22:	2100      	movs	r1, #0
 8015c24:	462a      	mov	r2, r5
 8015c26:	4623      	mov	r3, r4
 8015c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c2c:	f7ff bfc3 	b.w	8015bb6 <_Screen2hWin>
 8015c30:	2000eb0c 	.word	0x2000eb0c

08015c34 <WM_PID__SetPrevState>:
 8015c34:	4b03      	ldr	r3, [pc, #12]	; (8015c44 <WM_PID__SetPrevState+0x10>)
 8015c36:	220c      	movs	r2, #12
 8015c38:	fb02 3301 	mla	r3, r2, r1, r3
 8015c3c:	c807      	ldmia	r0, {r0, r1, r2}
 8015c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015c42:	4770      	bx	lr
 8015c44:	2000e208 	.word	0x2000e208

08015c48 <WM_OnKey>:
 8015c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015c4a:	4a09      	ldr	r2, [pc, #36]	; (8015c70 <WM_OnKey+0x28>)
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	6810      	ldr	r0, [r2, #0]
 8015c50:	4a08      	ldr	r2, [pc, #32]	; (8015c74 <WM_OnKey+0x2c>)
 8015c52:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8015c56:	b148      	cbz	r0, 8015c6c <WM_OnKey+0x24>
 8015c58:	9101      	str	r1, [sp, #4]
 8015c5a:	210e      	movs	r1, #14
 8015c5c:	9300      	str	r3, [sp, #0]
 8015c5e:	9102      	str	r1, [sp, #8]
 8015c60:	ab00      	add	r3, sp, #0
 8015c62:	a902      	add	r1, sp, #8
 8015c64:	9305      	str	r3, [sp, #20]
 8015c66:	f7f7 fc23 	bl	800d4b0 <WM__SendMessage>
 8015c6a:	2001      	movs	r0, #1
 8015c6c:	b007      	add	sp, #28
 8015c6e:	bd00      	pop	{pc}
 8015c70:	2000eb0c 	.word	0x2000eb0c
 8015c74:	2000eafc 	.word	0x2000eafc

08015c78 <WM_GetWindowOrgX>:
 8015c78:	b508      	push	{r3, lr}
 8015c7a:	b120      	cbz	r0, 8015c86 <WM_GetWindowOrgX+0xe>
 8015c7c:	f7fe f932 	bl	8013ee4 <GUI_ALLOC_h2p>
 8015c80:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015c84:	bd08      	pop	{r3, pc}
 8015c86:	bd08      	pop	{r3, pc}

08015c88 <WM_GetDesktopWindowEx>:
 8015c88:	2801      	cmp	r0, #1
 8015c8a:	d803      	bhi.n	8015c94 <WM_GetDesktopWindowEx+0xc>
 8015c8c:	4b02      	ldr	r3, [pc, #8]	; (8015c98 <WM_GetDesktopWindowEx+0x10>)
 8015c8e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015c92:	4770      	bx	lr
 8015c94:	2000      	movs	r0, #0
 8015c96:	4770      	bx	lr
 8015c98:	2000eaec 	.word	0x2000eaec

08015c9c <WM_ForEachDesc>:
 8015c9c:	f002 bcc7 	b.w	801862e <WM__ForEachDesc>

08015ca0 <WM__AddCriticalHandle>:
 8015ca0:	4b02      	ldr	r3, [pc, #8]	; (8015cac <WM__AddCriticalHandle+0xc>)
 8015ca2:	681a      	ldr	r2, [r3, #0]
 8015ca4:	6002      	str	r2, [r0, #0]
 8015ca6:	6018      	str	r0, [r3, #0]
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop
 8015cac:	2000eb20 	.word	0x2000eb20

08015cb0 <WM__RemoveCriticalHandle>:
 8015cb0:	4b08      	ldr	r3, [pc, #32]	; (8015cd4 <WM__RemoveCriticalHandle+0x24>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	b163      	cbz	r3, 8015cd0 <WM__RemoveCriticalHandle+0x20>
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	4283      	cmp	r3, r0
 8015cba:	d104      	bne.n	8015cc6 <WM__RemoveCriticalHandle+0x16>
 8015cbc:	6818      	ldr	r0, [r3, #0]
 8015cbe:	b902      	cbnz	r2, 8015cc2 <WM__RemoveCriticalHandle+0x12>
 8015cc0:	4a04      	ldr	r2, [pc, #16]	; (8015cd4 <WM__RemoveCriticalHandle+0x24>)
 8015cc2:	6010      	str	r0, [r2, #0]
 8015cc4:	4770      	bx	lr
 8015cc6:	6819      	ldr	r1, [r3, #0]
 8015cc8:	461a      	mov	r2, r3
 8015cca:	b109      	cbz	r1, 8015cd0 <WM__RemoveCriticalHandle+0x20>
 8015ccc:	460b      	mov	r3, r1
 8015cce:	e7f3      	b.n	8015cb8 <WM__RemoveCriticalHandle+0x8>
 8015cd0:	4770      	bx	lr
 8015cd2:	bf00      	nop
 8015cd4:	2000eb20 	.word	0x2000eb20

08015cd8 <WM_BringToBottom>:
 8015cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cdc:	4604      	mov	r4, r0
 8015cde:	b087      	sub	sp, #28
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	d03a      	beq.n	8015d5a <WM_BringToBottom+0x82>
 8015ce4:	f7fe f908 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	9001      	str	r0, [sp, #4]
 8015cec:	c803      	ldmia	r0, {r0, r1}
 8015cee:	ad04      	add	r5, sp, #16
 8015cf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8015cf4:	a801      	add	r0, sp, #4
 8015cf6:	6a1e      	ldr	r6, [r3, #32]
 8015cf8:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8015cfc:	f7fe f90a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015d00:	4620      	mov	r0, r4
 8015d02:	f7ff fc8a 	bl	801561a <WM__GetPrevSibling>
 8015d06:	4607      	mov	r7, r0
 8015d08:	b338      	cbz	r0, 8015d5a <WM_BringToBottom+0x82>
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	f7f7 ffe9 	bl	800dce2 <WM_GetParent>
 8015d10:	f019 0f02 	tst.w	r9, #2
 8015d14:	4680      	mov	r8, r0
 8015d16:	d004      	beq.n	8015d22 <WM_BringToBottom+0x4a>
 8015d18:	4628      	mov	r0, r5
 8015d1a:	4641      	mov	r1, r8
 8015d1c:	4632      	mov	r2, r6
 8015d1e:	f7f8 fccc 	bl	800e6ba <WM__InvalidateRectEx>
 8015d22:	4620      	mov	r0, r4
 8015d24:	f7fe f8e8 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015d28:	9001      	str	r0, [sp, #4]
 8015d2a:	4640      	mov	r0, r8
 8015d2c:	f7fe f8e4 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015d30:	9003      	str	r0, [sp, #12]
 8015d32:	4638      	mov	r0, r7
 8015d34:	f7fe f8e0 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015d38:	9b03      	ldr	r3, [sp, #12]
 8015d3a:	6206      	str	r6, [r0, #32]
 8015d3c:	9002      	str	r0, [sp, #8]
 8015d3e:	a806      	add	r0, sp, #24
 8015d40:	69da      	ldr	r2, [r3, #28]
 8015d42:	f850 1d14 	ldr.w	r1, [r0, #-20]!
 8015d46:	61dc      	str	r4, [r3, #28]
 8015d48:	620a      	str	r2, [r1, #32]
 8015d4a:	f7fe f8e3 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015d4e:	a803      	add	r0, sp, #12
 8015d50:	f7fe f8e0 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015d54:	a802      	add	r0, sp, #8
 8015d56:	f7fe f8dd 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015d5a:	b007      	add	sp, #28
 8015d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015d60 <_Convert16>:
 8015d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d64:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015d68:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8015d6c:	4605      	mov	r5, r0
 8015d6e:	460e      	mov	r6, r1
 8015d70:	4690      	mov	r8, r2
 8015d72:	461f      	mov	r7, r3
 8015d74:	4614      	mov	r4, r2
 8015d76:	4689      	mov	r9, r1
 8015d78:	f835 0b02 	ldrh.w	r0, [r5], #2
 8015d7c:	47d8      	blx	fp
 8015d7e:	47d0      	blx	sl
 8015d80:	3c01      	subs	r4, #1
 8015d82:	f849 0b04 	str.w	r0, [r9], #4
 8015d86:	d1f7      	bne.n	8015d78 <_Convert16+0x18>
 8015d88:	2f1f      	cmp	r7, #31
 8015d8a:	d806      	bhi.n	8015d9a <_Convert16+0x3a>
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	4641      	mov	r1, r8
 8015d90:	463a      	mov	r2, r7
 8015d92:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d96:	f001 bf87 	b.w	8017ca8 <GUI__CompactPixelIndices>
 8015d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d9e <_Convert8>:
 8015d9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015da6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8015daa:	4605      	mov	r5, r0
 8015dac:	460e      	mov	r6, r1
 8015dae:	4690      	mov	r8, r2
 8015db0:	461f      	mov	r7, r3
 8015db2:	4689      	mov	r9, r1
 8015db4:	4604      	mov	r4, r0
 8015db6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015dba:	47d8      	blx	fp
 8015dbc:	47d0      	blx	sl
 8015dbe:	eb05 0308 	add.w	r3, r5, r8
 8015dc2:	429c      	cmp	r4, r3
 8015dc4:	f849 0b04 	str.w	r0, [r9], #4
 8015dc8:	d1f5      	bne.n	8015db6 <_Convert8+0x18>
 8015dca:	2f1f      	cmp	r7, #31
 8015dcc:	d806      	bhi.n	8015ddc <_Convert8+0x3e>
 8015dce:	4630      	mov	r0, r6
 8015dd0:	4641      	mov	r1, r8
 8015dd2:	463a      	mov	r2, r7
 8015dd4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd8:	f001 bf66 	b.w	8017ca8 <GUI__CompactPixelIndices>
 8015ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015de0 <GUI_MEMDEV__WriteToActiveOpaque>:
 8015de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de4:	b09d      	sub	sp, #116	; 0x74
 8015de6:	4680      	mov	r8, r0
 8015de8:	920d      	str	r2, [sp, #52]	; 0x34
 8015dea:	9110      	str	r1, [sp, #64]	; 0x40
 8015dec:	f7fe f884 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015df0:	ab1c      	add	r3, sp, #112	; 0x70
 8015df2:	6944      	ldr	r4, [r0, #20]
 8015df4:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7fe f88b 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015dfe:	4640      	mov	r0, r8
 8015e00:	f7fa f90c 	bl	801001c <GUI_MEMDEV_GetBitsPerPixel>
 8015e04:	2808      	cmp	r0, #8
 8015e06:	4602      	mov	r2, r0
 8015e08:	dd02      	ble.n	8015e10 <GUI_MEMDEV__WriteToActiveOpaque+0x30>
 8015e0a:	2c00      	cmp	r4, #0
 8015e0c:	f000 81b5 	beq.w	801617a <GUI_MEMDEV__WriteToActiveOpaque+0x39a>
 8015e10:	2501      	movs	r5, #1
 8015e12:	2600      	movs	r6, #0
 8015e14:	4640      	mov	r0, r8
 8015e16:	951b      	str	r5, [sp, #108]	; 0x6c
 8015e18:	950b      	str	r5, [sp, #44]	; 0x2c
 8015e1a:	961a      	str	r6, [sp, #104]	; 0x68
 8015e1c:	f7fe f86c 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015e20:	a91c      	add	r1, sp, #112	; 0x70
 8015e22:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015e26:	f841 0d10 	str.w	r0, [r1, #-16]!
 8015e2a:	6904      	ldr	r4, [r0, #16]
 8015e2c:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8015e30:	6945      	ldr	r5, [r0, #20]
 8015e32:	68c7      	ldr	r7, [r0, #12]
 8015e34:	6800      	ldr	r0, [r0, #0]
 8015e36:	f8df b5f4 	ldr.w	fp, [pc, #1524]	; 801642c <GUI_MEMDEV__WriteToActiveOpaque+0x64c>
 8015e3a:	6903      	ldr	r3, [r0, #16]
 8015e3c:	f8db 0000 	ldr.w	r0, [fp]
 8015e40:	9212      	str	r2, [sp, #72]	; 0x48
 8015e42:	685a      	ldr	r2, [r3, #4]
 8015e44:	7c40      	ldrb	r0, [r0, #17]
 8015e46:	9211      	str	r2, [sp, #68]	; 0x44
 8015e48:	9109      	str	r1, [sp, #36]	; 0x24
 8015e4a:	f7fb fad7 	bl	80113fc <GUI_GetBitsPerPixelEx>
 8015e4e:	f8db 1000 	ldr.w	r1, [fp]
 8015e52:	900e      	str	r0, [sp, #56]	; 0x38
 8015e54:	7c48      	ldrb	r0, [r1, #17]
 8015e56:	f7fb faef 	bl	8011438 <GUI_GetpfIndex2ColorEx>
 8015e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	4618      	mov	r0, r3
 8015e60:	920a      	str	r2, [sp, #40]	; 0x28
 8015e62:	f7fe f857 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015e66:	2c08      	cmp	r4, #8
 8015e68:	fa0f f98a 	sxth.w	r9, sl
 8015e6c:	4658      	mov	r0, fp
 8015e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e72:	d904      	bls.n	8015e7e <GUI_MEMDEV__WriteToActiveOpaque+0x9e>
 8015e74:	2c10      	cmp	r4, #16
 8015e76:	bf8c      	ite	hi
 8015e78:	2104      	movhi	r1, #4
 8015e7a:	2102      	movls	r1, #2
 8015e7c:	e004      	b.n	8015e88 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8015e7e:	2c01      	cmp	r4, #1
 8015e80:	d102      	bne.n	8015e88 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8015e82:	940f      	str	r4, [sp, #60]	; 0x3c
 8015e84:	ae1a      	add	r6, sp, #104	; 0x68
 8015e86:	e000      	b.n	8015e8a <GUI_MEMDEV__WriteToActiveOpaque+0xaa>
 8015e88:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e8c:	4293      	cmp	r3, r2
 8015e8e:	f000 80d9 	beq.w	8016044 <GUI_MEMDEV__WriteToActiveOpaque+0x264>
 8015e92:	6803      	ldr	r3, [r0, #0]
 8015e94:	7c58      	ldrb	r0, [r3, #17]
 8015e96:	f7fb fad7 	bl	8011448 <GUI_GetpfColor2IndexEx>
 8015e9a:	9013      	str	r0, [sp, #76]	; 0x4c
 8015e9c:	fa0f f08a 	sxth.w	r0, sl
 8015ea0:	0080      	lsls	r0, r0, #2
 8015ea2:	f7fe fa77 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 8015ea6:	900c      	str	r0, [sp, #48]	; 0x30
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	f000 8322 	beq.w	80164f2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8015eae:	4640      	mov	r0, r8
 8015eb0:	f7f9 fa80 	bl	800f3b4 <GUI_MEMDEV_GetDataPtr>
 8015eb4:	4680      	mov	r8, r0
 8015eb6:	2d00      	cmp	r5, #0
 8015eb8:	f000 80b5 	beq.w	8016026 <GUI_MEMDEV__WriteToActiveOpaque+0x246>
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f7fe f81b 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015ec2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8015ec6:	9019      	str	r0, [sp, #100]	; 0x64
 8015ec8:	f04f 0a00 	mov.w	sl, #0
 8015ecc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015ece:	458a      	cmp	sl, r1
 8015ed0:	f280 80a5 	bge.w	801601e <GUI_MEMDEV__WriteToActiveOpaque+0x23e>
 8015ed4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015ed6:	6883      	ldr	r3, [r0, #8]
 8015ed8:	2500      	movs	r5, #0
 8015eda:	9516      	str	r5, [sp, #88]	; 0x58
 8015edc:	a916      	add	r1, sp, #88	; 0x58
 8015ede:	695d      	ldr	r5, [r3, #20]
 8015ee0:	4652      	mov	r2, sl
 8015ee2:	47a8      	blx	r5
 8015ee4:	4548      	cmp	r0, r9
 8015ee6:	4605      	mov	r5, r0
 8015ee8:	d127      	bne.n	8015f3a <GUI_MEMDEV__WriteToActiveOpaque+0x15a>
 8015eea:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015eec:	f7fe f804 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015ef0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ef2:	9017      	str	r0, [sp, #92]	; 0x5c
 8015ef4:	4601      	mov	r1, r0
 8015ef6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015ef8:	9200      	str	r2, [sp, #0]
 8015efa:	2c08      	cmp	r4, #8
 8015efc:	9001      	str	r0, [sp, #4]
 8015efe:	464a      	mov	r2, r9
 8015f00:	4640      	mov	r0, r8
 8015f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f04:	d902      	bls.n	8015f0c <GUI_MEMDEV__WriteToActiveOpaque+0x12c>
 8015f06:	f7ff ff2b 	bl	8015d60 <_Convert16>
 8015f0a:	e001      	b.n	8015f10 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 8015f0c:	f7ff ff47 	bl	8015d9e <_Convert8>
 8015f10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015f12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015f14:	9502      	str	r5, [sp, #8]
 8015f16:	2301      	movs	r3, #1
 8015f18:	2100      	movs	r1, #0
 8015f1a:	ad1c      	add	r5, sp, #112	; 0x70
 8015f1c:	9103      	str	r1, [sp, #12]
 8015f1e:	9300      	str	r3, [sp, #0]
 8015f20:	9301      	str	r3, [sp, #4]
 8015f22:	f855 2d14 	ldr.w	r2, [r5, #-20]!
 8015f26:	9605      	str	r6, [sp, #20]
 8015f28:	9204      	str	r2, [sp, #16]
 8015f2a:	4659      	mov	r1, fp
 8015f2c:	464a      	mov	r2, r9
 8015f2e:	f7fb fc89 	bl	8011844 <LCD_DrawBitmap>
 8015f32:	4628      	mov	r0, r5
 8015f34:	f7fd ffee 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015f38:	e06b      	b.n	8016012 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8015f3a:	2c01      	cmp	r4, #1
 8015f3c:	d15a      	bne.n	8015ff4 <GUI_MEMDEV__WriteToActiveOpaque+0x214>
 8015f3e:	2d00      	cmp	r5, #0
 8015f40:	d067      	beq.n	8016012 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8015f42:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015f44:	9703      	str	r7, [sp, #12]
 8015f46:	2008      	movs	r0, #8
 8015f48:	fb91 f2f0 	sdiv	r2, r1, r0
 8015f4c:	eb08 0002 	add.w	r0, r8, r2
 8015f50:	9004      	str	r0, [sp, #16]
 8015f52:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015f54:	9605      	str	r6, [sp, #20]
 8015f56:	2301      	movs	r3, #1
 8015f58:	f001 0207 	and.w	r2, r1, #7
 8015f5c:	1840      	adds	r0, r0, r1
 8015f5e:	9300      	str	r3, [sp, #0]
 8015f60:	9301      	str	r3, [sp, #4]
 8015f62:	9302      	str	r3, [sp, #8]
 8015f64:	9206      	str	r2, [sp, #24]
 8015f66:	4659      	mov	r1, fp
 8015f68:	462a      	mov	r2, r5
 8015f6a:	f7fb fb8f 	bl	801168c <LCD__DrawBitmap_1bpp>
 8015f6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015f70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015f72:	6881      	ldr	r1, [r0, #8]
 8015f74:	195d      	adds	r5, r3, r5
 8015f76:	9516      	str	r5, [sp, #88]	; 0x58
 8015f78:	694b      	ldr	r3, [r1, #20]
 8015f7a:	4652      	mov	r2, sl
 8015f7c:	a916      	add	r1, sp, #88	; 0x58
 8015f7e:	4798      	blx	r3
 8015f80:	4605      	mov	r5, r0
 8015f82:	e7dc      	b.n	8015f3e <GUI_MEMDEV__WriteToActiveOpaque+0x15e>
 8015f84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015f86:	f7fd ffb7 	bl	8013ef8 <GUI_ALLOC_LockH>
 8015f8a:	2c08      	cmp	r4, #8
 8015f8c:	4601      	mov	r1, r0
 8015f8e:	9017      	str	r0, [sp, #92]	; 0x5c
 8015f90:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015f92:	d932      	bls.n	8015ffa <GUI_MEMDEV__WriteToActiveOpaque+0x21a>
 8015f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f9c:	9201      	str	r2, [sp, #4]
 8015f9e:	fb00 8003 	mla	r0, r0, r3, r8
 8015fa2:	462a      	mov	r2, r5
 8015fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fa6:	f7ff fedb 	bl	8015d60 <_Convert16>
 8015faa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015fac:	2301      	movs	r3, #1
 8015fae:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	9300      	str	r3, [sp, #0]
 8015fb6:	9301      	str	r3, [sp, #4]
 8015fb8:	9102      	str	r1, [sp, #8]
 8015fba:	9003      	str	r0, [sp, #12]
 8015fbc:	f85c 2d14 	ldr.w	r2, [ip, #-20]!
 8015fc0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015fc2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015fc4:	9204      	str	r2, [sp, #16]
 8015fc6:	1840      	adds	r0, r0, r1
 8015fc8:	462a      	mov	r2, r5
 8015fca:	4659      	mov	r1, fp
 8015fcc:	9605      	str	r6, [sp, #20]
 8015fce:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8015fd2:	f7fb fc37 	bl	8011844 <LCD_DrawBitmap>
 8015fd6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8015fda:	4660      	mov	r0, ip
 8015fdc:	f7fd ff9a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8015fe0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015fe2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fe4:	6882      	ldr	r2, [r0, #8]
 8015fe6:	195d      	adds	r5, r3, r5
 8015fe8:	9516      	str	r5, [sp, #88]	; 0x58
 8015fea:	6953      	ldr	r3, [r2, #20]
 8015fec:	a916      	add	r1, sp, #88	; 0x58
 8015fee:	4652      	mov	r2, sl
 8015ff0:	4798      	blx	r3
 8015ff2:	4605      	mov	r5, r0
 8015ff4:	2d00      	cmp	r5, #0
 8015ff6:	d1c5      	bne.n	8015f84 <GUI_MEMDEV__WriteToActiveOpaque+0x1a4>
 8015ff8:	e00b      	b.n	8016012 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8015ffa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ffe:	9200      	str	r2, [sp, #0]
 8016000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016002:	9301      	str	r3, [sp, #4]
 8016004:	fb00 8002 	mla	r0, r0, r2, r8
 8016008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801600a:	462a      	mov	r2, r5
 801600c:	f7ff fec7 	bl	8015d9e <_Convert8>
 8016010:	e7cb      	b.n	8015faa <GUI_MEMDEV__WriteToActiveOpaque+0x1ca>
 8016012:	44b8      	add	r8, r7
 8016014:	f10a 0a01 	add.w	sl, sl, #1
 8016018:	f10b 0b01 	add.w	fp, fp, #1
 801601c:	e756      	b.n	8015ecc <GUI_MEMDEV__WriteToActiveOpaque+0xec>
 801601e:	a819      	add	r0, sp, #100	; 0x64
 8016020:	f7fd ff78 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016024:	e00c      	b.n	8016040 <GUI_MEMDEV__WriteToActiveOpaque+0x260>
 8016026:	2201      	movs	r2, #1
 8016028:	9200      	str	r2, [sp, #0]
 801602a:	9201      	str	r2, [sp, #4]
 801602c:	9004      	str	r0, [sp, #16]
 801602e:	9402      	str	r4, [sp, #8]
 8016030:	9703      	str	r7, [sp, #12]
 8016032:	9605      	str	r6, [sp, #20]
 8016034:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016036:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801603a:	464a      	mov	r2, r9
 801603c:	f7fb fc02 	bl	8011844 <LCD_DrawBitmap>
 8016040:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016042:	e254      	b.n	80164ee <GUI_MEMDEV__WriteToActiveOpaque+0x70e>
 8016044:	4640      	mov	r0, r8
 8016046:	f7f9 f9b5 	bl	800f3b4 <GUI_MEMDEV_GetDataPtr>
 801604a:	4680      	mov	r8, r0
 801604c:	2d00      	cmp	r5, #0
 801604e:	f000 8087 	beq.w	8016160 <GUI_MEMDEV__WriteToActiveOpaque+0x380>
 8016052:	4628      	mov	r0, r5
 8016054:	f7fd ff50 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016058:	2500      	movs	r5, #0
 801605a:	9019      	str	r0, [sp, #100]	; 0x64
 801605c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801605e:	428d      	cmp	r5, r1
 8016060:	da7a      	bge.n	8016158 <GUI_MEMDEV__WriteToActiveOpaque+0x378>
 8016062:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016064:	6883      	ldr	r3, [r0, #8]
 8016066:	2200      	movs	r2, #0
 8016068:	9216      	str	r2, [sp, #88]	; 0x58
 801606a:	695b      	ldr	r3, [r3, #20]
 801606c:	a916      	add	r1, sp, #88	; 0x58
 801606e:	462a      	mov	r2, r5
 8016070:	4798      	blx	r3
 8016072:	4548      	cmp	r0, r9
 8016074:	4682      	mov	sl, r0
 8016076:	d123      	bne.n	80160c0 <GUI_MEMDEV__WriteToActiveOpaque+0x2e0>
 8016078:	46aa      	mov	sl, r5
 801607a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801607c:	6881      	ldr	r1, [r0, #8]
 801607e:	f10a 0b01 	add.w	fp, sl, #1
 8016082:	694b      	ldr	r3, [r1, #20]
 8016084:	465a      	mov	r2, fp
 8016086:	a916      	add	r1, sp, #88	; 0x58
 8016088:	4798      	blx	r3
 801608a:	4548      	cmp	r0, r9
 801608c:	d101      	bne.n	8016092 <GUI_MEMDEV__WriteToActiveOpaque+0x2b2>
 801608e:	46da      	mov	sl, fp
 8016090:	e7f3      	b.n	801607a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 8016092:	ebc5 000a 	rsb	r0, r5, sl
 8016096:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016098:	f8cd 8010 	str.w	r8, [sp, #16]
 801609c:	f100 0b01 	add.w	fp, r0, #1
 80160a0:	2201      	movs	r2, #1
 80160a2:	9200      	str	r2, [sp, #0]
 80160a4:	9201      	str	r2, [sp, #4]
 80160a6:	1949      	adds	r1, r1, r5
 80160a8:	9402      	str	r4, [sp, #8]
 80160aa:	9703      	str	r7, [sp, #12]
 80160ac:	9605      	str	r6, [sp, #20]
 80160ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80160b0:	464a      	mov	r2, r9
 80160b2:	465b      	mov	r3, fp
 80160b4:	f7fb fbc6 	bl	8011844 <LCD_DrawBitmap>
 80160b8:	fb07 880b 	mla	r8, r7, fp, r8
 80160bc:	4655      	mov	r5, sl
 80160be:	e049      	b.n	8016154 <GUI_MEMDEV__WriteToActiveOpaque+0x374>
 80160c0:	2c01      	cmp	r4, #1
 80160c2:	d125      	bne.n	8016110 <GUI_MEMDEV__WriteToActiveOpaque+0x330>
 80160c4:	f1ba 0f00 	cmp.w	sl, #0
 80160c8:	d043      	beq.n	8016152 <GUI_MEMDEV__WriteToActiveOpaque+0x372>
 80160ca:	9816      	ldr	r0, [sp, #88]	; 0x58
 80160cc:	9703      	str	r7, [sp, #12]
 80160ce:	2208      	movs	r2, #8
 80160d0:	fb90 f1f2 	sdiv	r1, r0, r2
 80160d4:	eb08 0201 	add.w	r2, r8, r1
 80160d8:	f000 0107 	and.w	r1, r0, #7
 80160dc:	9204      	str	r2, [sp, #16]
 80160de:	9106      	str	r1, [sp, #24]
 80160e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80160e4:	9605      	str	r6, [sp, #20]
 80160e6:	2301      	movs	r3, #1
 80160e8:	1810      	adds	r0, r2, r0
 80160ea:	9300      	str	r3, [sp, #0]
 80160ec:	4652      	mov	r2, sl
 80160ee:	9301      	str	r3, [sp, #4]
 80160f0:	9302      	str	r3, [sp, #8]
 80160f2:	1949      	adds	r1, r1, r5
 80160f4:	f7fb faca 	bl	801168c <LCD__DrawBitmap_1bpp>
 80160f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80160fa:	eb03 000a 	add.w	r0, r3, sl
 80160fe:	9016      	str	r0, [sp, #88]	; 0x58
 8016100:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016102:	6882      	ldr	r2, [r0, #8]
 8016104:	a916      	add	r1, sp, #88	; 0x58
 8016106:	6953      	ldr	r3, [r2, #20]
 8016108:	462a      	mov	r2, r5
 801610a:	4798      	blx	r3
 801610c:	4682      	mov	sl, r0
 801610e:	e7d9      	b.n	80160c4 <GUI_MEMDEV__WriteToActiveOpaque+0x2e4>
 8016110:	f1ba 0f00 	cmp.w	sl, #0
 8016114:	d01d      	beq.n	8016152 <GUI_MEMDEV__WriteToActiveOpaque+0x372>
 8016116:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016118:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801611a:	9402      	str	r4, [sp, #8]
 801611c:	fb00 8201 	mla	r2, r0, r1, r8
 8016120:	9204      	str	r2, [sp, #16]
 8016122:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016126:	9703      	str	r7, [sp, #12]
 8016128:	2301      	movs	r3, #1
 801612a:	1808      	adds	r0, r1, r0
 801612c:	9300      	str	r3, [sp, #0]
 801612e:	1951      	adds	r1, r2, r5
 8016130:	9301      	str	r3, [sp, #4]
 8016132:	4652      	mov	r2, sl
 8016134:	9605      	str	r6, [sp, #20]
 8016136:	f7fb fb85 	bl	8011844 <LCD_DrawBitmap>
 801613a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801613c:	eb03 000a 	add.w	r0, r3, sl
 8016140:	9016      	str	r0, [sp, #88]	; 0x58
 8016142:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016144:	6881      	ldr	r1, [r0, #8]
 8016146:	462a      	mov	r2, r5
 8016148:	694b      	ldr	r3, [r1, #20]
 801614a:	a916      	add	r1, sp, #88	; 0x58
 801614c:	4798      	blx	r3
 801614e:	4682      	mov	sl, r0
 8016150:	e7de      	b.n	8016110 <GUI_MEMDEV__WriteToActiveOpaque+0x330>
 8016152:	44b8      	add	r8, r7
 8016154:	3501      	adds	r5, #1
 8016156:	e781      	b.n	801605c <GUI_MEMDEV__WriteToActiveOpaque+0x27c>
 8016158:	a819      	add	r0, sp, #100	; 0x64
 801615a:	f7fd fedb 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801615e:	e1c8      	b.n	80164f2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8016160:	2001      	movs	r0, #1
 8016162:	9000      	str	r0, [sp, #0]
 8016164:	9001      	str	r0, [sp, #4]
 8016166:	9402      	str	r4, [sp, #8]
 8016168:	9703      	str	r7, [sp, #12]
 801616a:	f8cd 8010 	str.w	r8, [sp, #16]
 801616e:	9605      	str	r6, [sp, #20]
 8016170:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016172:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016176:	464a      	mov	r2, r9
 8016178:	e03d      	b.n	80161f6 <GUI_MEMDEV__WriteToActiveOpaque+0x416>
 801617a:	4640      	mov	r0, r8
 801617c:	920a      	str	r2, [sp, #40]	; 0x28
 801617e:	f7fd febb 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016182:	4605      	mov	r5, r0
 8016184:	a81c      	add	r0, sp, #112	; 0x70
 8016186:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801618a:	f840 5d14 	str.w	r5, [r0, #-20]!
 801618e:	682b      	ldr	r3, [r5, #0]
 8016190:	8969      	ldrh	r1, [r5, #10]
 8016192:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8016196:	68ee      	ldr	r6, [r5, #12]
 8016198:	4ca4      	ldr	r4, [pc, #656]	; (801642c <GUI_MEMDEV__WriteToActiveOpaque+0x64c>)
 801619a:	9111      	str	r1, [sp, #68]	; 0x44
 801619c:	fa0f f78b 	sxth.w	r7, fp
 80161a0:	970e      	str	r7, [sp, #56]	; 0x38
 80161a2:	fa0f fa81 	sxth.w	sl, r1
 80161a6:	9609      	str	r6, [sp, #36]	; 0x24
 80161a8:	f7fd feb4 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80161ac:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80161b0:	6822      	ldr	r2, [r4, #0]
 80161b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80161b4:	4f9e      	ldr	r7, [pc, #632]	; (8016430 <GUI_MEMDEV__WriteToActiveOpaque+0x650>)
 80161b6:	7c50      	ldrb	r0, [r2, #17]
 80161b8:	f857 1020 	ldr.w	r1, [r7, r0, lsl #2]
 80161bc:	690e      	ldr	r6, [r1, #16]
 80161be:	6837      	ldr	r7, [r6, #0]
 80161c0:	f7fb f91c 	bl	80113fc <GUI_GetBitsPerPixelEx>
 80161c4:	2808      	cmp	r0, #8
 80161c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ca:	d904      	bls.n	80161d6 <GUI_MEMDEV__WriteToActiveOpaque+0x3f6>
 80161cc:	2810      	cmp	r0, #16
 80161ce:	bf8c      	ite	hi
 80161d0:	2404      	movhi	r4, #4
 80161d2:	2402      	movls	r4, #2
 80161d4:	e000      	b.n	80161d8 <GUI_MEMDEV__WriteToActiveOpaque+0x3f8>
 80161d6:	2401      	movs	r4, #1
 80161d8:	45b1      	cmp	r9, r6
 80161da:	d10f      	bne.n	80161fc <GUI_MEMDEV__WriteToActiveOpaque+0x41c>
 80161dc:	2101      	movs	r1, #1
 80161de:	9100      	str	r1, [sp, #0]
 80161e0:	9101      	str	r1, [sp, #4]
 80161e2:	9202      	str	r2, [sp, #8]
 80161e4:	9303      	str	r3, [sp, #12]
 80161e6:	3518      	adds	r5, #24
 80161e8:	2300      	movs	r3, #0
 80161ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80161ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80161ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161f0:	9305      	str	r3, [sp, #20]
 80161f2:	9504      	str	r5, [sp, #16]
 80161f4:	4653      	mov	r3, sl
 80161f6:	f7fb fb25 	bl	8011844 <LCD_DrawBitmap>
 80161fa:	e17a      	b.n	80164f2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 80161fc:	2a20      	cmp	r2, #32
 80161fe:	f040 809c 	bne.w	801633a <GUI_MEMDEV__WriteToActiveOpaque+0x55a>
 8016202:	fa0f f58b 	sxth.w	r5, fp
 8016206:	fb05 f004 	mul.w	r0, r5, r4
 801620a:	f7fe f8c3 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 801620e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016210:	2800      	cmp	r0, #0
 8016212:	f000 816e 	beq.w	80164f2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8016216:	f7fd fe6f 	bl	8013ef8 <GUI_ALLOC_LockH>
 801621a:	9019      	str	r0, [sp, #100]	; 0x64
 801621c:	4640      	mov	r0, r8
 801621e:	f7fd fe6b 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016222:	9017      	str	r0, [sp, #92]	; 0x5c
 8016224:	f100 0b18 	add.w	fp, r0, #24
 8016228:	6930      	ldr	r0, [r6, #16]
 801622a:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 801622e:	b348      	cbz	r0, 8016284 <GUI_MEMDEV__WriteToActiveOpaque+0x4a4>
 8016230:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8016234:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016238:	2c02      	cmp	r4, #2
 801623a:	d003      	beq.n	8016244 <GUI_MEMDEV__WriteToActiveOpaque+0x464>
 801623c:	2c04      	cmp	r4, #4
 801623e:	d001      	beq.n	8016244 <GUI_MEMDEV__WriteToActiveOpaque+0x464>
 8016240:	2c01      	cmp	r4, #1
 8016242:	d106      	bne.n	8016252 <GUI_MEMDEV__WriteToActiveOpaque+0x472>
 8016244:	4658      	mov	r0, fp
 8016246:	6937      	ldr	r7, [r6, #16]
 8016248:	9919      	ldr	r1, [sp, #100]	; 0x64
 801624a:	462a      	mov	r2, r5
 801624c:	4623      	mov	r3, r4
 801624e:	47b8      	blx	r7
 8016250:	44cb      	add	fp, r9
 8016252:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016256:	9104      	str	r1, [sp, #16]
 8016258:	2301      	movs	r3, #1
 801625a:	2000      	movs	r0, #0
 801625c:	9300      	str	r3, [sp, #0]
 801625e:	9301      	str	r3, [sp, #4]
 8016260:	9003      	str	r0, [sp, #12]
 8016262:	9005      	str	r0, [sp, #20]
 8016264:	f8cd a008 	str.w	sl, [sp, #8]
 8016268:	9810      	ldr	r0, [sp, #64]	; 0x40
 801626a:	4641      	mov	r1, r8
 801626c:	f7fb faea 	bl	8011844 <LCD_DrawBitmap>
 8016270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016274:	f108 0701 	add.w	r7, r8, #1
 8016278:	fa02 f083 	sxtah	r0, r2, r3
 801627c:	42b8      	cmp	r0, r7
 801627e:	d054      	beq.n	801632a <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8016280:	46b8      	mov	r8, r7
 8016282:	e7d9      	b.n	8016238 <GUI_MEMDEV__WriteToActiveOpaque+0x458>
 8016284:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016286:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016288:	2c02      	cmp	r4, #2
 801628a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801628c:	d010      	beq.n	80162b0 <GUI_MEMDEV__WriteToActiveOpaque+0x4d0>
 801628e:	2c04      	cmp	r4, #4
 8016290:	d01c      	beq.n	80162cc <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 8016292:	2c01      	cmp	r4, #1
 8016294:	d130      	bne.n	80162f8 <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 8016296:	4689      	mov	r9, r1
 8016298:	f04f 0800 	mov.w	r8, #0
 801629c:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 80162a0:	47b8      	blx	r7
 80162a2:	f809 0008 	strb.w	r0, [r9, r8]
 80162a6:	f108 0801 	add.w	r8, r8, #1
 80162aa:	4545      	cmp	r5, r8
 80162ac:	d1f6      	bne.n	801629c <GUI_MEMDEV__WriteToActiveOpaque+0x4bc>
 80162ae:	e020      	b.n	80162f2 <GUI_MEMDEV__WriteToActiveOpaque+0x512>
 80162b0:	4689      	mov	r9, r1
 80162b2:	465b      	mov	r3, fp
 80162b4:	46a8      	mov	r8, r5
 80162b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80162ba:	9309      	str	r3, [sp, #36]	; 0x24
 80162bc:	47b8      	blx	r7
 80162be:	f1b8 0801 	subs.w	r8, r8, #1
 80162c2:	f829 0b02 	strh.w	r0, [r9], #2
 80162c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162c8:	d1f5      	bne.n	80162b6 <GUI_MEMDEV__WriteToActiveOpaque+0x4d6>
 80162ca:	e00e      	b.n	80162ea <GUI_MEMDEV__WriteToActiveOpaque+0x50a>
 80162cc:	46a8      	mov	r8, r5
 80162ce:	f04f 0900 	mov.w	r9, #0
 80162d2:	f85b 0009 	ldr.w	r0, [fp, r9]
 80162d6:	9109      	str	r1, [sp, #36]	; 0x24
 80162d8:	47b8      	blx	r7
 80162da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162dc:	f1b8 0801 	subs.w	r8, r8, #1
 80162e0:	f841 0009 	str.w	r0, [r1, r9]
 80162e4:	f109 0904 	add.w	r9, r9, #4
 80162e8:	d1f3      	bne.n	80162d2 <GUI_MEMDEV__WriteToActiveOpaque+0x4f2>
 80162ea:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80162ee:	4645      	mov	r5, r8
 80162f0:	e002      	b.n	80162f8 <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 80162f2:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80162f6:	2500      	movs	r5, #0
 80162f8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80162fa:	f8cd a008 	str.w	sl, [sp, #8]
 80162fe:	2301      	movs	r3, #1
 8016300:	2200      	movs	r2, #0
 8016302:	9300      	str	r3, [sp, #0]
 8016304:	9301      	str	r3, [sp, #4]
 8016306:	9203      	str	r2, [sp, #12]
 8016308:	9004      	str	r0, [sp, #16]
 801630a:	9205      	str	r2, [sp, #20]
 801630c:	4631      	mov	r1, r6
 801630e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016310:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016312:	f7fb fa97 	bl	8011844 <LCD_DrawBitmap>
 8016316:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801631a:	f106 0801 	add.w	r8, r6, #1
 801631e:	fa03 f281 	sxtah	r2, r3, r1
 8016322:	4542      	cmp	r2, r8
 8016324:	d001      	beq.n	801632a <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8016326:	4646      	mov	r6, r8
 8016328:	e7ae      	b.n	8016288 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 801632a:	a817      	add	r0, sp, #92	; 0x5c
 801632c:	f7fd fdf2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016330:	a819      	add	r0, sp, #100	; 0x64
 8016332:	f7fd fdef 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016336:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016338:	e0d9      	b.n	80164ee <GUI_MEMDEV__WriteToActiveOpaque+0x70e>
 801633a:	2a10      	cmp	r2, #16
 801633c:	f040 80d9 	bne.w	80164f2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8016340:	fa0f fa8b 	sxth.w	sl, fp
 8016344:	fb0a f004 	mul.w	r0, sl, r4
 8016348:	f7fe f824 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 801634c:	9012      	str	r0, [sp, #72]	; 0x48
 801634e:	2800      	cmp	r0, #0
 8016350:	f000 80cf 	beq.w	80164f2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8016354:	f7fd fdd0 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016358:	9019      	str	r0, [sp, #100]	; 0x64
 801635a:	4640      	mov	r0, r8
 801635c:	f7fd fdcc 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016360:	9017      	str	r0, [sp, #92]	; 0x5c
 8016362:	6931      	ldr	r1, [r6, #16]
 8016364:	f100 0518 	add.w	r5, r0, #24
 8016368:	b111      	cbz	r1, 8016370 <GUI_MEMDEV__WriteToActiveOpaque+0x590>
 801636a:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801636e:	b92a      	cbnz	r2, 801637c <GUI_MEMDEV__WriteToActiveOpaque+0x59c>
 8016370:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 8016374:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016376:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801637a:	e085      	b.n	8016488 <GUI_MEMDEV__WriteToActiveOpaque+0x6a8>
 801637c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016380:	0088      	lsls	r0, r1, #2
 8016382:	f7fe f807 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 8016386:	900f      	str	r0, [sp, #60]	; 0x3c
 8016388:	b118      	cbz	r0, 8016392 <GUI_MEMDEV__WriteToActiveOpaque+0x5b2>
 801638a:	f7fd fdb5 	bl	8013ef8 <GUI_ALLOC_LockH>
 801638e:	9018      	str	r0, [sp, #96]	; 0x60
 8016390:	e001      	b.n	8016396 <GUI_MEMDEV__WriteToActiveOpaque+0x5b6>
 8016392:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016394:	9718      	str	r7, [sp, #96]	; 0x60
 8016396:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016398:	2b00      	cmp	r3, #0
 801639a:	f000 80a1 	beq.w	80164e0 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 801639e:	fa0f fb8b 	sxth.w	fp, fp
 80163a2:	ea4f 084b 	mov.w	r8, fp, lsl #1
 80163a6:	00e7      	lsls	r7, r4, #3
 80163a8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80163ac:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80163b0:	9713      	str	r7, [sp, #76]	; 0x4c
 80163b2:	2c02      	cmp	r4, #2
 80163b4:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80163b8:	d004      	beq.n	80163c4 <GUI_MEMDEV__WriteToActiveOpaque+0x5e4>
 80163ba:	2c04      	cmp	r4, #4
 80163bc:	d007      	beq.n	80163ce <GUI_MEMDEV__WriteToActiveOpaque+0x5ee>
 80163be:	2c01      	cmp	r4, #1
 80163c0:	d114      	bne.n	80163ec <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 80163c2:	e004      	b.n	80163ce <GUI_MEMDEV__WriteToActiveOpaque+0x5ee>
 80163c4:	4628      	mov	r0, r5
 80163c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80163c8:	4652      	mov	r2, sl
 80163ca:	4623      	mov	r3, r4
 80163cc:	e003      	b.n	80163d6 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 80163ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80163d0:	4628      	mov	r0, r5
 80163d2:	4652      	mov	r2, sl
 80163d4:	2302      	movs	r3, #2
 80163d6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80163da:	47b8      	blx	r7
 80163dc:	4652      	mov	r2, sl
 80163de:	9818      	ldr	r0, [sp, #96]	; 0x60
 80163e0:	6937      	ldr	r7, [r6, #16]
 80163e2:	4641      	mov	r1, r8
 80163e4:	4623      	mov	r3, r4
 80163e6:	47b8      	blx	r7
 80163e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163ea:	18ad      	adds	r5, r5, r2
 80163ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80163ee:	9919      	ldr	r1, [sp, #100]	; 0x64
 80163f0:	9002      	str	r0, [sp, #8]
 80163f2:	2301      	movs	r3, #1
 80163f4:	2700      	movs	r7, #0
 80163f6:	9300      	str	r3, [sp, #0]
 80163f8:	9301      	str	r3, [sp, #4]
 80163fa:	9703      	str	r7, [sp, #12]
 80163fc:	9104      	str	r1, [sp, #16]
 80163fe:	9705      	str	r7, [sp, #20]
 8016400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016402:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016404:	4659      	mov	r1, fp
 8016406:	f7fb fa1d 	bl	8011844 <LCD_DrawBitmap>
 801640a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801640c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801640e:	f10b 0801 	add.w	r8, fp, #1
 8016412:	fa03 f287 	sxtah	r2, r3, r7
 8016416:	4542      	cmp	r2, r8
 8016418:	d001      	beq.n	801641e <GUI_MEMDEV__WriteToActiveOpaque+0x63e>
 801641a:	46c3      	mov	fp, r8
 801641c:	e7c9      	b.n	80163b2 <GUI_MEMDEV__WriteToActiveOpaque+0x5d2>
 801641e:	a818      	add	r0, sp, #96	; 0x60
 8016420:	f7fd fd78 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016424:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016426:	f7fd fda1 	bl	8013f6c <GUI_ALLOC_Free>
 801642a:	e059      	b.n	80164e0 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 801642c:	20000308 	.word	0x20000308
 8016430:	2000eb5c 	.word	0x2000eb5c
 8016434:	4683      	mov	fp, r0
 8016436:	462b      	mov	r3, r5
 8016438:	46b1      	mov	r9, r6
 801643a:	f833 0b02 	ldrh.w	r0, [r3], #2
 801643e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016440:	9309      	str	r3, [sp, #36]	; 0x24
 8016442:	4790      	blx	r2
 8016444:	47b8      	blx	r7
 8016446:	f1b9 0901 	subs.w	r9, r9, #1
 801644a:	f82b 0b02 	strh.w	r0, [fp], #2
 801644e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016450:	d1f3      	bne.n	801643a <GUI_MEMDEV__WriteToActiveOpaque+0x65a>
 8016452:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8016456:	464e      	mov	r6, r9
 8016458:	9919      	ldr	r1, [sp, #100]	; 0x64
 801645a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801645c:	9104      	str	r1, [sp, #16]
 801645e:	2301      	movs	r3, #1
 8016460:	2000      	movs	r0, #0
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	9301      	str	r3, [sp, #4]
 8016466:	9003      	str	r0, [sp, #12]
 8016468:	9005      	str	r0, [sp, #20]
 801646a:	f8cd a008 	str.w	sl, [sp, #8]
 801646e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016470:	4641      	mov	r1, r8
 8016472:	f7fb f9e7 	bl	8011844 <LCD_DrawBitmap>
 8016476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801647a:	f108 0901 	add.w	r9, r8, #1
 801647e:	fa02 f083 	sxtah	r0, r2, r3
 8016482:	4548      	cmp	r0, r9
 8016484:	d02c      	beq.n	80164e0 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 8016486:	46c8      	mov	r8, r9
 8016488:	2c02      	cmp	r4, #2
 801648a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801648c:	d0d2      	beq.n	8016434 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 801648e:	2c04      	cmp	r4, #4
 8016490:	d012      	beq.n	80164b8 <GUI_MEMDEV__WriteToActiveOpaque+0x6d8>
 8016492:	2c01      	cmp	r4, #1
 8016494:	d1e0      	bne.n	8016458 <GUI_MEMDEV__WriteToActiveOpaque+0x678>
 8016496:	4683      	mov	fp, r0
 8016498:	4681      	mov	r9, r0
 801649a:	462a      	mov	r2, r5
 801649c:	f832 0b02 	ldrh.w	r0, [r2], #2
 80164a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164a2:	9209      	str	r2, [sp, #36]	; 0x24
 80164a4:	4798      	blx	r3
 80164a6:	47b8      	blx	r7
 80164a8:	f809 0b01 	strb.w	r0, [r9], #1
 80164ac:	eb0b 0106 	add.w	r1, fp, r6
 80164b0:	4589      	cmp	r9, r1
 80164b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164b4:	d1f2      	bne.n	801649c <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 80164b6:	e00f      	b.n	80164d8 <GUI_MEMDEV__WriteToActiveOpaque+0x6f8>
 80164b8:	4683      	mov	fp, r0
 80164ba:	4629      	mov	r1, r5
 80164bc:	46b1      	mov	r9, r6
 80164be:	f831 0b02 	ldrh.w	r0, [r1], #2
 80164c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164c4:	9109      	str	r1, [sp, #36]	; 0x24
 80164c6:	4798      	blx	r3
 80164c8:	47b8      	blx	r7
 80164ca:	f1b9 0901 	subs.w	r9, r9, #1
 80164ce:	f84b 0b04 	str.w	r0, [fp], #4
 80164d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164d4:	d1f3      	bne.n	80164be <GUI_MEMDEV__WriteToActiveOpaque+0x6de>
 80164d6:	e7bc      	b.n	8016452 <GUI_MEMDEV__WriteToActiveOpaque+0x672>
 80164d8:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80164dc:	2600      	movs	r6, #0
 80164de:	e7bb      	b.n	8016458 <GUI_MEMDEV__WriteToActiveOpaque+0x678>
 80164e0:	a817      	add	r0, sp, #92	; 0x5c
 80164e2:	f7fd fd17 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80164e6:	a819      	add	r0, sp, #100	; 0x64
 80164e8:	f7fd fd14 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80164ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80164ee:	f7fd fd3d 	bl	8013f6c <GUI_ALLOC_Free>
 80164f2:	b01d      	add	sp, #116	; 0x74
 80164f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164f8 <GUI_MEMDEV__WriteToActiveAlpha>:
 80164f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164fc:	b093      	sub	sp, #76	; 0x4c
 80164fe:	460e      	mov	r6, r1
 8016500:	4615      	mov	r5, r2
 8016502:	900f      	str	r0, [sp, #60]	; 0x3c
 8016504:	f7fd fcf8 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016508:	4603      	mov	r3, r0
 801650a:	a812      	add	r0, sp, #72	; 0x48
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	8919      	ldrh	r1, [r3, #8]
 8016510:	6914      	ldr	r4, [r2, #16]
 8016512:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016516:	895f      	ldrh	r7, [r3, #10]
 8016518:	6863      	ldr	r3, [r4, #4]
 801651a:	4c58      	ldr	r4, [pc, #352]	; (801667c <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 801651c:	910a      	str	r1, [sp, #40]	; 0x28
 801651e:	930c      	str	r3, [sp, #48]	; 0x30
 8016520:	f7fd fcf8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016524:	6820      	ldr	r0, [r4, #0]
 8016526:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8016684 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>
 801652a:	7c41      	ldrb	r1, [r0, #17]
 801652c:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8016530:	68c2      	ldr	r2, [r0, #12]
 8016532:	2108      	movs	r1, #8
 8016534:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016536:	4798      	blx	r3
 8016538:	2817      	cmp	r0, #23
 801653a:	bf88      	it	hi
 801653c:	2020      	movhi	r0, #32
 801653e:	900b      	str	r0, [sp, #44]	; 0x2c
 8016540:	6820      	ldr	r0, [r4, #0]
 8016542:	7c41      	ldrb	r1, [r0, #17]
 8016544:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 8016548:	6913      	ldr	r3, [r2, #16]
 801654a:	6858      	ldr	r0, [r3, #4]
 801654c:	6819      	ldr	r1, [r3, #0]
 801654e:	900d      	str	r0, [sp, #52]	; 0x34
 8016550:	2000      	movs	r0, #0
 8016552:	9309      	str	r3, [sp, #36]	; 0x24
 8016554:	910e      	str	r1, [sp, #56]	; 0x38
 8016556:	f7fc f80f 	bl	8012578 <GUI__AllocAlphaBuffer>
 801655a:	2800      	cmp	r0, #0
 801655c:	f040 808a 	bne.w	8016674 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8016560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016562:	6823      	ldr	r3, [r4, #0]
 8016564:	fa0f f882 	sxth.w	r8, r2
 8016568:	eb06 0408 	add.w	r4, r6, r8
 801656c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016570:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016574:	1e60      	subs	r0, r4, #1
 8016576:	1a84      	subs	r4, r0, r2
 8016578:	2c00      	cmp	r4, #0
 801657a:	bfcc      	ite	gt
 801657c:	ebc4 0408 	rsbgt	r4, r4, r8
 8016580:	4644      	movle	r4, r8
 8016582:	42b1      	cmp	r1, r6
 8016584:	bfc3      	ittte	gt
 8016586:	ebc6 0201 	rsbgt	r2, r6, r1
 801658a:	ebc2 0404 	rsbgt	r4, r2, r4
 801658e:	460e      	movgt	r6, r1
 8016590:	2200      	movle	r2, #0
 8016592:	2c00      	cmp	r4, #0
 8016594:	dd6e      	ble.n	8016674 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8016596:	b23f      	sxth	r7, r7
 8016598:	19e8      	adds	r0, r5, r7
 801659a:	1e41      	subs	r1, r0, #1
 801659c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80165a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80165a4:	1a09      	subs	r1, r1, r0
 80165a6:	2900      	cmp	r1, #0
 80165a8:	bfc8      	it	gt
 80165aa:	ebc1 0707 	rsbgt	r7, r1, r7
 80165ae:	429d      	cmp	r5, r3
 80165b0:	bfbd      	ittte	lt
 80165b2:	ebc5 0b03 	rsblt	fp, r5, r3
 80165b6:	ebcb 0707 	rsblt	r7, fp, r7
 80165ba:	461d      	movlt	r5, r3
 80165bc:	f04f 0b00 	movge.w	fp, #0
 80165c0:	2f00      	cmp	r7, #0
 80165c2:	dd57      	ble.n	8016674 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 80165c4:	fb08 2b0b 	mla	fp, r8, fp, r2
 80165c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80165cc:	46a9      	mov	r9, r5
 80165ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80165d0:	f7f8 fef0 	bl	800f3b4 <GUI_MEMDEV_GetDataPtr>
 80165d4:	eb00 020b 	add.w	r2, r0, fp
 80165d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80165da:	a911      	add	r1, sp, #68	; 0x44
 80165dc:	9000      	str	r0, [sp, #0]
 80165de:	9101      	str	r1, [sp, #4]
 80165e0:	4630      	mov	r0, r6
 80165e2:	4649      	mov	r1, r9
 80165e4:	4623      	mov	r3, r4
 80165e6:	f7fb fee1 	bl	80123ac <GUI__DoAlphaBlending>
 80165ea:	4682      	mov	sl, r0
 80165ec:	2800      	cmp	r0, #0
 80165ee:	d041      	beq.n	8016674 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 80165f0:	4a23      	ldr	r2, [pc, #140]	; (8016680 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 80165f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165f4:	4293      	cmp	r3, r2
 80165f6:	d01f      	beq.n	8016638 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 80165f8:	4621      	mov	r1, r4
 80165fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80165fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165fe:	f001 fbf4 	bl	8017dea <GUI__CompactPixelIndicesEx>
 8016602:	b9c8      	cbnz	r0, 8016638 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8016604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016606:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801660a:	f1bc 0f00 	cmp.w	ip, #0
 801660e:	d006      	beq.n	801661e <GUI_MEMDEV__WriteToActiveAlpha+0x126>
 8016610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016612:	4650      	mov	r0, sl
 8016614:	4651      	mov	r1, sl
 8016616:	b212      	sxth	r2, r2
 8016618:	2304      	movs	r3, #4
 801661a:	47e0      	blx	ip
 801661c:	e00c      	b.n	8016638 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 801661e:	4652      	mov	r2, sl
 8016620:	4641      	mov	r1, r8
 8016622:	6810      	ldr	r0, [r2, #0]
 8016624:	9207      	str	r2, [sp, #28]
 8016626:	9108      	str	r1, [sp, #32]
 8016628:	990e      	ldr	r1, [sp, #56]	; 0x38
 801662a:	4788      	blx	r1
 801662c:	9b08      	ldr	r3, [sp, #32]
 801662e:	9a07      	ldr	r2, [sp, #28]
 8016630:	1e59      	subs	r1, r3, #1
 8016632:	f842 0b04 	str.w	r0, [r2], #4
 8016636:	d1f4      	bne.n	8016622 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8016638:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801663a:	f8cd a010 	str.w	sl, [sp, #16]
 801663e:	2301      	movs	r3, #1
 8016640:	2100      	movs	r1, #0
 8016642:	f109 0e01 	add.w	lr, r9, #1
 8016646:	9300      	str	r3, [sp, #0]
 8016648:	9301      	str	r3, [sp, #4]
 801664a:	9002      	str	r0, [sp, #8]
 801664c:	9103      	str	r1, [sp, #12]
 801664e:	9105      	str	r1, [sp, #20]
 8016650:	4630      	mov	r0, r6
 8016652:	4622      	mov	r2, r4
 8016654:	4649      	mov	r1, r9
 8016656:	f8cd e020 	str.w	lr, [sp, #32]
 801665a:	f7fb f8f3 	bl	8011844 <LCD_DrawBitmap>
 801665e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8016662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016664:	1978      	adds	r0, r7, r5
 8016666:	2304      	movs	r3, #4
 8016668:	4560      	cmp	r0, ip
 801666a:	fb12 bb03 	smlabb	fp, r2, r3, fp
 801666e:	d001      	beq.n	8016674 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 8016670:	46e1      	mov	r9, ip
 8016672:	e7ac      	b.n	80165ce <GUI_MEMDEV__WriteToActiveAlpha+0xd6>
 8016674:	b013      	add	sp, #76	; 0x4c
 8016676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801667a:	bf00      	nop
 801667c:	20000308 	.word	0x20000308
 8016680:	080144c3 	.word	0x080144c3
 8016684:	2000eb5c 	.word	0x2000eb5c

08016688 <GUI_MEMDEV_WriteAt>:
 8016688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801668a:	460c      	mov	r4, r1
 801668c:	4615      	mov	r5, r2
 801668e:	4606      	mov	r6, r0
 8016690:	b330      	cbz	r0, 80166e0 <GUI_MEMDEV_WriteAt+0x58>
 8016692:	f7fd fc31 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016696:	4a13      	ldr	r2, [pc, #76]	; (80166e4 <GUI_MEMDEV_WriteAt+0x5c>)
 8016698:	8901      	ldrh	r1, [r0, #8]
 801669a:	9001      	str	r0, [sp, #4]
 801669c:	4294      	cmp	r4, r2
 801669e:	bf04      	itt	eq
 80166a0:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 80166a4:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 80166a8:	8940      	ldrh	r0, [r0, #10]
 80166aa:	f8ad 4008 	strh.w	r4, [sp, #8]
 80166ae:	1e4b      	subs	r3, r1, #1
 80166b0:	1e41      	subs	r1, r0, #1
 80166b2:	191a      	adds	r2, r3, r4
 80166b4:	a801      	add	r0, sp, #4
 80166b6:	194b      	adds	r3, r1, r5
 80166b8:	f8ad 200c 	strh.w	r2, [sp, #12]
 80166bc:	f8ad 500a 	strh.w	r5, [sp, #10]
 80166c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80166c4:	f7fd fc26 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80166c8:	a802      	add	r0, sp, #8
 80166ca:	f7f8 fabb 	bl	800ec44 <WM__InitIVRSearch>
 80166ce:	b138      	cbz	r0, 80166e0 <GUI_MEMDEV_WriteAt+0x58>
 80166d0:	4630      	mov	r0, r6
 80166d2:	4621      	mov	r1, r4
 80166d4:	462a      	mov	r2, r5
 80166d6:	f7f9 fc07 	bl	800fee8 <GUI_MEMDEV__WriteToActiveAt>
 80166da:	f7f8 f9f3 	bl	800eac4 <WM__GetNextIVR>
 80166de:	e7f6      	b.n	80166ce <GUI_MEMDEV_WriteAt+0x46>
 80166e0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80166e2:	bf00      	nop
 80166e4:	fffff001 	.word	0xfffff001

080166e8 <GUI_MEMDEV_Write>:
 80166e8:	4901      	ldr	r1, [pc, #4]	; (80166f0 <GUI_MEMDEV_Write+0x8>)
 80166ea:	460a      	mov	r2, r1
 80166ec:	f7ff bfcc 	b.w	8016688 <GUI_MEMDEV_WriteAt>
 80166f0:	fffff001 	.word	0xfffff001

080166f4 <GUI_USAGE_BM_AddPixel>:
 80166f4:	4603      	mov	r3, r0
 80166f6:	b510      	push	{r4, lr}
 80166f8:	f933 4b14 	ldrsh.w	r4, [r3], #20
 80166fc:	1b09      	subs	r1, r1, r4
 80166fe:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016702:	6900      	ldr	r0, [r0, #16]
 8016704:	1b12      	subs	r2, r2, r4
 8016706:	fb00 3302 	mla	r3, r0, r2, r3
 801670a:	10c8      	asrs	r0, r1, #3
 801670c:	2280      	movs	r2, #128	; 0x80
 801670e:	f001 0107 	and.w	r1, r1, #7
 8016712:	fa42 f101 	asr.w	r1, r2, r1
 8016716:	5c1a      	ldrb	r2, [r3, r0]
 8016718:	4311      	orrs	r1, r2
 801671a:	5419      	strb	r1, [r3, r0]
 801671c:	bd10      	pop	{r4, pc}

0801671e <GUI_USAGE_BM_GetNextDirty>:
 801671e:	b570      	push	{r4, r5, r6, lr}
 8016720:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8016724:	680b      	ldr	r3, [r1, #0]
 8016726:	8886      	ldrh	r6, [r0, #4]
 8016728:	42a2      	cmp	r2, r4
 801672a:	da43      	bge.n	80167b4 <GUI_USAGE_BM_GetNextDirty+0x96>
 801672c:	b236      	sxth	r6, r6
 801672e:	42b3      	cmp	r3, r6
 8016730:	6905      	ldr	r5, [r0, #16]
 8016732:	da3f      	bge.n	80167b4 <GUI_USAGE_BM_GetNextDirty+0x96>
 8016734:	3014      	adds	r0, #20
 8016736:	fb05 0202 	mla	r2, r5, r2, r0
 801673a:	10dc      	asrs	r4, r3, #3
 801673c:	1e70      	subs	r0, r6, #1
 801673e:	1915      	adds	r5, r2, r4
 8016740:	ebc4 00e0 	rsb	r0, r4, r0, asr #3
 8016744:	5d14      	ldrb	r4, [r2, r4]
 8016746:	f003 0207 	and.w	r2, r3, #7
 801674a:	fa04 f402 	lsl.w	r4, r4, r2
 801674e:	b2e4      	uxtb	r4, r4
 8016750:	3501      	adds	r5, #1
 8016752:	b93c      	cbnz	r4, 8016764 <GUI_USAGE_BM_GetNextDirty+0x46>
 8016754:	b378      	cbz	r0, 80167b6 <GUI_USAGE_BM_GetNextDirty+0x98>
 8016756:	3308      	adds	r3, #8
 8016758:	f815 4b01 	ldrb.w	r4, [r5], #1
 801675c:	3801      	subs	r0, #1
 801675e:	f023 0307 	bic.w	r3, r3, #7
 8016762:	e7f6      	b.n	8016752 <GUI_USAGE_BM_GetNextDirty+0x34>
 8016764:	0622      	lsls	r2, r4, #24
 8016766:	d403      	bmi.n	8016770 <GUI_USAGE_BM_GetNextDirty+0x52>
 8016768:	0062      	lsls	r2, r4, #1
 801676a:	b2d4      	uxtb	r4, r2
 801676c:	3301      	adds	r3, #1
 801676e:	e7f9      	b.n	8016764 <GUI_USAGE_BM_GetNextDirty+0x46>
 8016770:	2cff      	cmp	r4, #255	; 0xff
 8016772:	d008      	beq.n	8016786 <GUI_USAGE_BM_GetNextDirty+0x68>
 8016774:	461a      	mov	r2, r3
 8016776:	f004 0640 	and.w	r6, r4, #64	; 0x40
 801677a:	b2f6      	uxtb	r6, r6
 801677c:	b126      	cbz	r6, 8016788 <GUI_USAGE_BM_GetNextDirty+0x6a>
 801677e:	0064      	lsls	r4, r4, #1
 8016780:	b2e4      	uxtb	r4, r4
 8016782:	3201      	adds	r2, #1
 8016784:	e7f7      	b.n	8016776 <GUI_USAGE_BM_GetNextDirty+0x58>
 8016786:	1dda      	adds	r2, r3, #7
 8016788:	f002 0407 	and.w	r4, r2, #7
 801678c:	2c07      	cmp	r4, #7
 801678e:	d10d      	bne.n	80167ac <GUI_USAGE_BM_GetNextDirty+0x8e>
 8016790:	3801      	subs	r0, #1
 8016792:	d40b      	bmi.n	80167ac <GUI_USAGE_BM_GetNextDirty+0x8e>
 8016794:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016798:	2cff      	cmp	r4, #255	; 0xff
 801679a:	d101      	bne.n	80167a0 <GUI_USAGE_BM_GetNextDirty+0x82>
 801679c:	3208      	adds	r2, #8
 801679e:	e7f7      	b.n	8016790 <GUI_USAGE_BM_GetNextDirty+0x72>
 80167a0:	0620      	lsls	r0, r4, #24
 80167a2:	d503      	bpl.n	80167ac <GUI_USAGE_BM_GetNextDirty+0x8e>
 80167a4:	0060      	lsls	r0, r4, #1
 80167a6:	b2c4      	uxtb	r4, r0
 80167a8:	3201      	adds	r2, #1
 80167aa:	e7f9      	b.n	80167a0 <GUI_USAGE_BM_GetNextDirty+0x82>
 80167ac:	600b      	str	r3, [r1, #0]
 80167ae:	1ad1      	subs	r1, r2, r3
 80167b0:	1c48      	adds	r0, r1, #1
 80167b2:	bd70      	pop	{r4, r5, r6, pc}
 80167b4:	2000      	movs	r0, #0
 80167b6:	bd70      	pop	{r4, r5, r6, pc}

080167b8 <_GUI_USAGE_BM_Delete>:
 80167b8:	f7fd bbd8 	b.w	8013f6c <GUI_ALLOC_Free>

080167bc <GUI_USAGE_BM_Clear>:
 80167bc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80167c0:	6902      	ldr	r2, [r0, #16]
 80167c2:	2100      	movs	r1, #0
 80167c4:	3014      	adds	r0, #20
 80167c6:	435a      	muls	r2, r3
 80167c8:	f002 bf14 	b.w	80195f4 <memset>

080167cc <GUI_USAGE_BM_AddHLine>:
 80167cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ce:	f9b0 4000 	ldrsh.w	r4, [r0]
 80167d2:	1b09      	subs	r1, r1, r4
 80167d4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80167d8:	42a1      	cmp	r1, r4
 80167da:	da2e      	bge.n	801683a <GUI_USAGE_BM_AddHLine+0x6e>
 80167dc:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 80167e0:	f100 0614 	add.w	r6, r0, #20
 80167e4:	18cb      	adds	r3, r1, r3
 80167e6:	6900      	ldr	r0, [r0, #16]
 80167e8:	1b52      	subs	r2, r2, r5
 80167ea:	1e5d      	subs	r5, r3, #1
 80167ec:	fb00 6202 	mla	r2, r0, r2, r6
 80167f0:	10cc      	asrs	r4, r1, #3
 80167f2:	f001 0607 	and.w	r6, r1, #7
 80167f6:	43eb      	mvns	r3, r5
 80167f8:	21ff      	movs	r1, #255	; 0xff
 80167fa:	fa41 f006 	asr.w	r0, r1, r6
 80167fe:	f003 0607 	and.w	r6, r3, #7
 8016802:	fa01 f306 	lsl.w	r3, r1, r6
 8016806:	ebd4 05e5 	rsbs	r5, r4, r5, asr #3
 801680a:	b2de      	uxtb	r6, r3
 801680c:	eb02 0704 	add.w	r7, r2, r4
 8016810:	b2c0      	uxtb	r0, r0
 8016812:	5d13      	ldrb	r3, [r2, r4]
 8016814:	d103      	bne.n	801681e <GUI_USAGE_BM_AddHLine+0x52>
 8016816:	4006      	ands	r6, r0
 8016818:	4333      	orrs	r3, r6
 801681a:	5513      	strb	r3, [r2, r4]
 801681c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801681e:	4318      	orrs	r0, r3
 8016820:	3d01      	subs	r5, #1
 8016822:	5510      	strb	r0, [r2, r4]
 8016824:	1c7c      	adds	r4, r7, #1
 8016826:	2d00      	cmp	r5, #0
 8016828:	dd04      	ble.n	8016834 <GUI_USAGE_BM_AddHLine+0x68>
 801682a:	4620      	mov	r0, r4
 801682c:	462a      	mov	r2, r5
 801682e:	f002 fee1 	bl	80195f4 <memset>
 8016832:	1964      	adds	r4, r4, r5
 8016834:	7821      	ldrb	r1, [r4, #0]
 8016836:	430e      	orrs	r6, r1
 8016838:	7026      	strb	r6, [r4, #0]
 801683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801683c <GUI_USAGE_BM_Create>:
 801683c:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 8016840:	f102 060f 	add.w	r6, r2, #15
 8016844:	4682      	mov	sl, r0
 8016846:	1130      	asrs	r0, r6, #4
 8016848:	0046      	lsls	r6, r0, #1
 801684a:	fb06 f003 	mul.w	r0, r6, r3
 801684e:	3014      	adds	r0, #20
 8016850:	4689      	mov	r9, r1
 8016852:	4690      	mov	r8, r2
 8016854:	461f      	mov	r7, r3
 8016856:	f7fd fdc3 	bl	80143e0 <GUI_ALLOC_AllocZero>
 801685a:	4683      	mov	fp, r0
 801685c:	b198      	cbz	r0, 8016886 <GUI_USAGE_BM_Create+0x4a>
 801685e:	f7fd fb4b 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016862:	4b0a      	ldr	r3, [pc, #40]	; (801688c <GUI_USAGE_BM_Create+0x50>)
 8016864:	4604      	mov	r4, r0
 8016866:	a802      	add	r0, sp, #8
 8016868:	2101      	movs	r1, #1
 801686a:	f840 4d04 	str.w	r4, [r0, #-4]!
 801686e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8016872:	f8a4 a000 	strh.w	sl, [r4]
 8016876:	f8a4 9002 	strh.w	r9, [r4, #2]
 801687a:	80e7      	strh	r7, [r4, #6]
 801687c:	60a3      	str	r3, [r4, #8]
 801687e:	81a1      	strh	r1, [r4, #12]
 8016880:	6126      	str	r6, [r4, #16]
 8016882:	f7fd fb47 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016886:	4658      	mov	r0, fp
 8016888:	e8bd 8fdc 	ldmia.w	sp!, {r2, r3, r4, r6, r7, r8, r9, sl, fp, pc}
 801688c:	08034454 	.word	0x08034454

08016890 <GUI_USAGE_DecUseCnt>:
 8016890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016892:	4605      	mov	r5, r0
 8016894:	f7fd fb30 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016898:	4602      	mov	r2, r0
 801689a:	a802      	add	r0, sp, #8
 801689c:	8994      	ldrh	r4, [r2, #12]
 801689e:	f840 2d04 	str.w	r2, [r0, #-4]!
 80168a2:	1e61      	subs	r1, r4, #1
 80168a4:	b28c      	uxth	r4, r1
 80168a6:	8194      	strh	r4, [r2, #12]
 80168a8:	f7fd fb34 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80168ac:	b914      	cbnz	r4, 80168b4 <GUI_USAGE_DecUseCnt+0x24>
 80168ae:	4628      	mov	r0, r5
 80168b0:	f7fd fb5c 	bl	8013f6c <GUI_ALLOC_Free>
 80168b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080168b6 <GUI_USAGE_AddRect>:
 80168b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168ba:	4605      	mov	r5, r0
 80168bc:	4689      	mov	r9, r1
 80168be:	4614      	mov	r4, r2
 80168c0:	4698      	mov	r8, r3
 80168c2:	68a8      	ldr	r0, [r5, #8]
 80168c4:	4649      	mov	r1, r9
 80168c6:	6846      	ldr	r6, [r0, #4]
 80168c8:	4643      	mov	r3, r8
 80168ca:	4628      	mov	r0, r5
 80168cc:	1c57      	adds	r7, r2, #1
 80168ce:	47b0      	blx	r6
 80168d0:	9908      	ldr	r1, [sp, #32]
 80168d2:	190b      	adds	r3, r1, r4
 80168d4:	42bb      	cmp	r3, r7
 80168d6:	463a      	mov	r2, r7
 80168d8:	d1f3      	bne.n	80168c2 <GUI_USAGE_AddRect+0xc>
 80168da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080168e0 <GUI_MEMDEV_ReduceYSize>:
 80168e0:	b513      	push	{r0, r1, r4, lr}
 80168e2:	460c      	mov	r4, r1
 80168e4:	b918      	cbnz	r0, 80168ee <GUI_MEMDEV_ReduceYSize+0xe>
 80168e6:	4b08      	ldr	r3, [pc, #32]	; (8016908 <GUI_MEMDEV_ReduceYSize+0x28>)
 80168e8:	6818      	ldr	r0, [r3, #0]
 80168ea:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80168ec:	b150      	cbz	r0, 8016904 <GUI_MEMDEV_ReduceYSize+0x24>
 80168ee:	f7fd fb03 	bl	8013ef8 <GUI_ALLOC_LockH>
 80168f2:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 80168f6:	9001      	str	r0, [sp, #4]
 80168f8:	428c      	cmp	r4, r1
 80168fa:	bfb8      	it	lt
 80168fc:	8144      	strhlt	r4, [r0, #10]
 80168fe:	a801      	add	r0, sp, #4
 8016900:	f7fd fb08 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016904:	bd1c      	pop	{r2, r3, r4, pc}
 8016906:	bf00      	nop
 8016908:	20000308 	.word	0x20000308

0801690c <GUI_MEMDEV_Clear>:
 801690c:	b513      	push	{r0, r1, r4, lr}
 801690e:	b918      	cbnz	r0, 8016918 <GUI_MEMDEV_Clear+0xc>
 8016910:	4b0d      	ldr	r3, [pc, #52]	; (8016948 <GUI_MEMDEV_Clear+0x3c>)
 8016912:	6818      	ldr	r0, [r3, #0]
 8016914:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016916:	b1a8      	cbz	r0, 8016944 <GUI_MEMDEV_Clear+0x38>
 8016918:	f7fd faee 	bl	8013ef8 <GUI_ALLOC_LockH>
 801691c:	a902      	add	r1, sp, #8
 801691e:	6944      	ldr	r4, [r0, #20]
 8016920:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016924:	4668      	mov	r0, sp
 8016926:	f7fd faf5 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801692a:	b15c      	cbz	r4, 8016944 <GUI_MEMDEV_Clear+0x38>
 801692c:	4620      	mov	r0, r4
 801692e:	f7fd fae3 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016932:	ac02      	add	r4, sp, #8
 8016934:	6883      	ldr	r3, [r0, #8]
 8016936:	f844 0d04 	str.w	r0, [r4, #-4]!
 801693a:	6899      	ldr	r1, [r3, #8]
 801693c:	4788      	blx	r1
 801693e:	4620      	mov	r0, r4
 8016940:	f7fd fae8 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016944:	bd1c      	pop	{r2, r3, r4, pc}
 8016946:	bf00      	nop
 8016948:	20000308 	.word	0x20000308

0801694c <_GetDevData>:
 801694c:	4802      	ldr	r0, [pc, #8]	; (8016958 <_GetDevData+0xc>)
 801694e:	2901      	cmp	r1, #1
 8016950:	bf18      	it	ne
 8016952:	2000      	movne	r0, #0
 8016954:	4770      	bx	lr
 8016956:	bf00      	nop
 8016958:	080344ac 	.word	0x080344ac

0801695c <_GetDevFunc>:
 801695c:	4802      	ldr	r0, [pc, #8]	; (8016968 <_GetDevFunc+0xc>)
 801695e:	2916      	cmp	r1, #22
 8016960:	bf18      	it	ne
 8016962:	2000      	movne	r0, #0
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop
 8016968:	08015de1 	.word	0x08015de1

0801696c <_SetOrg>:
 801696c:	6800      	ldr	r0, [r0, #0]
 801696e:	b508      	push	{r3, lr}
 8016970:	68c3      	ldr	r3, [r0, #12]
 8016972:	6a1b      	ldr	r3, [r3, #32]
 8016974:	4798      	blx	r3
 8016976:	bd08      	pop	{r3, pc}

08016978 <_GetDevProp>:
 8016978:	6800      	ldr	r0, [r0, #0]
 801697a:	b508      	push	{r3, lr}
 801697c:	68c3      	ldr	r3, [r0, #12]
 801697e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016980:	4790      	blx	r2
 8016982:	bd08      	pop	{r3, pc}

08016984 <_GetRect>:
 8016984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016986:	6880      	ldr	r0, [r0, #8]
 8016988:	460c      	mov	r4, r1
 801698a:	f7fd fab5 	bl	8013ef8 <GUI_ALLOC_LockH>
 801698e:	4603      	mov	r3, r0
 8016990:	a802      	add	r0, sp, #8
 8016992:	8899      	ldrh	r1, [r3, #4]
 8016994:	891d      	ldrh	r5, [r3, #8]
 8016996:	88da      	ldrh	r2, [r3, #6]
 8016998:	f840 3d04 	str.w	r3, [r0, #-4]!
 801699c:	895b      	ldrh	r3, [r3, #10]
 801699e:	8021      	strh	r1, [r4, #0]
 80169a0:	1949      	adds	r1, r1, r5
 80169a2:	3901      	subs	r1, #1
 80169a4:	8062      	strh	r2, [r4, #2]
 80169a6:	18d2      	adds	r2, r2, r3
 80169a8:	80a1      	strh	r1, [r4, #4]
 80169aa:	1e51      	subs	r1, r2, #1
 80169ac:	80e1      	strh	r1, [r4, #6]
 80169ae:	f7fd fab1 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80169b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080169b4 <_XY2PTR>:
 80169b4:	4b0e      	ldr	r3, [pc, #56]	; (80169f0 <_XY2PTR+0x3c>)
 80169b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80169b8:	4605      	mov	r5, r0
 80169ba:	6818      	ldr	r0, [r3, #0]
 80169bc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80169be:	460e      	mov	r6, r1
 80169c0:	f7fd fa9a 	bl	8013ef8 <GUI_ALLOC_LockH>
 80169c4:	4602      	mov	r2, r0
 80169c6:	a802      	add	r0, sp, #8
 80169c8:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 80169cc:	68d3      	ldr	r3, [r2, #12]
 80169ce:	f840 2d04 	str.w	r2, [r0, #-4]!
 80169d2:	f102 0118 	add.w	r1, r2, #24
 80169d6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80169da:	1b36      	subs	r6, r6, r4
 80169dc:	fb03 1106 	mla	r1, r3, r6, r1
 80169e0:	1aad      	subs	r5, r5, r2
 80169e2:	eb01 0445 	add.w	r4, r1, r5, lsl #1
 80169e6:	f7fd fa95 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80169ea:	4620      	mov	r0, r4
 80169ec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80169ee:	bf00      	nop
 80169f0:	20000308 	.word	0x20000308

080169f4 <_GetPixelIndex>:
 80169f4:	b508      	push	{r3, lr}
 80169f6:	4608      	mov	r0, r1
 80169f8:	4611      	mov	r1, r2
 80169fa:	f7ff ffdb 	bl	80169b4 <_XY2PTR>
 80169fe:	8800      	ldrh	r0, [r0, #0]
 8016a00:	bd08      	pop	{r3, pc}
	...

08016a04 <_XorPixel>:
 8016a04:	4b14      	ldr	r3, [pc, #80]	; (8016a58 <_XorPixel+0x54>)
 8016a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a08:	4607      	mov	r7, r0
 8016a0a:	6818      	ldr	r0, [r3, #0]
 8016a0c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016a0e:	4615      	mov	r5, r2
 8016a10:	460e      	mov	r6, r1
 8016a12:	f7fd fa71 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016a16:	4629      	mov	r1, r5
 8016a18:	9000      	str	r0, [sp, #0]
 8016a1a:	4630      	mov	r0, r6
 8016a1c:	f7ff ffca 	bl	80169b4 <_XY2PTR>
 8016a20:	6939      	ldr	r1, [r7, #16]
 8016a22:	4604      	mov	r4, r0
 8016a24:	688a      	ldr	r2, [r1, #8]
 8016a26:	4790      	blx	r2
 8016a28:	8823      	ldrh	r3, [r4, #0]
 8016a2a:	4058      	eors	r0, r3
 8016a2c:	8020      	strh	r0, [r4, #0]
 8016a2e:	9800      	ldr	r0, [sp, #0]
 8016a30:	6940      	ldr	r0, [r0, #20]
 8016a32:	b160      	cbz	r0, 8016a4e <_XorPixel+0x4a>
 8016a34:	f7fd fa60 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016a38:	ac02      	add	r4, sp, #8
 8016a3a:	6882      	ldr	r2, [r0, #8]
 8016a3c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8016a40:	6813      	ldr	r3, [r2, #0]
 8016a42:	4631      	mov	r1, r6
 8016a44:	462a      	mov	r2, r5
 8016a46:	4798      	blx	r3
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f7fd fa63 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016a4e:	4668      	mov	r0, sp
 8016a50:	f7fd fa60 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016a54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a56:	bf00      	nop
 8016a58:	20000308 	.word	0x20000308

08016a5c <_SetPixelIndex>:
 8016a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a5e:	461c      	mov	r4, r3
 8016a60:	4b10      	ldr	r3, [pc, #64]	; (8016aa4 <_SetPixelIndex+0x48>)
 8016a62:	6818      	ldr	r0, [r3, #0]
 8016a64:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016a66:	460e      	mov	r6, r1
 8016a68:	4615      	mov	r5, r2
 8016a6a:	f7fd fa45 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016a6e:	4629      	mov	r1, r5
 8016a70:	9000      	str	r0, [sp, #0]
 8016a72:	4630      	mov	r0, r6
 8016a74:	f7ff ff9e 	bl	80169b4 <_XY2PTR>
 8016a78:	9900      	ldr	r1, [sp, #0]
 8016a7a:	8004      	strh	r4, [r0, #0]
 8016a7c:	6948      	ldr	r0, [r1, #20]
 8016a7e:	b160      	cbz	r0, 8016a9a <_SetPixelIndex+0x3e>
 8016a80:	f7fd fa3a 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016a84:	ac02      	add	r4, sp, #8
 8016a86:	6883      	ldr	r3, [r0, #8]
 8016a88:	f844 0d04 	str.w	r0, [r4, #-4]!
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	4631      	mov	r1, r6
 8016a90:	462a      	mov	r2, r5
 8016a92:	4798      	blx	r3
 8016a94:	4620      	mov	r0, r4
 8016a96:	f7fd fa3d 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016a9a:	4668      	mov	r0, sp
 8016a9c:	f7fd fa3a 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016aa0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8016aa2:	bf00      	nop
 8016aa4:	20000308 	.word	0x20000308

08016aa8 <_DrawVLine>:
 8016aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016aac:	461e      	mov	r6, r3
 8016aae:	4b2b      	ldr	r3, [pc, #172]	; (8016b5c <_DrawVLine+0xb4>)
 8016ab0:	4681      	mov	r9, r0
 8016ab2:	6818      	ldr	r0, [r3, #0]
 8016ab4:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016ab6:	460f      	mov	r7, r1
 8016ab8:	4614      	mov	r4, r2
 8016aba:	f7fd fa1d 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016abe:	9000      	str	r0, [sp, #0]
 8016ac0:	6940      	ldr	r0, [r0, #20]
 8016ac2:	b108      	cbz	r0, 8016ac8 <_DrawVLine+0x20>
 8016ac4:	f7fd fa18 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016ac8:	9001      	str	r0, [sp, #4]
 8016aca:	4621      	mov	r1, r4
 8016acc:	4638      	mov	r0, r7
 8016ace:	f7ff ff71 	bl	80169b4 <_XY2PTR>
 8016ad2:	4a22      	ldr	r2, [pc, #136]	; (8016b5c <_DrawVLine+0xb4>)
 8016ad4:	9900      	ldr	r1, [sp, #0]
 8016ad6:	6813      	ldr	r3, [r2, #0]
 8016ad8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8016adc:	4605      	mov	r5, r0
 8016ade:	7c18      	ldrb	r0, [r3, #16]
 8016ae0:	07c2      	lsls	r2, r0, #31
 8016ae2:	d51f      	bpl.n	8016b24 <_DrawVLine+0x7c>
 8016ae4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016ae8:	6881      	ldr	r1, [r0, #8]
 8016aea:	4788      	blx	r1
 8016aec:	fa1f f880 	uxth.w	r8, r0
 8016af0:	9801      	ldr	r0, [sp, #4]
 8016af2:	b120      	cbz	r0, 8016afe <_DrawVLine+0x56>
 8016af4:	6882      	ldr	r2, [r0, #8]
 8016af6:	4639      	mov	r1, r7
 8016af8:	6813      	ldr	r3, [r2, #0]
 8016afa:	4622      	mov	r2, r4
 8016afc:	4798      	blx	r3
 8016afe:	9a00      	ldr	r2, [sp, #0]
 8016b00:	8828      	ldrh	r0, [r5, #0]
 8016b02:	68d3      	ldr	r3, [r2, #12]
 8016b04:	3401      	adds	r4, #1
 8016b06:	ea88 0100 	eor.w	r1, r8, r0
 8016b0a:	42b4      	cmp	r4, r6
 8016b0c:	8029      	strh	r1, [r5, #0]
 8016b0e:	441d      	add	r5, r3
 8016b10:	ddee      	ble.n	8016af0 <_DrawVLine+0x48>
 8016b12:	4668      	mov	r0, sp
 8016b14:	f7fd f9fe 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016b18:	9801      	ldr	r0, [sp, #4]
 8016b1a:	b1e8      	cbz	r0, 8016b58 <_DrawVLine+0xb0>
 8016b1c:	a801      	add	r0, sp, #4
 8016b1e:	f7fd f9f9 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016b22:	e019      	b.n	8016b58 <_DrawVLine+0xb0>
 8016b24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016b26:	9a01      	ldr	r2, [sp, #4]
 8016b28:	f8d1 9000 	ldr.w	r9, [r1]
 8016b2c:	b162      	cbz	r2, 8016b48 <_DrawVLine+0xa0>
 8016b2e:	9801      	ldr	r0, [sp, #4]
 8016b30:	6883      	ldr	r3, [r0, #8]
 8016b32:	4622      	mov	r2, r4
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	4639      	mov	r1, r7
 8016b38:	3401      	adds	r4, #1
 8016b3a:	4798      	blx	r3
 8016b3c:	42b4      	cmp	r4, r6
 8016b3e:	f8a5 9000 	strh.w	r9, [r5]
 8016b42:	4445      	add	r5, r8
 8016b44:	ddf3      	ble.n	8016b2e <_DrawVLine+0x86>
 8016b46:	e7e4      	b.n	8016b12 <_DrawVLine+0x6a>
 8016b48:	1b34      	subs	r4, r6, r4
 8016b4a:	3401      	adds	r4, #1
 8016b4c:	3c01      	subs	r4, #1
 8016b4e:	f8a5 9000 	strh.w	r9, [r5]
 8016b52:	4445      	add	r5, r8
 8016b54:	d1fa      	bne.n	8016b4c <_DrawVLine+0xa4>
 8016b56:	e7dc      	b.n	8016b12 <_DrawVLine+0x6a>
 8016b58:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8016b5c:	20000308 	.word	0x20000308

08016b60 <_FillRect>:
 8016b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b64:	461e      	mov	r6, r3
 8016b66:	4b29      	ldr	r3, [pc, #164]	; (8016c0c <_FillRect+0xac>)
 8016b68:	4614      	mov	r4, r2
 8016b6a:	681a      	ldr	r2, [r3, #0]
 8016b6c:	460f      	mov	r7, r1
 8016b6e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8016b70:	b085      	sub	sp, #20
 8016b72:	4683      	mov	fp, r0
 8016b74:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8016b76:	f8d1 9000 	ldr.w	r9, [r1]
 8016b7a:	f7fd f9bd 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016b7e:	4621      	mov	r1, r4
 8016b80:	9002      	str	r0, [sp, #8]
 8016b82:	4638      	mov	r0, r7
 8016b84:	f7ff ff16 	bl	80169b4 <_XY2PTR>
 8016b88:	4605      	mov	r5, r0
 8016b8a:	9802      	ldr	r0, [sp, #8]
 8016b8c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8016b90:	6940      	ldr	r0, [r0, #20]
 8016b92:	1bf6      	subs	r6, r6, r7
 8016b94:	3601      	adds	r6, #1
 8016b96:	b338      	cbz	r0, 8016be8 <_FillRect+0x88>
 8016b98:	f7fd f9ae 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b9e:	f10d 0810 	add.w	r8, sp, #16
 8016ba2:	1b1a      	subs	r2, r3, r4
 8016ba4:	f848 0d04 	str.w	r0, [r8, #-4]!
 8016ba8:	1c51      	adds	r1, r2, #1
 8016baa:	9100      	str	r1, [sp, #0]
 8016bac:	4622      	mov	r2, r4
 8016bae:	4639      	mov	r1, r7
 8016bb0:	4633      	mov	r3, r6
 8016bb2:	f7ff fe80 	bl	80168b6 <GUI_USAGE_AddRect>
 8016bb6:	4640      	mov	r0, r8
 8016bb8:	f7fd f9ac 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016bbc:	e014      	b.n	8016be8 <_FillRect+0x88>
 8016bbe:	4b13      	ldr	r3, [pc, #76]	; (8016c0c <_FillRect+0xac>)
 8016bc0:	681a      	ldr	r2, [r3, #0]
 8016bc2:	7c11      	ldrb	r1, [r2, #16]
 8016bc4:	07c9      	lsls	r1, r1, #31
 8016bc6:	d513      	bpl.n	8016bf0 <_FillRect+0x90>
 8016bc8:	f8db 0010 	ldr.w	r0, [fp, #16]
 8016bcc:	6883      	ldr	r3, [r0, #8]
 8016bce:	4798      	blx	r3
 8016bd0:	462a      	mov	r2, r5
 8016bd2:	b280      	uxth	r0, r0
 8016bd4:	4633      	mov	r3, r6
 8016bd6:	8811      	ldrh	r1, [r2, #0]
 8016bd8:	3b01      	subs	r3, #1
 8016bda:	ea81 0100 	eor.w	r1, r1, r0
 8016bde:	f822 1b02 	strh.w	r1, [r2], #2
 8016be2:	d1f8      	bne.n	8016bd6 <_FillRect+0x76>
 8016be4:	4455      	add	r5, sl
 8016be6:	3401      	adds	r4, #1
 8016be8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016bea:	4284      	cmp	r4, r0
 8016bec:	dde7      	ble.n	8016bbe <_FillRect+0x5e>
 8016bee:	e006      	b.n	8016bfe <_FillRect+0x9e>
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	fa1f f189 	uxth.w	r1, r9
 8016bf6:	4632      	mov	r2, r6
 8016bf8:	f7fa ffff 	bl	8011bfa <GUI__memset16>
 8016bfc:	e7f2      	b.n	8016be4 <_FillRect+0x84>
 8016bfe:	a802      	add	r0, sp, #8
 8016c00:	f7fd f988 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016c04:	b005      	add	sp, #20
 8016c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c0a:	bf00      	nop
 8016c0c:	20000308 	.word	0x20000308

08016c10 <_DrawHLine>:
 8016c10:	b507      	push	{r0, r1, r2, lr}
 8016c12:	9200      	str	r2, [sp, #0]
 8016c14:	f7ff ffa4 	bl	8016b60 <_FillRect>
 8016c18:	bd0e      	pop	{r1, r2, r3, pc}
	...

08016c1c <_DrawBitmap>:
 8016c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c20:	469b      	mov	fp, r3
 8016c22:	b095      	sub	sp, #84	; 0x54
 8016c24:	4b8c      	ldr	r3, [pc, #560]	; (8016e58 <_DrawBitmap+0x23c>)
 8016c26:	900e      	str	r0, [sp, #56]	; 0x38
 8016c28:	6818      	ldr	r0, [r3, #0]
 8016c2a:	920a      	str	r2, [sp, #40]	; 0x28
 8016c2c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016c2e:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8016c32:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8016c34:	460c      	mov	r4, r1
 8016c36:	f7fd f95f 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016c3a:	9012      	str	r0, [sp, #72]	; 0x48
 8016c3c:	6940      	ldr	r0, [r0, #20]
 8016c3e:	b108      	cbz	r0, 8016c44 <_DrawBitmap+0x28>
 8016c40:	f7fd f95a 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016c44:	9013      	str	r0, [sp, #76]	; 0x4c
 8016c46:	a814      	add	r0, sp, #80	; 0x50
 8016c48:	f850 1d08 	ldr.w	r1, [r0, #-8]!
 8016c4c:	68ca      	ldr	r2, [r1, #12]
 8016c4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8016c50:	f7fd f960 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8016c54:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8016c56:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016c58:	19e4      	adds	r4, r4, r7
 8016c5a:	9406      	str	r4, [sp, #24]
 8016c5c:	b158      	cbz	r0, 8016c76 <_DrawBitmap+0x5a>
 8016c5e:	4b7e      	ldr	r3, [pc, #504]	; (8016e58 <_DrawBitmap+0x23c>)
 8016c60:	6819      	ldr	r1, [r3, #0]
 8016c62:	7c0a      	ldrb	r2, [r1, #16]
 8016c64:	0797      	lsls	r7, r2, #30
 8016c66:	d106      	bne.n	8016c76 <_DrawBitmap+0x5a>
 8016c68:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8016c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c6c:	9700      	str	r7, [sp, #0]
 8016c6e:	4621      	mov	r1, r4
 8016c70:	465b      	mov	r3, fp
 8016c72:	f7ff fe20 	bl	80168b6 <GUI_USAGE_AddRect>
 8016c76:	9806      	ldr	r0, [sp, #24]
 8016c78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016c7a:	f7ff fe9b 	bl	80169b4 <_XY2PTR>
 8016c7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016c80:	2b10      	cmp	r3, #16
 8016c82:	4604      	mov	r4, r0
 8016c84:	d139      	bne.n	8016cfa <_DrawBitmap+0xde>
 8016c86:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016c88:	b11e      	cbz	r6, 8016c92 <_DrawBitmap+0x76>
 8016c8a:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8016c8e:	2500      	movs	r5, #0
 8016c90:	e014      	b.n	8016cbc <_DrawBitmap+0xa0>
 8016c92:	4972      	ldr	r1, [pc, #456]	; (8016e5c <_DrawBitmap+0x240>)
 8016c94:	680d      	ldr	r5, [r1, #0]
 8016c96:	2d00      	cmp	r5, #0
 8016c98:	d0f7      	beq.n	8016c8a <_DrawBitmap+0x6e>
 8016c9a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8016c9c:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8016c9e:	9600      	str	r6, [sp, #0]
 8016ca0:	9701      	str	r7, [sp, #4]
 8016ca2:	4651      	mov	r1, sl
 8016ca4:	465a      	mov	r2, fp
 8016ca6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016ca8:	47a8      	blx	r5
 8016caa:	e353      	b.n	8017354 <_DrawBitmap+0x738>
 8016cac:	f1ba 0f00 	cmp.w	sl, #0
 8016cb0:	d10a      	bne.n	8016cc8 <_DrawBitmap+0xac>
 8016cb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cb6:	4492      	add	sl, r2
 8016cb8:	1864      	adds	r4, r4, r1
 8016cba:	3501      	adds	r5, #1
 8016cbc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8016cbe:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8016cc2:	42bd      	cmp	r5, r7
 8016cc4:	dbf2      	blt.n	8016cac <_DrawBitmap+0x90>
 8016cc6:	e013      	b.n	8016cf0 <_DrawBitmap+0xd4>
 8016cc8:	2c00      	cmp	r4, #0
 8016cca:	d0f2      	beq.n	8016cb2 <_DrawBitmap+0x96>
 8016ccc:	4620      	mov	r0, r4
 8016cce:	4651      	mov	r1, sl
 8016cd0:	4632      	mov	r2, r6
 8016cd2:	f7ea f99f 	bl	8001014 <memcpy>
 8016cd6:	f1b8 0f00 	cmp.w	r8, #0
 8016cda:	d0ea      	beq.n	8016cb2 <_DrawBitmap+0x96>
 8016cdc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ce2:	6847      	ldr	r7, [r0, #4]
 8016ce4:	9906      	ldr	r1, [sp, #24]
 8016ce6:	18ea      	adds	r2, r5, r3
 8016ce8:	4640      	mov	r0, r8
 8016cea:	465b      	mov	r3, fp
 8016cec:	47b8      	blx	r7
 8016cee:	e7e0      	b.n	8016cb2 <_DrawBitmap+0x96>
 8016cf0:	f1b8 0f00 	cmp.w	r8, #0
 8016cf4:	f040 832b 	bne.w	801734e <_DrawBitmap+0x732>
 8016cf8:	e32c      	b.n	8017354 <_DrawBitmap+0x738>
 8016cfa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8016cfc:	2817      	cmp	r0, #23
 8016cfe:	dd39      	ble.n	8016d74 <_DrawBitmap+0x158>
 8016d00:	2600      	movs	r6, #0
 8016d02:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8016d04:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016d06:	42be      	cmp	r6, r7
 8016d08:	f280 80a1 	bge.w	8016e4e <_DrawBitmap+0x232>
 8016d0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016d0e:	eb06 0907 	add.w	r9, r6, r7
 8016d12:	f1ba 0f00 	cmp.w	sl, #0
 8016d16:	d027      	beq.n	8016d68 <_DrawBitmap+0x14c>
 8016d18:	b334      	cbz	r4, 8016d68 <_DrawBitmap+0x14c>
 8016d1a:	b135      	cbz	r5, 8016d2a <_DrawBitmap+0x10e>
 8016d1c:	68aa      	ldr	r2, [r5, #8]
 8016d1e:	9906      	ldr	r1, [sp, #24]
 8016d20:	6857      	ldr	r7, [r2, #4]
 8016d22:	4628      	mov	r0, r5
 8016d24:	464a      	mov	r2, r9
 8016d26:	465b      	mov	r3, fp
 8016d28:	47b8      	blx	r7
 8016d2a:	1ea3      	subs	r3, r4, #2
 8016d2c:	f10a 0804 	add.w	r8, sl, #4
 8016d30:	9307      	str	r3, [sp, #28]
 8016d32:	465f      	mov	r7, fp
 8016d34:	9806      	ldr	r0, [sp, #24]
 8016d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d38:	eb00 010b 	add.w	r1, r0, fp
 8016d3c:	6913      	ldr	r3, [r2, #16]
 8016d3e:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8016d42:	681a      	ldr	r2, [r3, #0]
 8016d44:	1bc9      	subs	r1, r1, r7
 8016d46:	9105      	str	r1, [sp, #20]
 8016d48:	4790      	blx	r2
 8016d4a:	9907      	ldr	r1, [sp, #28]
 8016d4c:	f821 0f02 	strh.w	r0, [r1, #2]!
 8016d50:	9107      	str	r1, [sp, #28]
 8016d52:	9905      	ldr	r1, [sp, #20]
 8016d54:	b125      	cbz	r5, 8016d60 <_DrawBitmap+0x144>
 8016d56:	68a8      	ldr	r0, [r5, #8]
 8016d58:	464a      	mov	r2, r9
 8016d5a:	6803      	ldr	r3, [r0, #0]
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	4798      	blx	r3
 8016d60:	3f01      	subs	r7, #1
 8016d62:	f108 0804 	add.w	r8, r8, #4
 8016d66:	d1e5      	bne.n	8016d34 <_DrawBitmap+0x118>
 8016d68:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d6c:	44aa      	add	sl, r5
 8016d6e:	18a4      	adds	r4, r4, r2
 8016d70:	3601      	adds	r6, #1
 8016d72:	e7c6      	b.n	8016d02 <_DrawBitmap+0xe6>
 8016d74:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8016d76:	2908      	cmp	r1, #8
 8016d78:	d172      	bne.n	8016e60 <_DrawBitmap+0x244>
 8016d7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016d7c:	3402      	adds	r4, #2
 8016d7e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016d80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016d82:	1b79      	subs	r1, r7, r5
 8016d84:	1ea0      	subs	r0, r4, #2
 8016d86:	4299      	cmp	r1, r3
 8016d88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016d8a:	da60      	bge.n	8016e4e <_DrawBitmap+0x232>
 8016d8c:	4a32      	ldr	r2, [pc, #200]	; (8016e58 <_DrawBitmap+0x23c>)
 8016d8e:	6811      	ldr	r1, [r2, #0]
 8016d90:	7c0b      	ldrb	r3, [r1, #16]
 8016d92:	b376      	cbz	r6, 8016df2 <_DrawBitmap+0x1d6>
 8016d94:	f013 0303 	ands.w	r3, r3, #3
 8016d98:	d005      	beq.n	8016da6 <_DrawBitmap+0x18a>
 8016d9a:	2b02      	cmp	r3, #2
 8016d9c:	d151      	bne.n	8016e42 <_DrawBitmap+0x226>
 8016d9e:	46a1      	mov	r9, r4
 8016da0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016da4:	e01d      	b.n	8016de2 <_DrawBitmap+0x1c6>
 8016da6:	f81a 5003 	ldrb.w	r5, [sl, r3]
 8016daa:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 8016dae:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8016db2:	3301      	adds	r3, #1
 8016db4:	455b      	cmp	r3, fp
 8016db6:	d1f6      	bne.n	8016da6 <_DrawBitmap+0x18a>
 8016db8:	e043      	b.n	8016e42 <_DrawBitmap+0x226>
 8016dba:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8016dbe:	f829 1c02 	strh.w	r1, [r9, #-2]
 8016dc2:	b12d      	cbz	r5, 8016dd0 <_DrawBitmap+0x1b4>
 8016dc4:	68aa      	ldr	r2, [r5, #8]
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	6813      	ldr	r3, [r2, #0]
 8016dca:	4641      	mov	r1, r8
 8016dcc:	463a      	mov	r2, r7
 8016dce:	4798      	blx	r3
 8016dd0:	9806      	ldr	r0, [sp, #24]
 8016dd2:	f108 0801 	add.w	r8, r8, #1
 8016dd6:	eb00 010b 	add.w	r1, r0, fp
 8016dda:	4541      	cmp	r1, r8
 8016ddc:	f109 0902 	add.w	r9, r9, #2
 8016de0:	d02f      	beq.n	8016e42 <_DrawBitmap+0x226>
 8016de2:	9a06      	ldr	r2, [sp, #24]
 8016de4:	ebc2 030a 	rsb	r3, r2, sl
 8016de8:	f813 0008 	ldrb.w	r0, [r3, r8]
 8016dec:	2800      	cmp	r0, #0
 8016dee:	d0ef      	beq.n	8016dd0 <_DrawBitmap+0x1b4>
 8016df0:	e7e3      	b.n	8016dba <_DrawBitmap+0x19e>
 8016df2:	f013 0203 	ands.w	r2, r3, #3
 8016df6:	d005      	beq.n	8016e04 <_DrawBitmap+0x1e8>
 8016df8:	2a02      	cmp	r2, #2
 8016dfa:	d122      	bne.n	8016e42 <_DrawBitmap+0x226>
 8016dfc:	46a1      	mov	r9, r4
 8016dfe:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016e02:	e016      	b.n	8016e32 <_DrawBitmap+0x216>
 8016e04:	4651      	mov	r1, sl
 8016e06:	465a      	mov	r2, fp
 8016e08:	f7ea f904 	bl	8001014 <memcpy>
 8016e0c:	e019      	b.n	8016e42 <_DrawBitmap+0x226>
 8016e0e:	f829 3c02 	strh.w	r3, [r9, #-2]
 8016e12:	b12d      	cbz	r5, 8016e20 <_DrawBitmap+0x204>
 8016e14:	68aa      	ldr	r2, [r5, #8]
 8016e16:	4628      	mov	r0, r5
 8016e18:	6813      	ldr	r3, [r2, #0]
 8016e1a:	4641      	mov	r1, r8
 8016e1c:	463a      	mov	r2, r7
 8016e1e:	4798      	blx	r3
 8016e20:	9806      	ldr	r0, [sp, #24]
 8016e22:	f108 0801 	add.w	r8, r8, #1
 8016e26:	eb00 010b 	add.w	r1, r0, fp
 8016e2a:	4541      	cmp	r1, r8
 8016e2c:	f109 0902 	add.w	r9, r9, #2
 8016e30:	d007      	beq.n	8016e42 <_DrawBitmap+0x226>
 8016e32:	9806      	ldr	r0, [sp, #24]
 8016e34:	ebc0 010a 	rsb	r1, r0, sl
 8016e38:	f811 3008 	ldrb.w	r3, [r1, r8]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d0ef      	beq.n	8016e20 <_DrawBitmap+0x204>
 8016e40:	e7e5      	b.n	8016e0e <_DrawBitmap+0x1f2>
 8016e42:	9820      	ldr	r0, [sp, #128]	; 0x80
 8016e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e46:	4482      	add	sl, r0
 8016e48:	3701      	adds	r7, #1
 8016e4a:	1864      	adds	r4, r4, r1
 8016e4c:	e797      	b.n	8016d7e <_DrawBitmap+0x162>
 8016e4e:	2d00      	cmp	r5, #0
 8016e50:	f040 827d 	bne.w	801734e <_DrawBitmap+0x732>
 8016e54:	e27e      	b.n	8017354 <_DrawBitmap+0x738>
 8016e56:	bf00      	nop
 8016e58:	20000308 	.word	0x20000308
 8016e5c:	2000e220 	.word	0x2000e220
 8016e60:	4a9c      	ldr	r2, [pc, #624]	; (80170d4 <_DrawBitmap+0x4b8>)
 8016e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016e64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016e66:	2e00      	cmp	r6, #0
 8016e68:	bf08      	it	eq
 8016e6a:	4616      	moveq	r6, r2
 8016e6c:	9607      	str	r6, [sp, #28]
 8016e6e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8016e70:	9109      	str	r1, [sp, #36]	; 0x24
 8016e72:	0077      	lsls	r7, r6, #1
 8016e74:	0098      	lsls	r0, r3, #2
 8016e76:	3402      	adds	r4, #2
 8016e78:	970f      	str	r7, [sp, #60]	; 0x3c
 8016e7a:	9010      	str	r0, [sp, #64]	; 0x40
 8016e7c:	940c      	str	r4, [sp, #48]	; 0x30
 8016e7e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016e80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e84:	1bf3      	subs	r3, r6, r7
 8016e86:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8016e88:	1e94      	subs	r4, r2, #2
 8016e8a:	42b3      	cmp	r3, r6
 8016e8c:	f280 825d 	bge.w	801734a <_DrawBitmap+0x72e>
 8016e90:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8016e92:	2f02      	cmp	r7, #2
 8016e94:	f000 80dc 	beq.w	8017050 <_DrawBitmap+0x434>
 8016e98:	2f04      	cmp	r7, #4
 8016e9a:	f000 8182 	beq.w	80171a2 <_DrawBitmap+0x586>
 8016e9e:	2f01      	cmp	r7, #1
 8016ea0:	f040 8249 	bne.w	8017336 <_DrawBitmap+0x71a>
 8016ea4:	f8df 9234 	ldr.w	r9, [pc, #564]	; 80170dc <_DrawBitmap+0x4c0>
 8016ea8:	f8d9 5000 	ldr.w	r5, [r9]
 8016eac:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8016eae:	f7fd f823 	bl	8013ef8 <GUI_ALLOC_LockH>
 8016eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8016eb6:	4a88      	ldr	r2, [pc, #544]	; (80170d8 <_DrawBitmap+0x4bc>)
 8016eb8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016eba:	5cd5      	ldrb	r5, [r2, r3]
 8016ebc:	9012      	str	r0, [sp, #72]	; 0x48
 8016ebe:	f8d9 0000 	ldr.w	r0, [r9]
 8016ec2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8016ec4:	f1c1 0808 	rsb	r8, r1, #8
 8016ec8:	fa45 f501 	asr.w	r5, r5, r1
 8016ecc:	7c01      	ldrb	r1, [r0, #16]
 8016ece:	f001 0303 	and.w	r3, r1, #3
 8016ed2:	2b02      	cmp	r3, #2
 8016ed4:	465e      	mov	r6, fp
 8016ed6:	d021      	beq.n	8016f1c <_DrawBitmap+0x300>
 8016ed8:	2b03      	cmp	r3, #3
 8016eda:	d05f      	beq.n	8016f9c <_DrawBitmap+0x380>
 8016edc:	2b01      	cmp	r3, #1
 8016ede:	d05d      	beq.n	8016f9c <_DrawBitmap+0x380>
 8016ee0:	4652      	mov	r2, sl
 8016ee2:	4546      	cmp	r6, r8
 8016ee4:	bf38      	it	cc
 8016ee6:	46b0      	movcc	r8, r6
 8016ee8:	ebc8 0606 	rsb	r6, r8, r6
 8016eec:	4643      	mov	r3, r8
 8016eee:	4621      	mov	r1, r4
 8016ef0:	f005 0001 	and.w	r0, r5, #1
 8016ef4:	9f07      	ldr	r7, [sp, #28]
 8016ef6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8016efa:	086d      	lsrs	r5, r5, #1
 8016efc:	3b01      	subs	r3, #1
 8016efe:	f821 0b02 	strh.w	r0, [r1], #2
 8016f02:	d1f5      	bne.n	8016ef0 <_DrawBitmap+0x2d4>
 8016f04:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8016f08:	2e00      	cmp	r6, #0
 8016f0a:	f000 809d 	beq.w	8017048 <_DrawBitmap+0x42c>
 8016f0e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016f12:	4971      	ldr	r1, [pc, #452]	; (80170d8 <_DrawBitmap+0x4bc>)
 8016f14:	f04f 0808 	mov.w	r8, #8
 8016f18:	5d4d      	ldrb	r5, [r1, r5]
 8016f1a:	e7e2      	b.n	8016ee2 <_DrawBitmap+0x2c6>
 8016f1c:	9a07      	ldr	r2, [sp, #28]
 8016f1e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016f22:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 8016f26:	f8cd a020 	str.w	sl, [sp, #32]
 8016f2a:	4546      	cmp	r6, r8
 8016f2c:	bf38      	it	cc
 8016f2e:	46b0      	movcc	r8, r6
 8016f30:	ebc8 0606 	rsb	r6, r8, r6
 8016f34:	b31f      	cbz	r7, 8016f7e <_DrawBitmap+0x362>
 8016f36:	b91d      	cbnz	r5, 8016f40 <_DrawBitmap+0x324>
 8016f38:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8016f3c:	44c1      	add	r9, r8
 8016f3e:	e022      	b.n	8016f86 <_DrawBitmap+0x36a>
 8016f40:	07e9      	lsls	r1, r5, #31
 8016f42:	d50b      	bpl.n	8016f5c <_DrawBitmap+0x340>
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	f8cd c014 	str.w	ip, [sp, #20]
 8016f4e:	4638      	mov	r0, r7
 8016f50:	4649      	mov	r1, r9
 8016f52:	4798      	blx	r3
 8016f54:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016f58:	f8a4 c000 	strh.w	ip, [r4]
 8016f5c:	3402      	adds	r4, #2
 8016f5e:	f1b8 0801 	subs.w	r8, r8, #1
 8016f62:	f109 0901 	add.w	r9, r9, #1
 8016f66:	d00e      	beq.n	8016f86 <_DrawBitmap+0x36a>
 8016f68:	086d      	lsrs	r5, r5, #1
 8016f6a:	e7e4      	b.n	8016f36 <_DrawBitmap+0x31a>
 8016f6c:	07ea      	lsls	r2, r5, #31
 8016f6e:	bf48      	it	mi
 8016f70:	f8a4 c000 	strhmi.w	ip, [r4]
 8016f74:	3402      	adds	r4, #2
 8016f76:	f1b8 0801 	subs.w	r8, r8, #1
 8016f7a:	d004      	beq.n	8016f86 <_DrawBitmap+0x36a>
 8016f7c:	086d      	lsrs	r5, r5, #1
 8016f7e:	2d00      	cmp	r5, #0
 8016f80:	d1f4      	bne.n	8016f6c <_DrawBitmap+0x350>
 8016f82:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8016f86:	2e00      	cmp	r6, #0
 8016f88:	d05e      	beq.n	8017048 <_DrawBitmap+0x42c>
 8016f8a:	9d08      	ldr	r5, [sp, #32]
 8016f8c:	4952      	ldr	r1, [pc, #328]	; (80170d8 <_DrawBitmap+0x4bc>)
 8016f8e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8016f92:	f04f 0808 	mov.w	r8, #8
 8016f96:	9508      	str	r5, [sp, #32]
 8016f98:	5c0d      	ldrb	r5, [r1, r0]
 8016f9a:	e7c6      	b.n	8016f2a <_DrawBitmap+0x30e>
 8016f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f9e:	6910      	ldr	r0, [r2, #16]
 8016fa0:	6883      	ldr	r3, [r0, #8]
 8016fa2:	4798      	blx	r3
 8016fa4:	f10a 0201 	add.w	r2, sl, #1
 8016fa8:	b281      	uxth	r1, r0
 8016faa:	f8dd c018 	ldr.w	ip, [sp, #24]
 8016fae:	910d      	str	r1, [sp, #52]	; 0x34
 8016fb0:	9208      	str	r2, [sp, #32]
 8016fb2:	4546      	cmp	r6, r8
 8016fb4:	bf38      	it	cc
 8016fb6:	46b0      	movcc	r8, r6
 8016fb8:	ebc8 0606 	rsb	r6, r8, r6
 8016fbc:	1ca3      	adds	r3, r4, #2
 8016fbe:	b34f      	cbz	r7, 8017014 <_DrawBitmap+0x3f8>
 8016fc0:	9303      	str	r3, [sp, #12]
 8016fc2:	46e1      	mov	r9, ip
 8016fc4:	07eb      	lsls	r3, r5, #31
 8016fc6:	d514      	bpl.n	8016ff2 <_DrawBitmap+0x3d6>
 8016fc8:	68b9      	ldr	r1, [r7, #8]
 8016fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fcc:	680b      	ldr	r3, [r1, #0]
 8016fce:	f8cd c014 	str.w	ip, [sp, #20]
 8016fd2:	9311      	str	r3, [sp, #68]	; 0x44
 8016fd4:	4638      	mov	r0, r7
 8016fd6:	4649      	mov	r1, r9
 8016fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fda:	4798      	blx	r3
 8016fdc:	9a03      	ldr	r2, [sp, #12]
 8016fde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016fe0:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 8016fe4:	9b03      	ldr	r3, [sp, #12]
 8016fe6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016fea:	ea81 0200 	eor.w	r2, r1, r0
 8016fee:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016ff2:	9803      	ldr	r0, [sp, #12]
 8016ff4:	f109 0901 	add.w	r9, r9, #1
 8016ff8:	eb0c 0208 	add.w	r2, ip, r8
 8016ffc:	1c81      	adds	r1, r0, #2
 8016ffe:	086d      	lsrs	r5, r5, #1
 8017000:	454a      	cmp	r2, r9
 8017002:	9103      	str	r1, [sp, #12]
 8017004:	d1de      	bne.n	8016fc4 <_DrawBitmap+0x3a8>
 8017006:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 801700a:	4694      	mov	ip, r2
 801700c:	b1e6      	cbz	r6, 8017048 <_DrawBitmap+0x42c>
 801700e:	9d08      	ldr	r5, [sp, #32]
 8017010:	7828      	ldrb	r0, [r5, #0]
 8017012:	e011      	b.n	8017038 <_DrawBitmap+0x41c>
 8017014:	4642      	mov	r2, r8
 8017016:	07e8      	lsls	r0, r5, #31
 8017018:	d505      	bpl.n	8017026 <_DrawBitmap+0x40a>
 801701a:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 801701e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017020:	4041      	eors	r1, r0
 8017022:	f823 1c02 	strh.w	r1, [r3, #-2]
 8017026:	086d      	lsrs	r5, r5, #1
 8017028:	3302      	adds	r3, #2
 801702a:	3a01      	subs	r2, #1
 801702c:	d1f3      	bne.n	8017016 <_DrawBitmap+0x3fa>
 801702e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8017032:	b14e      	cbz	r6, 8017048 <_DrawBitmap+0x42c>
 8017034:	9d08      	ldr	r5, [sp, #32]
 8017036:	7828      	ldrb	r0, [r5, #0]
 8017038:	4b27      	ldr	r3, [pc, #156]	; (80170d8 <_DrawBitmap+0x4bc>)
 801703a:	5c1d      	ldrb	r5, [r3, r0]
 801703c:	9808      	ldr	r0, [sp, #32]
 801703e:	1c41      	adds	r1, r0, #1
 8017040:	9108      	str	r1, [sp, #32]
 8017042:	f04f 0808 	mov.w	r8, #8
 8017046:	e7b4      	b.n	8016fb2 <_DrawBitmap+0x396>
 8017048:	a812      	add	r0, sp, #72	; 0x48
 801704a:	f7fc ff63 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801704e:	e172      	b.n	8017336 <_DrawBitmap+0x71a>
 8017050:	4922      	ldr	r1, [pc, #136]	; (80170dc <_DrawBitmap+0x4c0>)
 8017052:	9822      	ldr	r0, [sp, #136]	; 0x88
 8017054:	680b      	ldr	r3, [r1, #0]
 8017056:	f89a 6000 	ldrb.w	r6, [sl]
 801705a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801705c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8017060:	f1c0 0204 	rsb	r2, r0, #4
 8017064:	7c18      	ldrb	r0, [r3, #16]
 8017066:	b2d5      	uxtb	r5, r2
 8017068:	f000 0203 	and.w	r2, r0, #3
 801706c:	fa06 f607 	lsl.w	r6, r6, r7
 8017070:	2a01      	cmp	r2, #1
 8017072:	b2f6      	uxtb	r6, r6
 8017074:	d009      	beq.n	801708a <_DrawBitmap+0x46e>
 8017076:	d30b      	bcc.n	8017090 <_DrawBitmap+0x474>
 8017078:	2a02      	cmp	r2, #2
 801707a:	f040 815c 	bne.w	8017336 <_DrawBitmap+0x71a>
 801707e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017082:	465f      	mov	r7, fp
 8017084:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017088:	e04b      	b.n	8017122 <_DrawBitmap+0x506>
 801708a:	4651      	mov	r1, sl
 801708c:	465b      	mov	r3, fp
 801708e:	e081      	b.n	8017194 <_DrawBitmap+0x578>
 8017090:	4652      	mov	r2, sl
 8017092:	465b      	mov	r3, fp
 8017094:	429d      	cmp	r5, r3
 8017096:	bfc8      	it	gt
 8017098:	b2dd      	uxtbgt	r5, r3
 801709a:	1b5b      	subs	r3, r3, r5
 801709c:	4629      	mov	r1, r5
 801709e:	4620      	mov	r0, r4
 80170a0:	ea4f 1e96 	mov.w	lr, r6, lsr #6
 80170a4:	9f07      	ldr	r7, [sp, #28]
 80170a6:	3901      	subs	r1, #1
 80170a8:	f857 c02e 	ldr.w	ip, [r7, lr, lsl #2]
 80170ac:	00b6      	lsls	r6, r6, #2
 80170ae:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80170b2:	f820 cb02 	strh.w	ip, [r0], #2
 80170b6:	b2f6      	uxtb	r6, r6
 80170b8:	d1f2      	bne.n	80170a0 <_DrawBitmap+0x484>
 80170ba:	3d01      	subs	r5, #1
 80170bc:	b2e8      	uxtb	r0, r5
 80170be:	1c45      	adds	r5, r0, #1
 80170c0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	f000 8136 	beq.w	8017336 <_DrawBitmap+0x71a>
 80170ca:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80170ce:	2504      	movs	r5, #4
 80170d0:	e7e0      	b.n	8017094 <_DrawBitmap+0x478>
 80170d2:	bf00      	nop
 80170d4:	0803446c 	.word	0x0803446c
 80170d8:	08034184 	.word	0x08034184
 80170dc:	20000308 	.word	0x20000308
 80170e0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80170e4:	d125      	bne.n	8017132 <_DrawBitmap+0x516>
 80170e6:	9808      	ldr	r0, [sp, #32]
 80170e8:	f109 0901 	add.w	r9, r9, #1
 80170ec:	eb05 0108 	add.w	r1, r5, r8
 80170f0:	1c82      	adds	r2, r0, #2
 80170f2:	fa5f f389 	uxtb.w	r3, r9
 80170f6:	b2c8      	uxtb	r0, r1
 80170f8:	00b6      	lsls	r6, r6, #2
 80170fa:	4298      	cmp	r0, r3
 80170fc:	b2f6      	uxtb	r6, r6
 80170fe:	9208      	str	r2, [sp, #32]
 8017100:	d1ee      	bne.n	80170e0 <_DrawBitmap+0x4c4>
 8017102:	3d01      	subs	r5, #1
 8017104:	b2ed      	uxtb	r5, r5
 8017106:	1c6e      	adds	r6, r5, #1
 8017108:	f108 0801 	add.w	r8, r8, #1
 801710c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8017110:	44a8      	add	r8, r5
 8017112:	2f00      	cmp	r7, #0
 8017114:	f000 810f 	beq.w	8017336 <_DrawBitmap+0x71a>
 8017118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801711a:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 801711e:	2504      	movs	r5, #4
 8017120:	920d      	str	r2, [sp, #52]	; 0x34
 8017122:	42bd      	cmp	r5, r7
 8017124:	bfc8      	it	gt
 8017126:	b2fd      	uxtbgt	r5, r7
 8017128:	1ca1      	adds	r1, r4, #2
 801712a:	1b7f      	subs	r7, r7, r5
 801712c:	9108      	str	r1, [sp, #32]
 801712e:	46c1      	mov	r9, r8
 8017130:	e7d6      	b.n	80170e0 <_DrawBitmap+0x4c4>
 8017132:	09b3      	lsrs	r3, r6, #6
 8017134:	9807      	ldr	r0, [sp, #28]
 8017136:	9908      	ldr	r1, [sp, #32]
 8017138:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801713c:	f821 2c02 	strh.w	r2, [r1, #-2]
 8017140:	f1bc 0f00 	cmp.w	ip, #0
 8017144:	d0cf      	beq.n	80170e6 <_DrawBitmap+0x4ca>
 8017146:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801714a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	f8cd c014 	str.w	ip, [sp, #20]
 8017152:	4660      	mov	r0, ip
 8017154:	4649      	mov	r1, r9
 8017156:	4798      	blx	r3
 8017158:	f8dd c014 	ldr.w	ip, [sp, #20]
 801715c:	e7c3      	b.n	80170e6 <_DrawBitmap+0x4ca>
 801715e:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8017162:	d005      	beq.n	8017170 <_DrawBitmap+0x554>
 8017164:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 8017168:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 801716c:	f822 7c02 	strh.w	r7, [r2, #-2]
 8017170:	3801      	subs	r0, #1
 8017172:	00b6      	lsls	r6, r6, #2
 8017174:	3202      	adds	r2, #2
 8017176:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 801717a:	b2f6      	uxtb	r6, r6
 801717c:	d1ef      	bne.n	801715e <_DrawBitmap+0x542>
 801717e:	3d01      	subs	r5, #1
 8017180:	b2ef      	uxtb	r7, r5
 8017182:	1c7d      	adds	r5, r7, #1
 8017184:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8017188:	2b00      	cmp	r3, #0
 801718a:	f000 80d4 	beq.w	8017336 <_DrawBitmap+0x71a>
 801718e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8017192:	2504      	movs	r5, #4
 8017194:	429d      	cmp	r5, r3
 8017196:	bfc8      	it	gt
 8017198:	b2dd      	uxtbgt	r5, r3
 801719a:	1b5b      	subs	r3, r3, r5
 801719c:	1ca2      	adds	r2, r4, #2
 801719e:	4628      	mov	r0, r5
 80171a0:	e7dd      	b.n	801715e <_DrawBitmap+0x542>
 80171a2:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80171a4:	496d      	ldr	r1, [pc, #436]	; (801735c <_DrawBitmap+0x740>)
 80171a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80171a8:	f89a 0000 	ldrb.w	r0, [sl]
 80171ac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80171ae:	f1c7 0202 	rsb	r2, r7, #2
 80171b2:	680f      	ldr	r7, [r1, #0]
 80171b4:	b2d3      	uxtb	r3, r2
 80171b6:	7c3a      	ldrb	r2, [r7, #16]
 80171b8:	f002 0103 	and.w	r1, r2, #3
 80171bc:	fa00 f005 	lsl.w	r0, r0, r5
 80171c0:	2901      	cmp	r1, #1
 80171c2:	b2c5      	uxtb	r5, r0
 80171c4:	d004      	beq.n	80171d0 <_DrawBitmap+0x5b4>
 80171c6:	d306      	bcc.n	80171d6 <_DrawBitmap+0x5ba>
 80171c8:	2902      	cmp	r1, #2
 80171ca:	f040 80b4 	bne.w	8017336 <_DrawBitmap+0x71a>
 80171ce:	e037      	b.n	8017240 <_DrawBitmap+0x624>
 80171d0:	4650      	mov	r0, sl
 80171d2:	465a      	mov	r2, fp
 80171d4:	e0a8      	b.n	8017328 <_DrawBitmap+0x70c>
 80171d6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80171d8:	b166      	cbz	r6, 80171f4 <_DrawBitmap+0x5d8>
 80171da:	092d      	lsrs	r5, r5, #4
 80171dc:	9907      	ldr	r1, [sp, #28]
 80171de:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80171e2:	8020      	strh	r0, [r4, #0]
 80171e4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80171e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80171ea:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80171ee:	f10a 0201 	add.w	r2, sl, #1
 80171f2:	e001      	b.n	80171f8 <_DrawBitmap+0x5dc>
 80171f4:	465b      	mov	r3, fp
 80171f6:	4652      	mov	r2, sl
 80171f8:	2b01      	cmp	r3, #1
 80171fa:	dd18      	ble.n	801722e <_DrawBitmap+0x612>
 80171fc:	1058      	asrs	r0, r3, #1
 80171fe:	1d21      	adds	r1, r4, #4
 8017200:	f003 0301 	and.w	r3, r3, #1
 8017204:	eb02 0e00 	add.w	lr, r2, r0
 8017208:	092f      	lsrs	r7, r5, #4
 801720a:	9e07      	ldr	r6, [sp, #28]
 801720c:	f005 050f 	and.w	r5, r5, #15
 8017210:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8017214:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8017218:	f821 7c04 	strh.w	r7, [r1, #-4]
 801721c:	f821 6c02 	strh.w	r6, [r1, #-2]
 8017220:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8017224:	3104      	adds	r1, #4
 8017226:	4572      	cmp	r2, lr
 8017228:	d1ee      	bne.n	8017208 <_DrawBitmap+0x5ec>
 801722a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 801722e:	2b00      	cmp	r3, #0
 8017230:	f000 8081 	beq.w	8017336 <_DrawBitmap+0x71a>
 8017234:	092d      	lsrs	r5, r5, #4
 8017236:	9a07      	ldr	r2, [sp, #28]
 8017238:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801723c:	8020      	strh	r0, [r4, #0]
 801723e:	e07a      	b.n	8017336 <_DrawBitmap+0x71a>
 8017240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017242:	b1c3      	cbz	r3, 8017276 <_DrawBitmap+0x65a>
 8017244:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8017248:	d00b      	beq.n	8017262 <_DrawBitmap+0x646>
 801724a:	0928      	lsrs	r0, r5, #4
 801724c:	9d07      	ldr	r5, [sp, #28]
 801724e:	f855 7020 	ldr.w	r7, [r5, r0, lsl #2]
 8017252:	8027      	strh	r7, [r4, #0]
 8017254:	b12e      	cbz	r6, 8017262 <_DrawBitmap+0x646>
 8017256:	68b4      	ldr	r4, [r6, #8]
 8017258:	9906      	ldr	r1, [sp, #24]
 801725a:	6823      	ldr	r3, [r4, #0]
 801725c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801725e:	4630      	mov	r0, r6
 8017260:	4798      	blx	r3
 8017262:	9a06      	ldr	r2, [sp, #24]
 8017264:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017266:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801726a:	1c57      	adds	r7, r2, #1
 801726c:	f10b 39ff 	add.w	r9, fp, #4294967295
 8017270:	f10a 0801 	add.w	r8, sl, #1
 8017274:	e00f      	b.n	8017296 <_DrawBitmap+0x67a>
 8017276:	46d9      	mov	r9, fp
 8017278:	46d0      	mov	r8, sl
 801727a:	9f06      	ldr	r7, [sp, #24]
 801727c:	e00b      	b.n	8017296 <_DrawBitmap+0x67a>
 801727e:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8017282:	d10c      	bne.n	801729e <_DrawBitmap+0x682>
 8017284:	f015 050f 	ands.w	r5, r5, #15
 8017288:	d117      	bne.n	80172ba <_DrawBitmap+0x69e>
 801728a:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 801728e:	3404      	adds	r4, #4
 8017290:	3702      	adds	r7, #2
 8017292:	f1a9 0902 	sub.w	r9, r9, #2
 8017296:	f1b9 0f01 	cmp.w	r9, #1
 801729a:	dcf0      	bgt.n	801727e <_DrawBitmap+0x662>
 801729c:	e01a      	b.n	80172d4 <_DrawBitmap+0x6b8>
 801729e:	092a      	lsrs	r2, r5, #4
 80172a0:	9907      	ldr	r1, [sp, #28]
 80172a2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80172a6:	8020      	strh	r0, [r4, #0]
 80172a8:	2e00      	cmp	r6, #0
 80172aa:	d0eb      	beq.n	8017284 <_DrawBitmap+0x668>
 80172ac:	68b3      	ldr	r3, [r6, #8]
 80172ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	4630      	mov	r0, r6
 80172b4:	4639      	mov	r1, r7
 80172b6:	4798      	blx	r3
 80172b8:	e7e4      	b.n	8017284 <_DrawBitmap+0x668>
 80172ba:	9a07      	ldr	r2, [sp, #28]
 80172bc:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
 80172c0:	8061      	strh	r1, [r4, #2]
 80172c2:	2e00      	cmp	r6, #0
 80172c4:	d0e1      	beq.n	801728a <_DrawBitmap+0x66e>
 80172c6:	68b0      	ldr	r0, [r6, #8]
 80172c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172ca:	6803      	ldr	r3, [r0, #0]
 80172cc:	1c79      	adds	r1, r7, #1
 80172ce:	4630      	mov	r0, r6
 80172d0:	4798      	blx	r3
 80172d2:	e7da      	b.n	801728a <_DrawBitmap+0x66e>
 80172d4:	f1b9 0f00 	cmp.w	r9, #0
 80172d8:	d02d      	beq.n	8017336 <_DrawBitmap+0x71a>
 80172da:	092d      	lsrs	r5, r5, #4
 80172dc:	d02b      	beq.n	8017336 <_DrawBitmap+0x71a>
 80172de:	9907      	ldr	r1, [sp, #28]
 80172e0:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
 80172e4:	8020      	strh	r0, [r4, #0]
 80172e6:	b336      	cbz	r6, 8017336 <_DrawBitmap+0x71a>
 80172e8:	68b4      	ldr	r4, [r6, #8]
 80172ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172ec:	6823      	ldr	r3, [r4, #0]
 80172ee:	4630      	mov	r0, r6
 80172f0:	4639      	mov	r1, r7
 80172f2:	4798      	blx	r3
 80172f4:	e01f      	b.n	8017336 <_DrawBitmap+0x71a>
 80172f6:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80172fa:	d005      	beq.n	8017308 <_DrawBitmap+0x6ec>
 80172fc:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 8017300:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8017304:	f821 7c02 	strh.w	r7, [r1, #-2]
 8017308:	3e01      	subs	r6, #1
 801730a:	012d      	lsls	r5, r5, #4
 801730c:	3102      	adds	r1, #2
 801730e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8017312:	b2ed      	uxtb	r5, r5
 8017314:	d1ef      	bne.n	80172f6 <_DrawBitmap+0x6da>
 8017316:	3b01      	subs	r3, #1
 8017318:	b2df      	uxtb	r7, r3
 801731a:	1c79      	adds	r1, r7, #1
 801731c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8017320:	b14a      	cbz	r2, 8017336 <_DrawBitmap+0x71a>
 8017322:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8017326:	2302      	movs	r3, #2
 8017328:	4293      	cmp	r3, r2
 801732a:	bfc8      	it	gt
 801732c:	b2d3      	uxtbgt	r3, r2
 801732e:	1ad2      	subs	r2, r2, r3
 8017330:	1ca1      	adds	r1, r4, #2
 8017332:	461e      	mov	r6, r3
 8017334:	e7df      	b.n	80172f6 <_DrawBitmap+0x6da>
 8017336:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801733a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801733c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801733e:	1c4b      	adds	r3, r1, #1
 8017340:	1990      	adds	r0, r2, r6
 8017342:	44a2      	add	sl, r4
 8017344:	9309      	str	r3, [sp, #36]	; 0x24
 8017346:	900c      	str	r0, [sp, #48]	; 0x30
 8017348:	e599      	b.n	8016e7e <_DrawBitmap+0x262>
 801734a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801734c:	b110      	cbz	r0, 8017354 <_DrawBitmap+0x738>
 801734e:	a813      	add	r0, sp, #76	; 0x4c
 8017350:	f7fc fde0 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8017354:	b015      	add	sp, #84	; 0x54
 8017356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735a:	bf00      	nop
 801735c:	20000308 	.word	0x20000308

08017360 <LCD_SelectLCD>:
 8017360:	b510      	push	{r4, lr}
 8017362:	4b0d      	ldr	r3, [pc, #52]	; (8017398 <LCD_SelectLCD+0x38>)
 8017364:	480d      	ldr	r0, [pc, #52]	; (801739c <LCD_SelectLCD+0x3c>)
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	7c51      	ldrb	r1, [r2, #17]
 801736a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801736e:	461c      	mov	r4, r3
 8017370:	b138      	cbz	r0, 8017382 <LCD_SelectLCD+0x22>
 8017372:	68c3      	ldr	r3, [r0, #12]
 8017374:	681a      	ldr	r2, [r3, #0]
 8017376:	2a04      	cmp	r2, #4
 8017378:	d001      	beq.n	801737e <LCD_SelectLCD+0x1e>
 801737a:	6800      	ldr	r0, [r0, #0]
 801737c:	e7f8      	b.n	8017370 <LCD_SelectLCD+0x10>
 801737e:	f7fc f8cf 	bl	8013520 <GUI_DEVICE_Unlink>
 8017382:	6821      	ldr	r1, [r4, #0]
 8017384:	2000      	movs	r0, #0
 8017386:	f101 0308 	add.w	r3, r1, #8
 801738a:	6608      	str	r0, [r1, #96]	; 0x60
 801738c:	614b      	str	r3, [r1, #20]
 801738e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017392:	f7fa bb65 	b.w	8011a60 <LCD_SetClipRectMax>
 8017396:	bf00      	nop
 8017398:	20000308 	.word	0x20000308
 801739c:	2000eb5c 	.word	0x2000eb5c

080173a0 <LCD_ReadRectEx>:
 80173a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a4:	b087      	sub	sp, #28
 80173a6:	4690      	mov	r8, r2
 80173a8:	9305      	str	r3, [sp, #20]
 80173aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80173ae:	68da      	ldr	r2, [r3, #12]
 80173b0:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80173b2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80173b6:	4607      	mov	r7, r0
 80173b8:	460e      	mov	r6, r1
 80173ba:	b975      	cbnz	r5, 80173da <LCD_ReadRectEx+0x3a>
 80173bc:	486f      	ldr	r0, [pc, #444]	; (801757c <LCD_ReadRectEx+0x1dc>)
 80173be:	6801      	ldr	r1, [r0, #0]
 80173c0:	7c48      	ldrb	r0, [r1, #17]
 80173c2:	f7fa f81b 	bl	80113fc <GUI_GetBitsPerPixelEx>
 80173c6:	2808      	cmp	r0, #8
 80173c8:	4683      	mov	fp, r0
 80173ca:	dd15      	ble.n	80173f8 <LCD_ReadRectEx+0x58>
 80173cc:	2810      	cmp	r0, #16
 80173ce:	bfcc      	ite	gt
 80173d0:	f04f 0a04 	movgt.w	sl, #4
 80173d4:	f04f 0a02 	movle.w	sl, #2
 80173d8:	e010      	b.n	80173fc <LCD_ReadRectEx+0x5c>
 80173da:	a811      	add	r0, sp, #68	; 0x44
 80173dc:	2101      	movs	r1, #1
 80173de:	47a8      	blx	r5
 80173e0:	4605      	mov	r5, r0
 80173e2:	2800      	cmp	r0, #0
 80173e4:	d0ea      	beq.n	80173bc <LCD_ReadRectEx+0x1c>
 80173e6:	9b05      	ldr	r3, [sp, #20]
 80173e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80173ea:	e88d 0018 	stmia.w	sp, {r3, r4}
 80173ee:	4639      	mov	r1, r7
 80173f0:	4632      	mov	r2, r6
 80173f2:	4643      	mov	r3, r8
 80173f4:	47a8      	blx	r5
 80173f6:	e0be      	b.n	8017576 <LCD_ReadRectEx+0x1d6>
 80173f8:	f04f 0a01 	mov.w	sl, #1
 80173fc:	2500      	movs	r5, #0
 80173fe:	9b05      	ldr	r3, [sp, #20]
 8017400:	429e      	cmp	r6, r3
 8017402:	f300 80b8 	bgt.w	8017576 <LCD_ReadRectEx+0x1d6>
 8017406:	f1ba 0f02 	cmp.w	sl, #2
 801740a:	d00a      	beq.n	8017422 <LCD_ReadRectEx+0x82>
 801740c:	f1ba 0f04 	cmp.w	sl, #4
 8017410:	d004      	beq.n	801741c <LCD_ReadRectEx+0x7c>
 8017412:	f1ba 0f01 	cmp.w	sl, #1
 8017416:	f040 80ac 	bne.w	8017572 <LCD_ReadRectEx+0x1d2>
 801741a:	e005      	b.n	8017428 <LCD_ReadRectEx+0x88>
 801741c:	46a4      	mov	ip, r4
 801741e:	463b      	mov	r3, r7
 8017420:	e094      	b.n	801754c <LCD_ReadRectEx+0x1ac>
 8017422:	46a4      	mov	ip, r4
 8017424:	463b      	mov	r3, r7
 8017426:	e07e      	b.n	8017526 <LCD_ReadRectEx+0x186>
 8017428:	f10b 30ff 	add.w	r0, fp, #4294967295
 801742c:	2807      	cmp	r0, #7
 801742e:	f200 80a0 	bhi.w	8017572 <LCD_ReadRectEx+0x1d2>
 8017432:	e8df f000 	tbb	[pc, r0]
 8017436:	080a      	.short	0x080a
 8017438:	04040606 	.word	0x04040606
 801743c:	0404      	.short	0x0404
 801743e:	463b      	mov	r3, r7
 8017440:	e059      	b.n	80174f6 <LCD_ReadRectEx+0x156>
 8017442:	463b      	mov	r3, r7
 8017444:	e03e      	b.n	80174c4 <LCD_ReadRectEx+0x124>
 8017446:	463b      	mov	r3, r7
 8017448:	e01e      	b.n	8017488 <LCD_ReadRectEx+0xe8>
 801744a:	463b      	mov	r3, r7
 801744c:	4543      	cmp	r3, r8
 801744e:	f300 8090 	bgt.w	8017572 <LCD_ReadRectEx+0x1d2>
 8017452:	4619      	mov	r1, r3
 8017454:	4632      	mov	r2, r6
 8017456:	9303      	str	r3, [sp, #12]
 8017458:	9811      	ldr	r0, [sp, #68]	; 0x44
 801745a:	47c8      	blx	r9
 801745c:	f1c5 0207 	rsb	r2, r5, #7
 8017460:	fa00 f302 	lsl.w	r3, r0, r2
 8017464:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8017468:	7820      	ldrb	r0, [r4, #0]
 801746a:	fa41 f105 	asr.w	r1, r1, r5
 801746e:	4001      	ands	r1, r0
 8017470:	430b      	orrs	r3, r1
 8017472:	7023      	strb	r3, [r4, #0]
 8017474:	3501      	adds	r5, #1
 8017476:	9b03      	ldr	r3, [sp, #12]
 8017478:	f025 0207 	bic.w	r2, r5, #7
 801747c:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 8017480:	3301      	adds	r3, #1
 8017482:	fa45 f502 	asr.w	r5, r5, r2
 8017486:	e7e1      	b.n	801744c <LCD_ReadRectEx+0xac>
 8017488:	4543      	cmp	r3, r8
 801748a:	dc72      	bgt.n	8017572 <LCD_ReadRectEx+0x1d2>
 801748c:	4619      	mov	r1, r3
 801748e:	4632      	mov	r2, r6
 8017490:	9303      	str	r3, [sp, #12]
 8017492:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017494:	47c8      	blx	r9
 8017496:	006a      	lsls	r2, r5, #1
 8017498:	f1c2 0106 	rsb	r1, r2, #6
 801749c:	fa00 f301 	lsl.w	r3, r0, r1
 80174a0:	7821      	ldrb	r1, [r4, #0]
 80174a2:	f64f 703f 	movw	r0, #65343	; 0xff3f
 80174a6:	fa40 f202 	asr.w	r2, r0, r2
 80174aa:	400a      	ands	r2, r1
 80174ac:	4313      	orrs	r3, r2
 80174ae:	7023      	strb	r3, [r4, #0]
 80174b0:	3501      	adds	r5, #1
 80174b2:	9803      	ldr	r0, [sp, #12]
 80174b4:	f025 0303 	bic.w	r3, r5, #3
 80174b8:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 80174bc:	fa45 f503 	asr.w	r5, r5, r3
 80174c0:	1c43      	adds	r3, r0, #1
 80174c2:	e7e1      	b.n	8017488 <LCD_ReadRectEx+0xe8>
 80174c4:	4543      	cmp	r3, r8
 80174c6:	dc54      	bgt.n	8017572 <LCD_ReadRectEx+0x1d2>
 80174c8:	4619      	mov	r1, r3
 80174ca:	4632      	mov	r2, r6
 80174cc:	9303      	str	r3, [sp, #12]
 80174ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80174d0:	47c8      	blx	r9
 80174d2:	00aa      	lsls	r2, r5, #2
 80174d4:	f1c2 0104 	rsb	r1, r2, #4
 80174d8:	fa00 f301 	lsl.w	r3, r0, r1
 80174dc:	7821      	ldrb	r1, [r4, #0]
 80174de:	200f      	movs	r0, #15
 80174e0:	fa00 f202 	lsl.w	r2, r0, r2
 80174e4:	400a      	ands	r2, r1
 80174e6:	4313      	orrs	r3, r2
 80174e8:	7023      	strb	r3, [r4, #0]
 80174ea:	9b03      	ldr	r3, [sp, #12]
 80174ec:	1964      	adds	r4, r4, r5
 80174ee:	3301      	adds	r3, #1
 80174f0:	f085 0501 	eor.w	r5, r5, #1
 80174f4:	e7e6      	b.n	80174c4 <LCD_ReadRectEx+0x124>
 80174f6:	1be2      	subs	r2, r4, r7
 80174f8:	4543      	cmp	r3, r8
 80174fa:	f1c7 0c00 	rsb	ip, r7, #0
 80174fe:	eb02 0103 	add.w	r1, r2, r3
 8017502:	dc0e      	bgt.n	8017522 <LCD_ReadRectEx+0x182>
 8017504:	4619      	mov	r1, r3
 8017506:	4632      	mov	r2, r6
 8017508:	9303      	str	r3, [sp, #12]
 801750a:	f8cd c010 	str.w	ip, [sp, #16]
 801750e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017510:	47c8      	blx	r9
 8017512:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017516:	9b03      	ldr	r3, [sp, #12]
 8017518:	eb04 020c 	add.w	r2, r4, ip
 801751c:	54d0      	strb	r0, [r2, r3]
 801751e:	3301      	adds	r3, #1
 8017520:	e7e9      	b.n	80174f6 <LCD_ReadRectEx+0x156>
 8017522:	460c      	mov	r4, r1
 8017524:	e025      	b.n	8017572 <LCD_ReadRectEx+0x1d2>
 8017526:	4543      	cmp	r3, r8
 8017528:	4664      	mov	r4, ip
 801752a:	f10c 0e02 	add.w	lr, ip, #2
 801752e:	dc20      	bgt.n	8017572 <LCD_ReadRectEx+0x1d2>
 8017530:	4619      	mov	r1, r3
 8017532:	9303      	str	r3, [sp, #12]
 8017534:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017536:	f8cd e010 	str.w	lr, [sp, #16]
 801753a:	4632      	mov	r2, r6
 801753c:	47c8      	blx	r9
 801753e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017542:	9903      	ldr	r1, [sp, #12]
 8017544:	f82c 0c02 	strh.w	r0, [ip, #-2]
 8017548:	1c4b      	adds	r3, r1, #1
 801754a:	e7ec      	b.n	8017526 <LCD_ReadRectEx+0x186>
 801754c:	4543      	cmp	r3, r8
 801754e:	4664      	mov	r4, ip
 8017550:	f10c 0e04 	add.w	lr, ip, #4
 8017554:	dc0d      	bgt.n	8017572 <LCD_ReadRectEx+0x1d2>
 8017556:	4619      	mov	r1, r3
 8017558:	9303      	str	r3, [sp, #12]
 801755a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801755c:	f8cd e010 	str.w	lr, [sp, #16]
 8017560:	4632      	mov	r2, r6
 8017562:	47c8      	blx	r9
 8017564:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017568:	9c03      	ldr	r4, [sp, #12]
 801756a:	f84c 0c04 	str.w	r0, [ip, #-4]
 801756e:	1c63      	adds	r3, r4, #1
 8017570:	e7ec      	b.n	801754c <LCD_ReadRectEx+0x1ac>
 8017572:	3601      	adds	r6, #1
 8017574:	e743      	b.n	80173fe <LCD_ReadRectEx+0x5e>
 8017576:	b007      	add	sp, #28
 8017578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801757c:	20000308 	.word	0x20000308

08017580 <GUI_ReadRectEx>:
 8017580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017582:	4d16      	ldr	r5, [pc, #88]	; (80175dc <GUI_ReadRectEx+0x5c>)
 8017584:	9e05      	ldr	r6, [sp, #20]
 8017586:	682d      	ldr	r5, [r5, #0]
 8017588:	9c06      	ldr	r4, [sp, #24]
 801758a:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 801758e:	42b8      	cmp	r0, r7
 8017590:	bfb8      	it	lt
 8017592:	4638      	movlt	r0, r7
 8017594:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8017598:	42ba      	cmp	r2, r7
 801759a:	bfa8      	it	ge
 801759c:	463a      	movge	r2, r7
 801759e:	4282      	cmp	r2, r0
 80175a0:	db1b      	blt.n	80175da <GUI_ReadRectEx+0x5a>
 80175a2:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 80175a6:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 80175aa:	42b9      	cmp	r1, r7
 80175ac:	bfb8      	it	lt
 80175ae:	4639      	movlt	r1, r7
 80175b0:	42ab      	cmp	r3, r5
 80175b2:	bfa8      	it	ge
 80175b4:	462b      	movge	r3, r5
 80175b6:	428b      	cmp	r3, r1
 80175b8:	da05      	bge.n	80175c6 <GUI_ReadRectEx+0x46>
 80175ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175bc:	2d04      	cmp	r5, #4
 80175be:	d006      	beq.n	80175ce <GUI_ReadRectEx+0x4e>
 80175c0:	6825      	ldr	r5, [r4, #0]
 80175c2:	b125      	cbz	r5, 80175ce <GUI_ReadRectEx+0x4e>
 80175c4:	462c      	mov	r4, r5
 80175c6:	68e5      	ldr	r5, [r4, #12]
 80175c8:	682d      	ldr	r5, [r5, #0]
 80175ca:	2d00      	cmp	r5, #0
 80175cc:	d1f6      	bne.n	80175bc <GUI_ReadRectEx+0x3c>
 80175ce:	9605      	str	r6, [sp, #20]
 80175d0:	9406      	str	r4, [sp, #24]
 80175d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80175d6:	f7ff bee3 	b.w	80173a0 <LCD_ReadRectEx>
 80175da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175dc:	20000308 	.word	0x20000308

080175e0 <_OnExit>:
 80175e0:	b510      	push	{r4, lr}
 80175e2:	4c03      	ldr	r4, [pc, #12]	; (80175f0 <_OnExit+0x10>)
 80175e4:	6820      	ldr	r0, [r4, #0]
 80175e6:	f7fc fc73 	bl	8013ed0 <GUI_ALLOC_FreeFixedBlock>
 80175ea:	2300      	movs	r3, #0
 80175ec:	6023      	str	r3, [r4, #0]
 80175ee:	bd10      	pop	{r4, pc}
 80175f0:	2000ec58 	.word	0x2000ec58

080175f4 <LCD_InitColors>:
 80175f4:	b538      	push	{r3, r4, r5, lr}
 80175f6:	4d09      	ldr	r5, [pc, #36]	; (801761c <LCD_InitColors+0x28>)
 80175f8:	682c      	ldr	r4, [r5, #0]
 80175fa:	b95c      	cbnz	r4, 8017614 <LCD_InitColors+0x20>
 80175fc:	4b08      	ldr	r3, [pc, #32]	; (8017620 <LCD_InitColors+0x2c>)
 80175fe:	6818      	ldr	r0, [r3, #0]
 8017600:	0080      	lsls	r0, r0, #2
 8017602:	f7fc fdff 	bl	8014204 <GUI_ALLOC_GetFixedBlock>
 8017606:	6028      	str	r0, [r5, #0]
 8017608:	b130      	cbz	r0, 8017618 <LCD_InitColors+0x24>
 801760a:	4806      	ldr	r0, [pc, #24]	; (8017624 <LCD_InitColors+0x30>)
 801760c:	4906      	ldr	r1, [pc, #24]	; (8017628 <LCD_InitColors+0x34>)
 801760e:	6001      	str	r1, [r0, #0]
 8017610:	f7fc f870 	bl	80136f4 <GUI__RegisterExit>
 8017614:	2000      	movs	r0, #0
 8017616:	bd38      	pop	{r3, r4, r5, pc}
 8017618:	2001      	movs	r0, #1
 801761a:	bd38      	pop	{r3, r4, r5, pc}
 801761c:	2000ec58 	.word	0x2000ec58
 8017620:	20000338 	.word	0x20000338
 8017624:	2000e224 	.word	0x2000e224
 8017628:	080175e1 	.word	0x080175e1

0801762c <LCD_GetpPalConvTableUncached>:
 801762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801762e:	b1e8      	cbz	r0, 801766c <LCD_GetpPalConvTableUncached+0x40>
 8017630:	6885      	ldr	r5, [r0, #8]
 8017632:	b1d5      	cbz	r5, 801766a <LCD_GetpPalConvTableUncached+0x3e>
 8017634:	4b0e      	ldr	r3, [pc, #56]	; (8017670 <LCD_GetpPalConvTableUncached+0x44>)
 8017636:	6819      	ldr	r1, [r3, #0]
 8017638:	b1b9      	cbz	r1, 801766a <LCD_GetpPalConvTableUncached+0x3e>
 801763a:	6800      	ldr	r0, [r0, #0]
 801763c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8017640:	dc13      	bgt.n	801766a <LCD_GetpPalConvTableUncached+0x3e>
 8017642:	4a0c      	ldr	r2, [pc, #48]	; (8017674 <LCD_GetpPalConvTableUncached+0x48>)
 8017644:	6817      	ldr	r7, [r2, #0]
 8017646:	2400      	movs	r4, #0
 8017648:	4287      	cmp	r7, r0
 801764a:	bfa8      	it	ge
 801764c:	4607      	movge	r7, r0
 801764e:	42bc      	cmp	r4, r7
 8017650:	4b07      	ldr	r3, [pc, #28]	; (8017670 <LCD_GetpPalConvTableUncached+0x44>)
 8017652:	da08      	bge.n	8017666 <LCD_GetpPalConvTableUncached+0x3a>
 8017654:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8017658:	681e      	ldr	r6, [r3, #0]
 801765a:	f7fa fa59 	bl	8011b10 <LCD_Color2Index>
 801765e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8017662:	3401      	adds	r4, #1
 8017664:	e7f3      	b.n	801764e <LCD_GetpPalConvTableUncached+0x22>
 8017666:	6818      	ldr	r0, [r3, #0]
 8017668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801766a:	2000      	movs	r0, #0
 801766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801766e:	bf00      	nop
 8017670:	2000ec58 	.word	0x2000ec58
 8017674:	20000338 	.word	0x20000338

08017678 <LCD_GetpPalConvTableBM>:
 8017678:	f7ff bfd8 	b.w	801762c <LCD_GetpPalConvTableUncached>

0801767c <LCD_InitLUT>:
 801767c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017680:	f001 f922 	bl	80188c8 <LCD_GetNumLayers>
 8017684:	2400      	movs	r4, #0
 8017686:	4607      	mov	r7, r0
 8017688:	42bc      	cmp	r4, r7
 801768a:	da2b      	bge.n	80176e4 <LCD_InitLUT+0x68>
 801768c:	4620      	mov	r0, r4
 801768e:	f7fb ff0f 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 8017692:	b328      	cbz	r0, 80176e0 <LCD_InitLUT+0x64>
 8017694:	4620      	mov	r0, r4
 8017696:	f7fb f891 	bl	80127bc <GUI_SelectLayer>
 801769a:	4680      	mov	r8, r0
 801769c:	4620      	mov	r0, r4
 801769e:	f7f9 fe8e 	bl	80113be <LCD_GetBitsPerPixelEx>
 80176a2:	2808      	cmp	r0, #8
 80176a4:	dd03      	ble.n	80176ae <LCD_InitLUT+0x32>
 80176a6:	4640      	mov	r0, r8
 80176a8:	f7fb f888 	bl	80127bc <GUI_SelectLayer>
 80176ac:	e018      	b.n	80176e0 <LCD_InitLUT+0x64>
 80176ae:	4b0e      	ldr	r3, [pc, #56]	; (80176e8 <LCD_InitLUT+0x6c>)
 80176b0:	490e      	ldr	r1, [pc, #56]	; (80176ec <LCD_InitLUT+0x70>)
 80176b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80176b6:	6902      	ldr	r2, [r0, #16]
 80176b8:	428a      	cmp	r2, r1
 80176ba:	d0f4      	beq.n	80176a6 <LCD_InitLUT+0x2a>
 80176bc:	4620      	mov	r0, r4
 80176be:	f7f9 fe81 	bl	80113c4 <LCD_GetNumColorsEx>
 80176c2:	2500      	movs	r5, #0
 80176c4:	4681      	mov	r9, r0
 80176c6:	454d      	cmp	r5, r9
 80176c8:	daed      	bge.n	80176a6 <LCD_InitLUT+0x2a>
 80176ca:	b2ee      	uxtb	r6, r5
 80176cc:	4630      	mov	r0, r6
 80176ce:	f7fa fa2f 	bl	8011b30 <LCD_Index2Color>
 80176d2:	4631      	mov	r1, r6
 80176d4:	4602      	mov	r2, r0
 80176d6:	4620      	mov	r0, r4
 80176d8:	f7f9 fe17 	bl	801130a <LCD_SetLUTEntryEx>
 80176dc:	3501      	adds	r5, #1
 80176de:	e7f2      	b.n	80176c6 <LCD_InitLUT+0x4a>
 80176e0:	3401      	adds	r4, #1
 80176e2:	e7d1      	b.n	8017688 <LCD_InitLUT+0xc>
 80176e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176e8:	2000eb5c 	.word	0x2000eb5c
 80176ec:	08035578 	.word	0x08035578

080176f0 <LCD_AA_SetAndMask>:
 80176f0:	4b02      	ldr	r3, [pc, #8]	; (80176fc <LCD_AA_SetAndMask+0xc>)
 80176f2:	681a      	ldr	r2, [r3, #0]
 80176f4:	6018      	str	r0, [r3, #0]
 80176f6:	4610      	mov	r0, r2
 80176f8:	4770      	bx	lr
 80176fa:	bf00      	nop
 80176fc:	2000033c 	.word	0x2000033c

08017700 <GUI__strcmp>:
 8017700:	b510      	push	{r4, lr}
 8017702:	4b09      	ldr	r3, [pc, #36]	; (8017728 <GUI__strcmp+0x28>)
 8017704:	2800      	cmp	r0, #0
 8017706:	bf08      	it	eq
 8017708:	4618      	moveq	r0, r3
 801770a:	2900      	cmp	r1, #0
 801770c:	bf08      	it	eq
 801770e:	4619      	moveq	r1, r3
 8017710:	2300      	movs	r3, #0
 8017712:	5cc4      	ldrb	r4, [r0, r3]
 8017714:	5cca      	ldrb	r2, [r1, r3]
 8017716:	42a2      	cmp	r2, r4
 8017718:	d104      	bne.n	8017724 <GUI__strcmp+0x24>
 801771a:	3301      	adds	r3, #1
 801771c:	2a00      	cmp	r2, #0
 801771e:	d1f8      	bne.n	8017712 <GUI__strcmp+0x12>
 8017720:	4610      	mov	r0, r2
 8017722:	bd10      	pop	{r4, pc}
 8017724:	2001      	movs	r0, #1
 8017726:	bd10      	pop	{r4, pc}
 8017728:	0801ff8e 	.word	0x0801ff8e

0801772c <GUI__strcmp_hp>:
 801772c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801772e:	460d      	mov	r5, r1
 8017730:	b160      	cbz	r0, 801774c <GUI__strcmp_hp+0x20>
 8017732:	f7fc fbe1 	bl	8013ef8 <GUI_ALLOC_LockH>
 8017736:	ac02      	add	r4, sp, #8
 8017738:	4629      	mov	r1, r5
 801773a:	f844 0d04 	str.w	r0, [r4, #-4]!
 801773e:	f7ff ffdf 	bl	8017700 <GUI__strcmp>
 8017742:	4605      	mov	r5, r0
 8017744:	4620      	mov	r0, r4
 8017746:	f7fc fbe5 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801774a:	e000      	b.n	801774e <GUI__strcmp_hp+0x22>
 801774c:	2501      	movs	r5, #1
 801774e:	4628      	mov	r0, r5
 8017750:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08017752 <GUI__sqrt32>:
 8017752:	b510      	push	{r4, lr}
 8017754:	2110      	movs	r1, #16
 8017756:	2300      	movs	r3, #0
 8017758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801775c:	189c      	adds	r4, r3, r2
 801775e:	4284      	cmp	r4, r0
 8017760:	bf9c      	itt	ls
 8017762:	18a3      	addls	r3, r4, r2
 8017764:	ebc4 0000 	rsbls	r0, r4, r0
 8017768:	085b      	lsrs	r3, r3, #1
 801776a:	0892      	lsrs	r2, r2, #2
 801776c:	3901      	subs	r1, #1
 801776e:	d1f5      	bne.n	801775c <GUI__sqrt32+0xa>
 8017770:	4618      	mov	r0, r3
 8017772:	bd10      	pop	{r4, pc}

08017774 <_GetCharWrap>:
 8017774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017776:	2400      	movs	r4, #0
 8017778:	9001      	str	r0, [sp, #4]
 801777a:	460e      	mov	r6, r1
 801777c:	4625      	mov	r5, r4
 801777e:	a801      	add	r0, sp, #4
 8017780:	f000 fc50 	bl	8018024 <GUI_UC__GetCharCodeInc>
 8017784:	4607      	mov	r7, r0
 8017786:	b148      	cbz	r0, 801779c <_GetCharWrap+0x28>
 8017788:	f7fc fab4 	bl	8013cf4 <GUI_GetCharDistX>
 801778c:	182d      	adds	r5, r5, r0
 801778e:	b10c      	cbz	r4, 8017794 <_GetCharWrap+0x20>
 8017790:	42b5      	cmp	r5, r6
 8017792:	dc03      	bgt.n	801779c <_GetCharWrap+0x28>
 8017794:	2f0a      	cmp	r7, #10
 8017796:	d001      	beq.n	801779c <_GetCharWrap+0x28>
 8017798:	3401      	adds	r4, #1
 801779a:	e7f0      	b.n	801777e <_GetCharWrap+0xa>
 801779c:	4620      	mov	r0, r4
 801779e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080177a0 <_GetWordWrap>:
 80177a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80177a4:	2400      	movs	r4, #0
 80177a6:	9001      	str	r0, [sp, #4]
 80177a8:	468a      	mov	sl, r1
 80177aa:	4691      	mov	r9, r2
 80177ac:	46a0      	mov	r8, r4
 80177ae:	4626      	mov	r6, r4
 80177b0:	4625      	mov	r5, r4
 80177b2:	4627      	mov	r7, r4
 80177b4:	a801      	add	r0, sp, #4
 80177b6:	f000 fc35 	bl	8018024 <GUI_UC__GetCharCodeInc>
 80177ba:	2c00      	cmp	r4, #0
 80177bc:	bf08      	it	eq
 80177be:	4604      	moveq	r4, r0
 80177c0:	b108      	cbz	r0, 80177c6 <_GetWordWrap+0x26>
 80177c2:	280a      	cmp	r0, #10
 80177c4:	d10c      	bne.n	80177e0 <_GetWordWrap+0x40>
 80177c6:	462e      	mov	r6, r5
 80177c8:	2e00      	cmp	r6, #0
 80177ca:	bf14      	ite	ne
 80177cc:	4630      	movne	r0, r6
 80177ce:	4628      	moveq	r0, r5
 80177d0:	f1b9 0f00 	cmp.w	r9, #0
 80177d4:	d016      	beq.n	8017804 <_GetWordWrap+0x64>
 80177d6:	ebc8 0707 	rsb	r7, r8, r7
 80177da:	f8c9 7000 	str.w	r7, [r9]
 80177de:	e011      	b.n	8017804 <_GetWordWrap+0x64>
 80177e0:	2820      	cmp	r0, #32
 80177e2:	d00d      	beq.n	8017800 <_GetWordWrap+0x60>
 80177e4:	2c20      	cmp	r4, #32
 80177e6:	bf04      	itt	eq
 80177e8:	462e      	moveq	r6, r5
 80177ea:	2400      	moveq	r4, #0
 80177ec:	f7fc fa82 	bl	8013cf4 <GUI_GetCharDistX>
 80177f0:	183f      	adds	r7, r7, r0
 80177f2:	4557      	cmp	r7, sl
 80177f4:	4680      	mov	r8, r0
 80177f6:	dd01      	ble.n	80177fc <_GetWordWrap+0x5c>
 80177f8:	2d00      	cmp	r5, #0
 80177fa:	d1e5      	bne.n	80177c8 <_GetWordWrap+0x28>
 80177fc:	3501      	adds	r5, #1
 80177fe:	e7d9      	b.n	80177b4 <_GetWordWrap+0x14>
 8017800:	462e      	mov	r6, r5
 8017802:	e7f3      	b.n	80177ec <_GetWordWrap+0x4c>
 8017804:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

08017808 <_WrapGetNumCharsDisp>:
 8017808:	2a01      	cmp	r2, #1
 801780a:	b510      	push	{r4, lr}
 801780c:	d005      	beq.n	801781a <_WrapGetNumCharsDisp+0x12>
 801780e:	2a02      	cmp	r2, #2
 8017810:	d108      	bne.n	8017824 <_WrapGetNumCharsDisp+0x1c>
 8017812:	4b07      	ldr	r3, [pc, #28]	; (8017830 <_WrapGetNumCharsDisp+0x28>)
 8017814:	681a      	ldr	r2, [r3, #0]
 8017816:	4790      	blx	r2
 8017818:	bd10      	pop	{r4, pc}
 801781a:	4c06      	ldr	r4, [pc, #24]	; (8017834 <_WrapGetNumCharsDisp+0x2c>)
 801781c:	461a      	mov	r2, r3
 801781e:	6824      	ldr	r4, [r4, #0]
 8017820:	47a0      	blx	r4
 8017822:	bd10      	pop	{r4, pc}
 8017824:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8017828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801782c:	f7fc b996 	b.w	8013b5c <GUI__GetLineNumChars>
 8017830:	20000340 	.word	0x20000340
 8017834:	20000344 	.word	0x20000344

08017838 <GUI__WrapGetNumCharsDisp>:
 8017838:	2300      	movs	r3, #0
 801783a:	f7ff bfe5 	b.w	8017808 <_WrapGetNumCharsDisp>

0801783e <GUI__WrapGetNumCharsToNextLine>:
 801783e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017840:	b085      	sub	sp, #20
 8017842:	ab03      	add	r3, sp, #12
 8017844:	4617      	mov	r7, r2
 8017846:	460e      	mov	r6, r1
 8017848:	9001      	str	r0, [sp, #4]
 801784a:	f7ff ffdd 	bl	8017808 <_WrapGetNumCharsDisp>
 801784e:	9d01      	ldr	r5, [sp, #4]
 8017850:	4604      	mov	r4, r0
 8017852:	4621      	mov	r1, r4
 8017854:	4628      	mov	r0, r5
 8017856:	f000 fbf9 	bl	801804c <GUI_UC__NumChars2NumBytes>
 801785a:	182d      	adds	r5, r5, r0
 801785c:	a804      	add	r0, sp, #16
 801785e:	f840 5d0c 	str.w	r5, [r0, #-12]!
 8017862:	f000 fbdf 	bl	8018024 <GUI_UC__GetCharCodeInc>
 8017866:	280a      	cmp	r0, #10
 8017868:	d101      	bne.n	801786e <GUI__WrapGetNumCharsToNextLine+0x30>
 801786a:	3401      	adds	r4, #1
 801786c:	e011      	b.n	8017892 <GUI__WrapGetNumCharsToNextLine+0x54>
 801786e:	2f01      	cmp	r7, #1
 8017870:	d10f      	bne.n	8017892 <GUI__WrapGetNumCharsToNextLine+0x54>
 8017872:	2820      	cmp	r0, #32
 8017874:	d10d      	bne.n	8017892 <GUI__WrapGetNumCharsToNextLine+0x54>
 8017876:	f7fc fa3d 	bl	8013cf4 <GUI_GetCharDistX>
 801787a:	4605      	mov	r5, r0
 801787c:	9803      	ldr	r0, [sp, #12]
 801787e:	4286      	cmp	r6, r0
 8017880:	db07      	blt.n	8017892 <GUI__WrapGetNumCharsToNextLine+0x54>
 8017882:	1941      	adds	r1, r0, r5
 8017884:	a801      	add	r0, sp, #4
 8017886:	9103      	str	r1, [sp, #12]
 8017888:	f000 fbcc 	bl	8018024 <GUI_UC__GetCharCodeInc>
 801788c:	3401      	adds	r4, #1
 801788e:	2820      	cmp	r0, #32
 8017890:	d0f4      	beq.n	801787c <GUI__WrapGetNumCharsToNextLine+0x3e>
 8017892:	4620      	mov	r0, r4
 8017894:	b005      	add	sp, #20
 8017896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017898 <GUI__WrapGetNumBytesToNextLine>:
 8017898:	b510      	push	{r4, lr}
 801789a:	4604      	mov	r4, r0
 801789c:	f7ff ffcf 	bl	801783e <GUI__WrapGetNumCharsToNextLine>
 80178a0:	4601      	mov	r1, r0
 80178a2:	4620      	mov	r0, r4
 80178a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178a8:	f000 bbd0 	b.w	801804c <GUI_UC__NumChars2NumBytes>

080178ac <GUI__HandleEOLine>:
 80178ac:	6803      	ldr	r3, [r0, #0]
 80178ae:	781a      	ldrb	r2, [r3, #0]
 80178b0:	b122      	cbz	r2, 80178bc <GUI__HandleEOLine+0x10>
 80178b2:	2a0a      	cmp	r2, #10
 80178b4:	d104      	bne.n	80178c0 <GUI__HandleEOLine+0x14>
 80178b6:	1c59      	adds	r1, r3, #1
 80178b8:	6001      	str	r1, [r0, #0]
 80178ba:	e001      	b.n	80178c0 <GUI__HandleEOLine+0x14>
 80178bc:	2001      	movs	r0, #1
 80178be:	4770      	bx	lr
 80178c0:	2000      	movs	r0, #0
 80178c2:	4770      	bx	lr

080178c4 <GUI__GetNumChars>:
 80178c4:	b513      	push	{r0, r1, r4, lr}
 80178c6:	4604      	mov	r4, r0
 80178c8:	9001      	str	r0, [sp, #4]
 80178ca:	b130      	cbz	r0, 80178da <GUI__GetNumChars+0x16>
 80178cc:	2400      	movs	r4, #0
 80178ce:	a801      	add	r0, sp, #4
 80178d0:	f000 fba8 	bl	8018024 <GUI_UC__GetCharCodeInc>
 80178d4:	b108      	cbz	r0, 80178da <GUI__GetNumChars+0x16>
 80178d6:	3401      	adds	r4, #1
 80178d8:	e7f9      	b.n	80178ce <GUI__GetNumChars+0xa>
 80178da:	4620      	mov	r0, r4
 80178dc:	bd1c      	pop	{r2, r3, r4, pc}
	...

080178e0 <GUI__GetFontSizeY>:
 80178e0:	4b03      	ldr	r3, [pc, #12]	; (80178f0 <GUI__GetFontSizeY+0x10>)
 80178e2:	6818      	ldr	r0, [r3, #0]
 80178e4:	69c1      	ldr	r1, [r0, #28]
 80178e6:	7e08      	ldrb	r0, [r1, #24]
 80178e8:	7eca      	ldrb	r2, [r1, #27]
 80178ea:	4350      	muls	r0, r2
 80178ec:	4770      	bx	lr
 80178ee:	bf00      	nop
 80178f0:	20000308 	.word	0x20000308

080178f4 <GUI__ExpandPixelIndicesEx>:
 80178f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178f8:	1e0c      	subs	r4, r1, #0
 80178fa:	4605      	mov	r5, r0
 80178fc:	f340 80b0 	ble.w	8017a60 <GUI__ExpandPixelIndicesEx+0x16c>
 8017900:	2a08      	cmp	r2, #8
 8017902:	685f      	ldr	r7, [r3, #4]
 8017904:	dd04      	ble.n	8017910 <GUI__ExpandPixelIndicesEx+0x1c>
 8017906:	2a10      	cmp	r2, #16
 8017908:	f340 8095 	ble.w	8017a36 <GUI__ExpandPixelIndicesEx+0x142>
 801790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017910:	3a01      	subs	r2, #1
 8017912:	2a07      	cmp	r2, #7
 8017914:	f200 80a4 	bhi.w	8017a60 <GUI__ExpandPixelIndicesEx+0x16c>
 8017918:	e8df f002 	tbb	[pc, r2]
 801791c:	53a22a04 	.word	0x53a22a04
 8017920:	7ca2a2a2 	.word	0x7ca2a2a2
 8017924:	1e66      	subs	r6, r4, #1
 8017926:	10f1      	asrs	r1, r6, #3
 8017928:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801792c:	2280      	movs	r2, #128	; 0x80
 801792e:	f006 0607 	and.w	r6, r6, #7
 8017932:	eb05 0e01 	add.w	lr, r5, r1
 8017936:	fa42 f206 	asr.w	r2, r2, r6
 801793a:	f815 9001 	ldrb.w	r9, [r5, r1]
 801793e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8017942:	b2d5      	uxtb	r5, r2
 8017944:	f1c6 0307 	rsb	r3, r6, #7
 8017948:	ea09 0005 	and.w	r0, r9, r5
 801794c:	fa40 f003 	asr.w	r0, r0, r3
 8017950:	47b8      	blx	r7
 8017952:	f848 0904 	str.w	r0, [r8], #-4
 8017956:	b926      	cbnz	r6, 8017962 <GUI__ExpandPixelIndicesEx+0x6e>
 8017958:	f81a 9901 	ldrb.w	r9, [sl], #-1
 801795c:	2501      	movs	r5, #1
 801795e:	2607      	movs	r6, #7
 8017960:	e002      	b.n	8017968 <GUI__ExpandPixelIndicesEx+0x74>
 8017962:	0068      	lsls	r0, r5, #1
 8017964:	3e01      	subs	r6, #1
 8017966:	b2c5      	uxtb	r5, r0
 8017968:	3c01      	subs	r4, #1
 801796a:	d1eb      	bne.n	8017944 <GUI__ExpandPixelIndicesEx+0x50>
 801796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017970:	1e62      	subs	r2, r4, #1
 8017972:	1093      	asrs	r3, r2, #2
 8017974:	f002 0603 	and.w	r6, r2, #3
 8017978:	eb05 0c03 	add.w	ip, r5, r3
 801797c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8017980:	f815 9003 	ldrb.w	r9, [r5, r3]
 8017984:	0070      	lsls	r0, r6, #1
 8017986:	25c0      	movs	r5, #192	; 0xc0
 8017988:	fa45 f500 	asr.w	r5, r5, r0
 801798c:	f10c 3aff 	add.w	sl, ip, #4294967295
 8017990:	b2ed      	uxtb	r5, r5
 8017992:	0072      	lsls	r2, r6, #1
 8017994:	ea09 0105 	and.w	r1, r9, r5
 8017998:	f1c2 0306 	rsb	r3, r2, #6
 801799c:	fa41 f003 	asr.w	r0, r1, r3
 80179a0:	b2c0      	uxtb	r0, r0
 80179a2:	47b8      	blx	r7
 80179a4:	f848 0904 	str.w	r0, [r8], #-4
 80179a8:	b926      	cbnz	r6, 80179b4 <GUI__ExpandPixelIndicesEx+0xc0>
 80179aa:	2503      	movs	r5, #3
 80179ac:	f81a 9901 	ldrb.w	r9, [sl], #-1
 80179b0:	462e      	mov	r6, r5
 80179b2:	e002      	b.n	80179ba <GUI__ExpandPixelIndicesEx+0xc6>
 80179b4:	00ad      	lsls	r5, r5, #2
 80179b6:	3e01      	subs	r6, #1
 80179b8:	b2ed      	uxtb	r5, r5
 80179ba:	3c01      	subs	r4, #1
 80179bc:	d1e9      	bne.n	8017992 <GUI__ExpandPixelIndicesEx+0x9e>
 80179be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179c2:	1e66      	subs	r6, r4, #1
 80179c4:	1071      	asrs	r1, r6, #1
 80179c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80179ca:	f006 0601 	and.w	r6, r6, #1
 80179ce:	eb05 0a01 	add.w	sl, r5, r1
 80179d2:	f815 9001 	ldrb.w	r9, [r5, r1]
 80179d6:	00b5      	lsls	r5, r6, #2
 80179d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80179dc:	2d00      	cmp	r5, #0
 80179de:	bf14      	ite	ne
 80179e0:	250f      	movne	r5, #15
 80179e2:	25f0      	moveq	r5, #240	; 0xf0
 80179e4:	00b3      	lsls	r3, r6, #2
 80179e6:	f1c3 0004 	rsb	r0, r3, #4
 80179ea:	ea09 0205 	and.w	r2, r9, r5
 80179ee:	fa42 f100 	asr.w	r1, r2, r0
 80179f2:	b2c8      	uxtb	r0, r1
 80179f4:	47b8      	blx	r7
 80179f6:	f848 0904 	str.w	r0, [r8], #-4
 80179fa:	b926      	cbnz	r6, 8017a06 <GUI__ExpandPixelIndicesEx+0x112>
 80179fc:	f81a 9901 	ldrb.w	r9, [sl], #-1
 8017a00:	250f      	movs	r5, #15
 8017a02:	2601      	movs	r6, #1
 8017a04:	e002      	b.n	8017a0c <GUI__ExpandPixelIndicesEx+0x118>
 8017a06:	012e      	lsls	r6, r5, #4
 8017a08:	b2f5      	uxtb	r5, r6
 8017a0a:	2600      	movs	r6, #0
 8017a0c:	3c01      	subs	r4, #1
 8017a0e:	d1e9      	bne.n	80179e4 <GUI__ExpandPixelIndicesEx+0xf0>
 8017a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a14:	eb05 0804 	add.w	r8, r5, r4
 8017a18:	4646      	mov	r6, r8
 8017a1a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8017a1e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8017a22:	47b8      	blx	r7
 8017a24:	ebc8 0304 	rsb	r3, r8, r4
 8017a28:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017a2c:	1998      	adds	r0, r3, r6
 8017a2e:	2800      	cmp	r0, #0
 8017a30:	d1f5      	bne.n	8017a1e <GUI__ExpandPixelIndicesEx+0x12a>
 8017a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a36:	695e      	ldr	r6, [r3, #20]
 8017a38:	b12e      	cbz	r6, 8017a46 <GUI__ExpandPixelIndicesEx+0x152>
 8017a3a:	4629      	mov	r1, r5
 8017a3c:	4622      	mov	r2, r4
 8017a3e:	2302      	movs	r3, #2
 8017a40:	47b0      	blx	r6
 8017a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a46:	eb05 0644 	add.w	r6, r5, r4, lsl #1
 8017a4a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8017a4e:	f836 0d02 	ldrh.w	r0, [r6, #-2]!
 8017a52:	47b8      	blx	r7
 8017a54:	3c01      	subs	r4, #1
 8017a56:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017a5a:	d1f8      	bne.n	8017a4e <GUI__ExpandPixelIndicesEx+0x15a>
 8017a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017a64 <GUI__DrawBitmap16bpp>:
 8017a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a68:	b08f      	sub	sp, #60	; 0x3c
 8017a6a:	460d      	mov	r5, r1
 8017a6c:	4693      	mov	fp, r2
 8017a6e:	4699      	mov	r9, r3
 8017a70:	9007      	str	r0, [sp, #28]
 8017a72:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017a74:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017a76:	f000 fb42 	bl	80180fe <GUI_GetColor>
 8017a7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8017a7c:	f000 ff3a 	bl	80188f4 <LCD_GetColorIndex>
 8017a80:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8017a82:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017a84:	430f      	orrs	r7, r1
 8017a86:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8017a8a:	2f01      	cmp	r7, #1
 8017a8c:	4684      	mov	ip, r0
 8017a8e:	9208      	str	r2, [sp, #32]
 8017a90:	d001      	beq.n	8017a96 <GUI__DrawBitmap16bpp+0x32>
 8017a92:	2700      	movs	r7, #0
 8017a94:	e028      	b.n	8017ae8 <GUI__DrawBitmap16bpp+0x84>
 8017a96:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8017ca0 <GUI__DrawBitmap16bpp+0x23c>
 8017a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8017a9e:	7c58      	ldrb	r0, [r3, #17]
 8017aa0:	f7f9 fcca 	bl	8011438 <GUI_GetpfIndex2ColorEx>
 8017aa4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017aa6:	4282      	cmp	r2, r0
 8017aa8:	d146      	bne.n	8017b38 <GUI__DrawBitmap16bpp+0xd4>
 8017aaa:	9a08      	ldr	r2, [sp, #32]
 8017aac:	9700      	str	r7, [sp, #0]
 8017aae:	2110      	movs	r1, #16
 8017ab0:	2000      	movs	r0, #0
 8017ab2:	9102      	str	r1, [sp, #8]
 8017ab4:	9203      	str	r2, [sp, #12]
 8017ab6:	9005      	str	r0, [sp, #20]
 8017ab8:	9701      	str	r7, [sp, #4]
 8017aba:	9404      	str	r4, [sp, #16]
 8017abc:	9807      	ldr	r0, [sp, #28]
 8017abe:	4629      	mov	r1, r5
 8017ac0:	465a      	mov	r2, fp
 8017ac2:	464b      	mov	r3, r9
 8017ac4:	f7f9 febe 	bl	8011844 <LCD_DrawBitmap>
 8017ac8:	e0e6      	b.n	8017c98 <GUI__DrawBitmap16bpp+0x234>
 8017aca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017acc:	4974      	ldr	r1, [pc, #464]	; (8017ca0 <GUI__DrawBitmap16bpp+0x23c>)
 8017ace:	182b      	adds	r3, r5, r0
 8017ad0:	6808      	ldr	r0, [r1, #0]
 8017ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ad4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017ad8:	f103 3aff 	add.w	sl, r3, #4294967295
 8017adc:	4592      	cmp	sl, r2
 8017ade:	da06      	bge.n	8017aee <GUI__DrawBitmap16bpp+0x8a>
 8017ae0:	9d08      	ldr	r5, [sp, #32]
 8017ae2:	1964      	adds	r4, r4, r5
 8017ae4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017ae6:	3701      	adds	r7, #1
 8017ae8:	454f      	cmp	r7, r9
 8017aea:	dbee      	blt.n	8017aca <GUI__DrawBitmap16bpp+0x66>
 8017aec:	e079      	b.n	8017be2 <GUI__DrawBitmap16bpp+0x17e>
 8017aee:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8017af2:	429d      	cmp	r5, r3
 8017af4:	dcf4      	bgt.n	8017ae0 <GUI__DrawBitmap16bpp+0x7c>
 8017af6:	9a07      	ldr	r2, [sp, #28]
 8017af8:	2600      	movs	r6, #0
 8017afa:	455e      	cmp	r6, fp
 8017afc:	daf0      	bge.n	8017ae0 <GUI__DrawBitmap16bpp+0x7c>
 8017afe:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8017b02:	45e0      	cmp	r8, ip
 8017b04:	d007      	beq.n	8017b16 <GUI__DrawBitmap16bpp+0xb2>
 8017b06:	9206      	str	r2, [sp, #24]
 8017b08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017b0a:	4640      	mov	r0, r8
 8017b0c:	4788      	blx	r1
 8017b0e:	f7fa f863 	bl	8011bd8 <LCD_SetColor>
 8017b12:	9a06      	ldr	r2, [sp, #24]
 8017b14:	46c4      	mov	ip, r8
 8017b16:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017b18:	f8cd c018 	str.w	ip, [sp, #24]
 8017b1c:	eb02 0800 	add.w	r8, r2, r0
 8017b20:	4629      	mov	r1, r5
 8017b22:	4610      	mov	r0, r2
 8017b24:	4653      	mov	r3, sl
 8017b26:	f108 32ff 	add.w	r2, r8, #4294967295
 8017b2a:	f7f9 fd85 	bl	8011638 <LCD_FillRect>
 8017b2e:	3601      	adds	r6, #1
 8017b30:	4642      	mov	r2, r8
 8017b32:	f8dd c018 	ldr.w	ip, [sp, #24]
 8017b36:	e7e0      	b.n	8017afa <GUI__DrawBitmap16bpp+0x96>
 8017b38:	eb05 0109 	add.w	r1, r5, r9
 8017b3c:	1e48      	subs	r0, r1, #1
 8017b3e:	9009      	str	r0, [sp, #36]	; 0x24
 8017b40:	f8d8 0000 	ldr.w	r0, [r8]
 8017b44:	9b07      	ldr	r3, [sp, #28]
 8017b46:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017b4a:	eb03 0a0b 	add.w	sl, r3, fp
 8017b4e:	4295      	cmp	r5, r2
 8017b50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b54:	da06      	bge.n	8017b64 <GUI__DrawBitmap16bpp+0x100>
 8017b56:	9908      	ldr	r1, [sp, #32]
 8017b58:	1b55      	subs	r5, r2, r5
 8017b5a:	fb05 4401 	mla	r4, r5, r1, r4
 8017b5e:	ebc5 0909 	rsb	r9, r5, r9
 8017b62:	4615      	mov	r5, r2
 8017b64:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8017b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b6a:	1ad1      	subs	r1, r2, r3
 8017b6c:	2900      	cmp	r1, #0
 8017b6e:	bfc8      	it	gt
 8017b70:	ebc1 0909 	rsbgt	r9, r1, r9
 8017b74:	f1b9 0f00 	cmp.w	r9, #0
 8017b78:	f340 808e 	ble.w	8017c98 <GUI__DrawBitmap16bpp+0x234>
 8017b7c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8017b80:	9907      	ldr	r1, [sp, #28]
 8017b82:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8017b86:	ebc3 020a 	rsb	r2, r3, sl
 8017b8a:	2a00      	cmp	r2, #0
 8017b8c:	bfc8      	it	gt
 8017b8e:	ebc2 0b0b 	rsbgt	fp, r2, fp
 8017b92:	4281      	cmp	r1, r0
 8017b94:	da05      	bge.n	8017ba2 <GUI__DrawBitmap16bpp+0x13e>
 8017b96:	1a43      	subs	r3, r0, r1
 8017b98:	ebc3 0b0b 	rsb	fp, r3, fp
 8017b9c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017ba0:	9007      	str	r0, [sp, #28]
 8017ba2:	f1bb 0f00 	cmp.w	fp, #0
 8017ba6:	dd77      	ble.n	8017c98 <GUI__DrawBitmap16bpp+0x234>
 8017ba8:	2100      	movs	r1, #0
 8017baa:	910d      	str	r1, [sp, #52]	; 0x34
 8017bac:	b1ee      	cbz	r6, 8017bea <GUI__DrawBitmap16bpp+0x186>
 8017bae:	f8d6 8014 	ldr.w	r8, [r6, #20]
 8017bb2:	f1b8 0f00 	cmp.w	r8, #0
 8017bb6:	d004      	beq.n	8017bc2 <GUI__DrawBitmap16bpp+0x15e>
 8017bb8:	a80d      	add	r0, sp, #52	; 0x34
 8017bba:	460a      	mov	r2, r1
 8017bbc:	460b      	mov	r3, r1
 8017bbe:	f7fa fb8d 	bl	80122dc <GUI__GetAlphaBuffer>
 8017bc2:	4f37      	ldr	r7, [pc, #220]	; (8017ca0 <GUI__DrawBitmap16bpp+0x23c>)
 8017bc4:	f000 fe66 	bl	8018894 <LCD_GetNextPixelAPI>
 8017bc8:	683a      	ldr	r2, [r7, #0]
 8017bca:	4606      	mov	r6, r0
 8017bcc:	7c50      	ldrb	r0, [r2, #17]
 8017bce:	f7f9 fc3b 	bl	8011448 <GUI_GetpfColor2IndexEx>
 8017bd2:	4629      	mov	r1, r5
 8017bd4:	900a      	str	r0, [sp, #40]	; 0x28
 8017bd6:	4652      	mov	r2, sl
 8017bd8:	9807      	ldr	r0, [sp, #28]
 8017bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bdc:	6835      	ldr	r5, [r6, #0]
 8017bde:	47a8      	blx	r5
 8017be0:	b128      	cbz	r0, 8017bee <GUI__DrawBitmap16bpp+0x18a>
 8017be2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017be4:	f7fa fdc2 	bl	801276c <GUI_SetColor>
 8017be8:	e056      	b.n	8017c98 <GUI__DrawBitmap16bpp+0x234>
 8017bea:	46b0      	mov	r8, r6
 8017bec:	e7e9      	b.n	8017bc2 <GUI__DrawBitmap16bpp+0x15e>
 8017bee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017bf0:	b91d      	cbnz	r5, 8017bfa <GUI__DrawBitmap16bpp+0x196>
 8017bf2:	9f08      	ldr	r7, [sp, #32]
 8017bf4:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8017bf8:	e045      	b.n	8017c86 <GUI__DrawBitmap16bpp+0x222>
 8017bfa:	683f      	ldr	r7, [r7, #0]
 8017bfc:	4929      	ldr	r1, [pc, #164]	; (8017ca4 <GUI__DrawBitmap16bpp+0x240>)
 8017bfe:	7c7d      	ldrb	r5, [r7, #17]
 8017c00:	9f08      	ldr	r7, [sp, #32]
 8017c02:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8017c06:	691a      	ldr	r2, [r3, #16]
 8017c08:	6915      	ldr	r5, [r2, #16]
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017c0e:	465a      	mov	r2, fp
 8017c10:	2302      	movs	r3, #2
 8017c12:	47c0      	blx	r8
 8017c14:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017c16:	b125      	cbz	r5, 8017c22 <GUI__DrawBitmap16bpp+0x1be>
 8017c18:	4601      	mov	r1, r0
 8017c1a:	465a      	mov	r2, fp
 8017c1c:	2304      	movs	r3, #4
 8017c1e:	47a8      	blx	r5
 8017c20:	e00c      	b.n	8017c3c <GUI__DrawBitmap16bpp+0x1d8>
 8017c22:	4603      	mov	r3, r0
 8017c24:	46aa      	mov	sl, r5
 8017c26:	6818      	ldr	r0, [r3, #0]
 8017c28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017c2a:	9306      	str	r3, [sp, #24]
 8017c2c:	4788      	blx	r1
 8017c2e:	f10a 0a01 	add.w	sl, sl, #1
 8017c32:	9b06      	ldr	r3, [sp, #24]
 8017c34:	45da      	cmp	sl, fp
 8017c36:	f843 0b04 	str.w	r0, [r3], #4
 8017c3a:	d1f4      	bne.n	8017c26 <GUI__DrawBitmap16bpp+0x1c2>
 8017c3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017c3e:	f04f 0a00 	mov.w	sl, #0
 8017c42:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8017c46:	6871      	ldr	r1, [r6, #4]
 8017c48:	9206      	str	r2, [sp, #24]
 8017c4a:	f10a 0a01 	add.w	sl, sl, #1
 8017c4e:	4788      	blx	r1
 8017c50:	45da      	cmp	sl, fp
 8017c52:	9a06      	ldr	r2, [sp, #24]
 8017c54:	d1f5      	bne.n	8017c42 <GUI__DrawBitmap16bpp+0x1de>
 8017c56:	68b0      	ldr	r0, [r6, #8]
 8017c58:	4780      	blx	r0
 8017c5a:	f1b9 0901 	subs.w	r9, r9, #1
 8017c5e:	443c      	add	r4, r7
 8017c60:	d1d3      	bne.n	8017c0a <GUI__DrawBitmap16bpp+0x1a6>
 8017c62:	68f3      	ldr	r3, [r6, #12]
 8017c64:	4798      	blx	r3
 8017c66:	e7bc      	b.n	8017be2 <GUI__DrawBitmap16bpp+0x17e>
 8017c68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017c6a:	f839 0b02 	ldrh.w	r0, [r9], #2
 8017c6e:	4788      	blx	r1
 8017c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c72:	4798      	blx	r3
 8017c74:	6872      	ldr	r2, [r6, #4]
 8017c76:	4790      	blx	r2
 8017c78:	45d1      	cmp	r9, sl
 8017c7a:	d1f5      	bne.n	8017c68 <GUI__DrawBitmap16bpp+0x204>
 8017c7c:	b115      	cbz	r5, 8017c84 <GUI__DrawBitmap16bpp+0x220>
 8017c7e:	68b0      	ldr	r0, [r6, #8]
 8017c80:	4780      	blx	r0
 8017c82:	19e4      	adds	r4, r4, r7
 8017c84:	46a9      	mov	r9, r5
 8017c86:	f109 35ff 	add.w	r5, r9, #4294967295
 8017c8a:	f1b9 0f00 	cmp.w	r9, #0
 8017c8e:	d0e8      	beq.n	8017c62 <GUI__DrawBitmap16bpp+0x1fe>
 8017c90:	eb04 0a08 	add.w	sl, r4, r8
 8017c94:	46a1      	mov	r9, r4
 8017c96:	e7e7      	b.n	8017c68 <GUI__DrawBitmap16bpp+0x204>
 8017c98:	b00f      	add	sp, #60	; 0x3c
 8017c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c9e:	bf00      	nop
 8017ca0:	20000308 	.word	0x20000308
 8017ca4:	2000eb5c 	.word	0x2000eb5c

08017ca8 <GUI__CompactPixelIndices>:
 8017ca8:	2a08      	cmp	r2, #8
 8017caa:	b530      	push	{r4, r5, lr}
 8017cac:	dd0d      	ble.n	8017cca <GUI__CompactPixelIndices+0x22>
 8017cae:	2a10      	cmp	r2, #16
 8017cb0:	dc09      	bgt.n	8017cc6 <GUI__CompactPixelIndices+0x1e>
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8017cb8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	428b      	cmp	r3, r1
 8017cc0:	d1f8      	bne.n	8017cb4 <GUI__CompactPixelIndices+0xc>
 8017cc2:	2001      	movs	r0, #1
 8017cc4:	bd30      	pop	{r4, r5, pc}
 8017cc6:	2000      	movs	r0, #0
 8017cc8:	bd30      	pop	{r4, r5, pc}
 8017cca:	2a02      	cmp	r2, #2
 8017ccc:	d125      	bne.n	8017d1a <GUI__CompactPixelIndices+0x72>
 8017cce:	4602      	mov	r2, r0
 8017cd0:	6803      	ldr	r3, [r0, #0]
 8017cd2:	019c      	lsls	r4, r3, #6
 8017cd4:	b2e3      	uxtb	r3, r4
 8017cd6:	1e4c      	subs	r4, r1, #1
 8017cd8:	d01c      	beq.n	8017d14 <GUI__CompactPixelIndices+0x6c>
 8017cda:	6845      	ldr	r5, [r0, #4]
 8017cdc:	3c01      	subs	r4, #1
 8017cde:	f005 0503 	and.w	r5, r5, #3
 8017ce2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8017ce6:	d101      	bne.n	8017cec <GUI__CompactPixelIndices+0x44>
 8017ce8:	3008      	adds	r0, #8
 8017cea:	e014      	b.n	8017d16 <GUI__CompactPixelIndices+0x6e>
 8017cec:	6885      	ldr	r5, [r0, #8]
 8017cee:	2c01      	cmp	r4, #1
 8017cf0:	f005 0503 	and.w	r5, r5, #3
 8017cf4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8017cf8:	d101      	bne.n	8017cfe <GUI__CompactPixelIndices+0x56>
 8017cfa:	300c      	adds	r0, #12
 8017cfc:	e00b      	b.n	8017d16 <GUI__CompactPixelIndices+0x6e>
 8017cfe:	68c4      	ldr	r4, [r0, #12]
 8017d00:	f004 0403 	and.w	r4, r4, #3
 8017d04:	4323      	orrs	r3, r4
 8017d06:	3010      	adds	r0, #16
 8017d08:	3904      	subs	r1, #4
 8017d0a:	f802 3b01 	strb.w	r3, [r2], #1
 8017d0e:	2900      	cmp	r1, #0
 8017d10:	d1de      	bne.n	8017cd0 <GUI__CompactPixelIndices+0x28>
 8017d12:	e7d6      	b.n	8017cc2 <GUI__CompactPixelIndices+0x1a>
 8017d14:	3004      	adds	r0, #4
 8017d16:	2100      	movs	r1, #0
 8017d18:	e7f7      	b.n	8017d0a <GUI__CompactPixelIndices+0x62>
 8017d1a:	2a04      	cmp	r2, #4
 8017d1c:	d112      	bne.n	8017d44 <GUI__CompactPixelIndices+0x9c>
 8017d1e:	4602      	mov	r2, r0
 8017d20:	6803      	ldr	r3, [r0, #0]
 8017d22:	011b      	lsls	r3, r3, #4
 8017d24:	3901      	subs	r1, #1
 8017d26:	b2db      	uxtb	r3, r3
 8017d28:	d101      	bne.n	8017d2e <GUI__CompactPixelIndices+0x86>
 8017d2a:	3004      	adds	r0, #4
 8017d2c:	e005      	b.n	8017d3a <GUI__CompactPixelIndices+0x92>
 8017d2e:	6844      	ldr	r4, [r0, #4]
 8017d30:	f004 040f 	and.w	r4, r4, #15
 8017d34:	4323      	orrs	r3, r4
 8017d36:	3008      	adds	r0, #8
 8017d38:	3901      	subs	r1, #1
 8017d3a:	f802 3b01 	strb.w	r3, [r2], #1
 8017d3e:	2900      	cmp	r1, #0
 8017d40:	d1ee      	bne.n	8017d20 <GUI__CompactPixelIndices+0x78>
 8017d42:	e7be      	b.n	8017cc2 <GUI__CompactPixelIndices+0x1a>
 8017d44:	2a01      	cmp	r2, #1
 8017d46:	d148      	bne.n	8017dda <GUI__CompactPixelIndices+0x132>
 8017d48:	4604      	mov	r4, r0
 8017d4a:	6803      	ldr	r3, [r0, #0]
 8017d4c:	01da      	lsls	r2, r3, #7
 8017d4e:	b2d3      	uxtb	r3, r2
 8017d50:	1e4a      	subs	r2, r1, #1
 8017d52:	d03f      	beq.n	8017dd4 <GUI__CompactPixelIndices+0x12c>
 8017d54:	6845      	ldr	r5, [r0, #4]
 8017d56:	3a01      	subs	r2, #1
 8017d58:	f005 0501 	and.w	r5, r5, #1
 8017d5c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8017d60:	d101      	bne.n	8017d66 <GUI__CompactPixelIndices+0xbe>
 8017d62:	3008      	adds	r0, #8
 8017d64:	e037      	b.n	8017dd6 <GUI__CompactPixelIndices+0x12e>
 8017d66:	6885      	ldr	r5, [r0, #8]
 8017d68:	2a01      	cmp	r2, #1
 8017d6a:	f005 0501 	and.w	r5, r5, #1
 8017d6e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8017d72:	d101      	bne.n	8017d78 <GUI__CompactPixelIndices+0xd0>
 8017d74:	300c      	adds	r0, #12
 8017d76:	e02e      	b.n	8017dd6 <GUI__CompactPixelIndices+0x12e>
 8017d78:	68c5      	ldr	r5, [r0, #12]
 8017d7a:	2a02      	cmp	r2, #2
 8017d7c:	f005 0501 	and.w	r5, r5, #1
 8017d80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8017d84:	d101      	bne.n	8017d8a <GUI__CompactPixelIndices+0xe2>
 8017d86:	3010      	adds	r0, #16
 8017d88:	e025      	b.n	8017dd6 <GUI__CompactPixelIndices+0x12e>
 8017d8a:	6905      	ldr	r5, [r0, #16]
 8017d8c:	2a03      	cmp	r2, #3
 8017d8e:	f005 0501 	and.w	r5, r5, #1
 8017d92:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 8017d96:	d101      	bne.n	8017d9c <GUI__CompactPixelIndices+0xf4>
 8017d98:	3014      	adds	r0, #20
 8017d9a:	e01c      	b.n	8017dd6 <GUI__CompactPixelIndices+0x12e>
 8017d9c:	6945      	ldr	r5, [r0, #20]
 8017d9e:	2a04      	cmp	r2, #4
 8017da0:	f005 0501 	and.w	r5, r5, #1
 8017da4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8017da8:	d101      	bne.n	8017dae <GUI__CompactPixelIndices+0x106>
 8017daa:	3018      	adds	r0, #24
 8017dac:	e013      	b.n	8017dd6 <GUI__CompactPixelIndices+0x12e>
 8017dae:	6982      	ldr	r2, [r0, #24]
 8017db0:	3907      	subs	r1, #7
 8017db2:	f002 0201 	and.w	r2, r2, #1
 8017db6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8017dba:	d101      	bne.n	8017dc0 <GUI__CompactPixelIndices+0x118>
 8017dbc:	301c      	adds	r0, #28
 8017dbe:	e004      	b.n	8017dca <GUI__CompactPixelIndices+0x122>
 8017dc0:	69c2      	ldr	r2, [r0, #28]
 8017dc2:	f002 0201 	and.w	r2, r2, #1
 8017dc6:	4313      	orrs	r3, r2
 8017dc8:	3020      	adds	r0, #32
 8017dca:	f804 3b01 	strb.w	r3, [r4], #1
 8017dce:	2900      	cmp	r1, #0
 8017dd0:	d1bb      	bne.n	8017d4a <GUI__CompactPixelIndices+0xa2>
 8017dd2:	e776      	b.n	8017cc2 <GUI__CompactPixelIndices+0x1a>
 8017dd4:	3004      	adds	r0, #4
 8017dd6:	2100      	movs	r1, #0
 8017dd8:	e7f7      	b.n	8017dca <GUI__CompactPixelIndices+0x122>
 8017dda:	2300      	movs	r3, #0
 8017ddc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8017de0:	54c2      	strb	r2, [r0, r3]
 8017de2:	3301      	adds	r3, #1
 8017de4:	428b      	cmp	r3, r1
 8017de6:	d1f9      	bne.n	8017ddc <GUI__CompactPixelIndices+0x134>
 8017de8:	e76b      	b.n	8017cc2 <GUI__CompactPixelIndices+0x1a>

08017dea <GUI__CompactPixelIndicesEx>:
 8017dea:	2a08      	cmp	r2, #8
 8017dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017df0:	4604      	mov	r4, r0
 8017df2:	460d      	mov	r5, r1
 8017df4:	681e      	ldr	r6, [r3, #0]
 8017df6:	dd05      	ble.n	8017e04 <GUI__CompactPixelIndicesEx+0x1a>
 8017df8:	2a10      	cmp	r2, #16
 8017dfa:	f340 80b1 	ble.w	8017f60 <GUI__CompactPixelIndicesEx+0x176>
 8017dfe:	2000      	movs	r0, #0
 8017e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e04:	3a01      	subs	r2, #1
 8017e06:	2a07      	cmp	r2, #7
 8017e08:	f200 80a1 	bhi.w	8017f4e <GUI__CompactPixelIndicesEx+0x164>
 8017e0c:	e8df f002 	tbb	[pc, r2]
 8017e10:	7b9f5404 	.word	0x7b9f5404
 8017e14:	909f9f9f 	.word	0x909f9f9f
 8017e18:	46a1      	mov	r9, r4
 8017e1a:	6820      	ldr	r0, [r4, #0]
 8017e1c:	47b0      	blx	r6
 8017e1e:	01c1      	lsls	r1, r0, #7
 8017e20:	f1b5 0801 	subs.w	r8, r5, #1
 8017e24:	b2cf      	uxtb	r7, r1
 8017e26:	f000 8095 	beq.w	8017f54 <GUI__CompactPixelIndicesEx+0x16a>
 8017e2a:	6860      	ldr	r0, [r4, #4]
 8017e2c:	47b0      	blx	r6
 8017e2e:	f1b8 0801 	subs.w	r8, r8, #1
 8017e32:	ea47 1380 	orr.w	r3, r7, r0, lsl #6
 8017e36:	b2df      	uxtb	r7, r3
 8017e38:	d101      	bne.n	8017e3e <GUI__CompactPixelIndicesEx+0x54>
 8017e3a:	3408      	adds	r4, #8
 8017e3c:	e08b      	b.n	8017f56 <GUI__CompactPixelIndicesEx+0x16c>
 8017e3e:	68a0      	ldr	r0, [r4, #8]
 8017e40:	47b0      	blx	r6
 8017e42:	f1b8 0f01 	cmp.w	r8, #1
 8017e46:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
 8017e4a:	b2ff      	uxtb	r7, r7
 8017e4c:	d101      	bne.n	8017e52 <GUI__CompactPixelIndicesEx+0x68>
 8017e4e:	340c      	adds	r4, #12
 8017e50:	e081      	b.n	8017f56 <GUI__CompactPixelIndicesEx+0x16c>
 8017e52:	68e0      	ldr	r0, [r4, #12]
 8017e54:	47b0      	blx	r6
 8017e56:	f1b8 0f02 	cmp.w	r8, #2
 8017e5a:	ea47 1200 	orr.w	r2, r7, r0, lsl #4
 8017e5e:	b2d7      	uxtb	r7, r2
 8017e60:	d101      	bne.n	8017e66 <GUI__CompactPixelIndicesEx+0x7c>
 8017e62:	3410      	adds	r4, #16
 8017e64:	e077      	b.n	8017f56 <GUI__CompactPixelIndicesEx+0x16c>
 8017e66:	6920      	ldr	r0, [r4, #16]
 8017e68:	47b0      	blx	r6
 8017e6a:	f1b8 0f03 	cmp.w	r8, #3
 8017e6e:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8017e72:	b2c7      	uxtb	r7, r0
 8017e74:	d101      	bne.n	8017e7a <GUI__CompactPixelIndicesEx+0x90>
 8017e76:	3414      	adds	r4, #20
 8017e78:	e06d      	b.n	8017f56 <GUI__CompactPixelIndicesEx+0x16c>
 8017e7a:	6960      	ldr	r0, [r4, #20]
 8017e7c:	47b0      	blx	r6
 8017e7e:	f1b8 0f04 	cmp.w	r8, #4
 8017e82:	ea47 0180 	orr.w	r1, r7, r0, lsl #2
 8017e86:	b2cf      	uxtb	r7, r1
 8017e88:	d101      	bne.n	8017e8e <GUI__CompactPixelIndicesEx+0xa4>
 8017e8a:	3418      	adds	r4, #24
 8017e8c:	e063      	b.n	8017f56 <GUI__CompactPixelIndicesEx+0x16c>
 8017e8e:	69a0      	ldr	r0, [r4, #24]
 8017e90:	47b0      	blx	r6
 8017e92:	f1b8 0f05 	cmp.w	r8, #5
 8017e96:	ea47 0340 	orr.w	r3, r7, r0, lsl #1
 8017e9a:	b2df      	uxtb	r7, r3
 8017e9c:	d101      	bne.n	8017ea2 <GUI__CompactPixelIndicesEx+0xb8>
 8017e9e:	341c      	adds	r4, #28
 8017ea0:	e059      	b.n	8017f56 <GUI__CompactPixelIndicesEx+0x16c>
 8017ea2:	69e0      	ldr	r0, [r4, #28]
 8017ea4:	47b0      	blx	r6
 8017ea6:	4307      	orrs	r7, r0
 8017ea8:	3420      	adds	r4, #32
 8017eaa:	b2ff      	uxtb	r7, r7
 8017eac:	3d08      	subs	r5, #8
 8017eae:	f809 7b01 	strb.w	r7, [r9], #1
 8017eb2:	2d00      	cmp	r5, #0
 8017eb4:	d1b1      	bne.n	8017e1a <GUI__CompactPixelIndicesEx+0x30>
 8017eb6:	e04a      	b.n	8017f4e <GUI__CompactPixelIndicesEx+0x164>
 8017eb8:	46a0      	mov	r8, r4
 8017eba:	6820      	ldr	r0, [r4, #0]
 8017ebc:	47b0      	blx	r6
 8017ebe:	0183      	lsls	r3, r0, #6
 8017ec0:	f1b5 0901 	subs.w	r9, r5, #1
 8017ec4:	b2df      	uxtb	r7, r3
 8017ec6:	d048      	beq.n	8017f5a <GUI__CompactPixelIndicesEx+0x170>
 8017ec8:	6860      	ldr	r0, [r4, #4]
 8017eca:	47b0      	blx	r6
 8017ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8017ed0:	ea47 1700 	orr.w	r7, r7, r0, lsl #4
 8017ed4:	b2ff      	uxtb	r7, r7
 8017ed6:	d101      	bne.n	8017edc <GUI__CompactPixelIndicesEx+0xf2>
 8017ed8:	3408      	adds	r4, #8
 8017eda:	e03f      	b.n	8017f5c <GUI__CompactPixelIndicesEx+0x172>
 8017edc:	68a0      	ldr	r0, [r4, #8]
 8017ede:	47b0      	blx	r6
 8017ee0:	f1b9 0f01 	cmp.w	r9, #1
 8017ee4:	ea47 0280 	orr.w	r2, r7, r0, lsl #2
 8017ee8:	b2d7      	uxtb	r7, r2
 8017eea:	d101      	bne.n	8017ef0 <GUI__CompactPixelIndicesEx+0x106>
 8017eec:	340c      	adds	r4, #12
 8017eee:	e035      	b.n	8017f5c <GUI__CompactPixelIndicesEx+0x172>
 8017ef0:	68e0      	ldr	r0, [r4, #12]
 8017ef2:	47b0      	blx	r6
 8017ef4:	4338      	orrs	r0, r7
 8017ef6:	3410      	adds	r4, #16
 8017ef8:	b2c7      	uxtb	r7, r0
 8017efa:	3d04      	subs	r5, #4
 8017efc:	f808 7b01 	strb.w	r7, [r8], #1
 8017f00:	2d00      	cmp	r5, #0
 8017f02:	d1da      	bne.n	8017eba <GUI__CompactPixelIndicesEx+0xd0>
 8017f04:	e023      	b.n	8017f4e <GUI__CompactPixelIndicesEx+0x164>
 8017f06:	46a0      	mov	r8, r4
 8017f08:	6820      	ldr	r0, [r4, #0]
 8017f0a:	47b0      	blx	r6
 8017f0c:	0100      	lsls	r0, r0, #4
 8017f0e:	3d01      	subs	r5, #1
 8017f10:	b2c7      	uxtb	r7, r0
 8017f12:	d101      	bne.n	8017f18 <GUI__CompactPixelIndicesEx+0x12e>
 8017f14:	3404      	adds	r4, #4
 8017f16:	e006      	b.n	8017f26 <GUI__CompactPixelIndicesEx+0x13c>
 8017f18:	6860      	ldr	r0, [r4, #4]
 8017f1a:	47b0      	blx	r6
 8017f1c:	ea47 0100 	orr.w	r1, r7, r0
 8017f20:	3408      	adds	r4, #8
 8017f22:	b2cf      	uxtb	r7, r1
 8017f24:	3d01      	subs	r5, #1
 8017f26:	f808 7b01 	strb.w	r7, [r8], #1
 8017f2a:	2d00      	cmp	r5, #0
 8017f2c:	d1ec      	bne.n	8017f08 <GUI__CompactPixelIndicesEx+0x11e>
 8017f2e:	e00e      	b.n	8017f4e <GUI__CompactPixelIndicesEx+0x164>
 8017f30:	691f      	ldr	r7, [r3, #16]
 8017f32:	b12f      	cbz	r7, 8017f40 <GUI__CompactPixelIndicesEx+0x156>
 8017f34:	4620      	mov	r0, r4
 8017f36:	4621      	mov	r1, r4
 8017f38:	462a      	mov	r2, r5
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	47b8      	blx	r7
 8017f3e:	e006      	b.n	8017f4e <GUI__CompactPixelIndicesEx+0x164>
 8017f40:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8017f44:	47b0      	blx	r6
 8017f46:	55e0      	strb	r0, [r4, r7]
 8017f48:	3701      	adds	r7, #1
 8017f4a:	42bd      	cmp	r5, r7
 8017f4c:	d1f8      	bne.n	8017f40 <GUI__CompactPixelIndicesEx+0x156>
 8017f4e:	2001      	movs	r0, #1
 8017f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f54:	3404      	adds	r4, #4
 8017f56:	2500      	movs	r5, #0
 8017f58:	e7a9      	b.n	8017eae <GUI__CompactPixelIndicesEx+0xc4>
 8017f5a:	3404      	adds	r4, #4
 8017f5c:	2500      	movs	r5, #0
 8017f5e:	e7cd      	b.n	8017efc <GUI__CompactPixelIndicesEx+0x112>
 8017f60:	691f      	ldr	r7, [r3, #16]
 8017f62:	b11f      	cbz	r7, 8017f6c <GUI__CompactPixelIndicesEx+0x182>
 8017f64:	4621      	mov	r1, r4
 8017f66:	462a      	mov	r2, r5
 8017f68:	2302      	movs	r3, #2
 8017f6a:	e7e7      	b.n	8017f3c <GUI__CompactPixelIndicesEx+0x152>
 8017f6c:	4607      	mov	r7, r0
 8017f6e:	f854 0b04 	ldr.w	r0, [r4], #4
 8017f72:	47b0      	blx	r6
 8017f74:	3d01      	subs	r5, #1
 8017f76:	f827 0b02 	strh.w	r0, [r7], #2
 8017f7a:	d1f8      	bne.n	8017f6e <GUI__CompactPixelIndicesEx+0x184>
 8017f7c:	e7e7      	b.n	8017f4e <GUI__CompactPixelIndicesEx+0x164>

08017f7e <GUI__CalcTextRect>:
 8017f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f82:	460c      	mov	r4, r1
 8017f84:	4615      	mov	r5, r2
 8017f86:	4698      	mov	r8, r3
 8017f88:	2800      	cmp	r0, #0
 8017f8a:	d03b      	beq.n	8018004 <GUI__CalcTextRect+0x86>
 8017f8c:	f7fa fd8c 	bl	8012aa8 <GUI_GetStringDistX>
 8017f90:	f008 0203 	and.w	r2, r8, #3
 8017f94:	2a01      	cmp	r2, #1
 8017f96:	4607      	mov	r7, r0
 8017f98:	d00c      	beq.n	8017fb4 <GUI__CalcTextRect+0x36>
 8017f9a:	2a02      	cmp	r2, #2
 8017f9c:	f9b4 6000 	ldrsh.w	r6, [r4]
 8017fa0:	d10c      	bne.n	8017fbc <GUI__CalcTextRect+0x3e>
 8017fa2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017fa6:	1b8b      	subs	r3, r1, r6
 8017fa8:	1c58      	adds	r0, r3, #1
 8017faa:	1bc1      	subs	r1, r0, r7
 8017fac:	fb91 f2f2 	sdiv	r2, r1, r2
 8017fb0:	18b6      	adds	r6, r6, r2
 8017fb2:	e003      	b.n	8017fbc <GUI__CalcTextRect+0x3e>
 8017fb4:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 8017fb8:	1a33      	subs	r3, r6, r0
 8017fba:	1c5e      	adds	r6, r3, #1
 8017fbc:	f008 080c 	and.w	r8, r8, #12
 8017fc0:	f7fb fe90 	bl	8013ce4 <GUI_GetFontDistY>
 8017fc4:	f1b8 0f04 	cmp.w	r8, #4
 8017fc8:	d00e      	beq.n	8017fe8 <GUI__CalcTextRect+0x6a>
 8017fca:	f1b8 0f0c 	cmp.w	r8, #12
 8017fce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017fd2:	d10d      	bne.n	8017ff0 <GUI__CalcTextRect+0x72>
 8017fd4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017fd8:	1aca      	subs	r2, r1, r3
 8017fda:	1c51      	adds	r1, r2, #1
 8017fdc:	1a0a      	subs	r2, r1, r0
 8017fde:	2102      	movs	r1, #2
 8017fe0:	fb92 f2f1 	sdiv	r2, r2, r1
 8017fe4:	189b      	adds	r3, r3, r2
 8017fe6:	e003      	b.n	8017ff0 <GUI__CalcTextRect+0x72>
 8017fe8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017fec:	1a19      	subs	r1, r3, r0
 8017fee:	1c4b      	adds	r3, r1, #1
 8017ff0:	3f01      	subs	r7, #1
 8017ff2:	3801      	subs	r0, #1
 8017ff4:	802e      	strh	r6, [r5, #0]
 8017ff6:	18c2      	adds	r2, r0, r3
 8017ff8:	19be      	adds	r6, r7, r6
 8017ffa:	806b      	strh	r3, [r5, #2]
 8017ffc:	80ae      	strh	r6, [r5, #4]
 8017ffe:	80ea      	strh	r2, [r5, #6]
 8018000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018004:	680b      	ldr	r3, [r1, #0]
 8018006:	6013      	str	r3, [r2, #0]
 8018008:	6848      	ldr	r0, [r1, #4]
 801800a:	6050      	str	r0, [r2, #4]
 801800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018010 <_GetCharCode>:
 8018010:	7800      	ldrb	r0, [r0, #0]
 8018012:	4770      	bx	lr

08018014 <_GetCharSize>:
 8018014:	2001      	movs	r0, #1
 8018016:	4770      	bx	lr

08018018 <_CalcSizeOfChar>:
 8018018:	2001      	movs	r0, #1
 801801a:	4770      	bx	lr

0801801c <_Encode>:
 801801c:	7001      	strb	r1, [r0, #0]
 801801e:	2001      	movs	r0, #1
 8018020:	4770      	bx	lr
	...

08018024 <GUI_UC__GetCharCodeInc>:
 8018024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018026:	4e08      	ldr	r6, [pc, #32]	; (8018048 <GUI_UC__GetCharCodeInc+0x24>)
 8018028:	6804      	ldr	r4, [r0, #0]
 801802a:	6833      	ldr	r3, [r6, #0]
 801802c:	4605      	mov	r5, r0
 801802e:	6819      	ldr	r1, [r3, #0]
 8018030:	4620      	mov	r0, r4
 8018032:	4788      	blx	r1
 8018034:	4607      	mov	r7, r0
 8018036:	6830      	ldr	r0, [r6, #0]
 8018038:	6842      	ldr	r2, [r0, #4]
 801803a:	4620      	mov	r0, r4
 801803c:	4790      	blx	r2
 801803e:	1823      	adds	r3, r4, r0
 8018040:	602b      	str	r3, [r5, #0]
 8018042:	4638      	mov	r0, r7
 8018044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018046:	bf00      	nop
 8018048:	2000eb58 	.word	0x2000eb58

0801804c <GUI_UC__NumChars2NumBytes>:
 801804c:	b570      	push	{r4, r5, r6, lr}
 801804e:	4604      	mov	r4, r0
 8018050:	460e      	mov	r6, r1
 8018052:	2500      	movs	r5, #0
 8018054:	b146      	cbz	r6, 8018068 <GUI_UC__NumChars2NumBytes+0x1c>
 8018056:	4b05      	ldr	r3, [pc, #20]	; (801806c <GUI_UC__NumChars2NumBytes+0x20>)
 8018058:	6818      	ldr	r0, [r3, #0]
 801805a:	6841      	ldr	r1, [r0, #4]
 801805c:	4620      	mov	r0, r4
 801805e:	4788      	blx	r1
 8018060:	3e01      	subs	r6, #1
 8018062:	1824      	adds	r4, r4, r0
 8018064:	182d      	adds	r5, r5, r0
 8018066:	e7f5      	b.n	8018054 <GUI_UC__NumChars2NumBytes+0x8>
 8018068:	4628      	mov	r0, r5
 801806a:	bd70      	pop	{r4, r5, r6, pc}
 801806c:	2000eb58 	.word	0x2000eb58

08018070 <GUI_SetTextAlign>:
 8018070:	4b03      	ldr	r3, [pc, #12]	; (8018080 <GUI_SetTextAlign+0x10>)
 8018072:	6819      	ldr	r1, [r3, #0]
 8018074:	f9b1 202c 	ldrsh.w	r2, [r1, #44]	; 0x2c
 8018078:	8588      	strh	r0, [r1, #44]	; 0x2c
 801807a:	4610      	mov	r0, r2
 801807c:	4770      	bx	lr
 801807e:	bf00      	nop
 8018080:	20000308 	.word	0x20000308

08018084 <GUI_SetOrg>:
 8018084:	b510      	push	{r4, lr}
 8018086:	460a      	mov	r2, r1
 8018088:	4c07      	ldr	r4, [pc, #28]	; (80180a8 <GUI_SetOrg+0x24>)
 801808a:	4908      	ldr	r1, [pc, #32]	; (80180ac <GUI_SetOrg+0x28>)
 801808c:	4603      	mov	r3, r0
 801808e:	8008      	strh	r0, [r1, #0]
 8018090:	6821      	ldr	r1, [r4, #0]
 8018092:	4807      	ldr	r0, [pc, #28]	; (80180b0 <GUI_SetOrg+0x2c>)
 8018094:	4c07      	ldr	r4, [pc, #28]	; (80180b4 <GUI_SetOrg+0x30>)
 8018096:	8002      	strh	r2, [r0, #0]
 8018098:	7c48      	ldrb	r0, [r1, #17]
 801809a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801809e:	68c1      	ldr	r1, [r0, #12]
 80180a0:	6a0c      	ldr	r4, [r1, #32]
 80180a2:	4619      	mov	r1, r3
 80180a4:	47a0      	blx	r4
 80180a6:	bd10      	pop	{r4, pc}
 80180a8:	20000308 	.word	0x20000308
 80180ac:	2000eb4c 	.word	0x2000eb4c
 80180b0:	2000eb44 	.word	0x2000eb44
 80180b4:	2000eb5c 	.word	0x2000eb5c

080180b8 <GUI_SetLineStyle>:
 80180b8:	4b02      	ldr	r3, [pc, #8]	; (80180c4 <GUI_SetLineStyle+0xc>)
 80180ba:	6819      	ldr	r1, [r3, #0]
 80180bc:	7e8a      	ldrb	r2, [r1, #26]
 80180be:	7688      	strb	r0, [r1, #26]
 80180c0:	4610      	mov	r0, r2
 80180c2:	4770      	bx	lr
 80180c4:	20000308 	.word	0x20000308

080180c8 <GUI_GetFontInfo>:
 80180c8:	b508      	push	{r3, lr}
 80180ca:	b910      	cbnz	r0, 80180d2 <GUI_GetFontInfo+0xa>
 80180cc:	4b07      	ldr	r3, [pc, #28]	; (80180ec <GUI_GetFontInfo+0x24>)
 80180ce:	6818      	ldr	r0, [r3, #0]
 80180d0:	69c0      	ldr	r0, [r0, #28]
 80180d2:	f890 2020 	ldrb.w	r2, [r0, #32]
 80180d6:	708a      	strb	r2, [r1, #2]
 80180d8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80180dc:	710b      	strb	r3, [r1, #4]
 80180de:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80180e2:	70ca      	strb	r2, [r1, #3]
 80180e4:	6883      	ldr	r3, [r0, #8]
 80180e6:	4798      	blx	r3
 80180e8:	bd08      	pop	{r3, pc}
 80180ea:	bf00      	nop
 80180ec:	20000308 	.word	0x20000308

080180f0 <GUI_GetBkColor>:
 80180f0:	b508      	push	{r3, lr}
 80180f2:	f000 fbf7 	bl	80188e4 <LCD_GetBkColorIndex>
 80180f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80180fa:	f7f9 bd19 	b.w	8011b30 <LCD_Index2Color>

080180fe <GUI_GetColor>:
 80180fe:	b508      	push	{r3, lr}
 8018100:	f000 fbf8 	bl	80188f4 <LCD_GetColorIndex>
 8018104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018108:	f7f9 bd12 	b.w	8011b30 <LCD_Index2Color>

0801810c <GUI_DrawFocusRect>:
 801810c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801810e:	4603      	mov	r3, r0
 8018110:	460a      	mov	r2, r1
 8018112:	4668      	mov	r0, sp
 8018114:	4619      	mov	r1, r3
 8018116:	f7f9 fe01 	bl	8011d1c <GUI__ReduceRect>
 801811a:	4826      	ldr	r0, [pc, #152]	; (80181b4 <GUI_DrawFocusRect+0xa8>)
 801811c:	f8bd 1000 	ldrh.w	r1, [sp]
 8018120:	6803      	ldr	r3, [r0, #0]
 8018122:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8018126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801812a:	1850      	adds	r0, r2, r1
 801812c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8018130:	f8ad 0000 	strh.w	r0, [sp]
 8018134:	1858      	adds	r0, r3, r1
 8018136:	f8ad 0002 	strh.w	r0, [sp, #2]
 801813a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801813e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018142:	1852      	adds	r2, r2, r1
 8018144:	181b      	adds	r3, r3, r0
 8018146:	4668      	mov	r0, sp
 8018148:	f8ad 2004 	strh.w	r2, [sp, #4]
 801814c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018150:	f7f6 fd78 	bl	800ec44 <WM__InitIVRSearch>
 8018154:	b360      	cbz	r0, 80181b0 <GUI_DrawFocusRect+0xa4>
 8018156:	f8bd 6000 	ldrh.w	r6, [sp]
 801815a:	2500      	movs	r5, #0
 801815c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8018160:	fa05 f486 	sxtah	r4, r5, r6
 8018164:	3502      	adds	r5, #2
 8018166:	428c      	cmp	r4, r1
 8018168:	dc0a      	bgt.n	8018180 <GUI_DrawFocusRect+0x74>
 801816a:	4620      	mov	r0, r4
 801816c:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8018170:	f7f9 f9e8 	bl	8011544 <LCD_DrawPixel>
 8018174:	4620      	mov	r0, r4
 8018176:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801817a:	f7f9 f9e3 	bl	8011544 <LCD_DrawPixel>
 801817e:	e7ed      	b.n	801815c <GUI_DrawFocusRect+0x50>
 8018180:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8018184:	2500      	movs	r5, #0
 8018186:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801818a:	fa05 f486 	sxtah	r4, r5, r6
 801818e:	3502      	adds	r5, #2
 8018190:	4294      	cmp	r4, r2
 8018192:	dc0a      	bgt.n	80181aa <GUI_DrawFocusRect+0x9e>
 8018194:	f9bd 0000 	ldrsh.w	r0, [sp]
 8018198:	4621      	mov	r1, r4
 801819a:	f7f9 f9d3 	bl	8011544 <LCD_DrawPixel>
 801819e:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80181a2:	4621      	mov	r1, r4
 80181a4:	f7f9 f9ce 	bl	8011544 <LCD_DrawPixel>
 80181a8:	e7ed      	b.n	8018186 <GUI_DrawFocusRect+0x7a>
 80181aa:	f7f6 fc8b 	bl	800eac4 <WM__GetNextIVR>
 80181ae:	e7d1      	b.n	8018154 <GUI_DrawFocusRect+0x48>
 80181b0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80181b2:	bf00      	nop
 80181b4:	20000308 	.word	0x20000308

080181b8 <GUI_CURSOR_SetPositionEx>:
 80181b8:	b570      	push	{r4, r5, r6, lr}
 80181ba:	4606      	mov	r6, r0
 80181bc:	4610      	mov	r0, r2
 80181be:	4614      	mov	r4, r2
 80181c0:	460d      	mov	r5, r1
 80181c2:	f7fa fae7 	bl	8012794 <GUI_GetCursorLayer>
 80181c6:	4b14      	ldr	r3, [pc, #80]	; (8018218 <GUI_CURSOR_SetPositionEx+0x60>)
 80181c8:	2214      	movs	r2, #20
 80181ca:	b148      	cbz	r0, 80181e0 <GUI_CURSOR_SetPositionEx+0x28>
 80181cc:	4354      	muls	r4, r2
 80181ce:	591b      	ldr	r3, [r3, r4]
 80181d0:	6859      	ldr	r1, [r3, #4]
 80181d2:	689a      	ldr	r2, [r3, #8]
 80181d4:	1a71      	subs	r1, r6, r1
 80181d6:	1aaa      	subs	r2, r5, r2
 80181d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181dc:	f7fa bb00 	b.w	80127e0 <GUI_SetLayerPosEx>
 80181e0:	fb02 3004 	mla	r0, r2, r4, r3
 80181e4:	68c1      	ldr	r1, [r0, #12]
 80181e6:	42a9      	cmp	r1, r5
 80181e8:	d102      	bne.n	80181f0 <GUI_CURSOR_SetPositionEx+0x38>
 80181ea:	6883      	ldr	r3, [r0, #8]
 80181ec:	42b3      	cmp	r3, r6
 80181ee:	d012      	beq.n	8018216 <GUI_CURSOR_SetPositionEx+0x5e>
 80181f0:	4a09      	ldr	r2, [pc, #36]	; (8018218 <GUI_CURSOR_SetPositionEx+0x60>)
 80181f2:	2314      	movs	r3, #20
 80181f4:	4363      	muls	r3, r4
 80181f6:	18d0      	adds	r0, r2, r3
 80181f8:	6900      	ldr	r0, [r0, #16]
 80181fa:	b130      	cbz	r0, 801820a <GUI_CURSOR_SetPositionEx+0x52>
 80181fc:	58d2      	ldr	r2, [r2, r3]
 80181fe:	6851      	ldr	r1, [r2, #4]
 8018200:	6893      	ldr	r3, [r2, #8]
 8018202:	1a71      	subs	r1, r6, r1
 8018204:	1aea      	subs	r2, r5, r3
 8018206:	f000 fc8d 	bl	8018b24 <GUI_SPRITE_SetPosition>
 801820a:	4a03      	ldr	r2, [pc, #12]	; (8018218 <GUI_CURSOR_SetPositionEx+0x60>)
 801820c:	2014      	movs	r0, #20
 801820e:	fb00 2404 	mla	r4, r0, r4, r2
 8018212:	60a6      	str	r6, [r4, #8]
 8018214:	60e5      	str	r5, [r4, #12]
 8018216:	bd70      	pop	{r4, r5, r6, pc}
 8018218:	2000e22c 	.word	0x2000e22c

0801821c <GUI_Long2Len>:
 801821c:	b510      	push	{r4, lr}
 801821e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8018222:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8018226:	2200      	movs	r2, #0
 8018228:	1c53      	adds	r3, r2, #1
 801822a:	2b0a      	cmp	r3, #10
 801822c:	d006      	beq.n	801823c <GUI_Long2Len+0x20>
 801822e:	4c06      	ldr	r4, [pc, #24]	; (8018248 <GUI_Long2Len+0x2c>)
 8018230:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8018234:	42a1      	cmp	r1, r4
 8018236:	d301      	bcc.n	801823c <GUI_Long2Len+0x20>
 8018238:	461a      	mov	r2, r3
 801823a:	e7f5      	b.n	8018228 <GUI_Long2Len+0xc>
 801823c:	2800      	cmp	r0, #0
 801823e:	bfb8      	it	lt
 8018240:	1c93      	addlt	r3, r2, #2
 8018242:	4618      	mov	r0, r3
 8018244:	bd10      	pop	{r4, pc}
 8018246:	bf00      	nop
 8018248:	08035550 	.word	0x08035550

0801824c <GUI_AddDecShift>:
 801824c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8018250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018252:	681c      	ldr	r4, [r3, #0]
 8018254:	d109      	bne.n	801826a <GUI_AddDecShift+0x1e>
 8018256:	202d      	movs	r0, #45	; 0x2d
 8018258:	f804 0b01 	strb.w	r0, [r4], #1
 801825c:	1e4e      	subs	r6, r1, #1
 801825e:	b2f1      	uxtb	r1, r6
 8018260:	601c      	str	r4, [r3, #0]
 8018262:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018266:	2601      	movs	r6, #1
 8018268:	e00c      	b.n	8018284 <GUI_AddDecShift+0x38>
 801826a:	2800      	cmp	r0, #0
 801826c:	da06      	bge.n	801827c <GUI_AddDecShift+0x30>
 801826e:	252d      	movs	r5, #45	; 0x2d
 8018270:	f804 5b01 	strb.w	r5, [r4], #1
 8018274:	4240      	negs	r0, r0
 8018276:	601c      	str	r4, [r3, #0]
 8018278:	2401      	movs	r4, #1
 801827a:	e000      	b.n	801827e <GUI_AddDecShift+0x32>
 801827c:	2400      	movs	r4, #0
 801827e:	1b09      	subs	r1, r1, r4
 8018280:	b2c9      	uxtb	r1, r1
 8018282:	2600      	movs	r6, #0
 8018284:	b30a      	cbz	r2, 80182ca <GUI_AddDecShift+0x7e>
 8018286:	3901      	subs	r1, #1
 8018288:	b2c9      	uxtb	r1, r1
 801828a:	e01e      	b.n	80182ca <GUI_AddDecShift+0x7e>
 801828c:	1e4d      	subs	r5, r1, #1
 801828e:	4291      	cmp	r1, r2
 8018290:	b2ed      	uxtb	r5, r5
 8018292:	d105      	bne.n	80182a0 <GUI_AddDecShift+0x54>
 8018294:	4c12      	ldr	r4, [pc, #72]	; (80182e0 <GUI_AddDecShift+0x94>)
 8018296:	7827      	ldrb	r7, [r4, #0]
 8018298:	681c      	ldr	r4, [r3, #0]
 801829a:	f804 7b01 	strb.w	r7, [r4], #1
 801829e:	601c      	str	r4, [r3, #0]
 80182a0:	4f10      	ldr	r7, [pc, #64]	; (80182e4 <GUI_AddDecShift+0x98>)
 80182a2:	f857 7025 	ldr.w	r7, [r7, r5, lsl #2]
 80182a6:	fb90 f4f7 	sdiv	r4, r0, r7
 80182aa:	b2e4      	uxtb	r4, r4
 80182ac:	2c0a      	cmp	r4, #10
 80182ae:	d80e      	bhi.n	80182ce <GUI_AddDecShift+0x82>
 80182b0:	fb07 0014 	mls	r0, r7, r4, r0
 80182b4:	b17d      	cbz	r5, 80182d6 <GUI_AddDecShift+0x8a>
 80182b6:	2c0a      	cmp	r4, #10
 80182b8:	bf18      	it	ne
 80182ba:	4629      	movne	r1, r5
 80182bc:	681d      	ldr	r5, [r3, #0]
 80182be:	bf08      	it	eq
 80182c0:	2401      	moveq	r4, #1
 80182c2:	3430      	adds	r4, #48	; 0x30
 80182c4:	f805 4b01 	strb.w	r4, [r5], #1
 80182c8:	601d      	str	r5, [r3, #0]
 80182ca:	2900      	cmp	r1, #0
 80182cc:	d1de      	bne.n	801828c <GUI_AddDecShift+0x40>
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	2200      	movs	r2, #0
 80182d2:	701a      	strb	r2, [r3, #0]
 80182d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182d6:	2e00      	cmp	r6, #0
 80182d8:	d0ed      	beq.n	80182b6 <GUI_AddDecShift+0x6a>
 80182da:	3401      	adds	r4, #1
 80182dc:	b2e4      	uxtb	r4, r4
 80182de:	e7ea      	b.n	80182b6 <GUI_AddDecShift+0x6a>
 80182e0:	2000eb3a 	.word	0x2000eb3a
 80182e4:	08035550 	.word	0x08035550

080182e8 <_GetIndexMask_0>:
 80182e8:	b508      	push	{r3, lr}
 80182ea:	f7f9 f87f 	bl	80113ec <LCD_GetNumColors>
 80182ee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80182f2:	d010      	beq.n	8018316 <_GetIndexMask_0+0x2e>
 80182f4:	287f      	cmp	r0, #127	; 0x7f
 80182f6:	d810      	bhi.n	801831a <_GetIndexMask_0+0x32>
 80182f8:	283f      	cmp	r0, #63	; 0x3f
 80182fa:	d810      	bhi.n	801831e <_GetIndexMask_0+0x36>
 80182fc:	281f      	cmp	r0, #31
 80182fe:	d810      	bhi.n	8018322 <_GetIndexMask_0+0x3a>
 8018300:	280f      	cmp	r0, #15
 8018302:	d810      	bhi.n	8018326 <_GetIndexMask_0+0x3e>
 8018304:	2807      	cmp	r0, #7
 8018306:	d810      	bhi.n	801832a <_GetIndexMask_0+0x42>
 8018308:	2803      	cmp	r0, #3
 801830a:	d810      	bhi.n	801832e <_GetIndexMask_0+0x46>
 801830c:	2801      	cmp	r0, #1
 801830e:	bf94      	ite	ls
 8018310:	2000      	movls	r0, #0
 8018312:	2001      	movhi	r0, #1
 8018314:	e00c      	b.n	8018330 <_GetIndexMask_0+0x48>
 8018316:	2008      	movs	r0, #8
 8018318:	e00a      	b.n	8018330 <_GetIndexMask_0+0x48>
 801831a:	2007      	movs	r0, #7
 801831c:	e008      	b.n	8018330 <_GetIndexMask_0+0x48>
 801831e:	2006      	movs	r0, #6
 8018320:	e006      	b.n	8018330 <_GetIndexMask_0+0x48>
 8018322:	2005      	movs	r0, #5
 8018324:	e004      	b.n	8018330 <_GetIndexMask_0+0x48>
 8018326:	2004      	movs	r0, #4
 8018328:	e002      	b.n	8018330 <_GetIndexMask_0+0x48>
 801832a:	2003      	movs	r0, #3
 801832c:	e000      	b.n	8018330 <_GetIndexMask_0+0x48>
 801832e:	2002      	movs	r0, #2
 8018330:	2301      	movs	r3, #1
 8018332:	fa03 f000 	lsl.w	r0, r3, r0
 8018336:	3801      	subs	r0, #1
 8018338:	bd08      	pop	{r3, pc}

0801833a <_Index2Color_0>:
 801833a:	b538      	push	{r3, r4, r5, lr}
 801833c:	4604      	mov	r4, r0
 801833e:	f7f9 f855 	bl	80113ec <LCD_GetNumColors>
 8018342:	4605      	mov	r5, r0
 8018344:	f7f9 f870 	bl	8011428 <LCD_GetPalette>
 8018348:	42ac      	cmp	r4, r5
 801834a:	d203      	bcs.n	8018354 <_Index2Color_0+0x1a>
 801834c:	b118      	cbz	r0, 8018356 <_Index2Color_0+0x1c>
 801834e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8018352:	bd38      	pop	{r3, r4, r5, pc}
 8018354:	2000      	movs	r0, #0
 8018356:	bd38      	pop	{r3, r4, r5, pc}

08018358 <_Color2Index_0>:
 8018358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801835c:	4680      	mov	r8, r0
 801835e:	f7f9 f845 	bl	80113ec <LCD_GetNumColors>
 8018362:	4607      	mov	r7, r0
 8018364:	f7f9 f860 	bl	8011428 <LCD_GetPalette>
 8018368:	4606      	mov	r6, r0
 801836a:	b1c8      	cbz	r0, 80183a0 <_Color2Index_0+0x48>
 801836c:	2300      	movs	r3, #0
 801836e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8018372:	4590      	cmp	r8, r2
 8018374:	4618      	mov	r0, r3
 8018376:	d015      	beq.n	80183a4 <_Color2Index_0+0x4c>
 8018378:	3301      	adds	r3, #1
 801837a:	42bb      	cmp	r3, r7
 801837c:	dbf7      	blt.n	801836e <_Color2Index_0+0x16>
 801837e:	2500      	movs	r5, #0
 8018380:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 8018384:	462c      	mov	r4, r5
 8018386:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 801838a:	4640      	mov	r0, r8
 801838c:	f000 fda3 	bl	8018ed6 <GUI_CalcColorDist>
 8018390:	4548      	cmp	r0, r9
 8018392:	bf3c      	itt	cc
 8018394:	4681      	movcc	r9, r0
 8018396:	4625      	movcc	r5, r4
 8018398:	3401      	adds	r4, #1
 801839a:	42bc      	cmp	r4, r7
 801839c:	dbf3      	blt.n	8018386 <_Color2Index_0+0x2e>
 801839e:	e000      	b.n	80183a2 <_Color2Index_0+0x4a>
 80183a0:	4605      	mov	r5, r0
 80183a2:	4628      	mov	r0, r5
 80183a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080183a8 <WIDGET__FillStringInRect>:
 80183a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80183ac:	461e      	mov	r6, r3
 80183ae:	4b3f      	ldr	r3, [pc, #252]	; (80184ac <WIDGET__FillStringInRect+0x104>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	4690      	mov	r8, r2
 80183b4:	695a      	ldr	r2, [r3, #20]
 80183b6:	4607      	mov	r7, r0
 80183b8:	460c      	mov	r4, r1
 80183ba:	b90a      	cbnz	r2, 80183c0 <WIDGET__FillStringInRect+0x18>
 80183bc:	bb1f      	cbnz	r7, 8018406 <WIDGET__FillStringInRect+0x5e>
 80183be:	e06f      	b.n	80184a0 <WIDGET__FillStringInRect+0xf8>
 80183c0:	6808      	ldr	r0, [r1, #0]
 80183c2:	6849      	ldr	r1, [r1, #4]
 80183c4:	466d      	mov	r5, sp
 80183c6:	c503      	stmia	r5!, {r0, r1}
 80183c8:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 80183cc:	f8bd 0000 	ldrh.w	r0, [sp]
 80183d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80183d4:	1808      	adds	r0, r1, r0
 80183d6:	f8ad 0000 	strh.w	r0, [sp]
 80183da:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80183de:	1818      	adds	r0, r3, r0
 80183e0:	f8ad 0002 	strh.w	r0, [sp, #2]
 80183e4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80183e8:	1809      	adds	r1, r1, r0
 80183ea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80183ee:	f8ad 1004 	strh.w	r1, [sp, #4]
 80183f2:	181b      	adds	r3, r3, r0
 80183f4:	4669      	mov	r1, sp
 80183f6:	4610      	mov	r0, r2
 80183f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80183fc:	f7fa fa10 	bl	8012820 <GUI_RectsIntersect>
 8018400:	2800      	cmp	r0, #0
 8018402:	d050      	beq.n	80184a6 <WIDGET__FillStringInRect+0xfe>
 8018404:	e7da      	b.n	80183bc <WIDGET__FillStringInRect+0x14>
 8018406:	783a      	ldrb	r2, [r7, #0]
 8018408:	2a00      	cmp	r2, #0
 801840a:	d049      	beq.n	80184a0 <WIDGET__FillStringInRect+0xf8>
 801840c:	f7ff fe70 	bl	80180f0 <GUI_GetBkColor>
 8018410:	0e00      	lsrs	r0, r0, #24
 8018412:	d003      	beq.n	801841c <WIDGET__FillStringInRect+0x74>
 8018414:	2002      	movs	r0, #2
 8018416:	f7fa f971 	bl	80126fc <GUI_SetTextMode>
 801841a:	e032      	b.n	8018482 <WIDGET__FillStringInRect+0xda>
 801841c:	f7fa f96e 	bl	80126fc <GUI_SetTextMode>
 8018420:	4641      	mov	r1, r8
 8018422:	4632      	mov	r2, r6
 8018424:	a802      	add	r0, sp, #8
 8018426:	f7f9 fcfb 	bl	8011e20 <GUI__IntersectRects>
 801842a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801842e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018432:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018436:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801843a:	3b01      	subs	r3, #1
 801843c:	f7fb f918 	bl	8013670 <GUI_ClearRect>
 8018440:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8018444:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018448:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801844c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018450:	3a01      	subs	r2, #1
 8018452:	f7fb f90d 	bl	8013670 <GUI_ClearRect>
 8018456:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801845a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801845e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018462:	1c48      	adds	r0, r1, #1
 8018464:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8018468:	f7fb f902 	bl	8013670 <GUI_ClearRect>
 801846c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018470:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018474:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018478:	1c59      	adds	r1, r3, #1
 801847a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801847e:	f7fb f8f7 	bl	8013670 <GUI_ClearRect>
 8018482:	4640      	mov	r0, r8
 8018484:	f7f5 f898 	bl	800d5b8 <WM_SetUserClipRect>
 8018488:	f9b6 1000 	ldrsh.w	r1, [r6]
 801848c:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8018490:	4604      	mov	r4, r0
 8018492:	4638      	mov	r0, r7
 8018494:	f7fa ff4e 	bl	8013334 <GUI_DispStringAt>
 8018498:	4620      	mov	r0, r4
 801849a:	f7f5 f88d 	bl	800d5b8 <WM_SetUserClipRect>
 801849e:	e002      	b.n	80184a6 <WIDGET__FillStringInRect+0xfe>
 80184a0:	4620      	mov	r0, r4
 80184a2:	f000 fd0d 	bl	8018ec0 <GUI_ClearRectEx>
 80184a6:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
 80184aa:	bf00      	nop
 80184ac:	20000308 	.word	0x20000308

080184b0 <_DrawDownRect>:
 80184b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b4:	4c27      	ldr	r4, [pc, #156]	; (8018554 <_DrawDownRect+0xa4>)
 80184b6:	8805      	ldrh	r5, [r0, #0]
 80184b8:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 80184bc:	8887      	ldrh	r7, [r0, #4]
 80184be:	88c6      	ldrh	r6, [r0, #6]
 80184c0:	6820      	ldr	r0, [r4, #0]
 80184c2:	f7f9 fb89 	bl	8011bd8 <LCD_SetColor>
 80184c6:	b22d      	sxth	r5, r5
 80184c8:	b23f      	sxth	r7, r7
 80184ca:	fa0f f888 	sxth.w	r8, r8
 80184ce:	68a0      	ldr	r0, [r4, #8]
 80184d0:	f7f9 fb82 	bl	8011bd8 <LCD_SetColor>
 80184d4:	f108 0a01 	add.w	sl, r8, #1
 80184d8:	b236      	sxth	r6, r6
 80184da:	4640      	mov	r0, r8
 80184dc:	4629      	mov	r1, r5
 80184de:	463a      	mov	r2, r7
 80184e0:	f7fa fb8e 	bl	8012c00 <GUI_DrawHLine>
 80184e4:	4651      	mov	r1, sl
 80184e6:	4632      	mov	r2, r6
 80184e8:	4628      	mov	r0, r5
 80184ea:	f7fa fb47 	bl	8012b7c <GUI_DrawVLine>
 80184ee:	f105 0b01 	add.w	fp, r5, #1
 80184f2:	f107 39ff 	add.w	r9, r7, #4294967295
 80184f6:	6820      	ldr	r0, [r4, #0]
 80184f8:	f7f9 fb6e 	bl	8011bd8 <LCD_SetColor>
 80184fc:	4650      	mov	r0, sl
 80184fe:	4659      	mov	r1, fp
 8018500:	464a      	mov	r2, r9
 8018502:	f7fa fb7d 	bl	8012c00 <GUI_DrawHLine>
 8018506:	f108 0302 	add.w	r3, r8, #2
 801850a:	f106 38ff 	add.w	r8, r6, #4294967295
 801850e:	4619      	mov	r1, r3
 8018510:	4642      	mov	r2, r8
 8018512:	4658      	mov	r0, fp
 8018514:	9301      	str	r3, [sp, #4]
 8018516:	f7fa fb31 	bl	8012b7c <GUI_DrawVLine>
 801851a:	6920      	ldr	r0, [r4, #16]
 801851c:	f7f9 fb5c 	bl	8011bd8 <LCD_SetColor>
 8018520:	4630      	mov	r0, r6
 8018522:	4659      	mov	r1, fp
 8018524:	463a      	mov	r2, r7
 8018526:	f7fa fb6b 	bl	8012c00 <GUI_DrawHLine>
 801852a:	4651      	mov	r1, sl
 801852c:	4632      	mov	r2, r6
 801852e:	4638      	mov	r0, r7
 8018530:	f7fa fb24 	bl	8012b7c <GUI_DrawVLine>
 8018534:	68e0      	ldr	r0, [r4, #12]
 8018536:	f7f9 fb4f 	bl	8011bd8 <LCD_SetColor>
 801853a:	4640      	mov	r0, r8
 801853c:	1ca9      	adds	r1, r5, #2
 801853e:	464a      	mov	r2, r9
 8018540:	f7fa fb5e 	bl	8012c00 <GUI_DrawHLine>
 8018544:	9901      	ldr	r1, [sp, #4]
 8018546:	4648      	mov	r0, r9
 8018548:	4642      	mov	r2, r8
 801854a:	b003      	add	sp, #12
 801854c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018550:	f7fa bb14 	b.w	8012b7c <GUI_DrawVLine>
 8018554:	20000348 	.word	0x20000348

08018558 <_DrawDown>:
 8018558:	b507      	push	{r0, r1, r2, lr}
 801855a:	4668      	mov	r0, sp
 801855c:	f7f5 fc42 	bl	800dde4 <WM_GetClientRect>
 8018560:	4668      	mov	r0, sp
 8018562:	f7ff ffa5 	bl	80184b0 <_DrawDownRect>
 8018566:	bd0e      	pop	{r1, r2, r3, pc}

08018568 <_DrawUpRect>:
 8018568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801856c:	f8b0 8000 	ldrh.w	r8, [r0]
 8018570:	4c19      	ldr	r4, [pc, #100]	; (80185d8 <_DrawUpRect+0x70>)
 8018572:	8847      	ldrh	r7, [r0, #2]
 8018574:	8886      	ldrh	r6, [r0, #4]
 8018576:	88c5      	ldrh	r5, [r0, #6]
 8018578:	6820      	ldr	r0, [r4, #0]
 801857a:	b22d      	sxth	r5, r5
 801857c:	fa0f f988 	sxth.w	r9, r8
 8018580:	b236      	sxth	r6, r6
 8018582:	b23f      	sxth	r7, r7
 8018584:	f7f9 fb28 	bl	8011bd8 <LCD_SetColor>
 8018588:	462b      	mov	r3, r5
 801858a:	4639      	mov	r1, r7
 801858c:	4632      	mov	r2, r6
 801858e:	4648      	mov	r0, r9
 8018590:	f7fb ff56 	bl	8014440 <GUI_DrawRect>
 8018594:	f109 0801 	add.w	r8, r9, #1
 8018598:	3701      	adds	r7, #1
 801859a:	6920      	ldr	r0, [r4, #16]
 801859c:	f7f9 fb1c 	bl	8011bd8 <LCD_SetColor>
 80185a0:	f1a5 0902 	sub.w	r9, r5, #2
 80185a4:	1eb2      	subs	r2, r6, #2
 80185a6:	4638      	mov	r0, r7
 80185a8:	4641      	mov	r1, r8
 80185aa:	f7fa fb29 	bl	8012c00 <GUI_DrawHLine>
 80185ae:	4639      	mov	r1, r7
 80185b0:	464a      	mov	r2, r9
 80185b2:	4640      	mov	r0, r8
 80185b4:	f7fa fae2 	bl	8012b7c <GUI_DrawVLine>
 80185b8:	3e01      	subs	r6, #1
 80185ba:	6860      	ldr	r0, [r4, #4]
 80185bc:	f7f9 fb0c 	bl	8011bd8 <LCD_SetColor>
 80185c0:	1e68      	subs	r0, r5, #1
 80185c2:	4641      	mov	r1, r8
 80185c4:	4632      	mov	r2, r6
 80185c6:	f7fa fb1b 	bl	8012c00 <GUI_DrawHLine>
 80185ca:	4630      	mov	r0, r6
 80185cc:	4639      	mov	r1, r7
 80185ce:	464a      	mov	r2, r9
 80185d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185d4:	f7fa bad2 	b.w	8012b7c <GUI_DrawVLine>
 80185d8:	20000348 	.word	0x20000348

080185dc <WIDGET_EFFECT_3D_DrawUp>:
 80185dc:	b507      	push	{r0, r1, r2, lr}
 80185de:	4668      	mov	r0, sp
 80185e0:	f7f5 fc00 	bl	800dde4 <WM_GetClientRect>
 80185e4:	4668      	mov	r0, sp
 80185e6:	f7ff ffbf 	bl	8018568 <_DrawUpRect>
 80185ea:	bd0e      	pop	{r1, r2, r3, pc}

080185ec <WM__SendMessageIfEnabled>:
 80185ec:	b538      	push	{r3, r4, r5, lr}
 80185ee:	4604      	mov	r4, r0
 80185f0:	460d      	mov	r5, r1
 80185f2:	f7f4 ff7b 	bl	800d4ec <WM__IsEnabled>
 80185f6:	b128      	cbz	r0, 8018604 <WM__SendMessageIfEnabled+0x18>
 80185f8:	4620      	mov	r0, r4
 80185fa:	4629      	mov	r1, r5
 80185fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018600:	f7f4 bf56 	b.w	800d4b0 <WM__SendMessage>
 8018604:	bd38      	pop	{r3, r4, r5, pc}

08018606 <WM__IsChild>:
 8018606:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018608:	460d      	mov	r5, r1
 801860a:	4604      	mov	r4, r0
 801860c:	b168      	cbz	r0, 801862a <WM__IsChild+0x24>
 801860e:	f7fb fc73 	bl	8013ef8 <GUI_ALLOC_LockH>
 8018612:	9001      	str	r0, [sp, #4]
 8018614:	b128      	cbz	r0, 8018622 <WM__IsChild+0x1c>
 8018616:	6984      	ldr	r4, [r0, #24]
 8018618:	1b63      	subs	r3, r4, r5
 801861a:	4258      	negs	r0, r3
 801861c:	eb50 0403 	adcs.w	r4, r0, r3
 8018620:	e000      	b.n	8018624 <WM__IsChild+0x1e>
 8018622:	4604      	mov	r4, r0
 8018624:	a801      	add	r0, sp, #4
 8018626:	f7fb fc75 	bl	8013f14 <GUI_ALLOC_UnlockH>
 801862a:	4620      	mov	r0, r4
 801862c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0801862e <WM__ForEachDesc>:
 801862e:	b570      	push	{r4, r5, r6, lr}
 8018630:	460d      	mov	r5, r1
 8018632:	4616      	mov	r6, r2
 8018634:	f7fb fc56 	bl	8013ee4 <GUI_ALLOC_h2p>
 8018638:	69c4      	ldr	r4, [r0, #28]
 801863a:	b164      	cbz	r4, 8018656 <WM__ForEachDesc+0x28>
 801863c:	4620      	mov	r0, r4
 801863e:	4631      	mov	r1, r6
 8018640:	47a8      	blx	r5
 8018642:	4620      	mov	r0, r4
 8018644:	4629      	mov	r1, r5
 8018646:	4632      	mov	r2, r6
 8018648:	f7ff fff1 	bl	801862e <WM__ForEachDesc>
 801864c:	4620      	mov	r0, r4
 801864e:	f7fb fc49 	bl	8013ee4 <GUI_ALLOC_h2p>
 8018652:	6a04      	ldr	r4, [r0, #32]
 8018654:	e7f1      	b.n	801863a <WM__ForEachDesc+0xc>
 8018656:	bd70      	pop	{r4, r5, r6, pc}

08018658 <_NextPixel_FlushBuffer>:
 8018658:	b570      	push	{r4, r5, r6, lr}
 801865a:	4b10      	ldr	r3, [pc, #64]	; (801869c <_NextPixel_FlushBuffer+0x44>)
 801865c:	4910      	ldr	r1, [pc, #64]	; (80186a0 <_NextPixel_FlushBuffer+0x48>)
 801865e:	6818      	ldr	r0, [r3, #0]
 8018660:	4c10      	ldr	r4, [pc, #64]	; (80186a4 <_NextPixel_FlushBuffer+0x4c>)
 8018662:	7c42      	ldrb	r2, [r0, #17]
 8018664:	69e3      	ldr	r3, [r4, #28]
 8018666:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801866a:	6922      	ldr	r2, [r4, #16]
 801866c:	68c6      	ldr	r6, [r0, #12]
 801866e:	6861      	ldr	r1, [r4, #4]
 8018670:	b086      	sub	sp, #24
 8018672:	2501      	movs	r5, #1
 8018674:	9500      	str	r5, [sp, #0]
 8018676:	2500      	movs	r5, #0
 8018678:	9301      	str	r3, [sp, #4]
 801867a:	9203      	str	r2, [sp, #12]
 801867c:	9502      	str	r5, [sp, #8]
 801867e:	9504      	str	r5, [sp, #16]
 8018680:	9505      	str	r5, [sp, #20]
 8018682:	68a2      	ldr	r2, [r4, #8]
 8018684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018686:	6876      	ldr	r6, [r6, #4]
 8018688:	47b0      	blx	r6
 801868a:	6860      	ldr	r0, [r4, #4]
 801868c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801868e:	6922      	ldr	r2, [r4, #16]
 8018690:	6265      	str	r5, [r4, #36]	; 0x24
 8018692:	1843      	adds	r3, r0, r1
 8018694:	6063      	str	r3, [r4, #4]
 8018696:	6162      	str	r2, [r4, #20]
 8018698:	b006      	add	sp, #24
 801869a:	bd70      	pop	{r4, r5, r6, pc}
 801869c:	20000308 	.word	0x20000308
 80186a0:	2000eb5c 	.word	0x2000eb5c
 80186a4:	2000e254 	.word	0x2000e254

080186a8 <_NextPixel_SetPixel>:
 80186a8:	4b3f      	ldr	r3, [pc, #252]	; (80187a8 <_NextPixel_SetPixel+0x100>)
 80186aa:	699a      	ldr	r2, [r3, #24]
 80186ac:	2a02      	cmp	r2, #2
 80186ae:	b530      	push	{r4, r5, lr}
 80186b0:	d066      	beq.n	8018780 <_NextPixel_SetPixel+0xd8>
 80186b2:	2a04      	cmp	r2, #4
 80186b4:	d068      	beq.n	8018788 <_NextPixel_SetPixel+0xe0>
 80186b6:	2a01      	cmp	r2, #1
 80186b8:	d16a      	bne.n	8018790 <_NextPixel_SetPixel+0xe8>
 80186ba:	69d9      	ldr	r1, [r3, #28]
 80186bc:	695a      	ldr	r2, [r3, #20]
 80186be:	3901      	subs	r1, #1
 80186c0:	2907      	cmp	r1, #7
 80186c2:	d865      	bhi.n	8018790 <_NextPixel_SetPixel+0xe8>
 80186c4:	e8df f001 	tbb	[pc, r1]
 80186c8:	38641e04 	.word	0x38641e04
 80186cc:	58646464 	.word	0x58646464
 80186d0:	7814      	ldrb	r4, [r2, #0]
 80186d2:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 80186d6:	4934      	ldr	r1, [pc, #208]	; (80187a8 <_NextPixel_SetPixel+0x100>)
 80186d8:	ea24 0405 	bic.w	r4, r4, r5
 80186dc:	7014      	strb	r4, [r2, #0]
 80186de:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80186e0:	f1c5 0507 	rsb	r5, r5, #7
 80186e4:	fa00 f005 	lsl.w	r0, r0, r5
 80186e8:	4304      	orrs	r4, r0
 80186ea:	7014      	strb	r4, [r2, #0]
 80186ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80186ee:	1c42      	adds	r2, r0, #1
 80186f0:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 80186f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80186f6:	0840      	lsrs	r0, r0, #1
 80186f8:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 80186fc:	2800      	cmp	r0, #0
 80186fe:	d147      	bne.n	8018790 <_NextPixel_SetPixel+0xe8>
 8018700:	2380      	movs	r3, #128	; 0x80
 8018702:	e032      	b.n	801876a <_NextPixel_SetPixel+0xc2>
 8018704:	7814      	ldrb	r4, [r2, #0]
 8018706:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 801870a:	4927      	ldr	r1, [pc, #156]	; (80187a8 <_NextPixel_SetPixel+0x100>)
 801870c:	ea24 0405 	bic.w	r4, r4, r5
 8018710:	7014      	strb	r4, [r2, #0]
 8018712:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8018714:	006d      	lsls	r5, r5, #1
 8018716:	f1c5 0506 	rsb	r5, r5, #6
 801871a:	fa00 f005 	lsl.w	r0, r0, r5
 801871e:	4304      	orrs	r4, r0
 8018720:	7014      	strb	r4, [r2, #0]
 8018722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018724:	1c50      	adds	r0, r2, #1
 8018726:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801872a:	62d8      	str	r0, [r3, #44]	; 0x2c
 801872c:	0890      	lsrs	r0, r2, #2
 801872e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8018732:	bb68      	cbnz	r0, 8018790 <_NextPixel_SetPixel+0xe8>
 8018734:	23c0      	movs	r3, #192	; 0xc0
 8018736:	e018      	b.n	801876a <_NextPixel_SetPixel+0xc2>
 8018738:	7814      	ldrb	r4, [r2, #0]
 801873a:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 801873e:	491a      	ldr	r1, [pc, #104]	; (80187a8 <_NextPixel_SetPixel+0x100>)
 8018740:	ea24 0405 	bic.w	r4, r4, r5
 8018744:	7014      	strb	r4, [r2, #0]
 8018746:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8018748:	00ad      	lsls	r5, r5, #2
 801874a:	f1c5 0504 	rsb	r5, r5, #4
 801874e:	fa00 f005 	lsl.w	r0, r0, r5
 8018752:	4304      	orrs	r4, r0
 8018754:	7014      	strb	r4, [r2, #0]
 8018756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018758:	1c50      	adds	r0, r2, #1
 801875a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801875e:	62d8      	str	r0, [r3, #44]	; 0x2c
 8018760:	0910      	lsrs	r0, r2, #4
 8018762:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8018766:	b998      	cbnz	r0, 8018790 <_NextPixel_SetPixel+0xe8>
 8018768:	23f0      	movs	r3, #240	; 0xf0
 801876a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 801876e:	694b      	ldr	r3, [r1, #20]
 8018770:	62c8      	str	r0, [r1, #44]	; 0x2c
 8018772:	1c5a      	adds	r2, r3, #1
 8018774:	614a      	str	r2, [r1, #20]
 8018776:	e00b      	b.n	8018790 <_NextPixel_SetPixel+0xe8>
 8018778:	7010      	strb	r0, [r2, #0]
 801877a:	6958      	ldr	r0, [r3, #20]
 801877c:	1c41      	adds	r1, r0, #1
 801877e:	e006      	b.n	801878e <_NextPixel_SetPixel+0xe6>
 8018780:	6959      	ldr	r1, [r3, #20]
 8018782:	f821 0b02 	strh.w	r0, [r1], #2
 8018786:	e002      	b.n	801878e <_NextPixel_SetPixel+0xe6>
 8018788:	6959      	ldr	r1, [r3, #20]
 801878a:	f841 0b04 	str.w	r0, [r1], #4
 801878e:	6159      	str	r1, [r3, #20]
 8018790:	4805      	ldr	r0, [pc, #20]	; (80187a8 <_NextPixel_SetPixel+0x100>)
 8018792:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018794:	6a01      	ldr	r1, [r0, #32]
 8018796:	1c5a      	adds	r2, r3, #1
 8018798:	428a      	cmp	r2, r1
 801879a:	6242      	str	r2, [r0, #36]	; 0x24
 801879c:	d103      	bne.n	80187a6 <_NextPixel_SetPixel+0xfe>
 801879e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80187a2:	f7ff bf59 	b.w	8018658 <_NextPixel_FlushBuffer>
 80187a6:	bd30      	pop	{r4, r5, pc}
 80187a8:	2000e254 	.word	0x2000e254

080187ac <_NextPixel_NextLine>:
 80187ac:	b510      	push	{r4, lr}
 80187ae:	4c05      	ldr	r4, [pc, #20]	; (80187c4 <_NextPixel_NextLine+0x18>)
 80187b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187b2:	b10b      	cbz	r3, 80187b8 <_NextPixel_NextLine+0xc>
 80187b4:	f7ff ff50 	bl	8018658 <_NextPixel_FlushBuffer>
 80187b8:	68a1      	ldr	r1, [r4, #8]
 80187ba:	6820      	ldr	r0, [r4, #0]
 80187bc:	1c4a      	adds	r2, r1, #1
 80187be:	6060      	str	r0, [r4, #4]
 80187c0:	60a2      	str	r2, [r4, #8]
 80187c2:	bd10      	pop	{r4, pc}
 80187c4:	2000e254 	.word	0x2000e254

080187c8 <_NextPixel_End>:
 80187c8:	4b07      	ldr	r3, [pc, #28]	; (80187e8 <_NextPixel_End+0x20>)
 80187ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80187cc:	b510      	push	{r4, lr}
 80187ce:	461c      	mov	r4, r3
 80187d0:	b10a      	cbz	r2, 80187d6 <_NextPixel_End+0xe>
 80187d2:	f7ff ff41 	bl	8018658 <_NextPixel_FlushBuffer>
 80187d6:	4805      	ldr	r0, [pc, #20]	; (80187ec <_NextPixel_End+0x24>)
 80187d8:	f7fb fb9c 	bl	8013f14 <GUI_ALLOC_UnlockH>
 80187dc:	68e0      	ldr	r0, [r4, #12]
 80187de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187e2:	f7fb bbc3 	b.w	8013f6c <GUI_ALLOC_Free>
 80187e6:	bf00      	nop
 80187e8:	2000e254 	.word	0x2000e254
 80187ec:	2000e264 	.word	0x2000e264

080187f0 <_NextPixel_Start>:
 80187f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187f4:	4b24      	ldr	r3, [pc, #144]	; (8018888 <_NextPixel_Start+0x98>)
 80187f6:	1a12      	subs	r2, r2, r0
 80187f8:	4607      	mov	r7, r0
 80187fa:	6818      	ldr	r0, [r3, #0]
 80187fc:	7c40      	ldrb	r0, [r0, #17]
 80187fe:	4689      	mov	r9, r1
 8018800:	f102 0801 	add.w	r8, r2, #1
 8018804:	f7f8 fdfa 	bl	80113fc <GUI_GetBitsPerPixelEx>
 8018808:	4920      	ldr	r1, [pc, #128]	; (801888c <_NextPixel_Start+0x9c>)
 801880a:	2818      	cmp	r0, #24
 801880c:	bf08      	it	eq
 801880e:	2020      	moveq	r0, #32
 8018810:	2808      	cmp	r0, #8
 8018812:	61c8      	str	r0, [r1, #28]
 8018814:	dd04      	ble.n	8018820 <_NextPixel_Start+0x30>
 8018816:	2810      	cmp	r0, #16
 8018818:	bfcc      	ite	gt
 801881a:	2504      	movgt	r5, #4
 801881c:	2502      	movle	r5, #2
 801881e:	e000      	b.n	8018822 <_NextPixel_Start+0x32>
 8018820:	2501      	movs	r5, #1
 8018822:	f7fb fcbb 	bl	801419c <GUI_ALLOC_GetMaxSize>
 8018826:	fb08 f805 	mul.w	r8, r8, r5
 801882a:	4540      	cmp	r0, r8
 801882c:	d203      	bcs.n	8018836 <_NextPixel_Start+0x46>
 801882e:	fbb0 f6f5 	udiv	r6, r0, r5
 8018832:	436e      	muls	r6, r5
 8018834:	e000      	b.n	8018838 <_NextPixel_Start+0x48>
 8018836:	4646      	mov	r6, r8
 8018838:	4c14      	ldr	r4, [pc, #80]	; (801888c <_NextPixel_Start+0x9c>)
 801883a:	fb96 f2f5 	sdiv	r2, r6, r5
 801883e:	4640      	mov	r0, r8
 8018840:	2600      	movs	r6, #0
 8018842:	6222      	str	r2, [r4, #32]
 8018844:	6266      	str	r6, [r4, #36]	; 0x24
 8018846:	6027      	str	r7, [r4, #0]
 8018848:	6067      	str	r7, [r4, #4]
 801884a:	f8c4 9008 	str.w	r9, [r4, #8]
 801884e:	61a5      	str	r5, [r4, #24]
 8018850:	f7fb fda0 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 8018854:	60e0      	str	r0, [r4, #12]
 8018856:	b188      	cbz	r0, 801887c <_NextPixel_Start+0x8c>
 8018858:	f7fb fb4e 	bl	8013ef8 <GUI_ALLOC_LockH>
 801885c:	6120      	str	r0, [r4, #16]
 801885e:	6160      	str	r0, [r4, #20]
 8018860:	69e0      	ldr	r0, [r4, #28]
 8018862:	2807      	cmp	r0, #7
 8018864:	dc0d      	bgt.n	8018882 <_NextPixel_Start+0x92>
 8018866:	2101      	movs	r1, #1
 8018868:	4a09      	ldr	r2, [pc, #36]	; (8018890 <_NextPixel_Start+0xa0>)
 801886a:	62e6      	str	r6, [r4, #44]	; 0x2c
 801886c:	fa01 f300 	lsl.w	r3, r1, r0
 8018870:	18d0      	adds	r0, r2, r3
 8018872:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 8018876:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801887a:	e002      	b.n	8018882 <_NextPixel_Start+0x92>
 801887c:	2001      	movs	r0, #1
 801887e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018882:	4630      	mov	r0, r6
 8018884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018888:	20000308 	.word	0x20000308
 801888c:	2000e254 	.word	0x2000e254
 8018890:	08034184 	.word	0x08034184

08018894 <LCD_GetNextPixelAPI>:
 8018894:	b507      	push	{r0, r1, r2, lr}
 8018896:	4b09      	ldr	r3, [pc, #36]	; (80188bc <LCD_GetNextPixelAPI+0x28>)
 8018898:	4909      	ldr	r1, [pc, #36]	; (80188c0 <LCD_GetNextPixelAPI+0x2c>)
 801889a:	6818      	ldr	r0, [r3, #0]
 801889c:	7c42      	ldrb	r2, [r0, #17]
 801889e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80188a2:	68d8      	ldr	r0, [r3, #12]
 80188a4:	9301      	str	r3, [sp, #4]
 80188a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80188a8:	b90a      	cbnz	r2, 80188ae <LCD_GetNextPixelAPI+0x1a>
 80188aa:	4806      	ldr	r0, [pc, #24]	; (80188c4 <LCD_GetNextPixelAPI+0x30>)
 80188ac:	e004      	b.n	80188b8 <LCD_GetNextPixelAPI+0x24>
 80188ae:	a801      	add	r0, sp, #4
 80188b0:	2108      	movs	r1, #8
 80188b2:	4790      	blx	r2
 80188b4:	2800      	cmp	r0, #0
 80188b6:	d0f8      	beq.n	80188aa <LCD_GetNextPixelAPI+0x16>
 80188b8:	bd0e      	pop	{r1, r2, r3, pc}
 80188ba:	bf00      	nop
 80188bc:	20000308 	.word	0x20000308
 80188c0:	2000eb5c 	.word	0x2000eb5c
 80188c4:	2000035c 	.word	0x2000035c

080188c8 <LCD_GetNumLayers>:
 80188c8:	b510      	push	{r4, lr}
 80188ca:	2000      	movs	r0, #0
 80188cc:	f7fa fdf0 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 80188d0:	1c04      	adds	r4, r0, #0
 80188d2:	bf18      	it	ne
 80188d4:	2401      	movne	r4, #1
 80188d6:	2001      	movs	r0, #1
 80188d8:	f7fa fdea 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 80188dc:	b100      	cbz	r0, 80188e0 <LCD_GetNumLayers+0x18>
 80188de:	3401      	adds	r4, #1
 80188e0:	4620      	mov	r0, r4
 80188e2:	bd10      	pop	{r4, pc}

080188e4 <LCD_GetBkColorIndex>:
 80188e4:	4b02      	ldr	r3, [pc, #8]	; (80188f0 <LCD_GetBkColorIndex+0xc>)
 80188e6:	6818      	ldr	r0, [r3, #0]
 80188e8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80188ea:	6808      	ldr	r0, [r1, #0]
 80188ec:	4770      	bx	lr
 80188ee:	bf00      	nop
 80188f0:	20000308 	.word	0x20000308

080188f4 <LCD_GetColorIndex>:
 80188f4:	4b02      	ldr	r3, [pc, #8]	; (8018900 <LCD_GetColorIndex+0xc>)
 80188f6:	6818      	ldr	r0, [r3, #0]
 80188f8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80188fa:	6808      	ldr	r0, [r1, #0]
 80188fc:	4770      	bx	lr
 80188fe:	bf00      	nop
 8018900:	20000308 	.word	0x20000308

08018904 <_CreateBuffer>:
 8018904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018906:	6943      	ldr	r3, [r0, #20]
 8018908:	4605      	mov	r5, r0
 801890a:	8818      	ldrh	r0, [r3, #0]
 801890c:	300d      	adds	r0, #13
 801890e:	0080      	lsls	r0, r0, #2
 8018910:	460f      	mov	r7, r1
 8018912:	f7fb fd3f 	bl	8014394 <GUI_ALLOC_AllocNoInit>
 8018916:	4606      	mov	r6, r0
 8018918:	2800      	cmp	r0, #0
 801891a:	d03d      	beq.n	8018998 <_CreateBuffer+0x94>
 801891c:	f7fb faec 	bl	8013ef8 <GUI_ALLOC_LockH>
 8018920:	6829      	ldr	r1, [r5, #0]
 8018922:	4604      	mov	r4, r0
 8018924:	6988      	ldr	r0, [r1, #24]
 8018926:	f7fa fdc3 	bl	80134b0 <GUI_DEVICE__GetpDriver>
 801892a:	68c2      	ldr	r2, [r0, #12]
 801892c:	2108      	movs	r1, #8
 801892e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8018930:	4798      	blx	r3
 8018932:	2802      	cmp	r0, #2
 8018934:	dd0b      	ble.n	801894e <_CreateBuffer+0x4a>
 8018936:	2804      	cmp	r0, #4
 8018938:	dd06      	ble.n	8018948 <_CreateBuffer+0x44>
 801893a:	2808      	cmp	r0, #8
 801893c:	dd06      	ble.n	801894c <_CreateBuffer+0x48>
 801893e:	2810      	cmp	r0, #16
 8018940:	bfd4      	ite	le
 8018942:	2010      	movle	r0, #16
 8018944:	2020      	movgt	r0, #32
 8018946:	e002      	b.n	801894e <_CreateBuffer+0x4a>
 8018948:	2004      	movs	r0, #4
 801894a:	e000      	b.n	801894e <_CreateBuffer+0x4a>
 801894c:	2008      	movs	r0, #8
 801894e:	2808      	cmp	r0, #8
 8018950:	61a0      	str	r0, [r4, #24]
 8018952:	dd04      	ble.n	801895e <_CreateBuffer+0x5a>
 8018954:	2810      	cmp	r0, #16
 8018956:	bfcc      	ite	gt
 8018958:	2004      	movgt	r0, #4
 801895a:	2002      	movle	r0, #2
 801895c:	e000      	b.n	8018960 <_CreateBuffer+0x5c>
 801895e:	2001      	movs	r0, #1
 8018960:	6969      	ldr	r1, [r5, #20]
 8018962:	6120      	str	r0, [r4, #16]
 8018964:	880a      	ldrh	r2, [r1, #0]
 8018966:	4350      	muls	r0, r2
 8018968:	61e2      	str	r2, [r4, #28]
 801896a:	6160      	str	r0, [r4, #20]
 801896c:	f7fb fc16 	bl	801419c <GUI_ALLOC_GetMaxSize>
 8018970:	6963      	ldr	r3, [r4, #20]
 8018972:	60a6      	str	r6, [r4, #8]
 8018974:	4283      	cmp	r3, r0
 8018976:	bfc8      	it	gt
 8018978:	6160      	strgt	r0, [r4, #20]
 801897a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801897e:	2000      	movs	r0, #0
 8018980:	2f01      	cmp	r7, #1
 8018982:	6023      	str	r3, [r4, #0]
 8018984:	60e0      	str	r0, [r4, #12]
 8018986:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
 801898a:	d003      	beq.n	8018994 <_CreateBuffer+0x90>
 801898c:	69e1      	ldr	r1, [r4, #28]
 801898e:	1e4a      	subs	r2, r1, #1
 8018990:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018994:	6063      	str	r3, [r4, #4]
 8018996:	e000      	b.n	801899a <_CreateBuffer+0x96>
 8018998:	4604      	mov	r4, r0
 801899a:	4620      	mov	r0, r4
 801899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801899e <_FlushBuffer>:
 801899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189a2:	460c      	mov	r4, r1
 80189a4:	68c9      	ldr	r1, [r1, #12]
 80189a6:	b086      	sub	sp, #24
 80189a8:	2900      	cmp	r1, #0
 80189aa:	d02d      	beq.n	8018a08 <_FlushBuffer+0x6a>
 80189ac:	6807      	ldr	r7, [r0, #0]
 80189ae:	2f00      	cmp	r7, #0
 80189b0:	d02c      	beq.n	8018a0c <_FlushBuffer+0x6e>
 80189b2:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 80189b6:	2b01      	cmp	r3, #1
 80189b8:	d104      	bne.n	80189c4 <_FlushBuffer+0x26>
 80189ba:	6825      	ldr	r5, [r4, #0]
 80189bc:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 80189c0:	6065      	str	r5, [r4, #4]
 80189c2:	e009      	b.n	80189d8 <_FlushBuffer+0x3a>
 80189c4:	69e0      	ldr	r0, [r4, #28]
 80189c6:	6866      	ldr	r6, [r4, #4]
 80189c8:	6823      	ldr	r3, [r4, #0]
 80189ca:	f8d4 8020 	ldr.w	r8, [r4, #32]
 80189ce:	1e42      	subs	r2, r0, #1
 80189d0:	1d35      	adds	r5, r6, #4
 80189d2:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 80189d6:	6066      	str	r6, [r4, #4]
 80189d8:	4628      	mov	r0, r5
 80189da:	69a2      	ldr	r2, [r4, #24]
 80189dc:	f7ff f964 	bl	8017ca8 <GUI__CompactPixelIndices>
 80189e0:	69a2      	ldr	r2, [r4, #24]
 80189e2:	6963      	ldr	r3, [r4, #20]
 80189e4:	68f9      	ldr	r1, [r7, #12]
 80189e6:	9503      	str	r5, [sp, #12]
 80189e8:	2001      	movs	r0, #1
 80189ea:	2500      	movs	r5, #0
 80189ec:	9000      	str	r0, [sp, #0]
 80189ee:	9201      	str	r2, [sp, #4]
 80189f0:	9302      	str	r3, [sp, #8]
 80189f2:	9504      	str	r5, [sp, #16]
 80189f4:	9505      	str	r5, [sp, #20]
 80189f6:	684e      	ldr	r6, [r1, #4]
 80189f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80189fa:	68e3      	ldr	r3, [r4, #12]
 80189fc:	4638      	mov	r0, r7
 80189fe:	4641      	mov	r1, r8
 8018a00:	47b0      	blx	r6
 8018a02:	60e5      	str	r5, [r4, #12]
 8018a04:	4628      	mov	r0, r5
 8018a06:	e002      	b.n	8018a0e <_FlushBuffer+0x70>
 8018a08:	4608      	mov	r0, r1
 8018a0a:	e000      	b.n	8018a0e <_FlushBuffer+0x70>
 8018a0c:	2001      	movs	r0, #1
 8018a0e:	b006      	add	sp, #24
 8018a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a14 <_SetSpriteBkPixel>:
 8018a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a16:	9c06      	ldr	r4, [sp, #24]
 8018a18:	460d      	mov	r5, r1
 8018a1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018a1c:	428d      	cmp	r5, r1
 8018a1e:	4606      	mov	r6, r0
 8018a20:	4617      	mov	r7, r2
 8018a22:	d105      	bne.n	8018a30 <_SetSpriteBkPixel+0x1c>
 8018a24:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8018a28:	6a20      	ldr	r0, [r4, #32]
 8018a2a:	1811      	adds	r1, r2, r0
 8018a2c:	428e      	cmp	r6, r1
 8018a2e:	d003      	beq.n	8018a38 <_SetSpriteBkPixel+0x24>
 8018a30:	4618      	mov	r0, r3
 8018a32:	4621      	mov	r1, r4
 8018a34:	f7ff ffb3 	bl	801899e <_FlushBuffer>
 8018a38:	6863      	ldr	r3, [r4, #4]
 8018a3a:	68e1      	ldr	r1, [r4, #12]
 8018a3c:	601f      	str	r7, [r3, #0]
 8018a3e:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8018a42:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8018a46:	6060      	str	r0, [r4, #4]
 8018a48:	b909      	cbnz	r1, 8018a4e <_SetSpriteBkPixel+0x3a>
 8018a4a:	62a6      	str	r6, [r4, #40]	; 0x28
 8018a4c:	62e5      	str	r5, [r4, #44]	; 0x2c
 8018a4e:	1c4b      	adds	r3, r1, #1
 8018a50:	60e3      	str	r3, [r4, #12]
 8018a52:	6226      	str	r6, [r4, #32]
 8018a54:	6265      	str	r5, [r4, #36]	; 0x24
 8018a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018a58 <_ReleaseBuffer>:
 8018a58:	b513      	push	{r0, r1, r4, lr}
 8018a5a:	6800      	ldr	r0, [r0, #0]
 8018a5c:	9101      	str	r1, [sp, #4]
 8018a5e:	f7ff ff9e 	bl	801899e <_FlushBuffer>
 8018a62:	a802      	add	r0, sp, #8
 8018a64:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8018a68:	6894      	ldr	r4, [r2, #8]
 8018a6a:	f7fb fa53 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8018a6e:	4620      	mov	r0, r4
 8018a70:	f7fb fa7c 	bl	8013f6c <GUI_ALLOC_Free>
 8018a74:	bd1c      	pop	{r2, r3, r4, pc}

08018a76 <_GetBkPixel>:
 8018a76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a7a:	f9b3 7004 	ldrsh.w	r7, [r3, #4]
 8018a7e:	42b8      	cmp	r0, r7
 8018a80:	4606      	mov	r6, r0
 8018a82:	460d      	mov	r5, r1
 8018a84:	4691      	mov	r9, r2
 8018a86:	461c      	mov	r4, r3
 8018a88:	da04      	bge.n	8018a94 <_GetBkPixel+0x1e>
 8018a8a:	f8d9 0000 	ldr.w	r0, [r9]
 8018a8e:	bb28      	cbnz	r0, 8018adc <_GetBkPixel+0x66>
 8018a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018a98:	4298      	cmp	r0, r3
 8018a9a:	dcf6      	bgt.n	8018a8a <_GetBkPixel+0x14>
 8018a9c:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 8018aa0:	4541      	cmp	r1, r8
 8018aa2:	dbf2      	blt.n	8018a8a <_GetBkPixel+0x14>
 8018aa4:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8018aa8:	4281      	cmp	r1, r0
 8018aaa:	dcee      	bgt.n	8018a8a <_GetBkPixel+0x14>
 8018aac:	ebc8 0801 	rsb	r8, r8, r1
 8018ab0:	1bf7      	subs	r7, r6, r7
 8018ab2:	6960      	ldr	r0, [r4, #20]
 8018ab4:	4639      	mov	r1, r7
 8018ab6:	4642      	mov	r2, r8
 8018ab8:	f000 f9f6 	bl	8018ea8 <GUI_GetBitmapPixelIndex>
 8018abc:	2800      	cmp	r0, #0
 8018abe:	d0e4      	beq.n	8018a8a <_GetBkPixel+0x14>
 8018ac0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018ac4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018ac8:	1a88      	subs	r0, r1, r2
 8018aca:	1c41      	adds	r1, r0, #1
 8018acc:	f104 0320 	add.w	r3, r4, #32
 8018ad0:	fb08 7701 	mla	r7, r8, r1, r7
 8018ad4:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8018ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018adc:	68c3      	ldr	r3, [r0, #12]
 8018ade:	4631      	mov	r1, r6
 8018ae0:	695b      	ldr	r3, [r3, #20]
 8018ae2:	462a      	mov	r2, r5
 8018ae4:	4798      	blx	r3
 8018ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08018aec <_GetDeviceRect>:
 8018aec:	b538      	push	{r3, r4, r5, lr}
 8018aee:	4a0c      	ldr	r2, [pc, #48]	; (8018b20 <_GetDeviceRect+0x34>)
 8018af0:	6983      	ldr	r3, [r0, #24]
 8018af2:	56d2      	ldrsb	r2, [r2, r3]
 8018af4:	2a01      	cmp	r2, #1
 8018af6:	4605      	mov	r5, r0
 8018af8:	460c      	mov	r4, r1
 8018afa:	dd0d      	ble.n	8018b18 <_GetDeviceRect+0x2c>
 8018afc:	2000      	movs	r0, #0
 8018afe:	8048      	strh	r0, [r1, #2]
 8018b00:	8008      	strh	r0, [r1, #0]
 8018b02:	4618      	mov	r0, r3
 8018b04:	f7f8 fc4f 	bl	80113a6 <LCD_GetXSizeEx>
 8018b08:	1e41      	subs	r1, r0, #1
 8018b0a:	80a1      	strh	r1, [r4, #4]
 8018b0c:	69a8      	ldr	r0, [r5, #24]
 8018b0e:	f7f8 fc4d 	bl	80113ac <LCD_GetYSizeEx>
 8018b12:	1e43      	subs	r3, r0, #1
 8018b14:	80e3      	strh	r3, [r4, #6]
 8018b16:	bd38      	pop	{r3, r4, r5, pc}
 8018b18:	68c3      	ldr	r3, [r0, #12]
 8018b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018b1c:	4790      	blx	r2
 8018b1e:	bd38      	pop	{r3, r4, r5, pc}
 8018b20:	2000eb38 	.word	0x2000eb38

08018b24 <GUI_SPRITE_SetPosition>:
 8018b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b28:	b0a5      	sub	sp, #148	; 0x94
 8018b2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8018b2c:	920c      	str	r2, [sp, #48]	; 0x30
 8018b2e:	2800      	cmp	r0, #0
 8018b30:	f000 8172 	beq.w	8018e18 <GUI_SPRITE_SetPosition+0x2f4>
 8018b34:	f7fb f9e0 	bl	8013ef8 <GUI_ALLOC_LockH>
 8018b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018b3e:	6801      	ldr	r1, [r0, #0]
 8018b40:	9021      	str	r0, [sp, #132]	; 0x84
 8018b42:	429a      	cmp	r2, r3
 8018b44:	9104      	str	r1, [sp, #16]
 8018b46:	d106      	bne.n	8018b56 <GUI_SPRITE_SetPosition+0x32>
 8018b48:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018b4c:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8018b50:	4586      	cmp	lr, r0
 8018b52:	f000 8149 	beq.w	8018de8 <GUI_SPRITE_SetPosition+0x2c4>
 8018b56:	2000      	movs	r0, #0
 8018b58:	f7f7 fad0 	bl	80100fc <GUI_MEMDEV_Select>
 8018b5c:	49ad      	ldr	r1, [pc, #692]	; (8018e14 <GUI_SPRITE_SetPosition+0x2f0>)
 8018b5e:	9d04      	ldr	r5, [sp, #16]
 8018b60:	680b      	ldr	r3, [r1, #0]
 8018b62:	69af      	ldr	r7, [r5, #24]
 8018b64:	7c5a      	ldrb	r2, [r3, #17]
 8018b66:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8018b68:	901b      	str	r0, [sp, #108]	; 0x6c
 8018b6a:	4297      	cmp	r7, r2
 8018b6c:	bf18      	it	ne
 8018b6e:	745f      	strbne	r7, [r3, #17]
 8018b70:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
 8018b74:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8018b78:	970d      	str	r7, [sp, #52]	; 0x34
 8018b7a:	920e      	str	r2, [sp, #56]	; 0x38
 8018b7c:	f9b5 7006 	ldrsh.w	r7, [r5, #6]
 8018b80:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018b84:	ebc2 0b00 	rsb	fp, r2, r0
 8018b88:	1bd8      	subs	r0, r3, r7
 8018b8a:	8a2b      	ldrh	r3, [r5, #16]
 8018b8c:	9005      	str	r0, [sp, #20]
 8018b8e:	f10b 0101 	add.w	r1, fp, #1
 8018b92:	9107      	str	r1, [sp, #28]
 8018b94:	1c41      	adds	r1, r0, #1
 8018b96:	f003 0002 	and.w	r0, r3, #2
 8018b9a:	9114      	str	r1, [sp, #80]	; 0x50
 8018b9c:	b281      	uxth	r1, r0
 8018b9e:	920f      	str	r2, [sp, #60]	; 0x3c
 8018ba0:	2900      	cmp	r1, #0
 8018ba2:	f000 8105 	beq.w	8018db0 <GUI_SPRITE_SetPosition+0x28c>
 8018ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ba8:	696c      	ldr	r4, [r5, #20]
 8018baa:	ebc2 0903 	rsb	r9, r2, r3
 8018bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018bb0:	9415      	str	r4, [sp, #84]	; 0x54
 8018bb2:	f1b9 0f00 	cmp.w	r9, #0
 8018bb6:	ebc7 0a02 	rsb	sl, r7, r2
 8018bba:	dc09      	bgt.n	8018bd0 <GUI_SPRITE_SetPosition+0xac>
 8018bbc:	2000      	movs	r0, #0
 8018bbe:	f04f 38ff 	mov.w	r8, #4294967295
 8018bc2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018bc6:	901a      	str	r0, [sp, #104]	; 0x68
 8018bc8:	44cb      	add	fp, r9
 8018bca:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8018bce:	e007      	b.n	8018be0 <GUI_SPRITE_SetPosition+0xbc>
 8018bd0:	9907      	ldr	r1, [sp, #28]
 8018bd2:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8018bd6:	2400      	movs	r4, #0
 8018bd8:	9111      	str	r1, [sp, #68]	; 0x44
 8018bda:	f04f 0801 	mov.w	r8, #1
 8018bde:	9409      	str	r4, [sp, #36]	; 0x24
 8018be0:	f1ba 0f00 	cmp.w	sl, #0
 8018be4:	dc0c      	bgt.n	8018c00 <GUI_SPRITE_SetPosition+0xdc>
 8018be6:	9c05      	ldr	r4, [sp, #20]
 8018be8:	f04f 3cff 	mov.w	ip, #4294967295
 8018bec:	eb04 020a 	add.w	r2, r4, sl
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	9205      	str	r2, [sp, #20]
 8018bf4:	9018      	str	r0, [sp, #96]	; 0x60
 8018bf6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8018bfa:	f8cd c020 	str.w	ip, [sp, #32]
 8018bfe:	e006      	b.n	8018c0e <GUI_SPRITE_SetPosition+0xea>
 8018c00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018c02:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8018c06:	2301      	movs	r3, #1
 8018c08:	9412      	str	r4, [sp, #72]	; 0x48
 8018c0a:	9308      	str	r3, [sp, #32]
 8018c0c:	2400      	movs	r4, #0
 8018c0e:	68e8      	ldr	r0, [r5, #12]
 8018c10:	f7fb f972 	bl	8013ef8 <GUI_ALLOC_LockH>
 8018c14:	a922      	add	r1, sp, #136	; 0x88
 8018c16:	9020      	str	r0, [sp, #128]	; 0x80
 8018c18:	9804      	ldr	r0, [sp, #16]
 8018c1a:	f7ff ff67 	bl	8018aec <_GetDeviceRect>
 8018c1e:	4641      	mov	r1, r8
 8018c20:	9821      	ldr	r0, [sp, #132]	; 0x84
 8018c22:	f7ff fe6f 	bl	8018904 <_CreateBuffer>
 8018c26:	4641      	mov	r1, r8
 8018c28:	9016      	str	r0, [sp, #88]	; 0x58
 8018c2a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8018c2c:	f7ff fe6a 	bl	8018904 <_CreateBuffer>
 8018c30:	9a08      	ldr	r2, [sp, #32]
 8018c32:	9017      	str	r0, [sp, #92]	; 0x5c
 8018c34:	9807      	ldr	r0, [sp, #28]
 8018c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c38:	4342      	muls	r2, r0
 8018c3a:	0091      	lsls	r1, r2, #2
 8018c3c:	fb00 3204 	mla	r2, r0, r4, r3
 8018c40:	911f      	str	r1, [sp, #124]	; 0x7c
 8018c42:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8018c46:	193f      	adds	r7, r7, r4
 8018c48:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8018c4c:	9010      	str	r0, [sp, #64]	; 0x40
 8018c4e:	4457      	add	r7, sl
 8018c50:	911e      	str	r1, [sp, #120]	; 0x78
 8018c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018c54:	429c      	cmp	r4, r3
 8018c56:	f000 80a0 	beq.w	8018d9a <GUI_SPRITE_SetPosition+0x276>
 8018c5a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8018c5c:	42b4      	cmp	r4, r6
 8018c5e:	db06      	blt.n	8018c6e <GUI_SPRITE_SetPosition+0x14a>
 8018c60:	f8dd e014 	ldr.w	lr, [sp, #20]
 8018c64:	4574      	cmp	r4, lr
 8018c66:	bfcc      	ite	gt
 8018c68:	2600      	movgt	r6, #0
 8018c6a:	2601      	movle	r6, #1
 8018c6c:	e000      	b.n	8018c70 <GUI_SPRITE_SetPosition+0x14c>
 8018c6e:	2600      	movs	r6, #0
 8018c70:	b2f5      	uxtb	r5, r6
 8018c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018c76:	951c      	str	r5, [sp, #112]	; 0x70
 8018c78:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8018c7a:	ebca 0307 	rsb	r3, sl, r7
 8018c7e:	1888      	adds	r0, r1, r2
 8018c80:	950a      	str	r5, [sp, #40]	; 0x28
 8018c82:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c84:	eb00 0609 	add.w	r6, r0, r9
 8018c88:	4615      	mov	r5, r2
 8018c8a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8018c8e:	4565      	cmp	r5, ip
 8018c90:	d07b      	beq.n	8018d8a <GUI_SPRITE_SetPosition+0x266>
 8018c92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018c94:	4629      	mov	r1, r5
 8018c96:	4622      	mov	r2, r4
 8018c98:	f000 f906 	bl	8018ea8 <GUI_GetBitmapPixelIndex>
 8018c9c:	9019      	str	r0, [sp, #100]	; 0x64
 8018c9e:	2800      	cmp	r0, #0
 8018ca0:	d06c      	beq.n	8018d7c <GUI_SPRITE_SetPosition+0x258>
 8018ca2:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 8018ca6:	4575      	cmp	r5, lr
 8018ca8:	ebc9 0c06 	rsb	ip, r9, r6
 8018cac:	db04      	blt.n	8018cb8 <GUI_SPRITE_SetPosition+0x194>
 8018cae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018cb0:	455d      	cmp	r5, fp
 8018cb2:	bfc8      	it	gt
 8018cb4:	2300      	movgt	r3, #0
 8018cb6:	e000      	b.n	8018cba <GUI_SPRITE_SetPosition+0x196>
 8018cb8:	2300      	movs	r3, #0
 8018cba:	f9bd 2088 	ldrsh.w	r2, [sp, #136]	; 0x88
 8018cbe:	b2d9      	uxtb	r1, r3
 8018cc0:	4296      	cmp	r6, r2
 8018cc2:	911d      	str	r1, [sp, #116]	; 0x74
 8018cc4:	db17      	blt.n	8018cf6 <GUI_SPRITE_SetPosition+0x1d2>
 8018cc6:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8018cca:	429f      	cmp	r7, r3
 8018ccc:	db16      	blt.n	8018cfc <GUI_SPRITE_SetPosition+0x1d8>
 8018cce:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
 8018cd2:	4296      	cmp	r6, r2
 8018cd4:	dc15      	bgt.n	8018d02 <GUI_SPRITE_SetPosition+0x1de>
 8018cd6:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
 8018cda:	429f      	cmp	r7, r3
 8018cdc:	dc14      	bgt.n	8018d08 <GUI_SPRITE_SetPosition+0x1e4>
 8018cde:	4630      	mov	r0, r6
 8018ce0:	4639      	mov	r1, r7
 8018ce2:	9a04      	ldr	r2, [sp, #16]
 8018ce4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ce6:	f8cd c00c 	str.w	ip, [sp, #12]
 8018cea:	f7ff fec4 	bl	8018a76 <_GetBkPixel>
 8018cee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018cf2:	9006      	str	r0, [sp, #24]
 8018cf4:	e00a      	b.n	8018d0c <GUI_SPRITE_SetPosition+0x1e8>
 8018cf6:	2000      	movs	r0, #0
 8018cf8:	9006      	str	r0, [sp, #24]
 8018cfa:	e007      	b.n	8018d0c <GUI_SPRITE_SetPosition+0x1e8>
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	9106      	str	r1, [sp, #24]
 8018d00:	e004      	b.n	8018d0c <GUI_SPRITE_SetPosition+0x1e8>
 8018d02:	2000      	movs	r0, #0
 8018d04:	9006      	str	r0, [sp, #24]
 8018d06:	e001      	b.n	8018d0c <GUI_SPRITE_SetPosition+0x1e8>
 8018d08:	2100      	movs	r1, #0
 8018d0a:	9106      	str	r1, [sp, #24]
 8018d0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018d0e:	b16a      	cbz	r2, 8018d2c <GUI_SPRITE_SetPosition+0x208>
 8018d10:	ebb5 0109 	subs.w	r1, r5, r9
 8018d14:	d413      	bmi.n	8018d3e <GUI_SPRITE_SetPosition+0x21a>
 8018d16:	ebb4 020a 	subs.w	r2, r4, sl
 8018d1a:	d410      	bmi.n	8018d3e <GUI_SPRITE_SetPosition+0x21a>
 8018d1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018d1e:	f8cd c00c 	str.w	ip, [sp, #12]
 8018d22:	f000 f8c1 	bl	8018ea8 <GUI_GetBitmapPixelIndex>
 8018d26:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018d2a:	b940      	cbnz	r0, 8018d3e <GUI_SPRITE_SetPosition+0x21a>
 8018d2c:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 8018d30:	4584      	cmp	ip, r0
 8018d32:	db04      	blt.n	8018d3e <GUI_SPRITE_SetPosition+0x21a>
 8018d34:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8018d38:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018d3a:	4299      	cmp	r1, r3
 8018d3c:	da58      	bge.n	8018df0 <GUI_SPRITE_SetPosition+0x2cc>
 8018d3e:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
 8018d42:	428e      	cmp	r6, r1
 8018d44:	db17      	blt.n	8018d76 <GUI_SPRITE_SetPosition+0x252>
 8018d46:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 8018d4a:	4287      	cmp	r7, r0
 8018d4c:	db13      	blt.n	8018d76 <GUI_SPRITE_SetPosition+0x252>
 8018d4e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8018d52:	429e      	cmp	r6, r3
 8018d54:	dc0f      	bgt.n	8018d76 <GUI_SPRITE_SetPosition+0x252>
 8018d56:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
 8018d5a:	4297      	cmp	r7, r2
 8018d5c:	dc0b      	bgt.n	8018d76 <GUI_SPRITE_SetPosition+0x252>
 8018d5e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018d60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018d62:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8018d66:	9100      	str	r1, [sp, #0]
 8018d68:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8018d6c:	9b04      	ldr	r3, [sp, #16]
 8018d6e:	4630      	mov	r0, r6
 8018d70:	4639      	mov	r1, r7
 8018d72:	f7ff fe4f 	bl	8018a14 <_SetSpriteBkPixel>
 8018d76:	9806      	ldr	r0, [sp, #24]
 8018d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d7a:	6210      	str	r0, [r2, #32]
 8018d7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018d7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018d80:	18c8      	adds	r0, r1, r3
 8018d82:	4445      	add	r5, r8
 8018d84:	900a      	str	r0, [sp, #40]	; 0x28
 8018d86:	4446      	add	r6, r8
 8018d88:	e77f      	b.n	8018c8a <GUI_SPRITE_SetPosition+0x166>
 8018d8a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018d8c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018d8e:	9b08      	ldr	r3, [sp, #32]
 8018d90:	1888      	adds	r0, r1, r2
 8018d92:	18e4      	adds	r4, r4, r3
 8018d94:	9010      	str	r0, [sp, #64]	; 0x40
 8018d96:	18ff      	adds	r7, r7, r3
 8018d98:	e75b      	b.n	8018c52 <GUI_SPRITE_SetPosition+0x12e>
 8018d9a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8018d9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018d9e:	f7ff fe5b 	bl	8018a58 <_ReleaseBuffer>
 8018da2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8018da4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018da6:	f7ff fe57 	bl	8018a58 <_ReleaseBuffer>
 8018daa:	a820      	add	r0, sp, #128	; 0x80
 8018dac:	f7fb f8b2 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8018db0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8018db4:	9a07      	ldr	r2, [sp, #28]
 8018db6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8018dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018dbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018dbe:	f8a3 e004 	strh.w	lr, [r3, #4]
 8018dc2:	eb0e 0102 	add.w	r1, lr, r2
 8018dc6:	1e4a      	subs	r2, r1, #1
 8018dc8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8018dcc:	80d8      	strh	r0, [r3, #6]
 8018dce:	1808      	adds	r0, r1, r0
 8018dd0:	811a      	strh	r2, [r3, #8]
 8018dd2:	8158      	strh	r0, [r3, #10]
 8018dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018dd8:	4293      	cmp	r3, r2
 8018dda:	d002      	beq.n	8018de2 <GUI_SPRITE_SetPosition+0x2be>
 8018ddc:	490d      	ldr	r1, [pc, #52]	; (8018e14 <GUI_SPRITE_SetPosition+0x2f0>)
 8018dde:	6808      	ldr	r0, [r1, #0]
 8018de0:	7442      	strb	r2, [r0, #17]
 8018de2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018de4:	f7f7 f98a 	bl	80100fc <GUI_MEMDEV_Select>
 8018de8:	a821      	add	r0, sp, #132	; 0x84
 8018dea:	f7fb f893 	bl	8013f14 <GUI_ALLOC_UnlockH>
 8018dee:	e013      	b.n	8018e18 <GUI_SPRITE_SetPosition+0x2f4>
 8018df0:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
 8018df4:	4594      	cmp	ip, r2
 8018df6:	dca2      	bgt.n	8018d3e <GUI_SPRITE_SetPosition+0x21a>
 8018df8:	f9bd 008e 	ldrsh.w	r0, [sp, #142]	; 0x8e
 8018dfc:	4281      	cmp	r1, r0
 8018dfe:	dc9e      	bgt.n	8018d3e <GUI_SPRITE_SetPosition+0x21a>
 8018e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e04:	9300      	str	r3, [sp, #0]
 8018e06:	4660      	mov	r0, ip
 8018e08:	6a12      	ldr	r2, [r2, #32]
 8018e0a:	9b04      	ldr	r3, [sp, #16]
 8018e0c:	f7ff fe02 	bl	8018a14 <_SetSpriteBkPixel>
 8018e10:	e795      	b.n	8018d3e <GUI_SPRITE_SetPosition+0x21a>
 8018e12:	bf00      	nop
 8018e14:	20000308 	.word	0x20000308
 8018e18:	b025      	add	sp, #148	; 0x94
 8018e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e1e:	bf00      	nop

08018e20 <GUI_GetBitmapPixelIndexEx>:
 8018e20:	b510      	push	{r4, lr}
 8018e22:	2804      	cmp	r0, #4
 8018e24:	9c02      	ldr	r4, [sp, #8]
 8018e26:	d027      	beq.n	8018e78 <GUI_GetBitmapPixelIndexEx+0x58>
 8018e28:	dc10      	bgt.n	8018e4c <GUI_GetBitmapPixelIndexEx+0x2c>
 8018e2a:	2801      	cmp	r0, #1
 8018e2c:	d018      	beq.n	8018e60 <GUI_GetBitmapPixelIndexEx+0x40>
 8018e2e:	2802      	cmp	r0, #2
 8018e30:	d138      	bne.n	8018ea4 <GUI_GetBitmapPixelIndexEx+0x84>
 8018e32:	0898      	lsrs	r0, r3, #2
 8018e34:	fb01 2104 	mla	r1, r1, r4, r2
 8018e38:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8018e3c:	5c0a      	ldrb	r2, [r1, r0]
 8018e3e:	f003 0006 	and.w	r0, r3, #6
 8018e42:	fa22 f200 	lsr.w	r2, r2, r0
 8018e46:	f002 0003 	and.w	r0, r2, #3
 8018e4a:	bd10      	pop	{r4, pc}
 8018e4c:	2810      	cmp	r0, #16
 8018e4e:	d01d      	beq.n	8018e8c <GUI_GetBitmapPixelIndexEx+0x6c>
 8018e50:	2820      	cmp	r0, #32
 8018e52:	d021      	beq.n	8018e98 <GUI_GetBitmapPixelIndexEx+0x78>
 8018e54:	2808      	cmp	r0, #8
 8018e56:	d125      	bne.n	8018ea4 <GUI_GetBitmapPixelIndexEx+0x84>
 8018e58:	fb01 2104 	mla	r1, r1, r4, r2
 8018e5c:	5cc8      	ldrb	r0, [r1, r3]
 8018e5e:	bd10      	pop	{r4, pc}
 8018e60:	08d8      	lsrs	r0, r3, #3
 8018e62:	fb01 2104 	mla	r1, r1, r4, r2
 8018e66:	43db      	mvns	r3, r3
 8018e68:	5c0a      	ldrb	r2, [r1, r0]
 8018e6a:	f003 0007 	and.w	r0, r3, #7
 8018e6e:	fa22 f200 	lsr.w	r2, r2, r0
 8018e72:	f002 0001 	and.w	r0, r2, #1
 8018e76:	bd10      	pop	{r4, pc}
 8018e78:	0858      	lsrs	r0, r3, #1
 8018e7a:	fb01 2204 	mla	r2, r1, r4, r2
 8018e7e:	07db      	lsls	r3, r3, #31
 8018e80:	5c10      	ldrb	r0, [r2, r0]
 8018e82:	bf4c      	ite	mi
 8018e84:	f000 000f 	andmi.w	r0, r0, #15
 8018e88:	0900      	lsrpl	r0, r0, #4
 8018e8a:	bd10      	pop	{r4, pc}
 8018e8c:	1049      	asrs	r1, r1, #1
 8018e8e:	fb01 3004 	mla	r0, r1, r4, r3
 8018e92:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8018e96:	bd10      	pop	{r4, pc}
 8018e98:	1088      	asrs	r0, r1, #2
 8018e9a:	fb00 3304 	mla	r3, r0, r4, r3
 8018e9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018ea2:	bd10      	pop	{r4, pc}
 8018ea4:	2000      	movs	r0, #0
 8018ea6:	bd10      	pop	{r4, pc}

08018ea8 <GUI_GetBitmapPixelIndex>:
 8018ea8:	b513      	push	{r0, r1, r4, lr}
 8018eaa:	460b      	mov	r3, r1
 8018eac:	4604      	mov	r4, r0
 8018eae:	b130      	cbz	r0, 8018ebe <GUI_GetBitmapPixelIndex+0x16>
 8018eb0:	88c0      	ldrh	r0, [r0, #6]
 8018eb2:	88a1      	ldrh	r1, [r4, #4]
 8018eb4:	9200      	str	r2, [sp, #0]
 8018eb6:	68a2      	ldr	r2, [r4, #8]
 8018eb8:	f7ff ffb2 	bl	8018e20 <GUI_GetBitmapPixelIndexEx>
 8018ebc:	e7ff      	b.n	8018ebe <GUI_GetBitmapPixelIndex+0x16>
 8018ebe:	bd1c      	pop	{r2, r3, r4, pc}

08018ec0 <GUI_ClearRectEx>:
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018ec6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8018eca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8018ece:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018ed2:	f7fa bbcd 	b.w	8013670 <GUI_ClearRect>

08018ed6 <GUI_CalcColorDist>:
 8018ed6:	b2c2      	uxtb	r2, r0
 8018ed8:	b2cb      	uxtb	r3, r1
 8018eda:	b510      	push	{r4, lr}
 8018edc:	1ad4      	subs	r4, r2, r3
 8018ede:	b2a2      	uxth	r2, r4
 8018ee0:	b293      	uxth	r3, r2
 8018ee2:	041c      	lsls	r4, r3, #16
 8018ee4:	d501      	bpl.n	8018eea <GUI_CalcColorDist+0x14>
 8018ee6:	4253      	negs	r3, r2
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	fb03 f403 	mul.w	r4, r3, r3
 8018eee:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8018ef2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8018ef6:	1ad2      	subs	r2, r2, r3
 8018ef8:	b292      	uxth	r2, r2
 8018efa:	b293      	uxth	r3, r2
 8018efc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8018f00:	d001      	beq.n	8018f06 <GUI_CalcColorDist+0x30>
 8018f02:	4253      	negs	r3, r2
 8018f04:	b29b      	uxth	r3, r3
 8018f06:	0c09      	lsrs	r1, r1, #16
 8018f08:	ebc1 4010 	rsb	r0, r1, r0, lsr #16
 8018f0c:	b281      	uxth	r1, r0
 8018f0e:	b288      	uxth	r0, r1
 8018f10:	0402      	lsls	r2, r0, #16
 8018f12:	fb03 4303 	mla	r3, r3, r3, r4
 8018f16:	d501      	bpl.n	8018f1c <GUI_CalcColorDist+0x46>
 8018f18:	424a      	negs	r2, r1
 8018f1a:	b290      	uxth	r0, r2
 8018f1c:	fb00 3000 	mla	r0, r0, r0, r3
 8018f20:	bd10      	pop	{r4, pc}
	...

08018f24 <log>:
 8018f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f28:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8019018 <log+0xf4>
 8018f2c:	b08a      	sub	sp, #40	; 0x28
 8018f2e:	4606      	mov	r6, r0
 8018f30:	460f      	mov	r7, r1
 8018f32:	f000 f875 	bl	8019020 <__ieee754_log>
 8018f36:	f998 3000 	ldrsb.w	r3, [r8]
 8018f3a:	3301      	adds	r3, #1
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	460d      	mov	r5, r1
 8018f40:	d00b      	beq.n	8018f5a <log+0x36>
 8018f42:	4630      	mov	r0, r6
 8018f44:	4639      	mov	r1, r7
 8018f46:	f000 fa53 	bl	80193f0 <__fpclassifyd>
 8018f4a:	b130      	cbz	r0, 8018f5a <log+0x36>
 8018f4c:	4630      	mov	r0, r6
 8018f4e:	4639      	mov	r1, r7
 8018f50:	2200      	movs	r2, #0
 8018f52:	2300      	movs	r3, #0
 8018f54:	f7e7 fd60 	bl	8000a18 <__aeabi_dcmpgt>
 8018f58:	b120      	cbz	r0, 8018f64 <log+0x40>
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	4629      	mov	r1, r5
 8018f5e:	b00a      	add	sp, #40	; 0x28
 8018f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f64:	f898 4000 	ldrb.w	r4, [r8]
 8018f68:	4b27      	ldr	r3, [pc, #156]	; (8019008 <log+0xe4>)
 8018f6a:	9008      	str	r0, [sp, #32]
 8018f6c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018f70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018f74:	9301      	str	r3, [sp, #4]
 8018f76:	4630      	mov	r0, r6
 8018f78:	4639      	mov	r1, r7
 8018f7a:	b98c      	cbnz	r4, 8018fa0 <log+0x7c>
 8018f7c:	4d23      	ldr	r5, [pc, #140]	; (801900c <log+0xe8>)
 8018f7e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8018f82:	2200      	movs	r2, #0
 8018f84:	2300      	movs	r3, #0
 8018f86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018f8a:	f7e7 fd1d 	bl	80009c8 <__aeabi_dcmpeq>
 8018f8e:	2800      	cmp	r0, #0
 8018f90:	d131      	bne.n	8018ff6 <log+0xd2>
 8018f92:	2301      	movs	r3, #1
 8018f94:	9300      	str	r3, [sp, #0]
 8018f96:	4668      	mov	r0, sp
 8018f98:	f000 fa56 	bl	8019448 <matherr>
 8018f9c:	b988      	cbnz	r0, 8018fc2 <log+0x9e>
 8018f9e:	e00c      	b.n	8018fba <log+0x96>
 8018fa0:	4f1b      	ldr	r7, [pc, #108]	; (8019010 <log+0xec>)
 8018fa2:	2600      	movs	r6, #0
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018fac:	f7e7 fd0c 	bl	80009c8 <__aeabi_dcmpeq>
 8018fb0:	b998      	cbnz	r0, 8018fda <log+0xb6>
 8018fb2:	2301      	movs	r3, #1
 8018fb4:	2c02      	cmp	r4, #2
 8018fb6:	9300      	str	r3, [sp, #0]
 8018fb8:	d1ed      	bne.n	8018f96 <log+0x72>
 8018fba:	f000 fa6b 	bl	8019494 <__errno>
 8018fbe:	2321      	movs	r3, #33	; 0x21
 8018fc0:	6003      	str	r3, [r0, #0]
 8018fc2:	4814      	ldr	r0, [pc, #80]	; (8019014 <log+0xf0>)
 8018fc4:	f000 fa42 	bl	801944c <nan>
 8018fc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018fcc:	9b08      	ldr	r3, [sp, #32]
 8018fce:	b9ab      	cbnz	r3, 8018ffc <log+0xd8>
 8018fd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018fd4:	b00a      	add	sp, #40	; 0x28
 8018fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fda:	2302      	movs	r3, #2
 8018fdc:	429c      	cmp	r4, r3
 8018fde:	9300      	str	r3, [sp, #0]
 8018fe0:	d004      	beq.n	8018fec <log+0xc8>
 8018fe2:	4668      	mov	r0, sp
 8018fe4:	f000 fa30 	bl	8019448 <matherr>
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d1ef      	bne.n	8018fcc <log+0xa8>
 8018fec:	f000 fa52 	bl	8019494 <__errno>
 8018ff0:	2322      	movs	r3, #34	; 0x22
 8018ff2:	6003      	str	r3, [r0, #0]
 8018ff4:	e7ea      	b.n	8018fcc <log+0xa8>
 8018ff6:	2302      	movs	r3, #2
 8018ff8:	9300      	str	r3, [sp, #0]
 8018ffa:	e7f2      	b.n	8018fe2 <log+0xbe>
 8018ffc:	f000 fa4a 	bl	8019494 <__errno>
 8019000:	9b08      	ldr	r3, [sp, #32]
 8019002:	6003      	str	r3, [r0, #0]
 8019004:	e7e4      	b.n	8018fd0 <log+0xac>
 8019006:	bf00      	nop
 8019008:	080355ac 	.word	0x080355ac
 801900c:	c7efffff 	.word	0xc7efffff
 8019010:	fff00000 	.word	0xfff00000
 8019014:	080355bc 	.word	0x080355bc
 8019018:	2000036c 	.word	0x2000036c
 801901c:	00000000 	.word	0x00000000

08019020 <__ieee754_log>:
 8019020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019024:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8019028:	b085      	sub	sp, #20
 801902a:	4606      	mov	r6, r0
 801902c:	460f      	mov	r7, r1
 801902e:	460b      	mov	r3, r1
 8019030:	da5a      	bge.n	80190e8 <__ieee754_log+0xc8>
 8019032:	4602      	mov	r2, r0
 8019034:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8019038:	4322      	orrs	r2, r4
 801903a:	f000 80f6 	beq.w	801922a <__ieee754_log+0x20a>
 801903e:	2900      	cmp	r1, #0
 8019040:	f2c0 8172 	blt.w	8019328 <__ieee754_log+0x308>
 8019044:	2200      	movs	r2, #0
 8019046:	4bde      	ldr	r3, [pc, #888]	; (80193c0 <__ieee754_log+0x3a0>)
 8019048:	f7e7 fa56 	bl	80004f8 <__aeabi_dmul>
 801904c:	460b      	mov	r3, r1
 801904e:	460f      	mov	r7, r1
 8019050:	49dc      	ldr	r1, [pc, #880]	; (80193c4 <__ieee754_log+0x3a4>)
 8019052:	428b      	cmp	r3, r1
 8019054:	4606      	mov	r6, r0
 8019056:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801905a:	dc4a      	bgt.n	80190f2 <__ieee754_log+0xd2>
 801905c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8019060:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 8019064:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 8019068:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 801906c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 8019070:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8019074:	151b      	asrs	r3, r3, #20
 8019076:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801907a:	ea41 0705 	orr.w	r7, r1, r5
 801907e:	189c      	adds	r4, r3, r2
 8019080:	4630      	mov	r0, r6
 8019082:	2200      	movs	r2, #0
 8019084:	4bd0      	ldr	r3, [pc, #832]	; (80193c8 <__ieee754_log+0x3a8>)
 8019086:	4639      	mov	r1, r7
 8019088:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 801908c:	f7e7 f880 	bl	8000190 <__aeabi_dsub>
 8019090:	1cab      	adds	r3, r5, #2
 8019092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019096:	2b02      	cmp	r3, #2
 8019098:	4682      	mov	sl, r0
 801909a:	468b      	mov	fp, r1
 801909c:	f04f 0200 	mov.w	r2, #0
 80190a0:	dc30      	bgt.n	8019104 <__ieee754_log+0xe4>
 80190a2:	2300      	movs	r3, #0
 80190a4:	f7e7 fc90 	bl	80009c8 <__aeabi_dcmpeq>
 80190a8:	2800      	cmp	r0, #0
 80190aa:	f000 80c7 	beq.w	801923c <__ieee754_log+0x21c>
 80190ae:	2c00      	cmp	r4, #0
 80190b0:	f000 8143 	beq.w	801933a <__ieee754_log+0x31a>
 80190b4:	4620      	mov	r0, r4
 80190b6:	f7e7 f9b9 	bl	800042c <__aeabi_i2d>
 80190ba:	a3ad      	add	r3, pc, #692	; (adr r3, 8019370 <__ieee754_log+0x350>)
 80190bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190c0:	4606      	mov	r6, r0
 80190c2:	460f      	mov	r7, r1
 80190c4:	f7e7 fa18 	bl	80004f8 <__aeabi_dmul>
 80190c8:	a3ab      	add	r3, pc, #684	; (adr r3, 8019378 <__ieee754_log+0x358>)
 80190ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ce:	4604      	mov	r4, r0
 80190d0:	460d      	mov	r5, r1
 80190d2:	4630      	mov	r0, r6
 80190d4:	4639      	mov	r1, r7
 80190d6:	f7e7 fa0f 	bl	80004f8 <__aeabi_dmul>
 80190da:	4602      	mov	r2, r0
 80190dc:	460b      	mov	r3, r1
 80190de:	4620      	mov	r0, r4
 80190e0:	4629      	mov	r1, r5
 80190e2:	f7e7 f857 	bl	8000194 <__adddf3>
 80190e6:	e00a      	b.n	80190fe <__ieee754_log+0xde>
 80190e8:	49b6      	ldr	r1, [pc, #728]	; (80193c4 <__ieee754_log+0x3a4>)
 80190ea:	428b      	cmp	r3, r1
 80190ec:	f04f 0200 	mov.w	r2, #0
 80190f0:	ddb4      	ble.n	801905c <__ieee754_log+0x3c>
 80190f2:	4630      	mov	r0, r6
 80190f4:	4639      	mov	r1, r7
 80190f6:	4632      	mov	r2, r6
 80190f8:	463b      	mov	r3, r7
 80190fa:	f7e7 f84b 	bl	8000194 <__adddf3>
 80190fe:	b005      	add	sp, #20
 8019100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019108:	f7e7 f844 	bl	8000194 <__adddf3>
 801910c:	4602      	mov	r2, r0
 801910e:	460b      	mov	r3, r1
 8019110:	4650      	mov	r0, sl
 8019112:	4659      	mov	r1, fp
 8019114:	f7e7 fb1a 	bl	800074c <__aeabi_ddiv>
 8019118:	4606      	mov	r6, r0
 801911a:	460f      	mov	r7, r1
 801911c:	4620      	mov	r0, r4
 801911e:	e9cd 6700 	strd	r6, r7, [sp]
 8019122:	f7e7 f983 	bl	800042c <__aeabi_i2d>
 8019126:	4632      	mov	r2, r6
 8019128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801912c:	463b      	mov	r3, r7
 801912e:	4630      	mov	r0, r6
 8019130:	4639      	mov	r1, r7
 8019132:	f7e7 f9e1 	bl	80004f8 <__aeabi_dmul>
 8019136:	4602      	mov	r2, r0
 8019138:	460b      	mov	r3, r1
 801913a:	4680      	mov	r8, r0
 801913c:	4689      	mov	r9, r1
 801913e:	f7e7 f9db 	bl	80004f8 <__aeabi_dmul>
 8019142:	a38f      	add	r3, pc, #572	; (adr r3, 8019380 <__ieee754_log+0x360>)
 8019144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019148:	4606      	mov	r6, r0
 801914a:	460f      	mov	r7, r1
 801914c:	f7e7 f9d4 	bl	80004f8 <__aeabi_dmul>
 8019150:	a38d      	add	r3, pc, #564	; (adr r3, 8019388 <__ieee754_log+0x368>)
 8019152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019156:	f7e7 f81d 	bl	8000194 <__adddf3>
 801915a:	4632      	mov	r2, r6
 801915c:	463b      	mov	r3, r7
 801915e:	f7e7 f9cb 	bl	80004f8 <__aeabi_dmul>
 8019162:	a38b      	add	r3, pc, #556	; (adr r3, 8019390 <__ieee754_log+0x370>)
 8019164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019168:	f7e7 f814 	bl	8000194 <__adddf3>
 801916c:	4632      	mov	r2, r6
 801916e:	463b      	mov	r3, r7
 8019170:	f7e7 f9c2 	bl	80004f8 <__aeabi_dmul>
 8019174:	a388      	add	r3, pc, #544	; (adr r3, 8019398 <__ieee754_log+0x378>)
 8019176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917a:	f7e7 f80b 	bl	8000194 <__adddf3>
 801917e:	4642      	mov	r2, r8
 8019180:	464b      	mov	r3, r9
 8019182:	f7e7 f9b9 	bl	80004f8 <__aeabi_dmul>
 8019186:	a386      	add	r3, pc, #536	; (adr r3, 80193a0 <__ieee754_log+0x380>)
 8019188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801918c:	4680      	mov	r8, r0
 801918e:	4689      	mov	r9, r1
 8019190:	4630      	mov	r0, r6
 8019192:	4639      	mov	r1, r7
 8019194:	f7e7 f9b0 	bl	80004f8 <__aeabi_dmul>
 8019198:	a383      	add	r3, pc, #524	; (adr r3, 80193a8 <__ieee754_log+0x388>)
 801919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801919e:	f7e6 fff9 	bl	8000194 <__adddf3>
 80191a2:	4632      	mov	r2, r6
 80191a4:	463b      	mov	r3, r7
 80191a6:	f7e7 f9a7 	bl	80004f8 <__aeabi_dmul>
 80191aa:	a381      	add	r3, pc, #516	; (adr r3, 80193b0 <__ieee754_log+0x390>)
 80191ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b0:	f7e6 fff0 	bl	8000194 <__adddf3>
 80191b4:	4632      	mov	r2, r6
 80191b6:	463b      	mov	r3, r7
 80191b8:	f7e7 f99e 	bl	80004f8 <__aeabi_dmul>
 80191bc:	460b      	mov	r3, r1
 80191be:	4602      	mov	r2, r0
 80191c0:	4649      	mov	r1, r9
 80191c2:	4640      	mov	r0, r8
 80191c4:	f7e6 ffe6 	bl	8000194 <__adddf3>
 80191c8:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80191cc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80191d0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80191d4:	3551      	adds	r5, #81	; 0x51
 80191d6:	431d      	orrs	r5, r3
 80191d8:	2d00      	cmp	r5, #0
 80191da:	4606      	mov	r6, r0
 80191dc:	460f      	mov	r7, r1
 80191de:	dd53      	ble.n	8019288 <__ieee754_log+0x268>
 80191e0:	2200      	movs	r2, #0
 80191e2:	4b7a      	ldr	r3, [pc, #488]	; (80193cc <__ieee754_log+0x3ac>)
 80191e4:	4650      	mov	r0, sl
 80191e6:	4659      	mov	r1, fp
 80191e8:	f7e7 f986 	bl	80004f8 <__aeabi_dmul>
 80191ec:	4652      	mov	r2, sl
 80191ee:	465b      	mov	r3, fp
 80191f0:	f7e7 f982 	bl	80004f8 <__aeabi_dmul>
 80191f4:	4680      	mov	r8, r0
 80191f6:	4689      	mov	r9, r1
 80191f8:	2c00      	cmp	r4, #0
 80191fa:	d160      	bne.n	80192be <__ieee754_log+0x29e>
 80191fc:	4632      	mov	r2, r6
 80191fe:	463b      	mov	r3, r7
 8019200:	f7e6 ffc8 	bl	8000194 <__adddf3>
 8019204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019208:	f7e7 f976 	bl	80004f8 <__aeabi_dmul>
 801920c:	4602      	mov	r2, r0
 801920e:	460b      	mov	r3, r1
 8019210:	4640      	mov	r0, r8
 8019212:	4649      	mov	r1, r9
 8019214:	f7e6 ffbc 	bl	8000190 <__aeabi_dsub>
 8019218:	4602      	mov	r2, r0
 801921a:	460b      	mov	r3, r1
 801921c:	4650      	mov	r0, sl
 801921e:	4659      	mov	r1, fp
 8019220:	f7e6 ffb6 	bl	8000190 <__aeabi_dsub>
 8019224:	b005      	add	sp, #20
 8019226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922a:	2200      	movs	r2, #0
 801922c:	2300      	movs	r3, #0
 801922e:	2000      	movs	r0, #0
 8019230:	4967      	ldr	r1, [pc, #412]	; (80193d0 <__ieee754_log+0x3b0>)
 8019232:	f7e7 fa8b 	bl	800074c <__aeabi_ddiv>
 8019236:	b005      	add	sp, #20
 8019238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801923c:	4652      	mov	r2, sl
 801923e:	465b      	mov	r3, fp
 8019240:	4650      	mov	r0, sl
 8019242:	4659      	mov	r1, fp
 8019244:	f7e7 f958 	bl	80004f8 <__aeabi_dmul>
 8019248:	a35b      	add	r3, pc, #364	; (adr r3, 80193b8 <__ieee754_log+0x398>)
 801924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801924e:	4606      	mov	r6, r0
 8019250:	460f      	mov	r7, r1
 8019252:	4650      	mov	r0, sl
 8019254:	4659      	mov	r1, fp
 8019256:	f7e7 f94f 	bl	80004f8 <__aeabi_dmul>
 801925a:	4602      	mov	r2, r0
 801925c:	460b      	mov	r3, r1
 801925e:	2000      	movs	r0, #0
 8019260:	495a      	ldr	r1, [pc, #360]	; (80193cc <__ieee754_log+0x3ac>)
 8019262:	f7e6 ff95 	bl	8000190 <__aeabi_dsub>
 8019266:	4602      	mov	r2, r0
 8019268:	460b      	mov	r3, r1
 801926a:	4630      	mov	r0, r6
 801926c:	4639      	mov	r1, r7
 801926e:	f7e7 f943 	bl	80004f8 <__aeabi_dmul>
 8019272:	4606      	mov	r6, r0
 8019274:	460f      	mov	r7, r1
 8019276:	2c00      	cmp	r4, #0
 8019278:	d162      	bne.n	8019340 <__ieee754_log+0x320>
 801927a:	4650      	mov	r0, sl
 801927c:	4659      	mov	r1, fp
 801927e:	4632      	mov	r2, r6
 8019280:	463b      	mov	r3, r7
 8019282:	f7e6 ff85 	bl	8000190 <__aeabi_dsub>
 8019286:	e73a      	b.n	80190fe <__ieee754_log+0xde>
 8019288:	2c00      	cmp	r4, #0
 801928a:	f000 80a3 	beq.w	80193d4 <__ieee754_log+0x3b4>
 801928e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019292:	a337      	add	r3, pc, #220	; (adr r3, 8019370 <__ieee754_log+0x350>)
 8019294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019298:	4640      	mov	r0, r8
 801929a:	4649      	mov	r1, r9
 801929c:	f7e7 f92c 	bl	80004f8 <__aeabi_dmul>
 80192a0:	4632      	mov	r2, r6
 80192a2:	463b      	mov	r3, r7
 80192a4:	4604      	mov	r4, r0
 80192a6:	460d      	mov	r5, r1
 80192a8:	4650      	mov	r0, sl
 80192aa:	4659      	mov	r1, fp
 80192ac:	f7e6 ff70 	bl	8000190 <__aeabi_dsub>
 80192b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80192b4:	f7e7 f920 	bl	80004f8 <__aeabi_dmul>
 80192b8:	4606      	mov	r6, r0
 80192ba:	460f      	mov	r7, r1
 80192bc:	e04c      	b.n	8019358 <__ieee754_log+0x338>
 80192be:	a32c      	add	r3, pc, #176	; (adr r3, 8019370 <__ieee754_log+0x350>)
 80192c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192c8:	f7e7 f916 	bl	80004f8 <__aeabi_dmul>
 80192cc:	4632      	mov	r2, r6
 80192ce:	463b      	mov	r3, r7
 80192d0:	4604      	mov	r4, r0
 80192d2:	460d      	mov	r5, r1
 80192d4:	4640      	mov	r0, r8
 80192d6:	4649      	mov	r1, r9
 80192d8:	f7e6 ff5c 	bl	8000194 <__adddf3>
 80192dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80192e0:	f7e7 f90a 	bl	80004f8 <__aeabi_dmul>
 80192e4:	a324      	add	r3, pc, #144	; (adr r3, 8019378 <__ieee754_log+0x358>)
 80192e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ea:	4606      	mov	r6, r0
 80192ec:	460f      	mov	r7, r1
 80192ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192f2:	f7e7 f901 	bl	80004f8 <__aeabi_dmul>
 80192f6:	4602      	mov	r2, r0
 80192f8:	460b      	mov	r3, r1
 80192fa:	4630      	mov	r0, r6
 80192fc:	4639      	mov	r1, r7
 80192fe:	f7e6 ff49 	bl	8000194 <__adddf3>
 8019302:	4602      	mov	r2, r0
 8019304:	460b      	mov	r3, r1
 8019306:	4640      	mov	r0, r8
 8019308:	4649      	mov	r1, r9
 801930a:	f7e6 ff41 	bl	8000190 <__aeabi_dsub>
 801930e:	4652      	mov	r2, sl
 8019310:	465b      	mov	r3, fp
 8019312:	f7e6 ff3d 	bl	8000190 <__aeabi_dsub>
 8019316:	4602      	mov	r2, r0
 8019318:	460b      	mov	r3, r1
 801931a:	4620      	mov	r0, r4
 801931c:	4629      	mov	r1, r5
 801931e:	f7e6 ff37 	bl	8000190 <__aeabi_dsub>
 8019322:	b005      	add	sp, #20
 8019324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019328:	4602      	mov	r2, r0
 801932a:	460b      	mov	r3, r1
 801932c:	f7e6 ff30 	bl	8000190 <__aeabi_dsub>
 8019330:	2200      	movs	r2, #0
 8019332:	2300      	movs	r3, #0
 8019334:	f7e7 fa0a 	bl	800074c <__aeabi_ddiv>
 8019338:	e6e1      	b.n	80190fe <__ieee754_log+0xde>
 801933a:	2000      	movs	r0, #0
 801933c:	2100      	movs	r1, #0
 801933e:	e6de      	b.n	80190fe <__ieee754_log+0xde>
 8019340:	4620      	mov	r0, r4
 8019342:	f7e7 f873 	bl	800042c <__aeabi_i2d>
 8019346:	a30a      	add	r3, pc, #40	; (adr r3, 8019370 <__ieee754_log+0x350>)
 8019348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934c:	4680      	mov	r8, r0
 801934e:	4689      	mov	r9, r1
 8019350:	f7e7 f8d2 	bl	80004f8 <__aeabi_dmul>
 8019354:	4604      	mov	r4, r0
 8019356:	460d      	mov	r5, r1
 8019358:	a307      	add	r3, pc, #28	; (adr r3, 8019378 <__ieee754_log+0x358>)
 801935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801935e:	4640      	mov	r0, r8
 8019360:	4649      	mov	r1, r9
 8019362:	f7e7 f8c9 	bl	80004f8 <__aeabi_dmul>
 8019366:	4602      	mov	r2, r0
 8019368:	460b      	mov	r3, r1
 801936a:	4630      	mov	r0, r6
 801936c:	4639      	mov	r1, r7
 801936e:	e7cc      	b.n	801930a <__ieee754_log+0x2ea>
 8019370:	fee00000 	.word	0xfee00000
 8019374:	3fe62e42 	.word	0x3fe62e42
 8019378:	35793c76 	.word	0x35793c76
 801937c:	3dea39ef 	.word	0x3dea39ef
 8019380:	df3e5244 	.word	0xdf3e5244
 8019384:	3fc2f112 	.word	0x3fc2f112
 8019388:	96cb03de 	.word	0x96cb03de
 801938c:	3fc74664 	.word	0x3fc74664
 8019390:	94229359 	.word	0x94229359
 8019394:	3fd24924 	.word	0x3fd24924
 8019398:	55555593 	.word	0x55555593
 801939c:	3fe55555 	.word	0x3fe55555
 80193a0:	d078c69f 	.word	0xd078c69f
 80193a4:	3fc39a09 	.word	0x3fc39a09
 80193a8:	1d8e78af 	.word	0x1d8e78af
 80193ac:	3fcc71c5 	.word	0x3fcc71c5
 80193b0:	9997fa04 	.word	0x9997fa04
 80193b4:	3fd99999 	.word	0x3fd99999
 80193b8:	55555555 	.word	0x55555555
 80193bc:	3fd55555 	.word	0x3fd55555
 80193c0:	43500000 	.word	0x43500000
 80193c4:	7fefffff 	.word	0x7fefffff
 80193c8:	3ff00000 	.word	0x3ff00000
 80193cc:	3fe00000 	.word	0x3fe00000
 80193d0:	c3500000 	.word	0xc3500000
 80193d4:	4602      	mov	r2, r0
 80193d6:	460b      	mov	r3, r1
 80193d8:	4650      	mov	r0, sl
 80193da:	4659      	mov	r1, fp
 80193dc:	f7e6 fed8 	bl	8000190 <__aeabi_dsub>
 80193e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80193e4:	f7e7 f888 	bl	80004f8 <__aeabi_dmul>
 80193e8:	e716      	b.n	8019218 <__ieee754_log+0x1f8>
 80193ea:	bf00      	nop
 80193ec:	f3af 8000 	nop.w

080193f0 <__fpclassifyd>:
 80193f0:	b410      	push	{r4}
 80193f2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80193f6:	d008      	beq.n	801940a <__fpclassifyd+0x1a>
 80193f8:	4b11      	ldr	r3, [pc, #68]	; (8019440 <__fpclassifyd+0x50>)
 80193fa:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80193fe:	429a      	cmp	r2, r3
 8019400:	d808      	bhi.n	8019414 <__fpclassifyd+0x24>
 8019402:	2004      	movs	r0, #4
 8019404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019408:	4770      	bx	lr
 801940a:	b918      	cbnz	r0, 8019414 <__fpclassifyd+0x24>
 801940c:	2002      	movs	r0, #2
 801940e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019412:	4770      	bx	lr
 8019414:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 8019418:	4b09      	ldr	r3, [pc, #36]	; (8019440 <__fpclassifyd+0x50>)
 801941a:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 801941e:	4299      	cmp	r1, r3
 8019420:	d9ef      	bls.n	8019402 <__fpclassifyd+0x12>
 8019422:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019426:	d201      	bcs.n	801942c <__fpclassifyd+0x3c>
 8019428:	2003      	movs	r0, #3
 801942a:	e7eb      	b.n	8019404 <__fpclassifyd+0x14>
 801942c:	4b05      	ldr	r3, [pc, #20]	; (8019444 <__fpclassifyd+0x54>)
 801942e:	429c      	cmp	r4, r3
 8019430:	d001      	beq.n	8019436 <__fpclassifyd+0x46>
 8019432:	2000      	movs	r0, #0
 8019434:	e7e6      	b.n	8019404 <__fpclassifyd+0x14>
 8019436:	fab0 f080 	clz	r0, r0
 801943a:	0940      	lsrs	r0, r0, #5
 801943c:	e7e2      	b.n	8019404 <__fpclassifyd+0x14>
 801943e:	bf00      	nop
 8019440:	7fdfffff 	.word	0x7fdfffff
 8019444:	7ff00000 	.word	0x7ff00000

08019448 <matherr>:
 8019448:	2000      	movs	r0, #0
 801944a:	4770      	bx	lr

0801944c <nan>:
 801944c:	2000      	movs	r0, #0
 801944e:	4901      	ldr	r1, [pc, #4]	; (8019454 <nan+0x8>)
 8019450:	4770      	bx	lr
 8019452:	bf00      	nop
 8019454:	7ff80000 	.word	0x7ff80000

08019458 <__assert_func>:
 8019458:	b500      	push	{lr}
 801945a:	4c0a      	ldr	r4, [pc, #40]	; (8019484 <__assert_func+0x2c>)
 801945c:	6824      	ldr	r4, [r4, #0]
 801945e:	4605      	mov	r5, r0
 8019460:	b085      	sub	sp, #20
 8019462:	68e0      	ldr	r0, [r4, #12]
 8019464:	b152      	cbz	r2, 801947c <__assert_func+0x24>
 8019466:	4c08      	ldr	r4, [pc, #32]	; (8019488 <__assert_func+0x30>)
 8019468:	9202      	str	r2, [sp, #8]
 801946a:	e88d 0012 	stmia.w	sp, {r1, r4}
 801946e:	461a      	mov	r2, r3
 8019470:	4906      	ldr	r1, [pc, #24]	; (801948c <__assert_func+0x34>)
 8019472:	462b      	mov	r3, r5
 8019474:	f000 f814 	bl	80194a0 <fiprintf>
 8019478:	f003 fd68 	bl	801cf4c <abort>
 801947c:	4c04      	ldr	r4, [pc, #16]	; (8019490 <__assert_func+0x38>)
 801947e:	4622      	mov	r2, r4
 8019480:	e7f2      	b.n	8019468 <__assert_func+0x10>
 8019482:	bf00      	nop
 8019484:	20000798 	.word	0x20000798
 8019488:	080355b0 	.word	0x080355b0
 801948c:	080355c0 	.word	0x080355c0
 8019490:	080355bc 	.word	0x080355bc

08019494 <__errno>:
 8019494:	4b01      	ldr	r3, [pc, #4]	; (801949c <__errno+0x8>)
 8019496:	6818      	ldr	r0, [r3, #0]
 8019498:	4770      	bx	lr
 801949a:	bf00      	nop
 801949c:	20000798 	.word	0x20000798

080194a0 <fiprintf>:
 80194a0:	b40e      	push	{r1, r2, r3}
 80194a2:	b510      	push	{r4, lr}
 80194a4:	b083      	sub	sp, #12
 80194a6:	ab05      	add	r3, sp, #20
 80194a8:	4c06      	ldr	r4, [pc, #24]	; (80194c4 <fiprintf+0x24>)
 80194aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ae:	9301      	str	r3, [sp, #4]
 80194b0:	4601      	mov	r1, r0
 80194b2:	6820      	ldr	r0, [r4, #0]
 80194b4:	f001 fc7a 	bl	801adac <_vfiprintf_r>
 80194b8:	b003      	add	sp, #12
 80194ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194be:	b003      	add	sp, #12
 80194c0:	4770      	bx	lr
 80194c2:	bf00      	nop
 80194c4:	20000798 	.word	0x20000798

080194c8 <memcmp>:
 80194c8:	2a03      	cmp	r2, #3
 80194ca:	b470      	push	{r4, r5, r6}
 80194cc:	d926      	bls.n	801951c <memcmp+0x54>
 80194ce:	ea40 0301 	orr.w	r3, r0, r1
 80194d2:	079b      	lsls	r3, r3, #30
 80194d4:	d011      	beq.n	80194fa <memcmp+0x32>
 80194d6:	7804      	ldrb	r4, [r0, #0]
 80194d8:	780d      	ldrb	r5, [r1, #0]
 80194da:	42ac      	cmp	r4, r5
 80194dc:	d122      	bne.n	8019524 <memcmp+0x5c>
 80194de:	4402      	add	r2, r0
 80194e0:	1c43      	adds	r3, r0, #1
 80194e2:	e005      	b.n	80194f0 <memcmp+0x28>
 80194e4:	f813 4b01 	ldrb.w	r4, [r3], #1
 80194e8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80194ec:	42ac      	cmp	r4, r5
 80194ee:	d119      	bne.n	8019524 <memcmp+0x5c>
 80194f0:	4293      	cmp	r3, r2
 80194f2:	d1f7      	bne.n	80194e4 <memcmp+0x1c>
 80194f4:	2000      	movs	r0, #0
 80194f6:	bc70      	pop	{r4, r5, r6}
 80194f8:	4770      	bx	lr
 80194fa:	460c      	mov	r4, r1
 80194fc:	4603      	mov	r3, r0
 80194fe:	681e      	ldr	r6, [r3, #0]
 8019500:	6825      	ldr	r5, [r4, #0]
 8019502:	42ae      	cmp	r6, r5
 8019504:	4618      	mov	r0, r3
 8019506:	4621      	mov	r1, r4
 8019508:	f103 0304 	add.w	r3, r3, #4
 801950c:	f104 0404 	add.w	r4, r4, #4
 8019510:	d104      	bne.n	801951c <memcmp+0x54>
 8019512:	3a04      	subs	r2, #4
 8019514:	2a03      	cmp	r2, #3
 8019516:	4618      	mov	r0, r3
 8019518:	4621      	mov	r1, r4
 801951a:	d8f0      	bhi.n	80194fe <memcmp+0x36>
 801951c:	2a00      	cmp	r2, #0
 801951e:	d1da      	bne.n	80194d6 <memcmp+0xe>
 8019520:	4610      	mov	r0, r2
 8019522:	e7e8      	b.n	80194f6 <memcmp+0x2e>
 8019524:	1b60      	subs	r0, r4, r5
 8019526:	bc70      	pop	{r4, r5, r6}
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop

0801952c <memmove>:
 801952c:	4288      	cmp	r0, r1
 801952e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019530:	d90d      	bls.n	801954e <memmove+0x22>
 8019532:	188b      	adds	r3, r1, r2
 8019534:	4298      	cmp	r0, r3
 8019536:	d20a      	bcs.n	801954e <memmove+0x22>
 8019538:	1881      	adds	r1, r0, r2
 801953a:	2a00      	cmp	r2, #0
 801953c:	d054      	beq.n	80195e8 <memmove+0xbc>
 801953e:	1a9a      	subs	r2, r3, r2
 8019540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019544:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019548:	4293      	cmp	r3, r2
 801954a:	d1f9      	bne.n	8019540 <memmove+0x14>
 801954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801954e:	2a0f      	cmp	r2, #15
 8019550:	d948      	bls.n	80195e4 <memmove+0xb8>
 8019552:	ea40 0301 	orr.w	r3, r0, r1
 8019556:	079b      	lsls	r3, r3, #30
 8019558:	d147      	bne.n	80195ea <memmove+0xbe>
 801955a:	f100 0410 	add.w	r4, r0, #16
 801955e:	f101 0310 	add.w	r3, r1, #16
 8019562:	4615      	mov	r5, r2
 8019564:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8019568:	f844 6c10 	str.w	r6, [r4, #-16]
 801956c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8019570:	f844 6c0c 	str.w	r6, [r4, #-12]
 8019574:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8019578:	f844 6c08 	str.w	r6, [r4, #-8]
 801957c:	3d10      	subs	r5, #16
 801957e:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8019582:	f844 6c04 	str.w	r6, [r4, #-4]
 8019586:	2d0f      	cmp	r5, #15
 8019588:	f103 0310 	add.w	r3, r3, #16
 801958c:	f104 0410 	add.w	r4, r4, #16
 8019590:	d8e8      	bhi.n	8019564 <memmove+0x38>
 8019592:	f1a2 0310 	sub.w	r3, r2, #16
 8019596:	f023 030f 	bic.w	r3, r3, #15
 801959a:	f002 0e0f 	and.w	lr, r2, #15
 801959e:	3310      	adds	r3, #16
 80195a0:	f1be 0f03 	cmp.w	lr, #3
 80195a4:	4419      	add	r1, r3
 80195a6:	4403      	add	r3, r0
 80195a8:	d921      	bls.n	80195ee <memmove+0xc2>
 80195aa:	1f1e      	subs	r6, r3, #4
 80195ac:	460d      	mov	r5, r1
 80195ae:	4674      	mov	r4, lr
 80195b0:	3c04      	subs	r4, #4
 80195b2:	f855 7b04 	ldr.w	r7, [r5], #4
 80195b6:	f846 7f04 	str.w	r7, [r6, #4]!
 80195ba:	2c03      	cmp	r4, #3
 80195bc:	d8f8      	bhi.n	80195b0 <memmove+0x84>
 80195be:	f1ae 0404 	sub.w	r4, lr, #4
 80195c2:	f024 0403 	bic.w	r4, r4, #3
 80195c6:	3404      	adds	r4, #4
 80195c8:	4423      	add	r3, r4
 80195ca:	4421      	add	r1, r4
 80195cc:	f002 0203 	and.w	r2, r2, #3
 80195d0:	b152      	cbz	r2, 80195e8 <memmove+0xbc>
 80195d2:	3b01      	subs	r3, #1
 80195d4:	440a      	add	r2, r1
 80195d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80195da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80195de:	4291      	cmp	r1, r2
 80195e0:	d1f9      	bne.n	80195d6 <memmove+0xaa>
 80195e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195e4:	4603      	mov	r3, r0
 80195e6:	e7f3      	b.n	80195d0 <memmove+0xa4>
 80195e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195ea:	4603      	mov	r3, r0
 80195ec:	e7f1      	b.n	80195d2 <memmove+0xa6>
 80195ee:	4672      	mov	r2, lr
 80195f0:	e7ee      	b.n	80195d0 <memmove+0xa4>
 80195f2:	bf00      	nop

080195f4 <memset>:
 80195f4:	b470      	push	{r4, r5, r6}
 80195f6:	0784      	lsls	r4, r0, #30
 80195f8:	d046      	beq.n	8019688 <memset+0x94>
 80195fa:	1e54      	subs	r4, r2, #1
 80195fc:	2a00      	cmp	r2, #0
 80195fe:	d041      	beq.n	8019684 <memset+0x90>
 8019600:	b2cd      	uxtb	r5, r1
 8019602:	4603      	mov	r3, r0
 8019604:	e002      	b.n	801960c <memset+0x18>
 8019606:	1e62      	subs	r2, r4, #1
 8019608:	b3e4      	cbz	r4, 8019684 <memset+0x90>
 801960a:	4614      	mov	r4, r2
 801960c:	f803 5b01 	strb.w	r5, [r3], #1
 8019610:	079a      	lsls	r2, r3, #30
 8019612:	d1f8      	bne.n	8019606 <memset+0x12>
 8019614:	2c03      	cmp	r4, #3
 8019616:	d92e      	bls.n	8019676 <memset+0x82>
 8019618:	b2cd      	uxtb	r5, r1
 801961a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 801961e:	2c0f      	cmp	r4, #15
 8019620:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8019624:	d919      	bls.n	801965a <memset+0x66>
 8019626:	f103 0210 	add.w	r2, r3, #16
 801962a:	4626      	mov	r6, r4
 801962c:	3e10      	subs	r6, #16
 801962e:	2e0f      	cmp	r6, #15
 8019630:	f842 5c10 	str.w	r5, [r2, #-16]
 8019634:	f842 5c0c 	str.w	r5, [r2, #-12]
 8019638:	f842 5c08 	str.w	r5, [r2, #-8]
 801963c:	f842 5c04 	str.w	r5, [r2, #-4]
 8019640:	f102 0210 	add.w	r2, r2, #16
 8019644:	d8f2      	bhi.n	801962c <memset+0x38>
 8019646:	f1a4 0210 	sub.w	r2, r4, #16
 801964a:	f022 020f 	bic.w	r2, r2, #15
 801964e:	f004 040f 	and.w	r4, r4, #15
 8019652:	3210      	adds	r2, #16
 8019654:	2c03      	cmp	r4, #3
 8019656:	4413      	add	r3, r2
 8019658:	d90d      	bls.n	8019676 <memset+0x82>
 801965a:	461e      	mov	r6, r3
 801965c:	4622      	mov	r2, r4
 801965e:	3a04      	subs	r2, #4
 8019660:	2a03      	cmp	r2, #3
 8019662:	f846 5b04 	str.w	r5, [r6], #4
 8019666:	d8fa      	bhi.n	801965e <memset+0x6a>
 8019668:	1f22      	subs	r2, r4, #4
 801966a:	f022 0203 	bic.w	r2, r2, #3
 801966e:	3204      	adds	r2, #4
 8019670:	4413      	add	r3, r2
 8019672:	f004 0403 	and.w	r4, r4, #3
 8019676:	b12c      	cbz	r4, 8019684 <memset+0x90>
 8019678:	b2c9      	uxtb	r1, r1
 801967a:	441c      	add	r4, r3
 801967c:	f803 1b01 	strb.w	r1, [r3], #1
 8019680:	42a3      	cmp	r3, r4
 8019682:	d1fb      	bne.n	801967c <memset+0x88>
 8019684:	bc70      	pop	{r4, r5, r6}
 8019686:	4770      	bx	lr
 8019688:	4614      	mov	r4, r2
 801968a:	4603      	mov	r3, r0
 801968c:	e7c2      	b.n	8019614 <memset+0x20>
 801968e:	bf00      	nop

08019690 <printf>:
 8019690:	b40f      	push	{r0, r1, r2, r3}
 8019692:	b500      	push	{lr}
 8019694:	4907      	ldr	r1, [pc, #28]	; (80196b4 <printf+0x24>)
 8019696:	b083      	sub	sp, #12
 8019698:	ab04      	add	r3, sp, #16
 801969a:	6808      	ldr	r0, [r1, #0]
 801969c:	f853 2b04 	ldr.w	r2, [r3], #4
 80196a0:	6881      	ldr	r1, [r0, #8]
 80196a2:	9301      	str	r3, [sp, #4]
 80196a4:	f002 f9c0 	bl	801ba28 <_vfprintf_r>
 80196a8:	b003      	add	sp, #12
 80196aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80196ae:	b004      	add	sp, #16
 80196b0:	4770      	bx	lr
 80196b2:	bf00      	nop
 80196b4:	20000798 	.word	0x20000798

080196b8 <_puts_r>:
 80196b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196ba:	4604      	mov	r4, r0
 80196bc:	b089      	sub	sp, #36	; 0x24
 80196be:	4608      	mov	r0, r1
 80196c0:	460d      	mov	r5, r1
 80196c2:	f000 f8b3 	bl	801982c <strlen>
 80196c6:	68a3      	ldr	r3, [r4, #8]
 80196c8:	4f11      	ldr	r7, [pc, #68]	; (8019710 <_puts_r+0x58>)
 80196ca:	899a      	ldrh	r2, [r3, #12]
 80196cc:	9504      	str	r5, [sp, #16]
 80196ce:	2102      	movs	r1, #2
 80196d0:	f100 0e01 	add.w	lr, r0, #1
 80196d4:	2601      	movs	r6, #1
 80196d6:	ad04      	add	r5, sp, #16
 80196d8:	9102      	str	r1, [sp, #8]
 80196da:	0491      	lsls	r1, r2, #18
 80196dc:	9005      	str	r0, [sp, #20]
 80196de:	f8cd e00c 	str.w	lr, [sp, #12]
 80196e2:	9706      	str	r7, [sp, #24]
 80196e4:	9607      	str	r6, [sp, #28]
 80196e6:	9501      	str	r5, [sp, #4]
 80196e8:	d406      	bmi.n	80196f8 <_puts_r+0x40>
 80196ea:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80196ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80196f0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80196f4:	819a      	strh	r2, [r3, #12]
 80196f6:	6659      	str	r1, [r3, #100]	; 0x64
 80196f8:	4620      	mov	r0, r4
 80196fa:	4619      	mov	r1, r3
 80196fc:	aa01      	add	r2, sp, #4
 80196fe:	f004 fedf 	bl	801e4c0 <__sfvwrite_r>
 8019702:	2800      	cmp	r0, #0
 8019704:	bf14      	ite	ne
 8019706:	f04f 30ff 	movne.w	r0, #4294967295
 801970a:	200a      	moveq	r0, #10
 801970c:	b009      	add	sp, #36	; 0x24
 801970e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019710:	080355f4 	.word	0x080355f4

08019714 <puts>:
 8019714:	4b02      	ldr	r3, [pc, #8]	; (8019720 <puts+0xc>)
 8019716:	4601      	mov	r1, r0
 8019718:	6818      	ldr	r0, [r3, #0]
 801971a:	f7ff bfcd 	b.w	80196b8 <_puts_r>
 801971e:	bf00      	nop
 8019720:	20000798 	.word	0x20000798

08019724 <sprintf>:
 8019724:	b40e      	push	{r1, r2, r3}
 8019726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019728:	b09c      	sub	sp, #112	; 0x70
 801972a:	ab21      	add	r3, sp, #132	; 0x84
 801972c:	490f      	ldr	r1, [pc, #60]	; (801976c <sprintf+0x48>)
 801972e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019732:	9301      	str	r3, [sp, #4]
 8019734:	4605      	mov	r5, r0
 8019736:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801973a:	6808      	ldr	r0, [r1, #0]
 801973c:	9502      	str	r5, [sp, #8]
 801973e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8019742:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019746:	a902      	add	r1, sp, #8
 8019748:	9506      	str	r5, [sp, #24]
 801974a:	f8ad 7014 	strh.w	r7, [sp, #20]
 801974e:	9404      	str	r4, [sp, #16]
 8019750:	9407      	str	r4, [sp, #28]
 8019752:	f8ad 6016 	strh.w	r6, [sp, #22]
 8019756:	f000 f897 	bl	8019888 <_svfprintf_r>
 801975a:	9b02      	ldr	r3, [sp, #8]
 801975c:	2200      	movs	r2, #0
 801975e:	701a      	strb	r2, [r3, #0]
 8019760:	b01c      	add	sp, #112	; 0x70
 8019762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019766:	b003      	add	sp, #12
 8019768:	4770      	bx	lr
 801976a:	bf00      	nop
 801976c:	20000798 	.word	0x20000798

08019770 <strcpy>:
 8019770:	ea80 0201 	eor.w	r2, r0, r1
 8019774:	4684      	mov	ip, r0
 8019776:	f012 0f03 	tst.w	r2, #3
 801977a:	d14f      	bne.n	801981c <strcpy+0xac>
 801977c:	f011 0f03 	tst.w	r1, #3
 8019780:	d132      	bne.n	80197e8 <strcpy+0x78>
 8019782:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8019786:	f011 0f04 	tst.w	r1, #4
 801978a:	f851 3b04 	ldr.w	r3, [r1], #4
 801978e:	d00b      	beq.n	80197a8 <strcpy+0x38>
 8019790:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8019794:	439a      	bics	r2, r3
 8019796:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801979a:	bf04      	itt	eq
 801979c:	f84c 3b04 	streq.w	r3, [ip], #4
 80197a0:	f851 3b04 	ldreq.w	r3, [r1], #4
 80197a4:	d116      	bne.n	80197d4 <strcpy+0x64>
 80197a6:	bf00      	nop
 80197a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80197ac:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80197b0:	439a      	bics	r2, r3
 80197b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80197b6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80197ba:	d10b      	bne.n	80197d4 <strcpy+0x64>
 80197bc:	f84c 3b04 	str.w	r3, [ip], #4
 80197c0:	43a2      	bics	r2, r4
 80197c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80197c6:	bf04      	itt	eq
 80197c8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80197cc:	f84c 4b04 	streq.w	r4, [ip], #4
 80197d0:	d0ea      	beq.n	80197a8 <strcpy+0x38>
 80197d2:	4623      	mov	r3, r4
 80197d4:	f80c 3b01 	strb.w	r3, [ip], #1
 80197d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80197dc:	ea4f 2333 	mov.w	r3, r3, ror #8
 80197e0:	d1f8      	bne.n	80197d4 <strcpy+0x64>
 80197e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197e6:	4770      	bx	lr
 80197e8:	f011 0f01 	tst.w	r1, #1
 80197ec:	d006      	beq.n	80197fc <strcpy+0x8c>
 80197ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197f2:	f80c 2b01 	strb.w	r2, [ip], #1
 80197f6:	2a00      	cmp	r2, #0
 80197f8:	bf08      	it	eq
 80197fa:	4770      	bxeq	lr
 80197fc:	f011 0f02 	tst.w	r1, #2
 8019800:	d0bf      	beq.n	8019782 <strcpy+0x12>
 8019802:	f831 2b02 	ldrh.w	r2, [r1], #2
 8019806:	f012 0fff 	tst.w	r2, #255	; 0xff
 801980a:	bf16      	itet	ne
 801980c:	f82c 2b02 	strhne.w	r2, [ip], #2
 8019810:	f88c 2000 	strbeq.w	r2, [ip]
 8019814:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8019818:	d1b3      	bne.n	8019782 <strcpy+0x12>
 801981a:	4770      	bx	lr
 801981c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019820:	f80c 2b01 	strb.w	r2, [ip], #1
 8019824:	2a00      	cmp	r2, #0
 8019826:	d1f9      	bne.n	801981c <strcpy+0xac>
 8019828:	4770      	bx	lr
 801982a:	bf00      	nop

0801982c <strlen>:
 801982c:	f020 0103 	bic.w	r1, r0, #3
 8019830:	f010 0003 	ands.w	r0, r0, #3
 8019834:	f1c0 0000 	rsb	r0, r0, #0
 8019838:	f851 3b04 	ldr.w	r3, [r1], #4
 801983c:	f100 0c04 	add.w	ip, r0, #4
 8019840:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019844:	f06f 0200 	mvn.w	r2, #0
 8019848:	bf1c      	itt	ne
 801984a:	fa22 f20c 	lsrne.w	r2, r2, ip
 801984e:	4313      	orrne	r3, r2
 8019850:	f04f 0c01 	mov.w	ip, #1
 8019854:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8019858:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 801985c:	eba3 020c 	sub.w	r2, r3, ip
 8019860:	ea22 0203 	bic.w	r2, r2, r3
 8019864:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8019868:	bf04      	itt	eq
 801986a:	f851 3b04 	ldreq.w	r3, [r1], #4
 801986e:	3004      	addeq	r0, #4
 8019870:	d0f4      	beq.n	801985c <strlen+0x30>
 8019872:	f1c2 0100 	rsb	r1, r2, #0
 8019876:	ea02 0201 	and.w	r2, r2, r1
 801987a:	fab2 f282 	clz	r2, r2
 801987e:	f1c2 021f 	rsb	r2, r2, #31
 8019882:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8019886:	4770      	bx	lr

08019888 <_svfprintf_r>:
 8019888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801988c:	b0c1      	sub	sp, #260	; 0x104
 801988e:	4689      	mov	r9, r1
 8019890:	920a      	str	r2, [sp, #40]	; 0x28
 8019892:	930e      	str	r3, [sp, #56]	; 0x38
 8019894:	9008      	str	r0, [sp, #32]
 8019896:	f004 ffd3 	bl	801e840 <_localeconv_r>
 801989a:	6803      	ldr	r3, [r0, #0]
 801989c:	9317      	str	r3, [sp, #92]	; 0x5c
 801989e:	4618      	mov	r0, r3
 80198a0:	f7ff ffc4 	bl	801982c <strlen>
 80198a4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80198a8:	9018      	str	r0, [sp, #96]	; 0x60
 80198aa:	061a      	lsls	r2, r3, #24
 80198ac:	d504      	bpl.n	80198b8 <_svfprintf_r+0x30>
 80198ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	f001 808c 	beq.w	801a9d0 <_svfprintf_r+0x1148>
 80198b8:	2300      	movs	r3, #0
 80198ba:	af30      	add	r7, sp, #192	; 0xc0
 80198bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80198be:	9325      	str	r3, [sp, #148]	; 0x94
 80198c0:	9324      	str	r3, [sp, #144]	; 0x90
 80198c2:	9316      	str	r3, [sp, #88]	; 0x58
 80198c4:	9319      	str	r3, [sp, #100]	; 0x64
 80198c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80198c8:	9723      	str	r7, [sp, #140]	; 0x8c
 80198ca:	9314      	str	r3, [sp, #80]	; 0x50
 80198cc:	9315      	str	r3, [sp, #84]	; 0x54
 80198ce:	463c      	mov	r4, r7
 80198d0:	464e      	mov	r6, r9
 80198d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80198d4:	782b      	ldrb	r3, [r5, #0]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	f000 80a9 	beq.w	8019a2e <_svfprintf_r+0x1a6>
 80198dc:	2b25      	cmp	r3, #37	; 0x25
 80198de:	d102      	bne.n	80198e6 <_svfprintf_r+0x5e>
 80198e0:	e0a5      	b.n	8019a2e <_svfprintf_r+0x1a6>
 80198e2:	2b25      	cmp	r3, #37	; 0x25
 80198e4:	d003      	beq.n	80198ee <_svfprintf_r+0x66>
 80198e6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d1f9      	bne.n	80198e2 <_svfprintf_r+0x5a>
 80198ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198f0:	1aeb      	subs	r3, r5, r3
 80198f2:	b173      	cbz	r3, 8019912 <_svfprintf_r+0x8a>
 80198f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80198f6:	9925      	ldr	r1, [sp, #148]	; 0x94
 80198f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80198fa:	6020      	str	r0, [r4, #0]
 80198fc:	3201      	adds	r2, #1
 80198fe:	4419      	add	r1, r3
 8019900:	2a07      	cmp	r2, #7
 8019902:	6063      	str	r3, [r4, #4]
 8019904:	9125      	str	r1, [sp, #148]	; 0x94
 8019906:	9224      	str	r2, [sp, #144]	; 0x90
 8019908:	dc72      	bgt.n	80199f0 <_svfprintf_r+0x168>
 801990a:	3408      	adds	r4, #8
 801990c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801990e:	441a      	add	r2, r3
 8019910:	920b      	str	r2, [sp, #44]	; 0x2c
 8019912:	782b      	ldrb	r3, [r5, #0]
 8019914:	2b00      	cmp	r3, #0
 8019916:	f000 87b5 	beq.w	801a884 <_svfprintf_r+0xffc>
 801991a:	2300      	movs	r3, #0
 801991c:	1c69      	adds	r1, r5, #1
 801991e:	786d      	ldrb	r5, [r5, #1]
 8019920:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8019924:	461a      	mov	r2, r3
 8019926:	930c      	str	r3, [sp, #48]	; 0x30
 8019928:	9307      	str	r3, [sp, #28]
 801992a:	f04f 3aff 	mov.w	sl, #4294967295
 801992e:	1c4b      	adds	r3, r1, #1
 8019930:	f1a5 0120 	sub.w	r1, r5, #32
 8019934:	2958      	cmp	r1, #88	; 0x58
 8019936:	f200 83d9 	bhi.w	801a0ec <_svfprintf_r+0x864>
 801993a:	e8df f011 	tbh	[pc, r1, lsl #1]
 801993e:	0270      	.short	0x0270
 8019940:	03d703d7 	.word	0x03d703d7
 8019944:	03d70374 	.word	0x03d70374
 8019948:	03d703d7 	.word	0x03d703d7
 801994c:	03d703d7 	.word	0x03d703d7
 8019950:	02f003d7 	.word	0x02f003d7
 8019954:	03d7020d 	.word	0x03d7020d
 8019958:	021101f4 	.word	0x021101f4
 801995c:	037b03d7 	.word	0x037b03d7
 8019960:	02ba02ba 	.word	0x02ba02ba
 8019964:	02ba02ba 	.word	0x02ba02ba
 8019968:	02ba02ba 	.word	0x02ba02ba
 801996c:	02ba02ba 	.word	0x02ba02ba
 8019970:	03d702ba 	.word	0x03d702ba
 8019974:	03d703d7 	.word	0x03d703d7
 8019978:	03d703d7 	.word	0x03d703d7
 801997c:	03d703d7 	.word	0x03d703d7
 8019980:	03d703d7 	.word	0x03d703d7
 8019984:	02c903d7 	.word	0x02c903d7
 8019988:	03d7038b 	.word	0x03d7038b
 801998c:	03d7038b 	.word	0x03d7038b
 8019990:	03d703d7 	.word	0x03d703d7
 8019994:	036d03d7 	.word	0x036d03d7
 8019998:	03d703d7 	.word	0x03d703d7
 801999c:	03d70305 	.word	0x03d70305
 80199a0:	03d703d7 	.word	0x03d703d7
 80199a4:	03d703d7 	.word	0x03d703d7
 80199a8:	03d70323 	.word	0x03d70323
 80199ac:	033d03d7 	.word	0x033d03d7
 80199b0:	03d703d7 	.word	0x03d703d7
 80199b4:	03d703d7 	.word	0x03d703d7
 80199b8:	03d703d7 	.word	0x03d703d7
 80199bc:	03d703d7 	.word	0x03d703d7
 80199c0:	03d703d7 	.word	0x03d703d7
 80199c4:	022c0358 	.word	0x022c0358
 80199c8:	038b038b 	.word	0x038b038b
 80199cc:	02fe038b 	.word	0x02fe038b
 80199d0:	03d7022c 	.word	0x03d7022c
 80199d4:	02e603d7 	.word	0x02e603d7
 80199d8:	027e03d7 	.word	0x027e03d7
 80199dc:	03c001fb 	.word	0x03c001fb
 80199e0:	03d70277 	.word	0x03d70277
 80199e4:	03d70292 	.word	0x03d70292
 80199e8:	03d7007a 	.word	0x03d7007a
 80199ec:	024a03d7 	.word	0x024a03d7
 80199f0:	9808      	ldr	r0, [sp, #32]
 80199f2:	9307      	str	r3, [sp, #28]
 80199f4:	4631      	mov	r1, r6
 80199f6:	aa23      	add	r2, sp, #140	; 0x8c
 80199f8:	f005 fffa 	bl	801f9f0 <__ssprint_r>
 80199fc:	b950      	cbnz	r0, 8019a14 <_svfprintf_r+0x18c>
 80199fe:	463c      	mov	r4, r7
 8019a00:	9b07      	ldr	r3, [sp, #28]
 8019a02:	e783      	b.n	801990c <_svfprintf_r+0x84>
 8019a04:	9808      	ldr	r0, [sp, #32]
 8019a06:	4631      	mov	r1, r6
 8019a08:	aa23      	add	r2, sp, #140	; 0x8c
 8019a0a:	f005 fff1 	bl	801f9f0 <__ssprint_r>
 8019a0e:	2800      	cmp	r0, #0
 8019a10:	f000 8185 	beq.w	8019d1e <_svfprintf_r+0x496>
 8019a14:	46b1      	mov	r9, r6
 8019a16:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8019a1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a20:	bf18      	it	ne
 8019a22:	f04f 33ff 	movne.w	r3, #4294967295
 8019a26:	4618      	mov	r0, r3
 8019a28:	b041      	add	sp, #260	; 0x104
 8019a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019a30:	e76f      	b.n	8019912 <_svfprintf_r+0x8a>
 8019a32:	930a      	str	r3, [sp, #40]	; 0x28
 8019a34:	9b07      	ldr	r3, [sp, #28]
 8019a36:	0698      	lsls	r0, r3, #26
 8019a38:	f140 82ad 	bpl.w	8019f96 <_svfprintf_r+0x70e>
 8019a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a3e:	f103 0907 	add.w	r9, r3, #7
 8019a42:	f029 0307 	bic.w	r3, r9, #7
 8019a46:	f103 0208 	add.w	r2, r3, #8
 8019a4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019a4e:	920e      	str	r2, [sp, #56]	; 0x38
 8019a50:	2301      	movs	r3, #1
 8019a52:	f04f 0c00 	mov.w	ip, #0
 8019a56:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 8019a5a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019a5e:	f1ba 0f00 	cmp.w	sl, #0
 8019a62:	db03      	blt.n	8019a6c <_svfprintf_r+0x1e4>
 8019a64:	9a07      	ldr	r2, [sp, #28]
 8019a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019a6a:	9207      	str	r2, [sp, #28]
 8019a6c:	ea58 0209 	orrs.w	r2, r8, r9
 8019a70:	f040 834c 	bne.w	801a10c <_svfprintf_r+0x884>
 8019a74:	f1ba 0f00 	cmp.w	sl, #0
 8019a78:	f000 8451 	beq.w	801a31e <_svfprintf_r+0xa96>
 8019a7c:	2b01      	cmp	r3, #1
 8019a7e:	f000 834f 	beq.w	801a120 <_svfprintf_r+0x898>
 8019a82:	2b02      	cmp	r3, #2
 8019a84:	f000 8490 	beq.w	801a3a8 <_svfprintf_r+0xb20>
 8019a88:	4639      	mov	r1, r7
 8019a8a:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8019a8e:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8019a92:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8019a96:	f008 0307 	and.w	r3, r8, #7
 8019a9a:	4681      	mov	r9, r0
 8019a9c:	4690      	mov	r8, r2
 8019a9e:	3330      	adds	r3, #48	; 0x30
 8019aa0:	ea58 0209 	orrs.w	r2, r8, r9
 8019aa4:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8019aa8:	d1ef      	bne.n	8019a8a <_svfprintf_r+0x202>
 8019aaa:	9a07      	ldr	r2, [sp, #28]
 8019aac:	9110      	str	r1, [sp, #64]	; 0x40
 8019aae:	07d2      	lsls	r2, r2, #31
 8019ab0:	f100 8544 	bmi.w	801a53c <_svfprintf_r+0xcb4>
 8019ab4:	1a7b      	subs	r3, r7, r1
 8019ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8019ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019aba:	4592      	cmp	sl, r2
 8019abc:	4653      	mov	r3, sl
 8019abe:	bfb8      	it	lt
 8019ac0:	4613      	movlt	r3, r2
 8019ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	9312      	str	r3, [sp, #72]	; 0x48
 8019ac8:	f1bc 0f00 	cmp.w	ip, #0
 8019acc:	d002      	beq.n	8019ad4 <_svfprintf_r+0x24c>
 8019ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ad0:	3301      	adds	r3, #1
 8019ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8019ad4:	9b07      	ldr	r3, [sp, #28]
 8019ad6:	f013 0302 	ands.w	r3, r3, #2
 8019ada:	930f      	str	r3, [sp, #60]	; 0x3c
 8019adc:	d002      	beq.n	8019ae4 <_svfprintf_r+0x25c>
 8019ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ae0:	3302      	adds	r3, #2
 8019ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8019ae4:	9b07      	ldr	r3, [sp, #28]
 8019ae6:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8019aea:	f040 830c 	bne.w	801a106 <_svfprintf_r+0x87e>
 8019aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019af2:	ebc2 0803 	rsb	r8, r2, r3
 8019af6:	f1b8 0f00 	cmp.w	r8, #0
 8019afa:	f340 8304 	ble.w	801a106 <_svfprintf_r+0x87e>
 8019afe:	f1b8 0f10 	cmp.w	r8, #16
 8019b02:	9925      	ldr	r1, [sp, #148]	; 0x94
 8019b04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019b06:	f8df a544 	ldr.w	sl, [pc, #1348]	; 801a04c <_svfprintf_r+0x7c4>
 8019b0a:	dd29      	ble.n	8019b60 <_svfprintf_r+0x2d8>
 8019b0c:	4653      	mov	r3, sl
 8019b0e:	f04f 0b10 	mov.w	fp, #16
 8019b12:	46c2      	mov	sl, r8
 8019b14:	46a8      	mov	r8, r5
 8019b16:	461d      	mov	r5, r3
 8019b18:	e006      	b.n	8019b28 <_svfprintf_r+0x2a0>
 8019b1a:	f1aa 0a10 	sub.w	sl, sl, #16
 8019b1e:	f1ba 0f10 	cmp.w	sl, #16
 8019b22:	f104 0408 	add.w	r4, r4, #8
 8019b26:	dd17      	ble.n	8019b58 <_svfprintf_r+0x2d0>
 8019b28:	3201      	adds	r2, #1
 8019b2a:	3110      	adds	r1, #16
 8019b2c:	2a07      	cmp	r2, #7
 8019b2e:	9125      	str	r1, [sp, #148]	; 0x94
 8019b30:	9224      	str	r2, [sp, #144]	; 0x90
 8019b32:	e884 0820 	stmia.w	r4, {r5, fp}
 8019b36:	ddf0      	ble.n	8019b1a <_svfprintf_r+0x292>
 8019b38:	9808      	ldr	r0, [sp, #32]
 8019b3a:	4631      	mov	r1, r6
 8019b3c:	aa23      	add	r2, sp, #140	; 0x8c
 8019b3e:	f005 ff57 	bl	801f9f0 <__ssprint_r>
 8019b42:	2800      	cmp	r0, #0
 8019b44:	f47f af66 	bne.w	8019a14 <_svfprintf_r+0x18c>
 8019b48:	f1aa 0a10 	sub.w	sl, sl, #16
 8019b4c:	f1ba 0f10 	cmp.w	sl, #16
 8019b50:	9925      	ldr	r1, [sp, #148]	; 0x94
 8019b52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019b54:	463c      	mov	r4, r7
 8019b56:	dce7      	bgt.n	8019b28 <_svfprintf_r+0x2a0>
 8019b58:	462b      	mov	r3, r5
 8019b5a:	4645      	mov	r5, r8
 8019b5c:	46d0      	mov	r8, sl
 8019b5e:	469a      	mov	sl, r3
 8019b60:	3201      	adds	r2, #1
 8019b62:	eb08 0b01 	add.w	fp, r8, r1
 8019b66:	2a07      	cmp	r2, #7
 8019b68:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8019b6c:	9224      	str	r2, [sp, #144]	; 0x90
 8019b6e:	f8c4 a000 	str.w	sl, [r4]
 8019b72:	f8c4 8004 	str.w	r8, [r4, #4]
 8019b76:	f300 847b 	bgt.w	801a470 <_svfprintf_r+0xbe8>
 8019b7a:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 8019b7e:	3408      	adds	r4, #8
 8019b80:	f1bc 0f00 	cmp.w	ip, #0
 8019b84:	d00f      	beq.n	8019ba6 <_svfprintf_r+0x31e>
 8019b86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019b88:	3301      	adds	r3, #1
 8019b8a:	f10b 0b01 	add.w	fp, fp, #1
 8019b8e:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8019b92:	2201      	movs	r2, #1
 8019b94:	2b07      	cmp	r3, #7
 8019b96:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8019b9a:	9324      	str	r3, [sp, #144]	; 0x90
 8019b9c:	e884 0006 	stmia.w	r4, {r1, r2}
 8019ba0:	f300 83da 	bgt.w	801a358 <_svfprintf_r+0xad0>
 8019ba4:	3408      	adds	r4, #8
 8019ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ba8:	b173      	cbz	r3, 8019bc8 <_svfprintf_r+0x340>
 8019baa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019bac:	3301      	adds	r3, #1
 8019bae:	f10b 0b02 	add.w	fp, fp, #2
 8019bb2:	a91c      	add	r1, sp, #112	; 0x70
 8019bb4:	2202      	movs	r2, #2
 8019bb6:	2b07      	cmp	r3, #7
 8019bb8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8019bbc:	9324      	str	r3, [sp, #144]	; 0x90
 8019bbe:	e884 0006 	stmia.w	r4, {r1, r2}
 8019bc2:	f300 83d5 	bgt.w	801a370 <_svfprintf_r+0xae8>
 8019bc6:	3408      	adds	r4, #8
 8019bc8:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8019bcc:	f000 8311 	beq.w	801a1f2 <_svfprintf_r+0x96a>
 8019bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019bd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019bd4:	ebc2 0a03 	rsb	sl, r2, r3
 8019bd8:	f1ba 0f00 	cmp.w	sl, #0
 8019bdc:	dd3c      	ble.n	8019c58 <_svfprintf_r+0x3d0>
 8019bde:	f1ba 0f10 	cmp.w	sl, #16
 8019be2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019be4:	f8df 9468 	ldr.w	r9, [pc, #1128]	; 801a050 <_svfprintf_r+0x7c8>
 8019be8:	dd2b      	ble.n	8019c42 <_svfprintf_r+0x3ba>
 8019bea:	4649      	mov	r1, r9
 8019bec:	465b      	mov	r3, fp
 8019bee:	46a9      	mov	r9, r5
 8019bf0:	f04f 0810 	mov.w	r8, #16
 8019bf4:	f8dd b020 	ldr.w	fp, [sp, #32]
 8019bf8:	460d      	mov	r5, r1
 8019bfa:	e006      	b.n	8019c0a <_svfprintf_r+0x382>
 8019bfc:	f1aa 0a10 	sub.w	sl, sl, #16
 8019c00:	f1ba 0f10 	cmp.w	sl, #16
 8019c04:	f104 0408 	add.w	r4, r4, #8
 8019c08:	dd17      	ble.n	8019c3a <_svfprintf_r+0x3b2>
 8019c0a:	3201      	adds	r2, #1
 8019c0c:	3310      	adds	r3, #16
 8019c0e:	2a07      	cmp	r2, #7
 8019c10:	9325      	str	r3, [sp, #148]	; 0x94
 8019c12:	9224      	str	r2, [sp, #144]	; 0x90
 8019c14:	e884 0120 	stmia.w	r4, {r5, r8}
 8019c18:	ddf0      	ble.n	8019bfc <_svfprintf_r+0x374>
 8019c1a:	4658      	mov	r0, fp
 8019c1c:	4631      	mov	r1, r6
 8019c1e:	aa23      	add	r2, sp, #140	; 0x8c
 8019c20:	f005 fee6 	bl	801f9f0 <__ssprint_r>
 8019c24:	2800      	cmp	r0, #0
 8019c26:	f47f aef5 	bne.w	8019a14 <_svfprintf_r+0x18c>
 8019c2a:	f1aa 0a10 	sub.w	sl, sl, #16
 8019c2e:	f1ba 0f10 	cmp.w	sl, #16
 8019c32:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019c34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019c36:	463c      	mov	r4, r7
 8019c38:	dce7      	bgt.n	8019c0a <_svfprintf_r+0x382>
 8019c3a:	469b      	mov	fp, r3
 8019c3c:	462b      	mov	r3, r5
 8019c3e:	464d      	mov	r5, r9
 8019c40:	4699      	mov	r9, r3
 8019c42:	3201      	adds	r2, #1
 8019c44:	44d3      	add	fp, sl
 8019c46:	2a07      	cmp	r2, #7
 8019c48:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8019c4c:	9224      	str	r2, [sp, #144]	; 0x90
 8019c4e:	e884 0600 	stmia.w	r4, {r9, sl}
 8019c52:	f300 8375 	bgt.w	801a340 <_svfprintf_r+0xab8>
 8019c56:	3408      	adds	r4, #8
 8019c58:	9b07      	ldr	r3, [sp, #28]
 8019c5a:	05d9      	lsls	r1, r3, #23
 8019c5c:	f100 826c 	bmi.w	801a138 <_svfprintf_r+0x8b0>
 8019c60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019c62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c66:	6022      	str	r2, [r4, #0]
 8019c68:	3301      	adds	r3, #1
 8019c6a:	448b      	add	fp, r1
 8019c6c:	2b07      	cmp	r3, #7
 8019c6e:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8019c72:	6061      	str	r1, [r4, #4]
 8019c74:	9324      	str	r3, [sp, #144]	; 0x90
 8019c76:	f300 8346 	bgt.w	801a306 <_svfprintf_r+0xa7e>
 8019c7a:	3408      	adds	r4, #8
 8019c7c:	9b07      	ldr	r3, [sp, #28]
 8019c7e:	075a      	lsls	r2, r3, #29
 8019c80:	d541      	bpl.n	8019d06 <_svfprintf_r+0x47e>
 8019c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c86:	1a9d      	subs	r5, r3, r2
 8019c88:	2d00      	cmp	r5, #0
 8019c8a:	dd3c      	ble.n	8019d06 <_svfprintf_r+0x47e>
 8019c8c:	2d10      	cmp	r5, #16
 8019c8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019c90:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 801a04c <_svfprintf_r+0x7c4>
 8019c94:	dd23      	ble.n	8019cde <_svfprintf_r+0x456>
 8019c96:	f04f 0810 	mov.w	r8, #16
 8019c9a:	465a      	mov	r2, fp
 8019c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019ca0:	e004      	b.n	8019cac <_svfprintf_r+0x424>
 8019ca2:	3d10      	subs	r5, #16
 8019ca4:	2d10      	cmp	r5, #16
 8019ca6:	f104 0408 	add.w	r4, r4, #8
 8019caa:	dd17      	ble.n	8019cdc <_svfprintf_r+0x454>
 8019cac:	3301      	adds	r3, #1
 8019cae:	3210      	adds	r2, #16
 8019cb0:	2b07      	cmp	r3, #7
 8019cb2:	9225      	str	r2, [sp, #148]	; 0x94
 8019cb4:	9324      	str	r3, [sp, #144]	; 0x90
 8019cb6:	f8c4 a000 	str.w	sl, [r4]
 8019cba:	f8c4 8004 	str.w	r8, [r4, #4]
 8019cbe:	ddf0      	ble.n	8019ca2 <_svfprintf_r+0x41a>
 8019cc0:	4648      	mov	r0, r9
 8019cc2:	4631      	mov	r1, r6
 8019cc4:	aa23      	add	r2, sp, #140	; 0x8c
 8019cc6:	f005 fe93 	bl	801f9f0 <__ssprint_r>
 8019cca:	2800      	cmp	r0, #0
 8019ccc:	f47f aea2 	bne.w	8019a14 <_svfprintf_r+0x18c>
 8019cd0:	3d10      	subs	r5, #16
 8019cd2:	2d10      	cmp	r5, #16
 8019cd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8019cd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019cd8:	463c      	mov	r4, r7
 8019cda:	dce7      	bgt.n	8019cac <_svfprintf_r+0x424>
 8019cdc:	4693      	mov	fp, r2
 8019cde:	3301      	adds	r3, #1
 8019ce0:	44ab      	add	fp, r5
 8019ce2:	2b07      	cmp	r3, #7
 8019ce4:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 8019ce8:	9324      	str	r3, [sp, #144]	; 0x90
 8019cea:	f8c4 a000 	str.w	sl, [r4]
 8019cee:	6065      	str	r5, [r4, #4]
 8019cf0:	dd09      	ble.n	8019d06 <_svfprintf_r+0x47e>
 8019cf2:	9808      	ldr	r0, [sp, #32]
 8019cf4:	4631      	mov	r1, r6
 8019cf6:	aa23      	add	r2, sp, #140	; 0x8c
 8019cf8:	f005 fe7a 	bl	801f9f0 <__ssprint_r>
 8019cfc:	2800      	cmp	r0, #0
 8019cfe:	f47f ae89 	bne.w	8019a14 <_svfprintf_r+0x18c>
 8019d02:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 8019d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d0c:	428a      	cmp	r2, r1
 8019d0e:	bfac      	ite	ge
 8019d10:	189b      	addge	r3, r3, r2
 8019d12:	185b      	addlt	r3, r3, r1
 8019d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d16:	f1bb 0f00 	cmp.w	fp, #0
 8019d1a:	f47f ae73 	bne.w	8019a04 <_svfprintf_r+0x17c>
 8019d1e:	2300      	movs	r3, #0
 8019d20:	9324      	str	r3, [sp, #144]	; 0x90
 8019d22:	463c      	mov	r4, r7
 8019d24:	e5d5      	b.n	80198d2 <_svfprintf_r+0x4a>
 8019d26:	4619      	mov	r1, r3
 8019d28:	9807      	ldr	r0, [sp, #28]
 8019d2a:	781d      	ldrb	r5, [r3, #0]
 8019d2c:	f040 0004 	orr.w	r0, r0, #4
 8019d30:	9007      	str	r0, [sp, #28]
 8019d32:	e5fc      	b.n	801992e <_svfprintf_r+0xa6>
 8019d34:	930a      	str	r3, [sp, #40]	; 0x28
 8019d36:	9b07      	ldr	r3, [sp, #28]
 8019d38:	f013 0320 	ands.w	r3, r3, #32
 8019d3c:	f000 810e 	beq.w	8019f5c <_svfprintf_r+0x6d4>
 8019d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d42:	f103 0907 	add.w	r9, r3, #7
 8019d46:	f029 0307 	bic.w	r3, r9, #7
 8019d4a:	f103 0208 	add.w	r2, r3, #8
 8019d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019d52:	920e      	str	r2, [sp, #56]	; 0x38
 8019d54:	2300      	movs	r3, #0
 8019d56:	e67c      	b.n	8019a52 <_svfprintf_r+0x1ca>
 8019d58:	781d      	ldrb	r5, [r3, #0]
 8019d5a:	4619      	mov	r1, r3
 8019d5c:	222b      	movs	r2, #43	; 0x2b
 8019d5e:	e5e6      	b.n	801992e <_svfprintf_r+0xa6>
 8019d60:	781d      	ldrb	r5, [r3, #0]
 8019d62:	2d2a      	cmp	r5, #42	; 0x2a
 8019d64:	f103 0101 	add.w	r1, r3, #1
 8019d68:	f000 87ad 	beq.w	801acc6 <_svfprintf_r+0x143e>
 8019d6c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8019d70:	2809      	cmp	r0, #9
 8019d72:	460b      	mov	r3, r1
 8019d74:	f04f 0a00 	mov.w	sl, #0
 8019d78:	f63f adda 	bhi.w	8019930 <_svfprintf_r+0xa8>
 8019d7c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8019d80:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8019d84:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8019d88:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8019d8c:	2809      	cmp	r0, #9
 8019d8e:	d9f5      	bls.n	8019d7c <_svfprintf_r+0x4f4>
 8019d90:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 8019d94:	e5cc      	b.n	8019930 <_svfprintf_r+0xa8>
 8019d96:	930a      	str	r3, [sp, #40]	; 0x28
 8019d98:	9b07      	ldr	r3, [sp, #28]
 8019d9a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8019d9e:	069b      	lsls	r3, r3, #26
 8019da0:	f140 80a1 	bpl.w	8019ee6 <_svfprintf_r+0x65e>
 8019da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019da6:	f103 0907 	add.w	r9, r3, #7
 8019daa:	f029 0907 	bic.w	r9, r9, #7
 8019dae:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019db2:	f109 0108 	add.w	r1, r9, #8
 8019db6:	910e      	str	r1, [sp, #56]	; 0x38
 8019db8:	4690      	mov	r8, r2
 8019dba:	4699      	mov	r9, r3
 8019dbc:	2a00      	cmp	r2, #0
 8019dbe:	f173 0300 	sbcs.w	r3, r3, #0
 8019dc2:	f2c0 840b 	blt.w	801a5dc <_svfprintf_r+0xd54>
 8019dc6:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 8019dca:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019dce:	2301      	movs	r3, #1
 8019dd0:	e645      	b.n	8019a5e <_svfprintf_r+0x1d6>
 8019dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8019dd4:	4b9b      	ldr	r3, [pc, #620]	; (801a044 <_svfprintf_r+0x7bc>)
 8019dd6:	9316      	str	r3, [sp, #88]	; 0x58
 8019dd8:	9b07      	ldr	r3, [sp, #28]
 8019dda:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8019dde:	069b      	lsls	r3, r3, #26
 8019de0:	f140 80f3 	bpl.w	8019fca <_svfprintf_r+0x742>
 8019de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019de6:	f103 0907 	add.w	r9, r3, #7
 8019dea:	f029 0307 	bic.w	r3, r9, #7
 8019dee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019df2:	f103 0208 	add.w	r2, r3, #8
 8019df6:	920e      	str	r2, [sp, #56]	; 0x38
 8019df8:	9b07      	ldr	r3, [sp, #28]
 8019dfa:	07d9      	lsls	r1, r3, #31
 8019dfc:	f140 80f5 	bpl.w	8019fea <_svfprintf_r+0x762>
 8019e00:	ea58 0309 	orrs.w	r3, r8, r9
 8019e04:	f000 80f1 	beq.w	8019fea <_svfprintf_r+0x762>
 8019e08:	9a07      	ldr	r2, [sp, #28]
 8019e0a:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
 8019e0e:	2330      	movs	r3, #48	; 0x30
 8019e10:	f042 0202 	orr.w	r2, r2, #2
 8019e14:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8019e18:	9207      	str	r2, [sp, #28]
 8019e1a:	2302      	movs	r3, #2
 8019e1c:	e619      	b.n	8019a52 <_svfprintf_r+0x1ca>
 8019e1e:	781d      	ldrb	r5, [r3, #0]
 8019e20:	4619      	mov	r1, r3
 8019e22:	2a00      	cmp	r2, #0
 8019e24:	f47f ad83 	bne.w	801992e <_svfprintf_r+0xa6>
 8019e28:	2220      	movs	r2, #32
 8019e2a:	e580      	b.n	801992e <_svfprintf_r+0xa6>
 8019e2c:	9907      	ldr	r1, [sp, #28]
 8019e2e:	f041 0120 	orr.w	r1, r1, #32
 8019e32:	9107      	str	r1, [sp, #28]
 8019e34:	781d      	ldrb	r5, [r3, #0]
 8019e36:	4619      	mov	r1, r3
 8019e38:	e579      	b.n	801992e <_svfprintf_r+0xa6>
 8019e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8019e3c:	9b07      	ldr	r3, [sp, #28]
 8019e3e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8019e42:	069a      	lsls	r2, r3, #26
 8019e44:	f140 84a1 	bpl.w	801a78a <_svfprintf_r+0xf02>
 8019e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e4c:	ea4f 79e1 	mov.w	r9, r1, asr #31
 8019e50:	6813      	ldr	r3, [r2, #0]
 8019e52:	4608      	mov	r0, r1
 8019e54:	4688      	mov	r8, r1
 8019e56:	3204      	adds	r2, #4
 8019e58:	4649      	mov	r1, r9
 8019e5a:	920e      	str	r2, [sp, #56]	; 0x38
 8019e5c:	e9c3 0100 	strd	r0, r1, [r3]
 8019e60:	e537      	b.n	80198d2 <_svfprintf_r+0x4a>
 8019e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e64:	930a      	str	r3, [sp, #40]	; 0x28
 8019e66:	6813      	ldr	r3, [r2, #0]
 8019e68:	9310      	str	r3, [sp, #64]	; 0x40
 8019e6a:	f04f 0b00 	mov.w	fp, #0
 8019e6e:	f88d b06f 	strb.w	fp, [sp, #111]	; 0x6f
 8019e72:	f102 0904 	add.w	r9, r2, #4
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	f000 863b 	beq.w	801aaf2 <_svfprintf_r+0x126a>
 8019e7c:	f1ba 0f00 	cmp.w	sl, #0
 8019e80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019e82:	f2c0 85e9 	blt.w	801aa58 <_svfprintf_r+0x11d0>
 8019e86:	4659      	mov	r1, fp
 8019e88:	4652      	mov	r2, sl
 8019e8a:	f004 ffdb 	bl	801ee44 <memchr>
 8019e8e:	2800      	cmp	r0, #0
 8019e90:	f000 866c 	beq.w	801ab6c <_svfprintf_r+0x12e4>
 8019e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e96:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8019e9a:	1ac3      	subs	r3, r0, r3
 8019e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8019e9e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019ea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ea8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8019eac:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 8019eb0:	e60a      	b.n	8019ac8 <_svfprintf_r+0x240>
 8019eb2:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8019eb6:	2100      	movs	r1, #0
 8019eb8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8019ebc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8019ec0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019ec4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8019ec8:	2809      	cmp	r0, #9
 8019eca:	d9f5      	bls.n	8019eb8 <_svfprintf_r+0x630>
 8019ecc:	910c      	str	r1, [sp, #48]	; 0x30
 8019ece:	e52f      	b.n	8019930 <_svfprintf_r+0xa8>
 8019ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8019ed2:	9b07      	ldr	r3, [sp, #28]
 8019ed4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8019ed8:	f043 0310 	orr.w	r3, r3, #16
 8019edc:	9307      	str	r3, [sp, #28]
 8019ede:	9b07      	ldr	r3, [sp, #28]
 8019ee0:	069b      	lsls	r3, r3, #26
 8019ee2:	f53f af5f 	bmi.w	8019da4 <_svfprintf_r+0x51c>
 8019ee6:	9b07      	ldr	r3, [sp, #28]
 8019ee8:	06d8      	lsls	r0, r3, #27
 8019eea:	f100 8368 	bmi.w	801a5be <_svfprintf_r+0xd36>
 8019eee:	9b07      	ldr	r3, [sp, #28]
 8019ef0:	0659      	lsls	r1, r3, #25
 8019ef2:	f140 8364 	bpl.w	801a5be <_svfprintf_r+0xd36>
 8019ef6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019ef8:	f9b1 8000 	ldrsh.w	r8, [r1]
 8019efc:	3104      	adds	r1, #4
 8019efe:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8019f02:	4642      	mov	r2, r8
 8019f04:	464b      	mov	r3, r9
 8019f06:	910e      	str	r1, [sp, #56]	; 0x38
 8019f08:	e758      	b.n	8019dbc <_svfprintf_r+0x534>
 8019f0a:	781d      	ldrb	r5, [r3, #0]
 8019f0c:	9907      	ldr	r1, [sp, #28]
 8019f0e:	2d6c      	cmp	r5, #108	; 0x6c
 8019f10:	f000 84cb 	beq.w	801a8aa <_svfprintf_r+0x1022>
 8019f14:	f041 0110 	orr.w	r1, r1, #16
 8019f18:	9107      	str	r1, [sp, #28]
 8019f1a:	4619      	mov	r1, r3
 8019f1c:	e507      	b.n	801992e <_svfprintf_r+0xa6>
 8019f1e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019f20:	6829      	ldr	r1, [r5, #0]
 8019f22:	910c      	str	r1, [sp, #48]	; 0x30
 8019f24:	4608      	mov	r0, r1
 8019f26:	2800      	cmp	r0, #0
 8019f28:	4629      	mov	r1, r5
 8019f2a:	f101 0104 	add.w	r1, r1, #4
 8019f2e:	f2c0 84b5 	blt.w	801a89c <_svfprintf_r+0x1014>
 8019f32:	910e      	str	r1, [sp, #56]	; 0x38
 8019f34:	781d      	ldrb	r5, [r3, #0]
 8019f36:	4619      	mov	r1, r3
 8019f38:	e4f9      	b.n	801992e <_svfprintf_r+0xa6>
 8019f3a:	9907      	ldr	r1, [sp, #28]
 8019f3c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8019f40:	9107      	str	r1, [sp, #28]
 8019f42:	781d      	ldrb	r5, [r3, #0]
 8019f44:	4619      	mov	r1, r3
 8019f46:	e4f2      	b.n	801992e <_svfprintf_r+0xa6>
 8019f48:	930a      	str	r3, [sp, #40]	; 0x28
 8019f4a:	9b07      	ldr	r3, [sp, #28]
 8019f4c:	f043 0310 	orr.w	r3, r3, #16
 8019f50:	9307      	str	r3, [sp, #28]
 8019f52:	9b07      	ldr	r3, [sp, #28]
 8019f54:	f013 0320 	ands.w	r3, r3, #32
 8019f58:	f47f aef2 	bne.w	8019d40 <_svfprintf_r+0x4b8>
 8019f5c:	9a07      	ldr	r2, [sp, #28]
 8019f5e:	f012 0210 	ands.w	r2, r2, #16
 8019f62:	f040 8319 	bne.w	801a598 <_svfprintf_r+0xd10>
 8019f66:	9b07      	ldr	r3, [sp, #28]
 8019f68:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8019f6c:	f000 8314 	beq.w	801a598 <_svfprintf_r+0xd10>
 8019f70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019f72:	4613      	mov	r3, r2
 8019f74:	460a      	mov	r2, r1
 8019f76:	3204      	adds	r2, #4
 8019f78:	f8b1 8000 	ldrh.w	r8, [r1]
 8019f7c:	920e      	str	r2, [sp, #56]	; 0x38
 8019f7e:	f04f 0900 	mov.w	r9, #0
 8019f82:	e566      	b.n	8019a52 <_svfprintf_r+0x1ca>
 8019f84:	930a      	str	r3, [sp, #40]	; 0x28
 8019f86:	9b07      	ldr	r3, [sp, #28]
 8019f88:	f043 0310 	orr.w	r3, r3, #16
 8019f8c:	9307      	str	r3, [sp, #28]
 8019f8e:	9b07      	ldr	r3, [sp, #28]
 8019f90:	0698      	lsls	r0, r3, #26
 8019f92:	f53f ad53 	bmi.w	8019a3c <_svfprintf_r+0x1b4>
 8019f96:	9b07      	ldr	r3, [sp, #28]
 8019f98:	06d9      	lsls	r1, r3, #27
 8019f9a:	f100 8306 	bmi.w	801a5aa <_svfprintf_r+0xd22>
 8019f9e:	9b07      	ldr	r3, [sp, #28]
 8019fa0:	065a      	lsls	r2, r3, #25
 8019fa2:	f140 8302 	bpl.w	801a5aa <_svfprintf_r+0xd22>
 8019fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019fa8:	f8b2 8000 	ldrh.w	r8, [r2]
 8019fac:	3204      	adds	r2, #4
 8019fae:	f04f 0900 	mov.w	r9, #0
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	920e      	str	r2, [sp, #56]	; 0x38
 8019fb6:	e54c      	b.n	8019a52 <_svfprintf_r+0x1ca>
 8019fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8019fba:	4b23      	ldr	r3, [pc, #140]	; (801a048 <_svfprintf_r+0x7c0>)
 8019fbc:	9316      	str	r3, [sp, #88]	; 0x58
 8019fbe:	9b07      	ldr	r3, [sp, #28]
 8019fc0:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8019fc4:	069b      	lsls	r3, r3, #26
 8019fc6:	f53f af0d 	bmi.w	8019de4 <_svfprintf_r+0x55c>
 8019fca:	9b07      	ldr	r3, [sp, #28]
 8019fcc:	06d8      	lsls	r0, r3, #27
 8019fce:	f140 83cd 	bpl.w	801a76c <_svfprintf_r+0xee4>
 8019fd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019fd4:	4613      	mov	r3, r2
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	4698      	mov	r8, r3
 8019fda:	9b07      	ldr	r3, [sp, #28]
 8019fdc:	3204      	adds	r2, #4
 8019fde:	07d9      	lsls	r1, r3, #31
 8019fe0:	920e      	str	r2, [sp, #56]	; 0x38
 8019fe2:	f04f 0900 	mov.w	r9, #0
 8019fe6:	f53f af0b 	bmi.w	8019e00 <_svfprintf_r+0x578>
 8019fea:	2302      	movs	r3, #2
 8019fec:	e531      	b.n	8019a52 <_svfprintf_r+0x1ca>
 8019fee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8019ff2:	680a      	ldr	r2, [r1, #0]
 8019ff4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	2201      	movs	r2, #1
 8019ffc:	3104      	adds	r1, #4
 8019ffe:	469c      	mov	ip, r3
 801a000:	9209      	str	r2, [sp, #36]	; 0x24
 801a002:	910e      	str	r1, [sp, #56]	; 0x38
 801a004:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801a008:	ab26      	add	r3, sp, #152	; 0x98
 801a00a:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 801a00e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801a012:	920d      	str	r2, [sp, #52]	; 0x34
 801a014:	9310      	str	r3, [sp, #64]	; 0x40
 801a016:	e55d      	b.n	8019ad4 <_svfprintf_r+0x24c>
 801a018:	9907      	ldr	r1, [sp, #28]
 801a01a:	f041 0108 	orr.w	r1, r1, #8
 801a01e:	9107      	str	r1, [sp, #28]
 801a020:	781d      	ldrb	r5, [r3, #0]
 801a022:	4619      	mov	r1, r3
 801a024:	e483      	b.n	801992e <_svfprintf_r+0xa6>
 801a026:	9907      	ldr	r1, [sp, #28]
 801a028:	f041 0101 	orr.w	r1, r1, #1
 801a02c:	9107      	str	r1, [sp, #28]
 801a02e:	781d      	ldrb	r5, [r3, #0]
 801a030:	4619      	mov	r1, r3
 801a032:	e47c      	b.n	801992e <_svfprintf_r+0xa6>
 801a034:	9907      	ldr	r1, [sp, #28]
 801a036:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 801a03a:	9107      	str	r1, [sp, #28]
 801a03c:	781d      	ldrb	r5, [r3, #0]
 801a03e:	4619      	mov	r1, r3
 801a040:	e475      	b.n	801992e <_svfprintf_r+0xa6>
 801a042:	bf00      	nop
 801a044:	0803562c 	.word	0x0803562c
 801a048:	08035618 	.word	0x08035618
 801a04c:	080355f8 	.word	0x080355f8
 801a050:	0803564c 	.word	0x0803564c
 801a054:	930a      	str	r3, [sp, #40]	; 0x28
 801a056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a058:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 801a05c:	f103 0907 	add.w	r9, r3, #7
 801a060:	f029 0307 	bic.w	r3, r9, #7
 801a064:	f103 0208 	add.w	r2, r3, #8
 801a068:	920e      	str	r2, [sp, #56]	; 0x38
 801a06a:	681a      	ldr	r2, [r3, #0]
 801a06c:	9214      	str	r2, [sp, #80]	; 0x50
 801a06e:	685b      	ldr	r3, [r3, #4]
 801a070:	9315      	str	r3, [sp, #84]	; 0x54
 801a072:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a074:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a076:	f7ff f9bb 	bl	80193f0 <__fpclassifyd>
 801a07a:	2801      	cmp	r0, #1
 801a07c:	46d3      	mov	fp, sl
 801a07e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a080:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a082:	f040 8359 	bne.w	801a738 <_svfprintf_r+0xeb0>
 801a086:	2200      	movs	r2, #0
 801a088:	2300      	movs	r3, #0
 801a08a:	f7e6 fca7 	bl	80009dc <__aeabi_dcmplt>
 801a08e:	2800      	cmp	r0, #0
 801a090:	f040 8564 	bne.w	801ab5c <_svfprintf_r+0x12d4>
 801a094:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 801a098:	9b07      	ldr	r3, [sp, #28]
 801a09a:	4abe      	ldr	r2, [pc, #760]	; (801a394 <_svfprintf_r+0xb0c>)
 801a09c:	f8df e300 	ldr.w	lr, [pc, #768]	; 801a3a0 <_svfprintf_r+0xb18>
 801a0a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a0a4:	9307      	str	r3, [sp, #28]
 801a0a6:	4613      	mov	r3, r2
 801a0a8:	2103      	movs	r1, #3
 801a0aa:	2000      	movs	r0, #0
 801a0ac:	2d47      	cmp	r5, #71	; 0x47
 801a0ae:	bfd8      	it	le
 801a0b0:	4673      	movle	r3, lr
 801a0b2:	9109      	str	r1, [sp, #36]	; 0x24
 801a0b4:	9011      	str	r0, [sp, #68]	; 0x44
 801a0b6:	9310      	str	r3, [sp, #64]	; 0x40
 801a0b8:	910d      	str	r1, [sp, #52]	; 0x34
 801a0ba:	9012      	str	r0, [sp, #72]	; 0x48
 801a0bc:	e504      	b.n	8019ac8 <_svfprintf_r+0x240>
 801a0be:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a0c0:	9907      	ldr	r1, [sp, #28]
 801a0c2:	930a      	str	r3, [sp, #40]	; 0x28
 801a0c4:	2230      	movs	r2, #48	; 0x30
 801a0c6:	6803      	ldr	r3, [r0, #0]
 801a0c8:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
 801a0cc:	4602      	mov	r2, r0
 801a0ce:	2578      	movs	r5, #120	; 0x78
 801a0d0:	f041 0102 	orr.w	r1, r1, #2
 801a0d4:	3204      	adds	r2, #4
 801a0d6:	4698      	mov	r8, r3
 801a0d8:	4baf      	ldr	r3, [pc, #700]	; (801a398 <_svfprintf_r+0xb10>)
 801a0da:	9316      	str	r3, [sp, #88]	; 0x58
 801a0dc:	9107      	str	r1, [sp, #28]
 801a0de:	920e      	str	r2, [sp, #56]	; 0x38
 801a0e0:	f04f 0900 	mov.w	r9, #0
 801a0e4:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
 801a0e8:	2302      	movs	r3, #2
 801a0ea:	e4b2      	b.n	8019a52 <_svfprintf_r+0x1ca>
 801a0ec:	930a      	str	r3, [sp, #40]	; 0x28
 801a0ee:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 801a0f2:	2d00      	cmp	r5, #0
 801a0f4:	f000 83c6 	beq.w	801a884 <_svfprintf_r+0xffc>
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	2201      	movs	r2, #1
 801a0fc:	469c      	mov	ip, r3
 801a0fe:	9209      	str	r2, [sp, #36]	; 0x24
 801a100:	f88d 5098 	strb.w	r5, [sp, #152]	; 0x98
 801a104:	e77e      	b.n	801a004 <_svfprintf_r+0x77c>
 801a106:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a10a:	e539      	b.n	8019b80 <_svfprintf_r+0x2f8>
 801a10c:	2b01      	cmp	r3, #1
 801a10e:	f47f acb8 	bne.w	8019a82 <_svfprintf_r+0x1fa>
 801a112:	f1b9 0f00 	cmp.w	r9, #0
 801a116:	bf08      	it	eq
 801a118:	f1b8 0f0a 	cmpeq.w	r8, #10
 801a11c:	f080 821c 	bcs.w	801a558 <_svfprintf_r+0xcd0>
 801a120:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
 801a124:	f108 0830 	add.w	r8, r8, #48	; 0x30
 801a128:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 801a12c:	ebcb 0307 	rsb	r3, fp, r7
 801a130:	930d      	str	r3, [sp, #52]	; 0x34
 801a132:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 801a136:	e4bf      	b.n	8019ab8 <_svfprintf_r+0x230>
 801a138:	2d65      	cmp	r5, #101	; 0x65
 801a13a:	f340 80a0 	ble.w	801a27e <_svfprintf_r+0x9f6>
 801a13e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a140:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a142:	2200      	movs	r2, #0
 801a144:	2300      	movs	r3, #0
 801a146:	f7e6 fc3f 	bl	80009c8 <__aeabi_dcmpeq>
 801a14a:	2800      	cmp	r0, #0
 801a14c:	f000 8145 	beq.w	801a3da <_svfprintf_r+0xb52>
 801a150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a152:	4a92      	ldr	r2, [pc, #584]	; (801a39c <_svfprintf_r+0xb14>)
 801a154:	6022      	str	r2, [r4, #0]
 801a156:	3301      	adds	r3, #1
 801a158:	f10b 0b01 	add.w	fp, fp, #1
 801a15c:	2201      	movs	r2, #1
 801a15e:	2b07      	cmp	r3, #7
 801a160:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a164:	9324      	str	r3, [sp, #144]	; 0x90
 801a166:	6062      	str	r2, [r4, #4]
 801a168:	f300 8334 	bgt.w	801a7d4 <_svfprintf_r+0xf4c>
 801a16c:	3408      	adds	r4, #8
 801a16e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a172:	4293      	cmp	r3, r2
 801a174:	db03      	blt.n	801a17e <_svfprintf_r+0x8f6>
 801a176:	9b07      	ldr	r3, [sp, #28]
 801a178:	07da      	lsls	r2, r3, #31
 801a17a:	f57f ad7f 	bpl.w	8019c7c <_svfprintf_r+0x3f4>
 801a17e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a180:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a182:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a184:	6022      	str	r2, [r4, #0]
 801a186:	3301      	adds	r3, #1
 801a188:	448b      	add	fp, r1
 801a18a:	2b07      	cmp	r3, #7
 801a18c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a190:	6061      	str	r1, [r4, #4]
 801a192:	9324      	str	r3, [sp, #144]	; 0x90
 801a194:	f300 8390 	bgt.w	801a8b8 <_svfprintf_r+0x1030>
 801a198:	3408      	adds	r4, #8
 801a19a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a19c:	1e5d      	subs	r5, r3, #1
 801a19e:	2d00      	cmp	r5, #0
 801a1a0:	f77f ad6c 	ble.w	8019c7c <_svfprintf_r+0x3f4>
 801a1a4:	2d10      	cmp	r5, #16
 801a1a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a1a8:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 801a3a4 <_svfprintf_r+0xb1c>
 801a1ac:	f340 81ba 	ble.w	801a524 <_svfprintf_r+0xc9c>
 801a1b0:	f04f 0810 	mov.w	r8, #16
 801a1b4:	465a      	mov	r2, fp
 801a1b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a1ba:	e004      	b.n	801a1c6 <_svfprintf_r+0x93e>
 801a1bc:	3408      	adds	r4, #8
 801a1be:	3d10      	subs	r5, #16
 801a1c0:	2d10      	cmp	r5, #16
 801a1c2:	f340 81ae 	ble.w	801a522 <_svfprintf_r+0xc9a>
 801a1c6:	3301      	adds	r3, #1
 801a1c8:	3210      	adds	r2, #16
 801a1ca:	2b07      	cmp	r3, #7
 801a1cc:	9225      	str	r2, [sp, #148]	; 0x94
 801a1ce:	9324      	str	r3, [sp, #144]	; 0x90
 801a1d0:	f8c4 9000 	str.w	r9, [r4]
 801a1d4:	f8c4 8004 	str.w	r8, [r4, #4]
 801a1d8:	ddf0      	ble.n	801a1bc <_svfprintf_r+0x934>
 801a1da:	4650      	mov	r0, sl
 801a1dc:	4631      	mov	r1, r6
 801a1de:	aa23      	add	r2, sp, #140	; 0x8c
 801a1e0:	f005 fc06 	bl	801f9f0 <__ssprint_r>
 801a1e4:	2800      	cmp	r0, #0
 801a1e6:	f47f ac15 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a1ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a1ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a1ee:	463c      	mov	r4, r7
 801a1f0:	e7e5      	b.n	801a1be <_svfprintf_r+0x936>
 801a1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1f6:	ebc2 0a03 	rsb	sl, r2, r3
 801a1fa:	f1ba 0f00 	cmp.w	sl, #0
 801a1fe:	f77f ace7 	ble.w	8019bd0 <_svfprintf_r+0x348>
 801a202:	f1ba 0f10 	cmp.w	sl, #16
 801a206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a208:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801a3a4 <_svfprintf_r+0xb1c>
 801a20c:	dd2b      	ble.n	801a266 <_svfprintf_r+0x9de>
 801a20e:	4649      	mov	r1, r9
 801a210:	465b      	mov	r3, fp
 801a212:	46a9      	mov	r9, r5
 801a214:	f04f 0810 	mov.w	r8, #16
 801a218:	f8dd b020 	ldr.w	fp, [sp, #32]
 801a21c:	460d      	mov	r5, r1
 801a21e:	e006      	b.n	801a22e <_svfprintf_r+0x9a6>
 801a220:	f1aa 0a10 	sub.w	sl, sl, #16
 801a224:	f1ba 0f10 	cmp.w	sl, #16
 801a228:	f104 0408 	add.w	r4, r4, #8
 801a22c:	dd17      	ble.n	801a25e <_svfprintf_r+0x9d6>
 801a22e:	3201      	adds	r2, #1
 801a230:	3310      	adds	r3, #16
 801a232:	2a07      	cmp	r2, #7
 801a234:	9325      	str	r3, [sp, #148]	; 0x94
 801a236:	9224      	str	r2, [sp, #144]	; 0x90
 801a238:	e884 0120 	stmia.w	r4, {r5, r8}
 801a23c:	ddf0      	ble.n	801a220 <_svfprintf_r+0x998>
 801a23e:	4658      	mov	r0, fp
 801a240:	4631      	mov	r1, r6
 801a242:	aa23      	add	r2, sp, #140	; 0x8c
 801a244:	f005 fbd4 	bl	801f9f0 <__ssprint_r>
 801a248:	2800      	cmp	r0, #0
 801a24a:	f47f abe3 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a24e:	f1aa 0a10 	sub.w	sl, sl, #16
 801a252:	f1ba 0f10 	cmp.w	sl, #16
 801a256:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a258:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a25a:	463c      	mov	r4, r7
 801a25c:	dce7      	bgt.n	801a22e <_svfprintf_r+0x9a6>
 801a25e:	469b      	mov	fp, r3
 801a260:	462b      	mov	r3, r5
 801a262:	464d      	mov	r5, r9
 801a264:	4699      	mov	r9, r3
 801a266:	3201      	adds	r2, #1
 801a268:	44d3      	add	fp, sl
 801a26a:	2a07      	cmp	r2, #7
 801a26c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a270:	9224      	str	r2, [sp, #144]	; 0x90
 801a272:	e884 0600 	stmia.w	r4, {r9, sl}
 801a276:	f300 8252 	bgt.w	801a71e <_svfprintf_r+0xe96>
 801a27a:	3408      	adds	r4, #8
 801a27c:	e4a8      	b.n	8019bd0 <_svfprintf_r+0x348>
 801a27e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a280:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801a282:	2b01      	cmp	r3, #1
 801a284:	f340 8220 	ble.w	801a6c8 <_svfprintf_r+0xe40>
 801a288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a28a:	6023      	str	r3, [r4, #0]
 801a28c:	3501      	adds	r5, #1
 801a28e:	f10b 0301 	add.w	r3, fp, #1
 801a292:	2201      	movs	r2, #1
 801a294:	2d07      	cmp	r5, #7
 801a296:	9325      	str	r3, [sp, #148]	; 0x94
 801a298:	9524      	str	r5, [sp, #144]	; 0x90
 801a29a:	6062      	str	r2, [r4, #4]
 801a29c:	f300 8226 	bgt.w	801a6ec <_svfprintf_r+0xe64>
 801a2a0:	3408      	adds	r4, #8
 801a2a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a2a4:	6061      	str	r1, [r4, #4]
 801a2a6:	3501      	adds	r5, #1
 801a2a8:	eb03 0b01 	add.w	fp, r3, r1
 801a2ac:	2d07      	cmp	r5, #7
 801a2ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2b0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a2b4:	9524      	str	r5, [sp, #144]	; 0x90
 801a2b6:	6023      	str	r3, [r4, #0]
 801a2b8:	f300 8224 	bgt.w	801a704 <_svfprintf_r+0xe7c>
 801a2bc:	3408      	adds	r4, #8
 801a2be:	2300      	movs	r3, #0
 801a2c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a2c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a2c4:	2200      	movs	r2, #0
 801a2c6:	f7e6 fb7f 	bl	80009c8 <__aeabi_dcmpeq>
 801a2ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a2cc:	2800      	cmp	r0, #0
 801a2ce:	f040 80de 	bne.w	801a48e <_svfprintf_r+0xc06>
 801a2d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a2d4:	3b01      	subs	r3, #1
 801a2d6:	3501      	adds	r5, #1
 801a2d8:	3201      	adds	r2, #1
 801a2da:	449b      	add	fp, r3
 801a2dc:	2d07      	cmp	r5, #7
 801a2de:	9524      	str	r5, [sp, #144]	; 0x90
 801a2e0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a2e4:	6022      	str	r2, [r4, #0]
 801a2e6:	6063      	str	r3, [r4, #4]
 801a2e8:	f300 810e 	bgt.w	801a508 <_svfprintf_r+0xc80>
 801a2ec:	3408      	adds	r4, #8
 801a2ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a2f0:	6062      	str	r2, [r4, #4]
 801a2f2:	3501      	adds	r5, #1
 801a2f4:	4493      	add	fp, r2
 801a2f6:	ab1f      	add	r3, sp, #124	; 0x7c
 801a2f8:	2d07      	cmp	r5, #7
 801a2fa:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a2fe:	9524      	str	r5, [sp, #144]	; 0x90
 801a300:	6023      	str	r3, [r4, #0]
 801a302:	f77f acba 	ble.w	8019c7a <_svfprintf_r+0x3f2>
 801a306:	9808      	ldr	r0, [sp, #32]
 801a308:	4631      	mov	r1, r6
 801a30a:	aa23      	add	r2, sp, #140	; 0x8c
 801a30c:	f005 fb70 	bl	801f9f0 <__ssprint_r>
 801a310:	2800      	cmp	r0, #0
 801a312:	f47f ab7f 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a316:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a31a:	463c      	mov	r4, r7
 801a31c:	e4ae      	b.n	8019c7c <_svfprintf_r+0x3f4>
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d132      	bne.n	801a388 <_svfprintf_r+0xb00>
 801a322:	9b07      	ldr	r3, [sp, #28]
 801a324:	07d8      	lsls	r0, r3, #31
 801a326:	d52f      	bpl.n	801a388 <_svfprintf_r+0xb00>
 801a328:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
 801a32c:	2330      	movs	r3, #48	; 0x30
 801a32e:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 801a332:	ebcb 0307 	rsb	r3, fp, r7
 801a336:	930d      	str	r3, [sp, #52]	; 0x34
 801a338:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 801a33c:	f7ff bbbc 	b.w	8019ab8 <_svfprintf_r+0x230>
 801a340:	9808      	ldr	r0, [sp, #32]
 801a342:	4631      	mov	r1, r6
 801a344:	aa23      	add	r2, sp, #140	; 0x8c
 801a346:	f005 fb53 	bl	801f9f0 <__ssprint_r>
 801a34a:	2800      	cmp	r0, #0
 801a34c:	f47f ab62 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a350:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a354:	463c      	mov	r4, r7
 801a356:	e47f      	b.n	8019c58 <_svfprintf_r+0x3d0>
 801a358:	9808      	ldr	r0, [sp, #32]
 801a35a:	4631      	mov	r1, r6
 801a35c:	aa23      	add	r2, sp, #140	; 0x8c
 801a35e:	f005 fb47 	bl	801f9f0 <__ssprint_r>
 801a362:	2800      	cmp	r0, #0
 801a364:	f47f ab56 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a368:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a36c:	463c      	mov	r4, r7
 801a36e:	e41a      	b.n	8019ba6 <_svfprintf_r+0x31e>
 801a370:	9808      	ldr	r0, [sp, #32]
 801a372:	4631      	mov	r1, r6
 801a374:	aa23      	add	r2, sp, #140	; 0x8c
 801a376:	f005 fb3b 	bl	801f9f0 <__ssprint_r>
 801a37a:	2800      	cmp	r0, #0
 801a37c:	f47f ab4a 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a380:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a384:	463c      	mov	r4, r7
 801a386:	e41f      	b.n	8019bc8 <_svfprintf_r+0x340>
 801a388:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801a38c:	9710      	str	r7, [sp, #64]	; 0x40
 801a38e:	f7ff bb93 	b.w	8019ab8 <_svfprintf_r+0x230>
 801a392:	bf00      	nop
 801a394:	0803560c 	.word	0x0803560c
 801a398:	0803562c 	.word	0x0803562c
 801a39c:	08035648 	.word	0x08035648
 801a3a0:	08035608 	.word	0x08035608
 801a3a4:	0803564c 	.word	0x0803564c
 801a3a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a3aa:	46bb      	mov	fp, r7
 801a3ac:	ea4f 1318 	mov.w	r3, r8, lsr #4
 801a3b0:	f008 010f 	and.w	r1, r8, #15
 801a3b4:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 801a3b8:	ea4f 1219 	mov.w	r2, r9, lsr #4
 801a3bc:	4698      	mov	r8, r3
 801a3be:	4691      	mov	r9, r2
 801a3c0:	5c43      	ldrb	r3, [r0, r1]
 801a3c2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801a3c6:	ea58 0309 	orrs.w	r3, r8, r9
 801a3ca:	d1ef      	bne.n	801a3ac <_svfprintf_r+0xb24>
 801a3cc:	465b      	mov	r3, fp
 801a3ce:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 801a3d2:	1afb      	subs	r3, r7, r3
 801a3d4:	930d      	str	r3, [sp, #52]	; 0x34
 801a3d6:	f7ff bb6f 	b.w	8019ab8 <_svfprintf_r+0x230>
 801a3da:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801a3dc:	2d00      	cmp	r5, #0
 801a3de:	f340 8205 	ble.w	801a7ec <_svfprintf_r+0xf64>
 801a3e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a3e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a3e6:	428a      	cmp	r2, r1
 801a3e8:	4613      	mov	r3, r2
 801a3ea:	bfa8      	it	ge
 801a3ec:	460b      	movge	r3, r1
 801a3ee:	461d      	mov	r5, r3
 801a3f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a3f2:	2d00      	cmp	r5, #0
 801a3f4:	eb01 0a02 	add.w	sl, r1, r2
 801a3f8:	dd0b      	ble.n	801a412 <_svfprintf_r+0xb8a>
 801a3fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a3fc:	6021      	str	r1, [r4, #0]
 801a3fe:	3301      	adds	r3, #1
 801a400:	44ab      	add	fp, r5
 801a402:	2b07      	cmp	r3, #7
 801a404:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a408:	6065      	str	r5, [r4, #4]
 801a40a:	9324      	str	r3, [sp, #144]	; 0x90
 801a40c:	f300 834d 	bgt.w	801aaaa <_svfprintf_r+0x1222>
 801a410:	3408      	adds	r4, #8
 801a412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a414:	2d00      	cmp	r5, #0
 801a416:	bfa8      	it	ge
 801a418:	1b5b      	subge	r3, r3, r5
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	461d      	mov	r5, r3
 801a41e:	f340 80f5 	ble.w	801a60c <_svfprintf_r+0xd84>
 801a422:	2d10      	cmp	r5, #16
 801a424:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a426:	f8df 95f4 	ldr.w	r9, [pc, #1524]	; 801aa1c <_svfprintf_r+0x1194>
 801a42a:	f340 81c6 	ble.w	801a7ba <_svfprintf_r+0xf32>
 801a42e:	465a      	mov	r2, fp
 801a430:	f04f 0810 	mov.w	r8, #16
 801a434:	f8dd b020 	ldr.w	fp, [sp, #32]
 801a438:	e004      	b.n	801a444 <_svfprintf_r+0xbbc>
 801a43a:	3408      	adds	r4, #8
 801a43c:	3d10      	subs	r5, #16
 801a43e:	2d10      	cmp	r5, #16
 801a440:	f340 81ba 	ble.w	801a7b8 <_svfprintf_r+0xf30>
 801a444:	3301      	adds	r3, #1
 801a446:	3210      	adds	r2, #16
 801a448:	2b07      	cmp	r3, #7
 801a44a:	9225      	str	r2, [sp, #148]	; 0x94
 801a44c:	9324      	str	r3, [sp, #144]	; 0x90
 801a44e:	f8c4 9000 	str.w	r9, [r4]
 801a452:	f8c4 8004 	str.w	r8, [r4, #4]
 801a456:	ddf0      	ble.n	801a43a <_svfprintf_r+0xbb2>
 801a458:	4658      	mov	r0, fp
 801a45a:	4631      	mov	r1, r6
 801a45c:	aa23      	add	r2, sp, #140	; 0x8c
 801a45e:	f005 fac7 	bl	801f9f0 <__ssprint_r>
 801a462:	2800      	cmp	r0, #0
 801a464:	f47f aad6 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a468:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a46a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a46c:	463c      	mov	r4, r7
 801a46e:	e7e5      	b.n	801a43c <_svfprintf_r+0xbb4>
 801a470:	9808      	ldr	r0, [sp, #32]
 801a472:	4631      	mov	r1, r6
 801a474:	aa23      	add	r2, sp, #140	; 0x8c
 801a476:	f005 fabb 	bl	801f9f0 <__ssprint_r>
 801a47a:	2800      	cmp	r0, #0
 801a47c:	f47f aaca 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a480:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 801a484:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a488:	463c      	mov	r4, r7
 801a48a:	f7ff bb79 	b.w	8019b80 <_svfprintf_r+0x2f8>
 801a48e:	f103 38ff 	add.w	r8, r3, #4294967295
 801a492:	f1b8 0f00 	cmp.w	r8, #0
 801a496:	f77f af2a 	ble.w	801a2ee <_svfprintf_r+0xa66>
 801a49a:	f1b8 0f10 	cmp.w	r8, #16
 801a49e:	f8df 957c 	ldr.w	r9, [pc, #1404]	; 801aa1c <_svfprintf_r+0x1194>
 801a4a2:	dd25      	ble.n	801a4f0 <_svfprintf_r+0xc68>
 801a4a4:	465b      	mov	r3, fp
 801a4a6:	f04f 0a10 	mov.w	sl, #16
 801a4aa:	f8dd b020 	ldr.w	fp, [sp, #32]
 801a4ae:	e006      	b.n	801a4be <_svfprintf_r+0xc36>
 801a4b0:	f1a8 0810 	sub.w	r8, r8, #16
 801a4b4:	f1b8 0f10 	cmp.w	r8, #16
 801a4b8:	f104 0408 	add.w	r4, r4, #8
 801a4bc:	dd17      	ble.n	801a4ee <_svfprintf_r+0xc66>
 801a4be:	3501      	adds	r5, #1
 801a4c0:	3310      	adds	r3, #16
 801a4c2:	2d07      	cmp	r5, #7
 801a4c4:	9325      	str	r3, [sp, #148]	; 0x94
 801a4c6:	9524      	str	r5, [sp, #144]	; 0x90
 801a4c8:	e884 0600 	stmia.w	r4, {r9, sl}
 801a4cc:	ddf0      	ble.n	801a4b0 <_svfprintf_r+0xc28>
 801a4ce:	4658      	mov	r0, fp
 801a4d0:	4631      	mov	r1, r6
 801a4d2:	aa23      	add	r2, sp, #140	; 0x8c
 801a4d4:	f005 fa8c 	bl	801f9f0 <__ssprint_r>
 801a4d8:	2800      	cmp	r0, #0
 801a4da:	f47f aa9b 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a4de:	f1a8 0810 	sub.w	r8, r8, #16
 801a4e2:	f1b8 0f10 	cmp.w	r8, #16
 801a4e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a4e8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801a4ea:	463c      	mov	r4, r7
 801a4ec:	dce7      	bgt.n	801a4be <_svfprintf_r+0xc36>
 801a4ee:	469b      	mov	fp, r3
 801a4f0:	3501      	adds	r5, #1
 801a4f2:	44c3      	add	fp, r8
 801a4f4:	2d07      	cmp	r5, #7
 801a4f6:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a4fa:	9524      	str	r5, [sp, #144]	; 0x90
 801a4fc:	f8c4 9000 	str.w	r9, [r4]
 801a500:	f8c4 8004 	str.w	r8, [r4, #4]
 801a504:	f77f aef2 	ble.w	801a2ec <_svfprintf_r+0xa64>
 801a508:	9808      	ldr	r0, [sp, #32]
 801a50a:	4631      	mov	r1, r6
 801a50c:	aa23      	add	r2, sp, #140	; 0x8c
 801a50e:	f005 fa6f 	bl	801f9f0 <__ssprint_r>
 801a512:	2800      	cmp	r0, #0
 801a514:	f47f aa7e 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a518:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a51c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801a51e:	463c      	mov	r4, r7
 801a520:	e6e5      	b.n	801a2ee <_svfprintf_r+0xa66>
 801a522:	4693      	mov	fp, r2
 801a524:	3301      	adds	r3, #1
 801a526:	44ab      	add	fp, r5
 801a528:	2b07      	cmp	r3, #7
 801a52a:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a52e:	9324      	str	r3, [sp, #144]	; 0x90
 801a530:	f8c4 9000 	str.w	r9, [r4]
 801a534:	6065      	str	r5, [r4, #4]
 801a536:	f77f aba0 	ble.w	8019c7a <_svfprintf_r+0x3f2>
 801a53a:	e6e4      	b.n	801a306 <_svfprintf_r+0xa7e>
 801a53c:	2b30      	cmp	r3, #48	; 0x30
 801a53e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a540:	f43f af47 	beq.w	801a3d2 <_svfprintf_r+0xb4a>
 801a544:	3b01      	subs	r3, #1
 801a546:	461a      	mov	r2, r3
 801a548:	9310      	str	r3, [sp, #64]	; 0x40
 801a54a:	1aba      	subs	r2, r7, r2
 801a54c:	2330      	movs	r3, #48	; 0x30
 801a54e:	920d      	str	r2, [sp, #52]	; 0x34
 801a550:	f801 3c01 	strb.w	r3, [r1, #-1]
 801a554:	f7ff bab0 	b.w	8019ab8 <_svfprintf_r+0x230>
 801a558:	46bb      	mov	fp, r7
 801a55a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 801a55e:	4640      	mov	r0, r8
 801a560:	4649      	mov	r1, r9
 801a562:	220a      	movs	r2, #10
 801a564:	2300      	movs	r3, #0
 801a566:	f7e6 fe17 	bl	8001198 <__aeabi_uldivmod>
 801a56a:	3230      	adds	r2, #48	; 0x30
 801a56c:	4640      	mov	r0, r8
 801a56e:	4649      	mov	r1, r9
 801a570:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801a574:	2300      	movs	r3, #0
 801a576:	220a      	movs	r2, #10
 801a578:	f7e6 fe0e 	bl	8001198 <__aeabi_uldivmod>
 801a57c:	4680      	mov	r8, r0
 801a57e:	4689      	mov	r9, r1
 801a580:	ea58 0309 	orrs.w	r3, r8, r9
 801a584:	d1eb      	bne.n	801a55e <_svfprintf_r+0xcd6>
 801a586:	465b      	mov	r3, fp
 801a588:	1afb      	subs	r3, r7, r3
 801a58a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801a58e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 801a592:	930d      	str	r3, [sp, #52]	; 0x34
 801a594:	f7ff ba90 	b.w	8019ab8 <_svfprintf_r+0x230>
 801a598:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a59a:	680a      	ldr	r2, [r1, #0]
 801a59c:	3104      	adds	r1, #4
 801a59e:	910e      	str	r1, [sp, #56]	; 0x38
 801a5a0:	4690      	mov	r8, r2
 801a5a2:	f04f 0900 	mov.w	r9, #0
 801a5a6:	f7ff ba54 	b.w	8019a52 <_svfprintf_r+0x1ca>
 801a5aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a5ac:	680a      	ldr	r2, [r1, #0]
 801a5ae:	3104      	adds	r1, #4
 801a5b0:	2301      	movs	r3, #1
 801a5b2:	910e      	str	r1, [sp, #56]	; 0x38
 801a5b4:	4690      	mov	r8, r2
 801a5b6:	f04f 0900 	mov.w	r9, #0
 801a5ba:	f7ff ba4a 	b.w	8019a52 <_svfprintf_r+0x1ca>
 801a5be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5c0:	6813      	ldr	r3, [r2, #0]
 801a5c2:	4698      	mov	r8, r3
 801a5c4:	ea4f 79e3 	mov.w	r9, r3, asr #31
 801a5c8:	4613      	mov	r3, r2
 801a5ca:	3304      	adds	r3, #4
 801a5cc:	4642      	mov	r2, r8
 801a5ce:	930e      	str	r3, [sp, #56]	; 0x38
 801a5d0:	2a00      	cmp	r2, #0
 801a5d2:	464b      	mov	r3, r9
 801a5d4:	f173 0300 	sbcs.w	r3, r3, #0
 801a5d8:	f6bf abf5 	bge.w	8019dc6 <_svfprintf_r+0x53e>
 801a5dc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801a5e0:	f1d8 0800 	rsbs	r8, r8, #0
 801a5e4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 801a5e8:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 801a5ec:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801a5f0:	2301      	movs	r3, #1
 801a5f2:	f7ff ba34 	b.w	8019a5e <_svfprintf_r+0x1d6>
 801a5f6:	9808      	ldr	r0, [sp, #32]
 801a5f8:	4631      	mov	r1, r6
 801a5fa:	aa23      	add	r2, sp, #140	; 0x8c
 801a5fc:	f005 f9f8 	bl	801f9f0 <__ssprint_r>
 801a600:	2800      	cmp	r0, #0
 801a602:	f47f aa07 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a606:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a60a:	463c      	mov	r4, r7
 801a60c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a60e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a610:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a612:	440a      	add	r2, r1
 801a614:	4690      	mov	r8, r2
 801a616:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a618:	4293      	cmp	r3, r2
 801a61a:	db46      	blt.n	801a6aa <_svfprintf_r+0xe22>
 801a61c:	9a07      	ldr	r2, [sp, #28]
 801a61e:	07d0      	lsls	r0, r2, #31
 801a620:	d443      	bmi.n	801a6aa <_svfprintf_r+0xe22>
 801a622:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a624:	ebc8 050a 	rsb	r5, r8, sl
 801a628:	1ad3      	subs	r3, r2, r3
 801a62a:	429d      	cmp	r5, r3
 801a62c:	bfa8      	it	ge
 801a62e:	461d      	movge	r5, r3
 801a630:	2d00      	cmp	r5, #0
 801a632:	dd0c      	ble.n	801a64e <_svfprintf_r+0xdc6>
 801a634:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a636:	f8c4 8000 	str.w	r8, [r4]
 801a63a:	3201      	adds	r2, #1
 801a63c:	44ab      	add	fp, r5
 801a63e:	2a07      	cmp	r2, #7
 801a640:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a644:	6065      	str	r5, [r4, #4]
 801a646:	9224      	str	r2, [sp, #144]	; 0x90
 801a648:	f300 8267 	bgt.w	801ab1a <_svfprintf_r+0x1292>
 801a64c:	3408      	adds	r4, #8
 801a64e:	2d00      	cmp	r5, #0
 801a650:	bfac      	ite	ge
 801a652:	1b5d      	subge	r5, r3, r5
 801a654:	461d      	movlt	r5, r3
 801a656:	2d00      	cmp	r5, #0
 801a658:	f77f ab10 	ble.w	8019c7c <_svfprintf_r+0x3f4>
 801a65c:	2d10      	cmp	r5, #16
 801a65e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a660:	f8df 93b8 	ldr.w	r9, [pc, #952]	; 801aa1c <_svfprintf_r+0x1194>
 801a664:	f77f af5e 	ble.w	801a524 <_svfprintf_r+0xc9c>
 801a668:	f04f 0810 	mov.w	r8, #16
 801a66c:	465a      	mov	r2, fp
 801a66e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a672:	e004      	b.n	801a67e <_svfprintf_r+0xdf6>
 801a674:	3408      	adds	r4, #8
 801a676:	3d10      	subs	r5, #16
 801a678:	2d10      	cmp	r5, #16
 801a67a:	f77f af52 	ble.w	801a522 <_svfprintf_r+0xc9a>
 801a67e:	3301      	adds	r3, #1
 801a680:	3210      	adds	r2, #16
 801a682:	2b07      	cmp	r3, #7
 801a684:	9225      	str	r2, [sp, #148]	; 0x94
 801a686:	9324      	str	r3, [sp, #144]	; 0x90
 801a688:	f8c4 9000 	str.w	r9, [r4]
 801a68c:	f8c4 8004 	str.w	r8, [r4, #4]
 801a690:	ddf0      	ble.n	801a674 <_svfprintf_r+0xdec>
 801a692:	4650      	mov	r0, sl
 801a694:	4631      	mov	r1, r6
 801a696:	aa23      	add	r2, sp, #140	; 0x8c
 801a698:	f005 f9aa 	bl	801f9f0 <__ssprint_r>
 801a69c:	2800      	cmp	r0, #0
 801a69e:	f47f a9b9 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a6a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a6a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a6a6:	463c      	mov	r4, r7
 801a6a8:	e7e5      	b.n	801a676 <_svfprintf_r+0xdee>
 801a6aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a6ac:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a6ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a6b0:	6021      	str	r1, [r4, #0]
 801a6b2:	3201      	adds	r2, #1
 801a6b4:	4483      	add	fp, r0
 801a6b6:	2a07      	cmp	r2, #7
 801a6b8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a6bc:	6060      	str	r0, [r4, #4]
 801a6be:	9224      	str	r2, [sp, #144]	; 0x90
 801a6c0:	f300 820a 	bgt.w	801aad8 <_svfprintf_r+0x1250>
 801a6c4:	3408      	adds	r4, #8
 801a6c6:	e7ac      	b.n	801a622 <_svfprintf_r+0xd9a>
 801a6c8:	9b07      	ldr	r3, [sp, #28]
 801a6ca:	07d9      	lsls	r1, r3, #31
 801a6cc:	f53f addc 	bmi.w	801a288 <_svfprintf_r+0xa00>
 801a6d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a6d2:	6023      	str	r3, [r4, #0]
 801a6d4:	3501      	adds	r5, #1
 801a6d6:	f10b 0b01 	add.w	fp, fp, #1
 801a6da:	2301      	movs	r3, #1
 801a6dc:	2d07      	cmp	r5, #7
 801a6de:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a6e2:	9524      	str	r5, [sp, #144]	; 0x90
 801a6e4:	6063      	str	r3, [r4, #4]
 801a6e6:	f77f ae01 	ble.w	801a2ec <_svfprintf_r+0xa64>
 801a6ea:	e70d      	b.n	801a508 <_svfprintf_r+0xc80>
 801a6ec:	9808      	ldr	r0, [sp, #32]
 801a6ee:	4631      	mov	r1, r6
 801a6f0:	aa23      	add	r2, sp, #140	; 0x8c
 801a6f2:	f005 f97d 	bl	801f9f0 <__ssprint_r>
 801a6f6:	2800      	cmp	r0, #0
 801a6f8:	f47f a98c 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a6fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a6fe:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801a700:	463c      	mov	r4, r7
 801a702:	e5ce      	b.n	801a2a2 <_svfprintf_r+0xa1a>
 801a704:	9808      	ldr	r0, [sp, #32]
 801a706:	4631      	mov	r1, r6
 801a708:	aa23      	add	r2, sp, #140	; 0x8c
 801a70a:	f005 f971 	bl	801f9f0 <__ssprint_r>
 801a70e:	2800      	cmp	r0, #0
 801a710:	f47f a980 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a714:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a718:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801a71a:	463c      	mov	r4, r7
 801a71c:	e5cf      	b.n	801a2be <_svfprintf_r+0xa36>
 801a71e:	9808      	ldr	r0, [sp, #32]
 801a720:	4631      	mov	r1, r6
 801a722:	aa23      	add	r2, sp, #140	; 0x8c
 801a724:	f005 f964 	bl	801f9f0 <__ssprint_r>
 801a728:	2800      	cmp	r0, #0
 801a72a:	f47f a973 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a72e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a732:	463c      	mov	r4, r7
 801a734:	f7ff ba4c 	b.w	8019bd0 <_svfprintf_r+0x348>
 801a738:	f7fe fe5a 	bl	80193f0 <__fpclassifyd>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	f040 80c7 	bne.w	801a8d0 <_svfprintf_r+0x1048>
 801a742:	4686      	mov	lr, r0
 801a744:	4ab2      	ldr	r2, [pc, #712]	; (801aa10 <_svfprintf_r+0x1188>)
 801a746:	4bb3      	ldr	r3, [pc, #716]	; (801aa14 <_svfprintf_r+0x118c>)
 801a748:	9011      	str	r0, [sp, #68]	; 0x44
 801a74a:	9807      	ldr	r0, [sp, #28]
 801a74c:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 801a750:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 801a754:	2103      	movs	r1, #3
 801a756:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801a75a:	2d47      	cmp	r5, #71	; 0x47
 801a75c:	bfd8      	it	le
 801a75e:	461a      	movle	r2, r3
 801a760:	9109      	str	r1, [sp, #36]	; 0x24
 801a762:	9007      	str	r0, [sp, #28]
 801a764:	9210      	str	r2, [sp, #64]	; 0x40
 801a766:	910d      	str	r1, [sp, #52]	; 0x34
 801a768:	f7ff b9ae 	b.w	8019ac8 <_svfprintf_r+0x240>
 801a76c:	9b07      	ldr	r3, [sp, #28]
 801a76e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a770:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a774:	4613      	mov	r3, r2
 801a776:	f43f ac2e 	beq.w	8019fd6 <_svfprintf_r+0x74e>
 801a77a:	3304      	adds	r3, #4
 801a77c:	f8b2 8000 	ldrh.w	r8, [r2]
 801a780:	930e      	str	r3, [sp, #56]	; 0x38
 801a782:	f04f 0900 	mov.w	r9, #0
 801a786:	f7ff bb37 	b.w	8019df8 <_svfprintf_r+0x570>
 801a78a:	9b07      	ldr	r3, [sp, #28]
 801a78c:	06db      	lsls	r3, r3, #27
 801a78e:	d40b      	bmi.n	801a7a8 <_svfprintf_r+0xf20>
 801a790:	9b07      	ldr	r3, [sp, #28]
 801a792:	065d      	lsls	r5, r3, #25
 801a794:	d508      	bpl.n	801a7a8 <_svfprintf_r+0xf20>
 801a796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a798:	6813      	ldr	r3, [r2, #0]
 801a79a:	3204      	adds	r2, #4
 801a79c:	920e      	str	r2, [sp, #56]	; 0x38
 801a79e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a7a2:	801a      	strh	r2, [r3, #0]
 801a7a4:	f7ff b895 	b.w	80198d2 <_svfprintf_r+0x4a>
 801a7a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a7aa:	6813      	ldr	r3, [r2, #0]
 801a7ac:	3204      	adds	r2, #4
 801a7ae:	920e      	str	r2, [sp, #56]	; 0x38
 801a7b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a7b2:	601a      	str	r2, [r3, #0]
 801a7b4:	f7ff b88d 	b.w	80198d2 <_svfprintf_r+0x4a>
 801a7b8:	4693      	mov	fp, r2
 801a7ba:	3301      	adds	r3, #1
 801a7bc:	44ab      	add	fp, r5
 801a7be:	2b07      	cmp	r3, #7
 801a7c0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a7c4:	9324      	str	r3, [sp, #144]	; 0x90
 801a7c6:	f8c4 9000 	str.w	r9, [r4]
 801a7ca:	6065      	str	r5, [r4, #4]
 801a7cc:	f73f af13 	bgt.w	801a5f6 <_svfprintf_r+0xd6e>
 801a7d0:	3408      	adds	r4, #8
 801a7d2:	e71b      	b.n	801a60c <_svfprintf_r+0xd84>
 801a7d4:	9808      	ldr	r0, [sp, #32]
 801a7d6:	4631      	mov	r1, r6
 801a7d8:	aa23      	add	r2, sp, #140	; 0x8c
 801a7da:	f005 f909 	bl	801f9f0 <__ssprint_r>
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	f47f a918 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a7e4:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a7e8:	463c      	mov	r4, r7
 801a7ea:	e4c0      	b.n	801a16e <_svfprintf_r+0x8e6>
 801a7ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a7ee:	4a8a      	ldr	r2, [pc, #552]	; (801aa18 <_svfprintf_r+0x1190>)
 801a7f0:	6022      	str	r2, [r4, #0]
 801a7f2:	3301      	adds	r3, #1
 801a7f4:	f10b 0b01 	add.w	fp, fp, #1
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	2b07      	cmp	r3, #7
 801a7fc:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801a800:	9324      	str	r3, [sp, #144]	; 0x90
 801a802:	6062      	str	r2, [r4, #4]
 801a804:	f300 80f4 	bgt.w	801a9f0 <_svfprintf_r+0x1168>
 801a808:	3408      	adds	r4, #8
 801a80a:	b92d      	cbnz	r5, 801a818 <_svfprintf_r+0xf90>
 801a80c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a80e:	b91b      	cbnz	r3, 801a818 <_svfprintf_r+0xf90>
 801a810:	9b07      	ldr	r3, [sp, #28]
 801a812:	07db      	lsls	r3, r3, #31
 801a814:	f57f aa32 	bpl.w	8019c7c <_svfprintf_r+0x3f4>
 801a818:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a81a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a81c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a81e:	6022      	str	r2, [r4, #0]
 801a820:	3301      	adds	r3, #1
 801a822:	eb0b 0100 	add.w	r1, fp, r0
 801a826:	2b07      	cmp	r3, #7
 801a828:	9125      	str	r1, [sp, #148]	; 0x94
 801a82a:	6060      	str	r0, [r4, #4]
 801a82c:	9324      	str	r3, [sp, #144]	; 0x90
 801a82e:	f300 81f3 	bgt.w	801ac18 <_svfprintf_r+0x1390>
 801a832:	f104 0208 	add.w	r2, r4, #8
 801a836:	426d      	negs	r5, r5
 801a838:	2d00      	cmp	r5, #0
 801a83a:	f340 80fc 	ble.w	801aa36 <_svfprintf_r+0x11ae>
 801a83e:	2d10      	cmp	r5, #16
 801a840:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801aa1c <_svfprintf_r+0x1194>
 801a844:	f340 813d 	ble.w	801aac2 <_svfprintf_r+0x123a>
 801a848:	2410      	movs	r4, #16
 801a84a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a84e:	e004      	b.n	801a85a <_svfprintf_r+0xfd2>
 801a850:	3208      	adds	r2, #8
 801a852:	3d10      	subs	r5, #16
 801a854:	2d10      	cmp	r5, #16
 801a856:	f340 8134 	ble.w	801aac2 <_svfprintf_r+0x123a>
 801a85a:	3301      	adds	r3, #1
 801a85c:	3110      	adds	r1, #16
 801a85e:	2b07      	cmp	r3, #7
 801a860:	9125      	str	r1, [sp, #148]	; 0x94
 801a862:	9324      	str	r3, [sp, #144]	; 0x90
 801a864:	f8c2 9000 	str.w	r9, [r2]
 801a868:	6054      	str	r4, [r2, #4]
 801a86a:	ddf1      	ble.n	801a850 <_svfprintf_r+0xfc8>
 801a86c:	4640      	mov	r0, r8
 801a86e:	4631      	mov	r1, r6
 801a870:	aa23      	add	r2, sp, #140	; 0x8c
 801a872:	f005 f8bd 	bl	801f9f0 <__ssprint_r>
 801a876:	2800      	cmp	r0, #0
 801a878:	f47f a8cc 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a87c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801a87e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a880:	463a      	mov	r2, r7
 801a882:	e7e6      	b.n	801a852 <_svfprintf_r+0xfca>
 801a884:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a886:	46b1      	mov	r9, r6
 801a888:	2b00      	cmp	r3, #0
 801a88a:	f43f a8c4 	beq.w	8019a16 <_svfprintf_r+0x18e>
 801a88e:	9808      	ldr	r0, [sp, #32]
 801a890:	4631      	mov	r1, r6
 801a892:	aa23      	add	r2, sp, #140	; 0x8c
 801a894:	f005 f8ac 	bl	801f9f0 <__ssprint_r>
 801a898:	f7ff b8bd 	b.w	8019a16 <_svfprintf_r+0x18e>
 801a89c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a89e:	910e      	str	r1, [sp, #56]	; 0x38
 801a8a0:	4240      	negs	r0, r0
 801a8a2:	900c      	str	r0, [sp, #48]	; 0x30
 801a8a4:	4619      	mov	r1, r3
 801a8a6:	f7ff ba3f 	b.w	8019d28 <_svfprintf_r+0x4a0>
 801a8aa:	f041 0120 	orr.w	r1, r1, #32
 801a8ae:	9107      	str	r1, [sp, #28]
 801a8b0:	785d      	ldrb	r5, [r3, #1]
 801a8b2:	1c59      	adds	r1, r3, #1
 801a8b4:	f7ff b83b 	b.w	801992e <_svfprintf_r+0xa6>
 801a8b8:	9808      	ldr	r0, [sp, #32]
 801a8ba:	4631      	mov	r1, r6
 801a8bc:	aa23      	add	r2, sp, #140	; 0x8c
 801a8be:	f005 f897 	bl	801f9f0 <__ssprint_r>
 801a8c2:	2800      	cmp	r0, #0
 801a8c4:	f47f a8a6 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801a8c8:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801a8cc:	463c      	mov	r4, r7
 801a8ce:	e464      	b.n	801a19a <_svfprintf_r+0x912>
 801a8d0:	f025 0320 	bic.w	r3, r5, #32
 801a8d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a8d8:	930d      	str	r3, [sp, #52]	; 0x34
 801a8da:	f000 8096 	beq.w	801aa0a <_svfprintf_r+0x1182>
 801a8de:	2b47      	cmp	r3, #71	; 0x47
 801a8e0:	d105      	bne.n	801a8ee <_svfprintf_r+0x1066>
 801a8e2:	f1ba 0f00 	cmp.w	sl, #0
 801a8e6:	bf14      	ite	ne
 801a8e8:	46d3      	movne	fp, sl
 801a8ea:	f04f 0b01 	moveq.w	fp, #1
 801a8ee:	9b07      	ldr	r3, [sp, #28]
 801a8f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a8f4:	9311      	str	r3, [sp, #68]	; 0x44
 801a8f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a8f8:	f1b3 0a00 	subs.w	sl, r3, #0
 801a8fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a8fe:	9309      	str	r3, [sp, #36]	; 0x24
 801a900:	bfbb      	ittet	lt
 801a902:	4653      	movlt	r3, sl
 801a904:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
 801a908:	2300      	movge	r3, #0
 801a90a:	232d      	movlt	r3, #45	; 0x2d
 801a90c:	2d66      	cmp	r5, #102	; 0x66
 801a90e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a910:	f000 80ac 	beq.w	801aa6c <_svfprintf_r+0x11e4>
 801a914:	2d46      	cmp	r5, #70	; 0x46
 801a916:	f000 80a9 	beq.w	801aa6c <_svfprintf_r+0x11e4>
 801a91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a91c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a91e:	2b45      	cmp	r3, #69	; 0x45
 801a920:	bf0c      	ite	eq
 801a922:	f10b 0901 	addeq.w	r9, fp, #1
 801a926:	46d9      	movne	r9, fp
 801a928:	2002      	movs	r0, #2
 801a92a:	a91d      	add	r1, sp, #116	; 0x74
 801a92c:	e88d 0201 	stmia.w	sp, {r0, r9}
 801a930:	9102      	str	r1, [sp, #8]
 801a932:	a81e      	add	r0, sp, #120	; 0x78
 801a934:	a921      	add	r1, sp, #132	; 0x84
 801a936:	9003      	str	r0, [sp, #12]
 801a938:	4653      	mov	r3, sl
 801a93a:	9104      	str	r1, [sp, #16]
 801a93c:	9808      	ldr	r0, [sp, #32]
 801a93e:	f002 fba3 	bl	801d088 <_dtoa_r>
 801a942:	2d67      	cmp	r5, #103	; 0x67
 801a944:	9010      	str	r0, [sp, #64]	; 0x40
 801a946:	d002      	beq.n	801a94e <_svfprintf_r+0x10c6>
 801a948:	2d47      	cmp	r5, #71	; 0x47
 801a94a:	f040 809f 	bne.w	801aa8c <_svfprintf_r+0x1204>
 801a94e:	9b07      	ldr	r3, [sp, #28]
 801a950:	07db      	lsls	r3, r3, #31
 801a952:	f140 8189 	bpl.w	801ac68 <_svfprintf_r+0x13e0>
 801a956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a958:	eb03 0809 	add.w	r8, r3, r9
 801a95c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a95e:	4651      	mov	r1, sl
 801a960:	2200      	movs	r2, #0
 801a962:	2300      	movs	r3, #0
 801a964:	f7e6 f830 	bl	80009c8 <__aeabi_dcmpeq>
 801a968:	2800      	cmp	r0, #0
 801a96a:	f040 80fd 	bne.w	801ab68 <_svfprintf_r+0x12e0>
 801a96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a970:	4598      	cmp	r8, r3
 801a972:	d906      	bls.n	801a982 <_svfprintf_r+0x10fa>
 801a974:	2130      	movs	r1, #48	; 0x30
 801a976:	1c5a      	adds	r2, r3, #1
 801a978:	9221      	str	r2, [sp, #132]	; 0x84
 801a97a:	7019      	strb	r1, [r3, #0]
 801a97c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a97e:	4598      	cmp	r8, r3
 801a980:	d8f9      	bhi.n	801a976 <_svfprintf_r+0x10ee>
 801a982:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a984:	1a9b      	subs	r3, r3, r2
 801a986:	9313      	str	r3, [sp, #76]	; 0x4c
 801a988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a98a:	2b47      	cmp	r3, #71	; 0x47
 801a98c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a98e:	f000 80de 	beq.w	801ab4e <_svfprintf_r+0x12c6>
 801a992:	2d65      	cmp	r5, #101	; 0x65
 801a994:	f340 80f8 	ble.w	801ab88 <_svfprintf_r+0x1300>
 801a998:	2d66      	cmp	r5, #102	; 0x66
 801a99a:	9312      	str	r3, [sp, #72]	; 0x48
 801a99c:	f000 8157 	beq.w	801ac4e <_svfprintf_r+0x13c6>
 801a9a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a9a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9a4:	4293      	cmp	r3, r2
 801a9a6:	f300 8144 	bgt.w	801ac32 <_svfprintf_r+0x13aa>
 801a9aa:	9b07      	ldr	r3, [sp, #28]
 801a9ac:	07d9      	lsls	r1, r3, #31
 801a9ae:	f100 8173 	bmi.w	801ac98 <_svfprintf_r+0x1410>
 801a9b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a9b6:	920d      	str	r2, [sp, #52]	; 0x34
 801a9b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a9ba:	2a00      	cmp	r2, #0
 801a9bc:	f040 80bc 	bne.w	801ab38 <_svfprintf_r+0x12b0>
 801a9c0:	9309      	str	r3, [sp, #36]	; 0x24
 801a9c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a9c4:	9307      	str	r3, [sp, #28]
 801a9c6:	9211      	str	r2, [sp, #68]	; 0x44
 801a9c8:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 801a9cc:	f7ff b87c 	b.w	8019ac8 <_svfprintf_r+0x240>
 801a9d0:	9808      	ldr	r0, [sp, #32]
 801a9d2:	2140      	movs	r1, #64	; 0x40
 801a9d4:	f003 ffa8 	bl	801e928 <_malloc_r>
 801a9d8:	f8c9 0000 	str.w	r0, [r9]
 801a9dc:	f8c9 0010 	str.w	r0, [r9, #16]
 801a9e0:	2800      	cmp	r0, #0
 801a9e2:	f000 818c 	beq.w	801acfe <_svfprintf_r+0x1476>
 801a9e6:	2340      	movs	r3, #64	; 0x40
 801a9e8:	f8c9 3014 	str.w	r3, [r9, #20]
 801a9ec:	f7fe bf64 	b.w	80198b8 <_svfprintf_r+0x30>
 801a9f0:	9808      	ldr	r0, [sp, #32]
 801a9f2:	4631      	mov	r1, r6
 801a9f4:	aa23      	add	r2, sp, #140	; 0x8c
 801a9f6:	f004 fffb 	bl	801f9f0 <__ssprint_r>
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	f47f a80a 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801aa00:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801aa02:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801aa06:	463c      	mov	r4, r7
 801aa08:	e6ff      	b.n	801a80a <_svfprintf_r+0xf82>
 801aa0a:	f04f 0b06 	mov.w	fp, #6
 801aa0e:	e76e      	b.n	801a8ee <_svfprintf_r+0x1066>
 801aa10:	08035614 	.word	0x08035614
 801aa14:	08035610 	.word	0x08035610
 801aa18:	08035648 	.word	0x08035648
 801aa1c:	0803564c 	.word	0x0803564c
 801aa20:	9808      	ldr	r0, [sp, #32]
 801aa22:	4631      	mov	r1, r6
 801aa24:	aa23      	add	r2, sp, #140	; 0x8c
 801aa26:	f004 ffe3 	bl	801f9f0 <__ssprint_r>
 801aa2a:	2800      	cmp	r0, #0
 801aa2c:	f47e aff2 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801aa30:	9925      	ldr	r1, [sp, #148]	; 0x94
 801aa32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801aa34:	463a      	mov	r2, r7
 801aa36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aa38:	6054      	str	r4, [r2, #4]
 801aa3a:	3301      	adds	r3, #1
 801aa3c:	eb01 0b04 	add.w	fp, r1, r4
 801aa40:	2b07      	cmp	r3, #7
 801aa42:	9910      	ldr	r1, [sp, #64]	; 0x40
 801aa44:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
 801aa48:	9324      	str	r3, [sp, #144]	; 0x90
 801aa4a:	6011      	str	r1, [r2, #0]
 801aa4c:	f73f ac5b 	bgt.w	801a306 <_svfprintf_r+0xa7e>
 801aa50:	f102 0408 	add.w	r4, r2, #8
 801aa54:	f7ff b912 	b.w	8019c7c <_svfprintf_r+0x3f4>
 801aa58:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801aa5c:	f7fe fee6 	bl	801982c <strlen>
 801aa60:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801aa64:	900d      	str	r0, [sp, #52]	; 0x34
 801aa66:	4603      	mov	r3, r0
 801aa68:	f7ff ba1b 	b.w	8019ea2 <_svfprintf_r+0x61a>
 801aa6c:	2003      	movs	r0, #3
 801aa6e:	a91d      	add	r1, sp, #116	; 0x74
 801aa70:	e88d 0801 	stmia.w	sp, {r0, fp}
 801aa74:	9102      	str	r1, [sp, #8]
 801aa76:	a81e      	add	r0, sp, #120	; 0x78
 801aa78:	a921      	add	r1, sp, #132	; 0x84
 801aa7a:	9003      	str	r0, [sp, #12]
 801aa7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa7e:	9104      	str	r1, [sp, #16]
 801aa80:	4653      	mov	r3, sl
 801aa82:	9808      	ldr	r0, [sp, #32]
 801aa84:	f002 fb00 	bl	801d088 <_dtoa_r>
 801aa88:	46d9      	mov	r9, fp
 801aa8a:	9010      	str	r0, [sp, #64]	; 0x40
 801aa8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa8e:	eb03 0809 	add.w	r8, r3, r9
 801aa92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa94:	2b46      	cmp	r3, #70	; 0x46
 801aa96:	f47f af61 	bne.w	801a95c <_svfprintf_r+0x10d4>
 801aa9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa9c:	781b      	ldrb	r3, [r3, #0]
 801aa9e:	2b30      	cmp	r3, #48	; 0x30
 801aaa0:	f000 80e4 	beq.w	801ac6c <_svfprintf_r+0x13e4>
 801aaa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aaa6:	4498      	add	r8, r3
 801aaa8:	e758      	b.n	801a95c <_svfprintf_r+0x10d4>
 801aaaa:	9808      	ldr	r0, [sp, #32]
 801aaac:	4631      	mov	r1, r6
 801aaae:	aa23      	add	r2, sp, #140	; 0x8c
 801aab0:	f004 ff9e 	bl	801f9f0 <__ssprint_r>
 801aab4:	2800      	cmp	r0, #0
 801aab6:	f47e afad 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801aaba:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801aabe:	463c      	mov	r4, r7
 801aac0:	e4a7      	b.n	801a412 <_svfprintf_r+0xb8a>
 801aac2:	3301      	adds	r3, #1
 801aac4:	4429      	add	r1, r5
 801aac6:	2b07      	cmp	r3, #7
 801aac8:	9125      	str	r1, [sp, #148]	; 0x94
 801aaca:	9324      	str	r3, [sp, #144]	; 0x90
 801aacc:	f8c2 9000 	str.w	r9, [r2]
 801aad0:	6055      	str	r5, [r2, #4]
 801aad2:	dca5      	bgt.n	801aa20 <_svfprintf_r+0x1198>
 801aad4:	3208      	adds	r2, #8
 801aad6:	e7ae      	b.n	801aa36 <_svfprintf_r+0x11ae>
 801aad8:	9808      	ldr	r0, [sp, #32]
 801aada:	4631      	mov	r1, r6
 801aadc:	aa23      	add	r2, sp, #140	; 0x8c
 801aade:	f004 ff87 	bl	801f9f0 <__ssprint_r>
 801aae2:	2800      	cmp	r0, #0
 801aae4:	f47e af96 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801aae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aaea:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801aaee:	463c      	mov	r4, r7
 801aaf0:	e597      	b.n	801a622 <_svfprintf_r+0xd9a>
 801aaf2:	4653      	mov	r3, sl
 801aaf4:	2b06      	cmp	r3, #6
 801aaf6:	bf28      	it	cs
 801aaf8:	2306      	movcs	r3, #6
 801aafa:	930d      	str	r3, [sp, #52]	; 0x34
 801aafc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab00:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 801ab04:	9309      	str	r3, [sp, #36]	; 0x24
 801ab06:	4b83      	ldr	r3, [pc, #524]	; (801ad14 <_svfprintf_r+0x148c>)
 801ab08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801ab0c:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 801ab10:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801ab14:	9310      	str	r3, [sp, #64]	; 0x40
 801ab16:	f7fe bfd7 	b.w	8019ac8 <_svfprintf_r+0x240>
 801ab1a:	9808      	ldr	r0, [sp, #32]
 801ab1c:	4631      	mov	r1, r6
 801ab1e:	aa23      	add	r2, sp, #140	; 0x8c
 801ab20:	f004 ff66 	bl	801f9f0 <__ssprint_r>
 801ab24:	2800      	cmp	r0, #0
 801ab26:	f47e af75 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801ab2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ab2e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 801ab32:	1ad3      	subs	r3, r2, r3
 801ab34:	463c      	mov	r4, r7
 801ab36:	e58a      	b.n	801a64e <_svfprintf_r+0xdc6>
 801ab38:	9309      	str	r3, [sp, #36]	; 0x24
 801ab3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ab3c:	9307      	str	r3, [sp, #28]
 801ab3e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801ab42:	2300      	movs	r3, #0
 801ab44:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 801ab48:	9311      	str	r3, [sp, #68]	; 0x44
 801ab4a:	f7fe bfc0 	b.w	8019ace <_svfprintf_r+0x246>
 801ab4e:	1cda      	adds	r2, r3, #3
 801ab50:	db19      	blt.n	801ab86 <_svfprintf_r+0x12fe>
 801ab52:	459b      	cmp	fp, r3
 801ab54:	db17      	blt.n	801ab86 <_svfprintf_r+0x12fe>
 801ab56:	9312      	str	r3, [sp, #72]	; 0x48
 801ab58:	2567      	movs	r5, #103	; 0x67
 801ab5a:	e721      	b.n	801a9a0 <_svfprintf_r+0x1118>
 801ab5c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801ab60:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
 801ab64:	f7ff ba98 	b.w	801a098 <_svfprintf_r+0x810>
 801ab68:	4643      	mov	r3, r8
 801ab6a:	e70a      	b.n	801a982 <_svfprintf_r+0x10fa>
 801ab6c:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801ab70:	9011      	str	r0, [sp, #68]	; 0x44
 801ab72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801ab76:	9012      	str	r0, [sp, #72]	; 0x48
 801ab78:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
 801ab7c:	9309      	str	r3, [sp, #36]	; 0x24
 801ab7e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ab82:	f7fe bfa1 	b.w	8019ac8 <_svfprintf_r+0x240>
 801ab86:	3d02      	subs	r5, #2
 801ab88:	3b01      	subs	r3, #1
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	931d      	str	r3, [sp, #116]	; 0x74
 801ab8e:	bfba      	itte	lt
 801ab90:	425b      	neglt	r3, r3
 801ab92:	222d      	movlt	r2, #45	; 0x2d
 801ab94:	222b      	movge	r2, #43	; 0x2b
 801ab96:	2b09      	cmp	r3, #9
 801ab98:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
 801ab9c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 801aba0:	dd72      	ble.n	801ac88 <_svfprintf_r+0x1400>
 801aba2:	f10d 0e8b 	add.w	lr, sp, #139	; 0x8b
 801aba6:	4670      	mov	r0, lr
 801aba8:	4a5b      	ldr	r2, [pc, #364]	; (801ad18 <_svfprintf_r+0x1490>)
 801abaa:	fb82 2103 	smull	r2, r1, r2, r3
 801abae:	17da      	asrs	r2, r3, #31
 801abb0:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801abb4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801abb8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 801abbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801abc0:	2a09      	cmp	r2, #9
 801abc2:	4613      	mov	r3, r2
 801abc4:	f800 1d01 	strb.w	r1, [r0, #-1]!
 801abc8:	dcee      	bgt.n	801aba8 <_svfprintf_r+0x1320>
 801abca:	4602      	mov	r2, r0
 801abcc:	3330      	adds	r3, #48	; 0x30
 801abce:	b2d9      	uxtb	r1, r3
 801abd0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801abd4:	4596      	cmp	lr, r2
 801abd6:	f240 8099 	bls.w	801ad0c <_svfprintf_r+0x1484>
 801abda:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 801abde:	4603      	mov	r3, r0
 801abe0:	e001      	b.n	801abe6 <_svfprintf_r+0x135e>
 801abe2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801abe6:	f802 1b01 	strb.w	r1, [r2], #1
 801abea:	4573      	cmp	r3, lr
 801abec:	d1f9      	bne.n	801abe2 <_svfprintf_r+0x135a>
 801abee:	ab23      	add	r3, sp, #140	; 0x8c
 801abf0:	1a1b      	subs	r3, r3, r0
 801abf2:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 801abf6:	4413      	add	r3, r2
 801abf8:	aa1f      	add	r2, sp, #124	; 0x7c
 801abfa:	1a9b      	subs	r3, r3, r2
 801abfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801abfe:	9319      	str	r3, [sp, #100]	; 0x64
 801ac00:	2a01      	cmp	r2, #1
 801ac02:	4413      	add	r3, r2
 801ac04:	930d      	str	r3, [sp, #52]	; 0x34
 801ac06:	dd6b      	ble.n	801ace0 <_svfprintf_r+0x1458>
 801ac08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	3301      	adds	r3, #1
 801ac0e:	930d      	str	r3, [sp, #52]	; 0x34
 801ac10:	9212      	str	r2, [sp, #72]	; 0x48
 801ac12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac16:	e6cf      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801ac18:	9808      	ldr	r0, [sp, #32]
 801ac1a:	4631      	mov	r1, r6
 801ac1c:	aa23      	add	r2, sp, #140	; 0x8c
 801ac1e:	f004 fee7 	bl	801f9f0 <__ssprint_r>
 801ac22:	2800      	cmp	r0, #0
 801ac24:	f47e aef6 	bne.w	8019a14 <_svfprintf_r+0x18c>
 801ac28:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ac2a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801ac2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ac2e:	463a      	mov	r2, r7
 801ac30:	e601      	b.n	801a836 <_svfprintf_r+0xfae>
 801ac32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	bfd8      	it	le
 801ac38:	f1c3 0802 	rsble	r8, r3, #2
 801ac3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ac3e:	bfc8      	it	gt
 801ac40:	f04f 0801 	movgt.w	r8, #1
 801ac44:	4443      	add	r3, r8
 801ac46:	930d      	str	r3, [sp, #52]	; 0x34
 801ac48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac4c:	e6b4      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	dd30      	ble.n	801acb4 <_svfprintf_r+0x142c>
 801ac52:	f1bb 0f00 	cmp.w	fp, #0
 801ac56:	d125      	bne.n	801aca4 <_svfprintf_r+0x141c>
 801ac58:	9b07      	ldr	r3, [sp, #28]
 801ac5a:	07db      	lsls	r3, r3, #31
 801ac5c:	d422      	bmi.n	801aca4 <_svfprintf_r+0x141c>
 801ac5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac60:	920d      	str	r2, [sp, #52]	; 0x34
 801ac62:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ac66:	e6a7      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801ac68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ac6a:	e68a      	b.n	801a982 <_svfprintf_r+0x10fa>
 801ac6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ac6e:	4651      	mov	r1, sl
 801ac70:	2200      	movs	r2, #0
 801ac72:	2300      	movs	r3, #0
 801ac74:	f7e5 fea8 	bl	80009c8 <__aeabi_dcmpeq>
 801ac78:	2800      	cmp	r0, #0
 801ac7a:	f47f af13 	bne.w	801aaa4 <_svfprintf_r+0x121c>
 801ac7e:	f1c9 0301 	rsb	r3, r9, #1
 801ac82:	931d      	str	r3, [sp, #116]	; 0x74
 801ac84:	4498      	add	r8, r3
 801ac86:	e669      	b.n	801a95c <_svfprintf_r+0x10d4>
 801ac88:	3330      	adds	r3, #48	; 0x30
 801ac8a:	2230      	movs	r2, #48	; 0x30
 801ac8c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 801ac90:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 801ac94:	ab20      	add	r3, sp, #128	; 0x80
 801ac96:	e7af      	b.n	801abf8 <_svfprintf_r+0x1370>
 801ac98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ac9a:	3301      	adds	r3, #1
 801ac9c:	930d      	str	r3, [sp, #52]	; 0x34
 801ac9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aca2:	e689      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801aca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aca6:	f10b 0801 	add.w	r8, fp, #1
 801acaa:	4443      	add	r3, r8
 801acac:	930d      	str	r3, [sp, #52]	; 0x34
 801acae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acb2:	e681      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801acb4:	f1bb 0f00 	cmp.w	fp, #0
 801acb8:	d11b      	bne.n	801acf2 <_svfprintf_r+0x146a>
 801acba:	9b07      	ldr	r3, [sp, #28]
 801acbc:	07d8      	lsls	r0, r3, #31
 801acbe:	d418      	bmi.n	801acf2 <_svfprintf_r+0x146a>
 801acc0:	2301      	movs	r3, #1
 801acc2:	930d      	str	r3, [sp, #52]	; 0x34
 801acc4:	e678      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801acc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801acc8:	f8d5 a000 	ldr.w	sl, [r5]
 801accc:	4628      	mov	r0, r5
 801acce:	3004      	adds	r0, #4
 801acd0:	f1ba 0f00 	cmp.w	sl, #0
 801acd4:	785d      	ldrb	r5, [r3, #1]
 801acd6:	900e      	str	r0, [sp, #56]	; 0x38
 801acd8:	f6be ae29 	bge.w	801992e <_svfprintf_r+0xa6>
 801acdc:	f7fe be25 	b.w	801992a <_svfprintf_r+0xa2>
 801ace0:	9b07      	ldr	r3, [sp, #28]
 801ace2:	f013 0301 	ands.w	r3, r3, #1
 801ace6:	d18f      	bne.n	801ac08 <_svfprintf_r+0x1380>
 801ace8:	9312      	str	r3, [sp, #72]	; 0x48
 801acea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acf0:	e662      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801acf2:	f10b 0302 	add.w	r3, fp, #2
 801acf6:	930d      	str	r3, [sp, #52]	; 0x34
 801acf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acfc:	e65c      	b.n	801a9b8 <_svfprintf_r+0x1130>
 801acfe:	9a08      	ldr	r2, [sp, #32]
 801ad00:	230c      	movs	r3, #12
 801ad02:	6013      	str	r3, [r2, #0]
 801ad04:	f04f 30ff 	mov.w	r0, #4294967295
 801ad08:	f7fe be8e 	b.w	8019a28 <_svfprintf_r+0x1a0>
 801ad0c:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 801ad10:	e772      	b.n	801abf8 <_svfprintf_r+0x1370>
 801ad12:	bf00      	nop
 801ad14:	08035640 	.word	0x08035640
 801ad18:	66666667 	.word	0x66666667

0801ad1c <__sprint_r.part.0>:
 801ad1c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801ad1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad22:	049c      	lsls	r4, r3, #18
 801ad24:	460f      	mov	r7, r1
 801ad26:	4692      	mov	sl, r2
 801ad28:	d52b      	bpl.n	801ad82 <__sprint_r.part.0+0x66>
 801ad2a:	6893      	ldr	r3, [r2, #8]
 801ad2c:	6812      	ldr	r2, [r2, #0]
 801ad2e:	b333      	cbz	r3, 801ad7e <__sprint_r.part.0+0x62>
 801ad30:	4680      	mov	r8, r0
 801ad32:	f102 0908 	add.w	r9, r2, #8
 801ad36:	e919 0060 	ldmdb	r9, {r5, r6}
 801ad3a:	08b6      	lsrs	r6, r6, #2
 801ad3c:	d017      	beq.n	801ad6e <__sprint_r.part.0+0x52>
 801ad3e:	3d04      	subs	r5, #4
 801ad40:	2400      	movs	r4, #0
 801ad42:	e001      	b.n	801ad48 <__sprint_r.part.0+0x2c>
 801ad44:	42a6      	cmp	r6, r4
 801ad46:	d010      	beq.n	801ad6a <__sprint_r.part.0+0x4e>
 801ad48:	4640      	mov	r0, r8
 801ad4a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801ad4e:	463a      	mov	r2, r7
 801ad50:	f003 fa2e 	bl	801e1b0 <_fputwc_r>
 801ad54:	1c43      	adds	r3, r0, #1
 801ad56:	f104 0401 	add.w	r4, r4, #1
 801ad5a:	d1f3      	bne.n	801ad44 <__sprint_r.part.0+0x28>
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	f8ca 3008 	str.w	r3, [sl, #8]
 801ad62:	f8ca 3004 	str.w	r3, [sl, #4]
 801ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad6a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ad6e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 801ad72:	f8ca 3008 	str.w	r3, [sl, #8]
 801ad76:	f109 0908 	add.w	r9, r9, #8
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d1db      	bne.n	801ad36 <__sprint_r.part.0+0x1a>
 801ad7e:	2000      	movs	r0, #0
 801ad80:	e7ec      	b.n	801ad5c <__sprint_r.part.0+0x40>
 801ad82:	f003 fb9d 	bl	801e4c0 <__sfvwrite_r>
 801ad86:	2300      	movs	r3, #0
 801ad88:	f8ca 3008 	str.w	r3, [sl, #8]
 801ad8c:	f8ca 3004 	str.w	r3, [sl, #4]
 801ad90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801ad94 <__sprint_r>:
 801ad94:	6893      	ldr	r3, [r2, #8]
 801ad96:	b410      	push	{r4}
 801ad98:	b11b      	cbz	r3, 801ada2 <__sprint_r+0xe>
 801ad9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad9e:	f7ff bfbd 	b.w	801ad1c <__sprint_r.part.0>
 801ada2:	4618      	mov	r0, r3
 801ada4:	6053      	str	r3, [r2, #4]
 801ada6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adaa:	4770      	bx	lr

0801adac <_vfiprintf_r>:
 801adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb0:	b0ab      	sub	sp, #172	; 0xac
 801adb2:	461c      	mov	r4, r3
 801adb4:	9100      	str	r1, [sp, #0]
 801adb6:	4693      	mov	fp, r2
 801adb8:	9304      	str	r3, [sp, #16]
 801adba:	9001      	str	r0, [sp, #4]
 801adbc:	b118      	cbz	r0, 801adc6 <_vfiprintf_r+0x1a>
 801adbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	f000 80e1 	beq.w	801af88 <_vfiprintf_r+0x1dc>
 801adc6:	9b00      	ldr	r3, [sp, #0]
 801adc8:	8999      	ldrh	r1, [r3, #12]
 801adca:	b28a      	uxth	r2, r1
 801adcc:	0490      	lsls	r0, r2, #18
 801adce:	d408      	bmi.n	801ade2 <_vfiprintf_r+0x36>
 801add0:	4618      	mov	r0, r3
 801add2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801add4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 801add8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801addc:	8182      	strh	r2, [r0, #12]
 801adde:	6643      	str	r3, [r0, #100]	; 0x64
 801ade0:	b292      	uxth	r2, r2
 801ade2:	0711      	lsls	r1, r2, #28
 801ade4:	f140 80b0 	bpl.w	801af48 <_vfiprintf_r+0x19c>
 801ade8:	9b00      	ldr	r3, [sp, #0]
 801adea:	691b      	ldr	r3, [r3, #16]
 801adec:	2b00      	cmp	r3, #0
 801adee:	f000 80ab 	beq.w	801af48 <_vfiprintf_r+0x19c>
 801adf2:	f002 021a 	and.w	r2, r2, #26
 801adf6:	2a0a      	cmp	r2, #10
 801adf8:	f000 80b2 	beq.w	801af60 <_vfiprintf_r+0x1b4>
 801adfc:	2300      	movs	r3, #0
 801adfe:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801ae02:	9309      	str	r3, [sp, #36]	; 0x24
 801ae04:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae06:	930e      	str	r3, [sp, #56]	; 0x38
 801ae08:	9302      	str	r3, [sp, #8]
 801ae0a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ae0e:	4654      	mov	r4, sl
 801ae10:	f89b 3000 	ldrb.w	r3, [fp]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	f000 849d 	beq.w	801b754 <_vfiprintf_r+0x9a8>
 801ae1a:	2b25      	cmp	r3, #37	; 0x25
 801ae1c:	f000 849a 	beq.w	801b754 <_vfiprintf_r+0x9a8>
 801ae20:	465a      	mov	r2, fp
 801ae22:	e001      	b.n	801ae28 <_vfiprintf_r+0x7c>
 801ae24:	2b25      	cmp	r3, #37	; 0x25
 801ae26:	d003      	beq.n	801ae30 <_vfiprintf_r+0x84>
 801ae28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d1f9      	bne.n	801ae24 <_vfiprintf_r+0x78>
 801ae30:	ebcb 0602 	rsb	r6, fp, r2
 801ae34:	4615      	mov	r5, r2
 801ae36:	b196      	cbz	r6, 801ae5e <_vfiprintf_r+0xb2>
 801ae38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae3c:	f8c4 b000 	str.w	fp, [r4]
 801ae40:	3301      	adds	r3, #1
 801ae42:	4432      	add	r2, r6
 801ae44:	2b07      	cmp	r3, #7
 801ae46:	6066      	str	r6, [r4, #4]
 801ae48:	920f      	str	r2, [sp, #60]	; 0x3c
 801ae4a:	930e      	str	r3, [sp, #56]	; 0x38
 801ae4c:	dd77      	ble.n	801af3e <_vfiprintf_r+0x192>
 801ae4e:	2a00      	cmp	r2, #0
 801ae50:	f040 84a9 	bne.w	801b7a6 <_vfiprintf_r+0x9fa>
 801ae54:	9b02      	ldr	r3, [sp, #8]
 801ae56:	920e      	str	r2, [sp, #56]	; 0x38
 801ae58:	4433      	add	r3, r6
 801ae5a:	4654      	mov	r4, sl
 801ae5c:	9302      	str	r3, [sp, #8]
 801ae5e:	782b      	ldrb	r3, [r5, #0]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	f000 8359 	beq.w	801b518 <_vfiprintf_r+0x76c>
 801ae66:	2100      	movs	r1, #0
 801ae68:	f04f 3cff 	mov.w	ip, #4294967295
 801ae6c:	1c68      	adds	r0, r5, #1
 801ae6e:	786b      	ldrb	r3, [r5, #1]
 801ae70:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801ae74:	4688      	mov	r8, r1
 801ae76:	460d      	mov	r5, r1
 801ae78:	4666      	mov	r6, ip
 801ae7a:	f100 0b01 	add.w	fp, r0, #1
 801ae7e:	f1a3 0220 	sub.w	r2, r3, #32
 801ae82:	2a58      	cmp	r2, #88	; 0x58
 801ae84:	f200 82a7 	bhi.w	801b3d6 <_vfiprintf_r+0x62a>
 801ae88:	e8df f012 	tbh	[pc, r2, lsl #1]
 801ae8c:	02a50297 	.word	0x02a50297
 801ae90:	029f02a5 	.word	0x029f02a5
 801ae94:	02a502a5 	.word	0x02a502a5
 801ae98:	02a502a5 	.word	0x02a502a5
 801ae9c:	02a502a5 	.word	0x02a502a5
 801aea0:	025f0252 	.word	0x025f0252
 801aea4:	010c02a5 	.word	0x010c02a5
 801aea8:	02a5026a 	.word	0x02a5026a
 801aeac:	012e0128 	.word	0x012e0128
 801aeb0:	012e012e 	.word	0x012e012e
 801aeb4:	012e012e 	.word	0x012e012e
 801aeb8:	012e012e 	.word	0x012e012e
 801aebc:	012e012e 	.word	0x012e012e
 801aec0:	02a502a5 	.word	0x02a502a5
 801aec4:	02a502a5 	.word	0x02a502a5
 801aec8:	02a502a5 	.word	0x02a502a5
 801aecc:	02a502a5 	.word	0x02a502a5
 801aed0:	02a502a5 	.word	0x02a502a5
 801aed4:	02a5013c 	.word	0x02a5013c
 801aed8:	02a502a5 	.word	0x02a502a5
 801aedc:	02a502a5 	.word	0x02a502a5
 801aee0:	02a502a5 	.word	0x02a502a5
 801aee4:	02a502a5 	.word	0x02a502a5
 801aee8:	017302a5 	.word	0x017302a5
 801aeec:	02a502a5 	.word	0x02a502a5
 801aef0:	02a502a5 	.word	0x02a502a5
 801aef4:	018a02a5 	.word	0x018a02a5
 801aef8:	02a502a5 	.word	0x02a502a5
 801aefc:	02a501a2 	.word	0x02a501a2
 801af00:	02a502a5 	.word	0x02a502a5
 801af04:	02a502a5 	.word	0x02a502a5
 801af08:	02a502a5 	.word	0x02a502a5
 801af0c:	02a502a5 	.word	0x02a502a5
 801af10:	01c602a5 	.word	0x01c602a5
 801af14:	02a501d8 	.word	0x02a501d8
 801af18:	02a502a5 	.word	0x02a502a5
 801af1c:	01d80122 	.word	0x01d80122
 801af20:	02a502a5 	.word	0x02a502a5
 801af24:	02a50249 	.word	0x02a50249
 801af28:	01120286 	.word	0x01120286
 801af2c:	020501f1 	.word	0x020501f1
 801af30:	020b02a5 	.word	0x020b02a5
 801af34:	008102a5 	.word	0x008102a5
 801af38:	02a502a5 	.word	0x02a502a5
 801af3c:	0230      	.short	0x0230
 801af3e:	3408      	adds	r4, #8
 801af40:	9b02      	ldr	r3, [sp, #8]
 801af42:	4433      	add	r3, r6
 801af44:	9302      	str	r3, [sp, #8]
 801af46:	e78a      	b.n	801ae5e <_vfiprintf_r+0xb2>
 801af48:	9801      	ldr	r0, [sp, #4]
 801af4a:	9900      	ldr	r1, [sp, #0]
 801af4c:	f001 ff9c 	bl	801ce88 <__swsetup_r>
 801af50:	b9a8      	cbnz	r0, 801af7e <_vfiprintf_r+0x1d2>
 801af52:	9b00      	ldr	r3, [sp, #0]
 801af54:	899a      	ldrh	r2, [r3, #12]
 801af56:	f002 021a 	and.w	r2, r2, #26
 801af5a:	2a0a      	cmp	r2, #10
 801af5c:	f47f af4e 	bne.w	801adfc <_vfiprintf_r+0x50>
 801af60:	9b00      	ldr	r3, [sp, #0]
 801af62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801af66:	2b00      	cmp	r3, #0
 801af68:	f6ff af48 	blt.w	801adfc <_vfiprintf_r+0x50>
 801af6c:	9801      	ldr	r0, [sp, #4]
 801af6e:	9900      	ldr	r1, [sp, #0]
 801af70:	465a      	mov	r2, fp
 801af72:	4623      	mov	r3, r4
 801af74:	f000 fd1c 	bl	801b9b0 <__sbprintf>
 801af78:	b02b      	add	sp, #172	; 0xac
 801af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af7e:	f04f 30ff 	mov.w	r0, #4294967295
 801af82:	b02b      	add	sp, #172	; 0xac
 801af84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af88:	f003 f908 	bl	801e19c <__sinit>
 801af8c:	e71b      	b.n	801adc6 <_vfiprintf_r+0x1a>
 801af8e:	f018 0f20 	tst.w	r8, #32
 801af92:	9503      	str	r5, [sp, #12]
 801af94:	46b4      	mov	ip, r6
 801af96:	f000 810b 	beq.w	801b1b0 <_vfiprintf_r+0x404>
 801af9a:	9b04      	ldr	r3, [sp, #16]
 801af9c:	3307      	adds	r3, #7
 801af9e:	f023 0307 	bic.w	r3, r3, #7
 801afa2:	f103 0208 	add.w	r2, r3, #8
 801afa6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801afaa:	9204      	str	r2, [sp, #16]
 801afac:	2301      	movs	r3, #1
 801afae:	2200      	movs	r2, #0
 801afb0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 801afb4:	46e1      	mov	r9, ip
 801afb6:	4615      	mov	r5, r2
 801afb8:	f1bc 0f00 	cmp.w	ip, #0
 801afbc:	bfa8      	it	ge
 801afbe:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 801afc2:	ea56 0207 	orrs.w	r2, r6, r7
 801afc6:	f040 80c4 	bne.w	801b152 <_vfiprintf_r+0x3a6>
 801afca:	f1bc 0f00 	cmp.w	ip, #0
 801afce:	f000 837d 	beq.w	801b6cc <_vfiprintf_r+0x920>
 801afd2:	2b01      	cmp	r3, #1
 801afd4:	f000 80c5 	beq.w	801b162 <_vfiprintf_r+0x3b6>
 801afd8:	2b02      	cmp	r3, #2
 801afda:	f000 8383 	beq.w	801b6e4 <_vfiprintf_r+0x938>
 801afde:	4651      	mov	r1, sl
 801afe0:	08f2      	lsrs	r2, r6, #3
 801afe2:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801afe6:	08f8      	lsrs	r0, r7, #3
 801afe8:	f006 0307 	and.w	r3, r6, #7
 801afec:	4607      	mov	r7, r0
 801afee:	4616      	mov	r6, r2
 801aff0:	3330      	adds	r3, #48	; 0x30
 801aff2:	ea56 0207 	orrs.w	r2, r6, r7
 801aff6:	f801 3d01 	strb.w	r3, [r1, #-1]!
 801affa:	d1f1      	bne.n	801afe0 <_vfiprintf_r+0x234>
 801affc:	f018 0f01 	tst.w	r8, #1
 801b000:	9107      	str	r1, [sp, #28]
 801b002:	f040 83f9 	bne.w	801b7f8 <_vfiprintf_r+0xa4c>
 801b006:	ebc1 090a 	rsb	r9, r1, sl
 801b00a:	45e1      	cmp	r9, ip
 801b00c:	464e      	mov	r6, r9
 801b00e:	bfb8      	it	lt
 801b010:	4666      	movlt	r6, ip
 801b012:	b105      	cbz	r5, 801b016 <_vfiprintf_r+0x26a>
 801b014:	3601      	adds	r6, #1
 801b016:	f018 0302 	ands.w	r3, r8, #2
 801b01a:	9305      	str	r3, [sp, #20]
 801b01c:	bf18      	it	ne
 801b01e:	3602      	addne	r6, #2
 801b020:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801b024:	9306      	str	r3, [sp, #24]
 801b026:	f040 81f6 	bne.w	801b416 <_vfiprintf_r+0x66a>
 801b02a:	9b03      	ldr	r3, [sp, #12]
 801b02c:	1b9d      	subs	r5, r3, r6
 801b02e:	2d00      	cmp	r5, #0
 801b030:	f340 81f1 	ble.w	801b416 <_vfiprintf_r+0x66a>
 801b034:	2d10      	cmp	r5, #16
 801b036:	f340 8489 	ble.w	801b94c <_vfiprintf_r+0xba0>
 801b03a:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 801b03e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b040:	4fc4      	ldr	r7, [pc, #784]	; (801b354 <_vfiprintf_r+0x5a8>)
 801b042:	4620      	mov	r0, r4
 801b044:	2310      	movs	r3, #16
 801b046:	4664      	mov	r4, ip
 801b048:	4671      	mov	r1, lr
 801b04a:	4684      	mov	ip, r0
 801b04c:	e007      	b.n	801b05e <_vfiprintf_r+0x2b2>
 801b04e:	f101 0e02 	add.w	lr, r1, #2
 801b052:	f10c 0c08 	add.w	ip, ip, #8
 801b056:	4601      	mov	r1, r0
 801b058:	3d10      	subs	r5, #16
 801b05a:	2d10      	cmp	r5, #16
 801b05c:	dd13      	ble.n	801b086 <_vfiprintf_r+0x2da>
 801b05e:	1c48      	adds	r0, r1, #1
 801b060:	3210      	adds	r2, #16
 801b062:	2807      	cmp	r0, #7
 801b064:	920f      	str	r2, [sp, #60]	; 0x3c
 801b066:	f8cc 7000 	str.w	r7, [ip]
 801b06a:	f8cc 3004 	str.w	r3, [ip, #4]
 801b06e:	900e      	str	r0, [sp, #56]	; 0x38
 801b070:	dded      	ble.n	801b04e <_vfiprintf_r+0x2a2>
 801b072:	2a00      	cmp	r2, #0
 801b074:	f040 81bf 	bne.w	801b3f6 <_vfiprintf_r+0x64a>
 801b078:	3d10      	subs	r5, #16
 801b07a:	2d10      	cmp	r5, #16
 801b07c:	4611      	mov	r1, r2
 801b07e:	f04f 0e01 	mov.w	lr, #1
 801b082:	46d4      	mov	ip, sl
 801b084:	dceb      	bgt.n	801b05e <_vfiprintf_r+0x2b2>
 801b086:	4663      	mov	r3, ip
 801b088:	4671      	mov	r1, lr
 801b08a:	46a4      	mov	ip, r4
 801b08c:	461c      	mov	r4, r3
 801b08e:	442a      	add	r2, r5
 801b090:	2907      	cmp	r1, #7
 801b092:	920f      	str	r2, [sp, #60]	; 0x3c
 801b094:	6027      	str	r7, [r4, #0]
 801b096:	6065      	str	r5, [r4, #4]
 801b098:	910e      	str	r1, [sp, #56]	; 0x38
 801b09a:	f300 8343 	bgt.w	801b724 <_vfiprintf_r+0x978>
 801b09e:	3408      	adds	r4, #8
 801b0a0:	1c48      	adds	r0, r1, #1
 801b0a2:	e1bb      	b.n	801b41c <_vfiprintf_r+0x670>
 801b0a4:	4658      	mov	r0, fp
 801b0a6:	f048 0804 	orr.w	r8, r8, #4
 801b0aa:	f89b 3000 	ldrb.w	r3, [fp]
 801b0ae:	e6e4      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b0b0:	f018 0320 	ands.w	r3, r8, #32
 801b0b4:	9503      	str	r5, [sp, #12]
 801b0b6:	46b4      	mov	ip, r6
 801b0b8:	d062      	beq.n	801b180 <_vfiprintf_r+0x3d4>
 801b0ba:	9b04      	ldr	r3, [sp, #16]
 801b0bc:	3307      	adds	r3, #7
 801b0be:	f023 0307 	bic.w	r3, r3, #7
 801b0c2:	f103 0208 	add.w	r2, r3, #8
 801b0c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801b0ca:	9204      	str	r2, [sp, #16]
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	e76e      	b.n	801afae <_vfiprintf_r+0x202>
 801b0d0:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 801b0d4:	f89b 3000 	ldrb.w	r3, [fp]
 801b0d8:	4658      	mov	r0, fp
 801b0da:	e6ce      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b0dc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801b0e0:	f89b 3000 	ldrb.w	r3, [fp]
 801b0e4:	4658      	mov	r0, fp
 801b0e6:	e6c8      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b0e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b0ec:	2500      	movs	r5, #0
 801b0ee:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801b0f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801b0f6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801b0fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b0fe:	2a09      	cmp	r2, #9
 801b100:	d9f5      	bls.n	801b0ee <_vfiprintf_r+0x342>
 801b102:	e6bc      	b.n	801ae7e <_vfiprintf_r+0xd2>
 801b104:	f048 0810 	orr.w	r8, r8, #16
 801b108:	f018 0f20 	tst.w	r8, #32
 801b10c:	9503      	str	r5, [sp, #12]
 801b10e:	46b4      	mov	ip, r6
 801b110:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b114:	f000 809a 	beq.w	801b24c <_vfiprintf_r+0x4a0>
 801b118:	9904      	ldr	r1, [sp, #16]
 801b11a:	3107      	adds	r1, #7
 801b11c:	f021 0107 	bic.w	r1, r1, #7
 801b120:	e9d1 2300 	ldrd	r2, r3, [r1]
 801b124:	3108      	adds	r1, #8
 801b126:	9104      	str	r1, [sp, #16]
 801b128:	4616      	mov	r6, r2
 801b12a:	461f      	mov	r7, r3
 801b12c:	2a00      	cmp	r2, #0
 801b12e:	f173 0300 	sbcs.w	r3, r3, #0
 801b132:	f2c0 83a3 	blt.w	801b87c <_vfiprintf_r+0xad0>
 801b136:	f1bc 0f00 	cmp.w	ip, #0
 801b13a:	bfa8      	it	ge
 801b13c:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 801b140:	ea56 0207 	orrs.w	r2, r6, r7
 801b144:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 801b148:	46e1      	mov	r9, ip
 801b14a:	f04f 0301 	mov.w	r3, #1
 801b14e:	f43f af3c 	beq.w	801afca <_vfiprintf_r+0x21e>
 801b152:	2b01      	cmp	r3, #1
 801b154:	f47f af40 	bne.w	801afd8 <_vfiprintf_r+0x22c>
 801b158:	2f00      	cmp	r7, #0
 801b15a:	bf08      	it	eq
 801b15c:	2e0a      	cmpeq	r6, #10
 801b15e:	f080 8331 	bcs.w	801b7c4 <_vfiprintf_r+0xa18>
 801b162:	ab2a      	add	r3, sp, #168	; 0xa8
 801b164:	3630      	adds	r6, #48	; 0x30
 801b166:	f803 6d41 	strb.w	r6, [r3, #-65]!
 801b16a:	ebc3 090a 	rsb	r9, r3, sl
 801b16e:	9307      	str	r3, [sp, #28]
 801b170:	e74b      	b.n	801b00a <_vfiprintf_r+0x25e>
 801b172:	f048 0810 	orr.w	r8, r8, #16
 801b176:	f018 0320 	ands.w	r3, r8, #32
 801b17a:	9503      	str	r5, [sp, #12]
 801b17c:	46b4      	mov	ip, r6
 801b17e:	d19c      	bne.n	801b0ba <_vfiprintf_r+0x30e>
 801b180:	f018 0210 	ands.w	r2, r8, #16
 801b184:	f040 82f4 	bne.w	801b770 <_vfiprintf_r+0x9c4>
 801b188:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801b18c:	f000 82f0 	beq.w	801b770 <_vfiprintf_r+0x9c4>
 801b190:	9904      	ldr	r1, [sp, #16]
 801b192:	4613      	mov	r3, r2
 801b194:	460a      	mov	r2, r1
 801b196:	3204      	adds	r2, #4
 801b198:	880e      	ldrh	r6, [r1, #0]
 801b19a:	9204      	str	r2, [sp, #16]
 801b19c:	2700      	movs	r7, #0
 801b19e:	e706      	b.n	801afae <_vfiprintf_r+0x202>
 801b1a0:	f048 0810 	orr.w	r8, r8, #16
 801b1a4:	f018 0f20 	tst.w	r8, #32
 801b1a8:	9503      	str	r5, [sp, #12]
 801b1aa:	46b4      	mov	ip, r6
 801b1ac:	f47f aef5 	bne.w	801af9a <_vfiprintf_r+0x1ee>
 801b1b0:	9a04      	ldr	r2, [sp, #16]
 801b1b2:	f018 0f10 	tst.w	r8, #16
 801b1b6:	4613      	mov	r3, r2
 801b1b8:	f040 82e1 	bne.w	801b77e <_vfiprintf_r+0x9d2>
 801b1bc:	f018 0f40 	tst.w	r8, #64	; 0x40
 801b1c0:	f000 82dd 	beq.w	801b77e <_vfiprintf_r+0x9d2>
 801b1c4:	8816      	ldrh	r6, [r2, #0]
 801b1c6:	3204      	adds	r2, #4
 801b1c8:	2700      	movs	r7, #0
 801b1ca:	2301      	movs	r3, #1
 801b1cc:	9204      	str	r2, [sp, #16]
 801b1ce:	e6ee      	b.n	801afae <_vfiprintf_r+0x202>
 801b1d0:	4a61      	ldr	r2, [pc, #388]	; (801b358 <_vfiprintf_r+0x5ac>)
 801b1d2:	9503      	str	r5, [sp, #12]
 801b1d4:	f018 0f20 	tst.w	r8, #32
 801b1d8:	46b4      	mov	ip, r6
 801b1da:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b1de:	9209      	str	r2, [sp, #36]	; 0x24
 801b1e0:	f000 808e 	beq.w	801b300 <_vfiprintf_r+0x554>
 801b1e4:	9a04      	ldr	r2, [sp, #16]
 801b1e6:	3207      	adds	r2, #7
 801b1e8:	f022 0207 	bic.w	r2, r2, #7
 801b1ec:	e9d2 6700 	ldrd	r6, r7, [r2]
 801b1f0:	f102 0108 	add.w	r1, r2, #8
 801b1f4:	9104      	str	r1, [sp, #16]
 801b1f6:	f018 0f01 	tst.w	r8, #1
 801b1fa:	f000 828c 	beq.w	801b716 <_vfiprintf_r+0x96a>
 801b1fe:	ea56 0207 	orrs.w	r2, r6, r7
 801b202:	f000 8288 	beq.w	801b716 <_vfiprintf_r+0x96a>
 801b206:	2230      	movs	r2, #48	; 0x30
 801b208:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801b20c:	f048 0802 	orr.w	r8, r8, #2
 801b210:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 801b214:	2302      	movs	r3, #2
 801b216:	e6ca      	b.n	801afae <_vfiprintf_r+0x202>
 801b218:	9a04      	ldr	r2, [sp, #16]
 801b21a:	9503      	str	r5, [sp, #12]
 801b21c:	6813      	ldr	r3, [r2, #0]
 801b21e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801b222:	4613      	mov	r3, r2
 801b224:	3304      	adds	r3, #4
 801b226:	2601      	movs	r6, #1
 801b228:	2100      	movs	r1, #0
 801b22a:	9304      	str	r3, [sp, #16]
 801b22c:	ab10      	add	r3, sp, #64	; 0x40
 801b22e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b232:	46b1      	mov	r9, r6
 801b234:	9307      	str	r3, [sp, #28]
 801b236:	f04f 0c00 	mov.w	ip, #0
 801b23a:	e6ec      	b.n	801b016 <_vfiprintf_r+0x26a>
 801b23c:	f018 0f20 	tst.w	r8, #32
 801b240:	9503      	str	r5, [sp, #12]
 801b242:	46b4      	mov	ip, r6
 801b244:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b248:	f47f af66 	bne.w	801b118 <_vfiprintf_r+0x36c>
 801b24c:	f018 0f10 	tst.w	r8, #16
 801b250:	f040 82a0 	bne.w	801b794 <_vfiprintf_r+0x9e8>
 801b254:	f018 0f40 	tst.w	r8, #64	; 0x40
 801b258:	f000 829c 	beq.w	801b794 <_vfiprintf_r+0x9e8>
 801b25c:	9904      	ldr	r1, [sp, #16]
 801b25e:	f9b1 6000 	ldrsh.w	r6, [r1]
 801b262:	3104      	adds	r1, #4
 801b264:	17f7      	asrs	r7, r6, #31
 801b266:	4632      	mov	r2, r6
 801b268:	463b      	mov	r3, r7
 801b26a:	9104      	str	r1, [sp, #16]
 801b26c:	e75e      	b.n	801b12c <_vfiprintf_r+0x380>
 801b26e:	9904      	ldr	r1, [sp, #16]
 801b270:	9503      	str	r5, [sp, #12]
 801b272:	2330      	movs	r3, #48	; 0x30
 801b274:	460a      	mov	r2, r1
 801b276:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 801b27a:	2378      	movs	r3, #120	; 0x78
 801b27c:	3204      	adds	r2, #4
 801b27e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801b282:	4b36      	ldr	r3, [pc, #216]	; (801b35c <_vfiprintf_r+0x5b0>)
 801b284:	9309      	str	r3, [sp, #36]	; 0x24
 801b286:	46b4      	mov	ip, r6
 801b288:	f048 0802 	orr.w	r8, r8, #2
 801b28c:	680e      	ldr	r6, [r1, #0]
 801b28e:	9204      	str	r2, [sp, #16]
 801b290:	2700      	movs	r7, #0
 801b292:	2302      	movs	r3, #2
 801b294:	e68b      	b.n	801afae <_vfiprintf_r+0x202>
 801b296:	f048 0820 	orr.w	r8, r8, #32
 801b29a:	f89b 3000 	ldrb.w	r3, [fp]
 801b29e:	4658      	mov	r0, fp
 801b2a0:	e5eb      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b2a2:	9a04      	ldr	r2, [sp, #16]
 801b2a4:	9503      	str	r5, [sp, #12]
 801b2a6:	6813      	ldr	r3, [r2, #0]
 801b2a8:	9307      	str	r3, [sp, #28]
 801b2aa:	2100      	movs	r1, #0
 801b2ac:	46b4      	mov	ip, r6
 801b2ae:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b2b2:	1d16      	adds	r6, r2, #4
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	f000 834f 	beq.w	801b958 <_vfiprintf_r+0xbac>
 801b2ba:	f1bc 0f00 	cmp.w	ip, #0
 801b2be:	f2c0 8329 	blt.w	801b914 <_vfiprintf_r+0xb68>
 801b2c2:	9d07      	ldr	r5, [sp, #28]
 801b2c4:	f8cd c010 	str.w	ip, [sp, #16]
 801b2c8:	4662      	mov	r2, ip
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	2100      	movs	r1, #0
 801b2ce:	f003 fdb9 	bl	801ee44 <memchr>
 801b2d2:	f8dd c010 	ldr.w	ip, [sp, #16]
 801b2d6:	2800      	cmp	r0, #0
 801b2d8:	f000 834f 	beq.w	801b97a <_vfiprintf_r+0xbce>
 801b2dc:	ebc5 0900 	rsb	r9, r5, r0
 801b2e0:	9604      	str	r6, [sp, #16]
 801b2e2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 801b2e6:	f04f 0c00 	mov.w	ip, #0
 801b2ea:	e68e      	b.n	801b00a <_vfiprintf_r+0x25e>
 801b2ec:	4a1b      	ldr	r2, [pc, #108]	; (801b35c <_vfiprintf_r+0x5b0>)
 801b2ee:	9503      	str	r5, [sp, #12]
 801b2f0:	f018 0f20 	tst.w	r8, #32
 801b2f4:	46b4      	mov	ip, r6
 801b2f6:	9209      	str	r2, [sp, #36]	; 0x24
 801b2f8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b2fc:	f47f af72 	bne.w	801b1e4 <_vfiprintf_r+0x438>
 801b300:	9904      	ldr	r1, [sp, #16]
 801b302:	f018 0f10 	tst.w	r8, #16
 801b306:	460a      	mov	r2, r1
 801b308:	f040 823f 	bne.w	801b78a <_vfiprintf_r+0x9de>
 801b30c:	f018 0f40 	tst.w	r8, #64	; 0x40
 801b310:	f000 823b 	beq.w	801b78a <_vfiprintf_r+0x9de>
 801b314:	3204      	adds	r2, #4
 801b316:	880e      	ldrh	r6, [r1, #0]
 801b318:	9204      	str	r2, [sp, #16]
 801b31a:	2700      	movs	r7, #0
 801b31c:	e76b      	b.n	801b1f6 <_vfiprintf_r+0x44a>
 801b31e:	f89b 3000 	ldrb.w	r3, [fp]
 801b322:	2b6c      	cmp	r3, #108	; 0x6c
 801b324:	f000 82e9 	beq.w	801b8fa <_vfiprintf_r+0xb4e>
 801b328:	f048 0810 	orr.w	r8, r8, #16
 801b32c:	4658      	mov	r0, fp
 801b32e:	e5a4      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b330:	9a04      	ldr	r2, [sp, #16]
 801b332:	6815      	ldr	r5, [r2, #0]
 801b334:	4613      	mov	r3, r2
 801b336:	2d00      	cmp	r5, #0
 801b338:	f103 0304 	add.w	r3, r3, #4
 801b33c:	f2c0 82e5 	blt.w	801b90a <_vfiprintf_r+0xb5e>
 801b340:	9304      	str	r3, [sp, #16]
 801b342:	f89b 3000 	ldrb.w	r3, [fp]
 801b346:	4658      	mov	r0, fp
 801b348:	e597      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b34a:	f89b 3000 	ldrb.w	r3, [fp]
 801b34e:	4658      	mov	r0, fp
 801b350:	212b      	movs	r1, #43	; 0x2b
 801b352:	e592      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b354:	0803566c 	.word	0x0803566c
 801b358:	08035618 	.word	0x08035618
 801b35c:	0803562c 	.word	0x0803562c
 801b360:	f89b 3000 	ldrb.w	r3, [fp]
 801b364:	2b2a      	cmp	r3, #42	; 0x2a
 801b366:	f10b 0001 	add.w	r0, fp, #1
 801b36a:	f000 830f 	beq.w	801b98c <_vfiprintf_r+0xbe0>
 801b36e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b372:	2a09      	cmp	r2, #9
 801b374:	4683      	mov	fp, r0
 801b376:	f04f 0600 	mov.w	r6, #0
 801b37a:	f63f ad80 	bhi.w	801ae7e <_vfiprintf_r+0xd2>
 801b37e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801b382:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801b386:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 801b38a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b38e:	2a09      	cmp	r2, #9
 801b390:	d9f5      	bls.n	801b37e <_vfiprintf_r+0x5d2>
 801b392:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 801b396:	e572      	b.n	801ae7e <_vfiprintf_r+0xd2>
 801b398:	f018 0f20 	tst.w	r8, #32
 801b39c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b3a0:	f000 8283 	beq.w	801b8aa <_vfiprintf_r+0xafe>
 801b3a4:	9a04      	ldr	r2, [sp, #16]
 801b3a6:	9902      	ldr	r1, [sp, #8]
 801b3a8:	6813      	ldr	r3, [r2, #0]
 801b3aa:	17cf      	asrs	r7, r1, #31
 801b3ac:	4608      	mov	r0, r1
 801b3ae:	3204      	adds	r2, #4
 801b3b0:	4639      	mov	r1, r7
 801b3b2:	9204      	str	r2, [sp, #16]
 801b3b4:	e9c3 0100 	strd	r0, r1, [r3]
 801b3b8:	e52a      	b.n	801ae10 <_vfiprintf_r+0x64>
 801b3ba:	4658      	mov	r0, fp
 801b3bc:	f89b 3000 	ldrb.w	r3, [fp]
 801b3c0:	2900      	cmp	r1, #0
 801b3c2:	f47f ad5a 	bne.w	801ae7a <_vfiprintf_r+0xce>
 801b3c6:	2120      	movs	r1, #32
 801b3c8:	e557      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b3ca:	f048 0801 	orr.w	r8, r8, #1
 801b3ce:	4658      	mov	r0, fp
 801b3d0:	f89b 3000 	ldrb.w	r3, [fp]
 801b3d4:	e551      	b.n	801ae7a <_vfiprintf_r+0xce>
 801b3d6:	9503      	str	r5, [sp, #12]
 801b3d8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	f000 809b 	beq.w	801b518 <_vfiprintf_r+0x76c>
 801b3e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	2601      	movs	r6, #1
 801b3ea:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801b3ee:	ab10      	add	r3, sp, #64	; 0x40
 801b3f0:	46b1      	mov	r9, r6
 801b3f2:	9307      	str	r3, [sp, #28]
 801b3f4:	e71f      	b.n	801b236 <_vfiprintf_r+0x48a>
 801b3f6:	9801      	ldr	r0, [sp, #4]
 801b3f8:	9900      	ldr	r1, [sp, #0]
 801b3fa:	9308      	str	r3, [sp, #32]
 801b3fc:	aa0d      	add	r2, sp, #52	; 0x34
 801b3fe:	f7ff fc8d 	bl	801ad1c <__sprint_r.part.0>
 801b402:	2800      	cmp	r0, #0
 801b404:	f040 808f 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b408:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b40a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b40c:	9b08      	ldr	r3, [sp, #32]
 801b40e:	f101 0e01 	add.w	lr, r1, #1
 801b412:	46d4      	mov	ip, sl
 801b414:	e620      	b.n	801b058 <_vfiprintf_r+0x2ac>
 801b416:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b41a:	1c48      	adds	r0, r1, #1
 801b41c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 801b420:	b16b      	cbz	r3, 801b43e <_vfiprintf_r+0x692>
 801b422:	3201      	adds	r2, #1
 801b424:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b428:	2101      	movs	r1, #1
 801b42a:	2807      	cmp	r0, #7
 801b42c:	920f      	str	r2, [sp, #60]	; 0x3c
 801b42e:	900e      	str	r0, [sp, #56]	; 0x38
 801b430:	6023      	str	r3, [r4, #0]
 801b432:	6061      	str	r1, [r4, #4]
 801b434:	f300 8134 	bgt.w	801b6a0 <_vfiprintf_r+0x8f4>
 801b438:	4601      	mov	r1, r0
 801b43a:	3408      	adds	r4, #8
 801b43c:	3001      	adds	r0, #1
 801b43e:	9b05      	ldr	r3, [sp, #20]
 801b440:	b163      	cbz	r3, 801b45c <_vfiprintf_r+0x6b0>
 801b442:	3202      	adds	r2, #2
 801b444:	a90c      	add	r1, sp, #48	; 0x30
 801b446:	2302      	movs	r3, #2
 801b448:	2807      	cmp	r0, #7
 801b44a:	920f      	str	r2, [sp, #60]	; 0x3c
 801b44c:	900e      	str	r0, [sp, #56]	; 0x38
 801b44e:	e884 000a 	stmia.w	r4, {r1, r3}
 801b452:	f300 8134 	bgt.w	801b6be <_vfiprintf_r+0x912>
 801b456:	4601      	mov	r1, r0
 801b458:	3408      	adds	r4, #8
 801b45a:	3001      	adds	r0, #1
 801b45c:	9b06      	ldr	r3, [sp, #24]
 801b45e:	2b80      	cmp	r3, #128	; 0x80
 801b460:	f000 80d4 	beq.w	801b60c <_vfiprintf_r+0x860>
 801b464:	ebc9 070c 	rsb	r7, r9, ip
 801b468:	2f00      	cmp	r7, #0
 801b46a:	dd2b      	ble.n	801b4c4 <_vfiprintf_r+0x718>
 801b46c:	2f10      	cmp	r7, #16
 801b46e:	4dab      	ldr	r5, [pc, #684]	; (801b71c <_vfiprintf_r+0x970>)
 801b470:	dd1f      	ble.n	801b4b2 <_vfiprintf_r+0x706>
 801b472:	46a6      	mov	lr, r4
 801b474:	2310      	movs	r3, #16
 801b476:	9c01      	ldr	r4, [sp, #4]
 801b478:	e007      	b.n	801b48a <_vfiprintf_r+0x6de>
 801b47a:	f101 0c02 	add.w	ip, r1, #2
 801b47e:	f10e 0e08 	add.w	lr, lr, #8
 801b482:	4601      	mov	r1, r0
 801b484:	3f10      	subs	r7, #16
 801b486:	2f10      	cmp	r7, #16
 801b488:	dd11      	ble.n	801b4ae <_vfiprintf_r+0x702>
 801b48a:	1c48      	adds	r0, r1, #1
 801b48c:	3210      	adds	r2, #16
 801b48e:	2807      	cmp	r0, #7
 801b490:	920f      	str	r2, [sp, #60]	; 0x3c
 801b492:	f8ce 5000 	str.w	r5, [lr]
 801b496:	f8ce 3004 	str.w	r3, [lr, #4]
 801b49a:	900e      	str	r0, [sp, #56]	; 0x38
 801b49c:	dded      	ble.n	801b47a <_vfiprintf_r+0x6ce>
 801b49e:	bb6a      	cbnz	r2, 801b4fc <_vfiprintf_r+0x750>
 801b4a0:	3f10      	subs	r7, #16
 801b4a2:	2f10      	cmp	r7, #16
 801b4a4:	f04f 0c01 	mov.w	ip, #1
 801b4a8:	4611      	mov	r1, r2
 801b4aa:	46d6      	mov	lr, sl
 801b4ac:	dced      	bgt.n	801b48a <_vfiprintf_r+0x6de>
 801b4ae:	4674      	mov	r4, lr
 801b4b0:	4660      	mov	r0, ip
 801b4b2:	443a      	add	r2, r7
 801b4b4:	2807      	cmp	r0, #7
 801b4b6:	920f      	str	r2, [sp, #60]	; 0x3c
 801b4b8:	e884 00a0 	stmia.w	r4, {r5, r7}
 801b4bc:	900e      	str	r0, [sp, #56]	; 0x38
 801b4be:	dc3b      	bgt.n	801b538 <_vfiprintf_r+0x78c>
 801b4c0:	3408      	adds	r4, #8
 801b4c2:	3001      	adds	r0, #1
 801b4c4:	eb02 0309 	add.w	r3, r2, r9
 801b4c8:	9a07      	ldr	r2, [sp, #28]
 801b4ca:	930f      	str	r3, [sp, #60]	; 0x3c
 801b4cc:	2807      	cmp	r0, #7
 801b4ce:	e884 0204 	stmia.w	r4, {r2, r9}
 801b4d2:	900e      	str	r0, [sp, #56]	; 0x38
 801b4d4:	dd3d      	ble.n	801b552 <_vfiprintf_r+0x7a6>
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	f040 813f 	bne.w	801b75a <_vfiprintf_r+0x9ae>
 801b4dc:	f018 0f04 	tst.w	r8, #4
 801b4e0:	930e      	str	r3, [sp, #56]	; 0x38
 801b4e2:	f040 8130 	bne.w	801b746 <_vfiprintf_r+0x99a>
 801b4e6:	9b02      	ldr	r3, [sp, #8]
 801b4e8:	9a03      	ldr	r2, [sp, #12]
 801b4ea:	4296      	cmp	r6, r2
 801b4ec:	bfac      	ite	ge
 801b4ee:	199b      	addge	r3, r3, r6
 801b4f0:	189b      	addlt	r3, r3, r2
 801b4f2:	9302      	str	r3, [sp, #8]
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	930e      	str	r3, [sp, #56]	; 0x38
 801b4f8:	4654      	mov	r4, sl
 801b4fa:	e489      	b.n	801ae10 <_vfiprintf_r+0x64>
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	9900      	ldr	r1, [sp, #0]
 801b500:	9305      	str	r3, [sp, #20]
 801b502:	aa0d      	add	r2, sp, #52	; 0x34
 801b504:	f7ff fc0a 	bl	801ad1c <__sprint_r.part.0>
 801b508:	b968      	cbnz	r0, 801b526 <_vfiprintf_r+0x77a>
 801b50a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b50c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b50e:	9b05      	ldr	r3, [sp, #20]
 801b510:	f101 0c01 	add.w	ip, r1, #1
 801b514:	46d6      	mov	lr, sl
 801b516:	e7b5      	b.n	801b484 <_vfiprintf_r+0x6d8>
 801b518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b51a:	b123      	cbz	r3, 801b526 <_vfiprintf_r+0x77a>
 801b51c:	9801      	ldr	r0, [sp, #4]
 801b51e:	9900      	ldr	r1, [sp, #0]
 801b520:	aa0d      	add	r2, sp, #52	; 0x34
 801b522:	f7ff fbfb 	bl	801ad1c <__sprint_r.part.0>
 801b526:	9b00      	ldr	r3, [sp, #0]
 801b528:	899b      	ldrh	r3, [r3, #12]
 801b52a:	065b      	lsls	r3, r3, #25
 801b52c:	f53f ad27 	bmi.w	801af7e <_vfiprintf_r+0x1d2>
 801b530:	9802      	ldr	r0, [sp, #8]
 801b532:	b02b      	add	sp, #172	; 0xac
 801b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b538:	2a00      	cmp	r2, #0
 801b53a:	f040 8192 	bne.w	801b862 <_vfiprintf_r+0xab6>
 801b53e:	2201      	movs	r2, #1
 801b540:	9907      	ldr	r1, [sp, #28]
 801b542:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 801b546:	464b      	mov	r3, r9
 801b548:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801b54c:	911a      	str	r1, [sp, #104]	; 0x68
 801b54e:	920e      	str	r2, [sp, #56]	; 0x38
 801b550:	4654      	mov	r4, sl
 801b552:	f104 0208 	add.w	r2, r4, #8
 801b556:	f018 0f04 	tst.w	r8, #4
 801b55a:	d039      	beq.n	801b5d0 <_vfiprintf_r+0x824>
 801b55c:	9903      	ldr	r1, [sp, #12]
 801b55e:	1b8d      	subs	r5, r1, r6
 801b560:	2d00      	cmp	r5, #0
 801b562:	dd35      	ble.n	801b5d0 <_vfiprintf_r+0x824>
 801b564:	2d10      	cmp	r5, #16
 801b566:	f340 8203 	ble.w	801b970 <_vfiprintf_r+0xbc4>
 801b56a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b56c:	4f6c      	ldr	r7, [pc, #432]	; (801b720 <_vfiprintf_r+0x974>)
 801b56e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b572:	f8dd 9000 	ldr.w	r9, [sp]
 801b576:	2410      	movs	r4, #16
 801b578:	e006      	b.n	801b588 <_vfiprintf_r+0x7dc>
 801b57a:	f100 0e02 	add.w	lr, r0, #2
 801b57e:	3208      	adds	r2, #8
 801b580:	4608      	mov	r0, r1
 801b582:	3d10      	subs	r5, #16
 801b584:	2d10      	cmp	r5, #16
 801b586:	dd10      	ble.n	801b5aa <_vfiprintf_r+0x7fe>
 801b588:	1c41      	adds	r1, r0, #1
 801b58a:	3310      	adds	r3, #16
 801b58c:	2907      	cmp	r1, #7
 801b58e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b590:	6017      	str	r7, [r2, #0]
 801b592:	6054      	str	r4, [r2, #4]
 801b594:	910e      	str	r1, [sp, #56]	; 0x38
 801b596:	ddf0      	ble.n	801b57a <_vfiprintf_r+0x7ce>
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d12a      	bne.n	801b5f2 <_vfiprintf_r+0x846>
 801b59c:	3d10      	subs	r5, #16
 801b59e:	2d10      	cmp	r5, #16
 801b5a0:	f04f 0e01 	mov.w	lr, #1
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	4652      	mov	r2, sl
 801b5a8:	dcee      	bgt.n	801b588 <_vfiprintf_r+0x7dc>
 801b5aa:	442b      	add	r3, r5
 801b5ac:	f1be 0f07 	cmp.w	lr, #7
 801b5b0:	930f      	str	r3, [sp, #60]	; 0x3c
 801b5b2:	6017      	str	r7, [r2, #0]
 801b5b4:	6055      	str	r5, [r2, #4]
 801b5b6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801b5ba:	dd09      	ble.n	801b5d0 <_vfiprintf_r+0x824>
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d092      	beq.n	801b4e6 <_vfiprintf_r+0x73a>
 801b5c0:	9801      	ldr	r0, [sp, #4]
 801b5c2:	9900      	ldr	r1, [sp, #0]
 801b5c4:	aa0d      	add	r2, sp, #52	; 0x34
 801b5c6:	f7ff fba9 	bl	801ad1c <__sprint_r.part.0>
 801b5ca:	2800      	cmp	r0, #0
 801b5cc:	d1ab      	bne.n	801b526 <_vfiprintf_r+0x77a>
 801b5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5d0:	9a02      	ldr	r2, [sp, #8]
 801b5d2:	9903      	ldr	r1, [sp, #12]
 801b5d4:	428e      	cmp	r6, r1
 801b5d6:	bfac      	ite	ge
 801b5d8:	1992      	addge	r2, r2, r6
 801b5da:	1852      	addlt	r2, r2, r1
 801b5dc:	9202      	str	r2, [sp, #8]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d088      	beq.n	801b4f4 <_vfiprintf_r+0x748>
 801b5e2:	9801      	ldr	r0, [sp, #4]
 801b5e4:	9900      	ldr	r1, [sp, #0]
 801b5e6:	aa0d      	add	r2, sp, #52	; 0x34
 801b5e8:	f7ff fb98 	bl	801ad1c <__sprint_r.part.0>
 801b5ec:	2800      	cmp	r0, #0
 801b5ee:	d081      	beq.n	801b4f4 <_vfiprintf_r+0x748>
 801b5f0:	e799      	b.n	801b526 <_vfiprintf_r+0x77a>
 801b5f2:	4640      	mov	r0, r8
 801b5f4:	4649      	mov	r1, r9
 801b5f6:	aa0d      	add	r2, sp, #52	; 0x34
 801b5f8:	f7ff fb90 	bl	801ad1c <__sprint_r.part.0>
 801b5fc:	2800      	cmp	r0, #0
 801b5fe:	d192      	bne.n	801b526 <_vfiprintf_r+0x77a>
 801b600:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b604:	f100 0e01 	add.w	lr, r0, #1
 801b608:	4652      	mov	r2, sl
 801b60a:	e7ba      	b.n	801b582 <_vfiprintf_r+0x7d6>
 801b60c:	9b03      	ldr	r3, [sp, #12]
 801b60e:	1b9f      	subs	r7, r3, r6
 801b610:	2f00      	cmp	r7, #0
 801b612:	f77f af27 	ble.w	801b464 <_vfiprintf_r+0x6b8>
 801b616:	2f10      	cmp	r7, #16
 801b618:	4d40      	ldr	r5, [pc, #256]	; (801b71c <_vfiprintf_r+0x970>)
 801b61a:	f340 81b5 	ble.w	801b988 <_vfiprintf_r+0xbdc>
 801b61e:	4620      	mov	r0, r4
 801b620:	2310      	movs	r3, #16
 801b622:	4664      	mov	r4, ip
 801b624:	4684      	mov	ip, r0
 801b626:	e007      	b.n	801b638 <_vfiprintf_r+0x88c>
 801b628:	f101 0e02 	add.w	lr, r1, #2
 801b62c:	f10c 0c08 	add.w	ip, ip, #8
 801b630:	4601      	mov	r1, r0
 801b632:	3f10      	subs	r7, #16
 801b634:	2f10      	cmp	r7, #16
 801b636:	dd11      	ble.n	801b65c <_vfiprintf_r+0x8b0>
 801b638:	1c48      	adds	r0, r1, #1
 801b63a:	3210      	adds	r2, #16
 801b63c:	2807      	cmp	r0, #7
 801b63e:	920f      	str	r2, [sp, #60]	; 0x3c
 801b640:	f8cc 5000 	str.w	r5, [ip]
 801b644:	f8cc 3004 	str.w	r3, [ip, #4]
 801b648:	900e      	str	r0, [sp, #56]	; 0x38
 801b64a:	dded      	ble.n	801b628 <_vfiprintf_r+0x87c>
 801b64c:	b9c2      	cbnz	r2, 801b680 <_vfiprintf_r+0x8d4>
 801b64e:	3f10      	subs	r7, #16
 801b650:	2f10      	cmp	r7, #16
 801b652:	f04f 0e01 	mov.w	lr, #1
 801b656:	4611      	mov	r1, r2
 801b658:	46d4      	mov	ip, sl
 801b65a:	dced      	bgt.n	801b638 <_vfiprintf_r+0x88c>
 801b65c:	4663      	mov	r3, ip
 801b65e:	46a4      	mov	ip, r4
 801b660:	461c      	mov	r4, r3
 801b662:	443a      	add	r2, r7
 801b664:	f1be 0f07 	cmp.w	lr, #7
 801b668:	920f      	str	r2, [sp, #60]	; 0x3c
 801b66a:	e884 00a0 	stmia.w	r4, {r5, r7}
 801b66e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801b672:	f300 80f0 	bgt.w	801b856 <_vfiprintf_r+0xaaa>
 801b676:	3408      	adds	r4, #8
 801b678:	f10e 0001 	add.w	r0, lr, #1
 801b67c:	4671      	mov	r1, lr
 801b67e:	e6f1      	b.n	801b464 <_vfiprintf_r+0x6b8>
 801b680:	9801      	ldr	r0, [sp, #4]
 801b682:	9900      	ldr	r1, [sp, #0]
 801b684:	9305      	str	r3, [sp, #20]
 801b686:	aa0d      	add	r2, sp, #52	; 0x34
 801b688:	f7ff fb48 	bl	801ad1c <__sprint_r.part.0>
 801b68c:	2800      	cmp	r0, #0
 801b68e:	f47f af4a 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b692:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b696:	9b05      	ldr	r3, [sp, #20]
 801b698:	f101 0e01 	add.w	lr, r1, #1
 801b69c:	46d4      	mov	ip, sl
 801b69e:	e7c8      	b.n	801b632 <_vfiprintf_r+0x886>
 801b6a0:	2a00      	cmp	r2, #0
 801b6a2:	f040 80c7 	bne.w	801b834 <_vfiprintf_r+0xa88>
 801b6a6:	9b05      	ldr	r3, [sp, #20]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	f000 8087 	beq.w	801b7bc <_vfiprintf_r+0xa10>
 801b6ae:	aa0c      	add	r2, sp, #48	; 0x30
 801b6b0:	2302      	movs	r3, #2
 801b6b2:	921a      	str	r2, [sp, #104]	; 0x68
 801b6b4:	4608      	mov	r0, r1
 801b6b6:	931b      	str	r3, [sp, #108]	; 0x6c
 801b6b8:	461a      	mov	r2, r3
 801b6ba:	4654      	mov	r4, sl
 801b6bc:	e6cb      	b.n	801b456 <_vfiprintf_r+0x6aa>
 801b6be:	2a00      	cmp	r2, #0
 801b6c0:	f040 80a7 	bne.w	801b812 <_vfiprintf_r+0xa66>
 801b6c4:	2001      	movs	r0, #1
 801b6c6:	4611      	mov	r1, r2
 801b6c8:	4654      	mov	r4, sl
 801b6ca:	e6c7      	b.n	801b45c <_vfiprintf_r+0x6b0>
 801b6cc:	bb03      	cbnz	r3, 801b710 <_vfiprintf_r+0x964>
 801b6ce:	f018 0f01 	tst.w	r8, #1
 801b6d2:	d01d      	beq.n	801b710 <_vfiprintf_r+0x964>
 801b6d4:	ab2a      	add	r3, sp, #168	; 0xa8
 801b6d6:	2230      	movs	r2, #48	; 0x30
 801b6d8:	f803 2d41 	strb.w	r2, [r3, #-65]!
 801b6dc:	ebc3 090a 	rsb	r9, r3, sl
 801b6e0:	9307      	str	r3, [sp, #28]
 801b6e2:	e492      	b.n	801b00a <_vfiprintf_r+0x25e>
 801b6e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6e6:	46d1      	mov	r9, sl
 801b6e8:	0933      	lsrs	r3, r6, #4
 801b6ea:	f006 010f 	and.w	r1, r6, #15
 801b6ee:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801b6f2:	093a      	lsrs	r2, r7, #4
 801b6f4:	461e      	mov	r6, r3
 801b6f6:	4617      	mov	r7, r2
 801b6f8:	5c43      	ldrb	r3, [r0, r1]
 801b6fa:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b6fe:	ea56 0307 	orrs.w	r3, r6, r7
 801b702:	d1f1      	bne.n	801b6e8 <_vfiprintf_r+0x93c>
 801b704:	464b      	mov	r3, r9
 801b706:	f8cd 901c 	str.w	r9, [sp, #28]
 801b70a:	ebc3 090a 	rsb	r9, r3, sl
 801b70e:	e47c      	b.n	801b00a <_vfiprintf_r+0x25e>
 801b710:	f8cd a01c 	str.w	sl, [sp, #28]
 801b714:	e479      	b.n	801b00a <_vfiprintf_r+0x25e>
 801b716:	2302      	movs	r3, #2
 801b718:	e449      	b.n	801afae <_vfiprintf_r+0x202>
 801b71a:	bf00      	nop
 801b71c:	0803565c 	.word	0x0803565c
 801b720:	0803566c 	.word	0x0803566c
 801b724:	2a00      	cmp	r2, #0
 801b726:	f040 80d7 	bne.w	801b8d8 <_vfiprintf_r+0xb2c>
 801b72a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 801b72e:	2b00      	cmp	r3, #0
 801b730:	f000 80ae 	beq.w	801b890 <_vfiprintf_r+0xae4>
 801b734:	2301      	movs	r3, #1
 801b736:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 801b73a:	4618      	mov	r0, r3
 801b73c:	931b      	str	r3, [sp, #108]	; 0x6c
 801b73e:	461a      	mov	r2, r3
 801b740:	911a      	str	r1, [sp, #104]	; 0x68
 801b742:	4654      	mov	r4, sl
 801b744:	e678      	b.n	801b438 <_vfiprintf_r+0x68c>
 801b746:	9a03      	ldr	r2, [sp, #12]
 801b748:	1b95      	subs	r5, r2, r6
 801b74a:	2d00      	cmp	r5, #0
 801b74c:	4652      	mov	r2, sl
 801b74e:	f73f af09 	bgt.w	801b564 <_vfiprintf_r+0x7b8>
 801b752:	e6c8      	b.n	801b4e6 <_vfiprintf_r+0x73a>
 801b754:	465d      	mov	r5, fp
 801b756:	f7ff bb82 	b.w	801ae5e <_vfiprintf_r+0xb2>
 801b75a:	9801      	ldr	r0, [sp, #4]
 801b75c:	9900      	ldr	r1, [sp, #0]
 801b75e:	aa0d      	add	r2, sp, #52	; 0x34
 801b760:	f7ff fadc 	bl	801ad1c <__sprint_r.part.0>
 801b764:	2800      	cmp	r0, #0
 801b766:	f47f aede 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b76a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b76c:	4652      	mov	r2, sl
 801b76e:	e6f2      	b.n	801b556 <_vfiprintf_r+0x7aa>
 801b770:	9904      	ldr	r1, [sp, #16]
 801b772:	460a      	mov	r2, r1
 801b774:	3204      	adds	r2, #4
 801b776:	680e      	ldr	r6, [r1, #0]
 801b778:	9204      	str	r2, [sp, #16]
 801b77a:	2700      	movs	r7, #0
 801b77c:	e417      	b.n	801afae <_vfiprintf_r+0x202>
 801b77e:	3204      	adds	r2, #4
 801b780:	681e      	ldr	r6, [r3, #0]
 801b782:	9204      	str	r2, [sp, #16]
 801b784:	2301      	movs	r3, #1
 801b786:	2700      	movs	r7, #0
 801b788:	e411      	b.n	801afae <_vfiprintf_r+0x202>
 801b78a:	6816      	ldr	r6, [r2, #0]
 801b78c:	3204      	adds	r2, #4
 801b78e:	9204      	str	r2, [sp, #16]
 801b790:	2700      	movs	r7, #0
 801b792:	e530      	b.n	801b1f6 <_vfiprintf_r+0x44a>
 801b794:	9a04      	ldr	r2, [sp, #16]
 801b796:	6816      	ldr	r6, [r2, #0]
 801b798:	4613      	mov	r3, r2
 801b79a:	3304      	adds	r3, #4
 801b79c:	17f7      	asrs	r7, r6, #31
 801b79e:	9304      	str	r3, [sp, #16]
 801b7a0:	4632      	mov	r2, r6
 801b7a2:	463b      	mov	r3, r7
 801b7a4:	e4c2      	b.n	801b12c <_vfiprintf_r+0x380>
 801b7a6:	9801      	ldr	r0, [sp, #4]
 801b7a8:	9900      	ldr	r1, [sp, #0]
 801b7aa:	aa0d      	add	r2, sp, #52	; 0x34
 801b7ac:	f7ff fab6 	bl	801ad1c <__sprint_r.part.0>
 801b7b0:	2800      	cmp	r0, #0
 801b7b2:	f47f aeb8 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b7b6:	4654      	mov	r4, sl
 801b7b8:	f7ff bbc2 	b.w	801af40 <_vfiprintf_r+0x194>
 801b7bc:	4608      	mov	r0, r1
 801b7be:	4654      	mov	r4, sl
 801b7c0:	4611      	mov	r1, r2
 801b7c2:	e64b      	b.n	801b45c <_vfiprintf_r+0x6b0>
 801b7c4:	46d1      	mov	r9, sl
 801b7c6:	f8cd c014 	str.w	ip, [sp, #20]
 801b7ca:	4630      	mov	r0, r6
 801b7cc:	4639      	mov	r1, r7
 801b7ce:	220a      	movs	r2, #10
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	f7e5 fce1 	bl	8001198 <__aeabi_uldivmod>
 801b7d6:	3230      	adds	r2, #48	; 0x30
 801b7d8:	4630      	mov	r0, r6
 801b7da:	4639      	mov	r1, r7
 801b7dc:	f809 2d01 	strb.w	r2, [r9, #-1]!
 801b7e0:	2300      	movs	r3, #0
 801b7e2:	220a      	movs	r2, #10
 801b7e4:	f7e5 fcd8 	bl	8001198 <__aeabi_uldivmod>
 801b7e8:	4606      	mov	r6, r0
 801b7ea:	460f      	mov	r7, r1
 801b7ec:	ea56 0307 	orrs.w	r3, r6, r7
 801b7f0:	d1eb      	bne.n	801b7ca <_vfiprintf_r+0xa1e>
 801b7f2:	f8dd c014 	ldr.w	ip, [sp, #20]
 801b7f6:	e785      	b.n	801b704 <_vfiprintf_r+0x958>
 801b7f8:	2b30      	cmp	r3, #48	; 0x30
 801b7fa:	9b07      	ldr	r3, [sp, #28]
 801b7fc:	d085      	beq.n	801b70a <_vfiprintf_r+0x95e>
 801b7fe:	3b01      	subs	r3, #1
 801b800:	461a      	mov	r2, r3
 801b802:	9307      	str	r3, [sp, #28]
 801b804:	2330      	movs	r3, #48	; 0x30
 801b806:	ebc2 090a 	rsb	r9, r2, sl
 801b80a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801b80e:	f7ff bbfc 	b.w	801b00a <_vfiprintf_r+0x25e>
 801b812:	9801      	ldr	r0, [sp, #4]
 801b814:	9900      	ldr	r1, [sp, #0]
 801b816:	f8cd c014 	str.w	ip, [sp, #20]
 801b81a:	aa0d      	add	r2, sp, #52	; 0x34
 801b81c:	f7ff fa7e 	bl	801ad1c <__sprint_r.part.0>
 801b820:	2800      	cmp	r0, #0
 801b822:	f47f ae80 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b826:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b82a:	f8dd c014 	ldr.w	ip, [sp, #20]
 801b82e:	1c48      	adds	r0, r1, #1
 801b830:	4654      	mov	r4, sl
 801b832:	e613      	b.n	801b45c <_vfiprintf_r+0x6b0>
 801b834:	9801      	ldr	r0, [sp, #4]
 801b836:	9900      	ldr	r1, [sp, #0]
 801b838:	f8cd c020 	str.w	ip, [sp, #32]
 801b83c:	aa0d      	add	r2, sp, #52	; 0x34
 801b83e:	f7ff fa6d 	bl	801ad1c <__sprint_r.part.0>
 801b842:	2800      	cmp	r0, #0
 801b844:	f47f ae6f 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b848:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b84a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b84c:	f8dd c020 	ldr.w	ip, [sp, #32]
 801b850:	1c48      	adds	r0, r1, #1
 801b852:	4654      	mov	r4, sl
 801b854:	e5f3      	b.n	801b43e <_vfiprintf_r+0x692>
 801b856:	2a00      	cmp	r2, #0
 801b858:	d167      	bne.n	801b92a <_vfiprintf_r+0xb7e>
 801b85a:	2001      	movs	r0, #1
 801b85c:	4611      	mov	r1, r2
 801b85e:	4654      	mov	r4, sl
 801b860:	e600      	b.n	801b464 <_vfiprintf_r+0x6b8>
 801b862:	9801      	ldr	r0, [sp, #4]
 801b864:	9900      	ldr	r1, [sp, #0]
 801b866:	aa0d      	add	r2, sp, #52	; 0x34
 801b868:	f7ff fa58 	bl	801ad1c <__sprint_r.part.0>
 801b86c:	2800      	cmp	r0, #0
 801b86e:	f47f ae5a 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b872:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b874:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b876:	3001      	adds	r0, #1
 801b878:	4654      	mov	r4, sl
 801b87a:	e623      	b.n	801b4c4 <_vfiprintf_r+0x718>
 801b87c:	252d      	movs	r5, #45	; 0x2d
 801b87e:	4276      	negs	r6, r6
 801b880:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801b884:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801b888:	46e1      	mov	r9, ip
 801b88a:	2301      	movs	r3, #1
 801b88c:	f7ff bb94 	b.w	801afb8 <_vfiprintf_r+0x20c>
 801b890:	9b05      	ldr	r3, [sp, #20]
 801b892:	4611      	mov	r1, r2
 801b894:	2001      	movs	r0, #1
 801b896:	4654      	mov	r4, sl
 801b898:	2b00      	cmp	r3, #0
 801b89a:	f43f ade3 	beq.w	801b464 <_vfiprintf_r+0x6b8>
 801b89e:	aa0c      	add	r2, sp, #48	; 0x30
 801b8a0:	2302      	movs	r3, #2
 801b8a2:	e88a 000c 	stmia.w	sl, {r2, r3}
 801b8a6:	461a      	mov	r2, r3
 801b8a8:	e5d5      	b.n	801b456 <_vfiprintf_r+0x6aa>
 801b8aa:	f018 0f10 	tst.w	r8, #16
 801b8ae:	d10b      	bne.n	801b8c8 <_vfiprintf_r+0xb1c>
 801b8b0:	f018 0f40 	tst.w	r8, #64	; 0x40
 801b8b4:	d008      	beq.n	801b8c8 <_vfiprintf_r+0xb1c>
 801b8b6:	9a04      	ldr	r2, [sp, #16]
 801b8b8:	6813      	ldr	r3, [r2, #0]
 801b8ba:	3204      	adds	r2, #4
 801b8bc:	9204      	str	r2, [sp, #16]
 801b8be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b8c2:	801a      	strh	r2, [r3, #0]
 801b8c4:	f7ff baa4 	b.w	801ae10 <_vfiprintf_r+0x64>
 801b8c8:	9a04      	ldr	r2, [sp, #16]
 801b8ca:	6813      	ldr	r3, [r2, #0]
 801b8cc:	3204      	adds	r2, #4
 801b8ce:	9204      	str	r2, [sp, #16]
 801b8d0:	9a02      	ldr	r2, [sp, #8]
 801b8d2:	601a      	str	r2, [r3, #0]
 801b8d4:	f7ff ba9c 	b.w	801ae10 <_vfiprintf_r+0x64>
 801b8d8:	9801      	ldr	r0, [sp, #4]
 801b8da:	9900      	ldr	r1, [sp, #0]
 801b8dc:	f8cd c020 	str.w	ip, [sp, #32]
 801b8e0:	aa0d      	add	r2, sp, #52	; 0x34
 801b8e2:	f7ff fa1b 	bl	801ad1c <__sprint_r.part.0>
 801b8e6:	2800      	cmp	r0, #0
 801b8e8:	f47f ae1d 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b8ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b8ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8f0:	f8dd c020 	ldr.w	ip, [sp, #32]
 801b8f4:	1c48      	adds	r0, r1, #1
 801b8f6:	4654      	mov	r4, sl
 801b8f8:	e590      	b.n	801b41c <_vfiprintf_r+0x670>
 801b8fa:	f048 0820 	orr.w	r8, r8, #32
 801b8fe:	f10b 0001 	add.w	r0, fp, #1
 801b902:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801b906:	f7ff bab8 	b.w	801ae7a <_vfiprintf_r+0xce>
 801b90a:	426d      	negs	r5, r5
 801b90c:	9304      	str	r3, [sp, #16]
 801b90e:	4658      	mov	r0, fp
 801b910:	f7ff bbc9 	b.w	801b0a6 <_vfiprintf_r+0x2fa>
 801b914:	9807      	ldr	r0, [sp, #28]
 801b916:	9604      	str	r6, [sp, #16]
 801b918:	f7fd ff88 	bl	801982c <strlen>
 801b91c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 801b920:	4681      	mov	r9, r0
 801b922:	f04f 0c00 	mov.w	ip, #0
 801b926:	f7ff bb70 	b.w	801b00a <_vfiprintf_r+0x25e>
 801b92a:	9801      	ldr	r0, [sp, #4]
 801b92c:	9900      	ldr	r1, [sp, #0]
 801b92e:	f8cd c014 	str.w	ip, [sp, #20]
 801b932:	aa0d      	add	r2, sp, #52	; 0x34
 801b934:	f7ff f9f2 	bl	801ad1c <__sprint_r.part.0>
 801b938:	2800      	cmp	r0, #0
 801b93a:	f47f adf4 	bne.w	801b526 <_vfiprintf_r+0x77a>
 801b93e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b942:	f8dd c014 	ldr.w	ip, [sp, #20]
 801b946:	1c48      	adds	r0, r1, #1
 801b948:	4654      	mov	r4, sl
 801b94a:	e58b      	b.n	801b464 <_vfiprintf_r+0x6b8>
 801b94c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b94e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b950:	4f15      	ldr	r7, [pc, #84]	; (801b9a8 <_vfiprintf_r+0xbfc>)
 801b952:	3101      	adds	r1, #1
 801b954:	f7ff bb9b 	b.w	801b08e <_vfiprintf_r+0x2e2>
 801b958:	f1bc 0f06 	cmp.w	ip, #6
 801b95c:	bf28      	it	cs
 801b95e:	f04f 0c06 	movcs.w	ip, #6
 801b962:	4b12      	ldr	r3, [pc, #72]	; (801b9ac <_vfiprintf_r+0xc00>)
 801b964:	9604      	str	r6, [sp, #16]
 801b966:	46e1      	mov	r9, ip
 801b968:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 801b96c:	9307      	str	r3, [sp, #28]
 801b96e:	e462      	b.n	801b236 <_vfiprintf_r+0x48a>
 801b970:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b972:	4f0d      	ldr	r7, [pc, #52]	; (801b9a8 <_vfiprintf_r+0xbfc>)
 801b974:	f101 0e01 	add.w	lr, r1, #1
 801b978:	e617      	b.n	801b5aa <_vfiprintf_r+0x7fe>
 801b97a:	46e1      	mov	r9, ip
 801b97c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 801b980:	9604      	str	r6, [sp, #16]
 801b982:	4684      	mov	ip, r0
 801b984:	f7ff bb41 	b.w	801b00a <_vfiprintf_r+0x25e>
 801b988:	4686      	mov	lr, r0
 801b98a:	e66a      	b.n	801b662 <_vfiprintf_r+0x8b6>
 801b98c:	9a04      	ldr	r2, [sp, #16]
 801b98e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801b992:	6816      	ldr	r6, [r2, #0]
 801b994:	3204      	adds	r2, #4
 801b996:	2e00      	cmp	r6, #0
 801b998:	9204      	str	r2, [sp, #16]
 801b99a:	f6bf aa6e 	bge.w	801ae7a <_vfiprintf_r+0xce>
 801b99e:	f04f 36ff 	mov.w	r6, #4294967295
 801b9a2:	f7ff ba6a 	b.w	801ae7a <_vfiprintf_r+0xce>
 801b9a6:	bf00      	nop
 801b9a8:	0803566c 	.word	0x0803566c
 801b9ac:	08035640 	.word	0x08035640

0801b9b0 <__sbprintf>:
 801b9b0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 801b9b4:	460c      	mov	r4, r1
 801b9b6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 801b9ba:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 801b9be:	69e7      	ldr	r7, [r4, #28]
 801b9c0:	6e49      	ldr	r1, [r1, #100]	; 0x64
 801b9c2:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 801b9c6:	9119      	str	r1, [sp, #100]	; 0x64
 801b9c8:	ad1a      	add	r5, sp, #104	; 0x68
 801b9ca:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801b9ce:	f02e 0e02 	bic.w	lr, lr, #2
 801b9d2:	f04f 0c00 	mov.w	ip, #0
 801b9d6:	9707      	str	r7, [sp, #28]
 801b9d8:	4669      	mov	r1, sp
 801b9da:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801b9dc:	9500      	str	r5, [sp, #0]
 801b9de:	9504      	str	r5, [sp, #16]
 801b9e0:	9602      	str	r6, [sp, #8]
 801b9e2:	9605      	str	r6, [sp, #20]
 801b9e4:	f8ad e00c 	strh.w	lr, [sp, #12]
 801b9e8:	f8ad 900e 	strh.w	r9, [sp, #14]
 801b9ec:	9709      	str	r7, [sp, #36]	; 0x24
 801b9ee:	f8cd c018 	str.w	ip, [sp, #24]
 801b9f2:	4606      	mov	r6, r0
 801b9f4:	f7ff f9da 	bl	801adac <_vfiprintf_r>
 801b9f8:	1e05      	subs	r5, r0, #0
 801b9fa:	db07      	blt.n	801ba0c <__sbprintf+0x5c>
 801b9fc:	4630      	mov	r0, r6
 801b9fe:	4669      	mov	r1, sp
 801ba00:	f002 fb38 	bl	801e074 <_fflush_r>
 801ba04:	2800      	cmp	r0, #0
 801ba06:	bf18      	it	ne
 801ba08:	f04f 35ff 	movne.w	r5, #4294967295
 801ba0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ba10:	065b      	lsls	r3, r3, #25
 801ba12:	d503      	bpl.n	801ba1c <__sbprintf+0x6c>
 801ba14:	89a3      	ldrh	r3, [r4, #12]
 801ba16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba1a:	81a3      	strh	r3, [r4, #12]
 801ba1c:	4628      	mov	r0, r5
 801ba1e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 801ba22:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801ba26:	bf00      	nop

0801ba28 <_vfprintf_r>:
 801ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba2c:	b0bf      	sub	sp, #252	; 0xfc
 801ba2e:	461c      	mov	r4, r3
 801ba30:	4689      	mov	r9, r1
 801ba32:	9208      	str	r2, [sp, #32]
 801ba34:	4607      	mov	r7, r0
 801ba36:	f002 ff03 	bl	801e840 <_localeconv_r>
 801ba3a:	6803      	ldr	r3, [r0, #0]
 801ba3c:	9315      	str	r3, [sp, #84]	; 0x54
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f7fd fef4 	bl	801982c <strlen>
 801ba44:	940c      	str	r4, [sp, #48]	; 0x30
 801ba46:	9016      	str	r0, [sp, #88]	; 0x58
 801ba48:	b11f      	cbz	r7, 801ba52 <_vfprintf_r+0x2a>
 801ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	f000 80f3 	beq.w	801bc38 <_vfprintf_r+0x210>
 801ba52:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 801ba56:	b293      	uxth	r3, r2
 801ba58:	049d      	lsls	r5, r3, #18
 801ba5a:	d40a      	bmi.n	801ba72 <_vfprintf_r+0x4a>
 801ba5c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 801ba60:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 801ba64:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 801ba68:	f8a9 300c 	strh.w	r3, [r9, #12]
 801ba6c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 801ba70:	b29b      	uxth	r3, r3
 801ba72:	0718      	lsls	r0, r3, #28
 801ba74:	f140 80aa 	bpl.w	801bbcc <_vfprintf_r+0x1a4>
 801ba78:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801ba7c:	2a00      	cmp	r2, #0
 801ba7e:	f000 80a5 	beq.w	801bbcc <_vfprintf_r+0x1a4>
 801ba82:	f003 031a 	and.w	r3, r3, #26
 801ba86:	2b0a      	cmp	r3, #10
 801ba88:	f000 80ac 	beq.w	801bbe4 <_vfprintf_r+0x1bc>
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	461a      	mov	r2, r3
 801ba90:	9311      	str	r3, [sp, #68]	; 0x44
 801ba92:	9323      	str	r3, [sp, #140]	; 0x8c
 801ba94:	9322      	str	r3, [sp, #136]	; 0x88
 801ba96:	9314      	str	r3, [sp, #80]	; 0x50
 801ba98:	9317      	str	r3, [sp, #92]	; 0x5c
 801ba9a:	9309      	str	r3, [sp, #36]	; 0x24
 801ba9c:	ab2e      	add	r3, sp, #184	; 0xb8
 801ba9e:	469c      	mov	ip, r3
 801baa0:	9321      	str	r3, [sp, #132]	; 0x84
 801baa2:	9212      	str	r2, [sp, #72]	; 0x48
 801baa4:	9213      	str	r2, [sp, #76]	; 0x4c
 801baa6:	4664      	mov	r4, ip
 801baa8:	46b8      	mov	r8, r7
 801baaa:	9d08      	ldr	r5, [sp, #32]
 801baac:	782b      	ldrb	r3, [r5, #0]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	f000 80c6 	beq.w	801bc40 <_vfprintf_r+0x218>
 801bab4:	2b25      	cmp	r3, #37	; 0x25
 801bab6:	d102      	bne.n	801babe <_vfprintf_r+0x96>
 801bab8:	e0c2      	b.n	801bc40 <_vfprintf_r+0x218>
 801baba:	2b25      	cmp	r3, #37	; 0x25
 801babc:	d003      	beq.n	801bac6 <_vfprintf_r+0x9e>
 801babe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d1f9      	bne.n	801baba <_vfprintf_r+0x92>
 801bac6:	9b08      	ldr	r3, [sp, #32]
 801bac8:	1aee      	subs	r6, r5, r3
 801baca:	b17e      	cbz	r6, 801baec <_vfprintf_r+0xc4>
 801bacc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bace:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801bad0:	9908      	ldr	r1, [sp, #32]
 801bad2:	6021      	str	r1, [r4, #0]
 801bad4:	3301      	adds	r3, #1
 801bad6:	4432      	add	r2, r6
 801bad8:	2b07      	cmp	r3, #7
 801bada:	6066      	str	r6, [r4, #4]
 801badc:	9223      	str	r2, [sp, #140]	; 0x8c
 801bade:	9322      	str	r3, [sp, #136]	; 0x88
 801bae0:	f300 8093 	bgt.w	801bc0a <_vfprintf_r+0x1e2>
 801bae4:	3408      	adds	r4, #8
 801bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bae8:	4433      	add	r3, r6
 801baea:	9309      	str	r3, [sp, #36]	; 0x24
 801baec:	782b      	ldrb	r3, [r5, #0]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	f000 8093 	beq.w	801bc1a <_vfprintf_r+0x1f2>
 801baf4:	2300      	movs	r3, #0
 801baf6:	1c69      	adds	r1, r5, #1
 801baf8:	f04f 3aff 	mov.w	sl, #4294967295
 801bafc:	786d      	ldrb	r5, [r5, #1]
 801bafe:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 801bb02:	461a      	mov	r2, r3
 801bb04:	930a      	str	r3, [sp, #40]	; 0x28
 801bb06:	9306      	str	r3, [sp, #24]
 801bb08:	4656      	mov	r6, sl
 801bb0a:	1c4b      	adds	r3, r1, #1
 801bb0c:	f1a5 0120 	sub.w	r1, r5, #32
 801bb10:	2958      	cmp	r1, #88	; 0x58
 801bb12:	f200 83c1 	bhi.w	801c298 <_vfprintf_r+0x870>
 801bb16:	e8df f011 	tbh	[pc, r1, lsl #1]
 801bb1a:	0256      	.short	0x0256
 801bb1c:	03bf03bf 	.word	0x03bf03bf
 801bb20:	03bf02f6 	.word	0x03bf02f6
 801bb24:	03bf03bf 	.word	0x03bf03bf
 801bb28:	03bf03bf 	.word	0x03bf03bf
 801bb2c:	02fd03bf 	.word	0x02fd03bf
 801bb30:	03bf02c6 	.word	0x03bf02c6
 801bb34:	034701f2 	.word	0x034701f2
 801bb38:	02ca03bf 	.word	0x02ca03bf
 801bb3c:	02d102d1 	.word	0x02d102d1
 801bb40:	02d102d1 	.word	0x02d102d1
 801bb44:	02d102d1 	.word	0x02d102d1
 801bb48:	02d102d1 	.word	0x02d102d1
 801bb4c:	03bf02d1 	.word	0x03bf02d1
 801bb50:	03bf03bf 	.word	0x03bf03bf
 801bb54:	03bf03bf 	.word	0x03bf03bf
 801bb58:	03bf03bf 	.word	0x03bf03bf
 801bb5c:	03bf03bf 	.word	0x03bf03bf
 801bb60:	026b03bf 	.word	0x026b03bf
 801bb64:	03bf028d 	.word	0x03bf028d
 801bb68:	03bf028d 	.word	0x03bf028d
 801bb6c:	03bf03bf 	.word	0x03bf03bf
 801bb70:	02bf03bf 	.word	0x02bf03bf
 801bb74:	03bf03bf 	.word	0x03bf03bf
 801bb78:	03bf0362 	.word	0x03bf0362
 801bb7c:	03bf03bf 	.word	0x03bf03bf
 801bb80:	03bf03bf 	.word	0x03bf03bf
 801bb84:	03bf03a9 	.word	0x03bf03a9
 801bb88:	037f03bf 	.word	0x037f03bf
 801bb8c:	03bf03bf 	.word	0x03bf03bf
 801bb90:	03bf03bf 	.word	0x03bf03bf
 801bb94:	03bf03bf 	.word	0x03bf03bf
 801bb98:	03bf03bf 	.word	0x03bf03bf
 801bb9c:	03bf03bf 	.word	0x03bf03bf
 801bba0:	030b0394 	.word	0x030b0394
 801bba4:	028d028d 	.word	0x028d028d
 801bba8:	0324028d 	.word	0x0324028d
 801bbac:	03bf030b 	.word	0x03bf030b
 801bbb0:	032b03bf 	.word	0x032b03bf
 801bbb4:	033503bf 	.word	0x033503bf
 801bbb8:	02e001f9 	.word	0x02e001f9
 801bbbc:	03bf025d 	.word	0x03bf025d
 801bbc0:	03bf020b 	.word	0x03bf020b
 801bbc4:	03bf0095 	.word	0x03bf0095
 801bbc8:	023003bf 	.word	0x023003bf
 801bbcc:	4638      	mov	r0, r7
 801bbce:	4649      	mov	r1, r9
 801bbd0:	f001 f95a 	bl	801ce88 <__swsetup_r>
 801bbd4:	b9a0      	cbnz	r0, 801bc00 <_vfprintf_r+0x1d8>
 801bbd6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bbda:	f003 031a 	and.w	r3, r3, #26
 801bbde:	2b0a      	cmp	r3, #10
 801bbe0:	f47f af54 	bne.w	801ba8c <_vfprintf_r+0x64>
 801bbe4:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	f6ff af4f 	blt.w	801ba8c <_vfprintf_r+0x64>
 801bbee:	4638      	mov	r0, r7
 801bbf0:	4649      	mov	r1, r9
 801bbf2:	9a08      	ldr	r2, [sp, #32]
 801bbf4:	4623      	mov	r3, r4
 801bbf6:	f001 f90b 	bl	801ce10 <__sbprintf>
 801bbfa:	b03f      	add	sp, #252	; 0xfc
 801bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc00:	f04f 30ff 	mov.w	r0, #4294967295
 801bc04:	b03f      	add	sp, #252	; 0xfc
 801bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc0a:	4640      	mov	r0, r8
 801bc0c:	4649      	mov	r1, r9
 801bc0e:	aa21      	add	r2, sp, #132	; 0x84
 801bc10:	f7ff f8c0 	bl	801ad94 <__sprint_r>
 801bc14:	b940      	cbnz	r0, 801bc28 <_vfprintf_r+0x200>
 801bc16:	ac2e      	add	r4, sp, #184	; 0xb8
 801bc18:	e765      	b.n	801bae6 <_vfprintf_r+0xbe>
 801bc1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bc1c:	b123      	cbz	r3, 801bc28 <_vfprintf_r+0x200>
 801bc1e:	4640      	mov	r0, r8
 801bc20:	4649      	mov	r1, r9
 801bc22:	aa21      	add	r2, sp, #132	; 0x84
 801bc24:	f7ff f8b6 	bl	801ad94 <__sprint_r>
 801bc28:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bc2c:	065a      	lsls	r2, r3, #25
 801bc2e:	d4e7      	bmi.n	801bc00 <_vfprintf_r+0x1d8>
 801bc30:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc32:	b03f      	add	sp, #252	; 0xfc
 801bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc38:	4638      	mov	r0, r7
 801bc3a:	f002 faaf 	bl	801e19c <__sinit>
 801bc3e:	e708      	b.n	801ba52 <_vfprintf_r+0x2a>
 801bc40:	9d08      	ldr	r5, [sp, #32]
 801bc42:	e753      	b.n	801baec <_vfprintf_r+0xc4>
 801bc44:	9308      	str	r3, [sp, #32]
 801bc46:	9b06      	ldr	r3, [sp, #24]
 801bc48:	46b2      	mov	sl, r6
 801bc4a:	069e      	lsls	r6, r3, #26
 801bc4c:	f140 8318 	bpl.w	801c280 <_vfprintf_r+0x858>
 801bc50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bc52:	3707      	adds	r7, #7
 801bc54:	f027 0307 	bic.w	r3, r7, #7
 801bc58:	f103 0208 	add.w	r2, r3, #8
 801bc5c:	e9d3 6700 	ldrd	r6, r7, [r3]
 801bc60:	920c      	str	r2, [sp, #48]	; 0x30
 801bc62:	2301      	movs	r3, #1
 801bc64:	f04f 0c00 	mov.w	ip, #0
 801bc68:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 801bc6c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801bc70:	f1ba 0f00 	cmp.w	sl, #0
 801bc74:	db03      	blt.n	801bc7e <_vfprintf_r+0x256>
 801bc76:	9a06      	ldr	r2, [sp, #24]
 801bc78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bc7c:	9206      	str	r2, [sp, #24]
 801bc7e:	ea56 0207 	orrs.w	r2, r6, r7
 801bc82:	f040 8319 	bne.w	801c2b8 <_vfprintf_r+0x890>
 801bc86:	f1ba 0f00 	cmp.w	sl, #0
 801bc8a:	f000 8416 	beq.w	801c4ba <_vfprintf_r+0xa92>
 801bc8e:	2b01      	cmp	r3, #1
 801bc90:	f000 831a 	beq.w	801c2c8 <_vfprintf_r+0x8a0>
 801bc94:	2b02      	cmp	r3, #2
 801bc96:	f000 844c 	beq.w	801c532 <_vfprintf_r+0xb0a>
 801bc9a:	a92e      	add	r1, sp, #184	; 0xb8
 801bc9c:	08f2      	lsrs	r2, r6, #3
 801bc9e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801bca2:	08f8      	lsrs	r0, r7, #3
 801bca4:	f006 0307 	and.w	r3, r6, #7
 801bca8:	4607      	mov	r7, r0
 801bcaa:	4616      	mov	r6, r2
 801bcac:	3330      	adds	r3, #48	; 0x30
 801bcae:	ea56 0207 	orrs.w	r2, r6, r7
 801bcb2:	f801 3d01 	strb.w	r3, [r1, #-1]!
 801bcb6:	d1f1      	bne.n	801bc9c <_vfprintf_r+0x274>
 801bcb8:	9a06      	ldr	r2, [sp, #24]
 801bcba:	910e      	str	r1, [sp, #56]	; 0x38
 801bcbc:	07d0      	lsls	r0, r2, #31
 801bcbe:	f100 850d 	bmi.w	801c6dc <_vfprintf_r+0xcb4>
 801bcc2:	ab2e      	add	r3, sp, #184	; 0xb8
 801bcc4:	1a5b      	subs	r3, r3, r1
 801bcc6:	930b      	str	r3, [sp, #44]	; 0x2c
 801bcc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bcca:	4592      	cmp	sl, r2
 801bccc:	4653      	mov	r3, sl
 801bcce:	bfb8      	it	lt
 801bcd0:	4613      	movlt	r3, r2
 801bcd2:	9307      	str	r3, [sp, #28]
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	9310      	str	r3, [sp, #64]	; 0x40
 801bcd8:	f1bc 0f00 	cmp.w	ip, #0
 801bcdc:	d002      	beq.n	801bce4 <_vfprintf_r+0x2bc>
 801bcde:	9b07      	ldr	r3, [sp, #28]
 801bce0:	3301      	adds	r3, #1
 801bce2:	9307      	str	r3, [sp, #28]
 801bce4:	9b06      	ldr	r3, [sp, #24]
 801bce6:	f013 0302 	ands.w	r3, r3, #2
 801bcea:	930d      	str	r3, [sp, #52]	; 0x34
 801bcec:	d002      	beq.n	801bcf4 <_vfprintf_r+0x2cc>
 801bcee:	9b07      	ldr	r3, [sp, #28]
 801bcf0:	3302      	adds	r3, #2
 801bcf2:	9307      	str	r3, [sp, #28]
 801bcf4:	9b06      	ldr	r3, [sp, #24]
 801bcf6:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 801bcfa:	f040 82da 	bne.w	801c2b2 <_vfprintf_r+0x88a>
 801bcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd00:	9a07      	ldr	r2, [sp, #28]
 801bd02:	ebc2 0a03 	rsb	sl, r2, r3
 801bd06:	f1ba 0f00 	cmp.w	sl, #0
 801bd0a:	f340 82d2 	ble.w	801c2b2 <_vfprintf_r+0x88a>
 801bd0e:	f1ba 0f10 	cmp.w	sl, #16
 801bd12:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801bd14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801bd16:	4fb3      	ldr	r7, [pc, #716]	; (801bfe4 <_vfprintf_r+0x5bc>)
 801bd18:	bfc8      	it	gt
 801bd1a:	f04f 0b10 	movgt.w	fp, #16
 801bd1e:	dc07      	bgt.n	801bd30 <_vfprintf_r+0x308>
 801bd20:	e01e      	b.n	801bd60 <_vfprintf_r+0x338>
 801bd22:	f1aa 0a10 	sub.w	sl, sl, #16
 801bd26:	f1ba 0f10 	cmp.w	sl, #16
 801bd2a:	f104 0408 	add.w	r4, r4, #8
 801bd2e:	dd17      	ble.n	801bd60 <_vfprintf_r+0x338>
 801bd30:	3201      	adds	r2, #1
 801bd32:	3110      	adds	r1, #16
 801bd34:	2a07      	cmp	r2, #7
 801bd36:	9123      	str	r1, [sp, #140]	; 0x8c
 801bd38:	9222      	str	r2, [sp, #136]	; 0x88
 801bd3a:	e884 0880 	stmia.w	r4, {r7, fp}
 801bd3e:	ddf0      	ble.n	801bd22 <_vfprintf_r+0x2fa>
 801bd40:	4640      	mov	r0, r8
 801bd42:	4649      	mov	r1, r9
 801bd44:	aa21      	add	r2, sp, #132	; 0x84
 801bd46:	f7ff f825 	bl	801ad94 <__sprint_r>
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	f47f af6c 	bne.w	801bc28 <_vfprintf_r+0x200>
 801bd50:	f1aa 0a10 	sub.w	sl, sl, #16
 801bd54:	f1ba 0f10 	cmp.w	sl, #16
 801bd58:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801bd5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801bd5c:	ac2e      	add	r4, sp, #184	; 0xb8
 801bd5e:	dce7      	bgt.n	801bd30 <_vfprintf_r+0x308>
 801bd60:	3201      	adds	r2, #1
 801bd62:	eb0a 0b01 	add.w	fp, sl, r1
 801bd66:	2a07      	cmp	r2, #7
 801bd68:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801bd6c:	9222      	str	r2, [sp, #136]	; 0x88
 801bd6e:	e884 0480 	stmia.w	r4, {r7, sl}
 801bd72:	f300 8443 	bgt.w	801c5fc <_vfprintf_r+0xbd4>
 801bd76:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801bd7a:	3408      	adds	r4, #8
 801bd7c:	f1bc 0f00 	cmp.w	ip, #0
 801bd80:	d00f      	beq.n	801bda2 <_vfprintf_r+0x37a>
 801bd82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bd84:	3301      	adds	r3, #1
 801bd86:	f10b 0b01 	add.w	fp, fp, #1
 801bd8a:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 801bd8e:	2201      	movs	r2, #1
 801bd90:	2b07      	cmp	r3, #7
 801bd92:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801bd96:	9322      	str	r3, [sp, #136]	; 0x88
 801bd98:	e884 0006 	stmia.w	r4, {r1, r2}
 801bd9c:	f300 83b7 	bgt.w	801c50e <_vfprintf_r+0xae6>
 801bda0:	3408      	adds	r4, #8
 801bda2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bda4:	b173      	cbz	r3, 801bdc4 <_vfprintf_r+0x39c>
 801bda6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bda8:	3301      	adds	r3, #1
 801bdaa:	f10b 0b02 	add.w	fp, fp, #2
 801bdae:	a91a      	add	r1, sp, #104	; 0x68
 801bdb0:	2202      	movs	r2, #2
 801bdb2:	2b07      	cmp	r3, #7
 801bdb4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801bdb8:	9322      	str	r3, [sp, #136]	; 0x88
 801bdba:	e884 0006 	stmia.w	r4, {r1, r2}
 801bdbe:	f300 839a 	bgt.w	801c4f6 <_vfprintf_r+0xace>
 801bdc2:	3408      	adds	r4, #8
 801bdc4:	2e80      	cmp	r6, #128	; 0x80
 801bdc6:	f000 82ea 	beq.w	801c39e <_vfprintf_r+0x976>
 801bdca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bdce:	ebc2 0a03 	rsb	sl, r2, r3
 801bdd2:	f1ba 0f00 	cmp.w	sl, #0
 801bdd6:	dd32      	ble.n	801be3e <_vfprintf_r+0x416>
 801bdd8:	f1ba 0f10 	cmp.w	sl, #16
 801bddc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801bdde:	4f82      	ldr	r7, [pc, #520]	; (801bfe8 <_vfprintf_r+0x5c0>)
 801bde0:	dd22      	ble.n	801be28 <_vfprintf_r+0x400>
 801bde2:	2610      	movs	r6, #16
 801bde4:	465b      	mov	r3, fp
 801bde6:	e006      	b.n	801bdf6 <_vfprintf_r+0x3ce>
 801bde8:	f1aa 0a10 	sub.w	sl, sl, #16
 801bdec:	f1ba 0f10 	cmp.w	sl, #16
 801bdf0:	f104 0408 	add.w	r4, r4, #8
 801bdf4:	dd17      	ble.n	801be26 <_vfprintf_r+0x3fe>
 801bdf6:	3201      	adds	r2, #1
 801bdf8:	3310      	adds	r3, #16
 801bdfa:	2a07      	cmp	r2, #7
 801bdfc:	9323      	str	r3, [sp, #140]	; 0x8c
 801bdfe:	9222      	str	r2, [sp, #136]	; 0x88
 801be00:	6027      	str	r7, [r4, #0]
 801be02:	6066      	str	r6, [r4, #4]
 801be04:	ddf0      	ble.n	801bde8 <_vfprintf_r+0x3c0>
 801be06:	4640      	mov	r0, r8
 801be08:	4649      	mov	r1, r9
 801be0a:	aa21      	add	r2, sp, #132	; 0x84
 801be0c:	f7fe ffc2 	bl	801ad94 <__sprint_r>
 801be10:	2800      	cmp	r0, #0
 801be12:	f47f af09 	bne.w	801bc28 <_vfprintf_r+0x200>
 801be16:	f1aa 0a10 	sub.w	sl, sl, #16
 801be1a:	f1ba 0f10 	cmp.w	sl, #16
 801be1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801be20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801be22:	ac2e      	add	r4, sp, #184	; 0xb8
 801be24:	dce7      	bgt.n	801bdf6 <_vfprintf_r+0x3ce>
 801be26:	469b      	mov	fp, r3
 801be28:	3201      	adds	r2, #1
 801be2a:	44d3      	add	fp, sl
 801be2c:	2a07      	cmp	r2, #7
 801be2e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801be32:	9222      	str	r2, [sp, #136]	; 0x88
 801be34:	e884 0480 	stmia.w	r4, {r7, sl}
 801be38:	f300 8351 	bgt.w	801c4de <_vfprintf_r+0xab6>
 801be3c:	3408      	adds	r4, #8
 801be3e:	9b06      	ldr	r3, [sp, #24]
 801be40:	05db      	lsls	r3, r3, #23
 801be42:	f100 8255 	bmi.w	801c2f0 <_vfprintf_r+0x8c8>
 801be46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801be48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801be4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801be4c:	6022      	str	r2, [r4, #0]
 801be4e:	3301      	adds	r3, #1
 801be50:	448b      	add	fp, r1
 801be52:	2b07      	cmp	r3, #7
 801be54:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801be58:	6061      	str	r1, [r4, #4]
 801be5a:	9322      	str	r3, [sp, #136]	; 0x88
 801be5c:	f300 8317 	bgt.w	801c48e <_vfprintf_r+0xa66>
 801be60:	3408      	adds	r4, #8
 801be62:	9b06      	ldr	r3, [sp, #24]
 801be64:	0759      	lsls	r1, r3, #29
 801be66:	d53a      	bpl.n	801bede <_vfprintf_r+0x4b6>
 801be68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be6a:	9a07      	ldr	r2, [sp, #28]
 801be6c:	1a9d      	subs	r5, r3, r2
 801be6e:	2d00      	cmp	r5, #0
 801be70:	dd35      	ble.n	801bede <_vfprintf_r+0x4b6>
 801be72:	2d10      	cmp	r5, #16
 801be74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801be76:	4f5b      	ldr	r7, [pc, #364]	; (801bfe4 <_vfprintf_r+0x5bc>)
 801be78:	dd1e      	ble.n	801beb8 <_vfprintf_r+0x490>
 801be7a:	2610      	movs	r6, #16
 801be7c:	465a      	mov	r2, fp
 801be7e:	e004      	b.n	801be8a <_vfprintf_r+0x462>
 801be80:	3d10      	subs	r5, #16
 801be82:	2d10      	cmp	r5, #16
 801be84:	f104 0408 	add.w	r4, r4, #8
 801be88:	dd15      	ble.n	801beb6 <_vfprintf_r+0x48e>
 801be8a:	3301      	adds	r3, #1
 801be8c:	3210      	adds	r2, #16
 801be8e:	2b07      	cmp	r3, #7
 801be90:	9223      	str	r2, [sp, #140]	; 0x8c
 801be92:	9322      	str	r3, [sp, #136]	; 0x88
 801be94:	6027      	str	r7, [r4, #0]
 801be96:	6066      	str	r6, [r4, #4]
 801be98:	ddf2      	ble.n	801be80 <_vfprintf_r+0x458>
 801be9a:	4640      	mov	r0, r8
 801be9c:	4649      	mov	r1, r9
 801be9e:	aa21      	add	r2, sp, #132	; 0x84
 801bea0:	f7fe ff78 	bl	801ad94 <__sprint_r>
 801bea4:	2800      	cmp	r0, #0
 801bea6:	f47f aebf 	bne.w	801bc28 <_vfprintf_r+0x200>
 801beaa:	3d10      	subs	r5, #16
 801beac:	2d10      	cmp	r5, #16
 801beae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801beb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801beb2:	ac2e      	add	r4, sp, #184	; 0xb8
 801beb4:	dce9      	bgt.n	801be8a <_vfprintf_r+0x462>
 801beb6:	4693      	mov	fp, r2
 801beb8:	3301      	adds	r3, #1
 801beba:	44ab      	add	fp, r5
 801bebc:	2b07      	cmp	r3, #7
 801bebe:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801bec2:	9322      	str	r3, [sp, #136]	; 0x88
 801bec4:	6027      	str	r7, [r4, #0]
 801bec6:	6065      	str	r5, [r4, #4]
 801bec8:	dd09      	ble.n	801bede <_vfprintf_r+0x4b6>
 801beca:	4640      	mov	r0, r8
 801becc:	4649      	mov	r1, r9
 801bece:	aa21      	add	r2, sp, #132	; 0x84
 801bed0:	f7fe ff60 	bl	801ad94 <__sprint_r>
 801bed4:	2800      	cmp	r0, #0
 801bed6:	f47f aea7 	bne.w	801bc28 <_vfprintf_r+0x200>
 801beda:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bee0:	9a07      	ldr	r2, [sp, #28]
 801bee2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bee4:	428a      	cmp	r2, r1
 801bee6:	bfac      	ite	ge
 801bee8:	189b      	addge	r3, r3, r2
 801beea:	185b      	addlt	r3, r3, r1
 801beec:	9309      	str	r3, [sp, #36]	; 0x24
 801beee:	f1bb 0f00 	cmp.w	fp, #0
 801bef2:	f040 82d8 	bne.w	801c4a6 <_vfprintf_r+0xa7e>
 801bef6:	2300      	movs	r3, #0
 801bef8:	9322      	str	r3, [sp, #136]	; 0x88
 801befa:	ac2e      	add	r4, sp, #184	; 0xb8
 801befc:	e5d5      	b.n	801baaa <_vfprintf_r+0x82>
 801befe:	4619      	mov	r1, r3
 801bf00:	9806      	ldr	r0, [sp, #24]
 801bf02:	781d      	ldrb	r5, [r3, #0]
 801bf04:	f040 0004 	orr.w	r0, r0, #4
 801bf08:	9006      	str	r0, [sp, #24]
 801bf0a:	e5fe      	b.n	801bb0a <_vfprintf_r+0xe2>
 801bf0c:	9308      	str	r3, [sp, #32]
 801bf0e:	9b06      	ldr	r3, [sp, #24]
 801bf10:	f013 0320 	ands.w	r3, r3, #32
 801bf14:	46b2      	mov	sl, r6
 801bf16:	f000 816d 	beq.w	801c1f4 <_vfprintf_r+0x7cc>
 801bf1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bf1c:	3707      	adds	r7, #7
 801bf1e:	f027 0307 	bic.w	r3, r7, #7
 801bf22:	f103 0208 	add.w	r2, r3, #8
 801bf26:	e9d3 6700 	ldrd	r6, r7, [r3]
 801bf2a:	920c      	str	r2, [sp, #48]	; 0x30
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	e699      	b.n	801bc64 <_vfprintf_r+0x23c>
 801bf30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bf32:	9308      	str	r3, [sp, #32]
 801bf34:	6813      	ldr	r3, [r2, #0]
 801bf36:	930e      	str	r3, [sp, #56]	; 0x38
 801bf38:	f04f 0b00 	mov.w	fp, #0
 801bf3c:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 801bf40:	1d17      	adds	r7, r2, #4
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	f000 864f 	beq.w	801cbe6 <_vfprintf_r+0x11be>
 801bf48:	2e00      	cmp	r6, #0
 801bf4a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bf4c:	f2c0 8601 	blt.w	801cb52 <_vfprintf_r+0x112a>
 801bf50:	4659      	mov	r1, fp
 801bf52:	4632      	mov	r2, r6
 801bf54:	f002 ff76 	bl	801ee44 <memchr>
 801bf58:	2800      	cmp	r0, #0
 801bf5a:	f000 8680 	beq.w	801cc5e <_vfprintf_r+0x1236>
 801bf5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf60:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 801bf64:	1ac3      	subs	r3, r0, r3
 801bf66:	930b      	str	r3, [sp, #44]	; 0x2c
 801bf68:	970c      	str	r7, [sp, #48]	; 0x30
 801bf6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf6e:	9307      	str	r3, [sp, #28]
 801bf70:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 801bf74:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801bf78:	e6ae      	b.n	801bcd8 <_vfprintf_r+0x2b0>
 801bf7a:	9308      	str	r3, [sp, #32]
 801bf7c:	4b1b      	ldr	r3, [pc, #108]	; (801bfec <_vfprintf_r+0x5c4>)
 801bf7e:	9314      	str	r3, [sp, #80]	; 0x50
 801bf80:	9b06      	ldr	r3, [sp, #24]
 801bf82:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801bf86:	0699      	lsls	r1, r3, #26
 801bf88:	46b2      	mov	sl, r6
 801bf8a:	f140 814f 	bpl.w	801c22c <_vfprintf_r+0x804>
 801bf8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bf90:	3707      	adds	r7, #7
 801bf92:	f027 0307 	bic.w	r3, r7, #7
 801bf96:	e9d3 6700 	ldrd	r6, r7, [r3]
 801bf9a:	f103 0208 	add.w	r2, r3, #8
 801bf9e:	920c      	str	r2, [sp, #48]	; 0x30
 801bfa0:	9b06      	ldr	r3, [sp, #24]
 801bfa2:	07db      	lsls	r3, r3, #31
 801bfa4:	f140 82de 	bpl.w	801c564 <_vfprintf_r+0xb3c>
 801bfa8:	ea56 0307 	orrs.w	r3, r6, r7
 801bfac:	f000 82da 	beq.w	801c564 <_vfprintf_r+0xb3c>
 801bfb0:	9a06      	ldr	r2, [sp, #24]
 801bfb2:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 801bfb6:	2330      	movs	r3, #48	; 0x30
 801bfb8:	f042 0202 	orr.w	r2, r2, #2
 801bfbc:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801bfc0:	9206      	str	r2, [sp, #24]
 801bfc2:	2302      	movs	r3, #2
 801bfc4:	e64e      	b.n	801bc64 <_vfprintf_r+0x23c>
 801bfc6:	781d      	ldrb	r5, [r3, #0]
 801bfc8:	4619      	mov	r1, r3
 801bfca:	2a00      	cmp	r2, #0
 801bfcc:	f47f ad9d 	bne.w	801bb0a <_vfprintf_r+0xe2>
 801bfd0:	2220      	movs	r2, #32
 801bfd2:	e59a      	b.n	801bb0a <_vfprintf_r+0xe2>
 801bfd4:	9906      	ldr	r1, [sp, #24]
 801bfd6:	f041 0120 	orr.w	r1, r1, #32
 801bfda:	9106      	str	r1, [sp, #24]
 801bfdc:	781d      	ldrb	r5, [r3, #0]
 801bfde:	4619      	mov	r1, r3
 801bfe0:	e593      	b.n	801bb0a <_vfprintf_r+0xe2>
 801bfe2:	bf00      	nop
 801bfe4:	0803568c 	.word	0x0803568c
 801bfe8:	0803567c 	.word	0x0803567c
 801bfec:	0803562c 	.word	0x0803562c
 801bff0:	9308      	str	r3, [sp, #32]
 801bff2:	9b06      	ldr	r3, [sp, #24]
 801bff4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801bff8:	f043 0310 	orr.w	r3, r3, #16
 801bffc:	9306      	str	r3, [sp, #24]
 801bffe:	9b06      	ldr	r3, [sp, #24]
 801c000:	0699      	lsls	r1, r3, #26
 801c002:	46b2      	mov	sl, r6
 801c004:	f140 809c 	bpl.w	801c140 <_vfprintf_r+0x718>
 801c008:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c00a:	3707      	adds	r7, #7
 801c00c:	f027 0707 	bic.w	r7, r7, #7
 801c010:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c014:	f107 0108 	add.w	r1, r7, #8
 801c018:	910c      	str	r1, [sp, #48]	; 0x30
 801c01a:	4616      	mov	r6, r2
 801c01c:	461f      	mov	r7, r3
 801c01e:	2a00      	cmp	r2, #0
 801c020:	f173 0300 	sbcs.w	r3, r3, #0
 801c024:	f2c0 8415 	blt.w	801c852 <_vfprintf_r+0xe2a>
 801c028:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801c02c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801c030:	2301      	movs	r3, #1
 801c032:	e61d      	b.n	801bc70 <_vfprintf_r+0x248>
 801c034:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c036:	9308      	str	r3, [sp, #32]
 801c038:	3707      	adds	r7, #7
 801c03a:	f027 0307 	bic.w	r3, r7, #7
 801c03e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801c042:	f103 0208 	add.w	r2, r3, #8
 801c046:	920c      	str	r2, [sp, #48]	; 0x30
 801c048:	681a      	ldr	r2, [r3, #0]
 801c04a:	9212      	str	r2, [sp, #72]	; 0x48
 801c04c:	685b      	ldr	r3, [r3, #4]
 801c04e:	9313      	str	r3, [sp, #76]	; 0x4c
 801c050:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c052:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c054:	f7fd f9cc 	bl	80193f0 <__fpclassifyd>
 801c058:	2801      	cmp	r0, #1
 801c05a:	46b3      	mov	fp, r6
 801c05c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c05e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c060:	f040 8406 	bne.w	801c870 <_vfprintf_r+0xe48>
 801c064:	2200      	movs	r2, #0
 801c066:	2300      	movs	r3, #0
 801c068:	f7e4 fcb8 	bl	80009dc <__aeabi_dcmplt>
 801c06c:	2800      	cmp	r0, #0
 801c06e:	f040 85ee 	bne.w	801cc4e <_vfprintf_r+0x1226>
 801c072:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801c076:	9e06      	ldr	r6, [sp, #24]
 801c078:	4a99      	ldr	r2, [pc, #612]	; (801c2e0 <_vfprintf_r+0x8b8>)
 801c07a:	4b9a      	ldr	r3, [pc, #616]	; (801c2e4 <_vfprintf_r+0x8bc>)
 801c07c:	2103      	movs	r1, #3
 801c07e:	2000      	movs	r0, #0
 801c080:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 801c084:	2d47      	cmp	r5, #71	; 0x47
 801c086:	bfd8      	it	le
 801c088:	461a      	movle	r2, r3
 801c08a:	9107      	str	r1, [sp, #28]
 801c08c:	900f      	str	r0, [sp, #60]	; 0x3c
 801c08e:	9606      	str	r6, [sp, #24]
 801c090:	920e      	str	r2, [sp, #56]	; 0x38
 801c092:	910b      	str	r1, [sp, #44]	; 0x2c
 801c094:	9010      	str	r0, [sp, #64]	; 0x40
 801c096:	e61f      	b.n	801bcd8 <_vfprintf_r+0x2b0>
 801c098:	9906      	ldr	r1, [sp, #24]
 801c09a:	f041 0108 	orr.w	r1, r1, #8
 801c09e:	9106      	str	r1, [sp, #24]
 801c0a0:	781d      	ldrb	r5, [r3, #0]
 801c0a2:	4619      	mov	r1, r3
 801c0a4:	e531      	b.n	801bb0a <_vfprintf_r+0xe2>
 801c0a6:	781d      	ldrb	r5, [r3, #0]
 801c0a8:	4619      	mov	r1, r3
 801c0aa:	222b      	movs	r2, #43	; 0x2b
 801c0ac:	e52d      	b.n	801bb0a <_vfprintf_r+0xe2>
 801c0ae:	9906      	ldr	r1, [sp, #24]
 801c0b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 801c0b4:	9106      	str	r1, [sp, #24]
 801c0b6:	781d      	ldrb	r5, [r3, #0]
 801c0b8:	4619      	mov	r1, r3
 801c0ba:	e526      	b.n	801bb0a <_vfprintf_r+0xe2>
 801c0bc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 801c0c0:	2100      	movs	r1, #0
 801c0c2:	f813 5b01 	ldrb.w	r5, [r3], #1
 801c0c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801c0ca:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c0ce:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 801c0d2:	2809      	cmp	r0, #9
 801c0d4:	d9f5      	bls.n	801c0c2 <_vfprintf_r+0x69a>
 801c0d6:	910a      	str	r1, [sp, #40]	; 0x28
 801c0d8:	e518      	b.n	801bb0c <_vfprintf_r+0xe4>
 801c0da:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c0dc:	9308      	str	r3, [sp, #32]
 801c0de:	2330      	movs	r3, #48	; 0x30
 801c0e0:	9a06      	ldr	r2, [sp, #24]
 801c0e2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801c0e6:	460b      	mov	r3, r1
 801c0e8:	3304      	adds	r3, #4
 801c0ea:	2578      	movs	r5, #120	; 0x78
 801c0ec:	f042 0202 	orr.w	r2, r2, #2
 801c0f0:	930c      	str	r3, [sp, #48]	; 0x30
 801c0f2:	4b7d      	ldr	r3, [pc, #500]	; (801c2e8 <_vfprintf_r+0x8c0>)
 801c0f4:	9314      	str	r3, [sp, #80]	; 0x50
 801c0f6:	46b2      	mov	sl, r6
 801c0f8:	9206      	str	r2, [sp, #24]
 801c0fa:	680e      	ldr	r6, [r1, #0]
 801c0fc:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 801c100:	2700      	movs	r7, #0
 801c102:	2302      	movs	r3, #2
 801c104:	e5ae      	b.n	801bc64 <_vfprintf_r+0x23c>
 801c106:	9906      	ldr	r1, [sp, #24]
 801c108:	f041 0101 	orr.w	r1, r1, #1
 801c10c:	9106      	str	r1, [sp, #24]
 801c10e:	781d      	ldrb	r5, [r3, #0]
 801c110:	4619      	mov	r1, r3
 801c112:	e4fa      	b.n	801bb0a <_vfprintf_r+0xe2>
 801c114:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c116:	6829      	ldr	r1, [r5, #0]
 801c118:	910a      	str	r1, [sp, #40]	; 0x28
 801c11a:	4608      	mov	r0, r1
 801c11c:	2800      	cmp	r0, #0
 801c11e:	4629      	mov	r1, r5
 801c120:	f101 0104 	add.w	r1, r1, #4
 801c124:	f2c0 84e3 	blt.w	801caee <_vfprintf_r+0x10c6>
 801c128:	910c      	str	r1, [sp, #48]	; 0x30
 801c12a:	781d      	ldrb	r5, [r3, #0]
 801c12c:	4619      	mov	r1, r3
 801c12e:	e4ec      	b.n	801bb0a <_vfprintf_r+0xe2>
 801c130:	9308      	str	r3, [sp, #32]
 801c132:	9b06      	ldr	r3, [sp, #24]
 801c134:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801c138:	0699      	lsls	r1, r3, #26
 801c13a:	46b2      	mov	sl, r6
 801c13c:	f53f af64 	bmi.w	801c008 <_vfprintf_r+0x5e0>
 801c140:	9b06      	ldr	r3, [sp, #24]
 801c142:	06da      	lsls	r2, r3, #27
 801c144:	f100 8292 	bmi.w	801c66c <_vfprintf_r+0xc44>
 801c148:	9b06      	ldr	r3, [sp, #24]
 801c14a:	065b      	lsls	r3, r3, #25
 801c14c:	f140 828e 	bpl.w	801c66c <_vfprintf_r+0xc44>
 801c150:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c152:	f9b1 6000 	ldrsh.w	r6, [r1]
 801c156:	3104      	adds	r1, #4
 801c158:	17f7      	asrs	r7, r6, #31
 801c15a:	4632      	mov	r2, r6
 801c15c:	463b      	mov	r3, r7
 801c15e:	910c      	str	r1, [sp, #48]	; 0x30
 801c160:	e75d      	b.n	801c01e <_vfprintf_r+0x5f6>
 801c162:	9906      	ldr	r1, [sp, #24]
 801c164:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 801c168:	9106      	str	r1, [sp, #24]
 801c16a:	781d      	ldrb	r5, [r3, #0]
 801c16c:	4619      	mov	r1, r3
 801c16e:	e4cc      	b.n	801bb0a <_vfprintf_r+0xe2>
 801c170:	781d      	ldrb	r5, [r3, #0]
 801c172:	9906      	ldr	r1, [sp, #24]
 801c174:	2d6c      	cmp	r5, #108	; 0x6c
 801c176:	f000 84b3 	beq.w	801cae0 <_vfprintf_r+0x10b8>
 801c17a:	f041 0110 	orr.w	r1, r1, #16
 801c17e:	9106      	str	r1, [sp, #24]
 801c180:	4619      	mov	r1, r3
 801c182:	e4c2      	b.n	801bb0a <_vfprintf_r+0xe2>
 801c184:	9308      	str	r3, [sp, #32]
 801c186:	9b06      	ldr	r3, [sp, #24]
 801c188:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801c18c:	069a      	lsls	r2, r3, #26
 801c18e:	f140 8400 	bpl.w	801c992 <_vfprintf_r+0xf6a>
 801c192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c194:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c196:	6813      	ldr	r3, [r2, #0]
 801c198:	17cf      	asrs	r7, r1, #31
 801c19a:	4608      	mov	r0, r1
 801c19c:	3204      	adds	r2, #4
 801c19e:	4639      	mov	r1, r7
 801c1a0:	920c      	str	r2, [sp, #48]	; 0x30
 801c1a2:	e9c3 0100 	strd	r0, r1, [r3]
 801c1a6:	e480      	b.n	801baaa <_vfprintf_r+0x82>
 801c1a8:	781d      	ldrb	r5, [r3, #0]
 801c1aa:	2d2a      	cmp	r5, #42	; 0x2a
 801c1ac:	f103 0101 	add.w	r1, r3, #1
 801c1b0:	f000 860e 	beq.w	801cdd0 <_vfprintf_r+0x13a8>
 801c1b4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 801c1b8:	2809      	cmp	r0, #9
 801c1ba:	460b      	mov	r3, r1
 801c1bc:	f04f 0600 	mov.w	r6, #0
 801c1c0:	f63f aca4 	bhi.w	801bb0c <_vfprintf_r+0xe4>
 801c1c4:	f813 5b01 	ldrb.w	r5, [r3], #1
 801c1c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801c1cc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c1d0:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 801c1d4:	2809      	cmp	r0, #9
 801c1d6:	d9f5      	bls.n	801c1c4 <_vfprintf_r+0x79c>
 801c1d8:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 801c1dc:	e496      	b.n	801bb0c <_vfprintf_r+0xe4>
 801c1de:	9308      	str	r3, [sp, #32]
 801c1e0:	9b06      	ldr	r3, [sp, #24]
 801c1e2:	f043 0310 	orr.w	r3, r3, #16
 801c1e6:	9306      	str	r3, [sp, #24]
 801c1e8:	9b06      	ldr	r3, [sp, #24]
 801c1ea:	f013 0320 	ands.w	r3, r3, #32
 801c1ee:	46b2      	mov	sl, r6
 801c1f0:	f47f ae93 	bne.w	801bf1a <_vfprintf_r+0x4f2>
 801c1f4:	9a06      	ldr	r2, [sp, #24]
 801c1f6:	f012 0210 	ands.w	r2, r2, #16
 801c1fa:	f040 8240 	bne.w	801c67e <_vfprintf_r+0xc56>
 801c1fe:	9b06      	ldr	r3, [sp, #24]
 801c200:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 801c204:	f000 823b 	beq.w	801c67e <_vfprintf_r+0xc56>
 801c208:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c20a:	4613      	mov	r3, r2
 801c20c:	460a      	mov	r2, r1
 801c20e:	3204      	adds	r2, #4
 801c210:	880e      	ldrh	r6, [r1, #0]
 801c212:	920c      	str	r2, [sp, #48]	; 0x30
 801c214:	2700      	movs	r7, #0
 801c216:	e525      	b.n	801bc64 <_vfprintf_r+0x23c>
 801c218:	9308      	str	r3, [sp, #32]
 801c21a:	4b34      	ldr	r3, [pc, #208]	; (801c2ec <_vfprintf_r+0x8c4>)
 801c21c:	9314      	str	r3, [sp, #80]	; 0x50
 801c21e:	9b06      	ldr	r3, [sp, #24]
 801c220:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801c224:	0699      	lsls	r1, r3, #26
 801c226:	46b2      	mov	sl, r6
 801c228:	f53f aeb1 	bmi.w	801bf8e <_vfprintf_r+0x566>
 801c22c:	9b06      	ldr	r3, [sp, #24]
 801c22e:	06da      	lsls	r2, r3, #27
 801c230:	f140 83c6 	bpl.w	801c9c0 <_vfprintf_r+0xf98>
 801c234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c236:	4613      	mov	r3, r2
 801c238:	3304      	adds	r3, #4
 801c23a:	6816      	ldr	r6, [r2, #0]
 801c23c:	930c      	str	r3, [sp, #48]	; 0x30
 801c23e:	2700      	movs	r7, #0
 801c240:	e6ae      	b.n	801bfa0 <_vfprintf_r+0x578>
 801c242:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c244:	9308      	str	r3, [sp, #32]
 801c246:	680a      	ldr	r2, [r1, #0]
 801c248:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 801c24c:	2300      	movs	r3, #0
 801c24e:	2201      	movs	r2, #1
 801c250:	3104      	adds	r1, #4
 801c252:	469c      	mov	ip, r3
 801c254:	9207      	str	r2, [sp, #28]
 801c256:	910c      	str	r1, [sp, #48]	; 0x30
 801c258:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 801c25c:	ab24      	add	r3, sp, #144	; 0x90
 801c25e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801c262:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801c266:	920b      	str	r2, [sp, #44]	; 0x2c
 801c268:	930e      	str	r3, [sp, #56]	; 0x38
 801c26a:	e53b      	b.n	801bce4 <_vfprintf_r+0x2bc>
 801c26c:	9308      	str	r3, [sp, #32]
 801c26e:	9b06      	ldr	r3, [sp, #24]
 801c270:	f043 0310 	orr.w	r3, r3, #16
 801c274:	9306      	str	r3, [sp, #24]
 801c276:	9b06      	ldr	r3, [sp, #24]
 801c278:	46b2      	mov	sl, r6
 801c27a:	069e      	lsls	r6, r3, #26
 801c27c:	f53f ace8 	bmi.w	801bc50 <_vfprintf_r+0x228>
 801c280:	9b06      	ldr	r3, [sp, #24]
 801c282:	06d8      	lsls	r0, r3, #27
 801c284:	f140 8377 	bpl.w	801c976 <_vfprintf_r+0xf4e>
 801c288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c28a:	4613      	mov	r3, r2
 801c28c:	3204      	adds	r2, #4
 801c28e:	681e      	ldr	r6, [r3, #0]
 801c290:	920c      	str	r2, [sp, #48]	; 0x30
 801c292:	2301      	movs	r3, #1
 801c294:	2700      	movs	r7, #0
 801c296:	e4e5      	b.n	801bc64 <_vfprintf_r+0x23c>
 801c298:	9308      	str	r3, [sp, #32]
 801c29a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 801c29e:	2d00      	cmp	r5, #0
 801c2a0:	f43f acbb 	beq.w	801bc1a <_vfprintf_r+0x1f2>
 801c2a4:	2300      	movs	r3, #0
 801c2a6:	2201      	movs	r2, #1
 801c2a8:	469c      	mov	ip, r3
 801c2aa:	9207      	str	r2, [sp, #28]
 801c2ac:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 801c2b0:	e7d2      	b.n	801c258 <_vfprintf_r+0x830>
 801c2b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c2b6:	e561      	b.n	801bd7c <_vfprintf_r+0x354>
 801c2b8:	2b01      	cmp	r3, #1
 801c2ba:	f47f aceb 	bne.w	801bc94 <_vfprintf_r+0x26c>
 801c2be:	2f00      	cmp	r7, #0
 801c2c0:	bf08      	it	eq
 801c2c2:	2e0a      	cmpeq	r6, #10
 801c2c4:	f080 81ef 	bcs.w	801c6a6 <_vfprintf_r+0xc7e>
 801c2c8:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 801c2cc:	3630      	adds	r6, #48	; 0x30
 801c2ce:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 801c2d2:	ab2e      	add	r3, sp, #184	; 0xb8
 801c2d4:	ebcb 0303 	rsb	r3, fp, r3
 801c2d8:	930b      	str	r3, [sp, #44]	; 0x2c
 801c2da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801c2de:	e4f3      	b.n	801bcc8 <_vfprintf_r+0x2a0>
 801c2e0:	0803560c 	.word	0x0803560c
 801c2e4:	08035608 	.word	0x08035608
 801c2e8:	0803562c 	.word	0x0803562c
 801c2ec:	08035618 	.word	0x08035618
 801c2f0:	2d65      	cmp	r5, #101	; 0x65
 801c2f2:	f340 808a 	ble.w	801c40a <_vfprintf_r+0x9e2>
 801c2f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c2f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	2300      	movs	r3, #0
 801c2fe:	f7e4 fb63 	bl	80009c8 <__aeabi_dcmpeq>
 801c302:	2800      	cmp	r0, #0
 801c304:	f000 8131 	beq.w	801c56a <_vfprintf_r+0xb42>
 801c308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c30a:	4aba      	ldr	r2, [pc, #744]	; (801c5f4 <_vfprintf_r+0xbcc>)
 801c30c:	6022      	str	r2, [r4, #0]
 801c30e:	3301      	adds	r3, #1
 801c310:	f10b 0b01 	add.w	fp, fp, #1
 801c314:	2201      	movs	r2, #1
 801c316:	2b07      	cmp	r3, #7
 801c318:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c31c:	9322      	str	r3, [sp, #136]	; 0x88
 801c31e:	6062      	str	r2, [r4, #4]
 801c320:	f300 8367 	bgt.w	801c9f2 <_vfprintf_r+0xfca>
 801c324:	3408      	adds	r4, #8
 801c326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c328:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c32a:	4293      	cmp	r3, r2
 801c32c:	db03      	blt.n	801c336 <_vfprintf_r+0x90e>
 801c32e:	9b06      	ldr	r3, [sp, #24]
 801c330:	07df      	lsls	r7, r3, #31
 801c332:	f57f ad96 	bpl.w	801be62 <_vfprintf_r+0x43a>
 801c336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c338:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c33a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c33c:	6022      	str	r2, [r4, #0]
 801c33e:	3301      	adds	r3, #1
 801c340:	448b      	add	fp, r1
 801c342:	2b07      	cmp	r3, #7
 801c344:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c348:	6061      	str	r1, [r4, #4]
 801c34a:	9322      	str	r3, [sp, #136]	; 0x88
 801c34c:	f300 83d6 	bgt.w	801cafc <_vfprintf_r+0x10d4>
 801c350:	3408      	adds	r4, #8
 801c352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c354:	1e5d      	subs	r5, r3, #1
 801c356:	2d00      	cmp	r5, #0
 801c358:	f77f ad83 	ble.w	801be62 <_vfprintf_r+0x43a>
 801c35c:	2d10      	cmp	r5, #16
 801c35e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c360:	4fa5      	ldr	r7, [pc, #660]	; (801c5f8 <_vfprintf_r+0xbd0>)
 801c362:	f340 8195 	ble.w	801c690 <_vfprintf_r+0xc68>
 801c366:	2610      	movs	r6, #16
 801c368:	465a      	mov	r2, fp
 801c36a:	e004      	b.n	801c376 <_vfprintf_r+0x94e>
 801c36c:	3408      	adds	r4, #8
 801c36e:	3d10      	subs	r5, #16
 801c370:	2d10      	cmp	r5, #16
 801c372:	f340 818c 	ble.w	801c68e <_vfprintf_r+0xc66>
 801c376:	3301      	adds	r3, #1
 801c378:	3210      	adds	r2, #16
 801c37a:	2b07      	cmp	r3, #7
 801c37c:	9223      	str	r2, [sp, #140]	; 0x8c
 801c37e:	9322      	str	r3, [sp, #136]	; 0x88
 801c380:	6027      	str	r7, [r4, #0]
 801c382:	6066      	str	r6, [r4, #4]
 801c384:	ddf2      	ble.n	801c36c <_vfprintf_r+0x944>
 801c386:	4640      	mov	r0, r8
 801c388:	4649      	mov	r1, r9
 801c38a:	aa21      	add	r2, sp, #132	; 0x84
 801c38c:	f7fe fd02 	bl	801ad94 <__sprint_r>
 801c390:	2800      	cmp	r0, #0
 801c392:	f47f ac49 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c396:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c398:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c39a:	ac2e      	add	r4, sp, #184	; 0xb8
 801c39c:	e7e7      	b.n	801c36e <_vfprintf_r+0x946>
 801c39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3a0:	9a07      	ldr	r2, [sp, #28]
 801c3a2:	1a9e      	subs	r6, r3, r2
 801c3a4:	2e00      	cmp	r6, #0
 801c3a6:	f77f ad10 	ble.w	801bdca <_vfprintf_r+0x3a2>
 801c3aa:	2e10      	cmp	r6, #16
 801c3ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c3ae:	4f92      	ldr	r7, [pc, #584]	; (801c5f8 <_vfprintf_r+0xbd0>)
 801c3b0:	dd1f      	ble.n	801c3f2 <_vfprintf_r+0x9ca>
 801c3b2:	f04f 0a10 	mov.w	sl, #16
 801c3b6:	465b      	mov	r3, fp
 801c3b8:	e004      	b.n	801c3c4 <_vfprintf_r+0x99c>
 801c3ba:	3e10      	subs	r6, #16
 801c3bc:	2e10      	cmp	r6, #16
 801c3be:	f104 0408 	add.w	r4, r4, #8
 801c3c2:	dd15      	ble.n	801c3f0 <_vfprintf_r+0x9c8>
 801c3c4:	3201      	adds	r2, #1
 801c3c6:	3310      	adds	r3, #16
 801c3c8:	2a07      	cmp	r2, #7
 801c3ca:	9323      	str	r3, [sp, #140]	; 0x8c
 801c3cc:	9222      	str	r2, [sp, #136]	; 0x88
 801c3ce:	e884 0480 	stmia.w	r4, {r7, sl}
 801c3d2:	ddf2      	ble.n	801c3ba <_vfprintf_r+0x992>
 801c3d4:	4640      	mov	r0, r8
 801c3d6:	4649      	mov	r1, r9
 801c3d8:	aa21      	add	r2, sp, #132	; 0x84
 801c3da:	f7fe fcdb 	bl	801ad94 <__sprint_r>
 801c3de:	2800      	cmp	r0, #0
 801c3e0:	f47f ac22 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c3e4:	3e10      	subs	r6, #16
 801c3e6:	2e10      	cmp	r6, #16
 801c3e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c3ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c3ec:	ac2e      	add	r4, sp, #184	; 0xb8
 801c3ee:	dce9      	bgt.n	801c3c4 <_vfprintf_r+0x99c>
 801c3f0:	469b      	mov	fp, r3
 801c3f2:	3201      	adds	r2, #1
 801c3f4:	44b3      	add	fp, r6
 801c3f6:	2a07      	cmp	r2, #7
 801c3f8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c3fc:	9222      	str	r2, [sp, #136]	; 0x88
 801c3fe:	6027      	str	r7, [r4, #0]
 801c400:	6066      	str	r6, [r4, #4]
 801c402:	f300 8219 	bgt.w	801c838 <_vfprintf_r+0xe10>
 801c406:	3408      	adds	r4, #8
 801c408:	e4df      	b.n	801bdca <_vfprintf_r+0x3a2>
 801c40a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c40c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801c40e:	2b01      	cmp	r3, #1
 801c410:	f340 81d4 	ble.w	801c7bc <_vfprintf_r+0xd94>
 801c414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c416:	6023      	str	r3, [r4, #0]
 801c418:	3501      	adds	r5, #1
 801c41a:	f10b 0601 	add.w	r6, fp, #1
 801c41e:	2301      	movs	r3, #1
 801c420:	2d07      	cmp	r5, #7
 801c422:	9623      	str	r6, [sp, #140]	; 0x8c
 801c424:	9522      	str	r5, [sp, #136]	; 0x88
 801c426:	6063      	str	r3, [r4, #4]
 801c428:	f300 81e4 	bgt.w	801c7f4 <_vfprintf_r+0xdcc>
 801c42c:	3408      	adds	r4, #8
 801c42e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c432:	6023      	str	r3, [r4, #0]
 801c434:	3501      	adds	r5, #1
 801c436:	4416      	add	r6, r2
 801c438:	2d07      	cmp	r5, #7
 801c43a:	9623      	str	r6, [sp, #140]	; 0x8c
 801c43c:	9522      	str	r5, [sp, #136]	; 0x88
 801c43e:	6062      	str	r2, [r4, #4]
 801c440:	f300 81e4 	bgt.w	801c80c <_vfprintf_r+0xde4>
 801c444:	3408      	adds	r4, #8
 801c446:	2300      	movs	r3, #0
 801c448:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c44a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c44c:	2200      	movs	r2, #0
 801c44e:	f7e4 fabb 	bl	80009c8 <__aeabi_dcmpeq>
 801c452:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c454:	2800      	cmp	r0, #0
 801c456:	f040 80e0 	bne.w	801c61a <_vfprintf_r+0xbf2>
 801c45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c45c:	3b01      	subs	r3, #1
 801c45e:	3501      	adds	r5, #1
 801c460:	3201      	adds	r2, #1
 801c462:	441e      	add	r6, r3
 801c464:	2d07      	cmp	r5, #7
 801c466:	9522      	str	r5, [sp, #136]	; 0x88
 801c468:	9623      	str	r6, [sp, #140]	; 0x8c
 801c46a:	6022      	str	r2, [r4, #0]
 801c46c:	6063      	str	r3, [r4, #4]
 801c46e:	f300 81b5 	bgt.w	801c7dc <_vfprintf_r+0xdb4>
 801c472:	3408      	adds	r4, #8
 801c474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c476:	6062      	str	r2, [r4, #4]
 801c478:	3501      	adds	r5, #1
 801c47a:	eb06 0b02 	add.w	fp, r6, r2
 801c47e:	ab1d      	add	r3, sp, #116	; 0x74
 801c480:	2d07      	cmp	r5, #7
 801c482:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c486:	9522      	str	r5, [sp, #136]	; 0x88
 801c488:	6023      	str	r3, [r4, #0]
 801c48a:	f77f ace9 	ble.w	801be60 <_vfprintf_r+0x438>
 801c48e:	4640      	mov	r0, r8
 801c490:	4649      	mov	r1, r9
 801c492:	aa21      	add	r2, sp, #132	; 0x84
 801c494:	f7fe fc7e 	bl	801ad94 <__sprint_r>
 801c498:	2800      	cmp	r0, #0
 801c49a:	f47f abc5 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c49e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c4a2:	ac2e      	add	r4, sp, #184	; 0xb8
 801c4a4:	e4dd      	b.n	801be62 <_vfprintf_r+0x43a>
 801c4a6:	4640      	mov	r0, r8
 801c4a8:	4649      	mov	r1, r9
 801c4aa:	aa21      	add	r2, sp, #132	; 0x84
 801c4ac:	f7fe fc72 	bl	801ad94 <__sprint_r>
 801c4b0:	2800      	cmp	r0, #0
 801c4b2:	f43f ad20 	beq.w	801bef6 <_vfprintf_r+0x4ce>
 801c4b6:	f7ff bbb7 	b.w	801bc28 <_vfprintf_r+0x200>
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d133      	bne.n	801c526 <_vfprintf_r+0xafe>
 801c4be:	9b06      	ldr	r3, [sp, #24]
 801c4c0:	07da      	lsls	r2, r3, #31
 801c4c2:	d530      	bpl.n	801c526 <_vfprintf_r+0xafe>
 801c4c4:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 801c4c8:	2330      	movs	r3, #48	; 0x30
 801c4ca:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 801c4ce:	ab2e      	add	r3, sp, #184	; 0xb8
 801c4d0:	ebcb 0303 	rsb	r3, fp, r3
 801c4d4:	930b      	str	r3, [sp, #44]	; 0x2c
 801c4d6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801c4da:	f7ff bbf5 	b.w	801bcc8 <_vfprintf_r+0x2a0>
 801c4de:	4640      	mov	r0, r8
 801c4e0:	4649      	mov	r1, r9
 801c4e2:	aa21      	add	r2, sp, #132	; 0x84
 801c4e4:	f7fe fc56 	bl	801ad94 <__sprint_r>
 801c4e8:	2800      	cmp	r0, #0
 801c4ea:	f47f ab9d 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c4ee:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c4f2:	ac2e      	add	r4, sp, #184	; 0xb8
 801c4f4:	e4a3      	b.n	801be3e <_vfprintf_r+0x416>
 801c4f6:	4640      	mov	r0, r8
 801c4f8:	4649      	mov	r1, r9
 801c4fa:	aa21      	add	r2, sp, #132	; 0x84
 801c4fc:	f7fe fc4a 	bl	801ad94 <__sprint_r>
 801c500:	2800      	cmp	r0, #0
 801c502:	f47f ab91 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c506:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c50a:	ac2e      	add	r4, sp, #184	; 0xb8
 801c50c:	e45a      	b.n	801bdc4 <_vfprintf_r+0x39c>
 801c50e:	4640      	mov	r0, r8
 801c510:	4649      	mov	r1, r9
 801c512:	aa21      	add	r2, sp, #132	; 0x84
 801c514:	f7fe fc3e 	bl	801ad94 <__sprint_r>
 801c518:	2800      	cmp	r0, #0
 801c51a:	f47f ab85 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c51e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c522:	ac2e      	add	r4, sp, #184	; 0xb8
 801c524:	e43d      	b.n	801bda2 <_vfprintf_r+0x37a>
 801c526:	ab2e      	add	r3, sp, #184	; 0xb8
 801c528:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801c52c:	930e      	str	r3, [sp, #56]	; 0x38
 801c52e:	f7ff bbcb 	b.w	801bcc8 <_vfprintf_r+0x2a0>
 801c532:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c534:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 801c538:	0933      	lsrs	r3, r6, #4
 801c53a:	f006 010f 	and.w	r1, r6, #15
 801c53e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801c542:	093a      	lsrs	r2, r7, #4
 801c544:	461e      	mov	r6, r3
 801c546:	4617      	mov	r7, r2
 801c548:	5c43      	ldrb	r3, [r0, r1]
 801c54a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801c54e:	ea56 0307 	orrs.w	r3, r6, r7
 801c552:	d1f1      	bne.n	801c538 <_vfprintf_r+0xb10>
 801c554:	465a      	mov	r2, fp
 801c556:	ab2e      	add	r3, sp, #184	; 0xb8
 801c558:	1a9b      	subs	r3, r3, r2
 801c55a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801c55e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c560:	f7ff bbb2 	b.w	801bcc8 <_vfprintf_r+0x2a0>
 801c564:	2302      	movs	r3, #2
 801c566:	f7ff bb7d 	b.w	801bc64 <_vfprintf_r+0x23c>
 801c56a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801c56c:	2d00      	cmp	r5, #0
 801c56e:	f340 824c 	ble.w	801ca0a <_vfprintf_r+0xfe2>
 801c572:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c574:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c576:	428a      	cmp	r2, r1
 801c578:	4613      	mov	r3, r2
 801c57a:	bfa8      	it	ge
 801c57c:	460b      	movge	r3, r1
 801c57e:	461d      	mov	r5, r3
 801c580:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c582:	2d00      	cmp	r5, #0
 801c584:	eb01 0a02 	add.w	sl, r1, r2
 801c588:	dd0b      	ble.n	801c5a2 <_vfprintf_r+0xb7a>
 801c58a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c58c:	6021      	str	r1, [r4, #0]
 801c58e:	3301      	adds	r3, #1
 801c590:	44ab      	add	fp, r5
 801c592:	2b07      	cmp	r3, #7
 801c594:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c598:	6065      	str	r5, [r4, #4]
 801c59a:	9322      	str	r3, [sp, #136]	; 0x88
 801c59c:	f300 8300 	bgt.w	801cba0 <_vfprintf_r+0x1178>
 801c5a0:	3408      	adds	r4, #8
 801c5a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5a4:	2d00      	cmp	r5, #0
 801c5a6:	bfa8      	it	ge
 801c5a8:	1b5b      	subge	r3, r3, r5
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	461d      	mov	r5, r3
 801c5ae:	f340 80af 	ble.w	801c710 <_vfprintf_r+0xce8>
 801c5b2:	2d10      	cmp	r5, #16
 801c5b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c5b6:	4f10      	ldr	r7, [pc, #64]	; (801c5f8 <_vfprintf_r+0xbd0>)
 801c5b8:	f340 820f 	ble.w	801c9da <_vfprintf_r+0xfb2>
 801c5bc:	2610      	movs	r6, #16
 801c5be:	465a      	mov	r2, fp
 801c5c0:	e004      	b.n	801c5cc <_vfprintf_r+0xba4>
 801c5c2:	3408      	adds	r4, #8
 801c5c4:	3d10      	subs	r5, #16
 801c5c6:	2d10      	cmp	r5, #16
 801c5c8:	f340 8206 	ble.w	801c9d8 <_vfprintf_r+0xfb0>
 801c5cc:	3301      	adds	r3, #1
 801c5ce:	3210      	adds	r2, #16
 801c5d0:	2b07      	cmp	r3, #7
 801c5d2:	9223      	str	r2, [sp, #140]	; 0x8c
 801c5d4:	9322      	str	r3, [sp, #136]	; 0x88
 801c5d6:	6027      	str	r7, [r4, #0]
 801c5d8:	6066      	str	r6, [r4, #4]
 801c5da:	ddf2      	ble.n	801c5c2 <_vfprintf_r+0xb9a>
 801c5dc:	4640      	mov	r0, r8
 801c5de:	4649      	mov	r1, r9
 801c5e0:	aa21      	add	r2, sp, #132	; 0x84
 801c5e2:	f7fe fbd7 	bl	801ad94 <__sprint_r>
 801c5e6:	2800      	cmp	r0, #0
 801c5e8:	f47f ab1e 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c5ec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c5ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c5f0:	ac2e      	add	r4, sp, #184	; 0xb8
 801c5f2:	e7e7      	b.n	801c5c4 <_vfprintf_r+0xb9c>
 801c5f4:	08035648 	.word	0x08035648
 801c5f8:	0803567c 	.word	0x0803567c
 801c5fc:	4640      	mov	r0, r8
 801c5fe:	4649      	mov	r1, r9
 801c600:	aa21      	add	r2, sp, #132	; 0x84
 801c602:	f7fe fbc7 	bl	801ad94 <__sprint_r>
 801c606:	2800      	cmp	r0, #0
 801c608:	f47f ab0e 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c60c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801c610:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c614:	ac2e      	add	r4, sp, #184	; 0xb8
 801c616:	f7ff bbb1 	b.w	801bd7c <_vfprintf_r+0x354>
 801c61a:	f103 3aff 	add.w	sl, r3, #4294967295
 801c61e:	f1ba 0f00 	cmp.w	sl, #0
 801c622:	f77f af27 	ble.w	801c474 <_vfprintf_r+0xa4c>
 801c626:	f1ba 0f10 	cmp.w	sl, #16
 801c62a:	4f90      	ldr	r7, [pc, #576]	; (801c86c <_vfprintf_r+0xe44>)
 801c62c:	bfc8      	it	gt
 801c62e:	f04f 0b10 	movgt.w	fp, #16
 801c632:	dc07      	bgt.n	801c644 <_vfprintf_r+0xc1c>
 801c634:	e0f6      	b.n	801c824 <_vfprintf_r+0xdfc>
 801c636:	3408      	adds	r4, #8
 801c638:	f1aa 0a10 	sub.w	sl, sl, #16
 801c63c:	f1ba 0f10 	cmp.w	sl, #16
 801c640:	f340 80f0 	ble.w	801c824 <_vfprintf_r+0xdfc>
 801c644:	3501      	adds	r5, #1
 801c646:	3610      	adds	r6, #16
 801c648:	2d07      	cmp	r5, #7
 801c64a:	9623      	str	r6, [sp, #140]	; 0x8c
 801c64c:	9522      	str	r5, [sp, #136]	; 0x88
 801c64e:	e884 0880 	stmia.w	r4, {r7, fp}
 801c652:	ddf0      	ble.n	801c636 <_vfprintf_r+0xc0e>
 801c654:	4640      	mov	r0, r8
 801c656:	4649      	mov	r1, r9
 801c658:	aa21      	add	r2, sp, #132	; 0x84
 801c65a:	f7fe fb9b 	bl	801ad94 <__sprint_r>
 801c65e:	2800      	cmp	r0, #0
 801c660:	f47f aae2 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c664:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801c666:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801c668:	ac2e      	add	r4, sp, #184	; 0xb8
 801c66a:	e7e5      	b.n	801c638 <_vfprintf_r+0xc10>
 801c66c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c66e:	6816      	ldr	r6, [r2, #0]
 801c670:	4613      	mov	r3, r2
 801c672:	3304      	adds	r3, #4
 801c674:	17f7      	asrs	r7, r6, #31
 801c676:	930c      	str	r3, [sp, #48]	; 0x30
 801c678:	4632      	mov	r2, r6
 801c67a:	463b      	mov	r3, r7
 801c67c:	e4cf      	b.n	801c01e <_vfprintf_r+0x5f6>
 801c67e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c680:	460a      	mov	r2, r1
 801c682:	3204      	adds	r2, #4
 801c684:	680e      	ldr	r6, [r1, #0]
 801c686:	920c      	str	r2, [sp, #48]	; 0x30
 801c688:	2700      	movs	r7, #0
 801c68a:	f7ff baeb 	b.w	801bc64 <_vfprintf_r+0x23c>
 801c68e:	4693      	mov	fp, r2
 801c690:	3301      	adds	r3, #1
 801c692:	44ab      	add	fp, r5
 801c694:	2b07      	cmp	r3, #7
 801c696:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c69a:	9322      	str	r3, [sp, #136]	; 0x88
 801c69c:	6027      	str	r7, [r4, #0]
 801c69e:	6065      	str	r5, [r4, #4]
 801c6a0:	f77f abde 	ble.w	801be60 <_vfprintf_r+0x438>
 801c6a4:	e6f3      	b.n	801c48e <_vfprintf_r+0xa66>
 801c6a6:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 801c6aa:	f8cd c01c 	str.w	ip, [sp, #28]
 801c6ae:	4630      	mov	r0, r6
 801c6b0:	4639      	mov	r1, r7
 801c6b2:	220a      	movs	r2, #10
 801c6b4:	2300      	movs	r3, #0
 801c6b6:	f7e4 fd6f 	bl	8001198 <__aeabi_uldivmod>
 801c6ba:	3230      	adds	r2, #48	; 0x30
 801c6bc:	4630      	mov	r0, r6
 801c6be:	4639      	mov	r1, r7
 801c6c0:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	220a      	movs	r2, #10
 801c6c8:	f7e4 fd66 	bl	8001198 <__aeabi_uldivmod>
 801c6cc:	4606      	mov	r6, r0
 801c6ce:	460f      	mov	r7, r1
 801c6d0:	ea56 0307 	orrs.w	r3, r6, r7
 801c6d4:	d1eb      	bne.n	801c6ae <_vfprintf_r+0xc86>
 801c6d6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c6da:	e73b      	b.n	801c554 <_vfprintf_r+0xb2c>
 801c6dc:	2b30      	cmp	r3, #48	; 0x30
 801c6de:	f000 8219 	beq.w	801cb14 <_vfprintf_r+0x10ec>
 801c6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6e4:	3b01      	subs	r3, #1
 801c6e6:	461a      	mov	r2, r3
 801c6e8:	a82e      	add	r0, sp, #184	; 0xb8
 801c6ea:	930e      	str	r3, [sp, #56]	; 0x38
 801c6ec:	1a82      	subs	r2, r0, r2
 801c6ee:	2330      	movs	r3, #48	; 0x30
 801c6f0:	920b      	str	r2, [sp, #44]	; 0x2c
 801c6f2:	f801 3c01 	strb.w	r3, [r1, #-1]
 801c6f6:	f7ff bae7 	b.w	801bcc8 <_vfprintf_r+0x2a0>
 801c6fa:	4640      	mov	r0, r8
 801c6fc:	4649      	mov	r1, r9
 801c6fe:	aa21      	add	r2, sp, #132	; 0x84
 801c700:	f7fe fb48 	bl	801ad94 <__sprint_r>
 801c704:	2800      	cmp	r0, #0
 801c706:	f47f aa8f 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c70a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c70e:	ac2e      	add	r4, sp, #184	; 0xb8
 801c710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c712:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c716:	440a      	add	r2, r1
 801c718:	4616      	mov	r6, r2
 801c71a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c71c:	4293      	cmp	r3, r2
 801c71e:	db3e      	blt.n	801c79e <_vfprintf_r+0xd76>
 801c720:	9a06      	ldr	r2, [sp, #24]
 801c722:	07d5      	lsls	r5, r2, #31
 801c724:	d43b      	bmi.n	801c79e <_vfprintf_r+0xd76>
 801c726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c728:	ebc6 050a 	rsb	r5, r6, sl
 801c72c:	1ad3      	subs	r3, r2, r3
 801c72e:	429d      	cmp	r5, r3
 801c730:	bfa8      	it	ge
 801c732:	461d      	movge	r5, r3
 801c734:	2d00      	cmp	r5, #0
 801c736:	462f      	mov	r7, r5
 801c738:	dd0b      	ble.n	801c752 <_vfprintf_r+0xd2a>
 801c73a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c73c:	6026      	str	r6, [r4, #0]
 801c73e:	3201      	adds	r2, #1
 801c740:	44ab      	add	fp, r5
 801c742:	2a07      	cmp	r2, #7
 801c744:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c748:	6065      	str	r5, [r4, #4]
 801c74a:	9222      	str	r2, [sp, #136]	; 0x88
 801c74c:	f300 825e 	bgt.w	801cc0c <_vfprintf_r+0x11e4>
 801c750:	3408      	adds	r4, #8
 801c752:	2f00      	cmp	r7, #0
 801c754:	bfac      	ite	ge
 801c756:	1bdd      	subge	r5, r3, r7
 801c758:	461d      	movlt	r5, r3
 801c75a:	2d00      	cmp	r5, #0
 801c75c:	f77f ab81 	ble.w	801be62 <_vfprintf_r+0x43a>
 801c760:	2d10      	cmp	r5, #16
 801c762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c764:	4f41      	ldr	r7, [pc, #260]	; (801c86c <_vfprintf_r+0xe44>)
 801c766:	dd93      	ble.n	801c690 <_vfprintf_r+0xc68>
 801c768:	2610      	movs	r6, #16
 801c76a:	465a      	mov	r2, fp
 801c76c:	e003      	b.n	801c776 <_vfprintf_r+0xd4e>
 801c76e:	3408      	adds	r4, #8
 801c770:	3d10      	subs	r5, #16
 801c772:	2d10      	cmp	r5, #16
 801c774:	dd8b      	ble.n	801c68e <_vfprintf_r+0xc66>
 801c776:	3301      	adds	r3, #1
 801c778:	3210      	adds	r2, #16
 801c77a:	2b07      	cmp	r3, #7
 801c77c:	9223      	str	r2, [sp, #140]	; 0x8c
 801c77e:	9322      	str	r3, [sp, #136]	; 0x88
 801c780:	6027      	str	r7, [r4, #0]
 801c782:	6066      	str	r6, [r4, #4]
 801c784:	ddf3      	ble.n	801c76e <_vfprintf_r+0xd46>
 801c786:	4640      	mov	r0, r8
 801c788:	4649      	mov	r1, r9
 801c78a:	aa21      	add	r2, sp, #132	; 0x84
 801c78c:	f7fe fb02 	bl	801ad94 <__sprint_r>
 801c790:	2800      	cmp	r0, #0
 801c792:	f47f aa49 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c796:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c79a:	ac2e      	add	r4, sp, #184	; 0xb8
 801c79c:	e7e8      	b.n	801c770 <_vfprintf_r+0xd48>
 801c79e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c7a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c7a2:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c7a4:	6021      	str	r1, [r4, #0]
 801c7a6:	3201      	adds	r2, #1
 801c7a8:	4483      	add	fp, r0
 801c7aa:	2a07      	cmp	r2, #7
 801c7ac:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c7b0:	6060      	str	r0, [r4, #4]
 801c7b2:	9222      	str	r2, [sp, #136]	; 0x88
 801c7b4:	f300 820a 	bgt.w	801cbcc <_vfprintf_r+0x11a4>
 801c7b8:	3408      	adds	r4, #8
 801c7ba:	e7b4      	b.n	801c726 <_vfprintf_r+0xcfe>
 801c7bc:	9b06      	ldr	r3, [sp, #24]
 801c7be:	07d8      	lsls	r0, r3, #31
 801c7c0:	f53f ae28 	bmi.w	801c414 <_vfprintf_r+0x9ec>
 801c7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7c6:	6023      	str	r3, [r4, #0]
 801c7c8:	3501      	adds	r5, #1
 801c7ca:	f10b 0601 	add.w	r6, fp, #1
 801c7ce:	2301      	movs	r3, #1
 801c7d0:	2d07      	cmp	r5, #7
 801c7d2:	9623      	str	r6, [sp, #140]	; 0x8c
 801c7d4:	9522      	str	r5, [sp, #136]	; 0x88
 801c7d6:	6063      	str	r3, [r4, #4]
 801c7d8:	f77f ae4b 	ble.w	801c472 <_vfprintf_r+0xa4a>
 801c7dc:	4640      	mov	r0, r8
 801c7de:	4649      	mov	r1, r9
 801c7e0:	aa21      	add	r2, sp, #132	; 0x84
 801c7e2:	f7fe fad7 	bl	801ad94 <__sprint_r>
 801c7e6:	2800      	cmp	r0, #0
 801c7e8:	f47f aa1e 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c7ec:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801c7ee:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801c7f0:	ac2e      	add	r4, sp, #184	; 0xb8
 801c7f2:	e63f      	b.n	801c474 <_vfprintf_r+0xa4c>
 801c7f4:	4640      	mov	r0, r8
 801c7f6:	4649      	mov	r1, r9
 801c7f8:	aa21      	add	r2, sp, #132	; 0x84
 801c7fa:	f7fe facb 	bl	801ad94 <__sprint_r>
 801c7fe:	2800      	cmp	r0, #0
 801c800:	f47f aa12 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c804:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801c806:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801c808:	ac2e      	add	r4, sp, #184	; 0xb8
 801c80a:	e610      	b.n	801c42e <_vfprintf_r+0xa06>
 801c80c:	4640      	mov	r0, r8
 801c80e:	4649      	mov	r1, r9
 801c810:	aa21      	add	r2, sp, #132	; 0x84
 801c812:	f7fe fabf 	bl	801ad94 <__sprint_r>
 801c816:	2800      	cmp	r0, #0
 801c818:	f47f aa06 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c81c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801c81e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801c820:	ac2e      	add	r4, sp, #184	; 0xb8
 801c822:	e610      	b.n	801c446 <_vfprintf_r+0xa1e>
 801c824:	3501      	adds	r5, #1
 801c826:	4456      	add	r6, sl
 801c828:	2d07      	cmp	r5, #7
 801c82a:	9623      	str	r6, [sp, #140]	; 0x8c
 801c82c:	9522      	str	r5, [sp, #136]	; 0x88
 801c82e:	e884 0480 	stmia.w	r4, {r7, sl}
 801c832:	f77f ae1e 	ble.w	801c472 <_vfprintf_r+0xa4a>
 801c836:	e7d1      	b.n	801c7dc <_vfprintf_r+0xdb4>
 801c838:	4640      	mov	r0, r8
 801c83a:	4649      	mov	r1, r9
 801c83c:	aa21      	add	r2, sp, #132	; 0x84
 801c83e:	f7fe faa9 	bl	801ad94 <__sprint_r>
 801c842:	2800      	cmp	r0, #0
 801c844:	f47f a9f0 	bne.w	801bc28 <_vfprintf_r+0x200>
 801c848:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801c84c:	ac2e      	add	r4, sp, #184	; 0xb8
 801c84e:	f7ff babc 	b.w	801bdca <_vfprintf_r+0x3a2>
 801c852:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801c856:	4276      	negs	r6, r6
 801c858:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801c85c:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 801c860:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801c864:	2301      	movs	r3, #1
 801c866:	f7ff ba03 	b.w	801bc70 <_vfprintf_r+0x248>
 801c86a:	bf00      	nop
 801c86c:	0803567c 	.word	0x0803567c
 801c870:	f7fc fdbe 	bl	80193f0 <__fpclassifyd>
 801c874:	2800      	cmp	r0, #0
 801c876:	f000 810d 	beq.w	801ca94 <_vfprintf_r+0x106c>
 801c87a:	f025 0320 	bic.w	r3, r5, #32
 801c87e:	f1b6 3fff 	cmp.w	r6, #4294967295
 801c882:	930b      	str	r3, [sp, #44]	; 0x2c
 801c884:	f000 8258 	beq.w	801cd38 <_vfprintf_r+0x1310>
 801c888:	2b47      	cmp	r3, #71	; 0x47
 801c88a:	d104      	bne.n	801c896 <_vfprintf_r+0xe6e>
 801c88c:	2e00      	cmp	r6, #0
 801c88e:	bf14      	ite	ne
 801c890:	46b3      	movne	fp, r6
 801c892:	f04f 0b01 	moveq.w	fp, #1
 801c896:	9b06      	ldr	r3, [sp, #24]
 801c898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c89c:	930f      	str	r3, [sp, #60]	; 0x3c
 801c89e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c8a0:	f1b3 0a00 	subs.w	sl, r3, #0
 801c8a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c8a6:	9307      	str	r3, [sp, #28]
 801c8a8:	bfbb      	ittet	lt
 801c8aa:	4653      	movlt	r3, sl
 801c8ac:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
 801c8b0:	2300      	movge	r3, #0
 801c8b2:	232d      	movlt	r3, #45	; 0x2d
 801c8b4:	2d66      	cmp	r5, #102	; 0x66
 801c8b6:	930d      	str	r3, [sp, #52]	; 0x34
 801c8b8:	f000 8154 	beq.w	801cb64 <_vfprintf_r+0x113c>
 801c8bc:	2d46      	cmp	r5, #70	; 0x46
 801c8be:	f000 8151 	beq.w	801cb64 <_vfprintf_r+0x113c>
 801c8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8c4:	9a07      	ldr	r2, [sp, #28]
 801c8c6:	2b45      	cmp	r3, #69	; 0x45
 801c8c8:	bf0c      	ite	eq
 801c8ca:	f10b 0701 	addeq.w	r7, fp, #1
 801c8ce:	465f      	movne	r7, fp
 801c8d0:	2002      	movs	r0, #2
 801c8d2:	a91b      	add	r1, sp, #108	; 0x6c
 801c8d4:	e88d 0081 	stmia.w	sp, {r0, r7}
 801c8d8:	9102      	str	r1, [sp, #8]
 801c8da:	a81c      	add	r0, sp, #112	; 0x70
 801c8dc:	a91f      	add	r1, sp, #124	; 0x7c
 801c8de:	9003      	str	r0, [sp, #12]
 801c8e0:	4653      	mov	r3, sl
 801c8e2:	9104      	str	r1, [sp, #16]
 801c8e4:	4640      	mov	r0, r8
 801c8e6:	f000 fbcf 	bl	801d088 <_dtoa_r>
 801c8ea:	2d67      	cmp	r5, #103	; 0x67
 801c8ec:	900e      	str	r0, [sp, #56]	; 0x38
 801c8ee:	d002      	beq.n	801c8f6 <_vfprintf_r+0xece>
 801c8f0:	2d47      	cmp	r5, #71	; 0x47
 801c8f2:	f040 8147 	bne.w	801cb84 <_vfprintf_r+0x115c>
 801c8f6:	9b06      	ldr	r3, [sp, #24]
 801c8f8:	07db      	lsls	r3, r3, #31
 801c8fa:	f140 823a 	bpl.w	801cd72 <_vfprintf_r+0x134a>
 801c8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c900:	19de      	adds	r6, r3, r7
 801c902:	9807      	ldr	r0, [sp, #28]
 801c904:	4651      	mov	r1, sl
 801c906:	2200      	movs	r2, #0
 801c908:	2300      	movs	r3, #0
 801c90a:	f7e4 f85d 	bl	80009c8 <__aeabi_dcmpeq>
 801c90e:	2800      	cmp	r0, #0
 801c910:	f040 81a3 	bne.w	801cc5a <_vfprintf_r+0x1232>
 801c914:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c916:	429e      	cmp	r6, r3
 801c918:	d906      	bls.n	801c928 <_vfprintf_r+0xf00>
 801c91a:	2130      	movs	r1, #48	; 0x30
 801c91c:	1c5a      	adds	r2, r3, #1
 801c91e:	921f      	str	r2, [sp, #124]	; 0x7c
 801c920:	7019      	strb	r1, [r3, #0]
 801c922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c924:	429e      	cmp	r6, r3
 801c926:	d8f9      	bhi.n	801c91c <_vfprintf_r+0xef4>
 801c928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c92a:	1a9b      	subs	r3, r3, r2
 801c92c:	9311      	str	r3, [sp, #68]	; 0x44
 801c92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c930:	2b47      	cmp	r3, #71	; 0x47
 801c932:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c934:	f000 8179 	beq.w	801cc2a <_vfprintf_r+0x1202>
 801c938:	2d65      	cmp	r5, #101	; 0x65
 801c93a:	f340 819c 	ble.w	801cc76 <_vfprintf_r+0x124e>
 801c93e:	2d66      	cmp	r5, #102	; 0x66
 801c940:	9310      	str	r3, [sp, #64]	; 0x40
 801c942:	f000 8209 	beq.w	801cd58 <_vfprintf_r+0x1330>
 801c946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c948:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c94a:	4293      	cmp	r3, r2
 801c94c:	f300 81f7 	bgt.w	801cd3e <_vfprintf_r+0x1316>
 801c950:	9b06      	ldr	r3, [sp, #24]
 801c952:	07d9      	lsls	r1, r3, #31
 801c954:	f100 8217 	bmi.w	801cd86 <_vfprintf_r+0x135e>
 801c958:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c95c:	920b      	str	r2, [sp, #44]	; 0x2c
 801c95e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c960:	2a00      	cmp	r2, #0
 801c962:	f040 8169 	bne.w	801cc38 <_vfprintf_r+0x1210>
 801c966:	9307      	str	r3, [sp, #28]
 801c968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c96a:	9306      	str	r3, [sp, #24]
 801c96c:	920f      	str	r2, [sp, #60]	; 0x3c
 801c96e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801c972:	f7ff b9b1 	b.w	801bcd8 <_vfprintf_r+0x2b0>
 801c976:	9b06      	ldr	r3, [sp, #24]
 801c978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c97a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c97e:	4613      	mov	r3, r2
 801c980:	f43f ac84 	beq.w	801c28c <_vfprintf_r+0x864>
 801c984:	8816      	ldrh	r6, [r2, #0]
 801c986:	3204      	adds	r2, #4
 801c988:	2700      	movs	r7, #0
 801c98a:	2301      	movs	r3, #1
 801c98c:	920c      	str	r2, [sp, #48]	; 0x30
 801c98e:	f7ff b969 	b.w	801bc64 <_vfprintf_r+0x23c>
 801c992:	9b06      	ldr	r3, [sp, #24]
 801c994:	06db      	lsls	r3, r3, #27
 801c996:	d40b      	bmi.n	801c9b0 <_vfprintf_r+0xf88>
 801c998:	9b06      	ldr	r3, [sp, #24]
 801c99a:	065f      	lsls	r7, r3, #25
 801c99c:	d508      	bpl.n	801c9b0 <_vfprintf_r+0xf88>
 801c99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c9a0:	6813      	ldr	r3, [r2, #0]
 801c9a2:	3204      	adds	r2, #4
 801c9a4:	920c      	str	r2, [sp, #48]	; 0x30
 801c9a6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c9aa:	801a      	strh	r2, [r3, #0]
 801c9ac:	f7ff b87d 	b.w	801baaa <_vfprintf_r+0x82>
 801c9b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c9b2:	6813      	ldr	r3, [r2, #0]
 801c9b4:	3204      	adds	r2, #4
 801c9b6:	920c      	str	r2, [sp, #48]	; 0x30
 801c9b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c9ba:	601a      	str	r2, [r3, #0]
 801c9bc:	f7ff b875 	b.w	801baaa <_vfprintf_r+0x82>
 801c9c0:	9b06      	ldr	r3, [sp, #24]
 801c9c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c9c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c9c8:	4613      	mov	r3, r2
 801c9ca:	d076      	beq.n	801caba <_vfprintf_r+0x1092>
 801c9cc:	3304      	adds	r3, #4
 801c9ce:	8816      	ldrh	r6, [r2, #0]
 801c9d0:	930c      	str	r3, [sp, #48]	; 0x30
 801c9d2:	2700      	movs	r7, #0
 801c9d4:	f7ff bae4 	b.w	801bfa0 <_vfprintf_r+0x578>
 801c9d8:	4693      	mov	fp, r2
 801c9da:	3301      	adds	r3, #1
 801c9dc:	44ab      	add	fp, r5
 801c9de:	2b07      	cmp	r3, #7
 801c9e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801c9e4:	9322      	str	r3, [sp, #136]	; 0x88
 801c9e6:	6027      	str	r7, [r4, #0]
 801c9e8:	6065      	str	r5, [r4, #4]
 801c9ea:	f73f ae86 	bgt.w	801c6fa <_vfprintf_r+0xcd2>
 801c9ee:	3408      	adds	r4, #8
 801c9f0:	e68e      	b.n	801c710 <_vfprintf_r+0xce8>
 801c9f2:	4640      	mov	r0, r8
 801c9f4:	4649      	mov	r1, r9
 801c9f6:	aa21      	add	r2, sp, #132	; 0x84
 801c9f8:	f7fe f9cc 	bl	801ad94 <__sprint_r>
 801c9fc:	2800      	cmp	r0, #0
 801c9fe:	f47f a913 	bne.w	801bc28 <_vfprintf_r+0x200>
 801ca02:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801ca06:	ac2e      	add	r4, sp, #184	; 0xb8
 801ca08:	e48d      	b.n	801c326 <_vfprintf_r+0x8fe>
 801ca0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ca0c:	4ab0      	ldr	r2, [pc, #704]	; (801ccd0 <_vfprintf_r+0x12a8>)
 801ca0e:	6022      	str	r2, [r4, #0]
 801ca10:	3301      	adds	r3, #1
 801ca12:	f10b 0b01 	add.w	fp, fp, #1
 801ca16:	2201      	movs	r2, #1
 801ca18:	2b07      	cmp	r3, #7
 801ca1a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801ca1e:	9322      	str	r3, [sp, #136]	; 0x88
 801ca20:	6062      	str	r2, [r4, #4]
 801ca22:	dc50      	bgt.n	801cac6 <_vfprintf_r+0x109e>
 801ca24:	3408      	adds	r4, #8
 801ca26:	b92d      	cbnz	r5, 801ca34 <_vfprintf_r+0x100c>
 801ca28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca2a:	b91b      	cbnz	r3, 801ca34 <_vfprintf_r+0x100c>
 801ca2c:	9b06      	ldr	r3, [sp, #24]
 801ca2e:	07de      	lsls	r6, r3, #31
 801ca30:	f57f aa17 	bpl.w	801be62 <_vfprintf_r+0x43a>
 801ca34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ca36:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ca38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ca3a:	6022      	str	r2, [r4, #0]
 801ca3c:	3301      	adds	r3, #1
 801ca3e:	eb0b 0201 	add.w	r2, fp, r1
 801ca42:	2b07      	cmp	r3, #7
 801ca44:	9223      	str	r2, [sp, #140]	; 0x8c
 801ca46:	6061      	str	r1, [r4, #4]
 801ca48:	9322      	str	r3, [sp, #136]	; 0x88
 801ca4a:	f300 8168 	bgt.w	801cd1e <_vfprintf_r+0x12f6>
 801ca4e:	3408      	adds	r4, #8
 801ca50:	426d      	negs	r5, r5
 801ca52:	2d00      	cmp	r5, #0
 801ca54:	dd6f      	ble.n	801cb36 <_vfprintf_r+0x110e>
 801ca56:	2d10      	cmp	r5, #16
 801ca58:	4f9e      	ldr	r7, [pc, #632]	; (801ccd4 <_vfprintf_r+0x12ac>)
 801ca5a:	bfc8      	it	gt
 801ca5c:	2610      	movgt	r6, #16
 801ca5e:	dc05      	bgt.n	801ca6c <_vfprintf_r+0x1044>
 801ca60:	e0aa      	b.n	801cbb8 <_vfprintf_r+0x1190>
 801ca62:	3408      	adds	r4, #8
 801ca64:	3d10      	subs	r5, #16
 801ca66:	2d10      	cmp	r5, #16
 801ca68:	f340 80a6 	ble.w	801cbb8 <_vfprintf_r+0x1190>
 801ca6c:	3301      	adds	r3, #1
 801ca6e:	3210      	adds	r2, #16
 801ca70:	2b07      	cmp	r3, #7
 801ca72:	9223      	str	r2, [sp, #140]	; 0x8c
 801ca74:	9322      	str	r3, [sp, #136]	; 0x88
 801ca76:	6027      	str	r7, [r4, #0]
 801ca78:	6066      	str	r6, [r4, #4]
 801ca7a:	ddf2      	ble.n	801ca62 <_vfprintf_r+0x103a>
 801ca7c:	4640      	mov	r0, r8
 801ca7e:	4649      	mov	r1, r9
 801ca80:	aa21      	add	r2, sp, #132	; 0x84
 801ca82:	f7fe f987 	bl	801ad94 <__sprint_r>
 801ca86:	2800      	cmp	r0, #0
 801ca88:	f47f a8ce 	bne.w	801bc28 <_vfprintf_r+0x200>
 801ca8c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ca8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ca90:	ac2e      	add	r4, sp, #184	; 0xb8
 801ca92:	e7e7      	b.n	801ca64 <_vfprintf_r+0x103c>
 801ca94:	9e06      	ldr	r6, [sp, #24]
 801ca96:	4a90      	ldr	r2, [pc, #576]	; (801ccd8 <_vfprintf_r+0x12b0>)
 801ca98:	4b90      	ldr	r3, [pc, #576]	; (801ccdc <_vfprintf_r+0x12b4>)
 801ca9a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801ca9e:	900f      	str	r0, [sp, #60]	; 0x3c
 801caa0:	2103      	movs	r1, #3
 801caa2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 801caa6:	2d47      	cmp	r5, #71	; 0x47
 801caa8:	bfd8      	it	le
 801caaa:	461a      	movle	r2, r3
 801caac:	9107      	str	r1, [sp, #28]
 801caae:	9606      	str	r6, [sp, #24]
 801cab0:	9010      	str	r0, [sp, #64]	; 0x40
 801cab2:	920e      	str	r2, [sp, #56]	; 0x38
 801cab4:	910b      	str	r1, [sp, #44]	; 0x2c
 801cab6:	f7ff b90f 	b.w	801bcd8 <_vfprintf_r+0x2b0>
 801caba:	3304      	adds	r3, #4
 801cabc:	6816      	ldr	r6, [r2, #0]
 801cabe:	930c      	str	r3, [sp, #48]	; 0x30
 801cac0:	2700      	movs	r7, #0
 801cac2:	f7ff ba6d 	b.w	801bfa0 <_vfprintf_r+0x578>
 801cac6:	4640      	mov	r0, r8
 801cac8:	4649      	mov	r1, r9
 801caca:	aa21      	add	r2, sp, #132	; 0x84
 801cacc:	f7fe f962 	bl	801ad94 <__sprint_r>
 801cad0:	2800      	cmp	r0, #0
 801cad2:	f47f a8a9 	bne.w	801bc28 <_vfprintf_r+0x200>
 801cad6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801cad8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801cadc:	ac2e      	add	r4, sp, #184	; 0xb8
 801cade:	e7a2      	b.n	801ca26 <_vfprintf_r+0xffe>
 801cae0:	f041 0120 	orr.w	r1, r1, #32
 801cae4:	9106      	str	r1, [sp, #24]
 801cae6:	785d      	ldrb	r5, [r3, #1]
 801cae8:	1c59      	adds	r1, r3, #1
 801caea:	f7ff b80e 	b.w	801bb0a <_vfprintf_r+0xe2>
 801caee:	980a      	ldr	r0, [sp, #40]	; 0x28
 801caf0:	910c      	str	r1, [sp, #48]	; 0x30
 801caf2:	4240      	negs	r0, r0
 801caf4:	900a      	str	r0, [sp, #40]	; 0x28
 801caf6:	4619      	mov	r1, r3
 801caf8:	f7ff ba02 	b.w	801bf00 <_vfprintf_r+0x4d8>
 801cafc:	4640      	mov	r0, r8
 801cafe:	4649      	mov	r1, r9
 801cb00:	aa21      	add	r2, sp, #132	; 0x84
 801cb02:	f7fe f947 	bl	801ad94 <__sprint_r>
 801cb06:	2800      	cmp	r0, #0
 801cb08:	f47f a88e 	bne.w	801bc28 <_vfprintf_r+0x200>
 801cb0c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801cb10:	ac2e      	add	r4, sp, #184	; 0xb8
 801cb12:	e41e      	b.n	801c352 <_vfprintf_r+0x92a>
 801cb14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb16:	ab2e      	add	r3, sp, #184	; 0xb8
 801cb18:	1a9b      	subs	r3, r3, r2
 801cb1a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb1c:	f7ff b8d4 	b.w	801bcc8 <_vfprintf_r+0x2a0>
 801cb20:	4640      	mov	r0, r8
 801cb22:	4649      	mov	r1, r9
 801cb24:	aa21      	add	r2, sp, #132	; 0x84
 801cb26:	f7fe f935 	bl	801ad94 <__sprint_r>
 801cb2a:	2800      	cmp	r0, #0
 801cb2c:	f47f a87c 	bne.w	801bc28 <_vfprintf_r+0x200>
 801cb30:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801cb32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cb34:	ac2e      	add	r4, sp, #184	; 0xb8
 801cb36:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cb38:	6060      	str	r0, [r4, #4]
 801cb3a:	3301      	adds	r3, #1
 801cb3c:	eb02 0b00 	add.w	fp, r2, r0
 801cb40:	2b07      	cmp	r3, #7
 801cb42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb44:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801cb48:	9322      	str	r3, [sp, #136]	; 0x88
 801cb4a:	6022      	str	r2, [r4, #0]
 801cb4c:	f77f a988 	ble.w	801be60 <_vfprintf_r+0x438>
 801cb50:	e49d      	b.n	801c48e <_vfprintf_r+0xa66>
 801cb52:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 801cb56:	f7fc fe69 	bl	801982c <strlen>
 801cb5a:	970c      	str	r7, [sp, #48]	; 0x30
 801cb5c:	900b      	str	r0, [sp, #44]	; 0x2c
 801cb5e:	4603      	mov	r3, r0
 801cb60:	f7ff ba03 	b.w	801bf6a <_vfprintf_r+0x542>
 801cb64:	2003      	movs	r0, #3
 801cb66:	a91b      	add	r1, sp, #108	; 0x6c
 801cb68:	e88d 0801 	stmia.w	sp, {r0, fp}
 801cb6c:	9102      	str	r1, [sp, #8]
 801cb6e:	a81c      	add	r0, sp, #112	; 0x70
 801cb70:	a91f      	add	r1, sp, #124	; 0x7c
 801cb72:	9003      	str	r0, [sp, #12]
 801cb74:	9a07      	ldr	r2, [sp, #28]
 801cb76:	9104      	str	r1, [sp, #16]
 801cb78:	4653      	mov	r3, sl
 801cb7a:	4640      	mov	r0, r8
 801cb7c:	f000 fa84 	bl	801d088 <_dtoa_r>
 801cb80:	465f      	mov	r7, fp
 801cb82:	900e      	str	r0, [sp, #56]	; 0x38
 801cb84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb86:	19de      	adds	r6, r3, r7
 801cb88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb8a:	2b46      	cmp	r3, #70	; 0x46
 801cb8c:	f47f aeb9 	bne.w	801c902 <_vfprintf_r+0xeda>
 801cb90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb92:	781b      	ldrb	r3, [r3, #0]
 801cb94:	2b30      	cmp	r3, #48	; 0x30
 801cb96:	f000 80fc 	beq.w	801cd92 <_vfprintf_r+0x136a>
 801cb9a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801cb9c:	443e      	add	r6, r7
 801cb9e:	e6b0      	b.n	801c902 <_vfprintf_r+0xeda>
 801cba0:	4640      	mov	r0, r8
 801cba2:	4649      	mov	r1, r9
 801cba4:	aa21      	add	r2, sp, #132	; 0x84
 801cba6:	f7fe f8f5 	bl	801ad94 <__sprint_r>
 801cbaa:	2800      	cmp	r0, #0
 801cbac:	f47f a83c 	bne.w	801bc28 <_vfprintf_r+0x200>
 801cbb0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801cbb4:	ac2e      	add	r4, sp, #184	; 0xb8
 801cbb6:	e4f4      	b.n	801c5a2 <_vfprintf_r+0xb7a>
 801cbb8:	3301      	adds	r3, #1
 801cbba:	442a      	add	r2, r5
 801cbbc:	2b07      	cmp	r3, #7
 801cbbe:	9223      	str	r2, [sp, #140]	; 0x8c
 801cbc0:	9322      	str	r3, [sp, #136]	; 0x88
 801cbc2:	6027      	str	r7, [r4, #0]
 801cbc4:	6065      	str	r5, [r4, #4]
 801cbc6:	dcab      	bgt.n	801cb20 <_vfprintf_r+0x10f8>
 801cbc8:	3408      	adds	r4, #8
 801cbca:	e7b4      	b.n	801cb36 <_vfprintf_r+0x110e>
 801cbcc:	4640      	mov	r0, r8
 801cbce:	4649      	mov	r1, r9
 801cbd0:	aa21      	add	r2, sp, #132	; 0x84
 801cbd2:	f7fe f8df 	bl	801ad94 <__sprint_r>
 801cbd6:	2800      	cmp	r0, #0
 801cbd8:	f47f a826 	bne.w	801bc28 <_vfprintf_r+0x200>
 801cbdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cbde:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801cbe2:	ac2e      	add	r4, sp, #184	; 0xb8
 801cbe4:	e59f      	b.n	801c726 <_vfprintf_r+0xcfe>
 801cbe6:	2e06      	cmp	r6, #6
 801cbe8:	4633      	mov	r3, r6
 801cbea:	bf28      	it	cs
 801cbec:	2306      	movcs	r3, #6
 801cbee:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbf4:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 801cbf8:	9307      	str	r3, [sp, #28]
 801cbfa:	4b39      	ldr	r3, [pc, #228]	; (801cce0 <_vfprintf_r+0x12b8>)
 801cbfc:	970c      	str	r7, [sp, #48]	; 0x30
 801cbfe:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801cc02:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801cc06:	930e      	str	r3, [sp, #56]	; 0x38
 801cc08:	f7ff b866 	b.w	801bcd8 <_vfprintf_r+0x2b0>
 801cc0c:	4640      	mov	r0, r8
 801cc0e:	4649      	mov	r1, r9
 801cc10:	aa21      	add	r2, sp, #132	; 0x84
 801cc12:	f7fe f8bf 	bl	801ad94 <__sprint_r>
 801cc16:	2800      	cmp	r0, #0
 801cc18:	f47f a806 	bne.w	801bc28 <_vfprintf_r+0x200>
 801cc1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cc1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc20:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801cc24:	1ad3      	subs	r3, r2, r3
 801cc26:	ac2e      	add	r4, sp, #184	; 0xb8
 801cc28:	e593      	b.n	801c752 <_vfprintf_r+0xd2a>
 801cc2a:	1cdf      	adds	r7, r3, #3
 801cc2c:	db22      	blt.n	801cc74 <_vfprintf_r+0x124c>
 801cc2e:	459b      	cmp	fp, r3
 801cc30:	db20      	blt.n	801cc74 <_vfprintf_r+0x124c>
 801cc32:	9310      	str	r3, [sp, #64]	; 0x40
 801cc34:	2567      	movs	r5, #103	; 0x67
 801cc36:	e686      	b.n	801c946 <_vfprintf_r+0xf1e>
 801cc38:	9307      	str	r3, [sp, #28]
 801cc3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc3c:	9306      	str	r3, [sp, #24]
 801cc3e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801cc42:	2300      	movs	r3, #0
 801cc44:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 801cc48:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc4a:	f7ff b848 	b.w	801bcde <_vfprintf_r+0x2b6>
 801cc4e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 801cc52:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 801cc56:	f7ff ba0e 	b.w	801c076 <_vfprintf_r+0x64e>
 801cc5a:	4633      	mov	r3, r6
 801cc5c:	e664      	b.n	801c928 <_vfprintf_r+0xf00>
 801cc5e:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801cc62:	900f      	str	r0, [sp, #60]	; 0x3c
 801cc64:	970c      	str	r7, [sp, #48]	; 0x30
 801cc66:	9010      	str	r0, [sp, #64]	; 0x40
 801cc68:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 801cc6c:	9307      	str	r3, [sp, #28]
 801cc6e:	960b      	str	r6, [sp, #44]	; 0x2c
 801cc70:	f7ff b832 	b.w	801bcd8 <_vfprintf_r+0x2b0>
 801cc74:	3d02      	subs	r5, #2
 801cc76:	3b01      	subs	r3, #1
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	931b      	str	r3, [sp, #108]	; 0x6c
 801cc7c:	bfba      	itte	lt
 801cc7e:	425b      	neglt	r3, r3
 801cc80:	222d      	movlt	r2, #45	; 0x2d
 801cc82:	222b      	movge	r2, #43	; 0x2b
 801cc84:	2b09      	cmp	r3, #9
 801cc86:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 801cc8a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 801cc8e:	dd72      	ble.n	801cd76 <_vfprintf_r+0x134e>
 801cc90:	f10d 0683 	add.w	r6, sp, #131	; 0x83
 801cc94:	4630      	mov	r0, r6
 801cc96:	4a13      	ldr	r2, [pc, #76]	; (801cce4 <_vfprintf_r+0x12bc>)
 801cc98:	fb82 2103 	smull	r2, r1, r2, r3
 801cc9c:	17da      	asrs	r2, r3, #31
 801cc9e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 801cca2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801cca6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 801ccaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ccae:	2a09      	cmp	r2, #9
 801ccb0:	4613      	mov	r3, r2
 801ccb2:	f800 1d01 	strb.w	r1, [r0, #-1]!
 801ccb6:	dcee      	bgt.n	801cc96 <_vfprintf_r+0x126e>
 801ccb8:	4602      	mov	r2, r0
 801ccba:	3330      	adds	r3, #48	; 0x30
 801ccbc:	b2d9      	uxtb	r1, r3
 801ccbe:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801ccc2:	4296      	cmp	r6, r2
 801ccc4:	f240 80a0 	bls.w	801ce08 <_vfprintf_r+0x13e0>
 801ccc8:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 801cccc:	4603      	mov	r3, r0
 801ccce:	e00d      	b.n	801ccec <_vfprintf_r+0x12c4>
 801ccd0:	08035648 	.word	0x08035648
 801ccd4:	0803567c 	.word	0x0803567c
 801ccd8:	08035614 	.word	0x08035614
 801ccdc:	08035610 	.word	0x08035610
 801cce0:	08035640 	.word	0x08035640
 801cce4:	66666667 	.word	0x66666667
 801cce8:	f813 1b01 	ldrb.w	r1, [r3], #1
 801ccec:	f802 1b01 	strb.w	r1, [r2], #1
 801ccf0:	42b3      	cmp	r3, r6
 801ccf2:	d1f9      	bne.n	801cce8 <_vfprintf_r+0x12c0>
 801ccf4:	ab21      	add	r3, sp, #132	; 0x84
 801ccf6:	1a1b      	subs	r3, r3, r0
 801ccf8:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 801ccfc:	4413      	add	r3, r2
 801ccfe:	aa1d      	add	r2, sp, #116	; 0x74
 801cd00:	1a9b      	subs	r3, r3, r2
 801cd02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd04:	9317      	str	r3, [sp, #92]	; 0x5c
 801cd06:	2a01      	cmp	r2, #1
 801cd08:	4413      	add	r3, r2
 801cd0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd0c:	dd6d      	ble.n	801cdea <_vfprintf_r+0x13c2>
 801cd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd10:	2200      	movs	r2, #0
 801cd12:	3301      	adds	r3, #1
 801cd14:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd16:	9210      	str	r2, [sp, #64]	; 0x40
 801cd18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd1c:	e61f      	b.n	801c95e <_vfprintf_r+0xf36>
 801cd1e:	4640      	mov	r0, r8
 801cd20:	4649      	mov	r1, r9
 801cd22:	aa21      	add	r2, sp, #132	; 0x84
 801cd24:	f7fe f836 	bl	801ad94 <__sprint_r>
 801cd28:	2800      	cmp	r0, #0
 801cd2a:	f47e af7d 	bne.w	801bc28 <_vfprintf_r+0x200>
 801cd2e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801cd30:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801cd32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cd34:	ac2e      	add	r4, sp, #184	; 0xb8
 801cd36:	e68b      	b.n	801ca50 <_vfprintf_r+0x1028>
 801cd38:	f04f 0b06 	mov.w	fp, #6
 801cd3c:	e5ab      	b.n	801c896 <_vfprintf_r+0xe6e>
 801cd3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	bfd8      	it	le
 801cd44:	f1c3 0602 	rsble	r6, r3, #2
 801cd48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd4a:	bfc8      	it	gt
 801cd4c:	2601      	movgt	r6, #1
 801cd4e:	18f3      	adds	r3, r6, r3
 801cd50:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd56:	e602      	b.n	801c95e <_vfprintf_r+0xf36>
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	dd30      	ble.n	801cdbe <_vfprintf_r+0x1396>
 801cd5c:	f1bb 0f00 	cmp.w	fp, #0
 801cd60:	d125      	bne.n	801cdae <_vfprintf_r+0x1386>
 801cd62:	9b06      	ldr	r3, [sp, #24]
 801cd64:	07de      	lsls	r6, r3, #31
 801cd66:	d422      	bmi.n	801cdae <_vfprintf_r+0x1386>
 801cd68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd6a:	920b      	str	r2, [sp, #44]	; 0x2c
 801cd6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801cd70:	e5f5      	b.n	801c95e <_vfprintf_r+0xf36>
 801cd72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd74:	e5d8      	b.n	801c928 <_vfprintf_r+0xf00>
 801cd76:	3330      	adds	r3, #48	; 0x30
 801cd78:	2230      	movs	r2, #48	; 0x30
 801cd7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 801cd7e:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 801cd82:	ab1e      	add	r3, sp, #120	; 0x78
 801cd84:	e7bb      	b.n	801ccfe <_vfprintf_r+0x12d6>
 801cd86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cd88:	3301      	adds	r3, #1
 801cd8a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd90:	e5e5      	b.n	801c95e <_vfprintf_r+0xf36>
 801cd92:	9807      	ldr	r0, [sp, #28]
 801cd94:	4651      	mov	r1, sl
 801cd96:	2200      	movs	r2, #0
 801cd98:	2300      	movs	r3, #0
 801cd9a:	f7e3 fe15 	bl	80009c8 <__aeabi_dcmpeq>
 801cd9e:	2800      	cmp	r0, #0
 801cda0:	f47f aefb 	bne.w	801cb9a <_vfprintf_r+0x1172>
 801cda4:	f1c7 0701 	rsb	r7, r7, #1
 801cda8:	971b      	str	r7, [sp, #108]	; 0x6c
 801cdaa:	443e      	add	r6, r7
 801cdac:	e5a9      	b.n	801c902 <_vfprintf_r+0xeda>
 801cdae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cdb0:	f10b 0601 	add.w	r6, fp, #1
 801cdb4:	4433      	add	r3, r6
 801cdb6:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdbc:	e5cf      	b.n	801c95e <_vfprintf_r+0xf36>
 801cdbe:	f1bb 0f00 	cmp.w	fp, #0
 801cdc2:	d11b      	bne.n	801cdfc <_vfprintf_r+0x13d4>
 801cdc4:	9b06      	ldr	r3, [sp, #24]
 801cdc6:	07d8      	lsls	r0, r3, #31
 801cdc8:	d418      	bmi.n	801cdfc <_vfprintf_r+0x13d4>
 801cdca:	2301      	movs	r3, #1
 801cdcc:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdce:	e5c6      	b.n	801c95e <_vfprintf_r+0xf36>
 801cdd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cdd2:	682e      	ldr	r6, [r5, #0]
 801cdd4:	4628      	mov	r0, r5
 801cdd6:	3004      	adds	r0, #4
 801cdd8:	2e00      	cmp	r6, #0
 801cdda:	785d      	ldrb	r5, [r3, #1]
 801cddc:	900c      	str	r0, [sp, #48]	; 0x30
 801cdde:	f6be ae94 	bge.w	801bb0a <_vfprintf_r+0xe2>
 801cde2:	f04f 36ff 	mov.w	r6, #4294967295
 801cde6:	f7fe be90 	b.w	801bb0a <_vfprintf_r+0xe2>
 801cdea:	9b06      	ldr	r3, [sp, #24]
 801cdec:	f013 0301 	ands.w	r3, r3, #1
 801cdf0:	d18d      	bne.n	801cd0e <_vfprintf_r+0x12e6>
 801cdf2:	9310      	str	r3, [sp, #64]	; 0x40
 801cdf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cdf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdfa:	e5b0      	b.n	801c95e <_vfprintf_r+0xf36>
 801cdfc:	f10b 0302 	add.w	r3, fp, #2
 801ce00:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce06:	e5aa      	b.n	801c95e <_vfprintf_r+0xf36>
 801ce08:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 801ce0c:	e777      	b.n	801ccfe <_vfprintf_r+0x12d6>
 801ce0e:	bf00      	nop

0801ce10 <__sbprintf>:
 801ce10:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 801ce14:	460c      	mov	r4, r1
 801ce16:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 801ce1a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 801ce1e:	69e7      	ldr	r7, [r4, #28]
 801ce20:	6e49      	ldr	r1, [r1, #100]	; 0x64
 801ce22:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 801ce26:	9119      	str	r1, [sp, #100]	; 0x64
 801ce28:	ad1a      	add	r5, sp, #104	; 0x68
 801ce2a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801ce2e:	f02e 0e02 	bic.w	lr, lr, #2
 801ce32:	f04f 0c00 	mov.w	ip, #0
 801ce36:	9707      	str	r7, [sp, #28]
 801ce38:	4669      	mov	r1, sp
 801ce3a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801ce3c:	9500      	str	r5, [sp, #0]
 801ce3e:	9504      	str	r5, [sp, #16]
 801ce40:	9602      	str	r6, [sp, #8]
 801ce42:	9605      	str	r6, [sp, #20]
 801ce44:	f8ad e00c 	strh.w	lr, [sp, #12]
 801ce48:	f8ad 900e 	strh.w	r9, [sp, #14]
 801ce4c:	9709      	str	r7, [sp, #36]	; 0x24
 801ce4e:	f8cd c018 	str.w	ip, [sp, #24]
 801ce52:	4606      	mov	r6, r0
 801ce54:	f7fe fde8 	bl	801ba28 <_vfprintf_r>
 801ce58:	1e05      	subs	r5, r0, #0
 801ce5a:	db07      	blt.n	801ce6c <__sbprintf+0x5c>
 801ce5c:	4630      	mov	r0, r6
 801ce5e:	4669      	mov	r1, sp
 801ce60:	f001 f908 	bl	801e074 <_fflush_r>
 801ce64:	2800      	cmp	r0, #0
 801ce66:	bf18      	it	ne
 801ce68:	f04f 35ff 	movne.w	r5, #4294967295
 801ce6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ce70:	065b      	lsls	r3, r3, #25
 801ce72:	d503      	bpl.n	801ce7c <__sbprintf+0x6c>
 801ce74:	89a3      	ldrh	r3, [r4, #12]
 801ce76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce7a:	81a3      	strh	r3, [r4, #12]
 801ce7c:	4628      	mov	r0, r5
 801ce7e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 801ce82:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801ce86:	bf00      	nop

0801ce88 <__swsetup_r>:
 801ce88:	b538      	push	{r3, r4, r5, lr}
 801ce8a:	4b2f      	ldr	r3, [pc, #188]	; (801cf48 <__swsetup_r+0xc0>)
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	4605      	mov	r5, r0
 801ce90:	460c      	mov	r4, r1
 801ce92:	b113      	cbz	r3, 801ce9a <__swsetup_r+0x12>
 801ce94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ce96:	2a00      	cmp	r2, #0
 801ce98:	d036      	beq.n	801cf08 <__swsetup_r+0x80>
 801ce9a:	89a2      	ldrh	r2, [r4, #12]
 801ce9c:	b293      	uxth	r3, r2
 801ce9e:	0718      	lsls	r0, r3, #28
 801cea0:	d50c      	bpl.n	801cebc <__swsetup_r+0x34>
 801cea2:	6920      	ldr	r0, [r4, #16]
 801cea4:	b1a8      	cbz	r0, 801ced2 <__swsetup_r+0x4a>
 801cea6:	f013 0201 	ands.w	r2, r3, #1
 801ceaa:	d01e      	beq.n	801ceea <__swsetup_r+0x62>
 801ceac:	6963      	ldr	r3, [r4, #20]
 801ceae:	2200      	movs	r2, #0
 801ceb0:	425b      	negs	r3, r3
 801ceb2:	61a3      	str	r3, [r4, #24]
 801ceb4:	60a2      	str	r2, [r4, #8]
 801ceb6:	b1f0      	cbz	r0, 801cef6 <__swsetup_r+0x6e>
 801ceb8:	2000      	movs	r0, #0
 801ceba:	bd38      	pop	{r3, r4, r5, pc}
 801cebc:	06d9      	lsls	r1, r3, #27
 801cebe:	d53b      	bpl.n	801cf38 <__swsetup_r+0xb0>
 801cec0:	0758      	lsls	r0, r3, #29
 801cec2:	d425      	bmi.n	801cf10 <__swsetup_r+0x88>
 801cec4:	6920      	ldr	r0, [r4, #16]
 801cec6:	f042 0308 	orr.w	r3, r2, #8
 801ceca:	81a3      	strh	r3, [r4, #12]
 801cecc:	b29b      	uxth	r3, r3
 801cece:	2800      	cmp	r0, #0
 801ced0:	d1e9      	bne.n	801cea6 <__swsetup_r+0x1e>
 801ced2:	f403 7220 	and.w	r2, r3, #640	; 0x280
 801ced6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801ceda:	d0e4      	beq.n	801cea6 <__swsetup_r+0x1e>
 801cedc:	4628      	mov	r0, r5
 801cede:	4621      	mov	r1, r4
 801cee0:	f001 fcb2 	bl	801e848 <__smakebuf_r>
 801cee4:	89a3      	ldrh	r3, [r4, #12]
 801cee6:	6920      	ldr	r0, [r4, #16]
 801cee8:	e7dd      	b.n	801cea6 <__swsetup_r+0x1e>
 801ceea:	0799      	lsls	r1, r3, #30
 801ceec:	bf58      	it	pl
 801ceee:	6962      	ldrpl	r2, [r4, #20]
 801cef0:	60a2      	str	r2, [r4, #8]
 801cef2:	2800      	cmp	r0, #0
 801cef4:	d1e0      	bne.n	801ceb8 <__swsetup_r+0x30>
 801cef6:	89a3      	ldrh	r3, [r4, #12]
 801cef8:	061a      	lsls	r2, r3, #24
 801cefa:	d5de      	bpl.n	801ceba <__swsetup_r+0x32>
 801cefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf00:	81a3      	strh	r3, [r4, #12]
 801cf02:	f04f 30ff 	mov.w	r0, #4294967295
 801cf06:	bd38      	pop	{r3, r4, r5, pc}
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f001 f947 	bl	801e19c <__sinit>
 801cf0e:	e7c4      	b.n	801ce9a <__swsetup_r+0x12>
 801cf10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801cf12:	b149      	cbz	r1, 801cf28 <__swsetup_r+0xa0>
 801cf14:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801cf18:	4299      	cmp	r1, r3
 801cf1a:	d003      	beq.n	801cf24 <__swsetup_r+0x9c>
 801cf1c:	4628      	mov	r0, r5
 801cf1e:	f001 f9f7 	bl	801e310 <_free_r>
 801cf22:	89a2      	ldrh	r2, [r4, #12]
 801cf24:	2300      	movs	r3, #0
 801cf26:	6323      	str	r3, [r4, #48]	; 0x30
 801cf28:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	6920      	ldr	r0, [r4, #16]
 801cf30:	6063      	str	r3, [r4, #4]
 801cf32:	b292      	uxth	r2, r2
 801cf34:	6020      	str	r0, [r4, #0]
 801cf36:	e7c6      	b.n	801cec6 <__swsetup_r+0x3e>
 801cf38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cf3c:	2309      	movs	r3, #9
 801cf3e:	602b      	str	r3, [r5, #0]
 801cf40:	f04f 30ff 	mov.w	r0, #4294967295
 801cf44:	81a2      	strh	r2, [r4, #12]
 801cf46:	bd38      	pop	{r3, r4, r5, pc}
 801cf48:	20000798 	.word	0x20000798

0801cf4c <abort>:
 801cf4c:	b508      	push	{r3, lr}
 801cf4e:	2006      	movs	r0, #6
 801cf50:	f002 fcee 	bl	801f930 <raise>
 801cf54:	2001      	movs	r0, #1
 801cf56:	f7e5 faef 	bl	8002538 <_exit>
 801cf5a:	bf00      	nop

0801cf5c <quorem>:
 801cf5c:	6902      	ldr	r2, [r0, #16]
 801cf5e:	690b      	ldr	r3, [r1, #16]
 801cf60:	4293      	cmp	r3, r2
 801cf62:	f300 808f 	bgt.w	801d084 <quorem+0x128>
 801cf66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf6a:	f103 38ff 	add.w	r8, r3, #4294967295
 801cf6e:	f101 0714 	add.w	r7, r1, #20
 801cf72:	f100 0b14 	add.w	fp, r0, #20
 801cf76:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801cf7a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 801cf7e:	ea4f 0488 	mov.w	r4, r8, lsl #2
 801cf82:	b083      	sub	sp, #12
 801cf84:	3201      	adds	r2, #1
 801cf86:	fbb3 f9f2 	udiv	r9, r3, r2
 801cf8a:	eb0b 0304 	add.w	r3, fp, r4
 801cf8e:	9400      	str	r4, [sp, #0]
 801cf90:	eb07 0a04 	add.w	sl, r7, r4
 801cf94:	9301      	str	r3, [sp, #4]
 801cf96:	f1b9 0f00 	cmp.w	r9, #0
 801cf9a:	d03b      	beq.n	801d014 <quorem+0xb8>
 801cf9c:	2600      	movs	r6, #0
 801cf9e:	4632      	mov	r2, r6
 801cfa0:	46bc      	mov	ip, r7
 801cfa2:	46de      	mov	lr, fp
 801cfa4:	4634      	mov	r4, r6
 801cfa6:	f85c 6b04 	ldr.w	r6, [ip], #4
 801cfaa:	f8de 5000 	ldr.w	r5, [lr]
 801cfae:	b2b3      	uxth	r3, r6
 801cfb0:	0c36      	lsrs	r6, r6, #16
 801cfb2:	fb03 4409 	mla	r4, r3, r9, r4
 801cfb6:	fb06 f609 	mul.w	r6, r6, r9
 801cfba:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 801cfbe:	b2a3      	uxth	r3, r4
 801cfc0:	1ad3      	subs	r3, r2, r3
 801cfc2:	b2b4      	uxth	r4, r6
 801cfc4:	fa13 f385 	uxtah	r3, r3, r5
 801cfc8:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 801cfcc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 801cfd0:	b29b      	uxth	r3, r3
 801cfd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801cfd6:	45e2      	cmp	sl, ip
 801cfd8:	ea4f 4224 	mov.w	r2, r4, asr #16
 801cfdc:	f84e 3b04 	str.w	r3, [lr], #4
 801cfe0:	ea4f 4416 	mov.w	r4, r6, lsr #16
 801cfe4:	d2df      	bcs.n	801cfa6 <quorem+0x4a>
 801cfe6:	9b00      	ldr	r3, [sp, #0]
 801cfe8:	f85b 3003 	ldr.w	r3, [fp, r3]
 801cfec:	b993      	cbnz	r3, 801d014 <quorem+0xb8>
 801cfee:	9c01      	ldr	r4, [sp, #4]
 801cff0:	1f23      	subs	r3, r4, #4
 801cff2:	459b      	cmp	fp, r3
 801cff4:	d20c      	bcs.n	801d010 <quorem+0xb4>
 801cff6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801cffa:	b94b      	cbnz	r3, 801d010 <quorem+0xb4>
 801cffc:	f1a4 0308 	sub.w	r3, r4, #8
 801d000:	e002      	b.n	801d008 <quorem+0xac>
 801d002:	681a      	ldr	r2, [r3, #0]
 801d004:	3b04      	subs	r3, #4
 801d006:	b91a      	cbnz	r2, 801d010 <quorem+0xb4>
 801d008:	459b      	cmp	fp, r3
 801d00a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d00e:	d3f8      	bcc.n	801d002 <quorem+0xa6>
 801d010:	f8c0 8010 	str.w	r8, [r0, #16]
 801d014:	4604      	mov	r4, r0
 801d016:	f002 f96d 	bl	801f2f4 <__mcmp>
 801d01a:	2800      	cmp	r0, #0
 801d01c:	db2e      	blt.n	801d07c <quorem+0x120>
 801d01e:	f109 0901 	add.w	r9, r9, #1
 801d022:	465d      	mov	r5, fp
 801d024:	2300      	movs	r3, #0
 801d026:	f857 1b04 	ldr.w	r1, [r7], #4
 801d02a:	6828      	ldr	r0, [r5, #0]
 801d02c:	b28a      	uxth	r2, r1
 801d02e:	1a9a      	subs	r2, r3, r2
 801d030:	0c09      	lsrs	r1, r1, #16
 801d032:	fa12 f280 	uxtah	r2, r2, r0
 801d036:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 801d03a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 801d03e:	b291      	uxth	r1, r2
 801d040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801d044:	45ba      	cmp	sl, r7
 801d046:	f845 1b04 	str.w	r1, [r5], #4
 801d04a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d04e:	d2ea      	bcs.n	801d026 <quorem+0xca>
 801d050:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 801d054:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 801d058:	b982      	cbnz	r2, 801d07c <quorem+0x120>
 801d05a:	1f1a      	subs	r2, r3, #4
 801d05c:	4593      	cmp	fp, r2
 801d05e:	d20b      	bcs.n	801d078 <quorem+0x11c>
 801d060:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801d064:	b942      	cbnz	r2, 801d078 <quorem+0x11c>
 801d066:	3b08      	subs	r3, #8
 801d068:	e002      	b.n	801d070 <quorem+0x114>
 801d06a:	681a      	ldr	r2, [r3, #0]
 801d06c:	3b04      	subs	r3, #4
 801d06e:	b91a      	cbnz	r2, 801d078 <quorem+0x11c>
 801d070:	459b      	cmp	fp, r3
 801d072:	f108 38ff 	add.w	r8, r8, #4294967295
 801d076:	d3f8      	bcc.n	801d06a <quorem+0x10e>
 801d078:	f8c4 8010 	str.w	r8, [r4, #16]
 801d07c:	4648      	mov	r0, r9
 801d07e:	b003      	add	sp, #12
 801d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d084:	2000      	movs	r0, #0
 801d086:	4770      	bx	lr

0801d088 <_dtoa_r>:
 801d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d08c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801d08e:	b097      	sub	sp, #92	; 0x5c
 801d090:	4604      	mov	r4, r0
 801d092:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801d094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d098:	b141      	cbz	r1, 801d0ac <_dtoa_r+0x24>
 801d09a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d09c:	604a      	str	r2, [r1, #4]
 801d09e:	2301      	movs	r3, #1
 801d0a0:	4093      	lsls	r3, r2
 801d0a2:	608b      	str	r3, [r1, #8]
 801d0a4:	f001 ff42 	bl	801ef2c <_Bfree>
 801d0a8:	2300      	movs	r3, #0
 801d0aa:	6423      	str	r3, [r4, #64]	; 0x40
 801d0ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	4699      	mov	r9, r3
 801d0b4:	db36      	blt.n	801d124 <_dtoa_r+0x9c>
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	602b      	str	r3, [r5, #0]
 801d0ba:	4ba5      	ldr	r3, [pc, #660]	; (801d350 <_dtoa_r+0x2c8>)
 801d0bc:	461a      	mov	r2, r3
 801d0be:	ea09 0303 	and.w	r3, r9, r3
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	d017      	beq.n	801d0f6 <_dtoa_r+0x6e>
 801d0c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d0ca:	2200      	movs	r2, #0
 801d0cc:	4630      	mov	r0, r6
 801d0ce:	4639      	mov	r1, r7
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	f7e3 fc79 	bl	80009c8 <__aeabi_dcmpeq>
 801d0d6:	4680      	mov	r8, r0
 801d0d8:	2800      	cmp	r0, #0
 801d0da:	d02b      	beq.n	801d134 <_dtoa_r+0xac>
 801d0dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d0de:	2301      	movs	r3, #1
 801d0e0:	6013      	str	r3, [r2, #0]
 801d0e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	f000 80cb 	beq.w	801d280 <_dtoa_r+0x1f8>
 801d0ea:	489a      	ldr	r0, [pc, #616]	; (801d354 <_dtoa_r+0x2cc>)
 801d0ec:	6018      	str	r0, [r3, #0]
 801d0ee:	3801      	subs	r0, #1
 801d0f0:	b017      	add	sp, #92	; 0x5c
 801d0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d0f8:	f242 730f 	movw	r3, #9999	; 0x270f
 801d0fc:	6013      	str	r3, [r2, #0]
 801d0fe:	9b02      	ldr	r3, [sp, #8]
 801d100:	2b00      	cmp	r3, #0
 801d102:	f000 80a6 	beq.w	801d252 <_dtoa_r+0x1ca>
 801d106:	4894      	ldr	r0, [pc, #592]	; (801d358 <_dtoa_r+0x2d0>)
 801d108:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d0f0      	beq.n	801d0f0 <_dtoa_r+0x68>
 801d10e:	78c3      	ldrb	r3, [r0, #3]
 801d110:	2b00      	cmp	r3, #0
 801d112:	f000 80b7 	beq.w	801d284 <_dtoa_r+0x1fc>
 801d116:	f100 0308 	add.w	r3, r0, #8
 801d11a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d11c:	6013      	str	r3, [r2, #0]
 801d11e:	b017      	add	sp, #92	; 0x5c
 801d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d124:	9a03      	ldr	r2, [sp, #12]
 801d126:	2301      	movs	r3, #1
 801d128:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 801d12c:	602b      	str	r3, [r5, #0]
 801d12e:	f8cd 900c 	str.w	r9, [sp, #12]
 801d132:	e7c2      	b.n	801d0ba <_dtoa_r+0x32>
 801d134:	aa15      	add	r2, sp, #84	; 0x54
 801d136:	ab14      	add	r3, sp, #80	; 0x50
 801d138:	e88d 000c 	stmia.w	sp, {r2, r3}
 801d13c:	4620      	mov	r0, r4
 801d13e:	4632      	mov	r2, r6
 801d140:	463b      	mov	r3, r7
 801d142:	f002 f965 	bl	801f410 <__d2b>
 801d146:	ea5f 5519 	movs.w	r5, r9, lsr #20
 801d14a:	4683      	mov	fp, r0
 801d14c:	f040 808a 	bne.w	801d264 <_dtoa_r+0x1dc>
 801d150:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801d154:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d156:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 801d15a:	4445      	add	r5, r8
 801d15c:	429d      	cmp	r5, r3
 801d15e:	f2c0 8297 	blt.w	801d690 <_dtoa_r+0x608>
 801d162:	4a7e      	ldr	r2, [pc, #504]	; (801d35c <_dtoa_r+0x2d4>)
 801d164:	1b52      	subs	r2, r2, r5
 801d166:	fa09 f902 	lsl.w	r9, r9, r2
 801d16a:	9a02      	ldr	r2, [sp, #8]
 801d16c:	f205 4312 	addw	r3, r5, #1042	; 0x412
 801d170:	fa22 f003 	lsr.w	r0, r2, r3
 801d174:	ea49 0000 	orr.w	r0, r9, r0
 801d178:	f7e3 f948 	bl	800040c <__aeabi_ui2d>
 801d17c:	2301      	movs	r3, #1
 801d17e:	3d01      	subs	r5, #1
 801d180:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801d184:	930d      	str	r3, [sp, #52]	; 0x34
 801d186:	2200      	movs	r2, #0
 801d188:	4b75      	ldr	r3, [pc, #468]	; (801d360 <_dtoa_r+0x2d8>)
 801d18a:	f7e3 f801 	bl	8000190 <__aeabi_dsub>
 801d18e:	a36a      	add	r3, pc, #424	; (adr r3, 801d338 <_dtoa_r+0x2b0>)
 801d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d194:	f7e3 f9b0 	bl	80004f8 <__aeabi_dmul>
 801d198:	a369      	add	r3, pc, #420	; (adr r3, 801d340 <_dtoa_r+0x2b8>)
 801d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d19e:	f7e2 fff9 	bl	8000194 <__adddf3>
 801d1a2:	4606      	mov	r6, r0
 801d1a4:	4628      	mov	r0, r5
 801d1a6:	460f      	mov	r7, r1
 801d1a8:	f7e3 f940 	bl	800042c <__aeabi_i2d>
 801d1ac:	a366      	add	r3, pc, #408	; (adr r3, 801d348 <_dtoa_r+0x2c0>)
 801d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1b2:	f7e3 f9a1 	bl	80004f8 <__aeabi_dmul>
 801d1b6:	4602      	mov	r2, r0
 801d1b8:	460b      	mov	r3, r1
 801d1ba:	4630      	mov	r0, r6
 801d1bc:	4639      	mov	r1, r7
 801d1be:	f7e2 ffe9 	bl	8000194 <__adddf3>
 801d1c2:	4606      	mov	r6, r0
 801d1c4:	460f      	mov	r7, r1
 801d1c6:	f7e3 ffbf 	bl	8001148 <__aeabi_d2iz>
 801d1ca:	4639      	mov	r1, r7
 801d1cc:	9004      	str	r0, [sp, #16]
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	4630      	mov	r0, r6
 801d1d2:	2300      	movs	r3, #0
 801d1d4:	f7e3 fc02 	bl	80009dc <__aeabi_dcmplt>
 801d1d8:	2800      	cmp	r0, #0
 801d1da:	f040 81a6 	bne.w	801d52a <_dtoa_r+0x4a2>
 801d1de:	9b04      	ldr	r3, [sp, #16]
 801d1e0:	2b16      	cmp	r3, #22
 801d1e2:	f200 819f 	bhi.w	801d524 <_dtoa_r+0x49c>
 801d1e6:	9a04      	ldr	r2, [sp, #16]
 801d1e8:	4b5e      	ldr	r3, [pc, #376]	; (801d364 <_dtoa_r+0x2dc>)
 801d1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d1ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d1f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d1f6:	f7e3 fc0f 	bl	8000a18 <__aeabi_dcmpgt>
 801d1fa:	2800      	cmp	r0, #0
 801d1fc:	f000 824e 	beq.w	801d69c <_dtoa_r+0x614>
 801d200:	9b04      	ldr	r3, [sp, #16]
 801d202:	3b01      	subs	r3, #1
 801d204:	9304      	str	r3, [sp, #16]
 801d206:	2300      	movs	r3, #0
 801d208:	930b      	str	r3, [sp, #44]	; 0x2c
 801d20a:	ebc5 0508 	rsb	r5, r5, r8
 801d20e:	f1b5 0a01 	subs.w	sl, r5, #1
 801d212:	f100 81a1 	bmi.w	801d558 <_dtoa_r+0x4d0>
 801d216:	2300      	movs	r3, #0
 801d218:	9305      	str	r3, [sp, #20]
 801d21a:	9b04      	ldr	r3, [sp, #16]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	f2c0 8192 	blt.w	801d546 <_dtoa_r+0x4be>
 801d222:	449a      	add	sl, r3
 801d224:	930a      	str	r3, [sp, #40]	; 0x28
 801d226:	2300      	movs	r3, #0
 801d228:	9308      	str	r3, [sp, #32]
 801d22a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d22c:	2b09      	cmp	r3, #9
 801d22e:	d82b      	bhi.n	801d288 <_dtoa_r+0x200>
 801d230:	2b05      	cmp	r3, #5
 801d232:	f340 8670 	ble.w	801df16 <_dtoa_r+0xe8e>
 801d236:	3b04      	subs	r3, #4
 801d238:	9320      	str	r3, [sp, #128]	; 0x80
 801d23a:	2500      	movs	r5, #0
 801d23c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d23e:	3b02      	subs	r3, #2
 801d240:	2b03      	cmp	r3, #3
 801d242:	f200 864e 	bhi.w	801dee2 <_dtoa_r+0xe5a>
 801d246:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d24a:	03cc      	.short	0x03cc
 801d24c:	02b203be 	.word	0x02b203be
 801d250:	0663      	.short	0x0663
 801d252:	4b41      	ldr	r3, [pc, #260]	; (801d358 <_dtoa_r+0x2d0>)
 801d254:	4a44      	ldr	r2, [pc, #272]	; (801d368 <_dtoa_r+0x2e0>)
 801d256:	f3c9 0013 	ubfx	r0, r9, #0, #20
 801d25a:	2800      	cmp	r0, #0
 801d25c:	bf14      	ite	ne
 801d25e:	4618      	movne	r0, r3
 801d260:	4610      	moveq	r0, r2
 801d262:	e751      	b.n	801d108 <_dtoa_r+0x80>
 801d264:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d268:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801d26c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801d270:	4630      	mov	r0, r6
 801d272:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d276:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801d27a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801d27e:	e782      	b.n	801d186 <_dtoa_r+0xfe>
 801d280:	483a      	ldr	r0, [pc, #232]	; (801d36c <_dtoa_r+0x2e4>)
 801d282:	e735      	b.n	801d0f0 <_dtoa_r+0x68>
 801d284:	1cc3      	adds	r3, r0, #3
 801d286:	e748      	b.n	801d11a <_dtoa_r+0x92>
 801d288:	2100      	movs	r1, #0
 801d28a:	6461      	str	r1, [r4, #68]	; 0x44
 801d28c:	4620      	mov	r0, r4
 801d28e:	9120      	str	r1, [sp, #128]	; 0x80
 801d290:	f001 fe26 	bl	801eee0 <_Balloc>
 801d294:	f04f 33ff 	mov.w	r3, #4294967295
 801d298:	9306      	str	r3, [sp, #24]
 801d29a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d29c:	930c      	str	r3, [sp, #48]	; 0x30
 801d29e:	2301      	movs	r3, #1
 801d2a0:	9007      	str	r0, [sp, #28]
 801d2a2:	9221      	str	r2, [sp, #132]	; 0x84
 801d2a4:	6420      	str	r0, [r4, #64]	; 0x40
 801d2a6:	9309      	str	r3, [sp, #36]	; 0x24
 801d2a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	f2c0 80d2 	blt.w	801d454 <_dtoa_r+0x3cc>
 801d2b0:	9a04      	ldr	r2, [sp, #16]
 801d2b2:	2a0e      	cmp	r2, #14
 801d2b4:	f300 80ce 	bgt.w	801d454 <_dtoa_r+0x3cc>
 801d2b8:	4b2a      	ldr	r3, [pc, #168]	; (801d364 <_dtoa_r+0x2dc>)
 801d2ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d2be:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	f2c0 838f 	blt.w	801d9e8 <_dtoa_r+0x960>
 801d2ca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d2ce:	4642      	mov	r2, r8
 801d2d0:	464b      	mov	r3, r9
 801d2d2:	4630      	mov	r0, r6
 801d2d4:	4639      	mov	r1, r7
 801d2d6:	f7e3 fa39 	bl	800074c <__aeabi_ddiv>
 801d2da:	f7e3 ff35 	bl	8001148 <__aeabi_d2iz>
 801d2de:	4682      	mov	sl, r0
 801d2e0:	f7e3 f8a4 	bl	800042c <__aeabi_i2d>
 801d2e4:	4642      	mov	r2, r8
 801d2e6:	464b      	mov	r3, r9
 801d2e8:	f7e3 f906 	bl	80004f8 <__aeabi_dmul>
 801d2ec:	460b      	mov	r3, r1
 801d2ee:	4602      	mov	r2, r0
 801d2f0:	4639      	mov	r1, r7
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	f7e2 ff4c 	bl	8000190 <__aeabi_dsub>
 801d2f8:	9d07      	ldr	r5, [sp, #28]
 801d2fa:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 801d2fe:	702b      	strb	r3, [r5, #0]
 801d300:	9b06      	ldr	r3, [sp, #24]
 801d302:	2b01      	cmp	r3, #1
 801d304:	4606      	mov	r6, r0
 801d306:	460f      	mov	r7, r1
 801d308:	f105 0501 	add.w	r5, r5, #1
 801d30c:	d062      	beq.n	801d3d4 <_dtoa_r+0x34c>
 801d30e:	2200      	movs	r2, #0
 801d310:	4b17      	ldr	r3, [pc, #92]	; (801d370 <_dtoa_r+0x2e8>)
 801d312:	f7e3 f8f1 	bl	80004f8 <__aeabi_dmul>
 801d316:	2200      	movs	r2, #0
 801d318:	2300      	movs	r3, #0
 801d31a:	4606      	mov	r6, r0
 801d31c:	460f      	mov	r7, r1
 801d31e:	f7e3 fb53 	bl	80009c8 <__aeabi_dcmpeq>
 801d322:	2800      	cmp	r0, #0
 801d324:	f040 8083 	bne.w	801d42e <_dtoa_r+0x3a6>
 801d328:	f8cd b008 	str.w	fp, [sp, #8]
 801d32c:	9405      	str	r4, [sp, #20]
 801d32e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d332:	9c06      	ldr	r4, [sp, #24]
 801d334:	e029      	b.n	801d38a <_dtoa_r+0x302>
 801d336:	bf00      	nop
 801d338:	636f4361 	.word	0x636f4361
 801d33c:	3fd287a7 	.word	0x3fd287a7
 801d340:	8b60c8b3 	.word	0x8b60c8b3
 801d344:	3fc68a28 	.word	0x3fc68a28
 801d348:	509f79fb 	.word	0x509f79fb
 801d34c:	3fd34413 	.word	0x3fd34413
 801d350:	7ff00000 	.word	0x7ff00000
 801d354:	08035649 	.word	0x08035649
 801d358:	080356a8 	.word	0x080356a8
 801d35c:	fffffc0e 	.word	0xfffffc0e
 801d360:	3ff80000 	.word	0x3ff80000
 801d364:	080356b8 	.word	0x080356b8
 801d368:	0803569c 	.word	0x0803569c
 801d36c:	08035648 	.word	0x08035648
 801d370:	40240000 	.word	0x40240000
 801d374:	f7e3 f8c0 	bl	80004f8 <__aeabi_dmul>
 801d378:	2200      	movs	r2, #0
 801d37a:	2300      	movs	r3, #0
 801d37c:	4606      	mov	r6, r0
 801d37e:	460f      	mov	r7, r1
 801d380:	f7e3 fb22 	bl	80009c8 <__aeabi_dcmpeq>
 801d384:	2800      	cmp	r0, #0
 801d386:	f040 83de 	bne.w	801db46 <_dtoa_r+0xabe>
 801d38a:	4642      	mov	r2, r8
 801d38c:	464b      	mov	r3, r9
 801d38e:	4630      	mov	r0, r6
 801d390:	4639      	mov	r1, r7
 801d392:	f7e3 f9db 	bl	800074c <__aeabi_ddiv>
 801d396:	f7e3 fed7 	bl	8001148 <__aeabi_d2iz>
 801d39a:	4682      	mov	sl, r0
 801d39c:	f7e3 f846 	bl	800042c <__aeabi_i2d>
 801d3a0:	4642      	mov	r2, r8
 801d3a2:	464b      	mov	r3, r9
 801d3a4:	f7e3 f8a8 	bl	80004f8 <__aeabi_dmul>
 801d3a8:	4602      	mov	r2, r0
 801d3aa:	460b      	mov	r3, r1
 801d3ac:	4630      	mov	r0, r6
 801d3ae:	4639      	mov	r1, r7
 801d3b0:	f7e2 feee 	bl	8000190 <__aeabi_dsub>
 801d3b4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 801d3b8:	f805 eb01 	strb.w	lr, [r5], #1
 801d3bc:	ebcb 0e05 	rsb	lr, fp, r5
 801d3c0:	4574      	cmp	r4, lr
 801d3c2:	4606      	mov	r6, r0
 801d3c4:	460f      	mov	r7, r1
 801d3c6:	f04f 0200 	mov.w	r2, #0
 801d3ca:	4bb5      	ldr	r3, [pc, #724]	; (801d6a0 <_dtoa_r+0x618>)
 801d3cc:	d1d2      	bne.n	801d374 <_dtoa_r+0x2ec>
 801d3ce:	f8dd b008 	ldr.w	fp, [sp, #8]
 801d3d2:	9c05      	ldr	r4, [sp, #20]
 801d3d4:	4632      	mov	r2, r6
 801d3d6:	463b      	mov	r3, r7
 801d3d8:	4630      	mov	r0, r6
 801d3da:	4639      	mov	r1, r7
 801d3dc:	f7e2 feda 	bl	8000194 <__adddf3>
 801d3e0:	4606      	mov	r6, r0
 801d3e2:	460f      	mov	r7, r1
 801d3e4:	4640      	mov	r0, r8
 801d3e6:	4649      	mov	r1, r9
 801d3e8:	4632      	mov	r2, r6
 801d3ea:	463b      	mov	r3, r7
 801d3ec:	f7e3 faf6 	bl	80009dc <__aeabi_dcmplt>
 801d3f0:	b948      	cbnz	r0, 801d406 <_dtoa_r+0x37e>
 801d3f2:	4640      	mov	r0, r8
 801d3f4:	4649      	mov	r1, r9
 801d3f6:	4632      	mov	r2, r6
 801d3f8:	463b      	mov	r3, r7
 801d3fa:	f7e3 fae5 	bl	80009c8 <__aeabi_dcmpeq>
 801d3fe:	b1b0      	cbz	r0, 801d42e <_dtoa_r+0x3a6>
 801d400:	f01a 0f01 	tst.w	sl, #1
 801d404:	d013      	beq.n	801d42e <_dtoa_r+0x3a6>
 801d406:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 801d40a:	9907      	ldr	r1, [sp, #28]
 801d40c:	1e6b      	subs	r3, r5, #1
 801d40e:	e004      	b.n	801d41a <_dtoa_r+0x392>
 801d410:	428b      	cmp	r3, r1
 801d412:	f000 8440 	beq.w	801dc96 <_dtoa_r+0xc0e>
 801d416:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 801d41a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801d41e:	f103 0501 	add.w	r5, r3, #1
 801d422:	461a      	mov	r2, r3
 801d424:	d0f4      	beq.n	801d410 <_dtoa_r+0x388>
 801d426:	f108 0301 	add.w	r3, r8, #1
 801d42a:	b2db      	uxtb	r3, r3
 801d42c:	7013      	strb	r3, [r2, #0]
 801d42e:	4620      	mov	r0, r4
 801d430:	4659      	mov	r1, fp
 801d432:	f001 fd7b 	bl	801ef2c <_Bfree>
 801d436:	2200      	movs	r2, #0
 801d438:	9b04      	ldr	r3, [sp, #16]
 801d43a:	702a      	strb	r2, [r5, #0]
 801d43c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d43e:	3301      	adds	r3, #1
 801d440:	6013      	str	r3, [r2, #0]
 801d442:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d444:	2b00      	cmp	r3, #0
 801d446:	f000 8345 	beq.w	801dad4 <_dtoa_r+0xa4c>
 801d44a:	9807      	ldr	r0, [sp, #28]
 801d44c:	601d      	str	r5, [r3, #0]
 801d44e:	b017      	add	sp, #92	; 0x5c
 801d450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d456:	2a00      	cmp	r2, #0
 801d458:	f000 8084 	beq.w	801d564 <_dtoa_r+0x4dc>
 801d45c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d45e:	2a01      	cmp	r2, #1
 801d460:	f340 8304 	ble.w	801da6c <_dtoa_r+0x9e4>
 801d464:	9b06      	ldr	r3, [sp, #24]
 801d466:	1e5f      	subs	r7, r3, #1
 801d468:	9b08      	ldr	r3, [sp, #32]
 801d46a:	42bb      	cmp	r3, r7
 801d46c:	f2c0 83a9 	blt.w	801dbc2 <_dtoa_r+0xb3a>
 801d470:	1bdf      	subs	r7, r3, r7
 801d472:	9b06      	ldr	r3, [sp, #24]
 801d474:	2b00      	cmp	r3, #0
 801d476:	f2c0 849c 	blt.w	801ddb2 <_dtoa_r+0xd2a>
 801d47a:	9d05      	ldr	r5, [sp, #20]
 801d47c:	9b06      	ldr	r3, [sp, #24]
 801d47e:	9a05      	ldr	r2, [sp, #20]
 801d480:	4620      	mov	r0, r4
 801d482:	441a      	add	r2, r3
 801d484:	2101      	movs	r1, #1
 801d486:	9205      	str	r2, [sp, #20]
 801d488:	449a      	add	sl, r3
 801d48a:	f001 fde9 	bl	801f060 <__i2b>
 801d48e:	4606      	mov	r6, r0
 801d490:	b165      	cbz	r5, 801d4ac <_dtoa_r+0x424>
 801d492:	f1ba 0f00 	cmp.w	sl, #0
 801d496:	dd09      	ble.n	801d4ac <_dtoa_r+0x424>
 801d498:	45aa      	cmp	sl, r5
 801d49a:	9a05      	ldr	r2, [sp, #20]
 801d49c:	4653      	mov	r3, sl
 801d49e:	bfa8      	it	ge
 801d4a0:	462b      	movge	r3, r5
 801d4a2:	1ad2      	subs	r2, r2, r3
 801d4a4:	9205      	str	r2, [sp, #20]
 801d4a6:	1aed      	subs	r5, r5, r3
 801d4a8:	ebc3 0a0a 	rsb	sl, r3, sl
 801d4ac:	9b08      	ldr	r3, [sp, #32]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	dd1a      	ble.n	801d4e8 <_dtoa_r+0x460>
 801d4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	f000 837d 	beq.w	801dbb4 <_dtoa_r+0xb2c>
 801d4ba:	2f00      	cmp	r7, #0
 801d4bc:	dd10      	ble.n	801d4e0 <_dtoa_r+0x458>
 801d4be:	4631      	mov	r1, r6
 801d4c0:	463a      	mov	r2, r7
 801d4c2:	4620      	mov	r0, r4
 801d4c4:	f001 fe70 	bl	801f1a8 <__pow5mult>
 801d4c8:	4606      	mov	r6, r0
 801d4ca:	465a      	mov	r2, fp
 801d4cc:	4631      	mov	r1, r6
 801d4ce:	4620      	mov	r0, r4
 801d4d0:	f001 fdd0 	bl	801f074 <__multiply>
 801d4d4:	4659      	mov	r1, fp
 801d4d6:	4680      	mov	r8, r0
 801d4d8:	4620      	mov	r0, r4
 801d4da:	f001 fd27 	bl	801ef2c <_Bfree>
 801d4de:	46c3      	mov	fp, r8
 801d4e0:	9b08      	ldr	r3, [sp, #32]
 801d4e2:	1bda      	subs	r2, r3, r7
 801d4e4:	f040 82a2 	bne.w	801da2c <_dtoa_r+0x9a4>
 801d4e8:	4620      	mov	r0, r4
 801d4ea:	2101      	movs	r1, #1
 801d4ec:	f001 fdb8 	bl	801f060 <__i2b>
 801d4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	4680      	mov	r8, r0
 801d4f6:	dd39      	ble.n	801d56c <_dtoa_r+0x4e4>
 801d4f8:	4601      	mov	r1, r0
 801d4fa:	461a      	mov	r2, r3
 801d4fc:	4620      	mov	r0, r4
 801d4fe:	f001 fe53 	bl	801f1a8 <__pow5mult>
 801d502:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d504:	2b01      	cmp	r3, #1
 801d506:	4680      	mov	r8, r0
 801d508:	f340 8296 	ble.w	801da38 <_dtoa_r+0x9b0>
 801d50c:	f04f 0900 	mov.w	r9, #0
 801d510:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d514:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801d518:	6918      	ldr	r0, [r3, #16]
 801d51a:	f001 fd53 	bl	801efc4 <__hi0bits>
 801d51e:	f1c0 0020 	rsb	r0, r0, #32
 801d522:	e02d      	b.n	801d580 <_dtoa_r+0x4f8>
 801d524:	2301      	movs	r3, #1
 801d526:	930b      	str	r3, [sp, #44]	; 0x2c
 801d528:	e66f      	b.n	801d20a <_dtoa_r+0x182>
 801d52a:	9804      	ldr	r0, [sp, #16]
 801d52c:	f7e2 ff7e 	bl	800042c <__aeabi_i2d>
 801d530:	4632      	mov	r2, r6
 801d532:	463b      	mov	r3, r7
 801d534:	f7e3 fa48 	bl	80009c8 <__aeabi_dcmpeq>
 801d538:	2800      	cmp	r0, #0
 801d53a:	f47f ae50 	bne.w	801d1de <_dtoa_r+0x156>
 801d53e:	9b04      	ldr	r3, [sp, #16]
 801d540:	3b01      	subs	r3, #1
 801d542:	9304      	str	r3, [sp, #16]
 801d544:	e64b      	b.n	801d1de <_dtoa_r+0x156>
 801d546:	9a05      	ldr	r2, [sp, #20]
 801d548:	9b04      	ldr	r3, [sp, #16]
 801d54a:	1ad2      	subs	r2, r2, r3
 801d54c:	425b      	negs	r3, r3
 801d54e:	9308      	str	r3, [sp, #32]
 801d550:	2300      	movs	r3, #0
 801d552:	9205      	str	r2, [sp, #20]
 801d554:	930a      	str	r3, [sp, #40]	; 0x28
 801d556:	e668      	b.n	801d22a <_dtoa_r+0x1a2>
 801d558:	f1ca 0300 	rsb	r3, sl, #0
 801d55c:	9305      	str	r3, [sp, #20]
 801d55e:	f04f 0a00 	mov.w	sl, #0
 801d562:	e65a      	b.n	801d21a <_dtoa_r+0x192>
 801d564:	9f08      	ldr	r7, [sp, #32]
 801d566:	9d05      	ldr	r5, [sp, #20]
 801d568:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801d56a:	e791      	b.n	801d490 <_dtoa_r+0x408>
 801d56c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d56e:	2b01      	cmp	r3, #1
 801d570:	f340 82b3 	ble.w	801dada <_dtoa_r+0xa52>
 801d574:	f04f 0900 	mov.w	r9, #0
 801d578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d1c8      	bne.n	801d510 <_dtoa_r+0x488>
 801d57e:	2001      	movs	r0, #1
 801d580:	4450      	add	r0, sl
 801d582:	f010 001f 	ands.w	r0, r0, #31
 801d586:	f000 8081 	beq.w	801d68c <_dtoa_r+0x604>
 801d58a:	f1c0 0320 	rsb	r3, r0, #32
 801d58e:	2b04      	cmp	r3, #4
 801d590:	f340 84b8 	ble.w	801df04 <_dtoa_r+0xe7c>
 801d594:	f1c0 001c 	rsb	r0, r0, #28
 801d598:	9b05      	ldr	r3, [sp, #20]
 801d59a:	4403      	add	r3, r0
 801d59c:	9305      	str	r3, [sp, #20]
 801d59e:	4405      	add	r5, r0
 801d5a0:	4482      	add	sl, r0
 801d5a2:	9b05      	ldr	r3, [sp, #20]
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	dd05      	ble.n	801d5b4 <_dtoa_r+0x52c>
 801d5a8:	4659      	mov	r1, fp
 801d5aa:	461a      	mov	r2, r3
 801d5ac:	4620      	mov	r0, r4
 801d5ae:	f001 fe4b 	bl	801f248 <__lshift>
 801d5b2:	4683      	mov	fp, r0
 801d5b4:	f1ba 0f00 	cmp.w	sl, #0
 801d5b8:	dd05      	ble.n	801d5c6 <_dtoa_r+0x53e>
 801d5ba:	4641      	mov	r1, r8
 801d5bc:	4652      	mov	r2, sl
 801d5be:	4620      	mov	r0, r4
 801d5c0:	f001 fe42 	bl	801f248 <__lshift>
 801d5c4:	4680      	mov	r8, r0
 801d5c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	f040 8268 	bne.w	801da9e <_dtoa_r+0xa16>
 801d5ce:	9b06      	ldr	r3, [sp, #24]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	f340 8295 	ble.w	801db00 <_dtoa_r+0xa78>
 801d5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d171      	bne.n	801d6c0 <_dtoa_r+0x638>
 801d5dc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801d5e0:	9f06      	ldr	r7, [sp, #24]
 801d5e2:	464d      	mov	r5, r9
 801d5e4:	e002      	b.n	801d5ec <_dtoa_r+0x564>
 801d5e6:	f001 fcab 	bl	801ef40 <__multadd>
 801d5ea:	4683      	mov	fp, r0
 801d5ec:	4641      	mov	r1, r8
 801d5ee:	4658      	mov	r0, fp
 801d5f0:	f7ff fcb4 	bl	801cf5c <quorem>
 801d5f4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 801d5f8:	f805 cb01 	strb.w	ip, [r5], #1
 801d5fc:	ebc9 0305 	rsb	r3, r9, r5
 801d600:	42bb      	cmp	r3, r7
 801d602:	4620      	mov	r0, r4
 801d604:	4659      	mov	r1, fp
 801d606:	f04f 020a 	mov.w	r2, #10
 801d60a:	f04f 0300 	mov.w	r3, #0
 801d60e:	dbea      	blt.n	801d5e6 <_dtoa_r+0x55e>
 801d610:	9b07      	ldr	r3, [sp, #28]
 801d612:	9a06      	ldr	r2, [sp, #24]
 801d614:	2a01      	cmp	r2, #1
 801d616:	bfac      	ite	ge
 801d618:	189b      	addge	r3, r3, r2
 801d61a:	3301      	addlt	r3, #1
 801d61c:	461d      	mov	r5, r3
 801d61e:	f04f 0a00 	mov.w	sl, #0
 801d622:	4659      	mov	r1, fp
 801d624:	2201      	movs	r2, #1
 801d626:	4620      	mov	r0, r4
 801d628:	f8cd c008 	str.w	ip, [sp, #8]
 801d62c:	f001 fe0c 	bl	801f248 <__lshift>
 801d630:	4641      	mov	r1, r8
 801d632:	4683      	mov	fp, r0
 801d634:	f001 fe5e 	bl	801f2f4 <__mcmp>
 801d638:	2800      	cmp	r0, #0
 801d63a:	f8dd c008 	ldr.w	ip, [sp, #8]
 801d63e:	f340 82f6 	ble.w	801dc2e <_dtoa_r+0xba6>
 801d642:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d646:	9907      	ldr	r1, [sp, #28]
 801d648:	1e6b      	subs	r3, r5, #1
 801d64a:	e004      	b.n	801d656 <_dtoa_r+0x5ce>
 801d64c:	428b      	cmp	r3, r1
 801d64e:	f000 8273 	beq.w	801db38 <_dtoa_r+0xab0>
 801d652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d656:	2a39      	cmp	r2, #57	; 0x39
 801d658:	f103 0501 	add.w	r5, r3, #1
 801d65c:	d0f6      	beq.n	801d64c <_dtoa_r+0x5c4>
 801d65e:	3201      	adds	r2, #1
 801d660:	701a      	strb	r2, [r3, #0]
 801d662:	4641      	mov	r1, r8
 801d664:	4620      	mov	r0, r4
 801d666:	f001 fc61 	bl	801ef2c <_Bfree>
 801d66a:	2e00      	cmp	r6, #0
 801d66c:	f43f aedf 	beq.w	801d42e <_dtoa_r+0x3a6>
 801d670:	f1ba 0f00 	cmp.w	sl, #0
 801d674:	d005      	beq.n	801d682 <_dtoa_r+0x5fa>
 801d676:	45b2      	cmp	sl, r6
 801d678:	d003      	beq.n	801d682 <_dtoa_r+0x5fa>
 801d67a:	4651      	mov	r1, sl
 801d67c:	4620      	mov	r0, r4
 801d67e:	f001 fc55 	bl	801ef2c <_Bfree>
 801d682:	4631      	mov	r1, r6
 801d684:	4620      	mov	r0, r4
 801d686:	f001 fc51 	bl	801ef2c <_Bfree>
 801d68a:	e6d0      	b.n	801d42e <_dtoa_r+0x3a6>
 801d68c:	201c      	movs	r0, #28
 801d68e:	e783      	b.n	801d598 <_dtoa_r+0x510>
 801d690:	4b04      	ldr	r3, [pc, #16]	; (801d6a4 <_dtoa_r+0x61c>)
 801d692:	9a02      	ldr	r2, [sp, #8]
 801d694:	1b5b      	subs	r3, r3, r5
 801d696:	fa02 f003 	lsl.w	r0, r2, r3
 801d69a:	e56d      	b.n	801d178 <_dtoa_r+0xf0>
 801d69c:	900b      	str	r0, [sp, #44]	; 0x2c
 801d69e:	e5b4      	b.n	801d20a <_dtoa_r+0x182>
 801d6a0:	40240000 	.word	0x40240000
 801d6a4:	fffffbee 	.word	0xfffffbee
 801d6a8:	4631      	mov	r1, r6
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	220a      	movs	r2, #10
 801d6b0:	f001 fc46 	bl	801ef40 <__multadd>
 801d6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	4606      	mov	r6, r0
 801d6ba:	f340 840c 	ble.w	801ded6 <_dtoa_r+0xe4e>
 801d6be:	9306      	str	r3, [sp, #24]
 801d6c0:	2d00      	cmp	r5, #0
 801d6c2:	dd05      	ble.n	801d6d0 <_dtoa_r+0x648>
 801d6c4:	4631      	mov	r1, r6
 801d6c6:	462a      	mov	r2, r5
 801d6c8:	4620      	mov	r0, r4
 801d6ca:	f001 fdbd 	bl	801f248 <__lshift>
 801d6ce:	4606      	mov	r6, r0
 801d6d0:	f1b9 0f00 	cmp.w	r9, #0
 801d6d4:	f040 82e9 	bne.w	801dcaa <_dtoa_r+0xc22>
 801d6d8:	46b1      	mov	r9, r6
 801d6da:	9b06      	ldr	r3, [sp, #24]
 801d6dc:	9a07      	ldr	r2, [sp, #28]
 801d6de:	3b01      	subs	r3, #1
 801d6e0:	18d3      	adds	r3, r2, r3
 801d6e2:	9308      	str	r3, [sp, #32]
 801d6e4:	9b02      	ldr	r3, [sp, #8]
 801d6e6:	f003 0301 	and.w	r3, r3, #1
 801d6ea:	9309      	str	r3, [sp, #36]	; 0x24
 801d6ec:	4617      	mov	r7, r2
 801d6ee:	4641      	mov	r1, r8
 801d6f0:	4658      	mov	r0, fp
 801d6f2:	f7ff fc33 	bl	801cf5c <quorem>
 801d6f6:	4631      	mov	r1, r6
 801d6f8:	4605      	mov	r5, r0
 801d6fa:	4658      	mov	r0, fp
 801d6fc:	f001 fdfa 	bl	801f2f4 <__mcmp>
 801d700:	464a      	mov	r2, r9
 801d702:	4682      	mov	sl, r0
 801d704:	4641      	mov	r1, r8
 801d706:	4620      	mov	r0, r4
 801d708:	f001 fe18 	bl	801f33c <__mdiff>
 801d70c:	68c2      	ldr	r2, [r0, #12]
 801d70e:	4603      	mov	r3, r0
 801d710:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 801d714:	2a00      	cmp	r2, #0
 801d716:	f040 81b8 	bne.w	801da8a <_dtoa_r+0xa02>
 801d71a:	4619      	mov	r1, r3
 801d71c:	4658      	mov	r0, fp
 801d71e:	f8cd c018 	str.w	ip, [sp, #24]
 801d722:	9305      	str	r3, [sp, #20]
 801d724:	f001 fde6 	bl	801f2f4 <__mcmp>
 801d728:	9b05      	ldr	r3, [sp, #20]
 801d72a:	9002      	str	r0, [sp, #8]
 801d72c:	4619      	mov	r1, r3
 801d72e:	4620      	mov	r0, r4
 801d730:	f001 fbfc 	bl	801ef2c <_Bfree>
 801d734:	9a02      	ldr	r2, [sp, #8]
 801d736:	f8dd c018 	ldr.w	ip, [sp, #24]
 801d73a:	b92a      	cbnz	r2, 801d748 <_dtoa_r+0x6c0>
 801d73c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d73e:	b91b      	cbnz	r3, 801d748 <_dtoa_r+0x6c0>
 801d740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d742:	2b00      	cmp	r3, #0
 801d744:	f000 83a7 	beq.w	801de96 <_dtoa_r+0xe0e>
 801d748:	f1ba 0f00 	cmp.w	sl, #0
 801d74c:	f2c0 8251 	blt.w	801dbf2 <_dtoa_r+0xb6a>
 801d750:	d105      	bne.n	801d75e <_dtoa_r+0x6d6>
 801d752:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d754:	b91b      	cbnz	r3, 801d75e <_dtoa_r+0x6d6>
 801d756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d758:	2b00      	cmp	r3, #0
 801d75a:	f000 824a 	beq.w	801dbf2 <_dtoa_r+0xb6a>
 801d75e:	2a00      	cmp	r2, #0
 801d760:	f300 82b7 	bgt.w	801dcd2 <_dtoa_r+0xc4a>
 801d764:	9b08      	ldr	r3, [sp, #32]
 801d766:	f887 c000 	strb.w	ip, [r7]
 801d76a:	f107 0a01 	add.w	sl, r7, #1
 801d76e:	429f      	cmp	r7, r3
 801d770:	4655      	mov	r5, sl
 801d772:	f000 82ba 	beq.w	801dcea <_dtoa_r+0xc62>
 801d776:	4659      	mov	r1, fp
 801d778:	220a      	movs	r2, #10
 801d77a:	2300      	movs	r3, #0
 801d77c:	4620      	mov	r0, r4
 801d77e:	f001 fbdf 	bl	801ef40 <__multadd>
 801d782:	454e      	cmp	r6, r9
 801d784:	4683      	mov	fp, r0
 801d786:	4631      	mov	r1, r6
 801d788:	4620      	mov	r0, r4
 801d78a:	f04f 020a 	mov.w	r2, #10
 801d78e:	f04f 0300 	mov.w	r3, #0
 801d792:	f000 8174 	beq.w	801da7e <_dtoa_r+0x9f6>
 801d796:	f001 fbd3 	bl	801ef40 <__multadd>
 801d79a:	4649      	mov	r1, r9
 801d79c:	4606      	mov	r6, r0
 801d79e:	220a      	movs	r2, #10
 801d7a0:	4620      	mov	r0, r4
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	f001 fbcc 	bl	801ef40 <__multadd>
 801d7a8:	4657      	mov	r7, sl
 801d7aa:	4681      	mov	r9, r0
 801d7ac:	e79f      	b.n	801d6ee <_dtoa_r+0x666>
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	9309      	str	r3, [sp, #36]	; 0x24
 801d7b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	f340 8213 	ble.w	801dbe0 <_dtoa_r+0xb58>
 801d7ba:	461f      	mov	r7, r3
 801d7bc:	461e      	mov	r6, r3
 801d7be:	930c      	str	r3, [sp, #48]	; 0x30
 801d7c0:	9306      	str	r3, [sp, #24]
 801d7c2:	2100      	movs	r1, #0
 801d7c4:	2f17      	cmp	r7, #23
 801d7c6:	6461      	str	r1, [r4, #68]	; 0x44
 801d7c8:	d90a      	bls.n	801d7e0 <_dtoa_r+0x758>
 801d7ca:	2201      	movs	r2, #1
 801d7cc:	2304      	movs	r3, #4
 801d7ce:	005b      	lsls	r3, r3, #1
 801d7d0:	f103 0014 	add.w	r0, r3, #20
 801d7d4:	4287      	cmp	r7, r0
 801d7d6:	4611      	mov	r1, r2
 801d7d8:	f102 0201 	add.w	r2, r2, #1
 801d7dc:	d2f7      	bcs.n	801d7ce <_dtoa_r+0x746>
 801d7de:	6461      	str	r1, [r4, #68]	; 0x44
 801d7e0:	4620      	mov	r0, r4
 801d7e2:	f001 fb7d 	bl	801eee0 <_Balloc>
 801d7e6:	2e0e      	cmp	r6, #14
 801d7e8:	9007      	str	r0, [sp, #28]
 801d7ea:	6420      	str	r0, [r4, #64]	; 0x40
 801d7ec:	f63f ad5c 	bhi.w	801d2a8 <_dtoa_r+0x220>
 801d7f0:	2d00      	cmp	r5, #0
 801d7f2:	f43f ad59 	beq.w	801d2a8 <_dtoa_r+0x220>
 801d7f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d7fa:	9904      	ldr	r1, [sp, #16]
 801d7fc:	2900      	cmp	r1, #0
 801d7fe:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d802:	f340 8221 	ble.w	801dc48 <_dtoa_r+0xbc0>
 801d806:	4bb7      	ldr	r3, [pc, #732]	; (801dae4 <_dtoa_r+0xa5c>)
 801d808:	f001 020f 	and.w	r2, r1, #15
 801d80c:	110d      	asrs	r5, r1, #4
 801d80e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d812:	06e9      	lsls	r1, r5, #27
 801d814:	e9d3 6700 	ldrd	r6, r7, [r3]
 801d818:	f140 81db 	bpl.w	801dbd2 <_dtoa_r+0xb4a>
 801d81c:	4bb2      	ldr	r3, [pc, #712]	; (801dae8 <_dtoa_r+0xa60>)
 801d81e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d822:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d826:	f7e2 ff91 	bl	800074c <__aeabi_ddiv>
 801d82a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d82e:	f005 050f 	and.w	r5, r5, #15
 801d832:	f04f 0803 	mov.w	r8, #3
 801d836:	b18d      	cbz	r5, 801d85c <_dtoa_r+0x7d4>
 801d838:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801dae8 <_dtoa_r+0xa60>
 801d83c:	4630      	mov	r0, r6
 801d83e:	4639      	mov	r1, r7
 801d840:	07ea      	lsls	r2, r5, #31
 801d842:	d505      	bpl.n	801d850 <_dtoa_r+0x7c8>
 801d844:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d848:	f108 0801 	add.w	r8, r8, #1
 801d84c:	f7e2 fe54 	bl	80004f8 <__aeabi_dmul>
 801d850:	106d      	asrs	r5, r5, #1
 801d852:	f109 0908 	add.w	r9, r9, #8
 801d856:	d1f3      	bne.n	801d840 <_dtoa_r+0x7b8>
 801d858:	4606      	mov	r6, r0
 801d85a:	460f      	mov	r7, r1
 801d85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d860:	4632      	mov	r2, r6
 801d862:	463b      	mov	r3, r7
 801d864:	f7e2 ff72 	bl	800074c <__aeabi_ddiv>
 801d868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d86e:	b143      	cbz	r3, 801d882 <_dtoa_r+0x7fa>
 801d870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d874:	2200      	movs	r2, #0
 801d876:	4b9d      	ldr	r3, [pc, #628]	; (801daec <_dtoa_r+0xa64>)
 801d878:	f7e3 f8b0 	bl	80009dc <__aeabi_dcmplt>
 801d87c:	2800      	cmp	r0, #0
 801d87e:	f040 82ac 	bne.w	801ddda <_dtoa_r+0xd52>
 801d882:	4640      	mov	r0, r8
 801d884:	f7e2 fdd2 	bl	800042c <__aeabi_i2d>
 801d888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d88c:	f7e2 fe34 	bl	80004f8 <__aeabi_dmul>
 801d890:	4b97      	ldr	r3, [pc, #604]	; (801daf0 <_dtoa_r+0xa68>)
 801d892:	2200      	movs	r2, #0
 801d894:	f7e2 fc7e 	bl	8000194 <__adddf3>
 801d898:	9b06      	ldr	r3, [sp, #24]
 801d89a:	4606      	mov	r6, r0
 801d89c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	f000 8162 	beq.w	801db6a <_dtoa_r+0xae2>
 801d8a6:	9b04      	ldr	r3, [sp, #16]
 801d8a8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d8ac:	9312      	str	r3, [sp, #72]	; 0x48
 801d8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	f000 8221 	beq.w	801dcf8 <_dtoa_r+0xc70>
 801d8b6:	4b8b      	ldr	r3, [pc, #556]	; (801dae4 <_dtoa_r+0xa5c>)
 801d8b8:	498e      	ldr	r1, [pc, #568]	; (801daf4 <_dtoa_r+0xa6c>)
 801d8ba:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801d8be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d8c2:	2000      	movs	r0, #0
 801d8c4:	f7e2 ff42 	bl	800074c <__aeabi_ddiv>
 801d8c8:	4632      	mov	r2, r6
 801d8ca:	463b      	mov	r3, r7
 801d8cc:	f7e2 fc60 	bl	8000190 <__aeabi_dsub>
 801d8d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d8d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801d8d8:	4639      	mov	r1, r7
 801d8da:	4630      	mov	r0, r6
 801d8dc:	f7e3 fc34 	bl	8001148 <__aeabi_d2iz>
 801d8e0:	4605      	mov	r5, r0
 801d8e2:	f7e2 fda3 	bl	800042c <__aeabi_i2d>
 801d8e6:	3530      	adds	r5, #48	; 0x30
 801d8e8:	4602      	mov	r2, r0
 801d8ea:	460b      	mov	r3, r1
 801d8ec:	4630      	mov	r0, r6
 801d8ee:	4639      	mov	r1, r7
 801d8f0:	f7e2 fc4e 	bl	8000190 <__aeabi_dsub>
 801d8f4:	fa5f f885 	uxtb.w	r8, r5
 801d8f8:	9d07      	ldr	r5, [sp, #28]
 801d8fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d8fe:	f885 8000 	strb.w	r8, [r5]
 801d902:	4606      	mov	r6, r0
 801d904:	460f      	mov	r7, r1
 801d906:	3501      	adds	r5, #1
 801d908:	f7e3 f868 	bl	80009dc <__aeabi_dcmplt>
 801d90c:	2800      	cmp	r0, #0
 801d90e:	f040 82b2 	bne.w	801de76 <_dtoa_r+0xdee>
 801d912:	4632      	mov	r2, r6
 801d914:	463b      	mov	r3, r7
 801d916:	2000      	movs	r0, #0
 801d918:	4974      	ldr	r1, [pc, #464]	; (801daec <_dtoa_r+0xa64>)
 801d91a:	f7e2 fc39 	bl	8000190 <__aeabi_dsub>
 801d91e:	4602      	mov	r2, r0
 801d920:	460b      	mov	r3, r1
 801d922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d926:	f7e3 f877 	bl	8000a18 <__aeabi_dcmpgt>
 801d92a:	2800      	cmp	r0, #0
 801d92c:	f040 82ac 	bne.w	801de88 <_dtoa_r+0xe00>
 801d930:	f1b9 0f01 	cmp.w	r9, #1
 801d934:	f340 8138 	ble.w	801dba8 <_dtoa_r+0xb20>
 801d938:	9b07      	ldr	r3, [sp, #28]
 801d93a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 801d93e:	f8cd b008 	str.w	fp, [sp, #8]
 801d942:	4499      	add	r9, r3
 801d944:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 801d948:	46a0      	mov	r8, r4
 801d94a:	e00d      	b.n	801d968 <_dtoa_r+0x8e0>
 801d94c:	2000      	movs	r0, #0
 801d94e:	4967      	ldr	r1, [pc, #412]	; (801daec <_dtoa_r+0xa64>)
 801d950:	f7e2 fc1e 	bl	8000190 <__aeabi_dsub>
 801d954:	4652      	mov	r2, sl
 801d956:	465b      	mov	r3, fp
 801d958:	f7e3 f840 	bl	80009dc <__aeabi_dcmplt>
 801d95c:	2800      	cmp	r0, #0
 801d95e:	f040 828e 	bne.w	801de7e <_dtoa_r+0xdf6>
 801d962:	454d      	cmp	r5, r9
 801d964:	f000 811b 	beq.w	801db9e <_dtoa_r+0xb16>
 801d968:	4650      	mov	r0, sl
 801d96a:	4659      	mov	r1, fp
 801d96c:	2200      	movs	r2, #0
 801d96e:	4b62      	ldr	r3, [pc, #392]	; (801daf8 <_dtoa_r+0xa70>)
 801d970:	f7e2 fdc2 	bl	80004f8 <__aeabi_dmul>
 801d974:	2200      	movs	r2, #0
 801d976:	4b60      	ldr	r3, [pc, #384]	; (801daf8 <_dtoa_r+0xa70>)
 801d978:	4682      	mov	sl, r0
 801d97a:	468b      	mov	fp, r1
 801d97c:	4630      	mov	r0, r6
 801d97e:	4639      	mov	r1, r7
 801d980:	f7e2 fdba 	bl	80004f8 <__aeabi_dmul>
 801d984:	460f      	mov	r7, r1
 801d986:	4606      	mov	r6, r0
 801d988:	f7e3 fbde 	bl	8001148 <__aeabi_d2iz>
 801d98c:	4604      	mov	r4, r0
 801d98e:	f7e2 fd4d 	bl	800042c <__aeabi_i2d>
 801d992:	4602      	mov	r2, r0
 801d994:	460b      	mov	r3, r1
 801d996:	4630      	mov	r0, r6
 801d998:	4639      	mov	r1, r7
 801d99a:	f7e2 fbf9 	bl	8000190 <__aeabi_dsub>
 801d99e:	3430      	adds	r4, #48	; 0x30
 801d9a0:	b2e4      	uxtb	r4, r4
 801d9a2:	4652      	mov	r2, sl
 801d9a4:	465b      	mov	r3, fp
 801d9a6:	f805 4b01 	strb.w	r4, [r5], #1
 801d9aa:	4606      	mov	r6, r0
 801d9ac:	460f      	mov	r7, r1
 801d9ae:	f7e3 f815 	bl	80009dc <__aeabi_dcmplt>
 801d9b2:	4632      	mov	r2, r6
 801d9b4:	463b      	mov	r3, r7
 801d9b6:	2800      	cmp	r0, #0
 801d9b8:	d0c8      	beq.n	801d94c <_dtoa_r+0x8c4>
 801d9ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d9bc:	f8dd b008 	ldr.w	fp, [sp, #8]
 801d9c0:	9304      	str	r3, [sp, #16]
 801d9c2:	4644      	mov	r4, r8
 801d9c4:	e533      	b.n	801d42e <_dtoa_r+0x3a6>
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	9309      	str	r3, [sp, #36]	; 0x24
 801d9ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d9cc:	9a04      	ldr	r2, [sp, #16]
 801d9ce:	4413      	add	r3, r2
 801d9d0:	930c      	str	r3, [sp, #48]	; 0x30
 801d9d2:	3301      	adds	r3, #1
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	9306      	str	r3, [sp, #24]
 801d9d8:	f340 8109 	ble.w	801dbee <_dtoa_r+0xb66>
 801d9dc:	9e06      	ldr	r6, [sp, #24]
 801d9de:	4637      	mov	r7, r6
 801d9e0:	e6ef      	b.n	801d7c2 <_dtoa_r+0x73a>
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	9309      	str	r3, [sp, #36]	; 0x24
 801d9e6:	e6e4      	b.n	801d7b2 <_dtoa_r+0x72a>
 801d9e8:	9b06      	ldr	r3, [sp, #24]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	f73f ac6d 	bgt.w	801d2ca <_dtoa_r+0x242>
 801d9f0:	f040 8262 	bne.w	801deb8 <_dtoa_r+0xe30>
 801d9f4:	4640      	mov	r0, r8
 801d9f6:	2200      	movs	r2, #0
 801d9f8:	4b40      	ldr	r3, [pc, #256]	; (801dafc <_dtoa_r+0xa74>)
 801d9fa:	4649      	mov	r1, r9
 801d9fc:	f7e2 fd7c 	bl	80004f8 <__aeabi_dmul>
 801da00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801da04:	f7e2 fffe 	bl	8000a04 <__aeabi_dcmpge>
 801da08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801da0c:	4646      	mov	r6, r8
 801da0e:	2800      	cmp	r0, #0
 801da10:	f000 808a 	beq.w	801db28 <_dtoa_r+0xaa0>
 801da14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801da16:	9d07      	ldr	r5, [sp, #28]
 801da18:	43db      	mvns	r3, r3
 801da1a:	9304      	str	r3, [sp, #16]
 801da1c:	4641      	mov	r1, r8
 801da1e:	4620      	mov	r0, r4
 801da20:	f001 fa84 	bl	801ef2c <_Bfree>
 801da24:	2e00      	cmp	r6, #0
 801da26:	f47f ae2c 	bne.w	801d682 <_dtoa_r+0x5fa>
 801da2a:	e500      	b.n	801d42e <_dtoa_r+0x3a6>
 801da2c:	4659      	mov	r1, fp
 801da2e:	4620      	mov	r0, r4
 801da30:	f001 fbba 	bl	801f1a8 <__pow5mult>
 801da34:	4683      	mov	fp, r0
 801da36:	e557      	b.n	801d4e8 <_dtoa_r+0x460>
 801da38:	9b02      	ldr	r3, [sp, #8]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	f47f ad66 	bne.w	801d50c <_dtoa_r+0x484>
 801da40:	9b03      	ldr	r3, [sp, #12]
 801da42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801da46:	2b00      	cmp	r3, #0
 801da48:	f47f ad94 	bne.w	801d574 <_dtoa_r+0x4ec>
 801da4c:	9b03      	ldr	r3, [sp, #12]
 801da4e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 801da52:	0d3f      	lsrs	r7, r7, #20
 801da54:	053f      	lsls	r7, r7, #20
 801da56:	2f00      	cmp	r7, #0
 801da58:	f000 821a 	beq.w	801de90 <_dtoa_r+0xe08>
 801da5c:	9b05      	ldr	r3, [sp, #20]
 801da5e:	3301      	adds	r3, #1
 801da60:	9305      	str	r3, [sp, #20]
 801da62:	f10a 0a01 	add.w	sl, sl, #1
 801da66:	f04f 0901 	mov.w	r9, #1
 801da6a:	e585      	b.n	801d578 <_dtoa_r+0x4f0>
 801da6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da6e:	2a00      	cmp	r2, #0
 801da70:	f000 81a5 	beq.w	801ddbe <_dtoa_r+0xd36>
 801da74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801da78:	9f08      	ldr	r7, [sp, #32]
 801da7a:	9d05      	ldr	r5, [sp, #20]
 801da7c:	e4ff      	b.n	801d47e <_dtoa_r+0x3f6>
 801da7e:	f001 fa5f 	bl	801ef40 <__multadd>
 801da82:	4657      	mov	r7, sl
 801da84:	4606      	mov	r6, r0
 801da86:	4681      	mov	r9, r0
 801da88:	e631      	b.n	801d6ee <_dtoa_r+0x666>
 801da8a:	4601      	mov	r1, r0
 801da8c:	4620      	mov	r0, r4
 801da8e:	f8cd c008 	str.w	ip, [sp, #8]
 801da92:	f001 fa4b 	bl	801ef2c <_Bfree>
 801da96:	2201      	movs	r2, #1
 801da98:	f8dd c008 	ldr.w	ip, [sp, #8]
 801da9c:	e654      	b.n	801d748 <_dtoa_r+0x6c0>
 801da9e:	4658      	mov	r0, fp
 801daa0:	4641      	mov	r1, r8
 801daa2:	f001 fc27 	bl	801f2f4 <__mcmp>
 801daa6:	2800      	cmp	r0, #0
 801daa8:	f6bf ad91 	bge.w	801d5ce <_dtoa_r+0x546>
 801daac:	9f04      	ldr	r7, [sp, #16]
 801daae:	4659      	mov	r1, fp
 801dab0:	2300      	movs	r3, #0
 801dab2:	4620      	mov	r0, r4
 801dab4:	220a      	movs	r2, #10
 801dab6:	3f01      	subs	r7, #1
 801dab8:	9704      	str	r7, [sp, #16]
 801daba:	f001 fa41 	bl	801ef40 <__multadd>
 801dabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dac0:	4683      	mov	fp, r0
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	f47f adf0 	bne.w	801d6a8 <_dtoa_r+0x620>
 801dac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801daca:	2b00      	cmp	r3, #0
 801dacc:	f340 81f8 	ble.w	801dec0 <_dtoa_r+0xe38>
 801dad0:	9306      	str	r3, [sp, #24]
 801dad2:	e583      	b.n	801d5dc <_dtoa_r+0x554>
 801dad4:	9807      	ldr	r0, [sp, #28]
 801dad6:	f7ff bb0b 	b.w	801d0f0 <_dtoa_r+0x68>
 801dada:	9b02      	ldr	r3, [sp, #8]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	f47f ad49 	bne.w	801d574 <_dtoa_r+0x4ec>
 801dae2:	e7ad      	b.n	801da40 <_dtoa_r+0x9b8>
 801dae4:	080356b8 	.word	0x080356b8
 801dae8:	08035780 	.word	0x08035780
 801daec:	3ff00000 	.word	0x3ff00000
 801daf0:	401c0000 	.word	0x401c0000
 801daf4:	3fe00000 	.word	0x3fe00000
 801daf8:	40240000 	.word	0x40240000
 801dafc:	40140000 	.word	0x40140000
 801db00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801db02:	2b02      	cmp	r3, #2
 801db04:	f77f ad67 	ble.w	801d5d6 <_dtoa_r+0x54e>
 801db08:	9b06      	ldr	r3, [sp, #24]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d182      	bne.n	801da14 <_dtoa_r+0x98c>
 801db0e:	4641      	mov	r1, r8
 801db10:	2205      	movs	r2, #5
 801db12:	4620      	mov	r0, r4
 801db14:	f001 fa14 	bl	801ef40 <__multadd>
 801db18:	4680      	mov	r8, r0
 801db1a:	4641      	mov	r1, r8
 801db1c:	4658      	mov	r0, fp
 801db1e:	f001 fbe9 	bl	801f2f4 <__mcmp>
 801db22:	2800      	cmp	r0, #0
 801db24:	f77f af76 	ble.w	801da14 <_dtoa_r+0x98c>
 801db28:	9a04      	ldr	r2, [sp, #16]
 801db2a:	9907      	ldr	r1, [sp, #28]
 801db2c:	2331      	movs	r3, #49	; 0x31
 801db2e:	3201      	adds	r2, #1
 801db30:	9204      	str	r2, [sp, #16]
 801db32:	700b      	strb	r3, [r1, #0]
 801db34:	1c4d      	adds	r5, r1, #1
 801db36:	e771      	b.n	801da1c <_dtoa_r+0x994>
 801db38:	9a04      	ldr	r2, [sp, #16]
 801db3a:	3201      	adds	r2, #1
 801db3c:	9204      	str	r2, [sp, #16]
 801db3e:	9a07      	ldr	r2, [sp, #28]
 801db40:	2331      	movs	r3, #49	; 0x31
 801db42:	7013      	strb	r3, [r2, #0]
 801db44:	e58d      	b.n	801d662 <_dtoa_r+0x5da>
 801db46:	f8dd b008 	ldr.w	fp, [sp, #8]
 801db4a:	9c05      	ldr	r4, [sp, #20]
 801db4c:	e46f      	b.n	801d42e <_dtoa_r+0x3a6>
 801db4e:	4640      	mov	r0, r8
 801db50:	f7e2 fc6c 	bl	800042c <__aeabi_i2d>
 801db54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801db58:	f7e2 fcce 	bl	80004f8 <__aeabi_dmul>
 801db5c:	2200      	movs	r2, #0
 801db5e:	4bbc      	ldr	r3, [pc, #752]	; (801de50 <_dtoa_r+0xdc8>)
 801db60:	f7e2 fb18 	bl	8000194 <__adddf3>
 801db64:	4606      	mov	r6, r0
 801db66:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801db6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801db6e:	2200      	movs	r2, #0
 801db70:	4bb8      	ldr	r3, [pc, #736]	; (801de54 <_dtoa_r+0xdcc>)
 801db72:	f7e2 fb0d 	bl	8000190 <__aeabi_dsub>
 801db76:	4632      	mov	r2, r6
 801db78:	463b      	mov	r3, r7
 801db7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db7e:	f7e2 ff4b 	bl	8000a18 <__aeabi_dcmpgt>
 801db82:	4680      	mov	r8, r0
 801db84:	2800      	cmp	r0, #0
 801db86:	f040 80b3 	bne.w	801dcf0 <_dtoa_r+0xc68>
 801db8a:	4632      	mov	r2, r6
 801db8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801db90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801db94:	f7e2 ff22 	bl	80009dc <__aeabi_dcmplt>
 801db98:	b130      	cbz	r0, 801dba8 <_dtoa_r+0xb20>
 801db9a:	4646      	mov	r6, r8
 801db9c:	e73a      	b.n	801da14 <_dtoa_r+0x98c>
 801db9e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801dba2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801dba6:	4644      	mov	r4, r8
 801dba8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801dbac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dbb0:	f7ff bb7a 	b.w	801d2a8 <_dtoa_r+0x220>
 801dbb4:	4659      	mov	r1, fp
 801dbb6:	9a08      	ldr	r2, [sp, #32]
 801dbb8:	4620      	mov	r0, r4
 801dbba:	f001 faf5 	bl	801f1a8 <__pow5mult>
 801dbbe:	4683      	mov	fp, r0
 801dbc0:	e492      	b.n	801d4e8 <_dtoa_r+0x460>
 801dbc2:	9b08      	ldr	r3, [sp, #32]
 801dbc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dbc6:	9708      	str	r7, [sp, #32]
 801dbc8:	1afb      	subs	r3, r7, r3
 801dbca:	441a      	add	r2, r3
 801dbcc:	920a      	str	r2, [sp, #40]	; 0x28
 801dbce:	2700      	movs	r7, #0
 801dbd0:	e44f      	b.n	801d472 <_dtoa_r+0x3ea>
 801dbd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801dbd6:	f04f 0802 	mov.w	r8, #2
 801dbda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dbde:	e62a      	b.n	801d836 <_dtoa_r+0x7ae>
 801dbe0:	2601      	movs	r6, #1
 801dbe2:	9621      	str	r6, [sp, #132]	; 0x84
 801dbe4:	960c      	str	r6, [sp, #48]	; 0x30
 801dbe6:	9606      	str	r6, [sp, #24]
 801dbe8:	2100      	movs	r1, #0
 801dbea:	6461      	str	r1, [r4, #68]	; 0x44
 801dbec:	e5f8      	b.n	801d7e0 <_dtoa_r+0x758>
 801dbee:	461e      	mov	r6, r3
 801dbf0:	e7fa      	b.n	801dbe8 <_dtoa_r+0xb60>
 801dbf2:	2a00      	cmp	r2, #0
 801dbf4:	dd15      	ble.n	801dc22 <_dtoa_r+0xb9a>
 801dbf6:	4659      	mov	r1, fp
 801dbf8:	2201      	movs	r2, #1
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	f8cd c008 	str.w	ip, [sp, #8]
 801dc00:	f001 fb22 	bl	801f248 <__lshift>
 801dc04:	4641      	mov	r1, r8
 801dc06:	4683      	mov	fp, r0
 801dc08:	f001 fb74 	bl	801f2f4 <__mcmp>
 801dc0c:	2800      	cmp	r0, #0
 801dc0e:	f8dd c008 	ldr.w	ip, [sp, #8]
 801dc12:	f340 814a 	ble.w	801deaa <_dtoa_r+0xe22>
 801dc16:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 801dc1a:	f000 8106 	beq.w	801de2a <_dtoa_r+0xda2>
 801dc1e:	f10c 0c01 	add.w	ip, ip, #1
 801dc22:	46b2      	mov	sl, r6
 801dc24:	f887 c000 	strb.w	ip, [r7]
 801dc28:	1c7d      	adds	r5, r7, #1
 801dc2a:	464e      	mov	r6, r9
 801dc2c:	e519      	b.n	801d662 <_dtoa_r+0x5da>
 801dc2e:	d104      	bne.n	801dc3a <_dtoa_r+0xbb2>
 801dc30:	f01c 0f01 	tst.w	ip, #1
 801dc34:	d001      	beq.n	801dc3a <_dtoa_r+0xbb2>
 801dc36:	e504      	b.n	801d642 <_dtoa_r+0x5ba>
 801dc38:	4615      	mov	r5, r2
 801dc3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dc3e:	2b30      	cmp	r3, #48	; 0x30
 801dc40:	f105 32ff 	add.w	r2, r5, #4294967295
 801dc44:	d0f8      	beq.n	801dc38 <_dtoa_r+0xbb0>
 801dc46:	e50c      	b.n	801d662 <_dtoa_r+0x5da>
 801dc48:	9b04      	ldr	r3, [sp, #16]
 801dc4a:	425d      	negs	r5, r3
 801dc4c:	2d00      	cmp	r5, #0
 801dc4e:	f000 80bd 	beq.w	801ddcc <_dtoa_r+0xd44>
 801dc52:	4b81      	ldr	r3, [pc, #516]	; (801de58 <_dtoa_r+0xdd0>)
 801dc54:	f005 020f 	and.w	r2, r5, #15
 801dc58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801dc64:	f7e2 fc48 	bl	80004f8 <__aeabi_dmul>
 801dc68:	112d      	asrs	r5, r5, #4
 801dc6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc6e:	f000 812c 	beq.w	801deca <_dtoa_r+0xe42>
 801dc72:	4e7a      	ldr	r6, [pc, #488]	; (801de5c <_dtoa_r+0xdd4>)
 801dc74:	f04f 0802 	mov.w	r8, #2
 801dc78:	07eb      	lsls	r3, r5, #31
 801dc7a:	d505      	bpl.n	801dc88 <_dtoa_r+0xc00>
 801dc7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801dc80:	f108 0801 	add.w	r8, r8, #1
 801dc84:	f7e2 fc38 	bl	80004f8 <__aeabi_dmul>
 801dc88:	106d      	asrs	r5, r5, #1
 801dc8a:	f106 0608 	add.w	r6, r6, #8
 801dc8e:	d1f3      	bne.n	801dc78 <_dtoa_r+0xbf0>
 801dc90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc94:	e5ea      	b.n	801d86c <_dtoa_r+0x7e4>
 801dc96:	9a04      	ldr	r2, [sp, #16]
 801dc98:	3201      	adds	r2, #1
 801dc9a:	9204      	str	r2, [sp, #16]
 801dc9c:	9a07      	ldr	r2, [sp, #28]
 801dc9e:	2330      	movs	r3, #48	; 0x30
 801dca0:	7013      	strb	r3, [r2, #0]
 801dca2:	2331      	movs	r3, #49	; 0x31
 801dca4:	7013      	strb	r3, [r2, #0]
 801dca6:	f7ff bbc2 	b.w	801d42e <_dtoa_r+0x3a6>
 801dcaa:	6871      	ldr	r1, [r6, #4]
 801dcac:	4620      	mov	r0, r4
 801dcae:	f001 f917 	bl	801eee0 <_Balloc>
 801dcb2:	6933      	ldr	r3, [r6, #16]
 801dcb4:	1c9a      	adds	r2, r3, #2
 801dcb6:	4605      	mov	r5, r0
 801dcb8:	0092      	lsls	r2, r2, #2
 801dcba:	f106 010c 	add.w	r1, r6, #12
 801dcbe:	300c      	adds	r0, #12
 801dcc0:	f7e3 f9a8 	bl	8001014 <memcpy>
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	4629      	mov	r1, r5
 801dcc8:	2201      	movs	r2, #1
 801dcca:	f001 fabd 	bl	801f248 <__lshift>
 801dcce:	4681      	mov	r9, r0
 801dcd0:	e503      	b.n	801d6da <_dtoa_r+0x652>
 801dcd2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 801dcd6:	f000 80a8 	beq.w	801de2a <_dtoa_r+0xda2>
 801dcda:	f10c 0c01 	add.w	ip, ip, #1
 801dcde:	46b2      	mov	sl, r6
 801dce0:	f887 c000 	strb.w	ip, [r7]
 801dce4:	1c7d      	adds	r5, r7, #1
 801dce6:	464e      	mov	r6, r9
 801dce8:	e4bb      	b.n	801d662 <_dtoa_r+0x5da>
 801dcea:	46b2      	mov	sl, r6
 801dcec:	464e      	mov	r6, r9
 801dcee:	e498      	b.n	801d622 <_dtoa_r+0x59a>
 801dcf0:	f04f 0800 	mov.w	r8, #0
 801dcf4:	4646      	mov	r6, r8
 801dcf6:	e717      	b.n	801db28 <_dtoa_r+0xaa0>
 801dcf8:	4957      	ldr	r1, [pc, #348]	; (801de58 <_dtoa_r+0xdd0>)
 801dcfa:	f109 33ff 	add.w	r3, r9, #4294967295
 801dcfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dd02:	4632      	mov	r2, r6
 801dd04:	9313      	str	r3, [sp, #76]	; 0x4c
 801dd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dd0a:	463b      	mov	r3, r7
 801dd0c:	f7e2 fbf4 	bl	80004f8 <__aeabi_dmul>
 801dd10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801dd14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801dd18:	4639      	mov	r1, r7
 801dd1a:	4630      	mov	r0, r6
 801dd1c:	f7e3 fa14 	bl	8001148 <__aeabi_d2iz>
 801dd20:	4605      	mov	r5, r0
 801dd22:	f7e2 fb83 	bl	800042c <__aeabi_i2d>
 801dd26:	4602      	mov	r2, r0
 801dd28:	460b      	mov	r3, r1
 801dd2a:	4630      	mov	r0, r6
 801dd2c:	4639      	mov	r1, r7
 801dd2e:	f7e2 fa2f 	bl	8000190 <__aeabi_dsub>
 801dd32:	9a07      	ldr	r2, [sp, #28]
 801dd34:	3530      	adds	r5, #48	; 0x30
 801dd36:	f1b9 0f01 	cmp.w	r9, #1
 801dd3a:	7015      	strb	r5, [r2, #0]
 801dd3c:	4606      	mov	r6, r0
 801dd3e:	460f      	mov	r7, r1
 801dd40:	f102 0501 	add.w	r5, r2, #1
 801dd44:	d023      	beq.n	801dd8e <_dtoa_r+0xd06>
 801dd46:	9b07      	ldr	r3, [sp, #28]
 801dd48:	f8cd a008 	str.w	sl, [sp, #8]
 801dd4c:	444b      	add	r3, r9
 801dd4e:	465e      	mov	r6, fp
 801dd50:	469a      	mov	sl, r3
 801dd52:	46ab      	mov	fp, r5
 801dd54:	2200      	movs	r2, #0
 801dd56:	4b42      	ldr	r3, [pc, #264]	; (801de60 <_dtoa_r+0xdd8>)
 801dd58:	f7e2 fbce 	bl	80004f8 <__aeabi_dmul>
 801dd5c:	4689      	mov	r9, r1
 801dd5e:	4680      	mov	r8, r0
 801dd60:	f7e3 f9f2 	bl	8001148 <__aeabi_d2iz>
 801dd64:	4607      	mov	r7, r0
 801dd66:	f7e2 fb61 	bl	800042c <__aeabi_i2d>
 801dd6a:	3730      	adds	r7, #48	; 0x30
 801dd6c:	4602      	mov	r2, r0
 801dd6e:	460b      	mov	r3, r1
 801dd70:	4640      	mov	r0, r8
 801dd72:	4649      	mov	r1, r9
 801dd74:	f7e2 fa0c 	bl	8000190 <__aeabi_dsub>
 801dd78:	f80b 7b01 	strb.w	r7, [fp], #1
 801dd7c:	45d3      	cmp	fp, sl
 801dd7e:	d1e9      	bne.n	801dd54 <_dtoa_r+0xccc>
 801dd80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dd82:	f8dd a008 	ldr.w	sl, [sp, #8]
 801dd86:	46b3      	mov	fp, r6
 801dd88:	460f      	mov	r7, r1
 801dd8a:	4606      	mov	r6, r0
 801dd8c:	441d      	add	r5, r3
 801dd8e:	2200      	movs	r2, #0
 801dd90:	4b34      	ldr	r3, [pc, #208]	; (801de64 <_dtoa_r+0xddc>)
 801dd92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801dd96:	f7e2 f9fd 	bl	8000194 <__adddf3>
 801dd9a:	4632      	mov	r2, r6
 801dd9c:	463b      	mov	r3, r7
 801dd9e:	f7e2 fe1d 	bl	80009dc <__aeabi_dcmplt>
 801dda2:	2800      	cmp	r0, #0
 801dda4:	d047      	beq.n	801de36 <_dtoa_r+0xdae>
 801dda6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dda8:	9304      	str	r3, [sp, #16]
 801ddaa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 801ddae:	f7ff bb2c 	b.w	801d40a <_dtoa_r+0x382>
 801ddb2:	9b05      	ldr	r3, [sp, #20]
 801ddb4:	9a06      	ldr	r2, [sp, #24]
 801ddb6:	1a9d      	subs	r5, r3, r2
 801ddb8:	2300      	movs	r3, #0
 801ddba:	f7ff bb60 	b.w	801d47e <_dtoa_r+0x3f6>
 801ddbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ddc0:	9f08      	ldr	r7, [sp, #32]
 801ddc2:	9d05      	ldr	r5, [sp, #20]
 801ddc4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ddc8:	f7ff bb59 	b.w	801d47e <_dtoa_r+0x3f6>
 801ddcc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ddd0:	f04f 0802 	mov.w	r8, #2
 801ddd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ddd8:	e548      	b.n	801d86c <_dtoa_r+0x7e4>
 801ddda:	9b06      	ldr	r3, [sp, #24]
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	f43f aeb6 	beq.w	801db4e <_dtoa_r+0xac6>
 801dde2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dde4:	2d00      	cmp	r5, #0
 801dde6:	f77f aedf 	ble.w	801dba8 <_dtoa_r+0xb20>
 801ddea:	2200      	movs	r2, #0
 801ddec:	4b1c      	ldr	r3, [pc, #112]	; (801de60 <_dtoa_r+0xdd8>)
 801ddee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddf2:	f7e2 fb81 	bl	80004f8 <__aeabi_dmul>
 801ddf6:	4606      	mov	r6, r0
 801ddf8:	460f      	mov	r7, r1
 801ddfa:	f108 0001 	add.w	r0, r8, #1
 801ddfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801de02:	f7e2 fb13 	bl	800042c <__aeabi_i2d>
 801de06:	4602      	mov	r2, r0
 801de08:	460b      	mov	r3, r1
 801de0a:	4630      	mov	r0, r6
 801de0c:	4639      	mov	r1, r7
 801de0e:	f7e2 fb73 	bl	80004f8 <__aeabi_dmul>
 801de12:	4b0f      	ldr	r3, [pc, #60]	; (801de50 <_dtoa_r+0xdc8>)
 801de14:	2200      	movs	r2, #0
 801de16:	f7e2 f9bd 	bl	8000194 <__adddf3>
 801de1a:	9b04      	ldr	r3, [sp, #16]
 801de1c:	3b01      	subs	r3, #1
 801de1e:	4606      	mov	r6, r0
 801de20:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 801de24:	9312      	str	r3, [sp, #72]	; 0x48
 801de26:	46a9      	mov	r9, r5
 801de28:	e541      	b.n	801d8ae <_dtoa_r+0x826>
 801de2a:	2239      	movs	r2, #57	; 0x39
 801de2c:	46b2      	mov	sl, r6
 801de2e:	703a      	strb	r2, [r7, #0]
 801de30:	464e      	mov	r6, r9
 801de32:	1c7d      	adds	r5, r7, #1
 801de34:	e407      	b.n	801d646 <_dtoa_r+0x5be>
 801de36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801de3a:	2000      	movs	r0, #0
 801de3c:	4909      	ldr	r1, [pc, #36]	; (801de64 <_dtoa_r+0xddc>)
 801de3e:	f7e2 f9a7 	bl	8000190 <__aeabi_dsub>
 801de42:	4632      	mov	r2, r6
 801de44:	463b      	mov	r3, r7
 801de46:	f7e2 fde7 	bl	8000a18 <__aeabi_dcmpgt>
 801de4a:	b970      	cbnz	r0, 801de6a <_dtoa_r+0xde2>
 801de4c:	e6ac      	b.n	801dba8 <_dtoa_r+0xb20>
 801de4e:	bf00      	nop
 801de50:	401c0000 	.word	0x401c0000
 801de54:	40140000 	.word	0x40140000
 801de58:	080356b8 	.word	0x080356b8
 801de5c:	08035780 	.word	0x08035780
 801de60:	40240000 	.word	0x40240000
 801de64:	3fe00000 	.word	0x3fe00000
 801de68:	4615      	mov	r5, r2
 801de6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801de6e:	2b30      	cmp	r3, #48	; 0x30
 801de70:	f105 32ff 	add.w	r2, r5, #4294967295
 801de74:	d0f8      	beq.n	801de68 <_dtoa_r+0xde0>
 801de76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de78:	9304      	str	r3, [sp, #16]
 801de7a:	f7ff bad8 	b.w	801d42e <_dtoa_r+0x3a6>
 801de7e:	4643      	mov	r3, r8
 801de80:	f8dd b008 	ldr.w	fp, [sp, #8]
 801de84:	46a0      	mov	r8, r4
 801de86:	461c      	mov	r4, r3
 801de88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de8a:	9304      	str	r3, [sp, #16]
 801de8c:	f7ff babd 	b.w	801d40a <_dtoa_r+0x382>
 801de90:	46b9      	mov	r9, r7
 801de92:	f7ff bb71 	b.w	801d578 <_dtoa_r+0x4f0>
 801de96:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 801de9a:	d0c6      	beq.n	801de2a <_dtoa_r+0xda2>
 801de9c:	f1ba 0f00 	cmp.w	sl, #0
 801dea0:	f77f aebf 	ble.w	801dc22 <_dtoa_r+0xb9a>
 801dea4:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 801dea8:	e6bb      	b.n	801dc22 <_dtoa_r+0xb9a>
 801deaa:	f47f aeba 	bne.w	801dc22 <_dtoa_r+0xb9a>
 801deae:	f01c 0f01 	tst.w	ip, #1
 801deb2:	f43f aeb6 	beq.w	801dc22 <_dtoa_r+0xb9a>
 801deb6:	e6ae      	b.n	801dc16 <_dtoa_r+0xb8e>
 801deb8:	f04f 0800 	mov.w	r8, #0
 801debc:	4646      	mov	r6, r8
 801debe:	e5a9      	b.n	801da14 <_dtoa_r+0x98c>
 801dec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dec2:	2b02      	cmp	r3, #2
 801dec4:	dc04      	bgt.n	801ded0 <_dtoa_r+0xe48>
 801dec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dec8:	e602      	b.n	801dad0 <_dtoa_r+0xa48>
 801deca:	f04f 0802 	mov.w	r8, #2
 801dece:	e4cd      	b.n	801d86c <_dtoa_r+0x7e4>
 801ded0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ded2:	9306      	str	r3, [sp, #24]
 801ded4:	e618      	b.n	801db08 <_dtoa_r+0xa80>
 801ded6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ded8:	2b02      	cmp	r3, #2
 801deda:	dcf9      	bgt.n	801ded0 <_dtoa_r+0xe48>
 801dedc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dede:	f7ff bbee 	b.w	801d6be <_dtoa_r+0x636>
 801dee2:	2500      	movs	r5, #0
 801dee4:	6465      	str	r5, [r4, #68]	; 0x44
 801dee6:	4629      	mov	r1, r5
 801dee8:	4620      	mov	r0, r4
 801deea:	f000 fff9 	bl	801eee0 <_Balloc>
 801deee:	f04f 33ff 	mov.w	r3, #4294967295
 801def2:	9306      	str	r3, [sp, #24]
 801def4:	930c      	str	r3, [sp, #48]	; 0x30
 801def6:	2301      	movs	r3, #1
 801def8:	9007      	str	r0, [sp, #28]
 801defa:	9521      	str	r5, [sp, #132]	; 0x84
 801defc:	6420      	str	r0, [r4, #64]	; 0x40
 801defe:	9309      	str	r3, [sp, #36]	; 0x24
 801df00:	f7ff b9d2 	b.w	801d2a8 <_dtoa_r+0x220>
 801df04:	f43f ab4d 	beq.w	801d5a2 <_dtoa_r+0x51a>
 801df08:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 801df0c:	f7ff bb44 	b.w	801d598 <_dtoa_r+0x510>
 801df10:	2301      	movs	r3, #1
 801df12:	9309      	str	r3, [sp, #36]	; 0x24
 801df14:	e559      	b.n	801d9ca <_dtoa_r+0x942>
 801df16:	2501      	movs	r5, #1
 801df18:	f7ff b990 	b.w	801d23c <_dtoa_r+0x1b4>
 801df1c:	f3af 8000 	nop.w

0801df20 <__sflush_r>:
 801df20:	898b      	ldrh	r3, [r1, #12]
 801df22:	b29a      	uxth	r2, r3
 801df24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df28:	460d      	mov	r5, r1
 801df2a:	0711      	lsls	r1, r2, #28
 801df2c:	4680      	mov	r8, r0
 801df2e:	d43c      	bmi.n	801dfaa <__sflush_r+0x8a>
 801df30:	686a      	ldr	r2, [r5, #4]
 801df32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801df36:	2a00      	cmp	r2, #0
 801df38:	81ab      	strh	r3, [r5, #12]
 801df3a:	dd65      	ble.n	801e008 <__sflush_r+0xe8>
 801df3c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801df3e:	2e00      	cmp	r6, #0
 801df40:	d04b      	beq.n	801dfda <__sflush_r+0xba>
 801df42:	b29b      	uxth	r3, r3
 801df44:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801df48:	2100      	movs	r1, #0
 801df4a:	b292      	uxth	r2, r2
 801df4c:	f8d8 4000 	ldr.w	r4, [r8]
 801df50:	f8c8 1000 	str.w	r1, [r8]
 801df54:	2a00      	cmp	r2, #0
 801df56:	d05b      	beq.n	801e010 <__sflush_r+0xf0>
 801df58:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801df5a:	075f      	lsls	r7, r3, #29
 801df5c:	d505      	bpl.n	801df6a <__sflush_r+0x4a>
 801df5e:	6869      	ldr	r1, [r5, #4]
 801df60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801df62:	1a52      	subs	r2, r2, r1
 801df64:	b10b      	cbz	r3, 801df6a <__sflush_r+0x4a>
 801df66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801df68:	1ad2      	subs	r2, r2, r3
 801df6a:	4640      	mov	r0, r8
 801df6c:	69e9      	ldr	r1, [r5, #28]
 801df6e:	2300      	movs	r3, #0
 801df70:	47b0      	blx	r6
 801df72:	1c46      	adds	r6, r0, #1
 801df74:	d056      	beq.n	801e024 <__sflush_r+0x104>
 801df76:	89ab      	ldrh	r3, [r5, #12]
 801df78:	692a      	ldr	r2, [r5, #16]
 801df7a:	602a      	str	r2, [r5, #0]
 801df7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801df80:	b29b      	uxth	r3, r3
 801df82:	2200      	movs	r2, #0
 801df84:	606a      	str	r2, [r5, #4]
 801df86:	04da      	lsls	r2, r3, #19
 801df88:	81ab      	strh	r3, [r5, #12]
 801df8a:	d43b      	bmi.n	801e004 <__sflush_r+0xe4>
 801df8c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801df8e:	f8c8 4000 	str.w	r4, [r8]
 801df92:	b311      	cbz	r1, 801dfda <__sflush_r+0xba>
 801df94:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801df98:	4299      	cmp	r1, r3
 801df9a:	d002      	beq.n	801dfa2 <__sflush_r+0x82>
 801df9c:	4640      	mov	r0, r8
 801df9e:	f000 f9b7 	bl	801e310 <_free_r>
 801dfa2:	2000      	movs	r0, #0
 801dfa4:	6328      	str	r0, [r5, #48]	; 0x30
 801dfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfaa:	692e      	ldr	r6, [r5, #16]
 801dfac:	b1ae      	cbz	r6, 801dfda <__sflush_r+0xba>
 801dfae:	682c      	ldr	r4, [r5, #0]
 801dfb0:	602e      	str	r6, [r5, #0]
 801dfb2:	0791      	lsls	r1, r2, #30
 801dfb4:	bf0c      	ite	eq
 801dfb6:	696b      	ldreq	r3, [r5, #20]
 801dfb8:	2300      	movne	r3, #0
 801dfba:	1ba4      	subs	r4, r4, r6
 801dfbc:	60ab      	str	r3, [r5, #8]
 801dfbe:	e00a      	b.n	801dfd6 <__sflush_r+0xb6>
 801dfc0:	4632      	mov	r2, r6
 801dfc2:	4623      	mov	r3, r4
 801dfc4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801dfc6:	69e9      	ldr	r1, [r5, #28]
 801dfc8:	4640      	mov	r0, r8
 801dfca:	47b8      	blx	r7
 801dfcc:	2800      	cmp	r0, #0
 801dfce:	eba4 0400 	sub.w	r4, r4, r0
 801dfd2:	4406      	add	r6, r0
 801dfd4:	dd04      	ble.n	801dfe0 <__sflush_r+0xc0>
 801dfd6:	2c00      	cmp	r4, #0
 801dfd8:	dcf2      	bgt.n	801dfc0 <__sflush_r+0xa0>
 801dfda:	2000      	movs	r0, #0
 801dfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfe0:	89ab      	ldrh	r3, [r5, #12]
 801dfe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dfe6:	81ab      	strh	r3, [r5, #12]
 801dfe8:	f04f 30ff 	mov.w	r0, #4294967295
 801dfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dff0:	89ab      	ldrh	r3, [r5, #12]
 801dff2:	692a      	ldr	r2, [r5, #16]
 801dff4:	6069      	str	r1, [r5, #4]
 801dff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dffa:	b29b      	uxth	r3, r3
 801dffc:	81ab      	strh	r3, [r5, #12]
 801dffe:	04db      	lsls	r3, r3, #19
 801e000:	602a      	str	r2, [r5, #0]
 801e002:	d5c3      	bpl.n	801df8c <__sflush_r+0x6c>
 801e004:	6528      	str	r0, [r5, #80]	; 0x50
 801e006:	e7c1      	b.n	801df8c <__sflush_r+0x6c>
 801e008:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801e00a:	2a00      	cmp	r2, #0
 801e00c:	dc96      	bgt.n	801df3c <__sflush_r+0x1c>
 801e00e:	e7e4      	b.n	801dfda <__sflush_r+0xba>
 801e010:	2301      	movs	r3, #1
 801e012:	4640      	mov	r0, r8
 801e014:	69e9      	ldr	r1, [r5, #28]
 801e016:	47b0      	blx	r6
 801e018:	1c43      	adds	r3, r0, #1
 801e01a:	4602      	mov	r2, r0
 801e01c:	d019      	beq.n	801e052 <__sflush_r+0x132>
 801e01e:	89ab      	ldrh	r3, [r5, #12]
 801e020:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801e022:	e79a      	b.n	801df5a <__sflush_r+0x3a>
 801e024:	f8d8 1000 	ldr.w	r1, [r8]
 801e028:	2900      	cmp	r1, #0
 801e02a:	d0e1      	beq.n	801dff0 <__sflush_r+0xd0>
 801e02c:	291d      	cmp	r1, #29
 801e02e:	d007      	beq.n	801e040 <__sflush_r+0x120>
 801e030:	2916      	cmp	r1, #22
 801e032:	d005      	beq.n	801e040 <__sflush_r+0x120>
 801e034:	89ab      	ldrh	r3, [r5, #12]
 801e036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e03a:	81ab      	strh	r3, [r5, #12]
 801e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e040:	89ab      	ldrh	r3, [r5, #12]
 801e042:	692a      	ldr	r2, [r5, #16]
 801e044:	602a      	str	r2, [r5, #0]
 801e046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801e04a:	2200      	movs	r2, #0
 801e04c:	81ab      	strh	r3, [r5, #12]
 801e04e:	606a      	str	r2, [r5, #4]
 801e050:	e79c      	b.n	801df8c <__sflush_r+0x6c>
 801e052:	f8d8 3000 	ldr.w	r3, [r8]
 801e056:	2b00      	cmp	r3, #0
 801e058:	d0e1      	beq.n	801e01e <__sflush_r+0xfe>
 801e05a:	2b1d      	cmp	r3, #29
 801e05c:	d007      	beq.n	801e06e <__sflush_r+0x14e>
 801e05e:	2b16      	cmp	r3, #22
 801e060:	d005      	beq.n	801e06e <__sflush_r+0x14e>
 801e062:	89ab      	ldrh	r3, [r5, #12]
 801e064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e068:	81ab      	strh	r3, [r5, #12]
 801e06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e06e:	f8c8 4000 	str.w	r4, [r8]
 801e072:	e7b2      	b.n	801dfda <__sflush_r+0xba>

0801e074 <_fflush_r>:
 801e074:	b510      	push	{r4, lr}
 801e076:	4604      	mov	r4, r0
 801e078:	b082      	sub	sp, #8
 801e07a:	b108      	cbz	r0, 801e080 <_fflush_r+0xc>
 801e07c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e07e:	b153      	cbz	r3, 801e096 <_fflush_r+0x22>
 801e080:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801e084:	b908      	cbnz	r0, 801e08a <_fflush_r+0x16>
 801e086:	b002      	add	sp, #8
 801e088:	bd10      	pop	{r4, pc}
 801e08a:	4620      	mov	r0, r4
 801e08c:	b002      	add	sp, #8
 801e08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e092:	f7ff bf45 	b.w	801df20 <__sflush_r>
 801e096:	9101      	str	r1, [sp, #4]
 801e098:	f000 f880 	bl	801e19c <__sinit>
 801e09c:	9901      	ldr	r1, [sp, #4]
 801e09e:	e7ef      	b.n	801e080 <_fflush_r+0xc>

0801e0a0 <_cleanup_r>:
 801e0a0:	4901      	ldr	r1, [pc, #4]	; (801e0a8 <_cleanup_r+0x8>)
 801e0a2:	f000 bb99 	b.w	801e7d8 <_fwalk_reent>
 801e0a6:	bf00      	nop
 801e0a8:	0801fcb9 	.word	0x0801fcb9

0801e0ac <__sinit.part.1>:
 801e0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0b0:	4b35      	ldr	r3, [pc, #212]	; (801e188 <__sinit.part.1+0xdc>)
 801e0b2:	6845      	ldr	r5, [r0, #4]
 801e0b4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e0b6:	2400      	movs	r4, #0
 801e0b8:	4607      	mov	r7, r0
 801e0ba:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 801e0be:	2304      	movs	r3, #4
 801e0c0:	2103      	movs	r1, #3
 801e0c2:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 801e0c6:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 801e0ca:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 801e0ce:	b083      	sub	sp, #12
 801e0d0:	602c      	str	r4, [r5, #0]
 801e0d2:	606c      	str	r4, [r5, #4]
 801e0d4:	60ac      	str	r4, [r5, #8]
 801e0d6:	666c      	str	r4, [r5, #100]	; 0x64
 801e0d8:	81ec      	strh	r4, [r5, #14]
 801e0da:	612c      	str	r4, [r5, #16]
 801e0dc:	616c      	str	r4, [r5, #20]
 801e0de:	61ac      	str	r4, [r5, #24]
 801e0e0:	81ab      	strh	r3, [r5, #12]
 801e0e2:	4621      	mov	r1, r4
 801e0e4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 801e0e8:	2208      	movs	r2, #8
 801e0ea:	f7fb fa83 	bl	80195f4 <memset>
 801e0ee:	68be      	ldr	r6, [r7, #8]
 801e0f0:	f8df b098 	ldr.w	fp, [pc, #152]	; 801e18c <__sinit.part.1+0xe0>
 801e0f4:	f8df a098 	ldr.w	sl, [pc, #152]	; 801e190 <__sinit.part.1+0xe4>
 801e0f8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 801e194 <__sinit.part.1+0xe8>
 801e0fc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 801e198 <__sinit.part.1+0xec>
 801e100:	f8c5 b020 	str.w	fp, [r5, #32]
 801e104:	2301      	movs	r3, #1
 801e106:	2209      	movs	r2, #9
 801e108:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 801e10c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 801e110:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 801e114:	61ed      	str	r5, [r5, #28]
 801e116:	4621      	mov	r1, r4
 801e118:	81f3      	strh	r3, [r6, #14]
 801e11a:	81b2      	strh	r2, [r6, #12]
 801e11c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 801e120:	6034      	str	r4, [r6, #0]
 801e122:	6074      	str	r4, [r6, #4]
 801e124:	60b4      	str	r4, [r6, #8]
 801e126:	6674      	str	r4, [r6, #100]	; 0x64
 801e128:	6134      	str	r4, [r6, #16]
 801e12a:	6174      	str	r4, [r6, #20]
 801e12c:	61b4      	str	r4, [r6, #24]
 801e12e:	2208      	movs	r2, #8
 801e130:	9301      	str	r3, [sp, #4]
 801e132:	f7fb fa5f 	bl	80195f4 <memset>
 801e136:	68fd      	ldr	r5, [r7, #12]
 801e138:	61f6      	str	r6, [r6, #28]
 801e13a:	2012      	movs	r0, #18
 801e13c:	2202      	movs	r2, #2
 801e13e:	f8c6 b020 	str.w	fp, [r6, #32]
 801e142:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 801e146:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 801e14a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 801e14e:	4621      	mov	r1, r4
 801e150:	81a8      	strh	r0, [r5, #12]
 801e152:	81ea      	strh	r2, [r5, #14]
 801e154:	602c      	str	r4, [r5, #0]
 801e156:	606c      	str	r4, [r5, #4]
 801e158:	60ac      	str	r4, [r5, #8]
 801e15a:	666c      	str	r4, [r5, #100]	; 0x64
 801e15c:	612c      	str	r4, [r5, #16]
 801e15e:	616c      	str	r4, [r5, #20]
 801e160:	61ac      	str	r4, [r5, #24]
 801e162:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 801e166:	2208      	movs	r2, #8
 801e168:	f7fb fa44 	bl	80195f4 <memset>
 801e16c:	9b01      	ldr	r3, [sp, #4]
 801e16e:	61ed      	str	r5, [r5, #28]
 801e170:	f8c5 b020 	str.w	fp, [r5, #32]
 801e174:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 801e178:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 801e17c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 801e180:	63bb      	str	r3, [r7, #56]	; 0x38
 801e182:	b003      	add	sp, #12
 801e184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e188:	0801e0a1 	.word	0x0801e0a1
 801e18c:	0801f96d 	.word	0x0801f96d
 801e190:	0801f991 	.word	0x0801f991
 801e194:	0801f9c9 	.word	0x0801f9c9
 801e198:	0801f9e9 	.word	0x0801f9e9

0801e19c <__sinit>:
 801e19c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e19e:	b103      	cbz	r3, 801e1a2 <__sinit+0x6>
 801e1a0:	4770      	bx	lr
 801e1a2:	f7ff bf83 	b.w	801e0ac <__sinit.part.1>
 801e1a6:	bf00      	nop

0801e1a8 <__sfp_lock_acquire>:
 801e1a8:	4770      	bx	lr
 801e1aa:	bf00      	nop

0801e1ac <__sfp_lock_release>:
 801e1ac:	4770      	bx	lr
 801e1ae:	bf00      	nop

0801e1b0 <_fputwc_r>:
 801e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1b4:	8993      	ldrh	r3, [r2, #12]
 801e1b6:	4614      	mov	r4, r2
 801e1b8:	049a      	lsls	r2, r3, #18
 801e1ba:	b082      	sub	sp, #8
 801e1bc:	4607      	mov	r7, r0
 801e1be:	460e      	mov	r6, r1
 801e1c0:	d406      	bmi.n	801e1d0 <_fputwc_r+0x20>
 801e1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e1c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e1c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e1cc:	81a3      	strh	r3, [r4, #12]
 801e1ce:	6662      	str	r2, [r4, #100]	; 0x64
 801e1d0:	f000 fb30 	bl	801e834 <__locale_mb_cur_max>
 801e1d4:	2801      	cmp	r0, #1
 801e1d6:	d041      	beq.n	801e25c <_fputwc_r+0xac>
 801e1d8:	4638      	mov	r0, r7
 801e1da:	a901      	add	r1, sp, #4
 801e1dc:	4632      	mov	r2, r6
 801e1de:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801e1e2:	f001 fcdb 	bl	801fb9c <_wcrtomb_r>
 801e1e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e1ea:	4680      	mov	r8, r0
 801e1ec:	d02f      	beq.n	801e24e <_fputwc_r+0x9e>
 801e1ee:	2800      	cmp	r0, #0
 801e1f0:	d03c      	beq.n	801e26c <_fputwc_r+0xbc>
 801e1f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801e1f6:	2500      	movs	r5, #0
 801e1f8:	e009      	b.n	801e20e <_fputwc_r+0x5e>
 801e1fa:	6823      	ldr	r3, [r4, #0]
 801e1fc:	7019      	strb	r1, [r3, #0]
 801e1fe:	6823      	ldr	r3, [r4, #0]
 801e200:	3301      	adds	r3, #1
 801e202:	6023      	str	r3, [r4, #0]
 801e204:	3501      	adds	r5, #1
 801e206:	45a8      	cmp	r8, r5
 801e208:	d930      	bls.n	801e26c <_fputwc_r+0xbc>
 801e20a:	ab01      	add	r3, sp, #4
 801e20c:	5d59      	ldrb	r1, [r3, r5]
 801e20e:	68a3      	ldr	r3, [r4, #8]
 801e210:	3b01      	subs	r3, #1
 801e212:	2b00      	cmp	r3, #0
 801e214:	60a3      	str	r3, [r4, #8]
 801e216:	daf0      	bge.n	801e1fa <_fputwc_r+0x4a>
 801e218:	69a2      	ldr	r2, [r4, #24]
 801e21a:	4293      	cmp	r3, r2
 801e21c:	db07      	blt.n	801e22e <_fputwc_r+0x7e>
 801e21e:	6823      	ldr	r3, [r4, #0]
 801e220:	7019      	strb	r1, [r3, #0]
 801e222:	6823      	ldr	r3, [r4, #0]
 801e224:	7819      	ldrb	r1, [r3, #0]
 801e226:	290a      	cmp	r1, #10
 801e228:	f103 0301 	add.w	r3, r3, #1
 801e22c:	d1e9      	bne.n	801e202 <_fputwc_r+0x52>
 801e22e:	4638      	mov	r0, r7
 801e230:	4622      	mov	r2, r4
 801e232:	f001 fc5f 	bl	801faf4 <__swbuf_r>
 801e236:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 801e23a:	fab0 f080 	clz	r0, r0
 801e23e:	0940      	lsrs	r0, r0, #5
 801e240:	2800      	cmp	r0, #0
 801e242:	d0df      	beq.n	801e204 <_fputwc_r+0x54>
 801e244:	f04f 30ff 	mov.w	r0, #4294967295
 801e248:	b002      	add	sp, #8
 801e24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e24e:	89a3      	ldrh	r3, [r4, #12]
 801e250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e254:	81a3      	strh	r3, [r4, #12]
 801e256:	b002      	add	sp, #8
 801e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e25c:	1e73      	subs	r3, r6, #1
 801e25e:	2bfe      	cmp	r3, #254	; 0xfe
 801e260:	d8ba      	bhi.n	801e1d8 <_fputwc_r+0x28>
 801e262:	b2f1      	uxtb	r1, r6
 801e264:	4680      	mov	r8, r0
 801e266:	f88d 1004 	strb.w	r1, [sp, #4]
 801e26a:	e7c4      	b.n	801e1f6 <_fputwc_r+0x46>
 801e26c:	4630      	mov	r0, r6
 801e26e:	b002      	add	sp, #8
 801e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e274 <_malloc_trim_r>:
 801e274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e276:	4f23      	ldr	r7, [pc, #140]	; (801e304 <_malloc_trim_r+0x90>)
 801e278:	460c      	mov	r4, r1
 801e27a:	4606      	mov	r6, r0
 801e27c:	f000 fe2c 	bl	801eed8 <__malloc_lock>
 801e280:	68bb      	ldr	r3, [r7, #8]
 801e282:	685d      	ldr	r5, [r3, #4]
 801e284:	f025 0503 	bic.w	r5, r5, #3
 801e288:	1b29      	subs	r1, r5, r4
 801e28a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 801e28e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 801e292:	f021 010f 	bic.w	r1, r1, #15
 801e296:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 801e29a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 801e29e:	db07      	blt.n	801e2b0 <_malloc_trim_r+0x3c>
 801e2a0:	4630      	mov	r0, r6
 801e2a2:	2100      	movs	r1, #0
 801e2a4:	f001 fb06 	bl	801f8b4 <_sbrk_r>
 801e2a8:	68bb      	ldr	r3, [r7, #8]
 801e2aa:	442b      	add	r3, r5
 801e2ac:	4298      	cmp	r0, r3
 801e2ae:	d004      	beq.n	801e2ba <_malloc_trim_r+0x46>
 801e2b0:	4630      	mov	r0, r6
 801e2b2:	f000 fe13 	bl	801eedc <__malloc_unlock>
 801e2b6:	2000      	movs	r0, #0
 801e2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2ba:	4630      	mov	r0, r6
 801e2bc:	4261      	negs	r1, r4
 801e2be:	f001 faf9 	bl	801f8b4 <_sbrk_r>
 801e2c2:	3001      	adds	r0, #1
 801e2c4:	d00d      	beq.n	801e2e2 <_malloc_trim_r+0x6e>
 801e2c6:	4b10      	ldr	r3, [pc, #64]	; (801e308 <_malloc_trim_r+0x94>)
 801e2c8:	68ba      	ldr	r2, [r7, #8]
 801e2ca:	6819      	ldr	r1, [r3, #0]
 801e2cc:	1b2d      	subs	r5, r5, r4
 801e2ce:	f045 0501 	orr.w	r5, r5, #1
 801e2d2:	4630      	mov	r0, r6
 801e2d4:	1b09      	subs	r1, r1, r4
 801e2d6:	6055      	str	r5, [r2, #4]
 801e2d8:	6019      	str	r1, [r3, #0]
 801e2da:	f000 fdff 	bl	801eedc <__malloc_unlock>
 801e2de:	2001      	movs	r0, #1
 801e2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2e2:	4630      	mov	r0, r6
 801e2e4:	2100      	movs	r1, #0
 801e2e6:	f001 fae5 	bl	801f8b4 <_sbrk_r>
 801e2ea:	68ba      	ldr	r2, [r7, #8]
 801e2ec:	1a83      	subs	r3, r0, r2
 801e2ee:	2b0f      	cmp	r3, #15
 801e2f0:	ddde      	ble.n	801e2b0 <_malloc_trim_r+0x3c>
 801e2f2:	4c06      	ldr	r4, [pc, #24]	; (801e30c <_malloc_trim_r+0x98>)
 801e2f4:	4904      	ldr	r1, [pc, #16]	; (801e308 <_malloc_trim_r+0x94>)
 801e2f6:	6824      	ldr	r4, [r4, #0]
 801e2f8:	f043 0301 	orr.w	r3, r3, #1
 801e2fc:	1b00      	subs	r0, r0, r4
 801e2fe:	6053      	str	r3, [r2, #4]
 801e300:	6008      	str	r0, [r1, #0]
 801e302:	e7d5      	b.n	801e2b0 <_malloc_trim_r+0x3c>
 801e304:	200007f8 	.word	0x200007f8
 801e308:	2000e290 	.word	0x2000e290
 801e30c:	20000c04 	.word	0x20000c04

0801e310 <_free_r>:
 801e310:	2900      	cmp	r1, #0
 801e312:	d04e      	beq.n	801e3b2 <_free_r+0xa2>
 801e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e318:	460c      	mov	r4, r1
 801e31a:	4680      	mov	r8, r0
 801e31c:	f000 fddc 	bl	801eed8 <__malloc_lock>
 801e320:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801e324:	4962      	ldr	r1, [pc, #392]	; (801e4b0 <_free_r+0x1a0>)
 801e326:	f027 0201 	bic.w	r2, r7, #1
 801e32a:	f1a4 0508 	sub.w	r5, r4, #8
 801e32e:	18ab      	adds	r3, r5, r2
 801e330:	688e      	ldr	r6, [r1, #8]
 801e332:	6858      	ldr	r0, [r3, #4]
 801e334:	429e      	cmp	r6, r3
 801e336:	f020 0003 	bic.w	r0, r0, #3
 801e33a:	d05a      	beq.n	801e3f2 <_free_r+0xe2>
 801e33c:	07fe      	lsls	r6, r7, #31
 801e33e:	6058      	str	r0, [r3, #4]
 801e340:	d40b      	bmi.n	801e35a <_free_r+0x4a>
 801e342:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801e346:	1bed      	subs	r5, r5, r7
 801e348:	f101 0e08 	add.w	lr, r1, #8
 801e34c:	68ac      	ldr	r4, [r5, #8]
 801e34e:	4574      	cmp	r4, lr
 801e350:	443a      	add	r2, r7
 801e352:	d067      	beq.n	801e424 <_free_r+0x114>
 801e354:	68ef      	ldr	r7, [r5, #12]
 801e356:	60e7      	str	r7, [r4, #12]
 801e358:	60bc      	str	r4, [r7, #8]
 801e35a:	181c      	adds	r4, r3, r0
 801e35c:	6864      	ldr	r4, [r4, #4]
 801e35e:	07e4      	lsls	r4, r4, #31
 801e360:	d40c      	bmi.n	801e37c <_free_r+0x6c>
 801e362:	4f54      	ldr	r7, [pc, #336]	; (801e4b4 <_free_r+0x1a4>)
 801e364:	689c      	ldr	r4, [r3, #8]
 801e366:	42bc      	cmp	r4, r7
 801e368:	4402      	add	r2, r0
 801e36a:	d07c      	beq.n	801e466 <_free_r+0x156>
 801e36c:	68d8      	ldr	r0, [r3, #12]
 801e36e:	60e0      	str	r0, [r4, #12]
 801e370:	f042 0301 	orr.w	r3, r2, #1
 801e374:	6084      	str	r4, [r0, #8]
 801e376:	606b      	str	r3, [r5, #4]
 801e378:	50aa      	str	r2, [r5, r2]
 801e37a:	e003      	b.n	801e384 <_free_r+0x74>
 801e37c:	f042 0301 	orr.w	r3, r2, #1
 801e380:	606b      	str	r3, [r5, #4]
 801e382:	50aa      	str	r2, [r5, r2]
 801e384:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801e388:	d214      	bcs.n	801e3b4 <_free_r+0xa4>
 801e38a:	08d2      	lsrs	r2, r2, #3
 801e38c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 801e390:	6848      	ldr	r0, [r1, #4]
 801e392:	689f      	ldr	r7, [r3, #8]
 801e394:	60af      	str	r7, [r5, #8]
 801e396:	1092      	asrs	r2, r2, #2
 801e398:	2401      	movs	r4, #1
 801e39a:	fa04 f202 	lsl.w	r2, r4, r2
 801e39e:	4310      	orrs	r0, r2
 801e3a0:	60eb      	str	r3, [r5, #12]
 801e3a2:	6048      	str	r0, [r1, #4]
 801e3a4:	609d      	str	r5, [r3, #8]
 801e3a6:	60fd      	str	r5, [r7, #12]
 801e3a8:	4640      	mov	r0, r8
 801e3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e3ae:	f000 bd95 	b.w	801eedc <__malloc_unlock>
 801e3b2:	4770      	bx	lr
 801e3b4:	0a53      	lsrs	r3, r2, #9
 801e3b6:	2b04      	cmp	r3, #4
 801e3b8:	d847      	bhi.n	801e44a <_free_r+0x13a>
 801e3ba:	0993      	lsrs	r3, r2, #6
 801e3bc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801e3c0:	0060      	lsls	r0, r4, #1
 801e3c2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801e3c6:	493a      	ldr	r1, [pc, #232]	; (801e4b0 <_free_r+0x1a0>)
 801e3c8:	6883      	ldr	r3, [r0, #8]
 801e3ca:	4283      	cmp	r3, r0
 801e3cc:	d043      	beq.n	801e456 <_free_r+0x146>
 801e3ce:	6859      	ldr	r1, [r3, #4]
 801e3d0:	f021 0103 	bic.w	r1, r1, #3
 801e3d4:	4291      	cmp	r1, r2
 801e3d6:	d902      	bls.n	801e3de <_free_r+0xce>
 801e3d8:	689b      	ldr	r3, [r3, #8]
 801e3da:	4298      	cmp	r0, r3
 801e3dc:	d1f7      	bne.n	801e3ce <_free_r+0xbe>
 801e3de:	68da      	ldr	r2, [r3, #12]
 801e3e0:	60ea      	str	r2, [r5, #12]
 801e3e2:	60ab      	str	r3, [r5, #8]
 801e3e4:	4640      	mov	r0, r8
 801e3e6:	6095      	str	r5, [r2, #8]
 801e3e8:	60dd      	str	r5, [r3, #12]
 801e3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e3ee:	f000 bd75 	b.w	801eedc <__malloc_unlock>
 801e3f2:	07ff      	lsls	r7, r7, #31
 801e3f4:	4402      	add	r2, r0
 801e3f6:	d407      	bmi.n	801e408 <_free_r+0xf8>
 801e3f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801e3fc:	1aed      	subs	r5, r5, r3
 801e3fe:	441a      	add	r2, r3
 801e400:	68a8      	ldr	r0, [r5, #8]
 801e402:	68eb      	ldr	r3, [r5, #12]
 801e404:	60c3      	str	r3, [r0, #12]
 801e406:	6098      	str	r0, [r3, #8]
 801e408:	4b2b      	ldr	r3, [pc, #172]	; (801e4b8 <_free_r+0x1a8>)
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	f042 0001 	orr.w	r0, r2, #1
 801e410:	429a      	cmp	r2, r3
 801e412:	6068      	str	r0, [r5, #4]
 801e414:	608d      	str	r5, [r1, #8]
 801e416:	d3c7      	bcc.n	801e3a8 <_free_r+0x98>
 801e418:	4b28      	ldr	r3, [pc, #160]	; (801e4bc <_free_r+0x1ac>)
 801e41a:	4640      	mov	r0, r8
 801e41c:	6819      	ldr	r1, [r3, #0]
 801e41e:	f7ff ff29 	bl	801e274 <_malloc_trim_r>
 801e422:	e7c1      	b.n	801e3a8 <_free_r+0x98>
 801e424:	1819      	adds	r1, r3, r0
 801e426:	6849      	ldr	r1, [r1, #4]
 801e428:	07c9      	lsls	r1, r1, #31
 801e42a:	d409      	bmi.n	801e440 <_free_r+0x130>
 801e42c:	68d9      	ldr	r1, [r3, #12]
 801e42e:	689b      	ldr	r3, [r3, #8]
 801e430:	4402      	add	r2, r0
 801e432:	f042 0001 	orr.w	r0, r2, #1
 801e436:	60d9      	str	r1, [r3, #12]
 801e438:	608b      	str	r3, [r1, #8]
 801e43a:	6068      	str	r0, [r5, #4]
 801e43c:	50aa      	str	r2, [r5, r2]
 801e43e:	e7b3      	b.n	801e3a8 <_free_r+0x98>
 801e440:	f042 0301 	orr.w	r3, r2, #1
 801e444:	606b      	str	r3, [r5, #4]
 801e446:	50aa      	str	r2, [r5, r2]
 801e448:	e7ae      	b.n	801e3a8 <_free_r+0x98>
 801e44a:	2b14      	cmp	r3, #20
 801e44c:	d814      	bhi.n	801e478 <_free_r+0x168>
 801e44e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 801e452:	0060      	lsls	r0, r4, #1
 801e454:	e7b5      	b.n	801e3c2 <_free_r+0xb2>
 801e456:	684a      	ldr	r2, [r1, #4]
 801e458:	10a4      	asrs	r4, r4, #2
 801e45a:	2001      	movs	r0, #1
 801e45c:	40a0      	lsls	r0, r4
 801e45e:	4302      	orrs	r2, r0
 801e460:	604a      	str	r2, [r1, #4]
 801e462:	461a      	mov	r2, r3
 801e464:	e7bc      	b.n	801e3e0 <_free_r+0xd0>
 801e466:	f042 0301 	orr.w	r3, r2, #1
 801e46a:	614d      	str	r5, [r1, #20]
 801e46c:	610d      	str	r5, [r1, #16]
 801e46e:	60ec      	str	r4, [r5, #12]
 801e470:	60ac      	str	r4, [r5, #8]
 801e472:	606b      	str	r3, [r5, #4]
 801e474:	50aa      	str	r2, [r5, r2]
 801e476:	e797      	b.n	801e3a8 <_free_r+0x98>
 801e478:	2b54      	cmp	r3, #84	; 0x54
 801e47a:	d804      	bhi.n	801e486 <_free_r+0x176>
 801e47c:	0b13      	lsrs	r3, r2, #12
 801e47e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 801e482:	0060      	lsls	r0, r4, #1
 801e484:	e79d      	b.n	801e3c2 <_free_r+0xb2>
 801e486:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801e48a:	d804      	bhi.n	801e496 <_free_r+0x186>
 801e48c:	0bd3      	lsrs	r3, r2, #15
 801e48e:	f103 0477 	add.w	r4, r3, #119	; 0x77
 801e492:	0060      	lsls	r0, r4, #1
 801e494:	e795      	b.n	801e3c2 <_free_r+0xb2>
 801e496:	f240 5054 	movw	r0, #1364	; 0x554
 801e49a:	4283      	cmp	r3, r0
 801e49c:	d804      	bhi.n	801e4a8 <_free_r+0x198>
 801e49e:	0c93      	lsrs	r3, r2, #18
 801e4a0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801e4a4:	0060      	lsls	r0, r4, #1
 801e4a6:	e78c      	b.n	801e3c2 <_free_r+0xb2>
 801e4a8:	20fc      	movs	r0, #252	; 0xfc
 801e4aa:	247e      	movs	r4, #126	; 0x7e
 801e4ac:	e789      	b.n	801e3c2 <_free_r+0xb2>
 801e4ae:	bf00      	nop
 801e4b0:	200007f8 	.word	0x200007f8
 801e4b4:	20000800 	.word	0x20000800
 801e4b8:	20000c00 	.word	0x20000c00
 801e4bc:	2000e28c 	.word	0x2000e28c

0801e4c0 <__sfvwrite_r>:
 801e4c0:	6893      	ldr	r3, [r2, #8]
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d07a      	beq.n	801e5bc <__sfvwrite_r+0xfc>
 801e4c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4ca:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 801e4ce:	f01e 0f08 	tst.w	lr, #8
 801e4d2:	b083      	sub	sp, #12
 801e4d4:	460c      	mov	r4, r1
 801e4d6:	4681      	mov	r9, r0
 801e4d8:	4616      	mov	r6, r2
 801e4da:	d026      	beq.n	801e52a <__sfvwrite_r+0x6a>
 801e4dc:	690b      	ldr	r3, [r1, #16]
 801e4de:	b323      	cbz	r3, 801e52a <__sfvwrite_r+0x6a>
 801e4e0:	f00e 0802 	and.w	r8, lr, #2
 801e4e4:	fa1f f088 	uxth.w	r0, r8
 801e4e8:	6835      	ldr	r5, [r6, #0]
 801e4ea:	b370      	cbz	r0, 801e54a <__sfvwrite_r+0x8a>
 801e4ec:	f04f 0a00 	mov.w	sl, #0
 801e4f0:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 801e7d4 <__sfvwrite_r+0x314>
 801e4f4:	46d0      	mov	r8, sl
 801e4f6:	45d8      	cmp	r8, fp
 801e4f8:	4643      	mov	r3, r8
 801e4fa:	4652      	mov	r2, sl
 801e4fc:	bf28      	it	cs
 801e4fe:	465b      	movcs	r3, fp
 801e500:	4648      	mov	r0, r9
 801e502:	f1b8 0f00 	cmp.w	r8, #0
 801e506:	d053      	beq.n	801e5b0 <__sfvwrite_r+0xf0>
 801e508:	69e1      	ldr	r1, [r4, #28]
 801e50a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801e50c:	47b8      	blx	r7
 801e50e:	2800      	cmp	r0, #0
 801e510:	dd73      	ble.n	801e5fa <__sfvwrite_r+0x13a>
 801e512:	68b3      	ldr	r3, [r6, #8]
 801e514:	1a1b      	subs	r3, r3, r0
 801e516:	4482      	add	sl, r0
 801e518:	ebc0 0808 	rsb	r8, r0, r8
 801e51c:	60b3      	str	r3, [r6, #8]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d1e9      	bne.n	801e4f6 <__sfvwrite_r+0x36>
 801e522:	2000      	movs	r0, #0
 801e524:	b003      	add	sp, #12
 801e526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e52a:	4648      	mov	r0, r9
 801e52c:	4621      	mov	r1, r4
 801e52e:	f7fe fcab 	bl	801ce88 <__swsetup_r>
 801e532:	2800      	cmp	r0, #0
 801e534:	f040 8145 	bne.w	801e7c2 <__sfvwrite_r+0x302>
 801e538:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 801e53c:	6835      	ldr	r5, [r6, #0]
 801e53e:	f00e 0802 	and.w	r8, lr, #2
 801e542:	fa1f f088 	uxth.w	r0, r8
 801e546:	2800      	cmp	r0, #0
 801e548:	d1d0      	bne.n	801e4ec <__sfvwrite_r+0x2c>
 801e54a:	f01e 0b01 	ands.w	fp, lr, #1
 801e54e:	d15d      	bne.n	801e60c <__sfvwrite_r+0x14c>
 801e550:	46d8      	mov	r8, fp
 801e552:	f1b8 0f00 	cmp.w	r8, #0
 801e556:	d025      	beq.n	801e5a4 <__sfvwrite_r+0xe4>
 801e558:	f41e 7f00 	tst.w	lr, #512	; 0x200
 801e55c:	68a7      	ldr	r7, [r4, #8]
 801e55e:	d02f      	beq.n	801e5c0 <__sfvwrite_r+0x100>
 801e560:	45b8      	cmp	r8, r7
 801e562:	46ba      	mov	sl, r7
 801e564:	f0c0 80a9 	bcc.w	801e6ba <__sfvwrite_r+0x1fa>
 801e568:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 801e56c:	f040 80b6 	bne.w	801e6dc <__sfvwrite_r+0x21c>
 801e570:	6820      	ldr	r0, [r4, #0]
 801e572:	4652      	mov	r2, sl
 801e574:	4659      	mov	r1, fp
 801e576:	f7fa ffd9 	bl	801952c <memmove>
 801e57a:	68a0      	ldr	r0, [r4, #8]
 801e57c:	6822      	ldr	r2, [r4, #0]
 801e57e:	1bc0      	subs	r0, r0, r7
 801e580:	eb02 030a 	add.w	r3, r2, sl
 801e584:	60a0      	str	r0, [r4, #8]
 801e586:	6023      	str	r3, [r4, #0]
 801e588:	4640      	mov	r0, r8
 801e58a:	68b3      	ldr	r3, [r6, #8]
 801e58c:	1a1b      	subs	r3, r3, r0
 801e58e:	4483      	add	fp, r0
 801e590:	ebc0 0808 	rsb	r8, r0, r8
 801e594:	60b3      	str	r3, [r6, #8]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d0c3      	beq.n	801e522 <__sfvwrite_r+0x62>
 801e59a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 801e59e:	f1b8 0f00 	cmp.w	r8, #0
 801e5a2:	d1d9      	bne.n	801e558 <__sfvwrite_r+0x98>
 801e5a4:	f8d5 b000 	ldr.w	fp, [r5]
 801e5a8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 801e5ac:	3508      	adds	r5, #8
 801e5ae:	e7d0      	b.n	801e552 <__sfvwrite_r+0x92>
 801e5b0:	f8d5 a000 	ldr.w	sl, [r5]
 801e5b4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 801e5b8:	3508      	adds	r5, #8
 801e5ba:	e79c      	b.n	801e4f6 <__sfvwrite_r+0x36>
 801e5bc:	2000      	movs	r0, #0
 801e5be:	4770      	bx	lr
 801e5c0:	6820      	ldr	r0, [r4, #0]
 801e5c2:	6923      	ldr	r3, [r4, #16]
 801e5c4:	4298      	cmp	r0, r3
 801e5c6:	d803      	bhi.n	801e5d0 <__sfvwrite_r+0x110>
 801e5c8:	6962      	ldr	r2, [r4, #20]
 801e5ca:	4590      	cmp	r8, r2
 801e5cc:	f080 80b9 	bcs.w	801e742 <__sfvwrite_r+0x282>
 801e5d0:	4547      	cmp	r7, r8
 801e5d2:	bf28      	it	cs
 801e5d4:	4647      	movcs	r7, r8
 801e5d6:	463a      	mov	r2, r7
 801e5d8:	4659      	mov	r1, fp
 801e5da:	f7fa ffa7 	bl	801952c <memmove>
 801e5de:	68a3      	ldr	r3, [r4, #8]
 801e5e0:	6822      	ldr	r2, [r4, #0]
 801e5e2:	1bdb      	subs	r3, r3, r7
 801e5e4:	443a      	add	r2, r7
 801e5e6:	60a3      	str	r3, [r4, #8]
 801e5e8:	6022      	str	r2, [r4, #0]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d14a      	bne.n	801e684 <__sfvwrite_r+0x1c4>
 801e5ee:	4648      	mov	r0, r9
 801e5f0:	4621      	mov	r1, r4
 801e5f2:	f7ff fd3f 	bl	801e074 <_fflush_r>
 801e5f6:	2800      	cmp	r0, #0
 801e5f8:	d044      	beq.n	801e684 <__sfvwrite_r+0x1c4>
 801e5fa:	89a3      	ldrh	r3, [r4, #12]
 801e5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e600:	f04f 30ff 	mov.w	r0, #4294967295
 801e604:	81a3      	strh	r3, [r4, #12]
 801e606:	b003      	add	sp, #12
 801e608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e60c:	4680      	mov	r8, r0
 801e60e:	9000      	str	r0, [sp, #0]
 801e610:	4683      	mov	fp, r0
 801e612:	4682      	mov	sl, r0
 801e614:	f1ba 0f00 	cmp.w	sl, #0
 801e618:	d02c      	beq.n	801e674 <__sfvwrite_r+0x1b4>
 801e61a:	9b00      	ldr	r3, [sp, #0]
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d050      	beq.n	801e6c2 <__sfvwrite_r+0x202>
 801e620:	6820      	ldr	r0, [r4, #0]
 801e622:	6921      	ldr	r1, [r4, #16]
 801e624:	f8d4 e008 	ldr.w	lr, [r4, #8]
 801e628:	6962      	ldr	r2, [r4, #20]
 801e62a:	45d0      	cmp	r8, sl
 801e62c:	4643      	mov	r3, r8
 801e62e:	bf28      	it	cs
 801e630:	4653      	movcs	r3, sl
 801e632:	4288      	cmp	r0, r1
 801e634:	461f      	mov	r7, r3
 801e636:	d904      	bls.n	801e642 <__sfvwrite_r+0x182>
 801e638:	eb0e 0c02 	add.w	ip, lr, r2
 801e63c:	4563      	cmp	r3, ip
 801e63e:	f300 8092 	bgt.w	801e766 <__sfvwrite_r+0x2a6>
 801e642:	4293      	cmp	r3, r2
 801e644:	db20      	blt.n	801e688 <__sfvwrite_r+0x1c8>
 801e646:	4613      	mov	r3, r2
 801e648:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801e64a:	69e1      	ldr	r1, [r4, #28]
 801e64c:	4648      	mov	r0, r9
 801e64e:	465a      	mov	r2, fp
 801e650:	47b8      	blx	r7
 801e652:	1e07      	subs	r7, r0, #0
 801e654:	ddd1      	ble.n	801e5fa <__sfvwrite_r+0x13a>
 801e656:	ebb8 0807 	subs.w	r8, r8, r7
 801e65a:	d025      	beq.n	801e6a8 <__sfvwrite_r+0x1e8>
 801e65c:	68b3      	ldr	r3, [r6, #8]
 801e65e:	1bdb      	subs	r3, r3, r7
 801e660:	44bb      	add	fp, r7
 801e662:	ebc7 0a0a 	rsb	sl, r7, sl
 801e666:	60b3      	str	r3, [r6, #8]
 801e668:	2b00      	cmp	r3, #0
 801e66a:	f43f af5a 	beq.w	801e522 <__sfvwrite_r+0x62>
 801e66e:	f1ba 0f00 	cmp.w	sl, #0
 801e672:	d1d2      	bne.n	801e61a <__sfvwrite_r+0x15a>
 801e674:	2300      	movs	r3, #0
 801e676:	f8d5 b000 	ldr.w	fp, [r5]
 801e67a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801e67e:	9300      	str	r3, [sp, #0]
 801e680:	3508      	adds	r5, #8
 801e682:	e7c7      	b.n	801e614 <__sfvwrite_r+0x154>
 801e684:	4638      	mov	r0, r7
 801e686:	e780      	b.n	801e58a <__sfvwrite_r+0xca>
 801e688:	461a      	mov	r2, r3
 801e68a:	4659      	mov	r1, fp
 801e68c:	9301      	str	r3, [sp, #4]
 801e68e:	f7fa ff4d 	bl	801952c <memmove>
 801e692:	68a2      	ldr	r2, [r4, #8]
 801e694:	6821      	ldr	r1, [r4, #0]
 801e696:	9b01      	ldr	r3, [sp, #4]
 801e698:	ebb8 0807 	subs.w	r8, r8, r7
 801e69c:	eba2 0203 	sub.w	r2, r2, r3
 801e6a0:	440b      	add	r3, r1
 801e6a2:	60a2      	str	r2, [r4, #8]
 801e6a4:	6023      	str	r3, [r4, #0]
 801e6a6:	d1d9      	bne.n	801e65c <__sfvwrite_r+0x19c>
 801e6a8:	4648      	mov	r0, r9
 801e6aa:	4621      	mov	r1, r4
 801e6ac:	f7ff fce2 	bl	801e074 <_fflush_r>
 801e6b0:	2800      	cmp	r0, #0
 801e6b2:	d1a2      	bne.n	801e5fa <__sfvwrite_r+0x13a>
 801e6b4:	f8cd 8000 	str.w	r8, [sp]
 801e6b8:	e7d0      	b.n	801e65c <__sfvwrite_r+0x19c>
 801e6ba:	6820      	ldr	r0, [r4, #0]
 801e6bc:	4647      	mov	r7, r8
 801e6be:	46c2      	mov	sl, r8
 801e6c0:	e757      	b.n	801e572 <__sfvwrite_r+0xb2>
 801e6c2:	4658      	mov	r0, fp
 801e6c4:	210a      	movs	r1, #10
 801e6c6:	4652      	mov	r2, sl
 801e6c8:	f000 fbbc 	bl	801ee44 <memchr>
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	d073      	beq.n	801e7b8 <__sfvwrite_r+0x2f8>
 801e6d0:	3001      	adds	r0, #1
 801e6d2:	2301      	movs	r3, #1
 801e6d4:	ebcb 0800 	rsb	r8, fp, r0
 801e6d8:	9300      	str	r3, [sp, #0]
 801e6da:	e7a1      	b.n	801e620 <__sfvwrite_r+0x160>
 801e6dc:	6967      	ldr	r7, [r4, #20]
 801e6de:	6921      	ldr	r1, [r4, #16]
 801e6e0:	6823      	ldr	r3, [r4, #0]
 801e6e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e6e6:	1a5b      	subs	r3, r3, r1
 801e6e8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801e6ec:	1c58      	adds	r0, r3, #1
 801e6ee:	107f      	asrs	r7, r7, #1
 801e6f0:	4440      	add	r0, r8
 801e6f2:	4287      	cmp	r7, r0
 801e6f4:	463a      	mov	r2, r7
 801e6f6:	bf3c      	itt	cc
 801e6f8:	4607      	movcc	r7, r0
 801e6fa:	463a      	movcc	r2, r7
 801e6fc:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 801e700:	9300      	str	r3, [sp, #0]
 801e702:	d046      	beq.n	801e792 <__sfvwrite_r+0x2d2>
 801e704:	4611      	mov	r1, r2
 801e706:	4648      	mov	r0, r9
 801e708:	f000 f90e 	bl	801e928 <_malloc_r>
 801e70c:	9b00      	ldr	r3, [sp, #0]
 801e70e:	4682      	mov	sl, r0
 801e710:	2800      	cmp	r0, #0
 801e712:	d059      	beq.n	801e7c8 <__sfvwrite_r+0x308>
 801e714:	461a      	mov	r2, r3
 801e716:	6921      	ldr	r1, [r4, #16]
 801e718:	9300      	str	r3, [sp, #0]
 801e71a:	f7e2 fc7b 	bl	8001014 <memcpy>
 801e71e:	89a2      	ldrh	r2, [r4, #12]
 801e720:	9b00      	ldr	r3, [sp, #0]
 801e722:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801e726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801e72a:	81a2      	strh	r2, [r4, #12]
 801e72c:	eb0a 0003 	add.w	r0, sl, r3
 801e730:	1afb      	subs	r3, r7, r3
 801e732:	f8c4 a010 	str.w	sl, [r4, #16]
 801e736:	6167      	str	r7, [r4, #20]
 801e738:	6020      	str	r0, [r4, #0]
 801e73a:	60a3      	str	r3, [r4, #8]
 801e73c:	4647      	mov	r7, r8
 801e73e:	46c2      	mov	sl, r8
 801e740:	e717      	b.n	801e572 <__sfvwrite_r+0xb2>
 801e742:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801e746:	4543      	cmp	r3, r8
 801e748:	bf28      	it	cs
 801e74a:	4643      	movcs	r3, r8
 801e74c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801e74e:	fb93 f3f2 	sdiv	r3, r3, r2
 801e752:	4648      	mov	r0, r9
 801e754:	fb03 f302 	mul.w	r3, r3, r2
 801e758:	69e1      	ldr	r1, [r4, #28]
 801e75a:	465a      	mov	r2, fp
 801e75c:	47b8      	blx	r7
 801e75e:	2800      	cmp	r0, #0
 801e760:	f73f af13 	bgt.w	801e58a <__sfvwrite_r+0xca>
 801e764:	e749      	b.n	801e5fa <__sfvwrite_r+0x13a>
 801e766:	4662      	mov	r2, ip
 801e768:	4659      	mov	r1, fp
 801e76a:	f8cd c004 	str.w	ip, [sp, #4]
 801e76e:	f7fa fedd 	bl	801952c <memmove>
 801e772:	6823      	ldr	r3, [r4, #0]
 801e774:	f8dd c004 	ldr.w	ip, [sp, #4]
 801e778:	4463      	add	r3, ip
 801e77a:	6023      	str	r3, [r4, #0]
 801e77c:	4648      	mov	r0, r9
 801e77e:	4621      	mov	r1, r4
 801e780:	f7ff fc78 	bl	801e074 <_fflush_r>
 801e784:	f8dd c004 	ldr.w	ip, [sp, #4]
 801e788:	2800      	cmp	r0, #0
 801e78a:	f47f af36 	bne.w	801e5fa <__sfvwrite_r+0x13a>
 801e78e:	4667      	mov	r7, ip
 801e790:	e761      	b.n	801e656 <__sfvwrite_r+0x196>
 801e792:	4648      	mov	r0, r9
 801e794:	f000 fe98 	bl	801f4c8 <_realloc_r>
 801e798:	9b00      	ldr	r3, [sp, #0]
 801e79a:	4682      	mov	sl, r0
 801e79c:	2800      	cmp	r0, #0
 801e79e:	d1c5      	bne.n	801e72c <__sfvwrite_r+0x26c>
 801e7a0:	4648      	mov	r0, r9
 801e7a2:	6921      	ldr	r1, [r4, #16]
 801e7a4:	f7ff fdb4 	bl	801e310 <_free_r>
 801e7a8:	89a3      	ldrh	r3, [r4, #12]
 801e7aa:	220c      	movs	r2, #12
 801e7ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e7b0:	b29b      	uxth	r3, r3
 801e7b2:	f8c9 2000 	str.w	r2, [r9]
 801e7b6:	e721      	b.n	801e5fc <__sfvwrite_r+0x13c>
 801e7b8:	2301      	movs	r3, #1
 801e7ba:	f10a 0801 	add.w	r8, sl, #1
 801e7be:	9300      	str	r3, [sp, #0]
 801e7c0:	e72e      	b.n	801e620 <__sfvwrite_r+0x160>
 801e7c2:	f04f 30ff 	mov.w	r0, #4294967295
 801e7c6:	e6ad      	b.n	801e524 <__sfvwrite_r+0x64>
 801e7c8:	230c      	movs	r3, #12
 801e7ca:	f8c9 3000 	str.w	r3, [r9]
 801e7ce:	89a3      	ldrh	r3, [r4, #12]
 801e7d0:	e714      	b.n	801e5fc <__sfvwrite_r+0x13c>
 801e7d2:	bf00      	nop
 801e7d4:	7ffffc00 	.word	0x7ffffc00

0801e7d8 <_fwalk_reent>:
 801e7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 801e7e0:	d01f      	beq.n	801e822 <_fwalk_reent+0x4a>
 801e7e2:	4688      	mov	r8, r1
 801e7e4:	4606      	mov	r6, r0
 801e7e6:	f04f 0900 	mov.w	r9, #0
 801e7ea:	687d      	ldr	r5, [r7, #4]
 801e7ec:	68bc      	ldr	r4, [r7, #8]
 801e7ee:	3d01      	subs	r5, #1
 801e7f0:	d411      	bmi.n	801e816 <_fwalk_reent+0x3e>
 801e7f2:	89a3      	ldrh	r3, [r4, #12]
 801e7f4:	2b01      	cmp	r3, #1
 801e7f6:	f105 35ff 	add.w	r5, r5, #4294967295
 801e7fa:	d908      	bls.n	801e80e <_fwalk_reent+0x36>
 801e7fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801e800:	3301      	adds	r3, #1
 801e802:	4621      	mov	r1, r4
 801e804:	4630      	mov	r0, r6
 801e806:	d002      	beq.n	801e80e <_fwalk_reent+0x36>
 801e808:	47c0      	blx	r8
 801e80a:	ea49 0900 	orr.w	r9, r9, r0
 801e80e:	1c6b      	adds	r3, r5, #1
 801e810:	f104 0468 	add.w	r4, r4, #104	; 0x68
 801e814:	d1ed      	bne.n	801e7f2 <_fwalk_reent+0x1a>
 801e816:	683f      	ldr	r7, [r7, #0]
 801e818:	2f00      	cmp	r7, #0
 801e81a:	d1e6      	bne.n	801e7ea <_fwalk_reent+0x12>
 801e81c:	4648      	mov	r0, r9
 801e81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e822:	46b9      	mov	r9, r7
 801e824:	4648      	mov	r0, r9
 801e826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e82a:	bf00      	nop

0801e82c <__locale_charset>:
 801e82c:	4800      	ldr	r0, [pc, #0]	; (801e830 <__locale_charset+0x4>)
 801e82e:	4770      	bx	lr
 801e830:	200007d4 	.word	0x200007d4

0801e834 <__locale_mb_cur_max>:
 801e834:	4b01      	ldr	r3, [pc, #4]	; (801e83c <__locale_mb_cur_max+0x8>)
 801e836:	6818      	ldr	r0, [r3, #0]
 801e838:	4770      	bx	lr
 801e83a:	bf00      	nop
 801e83c:	200007f4 	.word	0x200007f4

0801e840 <_localeconv_r>:
 801e840:	4800      	ldr	r0, [pc, #0]	; (801e844 <_localeconv_r+0x4>)
 801e842:	4770      	bx	lr
 801e844:	2000079c 	.word	0x2000079c

0801e848 <__smakebuf_r>:
 801e848:	898b      	ldrh	r3, [r1, #12]
 801e84a:	b29a      	uxth	r2, r3
 801e84c:	f012 0f02 	tst.w	r2, #2
 801e850:	d13c      	bne.n	801e8cc <__smakebuf_r+0x84>
 801e852:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e854:	460c      	mov	r4, r1
 801e856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e85a:	2900      	cmp	r1, #0
 801e85c:	b091      	sub	sp, #68	; 0x44
 801e85e:	4605      	mov	r5, r0
 801e860:	db19      	blt.n	801e896 <__smakebuf_r+0x4e>
 801e862:	aa01      	add	r2, sp, #4
 801e864:	f001 fa6a 	bl	801fd3c <_fstat_r>
 801e868:	2800      	cmp	r0, #0
 801e86a:	db12      	blt.n	801e892 <__smakebuf_r+0x4a>
 801e86c:	9b02      	ldr	r3, [sp, #8]
 801e86e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801e872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e876:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 801e87a:	fab7 f787 	clz	r7, r7
 801e87e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801e882:	d02a      	beq.n	801e8da <__smakebuf_r+0x92>
 801e884:	89a3      	ldrh	r3, [r4, #12]
 801e886:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e88a:	81a3      	strh	r3, [r4, #12]
 801e88c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801e890:	e00b      	b.n	801e8aa <__smakebuf_r+0x62>
 801e892:	89a3      	ldrh	r3, [r4, #12]
 801e894:	b29a      	uxth	r2, r3
 801e896:	f012 0f80 	tst.w	r2, #128	; 0x80
 801e89a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e89e:	81a3      	strh	r3, [r4, #12]
 801e8a0:	bf0c      	ite	eq
 801e8a2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 801e8a6:	2640      	movne	r6, #64	; 0x40
 801e8a8:	2700      	movs	r7, #0
 801e8aa:	4628      	mov	r0, r5
 801e8ac:	4631      	mov	r1, r6
 801e8ae:	f000 f83b 	bl	801e928 <_malloc_r>
 801e8b2:	89a3      	ldrh	r3, [r4, #12]
 801e8b4:	b340      	cbz	r0, 801e908 <__smakebuf_r+0xc0>
 801e8b6:	4a1a      	ldr	r2, [pc, #104]	; (801e920 <__smakebuf_r+0xd8>)
 801e8b8:	63ea      	str	r2, [r5, #60]	; 0x3c
 801e8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8be:	81a3      	strh	r3, [r4, #12]
 801e8c0:	6020      	str	r0, [r4, #0]
 801e8c2:	6120      	str	r0, [r4, #16]
 801e8c4:	6166      	str	r6, [r4, #20]
 801e8c6:	b99f      	cbnz	r7, 801e8f0 <__smakebuf_r+0xa8>
 801e8c8:	b011      	add	sp, #68	; 0x44
 801e8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8cc:	f101 0343 	add.w	r3, r1, #67	; 0x43
 801e8d0:	2201      	movs	r2, #1
 801e8d2:	600b      	str	r3, [r1, #0]
 801e8d4:	610b      	str	r3, [r1, #16]
 801e8d6:	614a      	str	r2, [r1, #20]
 801e8d8:	4770      	bx	lr
 801e8da:	4b12      	ldr	r3, [pc, #72]	; (801e924 <__smakebuf_r+0xdc>)
 801e8dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801e8de:	429a      	cmp	r2, r3
 801e8e0:	d1d0      	bne.n	801e884 <__smakebuf_r+0x3c>
 801e8e2:	89a3      	ldrh	r3, [r4, #12]
 801e8e4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801e8e8:	4333      	orrs	r3, r6
 801e8ea:	81a3      	strh	r3, [r4, #12]
 801e8ec:	64e6      	str	r6, [r4, #76]	; 0x4c
 801e8ee:	e7dc      	b.n	801e8aa <__smakebuf_r+0x62>
 801e8f0:	4628      	mov	r0, r5
 801e8f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e8f6:	f001 fa35 	bl	801fd64 <_isatty_r>
 801e8fa:	2800      	cmp	r0, #0
 801e8fc:	d0e4      	beq.n	801e8c8 <__smakebuf_r+0x80>
 801e8fe:	89a3      	ldrh	r3, [r4, #12]
 801e900:	f043 0301 	orr.w	r3, r3, #1
 801e904:	81a3      	strh	r3, [r4, #12]
 801e906:	e7df      	b.n	801e8c8 <__smakebuf_r+0x80>
 801e908:	059a      	lsls	r2, r3, #22
 801e90a:	d4dd      	bmi.n	801e8c8 <__smakebuf_r+0x80>
 801e90c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e910:	f043 0302 	orr.w	r3, r3, #2
 801e914:	2101      	movs	r1, #1
 801e916:	81a3      	strh	r3, [r4, #12]
 801e918:	6022      	str	r2, [r4, #0]
 801e91a:	6122      	str	r2, [r4, #16]
 801e91c:	6161      	str	r1, [r4, #20]
 801e91e:	e7d3      	b.n	801e8c8 <__smakebuf_r+0x80>
 801e920:	0801e0a1 	.word	0x0801e0a1
 801e924:	0801f9c9 	.word	0x0801f9c9

0801e928 <_malloc_r>:
 801e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e92c:	f101 050b 	add.w	r5, r1, #11
 801e930:	2d16      	cmp	r5, #22
 801e932:	b083      	sub	sp, #12
 801e934:	4606      	mov	r6, r0
 801e936:	d927      	bls.n	801e988 <_malloc_r+0x60>
 801e938:	f035 0507 	bics.w	r5, r5, #7
 801e93c:	f100 80b6 	bmi.w	801eaac <_malloc_r+0x184>
 801e940:	42a9      	cmp	r1, r5
 801e942:	f200 80b3 	bhi.w	801eaac <_malloc_r+0x184>
 801e946:	f000 fac7 	bl	801eed8 <__malloc_lock>
 801e94a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 801e94e:	d222      	bcs.n	801e996 <_malloc_r+0x6e>
 801e950:	4fc2      	ldr	r7, [pc, #776]	; (801ec5c <_malloc_r+0x334>)
 801e952:	08e8      	lsrs	r0, r5, #3
 801e954:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 801e958:	68dc      	ldr	r4, [r3, #12]
 801e95a:	429c      	cmp	r4, r3
 801e95c:	f000 81c9 	beq.w	801ecf2 <_malloc_r+0x3ca>
 801e960:	6863      	ldr	r3, [r4, #4]
 801e962:	68e1      	ldr	r1, [r4, #12]
 801e964:	68a5      	ldr	r5, [r4, #8]
 801e966:	f023 0303 	bic.w	r3, r3, #3
 801e96a:	4423      	add	r3, r4
 801e96c:	4630      	mov	r0, r6
 801e96e:	685a      	ldr	r2, [r3, #4]
 801e970:	60e9      	str	r1, [r5, #12]
 801e972:	f042 0201 	orr.w	r2, r2, #1
 801e976:	608d      	str	r5, [r1, #8]
 801e978:	605a      	str	r2, [r3, #4]
 801e97a:	f000 faaf 	bl	801eedc <__malloc_unlock>
 801e97e:	3408      	adds	r4, #8
 801e980:	4620      	mov	r0, r4
 801e982:	b003      	add	sp, #12
 801e984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e988:	2910      	cmp	r1, #16
 801e98a:	f200 808f 	bhi.w	801eaac <_malloc_r+0x184>
 801e98e:	f000 faa3 	bl	801eed8 <__malloc_lock>
 801e992:	2510      	movs	r5, #16
 801e994:	e7dc      	b.n	801e950 <_malloc_r+0x28>
 801e996:	0a68      	lsrs	r0, r5, #9
 801e998:	f000 808f 	beq.w	801eaba <_malloc_r+0x192>
 801e99c:	2804      	cmp	r0, #4
 801e99e:	f200 8154 	bhi.w	801ec4a <_malloc_r+0x322>
 801e9a2:	09a8      	lsrs	r0, r5, #6
 801e9a4:	3038      	adds	r0, #56	; 0x38
 801e9a6:	0041      	lsls	r1, r0, #1
 801e9a8:	4fac      	ldr	r7, [pc, #688]	; (801ec5c <_malloc_r+0x334>)
 801e9aa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 801e9ae:	68cc      	ldr	r4, [r1, #12]
 801e9b0:	42a1      	cmp	r1, r4
 801e9b2:	d106      	bne.n	801e9c2 <_malloc_r+0x9a>
 801e9b4:	e00c      	b.n	801e9d0 <_malloc_r+0xa8>
 801e9b6:	2a00      	cmp	r2, #0
 801e9b8:	f280 8082 	bge.w	801eac0 <_malloc_r+0x198>
 801e9bc:	68e4      	ldr	r4, [r4, #12]
 801e9be:	42a1      	cmp	r1, r4
 801e9c0:	d006      	beq.n	801e9d0 <_malloc_r+0xa8>
 801e9c2:	6863      	ldr	r3, [r4, #4]
 801e9c4:	f023 0303 	bic.w	r3, r3, #3
 801e9c8:	1b5a      	subs	r2, r3, r5
 801e9ca:	2a0f      	cmp	r2, #15
 801e9cc:	ddf3      	ble.n	801e9b6 <_malloc_r+0x8e>
 801e9ce:	3801      	subs	r0, #1
 801e9d0:	3001      	adds	r0, #1
 801e9d2:	49a2      	ldr	r1, [pc, #648]	; (801ec5c <_malloc_r+0x334>)
 801e9d4:	693c      	ldr	r4, [r7, #16]
 801e9d6:	f101 0e08 	add.w	lr, r1, #8
 801e9da:	4574      	cmp	r4, lr
 801e9dc:	f000 817e 	beq.w	801ecdc <_malloc_r+0x3b4>
 801e9e0:	6863      	ldr	r3, [r4, #4]
 801e9e2:	f023 0303 	bic.w	r3, r3, #3
 801e9e6:	1b5a      	subs	r2, r3, r5
 801e9e8:	2a0f      	cmp	r2, #15
 801e9ea:	f300 8164 	bgt.w	801ecb6 <_malloc_r+0x38e>
 801e9ee:	2a00      	cmp	r2, #0
 801e9f0:	f8c1 e014 	str.w	lr, [r1, #20]
 801e9f4:	f8c1 e010 	str.w	lr, [r1, #16]
 801e9f8:	da73      	bge.n	801eae2 <_malloc_r+0x1ba>
 801e9fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e9fe:	f080 8139 	bcs.w	801ec74 <_malloc_r+0x34c>
 801ea02:	08db      	lsrs	r3, r3, #3
 801ea04:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 801ea08:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 801ea0c:	684a      	ldr	r2, [r1, #4]
 801ea0e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 801ea12:	f8c4 9008 	str.w	r9, [r4, #8]
 801ea16:	2301      	movs	r3, #1
 801ea18:	fa03 f30c 	lsl.w	r3, r3, ip
 801ea1c:	4313      	orrs	r3, r2
 801ea1e:	f8c4 800c 	str.w	r8, [r4, #12]
 801ea22:	604b      	str	r3, [r1, #4]
 801ea24:	f8c8 4008 	str.w	r4, [r8, #8]
 801ea28:	f8c9 400c 	str.w	r4, [r9, #12]
 801ea2c:	1082      	asrs	r2, r0, #2
 801ea2e:	2401      	movs	r4, #1
 801ea30:	4094      	lsls	r4, r2
 801ea32:	429c      	cmp	r4, r3
 801ea34:	d862      	bhi.n	801eafc <_malloc_r+0x1d4>
 801ea36:	4223      	tst	r3, r4
 801ea38:	d106      	bne.n	801ea48 <_malloc_r+0x120>
 801ea3a:	f020 0003 	bic.w	r0, r0, #3
 801ea3e:	0064      	lsls	r4, r4, #1
 801ea40:	4223      	tst	r3, r4
 801ea42:	f100 0004 	add.w	r0, r0, #4
 801ea46:	d0fa      	beq.n	801ea3e <_malloc_r+0x116>
 801ea48:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 801ea4c:	46c4      	mov	ip, r8
 801ea4e:	4681      	mov	r9, r0
 801ea50:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801ea54:	459c      	cmp	ip, r3
 801ea56:	d107      	bne.n	801ea68 <_malloc_r+0x140>
 801ea58:	e142      	b.n	801ece0 <_malloc_r+0x3b8>
 801ea5a:	2900      	cmp	r1, #0
 801ea5c:	f280 8152 	bge.w	801ed04 <_malloc_r+0x3dc>
 801ea60:	68db      	ldr	r3, [r3, #12]
 801ea62:	459c      	cmp	ip, r3
 801ea64:	f000 813c 	beq.w	801ece0 <_malloc_r+0x3b8>
 801ea68:	685a      	ldr	r2, [r3, #4]
 801ea6a:	f022 0203 	bic.w	r2, r2, #3
 801ea6e:	1b51      	subs	r1, r2, r5
 801ea70:	290f      	cmp	r1, #15
 801ea72:	ddf2      	ble.n	801ea5a <_malloc_r+0x132>
 801ea74:	461c      	mov	r4, r3
 801ea76:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801ea7a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 801ea7e:	195a      	adds	r2, r3, r5
 801ea80:	f045 0901 	orr.w	r9, r5, #1
 801ea84:	f041 0501 	orr.w	r5, r1, #1
 801ea88:	f8c3 9004 	str.w	r9, [r3, #4]
 801ea8c:	4630      	mov	r0, r6
 801ea8e:	f8c8 c00c 	str.w	ip, [r8, #12]
 801ea92:	f8cc 8008 	str.w	r8, [ip, #8]
 801ea96:	617a      	str	r2, [r7, #20]
 801ea98:	613a      	str	r2, [r7, #16]
 801ea9a:	f8c2 e00c 	str.w	lr, [r2, #12]
 801ea9e:	f8c2 e008 	str.w	lr, [r2, #8]
 801eaa2:	6055      	str	r5, [r2, #4]
 801eaa4:	5051      	str	r1, [r2, r1]
 801eaa6:	f000 fa19 	bl	801eedc <__malloc_unlock>
 801eaaa:	e769      	b.n	801e980 <_malloc_r+0x58>
 801eaac:	2400      	movs	r4, #0
 801eaae:	230c      	movs	r3, #12
 801eab0:	4620      	mov	r0, r4
 801eab2:	6033      	str	r3, [r6, #0]
 801eab4:	b003      	add	sp, #12
 801eab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaba:	217e      	movs	r1, #126	; 0x7e
 801eabc:	203f      	movs	r0, #63	; 0x3f
 801eabe:	e773      	b.n	801e9a8 <_malloc_r+0x80>
 801eac0:	4423      	add	r3, r4
 801eac2:	68e1      	ldr	r1, [r4, #12]
 801eac4:	685a      	ldr	r2, [r3, #4]
 801eac6:	68a5      	ldr	r5, [r4, #8]
 801eac8:	f042 0201 	orr.w	r2, r2, #1
 801eacc:	60e9      	str	r1, [r5, #12]
 801eace:	4630      	mov	r0, r6
 801ead0:	608d      	str	r5, [r1, #8]
 801ead2:	605a      	str	r2, [r3, #4]
 801ead4:	f000 fa02 	bl	801eedc <__malloc_unlock>
 801ead8:	3408      	adds	r4, #8
 801eada:	4620      	mov	r0, r4
 801eadc:	b003      	add	sp, #12
 801eade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eae2:	4423      	add	r3, r4
 801eae4:	4630      	mov	r0, r6
 801eae6:	685a      	ldr	r2, [r3, #4]
 801eae8:	f042 0201 	orr.w	r2, r2, #1
 801eaec:	605a      	str	r2, [r3, #4]
 801eaee:	f000 f9f5 	bl	801eedc <__malloc_unlock>
 801eaf2:	3408      	adds	r4, #8
 801eaf4:	4620      	mov	r0, r4
 801eaf6:	b003      	add	sp, #12
 801eaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eafc:	68bc      	ldr	r4, [r7, #8]
 801eafe:	6863      	ldr	r3, [r4, #4]
 801eb00:	f023 0803 	bic.w	r8, r3, #3
 801eb04:	4545      	cmp	r5, r8
 801eb06:	d804      	bhi.n	801eb12 <_malloc_r+0x1ea>
 801eb08:	ebc5 0308 	rsb	r3, r5, r8
 801eb0c:	2b0f      	cmp	r3, #15
 801eb0e:	f300 808c 	bgt.w	801ec2a <_malloc_r+0x302>
 801eb12:	4b53      	ldr	r3, [pc, #332]	; (801ec60 <_malloc_r+0x338>)
 801eb14:	f8df a158 	ldr.w	sl, [pc, #344]	; 801ec70 <_malloc_r+0x348>
 801eb18:	681a      	ldr	r2, [r3, #0]
 801eb1a:	f8da 3000 	ldr.w	r3, [sl]
 801eb1e:	3301      	adds	r3, #1
 801eb20:	442a      	add	r2, r5
 801eb22:	eb04 0b08 	add.w	fp, r4, r8
 801eb26:	f000 8150 	beq.w	801edca <_malloc_r+0x4a2>
 801eb2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801eb2e:	320f      	adds	r2, #15
 801eb30:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 801eb34:	f022 020f 	bic.w	r2, r2, #15
 801eb38:	4611      	mov	r1, r2
 801eb3a:	4630      	mov	r0, r6
 801eb3c:	9201      	str	r2, [sp, #4]
 801eb3e:	f000 feb9 	bl	801f8b4 <_sbrk_r>
 801eb42:	f1b0 3fff 	cmp.w	r0, #4294967295
 801eb46:	4681      	mov	r9, r0
 801eb48:	9a01      	ldr	r2, [sp, #4]
 801eb4a:	f000 80f5 	beq.w	801ed38 <_malloc_r+0x410>
 801eb4e:	4583      	cmp	fp, r0
 801eb50:	f200 80ef 	bhi.w	801ed32 <_malloc_r+0x40a>
 801eb54:	4b43      	ldr	r3, [pc, #268]	; (801ec64 <_malloc_r+0x33c>)
 801eb56:	6819      	ldr	r1, [r3, #0]
 801eb58:	45cb      	cmp	fp, r9
 801eb5a:	4411      	add	r1, r2
 801eb5c:	6019      	str	r1, [r3, #0]
 801eb5e:	f000 813d 	beq.w	801eddc <_malloc_r+0x4b4>
 801eb62:	f8da 0000 	ldr.w	r0, [sl]
 801eb66:	f8df e108 	ldr.w	lr, [pc, #264]	; 801ec70 <_malloc_r+0x348>
 801eb6a:	3001      	adds	r0, #1
 801eb6c:	bf1b      	ittet	ne
 801eb6e:	ebcb 0b09 	rsbne	fp, fp, r9
 801eb72:	4459      	addne	r1, fp
 801eb74:	f8ce 9000 	streq.w	r9, [lr]
 801eb78:	6019      	strne	r1, [r3, #0]
 801eb7a:	f019 0107 	ands.w	r1, r9, #7
 801eb7e:	f000 8107 	beq.w	801ed90 <_malloc_r+0x468>
 801eb82:	f1c1 0008 	rsb	r0, r1, #8
 801eb86:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 801eb8a:	4481      	add	r9, r0
 801eb8c:	3108      	adds	r1, #8
 801eb8e:	444a      	add	r2, r9
 801eb90:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801eb94:	ebc2 0a01 	rsb	sl, r2, r1
 801eb98:	4651      	mov	r1, sl
 801eb9a:	4630      	mov	r0, r6
 801eb9c:	9301      	str	r3, [sp, #4]
 801eb9e:	f000 fe89 	bl	801f8b4 <_sbrk_r>
 801eba2:	1c43      	adds	r3, r0, #1
 801eba4:	9b01      	ldr	r3, [sp, #4]
 801eba6:	f000 8127 	beq.w	801edf8 <_malloc_r+0x4d0>
 801ebaa:	ebc9 0200 	rsb	r2, r9, r0
 801ebae:	4452      	add	r2, sl
 801ebb0:	f042 0201 	orr.w	r2, r2, #1
 801ebb4:	6819      	ldr	r1, [r3, #0]
 801ebb6:	f8c7 9008 	str.w	r9, [r7, #8]
 801ebba:	4451      	add	r1, sl
 801ebbc:	42bc      	cmp	r4, r7
 801ebbe:	f8c9 2004 	str.w	r2, [r9, #4]
 801ebc2:	6019      	str	r1, [r3, #0]
 801ebc4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 801ec64 <_malloc_r+0x33c>
 801ebc8:	d016      	beq.n	801ebf8 <_malloc_r+0x2d0>
 801ebca:	f1b8 0f0f 	cmp.w	r8, #15
 801ebce:	f240 80e2 	bls.w	801ed96 <_malloc_r+0x46e>
 801ebd2:	6862      	ldr	r2, [r4, #4]
 801ebd4:	f1a8 030c 	sub.w	r3, r8, #12
 801ebd8:	f023 0307 	bic.w	r3, r3, #7
 801ebdc:	18e0      	adds	r0, r4, r3
 801ebde:	f002 0201 	and.w	r2, r2, #1
 801ebe2:	f04f 0e05 	mov.w	lr, #5
 801ebe6:	431a      	orrs	r2, r3
 801ebe8:	2b0f      	cmp	r3, #15
 801ebea:	6062      	str	r2, [r4, #4]
 801ebec:	f8c0 e004 	str.w	lr, [r0, #4]
 801ebf0:	f8c0 e008 	str.w	lr, [r0, #8]
 801ebf4:	f200 8104 	bhi.w	801ee00 <_malloc_r+0x4d8>
 801ebf8:	4b1b      	ldr	r3, [pc, #108]	; (801ec68 <_malloc_r+0x340>)
 801ebfa:	68bc      	ldr	r4, [r7, #8]
 801ebfc:	681a      	ldr	r2, [r3, #0]
 801ebfe:	4291      	cmp	r1, r2
 801ec00:	bf88      	it	hi
 801ec02:	6019      	strhi	r1, [r3, #0]
 801ec04:	4b19      	ldr	r3, [pc, #100]	; (801ec6c <_malloc_r+0x344>)
 801ec06:	681a      	ldr	r2, [r3, #0]
 801ec08:	4291      	cmp	r1, r2
 801ec0a:	6862      	ldr	r2, [r4, #4]
 801ec0c:	bf88      	it	hi
 801ec0e:	6019      	strhi	r1, [r3, #0]
 801ec10:	f022 0203 	bic.w	r2, r2, #3
 801ec14:	4295      	cmp	r5, r2
 801ec16:	eba2 0305 	sub.w	r3, r2, r5
 801ec1a:	d801      	bhi.n	801ec20 <_malloc_r+0x2f8>
 801ec1c:	2b0f      	cmp	r3, #15
 801ec1e:	dc04      	bgt.n	801ec2a <_malloc_r+0x302>
 801ec20:	4630      	mov	r0, r6
 801ec22:	f000 f95b 	bl	801eedc <__malloc_unlock>
 801ec26:	2400      	movs	r4, #0
 801ec28:	e6aa      	b.n	801e980 <_malloc_r+0x58>
 801ec2a:	1962      	adds	r2, r4, r5
 801ec2c:	f043 0301 	orr.w	r3, r3, #1
 801ec30:	f045 0501 	orr.w	r5, r5, #1
 801ec34:	6065      	str	r5, [r4, #4]
 801ec36:	4630      	mov	r0, r6
 801ec38:	60ba      	str	r2, [r7, #8]
 801ec3a:	6053      	str	r3, [r2, #4]
 801ec3c:	f000 f94e 	bl	801eedc <__malloc_unlock>
 801ec40:	3408      	adds	r4, #8
 801ec42:	4620      	mov	r0, r4
 801ec44:	b003      	add	sp, #12
 801ec46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec4a:	2814      	cmp	r0, #20
 801ec4c:	d969      	bls.n	801ed22 <_malloc_r+0x3fa>
 801ec4e:	2854      	cmp	r0, #84	; 0x54
 801ec50:	f200 8097 	bhi.w	801ed82 <_malloc_r+0x45a>
 801ec54:	0b28      	lsrs	r0, r5, #12
 801ec56:	306e      	adds	r0, #110	; 0x6e
 801ec58:	0041      	lsls	r1, r0, #1
 801ec5a:	e6a5      	b.n	801e9a8 <_malloc_r+0x80>
 801ec5c:	200007f8 	.word	0x200007f8
 801ec60:	2000e28c 	.word	0x2000e28c
 801ec64:	2000e290 	.word	0x2000e290
 801ec68:	2000e288 	.word	0x2000e288
 801ec6c:	2000e284 	.word	0x2000e284
 801ec70:	20000c04 	.word	0x20000c04
 801ec74:	0a5a      	lsrs	r2, r3, #9
 801ec76:	2a04      	cmp	r2, #4
 801ec78:	d956      	bls.n	801ed28 <_malloc_r+0x400>
 801ec7a:	2a14      	cmp	r2, #20
 801ec7c:	f200 80a7 	bhi.w	801edce <_malloc_r+0x4a6>
 801ec80:	325b      	adds	r2, #91	; 0x5b
 801ec82:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801ec86:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 801ec8a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 801ee40 <_malloc_r+0x518>
 801ec8e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801ec92:	4561      	cmp	r1, ip
 801ec94:	f000 8085 	beq.w	801eda2 <_malloc_r+0x47a>
 801ec98:	684a      	ldr	r2, [r1, #4]
 801ec9a:	f022 0203 	bic.w	r2, r2, #3
 801ec9e:	4293      	cmp	r3, r2
 801eca0:	d202      	bcs.n	801eca8 <_malloc_r+0x380>
 801eca2:	6889      	ldr	r1, [r1, #8]
 801eca4:	458c      	cmp	ip, r1
 801eca6:	d1f7      	bne.n	801ec98 <_malloc_r+0x370>
 801eca8:	68ca      	ldr	r2, [r1, #12]
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	60e2      	str	r2, [r4, #12]
 801ecae:	60a1      	str	r1, [r4, #8]
 801ecb0:	6094      	str	r4, [r2, #8]
 801ecb2:	60cc      	str	r4, [r1, #12]
 801ecb4:	e6ba      	b.n	801ea2c <_malloc_r+0x104>
 801ecb6:	1963      	adds	r3, r4, r5
 801ecb8:	f042 0701 	orr.w	r7, r2, #1
 801ecbc:	f045 0501 	orr.w	r5, r5, #1
 801ecc0:	6065      	str	r5, [r4, #4]
 801ecc2:	4630      	mov	r0, r6
 801ecc4:	614b      	str	r3, [r1, #20]
 801ecc6:	610b      	str	r3, [r1, #16]
 801ecc8:	f8c3 e00c 	str.w	lr, [r3, #12]
 801eccc:	f8c3 e008 	str.w	lr, [r3, #8]
 801ecd0:	605f      	str	r7, [r3, #4]
 801ecd2:	509a      	str	r2, [r3, r2]
 801ecd4:	3408      	adds	r4, #8
 801ecd6:	f000 f901 	bl	801eedc <__malloc_unlock>
 801ecda:	e651      	b.n	801e980 <_malloc_r+0x58>
 801ecdc:	684b      	ldr	r3, [r1, #4]
 801ecde:	e6a5      	b.n	801ea2c <_malloc_r+0x104>
 801ece0:	f109 0901 	add.w	r9, r9, #1
 801ece4:	f019 0f03 	tst.w	r9, #3
 801ece8:	f10c 0c08 	add.w	ip, ip, #8
 801ecec:	f47f aeb0 	bne.w	801ea50 <_malloc_r+0x128>
 801ecf0:	e02b      	b.n	801ed4a <_malloc_r+0x422>
 801ecf2:	f104 0308 	add.w	r3, r4, #8
 801ecf6:	6964      	ldr	r4, [r4, #20]
 801ecf8:	42a3      	cmp	r3, r4
 801ecfa:	bf08      	it	eq
 801ecfc:	3002      	addeq	r0, #2
 801ecfe:	f43f ae68 	beq.w	801e9d2 <_malloc_r+0xaa>
 801ed02:	e62d      	b.n	801e960 <_malloc_r+0x38>
 801ed04:	441a      	add	r2, r3
 801ed06:	461c      	mov	r4, r3
 801ed08:	6851      	ldr	r1, [r2, #4]
 801ed0a:	68db      	ldr	r3, [r3, #12]
 801ed0c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 801ed10:	f041 0101 	orr.w	r1, r1, #1
 801ed14:	6051      	str	r1, [r2, #4]
 801ed16:	4630      	mov	r0, r6
 801ed18:	60eb      	str	r3, [r5, #12]
 801ed1a:	609d      	str	r5, [r3, #8]
 801ed1c:	f000 f8de 	bl	801eedc <__malloc_unlock>
 801ed20:	e62e      	b.n	801e980 <_malloc_r+0x58>
 801ed22:	305b      	adds	r0, #91	; 0x5b
 801ed24:	0041      	lsls	r1, r0, #1
 801ed26:	e63f      	b.n	801e9a8 <_malloc_r+0x80>
 801ed28:	099a      	lsrs	r2, r3, #6
 801ed2a:	3238      	adds	r2, #56	; 0x38
 801ed2c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801ed30:	e7a9      	b.n	801ec86 <_malloc_r+0x35e>
 801ed32:	42bc      	cmp	r4, r7
 801ed34:	f43f af0e 	beq.w	801eb54 <_malloc_r+0x22c>
 801ed38:	68bc      	ldr	r4, [r7, #8]
 801ed3a:	6862      	ldr	r2, [r4, #4]
 801ed3c:	f022 0203 	bic.w	r2, r2, #3
 801ed40:	e768      	b.n	801ec14 <_malloc_r+0x2ec>
 801ed42:	f8d8 8000 	ldr.w	r8, [r8]
 801ed46:	4598      	cmp	r8, r3
 801ed48:	d177      	bne.n	801ee3a <_malloc_r+0x512>
 801ed4a:	f010 0f03 	tst.w	r0, #3
 801ed4e:	f1a8 0308 	sub.w	r3, r8, #8
 801ed52:	f100 30ff 	add.w	r0, r0, #4294967295
 801ed56:	d1f4      	bne.n	801ed42 <_malloc_r+0x41a>
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	ea23 0304 	bic.w	r3, r3, r4
 801ed5e:	607b      	str	r3, [r7, #4]
 801ed60:	0064      	lsls	r4, r4, #1
 801ed62:	429c      	cmp	r4, r3
 801ed64:	f63f aeca 	bhi.w	801eafc <_malloc_r+0x1d4>
 801ed68:	2c00      	cmp	r4, #0
 801ed6a:	f43f aec7 	beq.w	801eafc <_malloc_r+0x1d4>
 801ed6e:	4223      	tst	r3, r4
 801ed70:	4648      	mov	r0, r9
 801ed72:	f47f ae69 	bne.w	801ea48 <_malloc_r+0x120>
 801ed76:	0064      	lsls	r4, r4, #1
 801ed78:	4223      	tst	r3, r4
 801ed7a:	f100 0004 	add.w	r0, r0, #4
 801ed7e:	d0fa      	beq.n	801ed76 <_malloc_r+0x44e>
 801ed80:	e662      	b.n	801ea48 <_malloc_r+0x120>
 801ed82:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 801ed86:	d818      	bhi.n	801edba <_malloc_r+0x492>
 801ed88:	0be8      	lsrs	r0, r5, #15
 801ed8a:	3077      	adds	r0, #119	; 0x77
 801ed8c:	0041      	lsls	r1, r0, #1
 801ed8e:	e60b      	b.n	801e9a8 <_malloc_r+0x80>
 801ed90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801ed94:	e6fb      	b.n	801eb8e <_malloc_r+0x266>
 801ed96:	2301      	movs	r3, #1
 801ed98:	f8c9 3004 	str.w	r3, [r9, #4]
 801ed9c:	464c      	mov	r4, r9
 801ed9e:	2200      	movs	r2, #0
 801eda0:	e738      	b.n	801ec14 <_malloc_r+0x2ec>
 801eda2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801eda6:	1092      	asrs	r2, r2, #2
 801eda8:	f04f 0c01 	mov.w	ip, #1
 801edac:	fa0c f202 	lsl.w	r2, ip, r2
 801edb0:	4313      	orrs	r3, r2
 801edb2:	f8c8 3004 	str.w	r3, [r8, #4]
 801edb6:	460a      	mov	r2, r1
 801edb8:	e778      	b.n	801ecac <_malloc_r+0x384>
 801edba:	f240 5354 	movw	r3, #1364	; 0x554
 801edbe:	4298      	cmp	r0, r3
 801edc0:	d817      	bhi.n	801edf2 <_malloc_r+0x4ca>
 801edc2:	0ca8      	lsrs	r0, r5, #18
 801edc4:	307c      	adds	r0, #124	; 0x7c
 801edc6:	0041      	lsls	r1, r0, #1
 801edc8:	e5ee      	b.n	801e9a8 <_malloc_r+0x80>
 801edca:	3210      	adds	r2, #16
 801edcc:	e6b4      	b.n	801eb38 <_malloc_r+0x210>
 801edce:	2a54      	cmp	r2, #84	; 0x54
 801edd0:	d81e      	bhi.n	801ee10 <_malloc_r+0x4e8>
 801edd2:	0b1a      	lsrs	r2, r3, #12
 801edd4:	326e      	adds	r2, #110	; 0x6e
 801edd6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801edda:	e754      	b.n	801ec86 <_malloc_r+0x35e>
 801eddc:	f3cb 000b 	ubfx	r0, fp, #0, #12
 801ede0:	2800      	cmp	r0, #0
 801ede2:	f47f aebe 	bne.w	801eb62 <_malloc_r+0x23a>
 801ede6:	4442      	add	r2, r8
 801ede8:	68bb      	ldr	r3, [r7, #8]
 801edea:	f042 0201 	orr.w	r2, r2, #1
 801edee:	605a      	str	r2, [r3, #4]
 801edf0:	e702      	b.n	801ebf8 <_malloc_r+0x2d0>
 801edf2:	21fc      	movs	r1, #252	; 0xfc
 801edf4:	207e      	movs	r0, #126	; 0x7e
 801edf6:	e5d7      	b.n	801e9a8 <_malloc_r+0x80>
 801edf8:	2201      	movs	r2, #1
 801edfa:	f04f 0a00 	mov.w	sl, #0
 801edfe:	e6d9      	b.n	801ebb4 <_malloc_r+0x28c>
 801ee00:	f104 0108 	add.w	r1, r4, #8
 801ee04:	4630      	mov	r0, r6
 801ee06:	f7ff fa83 	bl	801e310 <_free_r>
 801ee0a:	f8da 1000 	ldr.w	r1, [sl]
 801ee0e:	e6f3      	b.n	801ebf8 <_malloc_r+0x2d0>
 801ee10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801ee14:	d804      	bhi.n	801ee20 <_malloc_r+0x4f8>
 801ee16:	0bda      	lsrs	r2, r3, #15
 801ee18:	3277      	adds	r2, #119	; 0x77
 801ee1a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801ee1e:	e732      	b.n	801ec86 <_malloc_r+0x35e>
 801ee20:	f240 5154 	movw	r1, #1364	; 0x554
 801ee24:	428a      	cmp	r2, r1
 801ee26:	d804      	bhi.n	801ee32 <_malloc_r+0x50a>
 801ee28:	0c9a      	lsrs	r2, r3, #18
 801ee2a:	327c      	adds	r2, #124	; 0x7c
 801ee2c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 801ee30:	e729      	b.n	801ec86 <_malloc_r+0x35e>
 801ee32:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 801ee36:	227e      	movs	r2, #126	; 0x7e
 801ee38:	e725      	b.n	801ec86 <_malloc_r+0x35e>
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	e790      	b.n	801ed60 <_malloc_r+0x438>
 801ee3e:	bf00      	nop
 801ee40:	200007f8 	.word	0x200007f8

0801ee44 <memchr>:
 801ee44:	0783      	lsls	r3, r0, #30
 801ee46:	b470      	push	{r4, r5, r6}
 801ee48:	b2c9      	uxtb	r1, r1
 801ee4a:	d040      	beq.n	801eece <memchr+0x8a>
 801ee4c:	1e54      	subs	r4, r2, #1
 801ee4e:	2a00      	cmp	r2, #0
 801ee50:	d03f      	beq.n	801eed2 <memchr+0x8e>
 801ee52:	7803      	ldrb	r3, [r0, #0]
 801ee54:	428b      	cmp	r3, r1
 801ee56:	bf18      	it	ne
 801ee58:	1c43      	addne	r3, r0, #1
 801ee5a:	d106      	bne.n	801ee6a <memchr+0x26>
 801ee5c:	e01d      	b.n	801ee9a <memchr+0x56>
 801ee5e:	b1f4      	cbz	r4, 801ee9e <memchr+0x5a>
 801ee60:	7802      	ldrb	r2, [r0, #0]
 801ee62:	428a      	cmp	r2, r1
 801ee64:	f104 34ff 	add.w	r4, r4, #4294967295
 801ee68:	d017      	beq.n	801ee9a <memchr+0x56>
 801ee6a:	f013 0f03 	tst.w	r3, #3
 801ee6e:	4618      	mov	r0, r3
 801ee70:	f103 0301 	add.w	r3, r3, #1
 801ee74:	d1f3      	bne.n	801ee5e <memchr+0x1a>
 801ee76:	2c03      	cmp	r4, #3
 801ee78:	d814      	bhi.n	801eea4 <memchr+0x60>
 801ee7a:	b184      	cbz	r4, 801ee9e <memchr+0x5a>
 801ee7c:	7803      	ldrb	r3, [r0, #0]
 801ee7e:	428b      	cmp	r3, r1
 801ee80:	d00b      	beq.n	801ee9a <memchr+0x56>
 801ee82:	1905      	adds	r5, r0, r4
 801ee84:	1c43      	adds	r3, r0, #1
 801ee86:	e002      	b.n	801ee8e <memchr+0x4a>
 801ee88:	7802      	ldrb	r2, [r0, #0]
 801ee8a:	428a      	cmp	r2, r1
 801ee8c:	d005      	beq.n	801ee9a <memchr+0x56>
 801ee8e:	42ab      	cmp	r3, r5
 801ee90:	4618      	mov	r0, r3
 801ee92:	f103 0301 	add.w	r3, r3, #1
 801ee96:	d1f7      	bne.n	801ee88 <memchr+0x44>
 801ee98:	2000      	movs	r0, #0
 801ee9a:	bc70      	pop	{r4, r5, r6}
 801ee9c:	4770      	bx	lr
 801ee9e:	4620      	mov	r0, r4
 801eea0:	bc70      	pop	{r4, r5, r6}
 801eea2:	4770      	bx	lr
 801eea4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 801eea8:	4602      	mov	r2, r0
 801eeaa:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 801eeae:	4610      	mov	r0, r2
 801eeb0:	3204      	adds	r2, #4
 801eeb2:	6803      	ldr	r3, [r0, #0]
 801eeb4:	4073      	eors	r3, r6
 801eeb6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 801eeba:	ea25 0303 	bic.w	r3, r5, r3
 801eebe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 801eec2:	d1da      	bne.n	801ee7a <memchr+0x36>
 801eec4:	3c04      	subs	r4, #4
 801eec6:	2c03      	cmp	r4, #3
 801eec8:	4610      	mov	r0, r2
 801eeca:	d8f0      	bhi.n	801eeae <memchr+0x6a>
 801eecc:	e7d5      	b.n	801ee7a <memchr+0x36>
 801eece:	4614      	mov	r4, r2
 801eed0:	e7d1      	b.n	801ee76 <memchr+0x32>
 801eed2:	4610      	mov	r0, r2
 801eed4:	e7e1      	b.n	801ee9a <memchr+0x56>
 801eed6:	bf00      	nop

0801eed8 <__malloc_lock>:
 801eed8:	4770      	bx	lr
 801eeda:	bf00      	nop

0801eedc <__malloc_unlock>:
 801eedc:	4770      	bx	lr
 801eede:	bf00      	nop

0801eee0 <_Balloc>:
 801eee0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801eee2:	b570      	push	{r4, r5, r6, lr}
 801eee4:	4605      	mov	r5, r0
 801eee6:	460c      	mov	r4, r1
 801eee8:	b14b      	cbz	r3, 801eefe <_Balloc+0x1e>
 801eeea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801eeee:	b180      	cbz	r0, 801ef12 <_Balloc+0x32>
 801eef0:	6802      	ldr	r2, [r0, #0]
 801eef2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801eef6:	2300      	movs	r3, #0
 801eef8:	6103      	str	r3, [r0, #16]
 801eefa:	60c3      	str	r3, [r0, #12]
 801eefc:	bd70      	pop	{r4, r5, r6, pc}
 801eefe:	2104      	movs	r1, #4
 801ef00:	2221      	movs	r2, #33	; 0x21
 801ef02:	f000 fe97 	bl	801fc34 <_calloc_r>
 801ef06:	64e8      	str	r0, [r5, #76]	; 0x4c
 801ef08:	4603      	mov	r3, r0
 801ef0a:	2800      	cmp	r0, #0
 801ef0c:	d1ed      	bne.n	801eeea <_Balloc+0xa>
 801ef0e:	2000      	movs	r0, #0
 801ef10:	bd70      	pop	{r4, r5, r6, pc}
 801ef12:	2101      	movs	r1, #1
 801ef14:	fa01 f604 	lsl.w	r6, r1, r4
 801ef18:	1d72      	adds	r2, r6, #5
 801ef1a:	4628      	mov	r0, r5
 801ef1c:	0092      	lsls	r2, r2, #2
 801ef1e:	f000 fe89 	bl	801fc34 <_calloc_r>
 801ef22:	2800      	cmp	r0, #0
 801ef24:	d0f3      	beq.n	801ef0e <_Balloc+0x2e>
 801ef26:	6044      	str	r4, [r0, #4]
 801ef28:	6086      	str	r6, [r0, #8]
 801ef2a:	e7e4      	b.n	801eef6 <_Balloc+0x16>

0801ef2c <_Bfree>:
 801ef2c:	b131      	cbz	r1, 801ef3c <_Bfree+0x10>
 801ef2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801ef30:	684a      	ldr	r2, [r1, #4]
 801ef32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ef36:	6008      	str	r0, [r1, #0]
 801ef38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801ef3c:	4770      	bx	lr
 801ef3e:	bf00      	nop

0801ef40 <__multadd>:
 801ef40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef42:	690c      	ldr	r4, [r1, #16]
 801ef44:	b083      	sub	sp, #12
 801ef46:	460d      	mov	r5, r1
 801ef48:	4606      	mov	r6, r0
 801ef4a:	f101 0e14 	add.w	lr, r1, #20
 801ef4e:	2700      	movs	r7, #0
 801ef50:	f8de 1000 	ldr.w	r1, [lr]
 801ef54:	b288      	uxth	r0, r1
 801ef56:	0c09      	lsrs	r1, r1, #16
 801ef58:	fb02 3300 	mla	r3, r2, r0, r3
 801ef5c:	fb02 f101 	mul.w	r1, r2, r1
 801ef60:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 801ef64:	3701      	adds	r7, #1
 801ef66:	b29b      	uxth	r3, r3
 801ef68:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801ef6c:	42bc      	cmp	r4, r7
 801ef6e:	f84e 3b04 	str.w	r3, [lr], #4
 801ef72:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801ef76:	dceb      	bgt.n	801ef50 <__multadd+0x10>
 801ef78:	b13b      	cbz	r3, 801ef8a <__multadd+0x4a>
 801ef7a:	68aa      	ldr	r2, [r5, #8]
 801ef7c:	4294      	cmp	r4, r2
 801ef7e:	da07      	bge.n	801ef90 <__multadd+0x50>
 801ef80:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 801ef84:	3401      	adds	r4, #1
 801ef86:	6153      	str	r3, [r2, #20]
 801ef88:	612c      	str	r4, [r5, #16]
 801ef8a:	4628      	mov	r0, r5
 801ef8c:	b003      	add	sp, #12
 801ef8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef90:	6869      	ldr	r1, [r5, #4]
 801ef92:	9301      	str	r3, [sp, #4]
 801ef94:	3101      	adds	r1, #1
 801ef96:	4630      	mov	r0, r6
 801ef98:	f7ff ffa2 	bl	801eee0 <_Balloc>
 801ef9c:	692a      	ldr	r2, [r5, #16]
 801ef9e:	3202      	adds	r2, #2
 801efa0:	f105 010c 	add.w	r1, r5, #12
 801efa4:	4607      	mov	r7, r0
 801efa6:	0092      	lsls	r2, r2, #2
 801efa8:	300c      	adds	r0, #12
 801efaa:	f7e2 f833 	bl	8001014 <memcpy>
 801efae:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 801efb0:	6869      	ldr	r1, [r5, #4]
 801efb2:	9b01      	ldr	r3, [sp, #4]
 801efb4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 801efb8:	6028      	str	r0, [r5, #0]
 801efba:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 801efbe:	463d      	mov	r5, r7
 801efc0:	e7de      	b.n	801ef80 <__multadd+0x40>
 801efc2:	bf00      	nop

0801efc4 <__hi0bits>:
 801efc4:	0c03      	lsrs	r3, r0, #16
 801efc6:	041b      	lsls	r3, r3, #16
 801efc8:	b9b3      	cbnz	r3, 801eff8 <__hi0bits+0x34>
 801efca:	0400      	lsls	r0, r0, #16
 801efcc:	2310      	movs	r3, #16
 801efce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801efd2:	bf04      	itt	eq
 801efd4:	0200      	lsleq	r0, r0, #8
 801efd6:	3308      	addeq	r3, #8
 801efd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801efdc:	bf04      	itt	eq
 801efde:	0100      	lsleq	r0, r0, #4
 801efe0:	3304      	addeq	r3, #4
 801efe2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801efe6:	bf04      	itt	eq
 801efe8:	0080      	lsleq	r0, r0, #2
 801efea:	3302      	addeq	r3, #2
 801efec:	2800      	cmp	r0, #0
 801efee:	db07      	blt.n	801f000 <__hi0bits+0x3c>
 801eff0:	0042      	lsls	r2, r0, #1
 801eff2:	d403      	bmi.n	801effc <__hi0bits+0x38>
 801eff4:	2020      	movs	r0, #32
 801eff6:	4770      	bx	lr
 801eff8:	2300      	movs	r3, #0
 801effa:	e7e8      	b.n	801efce <__hi0bits+0xa>
 801effc:	1c58      	adds	r0, r3, #1
 801effe:	4770      	bx	lr
 801f000:	4618      	mov	r0, r3
 801f002:	4770      	bx	lr

0801f004 <__lo0bits>:
 801f004:	6803      	ldr	r3, [r0, #0]
 801f006:	f013 0207 	ands.w	r2, r3, #7
 801f00a:	d007      	beq.n	801f01c <__lo0bits+0x18>
 801f00c:	07d9      	lsls	r1, r3, #31
 801f00e:	d420      	bmi.n	801f052 <__lo0bits+0x4e>
 801f010:	079a      	lsls	r2, r3, #30
 801f012:	d420      	bmi.n	801f056 <__lo0bits+0x52>
 801f014:	089b      	lsrs	r3, r3, #2
 801f016:	6003      	str	r3, [r0, #0]
 801f018:	2002      	movs	r0, #2
 801f01a:	4770      	bx	lr
 801f01c:	b299      	uxth	r1, r3
 801f01e:	b909      	cbnz	r1, 801f024 <__lo0bits+0x20>
 801f020:	0c1b      	lsrs	r3, r3, #16
 801f022:	2210      	movs	r2, #16
 801f024:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f028:	bf04      	itt	eq
 801f02a:	0a1b      	lsreq	r3, r3, #8
 801f02c:	3208      	addeq	r2, #8
 801f02e:	0719      	lsls	r1, r3, #28
 801f030:	bf04      	itt	eq
 801f032:	091b      	lsreq	r3, r3, #4
 801f034:	3204      	addeq	r2, #4
 801f036:	0799      	lsls	r1, r3, #30
 801f038:	bf04      	itt	eq
 801f03a:	089b      	lsreq	r3, r3, #2
 801f03c:	3202      	addeq	r2, #2
 801f03e:	07d9      	lsls	r1, r3, #31
 801f040:	d404      	bmi.n	801f04c <__lo0bits+0x48>
 801f042:	085b      	lsrs	r3, r3, #1
 801f044:	d101      	bne.n	801f04a <__lo0bits+0x46>
 801f046:	2020      	movs	r0, #32
 801f048:	4770      	bx	lr
 801f04a:	3201      	adds	r2, #1
 801f04c:	6003      	str	r3, [r0, #0]
 801f04e:	4610      	mov	r0, r2
 801f050:	4770      	bx	lr
 801f052:	2000      	movs	r0, #0
 801f054:	4770      	bx	lr
 801f056:	085b      	lsrs	r3, r3, #1
 801f058:	6003      	str	r3, [r0, #0]
 801f05a:	2001      	movs	r0, #1
 801f05c:	4770      	bx	lr
 801f05e:	bf00      	nop

0801f060 <__i2b>:
 801f060:	b510      	push	{r4, lr}
 801f062:	460c      	mov	r4, r1
 801f064:	2101      	movs	r1, #1
 801f066:	f7ff ff3b 	bl	801eee0 <_Balloc>
 801f06a:	2201      	movs	r2, #1
 801f06c:	6144      	str	r4, [r0, #20]
 801f06e:	6102      	str	r2, [r0, #16]
 801f070:	bd10      	pop	{r4, pc}
 801f072:	bf00      	nop

0801f074 <__multiply>:
 801f074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f078:	690f      	ldr	r7, [r1, #16]
 801f07a:	6916      	ldr	r6, [r2, #16]
 801f07c:	42b7      	cmp	r7, r6
 801f07e:	b083      	sub	sp, #12
 801f080:	460d      	mov	r5, r1
 801f082:	4614      	mov	r4, r2
 801f084:	f2c0 808d 	blt.w	801f1a2 <__multiply+0x12e>
 801f088:	4633      	mov	r3, r6
 801f08a:	463e      	mov	r6, r7
 801f08c:	461f      	mov	r7, r3
 801f08e:	68ab      	ldr	r3, [r5, #8]
 801f090:	6869      	ldr	r1, [r5, #4]
 801f092:	eb06 0807 	add.w	r8, r6, r7
 801f096:	4598      	cmp	r8, r3
 801f098:	bfc8      	it	gt
 801f09a:	3101      	addgt	r1, #1
 801f09c:	f7ff ff20 	bl	801eee0 <_Balloc>
 801f0a0:	f100 0c14 	add.w	ip, r0, #20
 801f0a4:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 801f0a8:	45cc      	cmp	ip, r9
 801f0aa:	9000      	str	r0, [sp, #0]
 801f0ac:	d205      	bcs.n	801f0ba <__multiply+0x46>
 801f0ae:	4663      	mov	r3, ip
 801f0b0:	2100      	movs	r1, #0
 801f0b2:	f843 1b04 	str.w	r1, [r3], #4
 801f0b6:	4599      	cmp	r9, r3
 801f0b8:	d8fb      	bhi.n	801f0b2 <__multiply+0x3e>
 801f0ba:	f104 0214 	add.w	r2, r4, #20
 801f0be:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 801f0c2:	f105 0314 	add.w	r3, r5, #20
 801f0c6:	4552      	cmp	r2, sl
 801f0c8:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801f0cc:	d254      	bcs.n	801f178 <__multiply+0x104>
 801f0ce:	f8cd 9004 	str.w	r9, [sp, #4]
 801f0d2:	4699      	mov	r9, r3
 801f0d4:	f852 3b04 	ldr.w	r3, [r2], #4
 801f0d8:	fa1f fb83 	uxth.w	fp, r3
 801f0dc:	f1bb 0f00 	cmp.w	fp, #0
 801f0e0:	d020      	beq.n	801f124 <__multiply+0xb0>
 801f0e2:	2000      	movs	r0, #0
 801f0e4:	464f      	mov	r7, r9
 801f0e6:	4666      	mov	r6, ip
 801f0e8:	4605      	mov	r5, r0
 801f0ea:	e000      	b.n	801f0ee <__multiply+0x7a>
 801f0ec:	461e      	mov	r6, r3
 801f0ee:	f857 4b04 	ldr.w	r4, [r7], #4
 801f0f2:	6830      	ldr	r0, [r6, #0]
 801f0f4:	b2a1      	uxth	r1, r4
 801f0f6:	b283      	uxth	r3, r0
 801f0f8:	fb0b 3101 	mla	r1, fp, r1, r3
 801f0fc:	0c24      	lsrs	r4, r4, #16
 801f0fe:	0c00      	lsrs	r0, r0, #16
 801f100:	194b      	adds	r3, r1, r5
 801f102:	fb0b 0004 	mla	r0, fp, r4, r0
 801f106:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 801f10a:	b299      	uxth	r1, r3
 801f10c:	4633      	mov	r3, r6
 801f10e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f112:	45be      	cmp	lr, r7
 801f114:	ea4f 4510 	mov.w	r5, r0, lsr #16
 801f118:	f843 1b04 	str.w	r1, [r3], #4
 801f11c:	d8e6      	bhi.n	801f0ec <__multiply+0x78>
 801f11e:	6075      	str	r5, [r6, #4]
 801f120:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801f124:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 801f128:	d020      	beq.n	801f16c <__multiply+0xf8>
 801f12a:	f8dc 3000 	ldr.w	r3, [ip]
 801f12e:	4667      	mov	r7, ip
 801f130:	4618      	mov	r0, r3
 801f132:	464d      	mov	r5, r9
 801f134:	2100      	movs	r1, #0
 801f136:	e000      	b.n	801f13a <__multiply+0xc6>
 801f138:	4637      	mov	r7, r6
 801f13a:	882c      	ldrh	r4, [r5, #0]
 801f13c:	0c00      	lsrs	r0, r0, #16
 801f13e:	fb0b 0004 	mla	r0, fp, r4, r0
 801f142:	4401      	add	r1, r0
 801f144:	b29c      	uxth	r4, r3
 801f146:	463e      	mov	r6, r7
 801f148:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 801f14c:	f846 3b04 	str.w	r3, [r6], #4
 801f150:	6878      	ldr	r0, [r7, #4]
 801f152:	f855 4b04 	ldr.w	r4, [r5], #4
 801f156:	b283      	uxth	r3, r0
 801f158:	0c24      	lsrs	r4, r4, #16
 801f15a:	fb0b 3404 	mla	r4, fp, r4, r3
 801f15e:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 801f162:	45ae      	cmp	lr, r5
 801f164:	ea4f 4113 	mov.w	r1, r3, lsr #16
 801f168:	d8e6      	bhi.n	801f138 <__multiply+0xc4>
 801f16a:	607b      	str	r3, [r7, #4]
 801f16c:	4592      	cmp	sl, r2
 801f16e:	f10c 0c04 	add.w	ip, ip, #4
 801f172:	d8af      	bhi.n	801f0d4 <__multiply+0x60>
 801f174:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f178:	f1b8 0f00 	cmp.w	r8, #0
 801f17c:	dd0b      	ble.n	801f196 <__multiply+0x122>
 801f17e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 801f182:	f1a9 0904 	sub.w	r9, r9, #4
 801f186:	b11b      	cbz	r3, 801f190 <__multiply+0x11c>
 801f188:	e005      	b.n	801f196 <__multiply+0x122>
 801f18a:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801f18e:	b913      	cbnz	r3, 801f196 <__multiply+0x122>
 801f190:	f1b8 0801 	subs.w	r8, r8, #1
 801f194:	d1f9      	bne.n	801f18a <__multiply+0x116>
 801f196:	9800      	ldr	r0, [sp, #0]
 801f198:	f8c0 8010 	str.w	r8, [r0, #16]
 801f19c:	b003      	add	sp, #12
 801f19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1a2:	4615      	mov	r5, r2
 801f1a4:	460c      	mov	r4, r1
 801f1a6:	e772      	b.n	801f08e <__multiply+0x1a>

0801f1a8 <__pow5mult>:
 801f1a8:	f012 0303 	ands.w	r3, r2, #3
 801f1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1b0:	4614      	mov	r4, r2
 801f1b2:	4607      	mov	r7, r0
 801f1b4:	460e      	mov	r6, r1
 801f1b6:	d12d      	bne.n	801f214 <__pow5mult+0x6c>
 801f1b8:	10a4      	asrs	r4, r4, #2
 801f1ba:	d01c      	beq.n	801f1f6 <__pow5mult+0x4e>
 801f1bc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 801f1be:	b395      	cbz	r5, 801f226 <__pow5mult+0x7e>
 801f1c0:	07e3      	lsls	r3, r4, #31
 801f1c2:	f04f 0800 	mov.w	r8, #0
 801f1c6:	d406      	bmi.n	801f1d6 <__pow5mult+0x2e>
 801f1c8:	1064      	asrs	r4, r4, #1
 801f1ca:	d014      	beq.n	801f1f6 <__pow5mult+0x4e>
 801f1cc:	6828      	ldr	r0, [r5, #0]
 801f1ce:	b1a8      	cbz	r0, 801f1fc <__pow5mult+0x54>
 801f1d0:	4605      	mov	r5, r0
 801f1d2:	07e3      	lsls	r3, r4, #31
 801f1d4:	d5f8      	bpl.n	801f1c8 <__pow5mult+0x20>
 801f1d6:	4638      	mov	r0, r7
 801f1d8:	4631      	mov	r1, r6
 801f1da:	462a      	mov	r2, r5
 801f1dc:	f7ff ff4a 	bl	801f074 <__multiply>
 801f1e0:	b1b6      	cbz	r6, 801f210 <__pow5mult+0x68>
 801f1e2:	6872      	ldr	r2, [r6, #4]
 801f1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f1e6:	1064      	asrs	r4, r4, #1
 801f1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1ec:	6031      	str	r1, [r6, #0]
 801f1ee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 801f1f2:	4606      	mov	r6, r0
 801f1f4:	d1ea      	bne.n	801f1cc <__pow5mult+0x24>
 801f1f6:	4630      	mov	r0, r6
 801f1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1fc:	4629      	mov	r1, r5
 801f1fe:	462a      	mov	r2, r5
 801f200:	4638      	mov	r0, r7
 801f202:	f7ff ff37 	bl	801f074 <__multiply>
 801f206:	6028      	str	r0, [r5, #0]
 801f208:	f8c0 8000 	str.w	r8, [r0]
 801f20c:	4605      	mov	r5, r0
 801f20e:	e7e0      	b.n	801f1d2 <__pow5mult+0x2a>
 801f210:	4606      	mov	r6, r0
 801f212:	e7d9      	b.n	801f1c8 <__pow5mult+0x20>
 801f214:	1e5a      	subs	r2, r3, #1
 801f216:	4d0b      	ldr	r5, [pc, #44]	; (801f244 <__pow5mult+0x9c>)
 801f218:	2300      	movs	r3, #0
 801f21a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f21e:	f7ff fe8f 	bl	801ef40 <__multadd>
 801f222:	4606      	mov	r6, r0
 801f224:	e7c8      	b.n	801f1b8 <__pow5mult+0x10>
 801f226:	2101      	movs	r1, #1
 801f228:	4638      	mov	r0, r7
 801f22a:	f7ff fe59 	bl	801eee0 <_Balloc>
 801f22e:	f240 2171 	movw	r1, #625	; 0x271
 801f232:	2201      	movs	r2, #1
 801f234:	2300      	movs	r3, #0
 801f236:	6141      	str	r1, [r0, #20]
 801f238:	6102      	str	r2, [r0, #16]
 801f23a:	4605      	mov	r5, r0
 801f23c:	64b8      	str	r0, [r7, #72]	; 0x48
 801f23e:	6003      	str	r3, [r0, #0]
 801f240:	e7be      	b.n	801f1c0 <__pow5mult+0x18>
 801f242:	bf00      	nop
 801f244:	080357a8 	.word	0x080357a8

0801f248 <__lshift>:
 801f248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f24c:	690f      	ldr	r7, [r1, #16]
 801f24e:	688b      	ldr	r3, [r1, #8]
 801f250:	ea4f 1962 	mov.w	r9, r2, asr #5
 801f254:	444f      	add	r7, r9
 801f256:	1c7d      	adds	r5, r7, #1
 801f258:	429d      	cmp	r5, r3
 801f25a:	460e      	mov	r6, r1
 801f25c:	4614      	mov	r4, r2
 801f25e:	6849      	ldr	r1, [r1, #4]
 801f260:	4680      	mov	r8, r0
 801f262:	dd04      	ble.n	801f26e <__lshift+0x26>
 801f264:	005b      	lsls	r3, r3, #1
 801f266:	429d      	cmp	r5, r3
 801f268:	f101 0101 	add.w	r1, r1, #1
 801f26c:	dcfa      	bgt.n	801f264 <__lshift+0x1c>
 801f26e:	4640      	mov	r0, r8
 801f270:	f7ff fe36 	bl	801eee0 <_Balloc>
 801f274:	f1b9 0f00 	cmp.w	r9, #0
 801f278:	f100 0114 	add.w	r1, r0, #20
 801f27c:	dd09      	ble.n	801f292 <__lshift+0x4a>
 801f27e:	2300      	movs	r3, #0
 801f280:	469e      	mov	lr, r3
 801f282:	460a      	mov	r2, r1
 801f284:	3301      	adds	r3, #1
 801f286:	454b      	cmp	r3, r9
 801f288:	f842 eb04 	str.w	lr, [r2], #4
 801f28c:	d1fa      	bne.n	801f284 <__lshift+0x3c>
 801f28e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f292:	6932      	ldr	r2, [r6, #16]
 801f294:	f106 0314 	add.w	r3, r6, #20
 801f298:	f014 0c1f 	ands.w	ip, r4, #31
 801f29c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 801f2a0:	d01f      	beq.n	801f2e2 <__lshift+0x9a>
 801f2a2:	f1cc 0920 	rsb	r9, ip, #32
 801f2a6:	2200      	movs	r2, #0
 801f2a8:	681c      	ldr	r4, [r3, #0]
 801f2aa:	fa04 f40c 	lsl.w	r4, r4, ip
 801f2ae:	4314      	orrs	r4, r2
 801f2b0:	468a      	mov	sl, r1
 801f2b2:	f841 4b04 	str.w	r4, [r1], #4
 801f2b6:	f853 4b04 	ldr.w	r4, [r3], #4
 801f2ba:	459e      	cmp	lr, r3
 801f2bc:	fa24 f209 	lsr.w	r2, r4, r9
 801f2c0:	d8f2      	bhi.n	801f2a8 <__lshift+0x60>
 801f2c2:	f8ca 2004 	str.w	r2, [sl, #4]
 801f2c6:	b102      	cbz	r2, 801f2ca <__lshift+0x82>
 801f2c8:	1cbd      	adds	r5, r7, #2
 801f2ca:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801f2ce:	6872      	ldr	r2, [r6, #4]
 801f2d0:	3d01      	subs	r5, #1
 801f2d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f2d6:	6105      	str	r5, [r0, #16]
 801f2d8:	6031      	str	r1, [r6, #0]
 801f2da:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 801f2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2e2:	3904      	subs	r1, #4
 801f2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2e8:	f841 2f04 	str.w	r2, [r1, #4]!
 801f2ec:	459e      	cmp	lr, r3
 801f2ee:	d8f9      	bhi.n	801f2e4 <__lshift+0x9c>
 801f2f0:	e7eb      	b.n	801f2ca <__lshift+0x82>
 801f2f2:	bf00      	nop

0801f2f4 <__mcmp>:
 801f2f4:	6902      	ldr	r2, [r0, #16]
 801f2f6:	690b      	ldr	r3, [r1, #16]
 801f2f8:	1ad2      	subs	r2, r2, r3
 801f2fa:	d113      	bne.n	801f324 <__mcmp+0x30>
 801f2fc:	009b      	lsls	r3, r3, #2
 801f2fe:	3014      	adds	r0, #20
 801f300:	3114      	adds	r1, #20
 801f302:	4419      	add	r1, r3
 801f304:	b410      	push	{r4}
 801f306:	4403      	add	r3, r0
 801f308:	e001      	b.n	801f30e <__mcmp+0x1a>
 801f30a:	4298      	cmp	r0, r3
 801f30c:	d20c      	bcs.n	801f328 <__mcmp+0x34>
 801f30e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801f312:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f316:	4294      	cmp	r4, r2
 801f318:	d0f7      	beq.n	801f30a <__mcmp+0x16>
 801f31a:	d309      	bcc.n	801f330 <__mcmp+0x3c>
 801f31c:	2001      	movs	r0, #1
 801f31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f322:	4770      	bx	lr
 801f324:	4610      	mov	r0, r2
 801f326:	4770      	bx	lr
 801f328:	2000      	movs	r0, #0
 801f32a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f32e:	4770      	bx	lr
 801f330:	f04f 30ff 	mov.w	r0, #4294967295
 801f334:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f338:	4770      	bx	lr
 801f33a:	bf00      	nop

0801f33c <__mdiff>:
 801f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f340:	460e      	mov	r6, r1
 801f342:	4605      	mov	r5, r0
 801f344:	4611      	mov	r1, r2
 801f346:	4630      	mov	r0, r6
 801f348:	4614      	mov	r4, r2
 801f34a:	f7ff ffd3 	bl	801f2f4 <__mcmp>
 801f34e:	1e07      	subs	r7, r0, #0
 801f350:	d054      	beq.n	801f3fc <__mdiff+0xc0>
 801f352:	db4d      	blt.n	801f3f0 <__mdiff+0xb4>
 801f354:	f04f 0800 	mov.w	r8, #0
 801f358:	6871      	ldr	r1, [r6, #4]
 801f35a:	4628      	mov	r0, r5
 801f35c:	f7ff fdc0 	bl	801eee0 <_Balloc>
 801f360:	6937      	ldr	r7, [r6, #16]
 801f362:	6923      	ldr	r3, [r4, #16]
 801f364:	f8c0 800c 	str.w	r8, [r0, #12]
 801f368:	3614      	adds	r6, #20
 801f36a:	f104 0214 	add.w	r2, r4, #20
 801f36e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 801f372:	f100 0514 	add.w	r5, r0, #20
 801f376:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 801f37a:	2300      	movs	r3, #0
 801f37c:	f856 8b04 	ldr.w	r8, [r6], #4
 801f380:	f852 4b04 	ldr.w	r4, [r2], #4
 801f384:	fa13 f388 	uxtah	r3, r3, r8
 801f388:	b2a1      	uxth	r1, r4
 801f38a:	0c24      	lsrs	r4, r4, #16
 801f38c:	1a59      	subs	r1, r3, r1
 801f38e:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 801f392:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801f396:	b289      	uxth	r1, r1
 801f398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801f39c:	4594      	cmp	ip, r2
 801f39e:	f845 1b04 	str.w	r1, [r5], #4
 801f3a2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f3a6:	4634      	mov	r4, r6
 801f3a8:	d8e8      	bhi.n	801f37c <__mdiff+0x40>
 801f3aa:	45b6      	cmp	lr, r6
 801f3ac:	46ac      	mov	ip, r5
 801f3ae:	d915      	bls.n	801f3dc <__mdiff+0xa0>
 801f3b0:	f854 2b04 	ldr.w	r2, [r4], #4
 801f3b4:	fa13 f182 	uxtah	r1, r3, r2
 801f3b8:	0c13      	lsrs	r3, r2, #16
 801f3ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801f3be:	b289      	uxth	r1, r1
 801f3c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801f3c4:	45a6      	cmp	lr, r4
 801f3c6:	f845 1b04 	str.w	r1, [r5], #4
 801f3ca:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f3ce:	d8ef      	bhi.n	801f3b0 <__mdiff+0x74>
 801f3d0:	43f6      	mvns	r6, r6
 801f3d2:	4476      	add	r6, lr
 801f3d4:	f026 0503 	bic.w	r5, r6, #3
 801f3d8:	3504      	adds	r5, #4
 801f3da:	4465      	add	r5, ip
 801f3dc:	3d04      	subs	r5, #4
 801f3de:	b921      	cbnz	r1, 801f3ea <__mdiff+0xae>
 801f3e0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801f3e4:	3f01      	subs	r7, #1
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d0fa      	beq.n	801f3e0 <__mdiff+0xa4>
 801f3ea:	6107      	str	r7, [r0, #16]
 801f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3f0:	4633      	mov	r3, r6
 801f3f2:	f04f 0801 	mov.w	r8, #1
 801f3f6:	4626      	mov	r6, r4
 801f3f8:	461c      	mov	r4, r3
 801f3fa:	e7ad      	b.n	801f358 <__mdiff+0x1c>
 801f3fc:	4628      	mov	r0, r5
 801f3fe:	4639      	mov	r1, r7
 801f400:	f7ff fd6e 	bl	801eee0 <_Balloc>
 801f404:	2301      	movs	r3, #1
 801f406:	6147      	str	r7, [r0, #20]
 801f408:	6103      	str	r3, [r0, #16]
 801f40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f40e:	bf00      	nop

0801f410 <__d2b>:
 801f410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f414:	b082      	sub	sp, #8
 801f416:	2101      	movs	r1, #1
 801f418:	461c      	mov	r4, r3
 801f41a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 801f41e:	4615      	mov	r5, r2
 801f420:	9e08      	ldr	r6, [sp, #32]
 801f422:	f7ff fd5d 	bl	801eee0 <_Balloc>
 801f426:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801f42a:	4680      	mov	r8, r0
 801f42c:	b10f      	cbz	r7, 801f432 <__d2b+0x22>
 801f42e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 801f432:	9401      	str	r4, [sp, #4]
 801f434:	b31d      	cbz	r5, 801f47e <__d2b+0x6e>
 801f436:	a802      	add	r0, sp, #8
 801f438:	f840 5d08 	str.w	r5, [r0, #-8]!
 801f43c:	f7ff fde2 	bl	801f004 <__lo0bits>
 801f440:	2800      	cmp	r0, #0
 801f442:	d134      	bne.n	801f4ae <__d2b+0x9e>
 801f444:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801f448:	f8c8 2014 	str.w	r2, [r8, #20]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	bf14      	ite	ne
 801f450:	2402      	movne	r4, #2
 801f452:	2401      	moveq	r4, #1
 801f454:	f8c8 3018 	str.w	r3, [r8, #24]
 801f458:	f8c8 4010 	str.w	r4, [r8, #16]
 801f45c:	b9df      	cbnz	r7, 801f496 <__d2b+0x86>
 801f45e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801f462:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f466:	6030      	str	r0, [r6, #0]
 801f468:	6918      	ldr	r0, [r3, #16]
 801f46a:	f7ff fdab 	bl	801efc4 <__hi0bits>
 801f46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f470:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 801f474:	6018      	str	r0, [r3, #0]
 801f476:	4640      	mov	r0, r8
 801f478:	b002      	add	sp, #8
 801f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f47e:	a801      	add	r0, sp, #4
 801f480:	f7ff fdc0 	bl	801f004 <__lo0bits>
 801f484:	2401      	movs	r4, #1
 801f486:	9b01      	ldr	r3, [sp, #4]
 801f488:	f8c8 3014 	str.w	r3, [r8, #20]
 801f48c:	3020      	adds	r0, #32
 801f48e:	f8c8 4010 	str.w	r4, [r8, #16]
 801f492:	2f00      	cmp	r7, #0
 801f494:	d0e3      	beq.n	801f45e <__d2b+0x4e>
 801f496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f498:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 801f49c:	4407      	add	r7, r0
 801f49e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f4a2:	6037      	str	r7, [r6, #0]
 801f4a4:	6018      	str	r0, [r3, #0]
 801f4a6:	4640      	mov	r0, r8
 801f4a8:	b002      	add	sp, #8
 801f4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f4ae:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801f4b2:	f1c0 0120 	rsb	r1, r0, #32
 801f4b6:	fa03 f101 	lsl.w	r1, r3, r1
 801f4ba:	430a      	orrs	r2, r1
 801f4bc:	40c3      	lsrs	r3, r0
 801f4be:	9301      	str	r3, [sp, #4]
 801f4c0:	f8c8 2014 	str.w	r2, [r8, #20]
 801f4c4:	e7c2      	b.n	801f44c <__d2b+0x3c>
 801f4c6:	bf00      	nop

0801f4c8 <_realloc_r>:
 801f4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4cc:	4617      	mov	r7, r2
 801f4ce:	b083      	sub	sp, #12
 801f4d0:	460e      	mov	r6, r1
 801f4d2:	2900      	cmp	r1, #0
 801f4d4:	f000 80e7 	beq.w	801f6a6 <_realloc_r+0x1de>
 801f4d8:	4681      	mov	r9, r0
 801f4da:	f107 050b 	add.w	r5, r7, #11
 801f4de:	f7ff fcfb 	bl	801eed8 <__malloc_lock>
 801f4e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f4e6:	2d16      	cmp	r5, #22
 801f4e8:	f023 0403 	bic.w	r4, r3, #3
 801f4ec:	f1a6 0808 	sub.w	r8, r6, #8
 801f4f0:	d84c      	bhi.n	801f58c <_realloc_r+0xc4>
 801f4f2:	2210      	movs	r2, #16
 801f4f4:	4615      	mov	r5, r2
 801f4f6:	42af      	cmp	r7, r5
 801f4f8:	d84d      	bhi.n	801f596 <_realloc_r+0xce>
 801f4fa:	4294      	cmp	r4, r2
 801f4fc:	f280 8084 	bge.w	801f608 <_realloc_r+0x140>
 801f500:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 801f8b0 <_realloc_r+0x3e8>
 801f504:	f8db 0008 	ldr.w	r0, [fp, #8]
 801f508:	eb08 0104 	add.w	r1, r8, r4
 801f50c:	4288      	cmp	r0, r1
 801f50e:	f000 80d6 	beq.w	801f6be <_realloc_r+0x1f6>
 801f512:	6848      	ldr	r0, [r1, #4]
 801f514:	f020 0e01 	bic.w	lr, r0, #1
 801f518:	448e      	add	lr, r1
 801f51a:	f8de e004 	ldr.w	lr, [lr, #4]
 801f51e:	f01e 0f01 	tst.w	lr, #1
 801f522:	d13f      	bne.n	801f5a4 <_realloc_r+0xdc>
 801f524:	f020 0003 	bic.w	r0, r0, #3
 801f528:	4420      	add	r0, r4
 801f52a:	4290      	cmp	r0, r2
 801f52c:	f280 80c1 	bge.w	801f6b2 <_realloc_r+0x1ea>
 801f530:	07db      	lsls	r3, r3, #31
 801f532:	f100 808f 	bmi.w	801f654 <_realloc_r+0x18c>
 801f536:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801f53a:	ebc3 0a08 	rsb	sl, r3, r8
 801f53e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f542:	f023 0303 	bic.w	r3, r3, #3
 801f546:	eb00 0e03 	add.w	lr, r0, r3
 801f54a:	4596      	cmp	lr, r2
 801f54c:	db34      	blt.n	801f5b8 <_realloc_r+0xf0>
 801f54e:	68cb      	ldr	r3, [r1, #12]
 801f550:	688a      	ldr	r2, [r1, #8]
 801f552:	4657      	mov	r7, sl
 801f554:	60d3      	str	r3, [r2, #12]
 801f556:	609a      	str	r2, [r3, #8]
 801f558:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801f55c:	f8da 300c 	ldr.w	r3, [sl, #12]
 801f560:	60cb      	str	r3, [r1, #12]
 801f562:	1f22      	subs	r2, r4, #4
 801f564:	2a24      	cmp	r2, #36	; 0x24
 801f566:	6099      	str	r1, [r3, #8]
 801f568:	f200 8136 	bhi.w	801f7d8 <_realloc_r+0x310>
 801f56c:	2a13      	cmp	r2, #19
 801f56e:	f240 80fd 	bls.w	801f76c <_realloc_r+0x2a4>
 801f572:	6833      	ldr	r3, [r6, #0]
 801f574:	f8ca 3008 	str.w	r3, [sl, #8]
 801f578:	6873      	ldr	r3, [r6, #4]
 801f57a:	f8ca 300c 	str.w	r3, [sl, #12]
 801f57e:	2a1b      	cmp	r2, #27
 801f580:	f200 8140 	bhi.w	801f804 <_realloc_r+0x33c>
 801f584:	3608      	adds	r6, #8
 801f586:	f10a 0310 	add.w	r3, sl, #16
 801f58a:	e0f0      	b.n	801f76e <_realloc_r+0x2a6>
 801f58c:	f025 0507 	bic.w	r5, r5, #7
 801f590:	2d00      	cmp	r5, #0
 801f592:	462a      	mov	r2, r5
 801f594:	daaf      	bge.n	801f4f6 <_realloc_r+0x2e>
 801f596:	230c      	movs	r3, #12
 801f598:	2000      	movs	r0, #0
 801f59a:	f8c9 3000 	str.w	r3, [r9]
 801f59e:	b003      	add	sp, #12
 801f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5a4:	07d9      	lsls	r1, r3, #31
 801f5a6:	d455      	bmi.n	801f654 <_realloc_r+0x18c>
 801f5a8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801f5ac:	ebc3 0a08 	rsb	sl, r3, r8
 801f5b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f5b4:	f023 0303 	bic.w	r3, r3, #3
 801f5b8:	4423      	add	r3, r4
 801f5ba:	4293      	cmp	r3, r2
 801f5bc:	db4a      	blt.n	801f654 <_realloc_r+0x18c>
 801f5be:	4657      	mov	r7, sl
 801f5c0:	f8da 100c 	ldr.w	r1, [sl, #12]
 801f5c4:	f857 0f08 	ldr.w	r0, [r7, #8]!
 801f5c8:	1f22      	subs	r2, r4, #4
 801f5ca:	2a24      	cmp	r2, #36	; 0x24
 801f5cc:	60c1      	str	r1, [r0, #12]
 801f5ce:	6088      	str	r0, [r1, #8]
 801f5d0:	f200 810e 	bhi.w	801f7f0 <_realloc_r+0x328>
 801f5d4:	2a13      	cmp	r2, #19
 801f5d6:	f240 8109 	bls.w	801f7ec <_realloc_r+0x324>
 801f5da:	6831      	ldr	r1, [r6, #0]
 801f5dc:	f8ca 1008 	str.w	r1, [sl, #8]
 801f5e0:	6871      	ldr	r1, [r6, #4]
 801f5e2:	f8ca 100c 	str.w	r1, [sl, #12]
 801f5e6:	2a1b      	cmp	r2, #27
 801f5e8:	f200 8121 	bhi.w	801f82e <_realloc_r+0x366>
 801f5ec:	3608      	adds	r6, #8
 801f5ee:	f10a 0210 	add.w	r2, sl, #16
 801f5f2:	6831      	ldr	r1, [r6, #0]
 801f5f4:	6011      	str	r1, [r2, #0]
 801f5f6:	6871      	ldr	r1, [r6, #4]
 801f5f8:	6051      	str	r1, [r2, #4]
 801f5fa:	68b1      	ldr	r1, [r6, #8]
 801f5fc:	6091      	str	r1, [r2, #8]
 801f5fe:	461c      	mov	r4, r3
 801f600:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f604:	463e      	mov	r6, r7
 801f606:	46d0      	mov	r8, sl
 801f608:	1b62      	subs	r2, r4, r5
 801f60a:	2a0f      	cmp	r2, #15
 801f60c:	f003 0301 	and.w	r3, r3, #1
 801f610:	d80e      	bhi.n	801f630 <_realloc_r+0x168>
 801f612:	4323      	orrs	r3, r4
 801f614:	4444      	add	r4, r8
 801f616:	f8c8 3004 	str.w	r3, [r8, #4]
 801f61a:	6863      	ldr	r3, [r4, #4]
 801f61c:	f043 0301 	orr.w	r3, r3, #1
 801f620:	6063      	str	r3, [r4, #4]
 801f622:	4648      	mov	r0, r9
 801f624:	f7ff fc5a 	bl	801eedc <__malloc_unlock>
 801f628:	4630      	mov	r0, r6
 801f62a:	b003      	add	sp, #12
 801f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f630:	eb08 0105 	add.w	r1, r8, r5
 801f634:	431d      	orrs	r5, r3
 801f636:	f042 0301 	orr.w	r3, r2, #1
 801f63a:	440a      	add	r2, r1
 801f63c:	f8c8 5004 	str.w	r5, [r8, #4]
 801f640:	604b      	str	r3, [r1, #4]
 801f642:	6853      	ldr	r3, [r2, #4]
 801f644:	f043 0301 	orr.w	r3, r3, #1
 801f648:	3108      	adds	r1, #8
 801f64a:	6053      	str	r3, [r2, #4]
 801f64c:	4648      	mov	r0, r9
 801f64e:	f7fe fe5f 	bl	801e310 <_free_r>
 801f652:	e7e6      	b.n	801f622 <_realloc_r+0x15a>
 801f654:	4639      	mov	r1, r7
 801f656:	4648      	mov	r0, r9
 801f658:	f7ff f966 	bl	801e928 <_malloc_r>
 801f65c:	4607      	mov	r7, r0
 801f65e:	b1d8      	cbz	r0, 801f698 <_realloc_r+0x1d0>
 801f660:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f664:	f023 0201 	bic.w	r2, r3, #1
 801f668:	4442      	add	r2, r8
 801f66a:	f1a0 0108 	sub.w	r1, r0, #8
 801f66e:	4291      	cmp	r1, r2
 801f670:	f000 80ac 	beq.w	801f7cc <_realloc_r+0x304>
 801f674:	1f22      	subs	r2, r4, #4
 801f676:	2a24      	cmp	r2, #36	; 0x24
 801f678:	f200 8099 	bhi.w	801f7ae <_realloc_r+0x2e6>
 801f67c:	2a13      	cmp	r2, #19
 801f67e:	d86a      	bhi.n	801f756 <_realloc_r+0x28e>
 801f680:	4603      	mov	r3, r0
 801f682:	4632      	mov	r2, r6
 801f684:	6811      	ldr	r1, [r2, #0]
 801f686:	6019      	str	r1, [r3, #0]
 801f688:	6851      	ldr	r1, [r2, #4]
 801f68a:	6059      	str	r1, [r3, #4]
 801f68c:	6892      	ldr	r2, [r2, #8]
 801f68e:	609a      	str	r2, [r3, #8]
 801f690:	4631      	mov	r1, r6
 801f692:	4648      	mov	r0, r9
 801f694:	f7fe fe3c 	bl	801e310 <_free_r>
 801f698:	4648      	mov	r0, r9
 801f69a:	f7ff fc1f 	bl	801eedc <__malloc_unlock>
 801f69e:	4638      	mov	r0, r7
 801f6a0:	b003      	add	sp, #12
 801f6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6a6:	4611      	mov	r1, r2
 801f6a8:	b003      	add	sp, #12
 801f6aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6ae:	f7ff b93b 	b.w	801e928 <_malloc_r>
 801f6b2:	68ca      	ldr	r2, [r1, #12]
 801f6b4:	6889      	ldr	r1, [r1, #8]
 801f6b6:	4604      	mov	r4, r0
 801f6b8:	60ca      	str	r2, [r1, #12]
 801f6ba:	6091      	str	r1, [r2, #8]
 801f6bc:	e7a4      	b.n	801f608 <_realloc_r+0x140>
 801f6be:	6841      	ldr	r1, [r0, #4]
 801f6c0:	f021 0103 	bic.w	r1, r1, #3
 801f6c4:	4421      	add	r1, r4
 801f6c6:	f105 0010 	add.w	r0, r5, #16
 801f6ca:	4281      	cmp	r1, r0
 801f6cc:	da5b      	bge.n	801f786 <_realloc_r+0x2be>
 801f6ce:	07db      	lsls	r3, r3, #31
 801f6d0:	d4c0      	bmi.n	801f654 <_realloc_r+0x18c>
 801f6d2:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801f6d6:	ebc3 0a08 	rsb	sl, r3, r8
 801f6da:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f6de:	f023 0303 	bic.w	r3, r3, #3
 801f6e2:	eb01 0c03 	add.w	ip, r1, r3
 801f6e6:	4560      	cmp	r0, ip
 801f6e8:	f73f af66 	bgt.w	801f5b8 <_realloc_r+0xf0>
 801f6ec:	4657      	mov	r7, sl
 801f6ee:	f8da 300c 	ldr.w	r3, [sl, #12]
 801f6f2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801f6f6:	1f22      	subs	r2, r4, #4
 801f6f8:	2a24      	cmp	r2, #36	; 0x24
 801f6fa:	60cb      	str	r3, [r1, #12]
 801f6fc:	6099      	str	r1, [r3, #8]
 801f6fe:	f200 80b8 	bhi.w	801f872 <_realloc_r+0x3aa>
 801f702:	2a13      	cmp	r2, #19
 801f704:	f240 80a9 	bls.w	801f85a <_realloc_r+0x392>
 801f708:	6833      	ldr	r3, [r6, #0]
 801f70a:	f8ca 3008 	str.w	r3, [sl, #8]
 801f70e:	6873      	ldr	r3, [r6, #4]
 801f710:	f8ca 300c 	str.w	r3, [sl, #12]
 801f714:	2a1b      	cmp	r2, #27
 801f716:	f200 80b5 	bhi.w	801f884 <_realloc_r+0x3bc>
 801f71a:	3608      	adds	r6, #8
 801f71c:	f10a 0310 	add.w	r3, sl, #16
 801f720:	6832      	ldr	r2, [r6, #0]
 801f722:	601a      	str	r2, [r3, #0]
 801f724:	6872      	ldr	r2, [r6, #4]
 801f726:	605a      	str	r2, [r3, #4]
 801f728:	68b2      	ldr	r2, [r6, #8]
 801f72a:	609a      	str	r2, [r3, #8]
 801f72c:	eb0a 0205 	add.w	r2, sl, r5
 801f730:	ebc5 030c 	rsb	r3, r5, ip
 801f734:	f043 0301 	orr.w	r3, r3, #1
 801f738:	f8cb 2008 	str.w	r2, [fp, #8]
 801f73c:	6053      	str	r3, [r2, #4]
 801f73e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f742:	f003 0301 	and.w	r3, r3, #1
 801f746:	431d      	orrs	r5, r3
 801f748:	4648      	mov	r0, r9
 801f74a:	f8ca 5004 	str.w	r5, [sl, #4]
 801f74e:	f7ff fbc5 	bl	801eedc <__malloc_unlock>
 801f752:	4638      	mov	r0, r7
 801f754:	e769      	b.n	801f62a <_realloc_r+0x162>
 801f756:	6833      	ldr	r3, [r6, #0]
 801f758:	6003      	str	r3, [r0, #0]
 801f75a:	6873      	ldr	r3, [r6, #4]
 801f75c:	6043      	str	r3, [r0, #4]
 801f75e:	2a1b      	cmp	r2, #27
 801f760:	d829      	bhi.n	801f7b6 <_realloc_r+0x2ee>
 801f762:	f100 0308 	add.w	r3, r0, #8
 801f766:	f106 0208 	add.w	r2, r6, #8
 801f76a:	e78b      	b.n	801f684 <_realloc_r+0x1bc>
 801f76c:	463b      	mov	r3, r7
 801f76e:	6832      	ldr	r2, [r6, #0]
 801f770:	601a      	str	r2, [r3, #0]
 801f772:	6872      	ldr	r2, [r6, #4]
 801f774:	605a      	str	r2, [r3, #4]
 801f776:	68b2      	ldr	r2, [r6, #8]
 801f778:	609a      	str	r2, [r3, #8]
 801f77a:	463e      	mov	r6, r7
 801f77c:	4674      	mov	r4, lr
 801f77e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f782:	46d0      	mov	r8, sl
 801f784:	e740      	b.n	801f608 <_realloc_r+0x140>
 801f786:	eb08 0205 	add.w	r2, r8, r5
 801f78a:	1b4b      	subs	r3, r1, r5
 801f78c:	f043 0301 	orr.w	r3, r3, #1
 801f790:	f8cb 2008 	str.w	r2, [fp, #8]
 801f794:	6053      	str	r3, [r2, #4]
 801f796:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f79a:	f003 0301 	and.w	r3, r3, #1
 801f79e:	431d      	orrs	r5, r3
 801f7a0:	4648      	mov	r0, r9
 801f7a2:	f846 5c04 	str.w	r5, [r6, #-4]
 801f7a6:	f7ff fb99 	bl	801eedc <__malloc_unlock>
 801f7aa:	4630      	mov	r0, r6
 801f7ac:	e73d      	b.n	801f62a <_realloc_r+0x162>
 801f7ae:	4631      	mov	r1, r6
 801f7b0:	f7f9 febc 	bl	801952c <memmove>
 801f7b4:	e76c      	b.n	801f690 <_realloc_r+0x1c8>
 801f7b6:	68b3      	ldr	r3, [r6, #8]
 801f7b8:	6083      	str	r3, [r0, #8]
 801f7ba:	68f3      	ldr	r3, [r6, #12]
 801f7bc:	60c3      	str	r3, [r0, #12]
 801f7be:	2a24      	cmp	r2, #36	; 0x24
 801f7c0:	d02c      	beq.n	801f81c <_realloc_r+0x354>
 801f7c2:	f100 0310 	add.w	r3, r0, #16
 801f7c6:	f106 0210 	add.w	r2, r6, #16
 801f7ca:	e75b      	b.n	801f684 <_realloc_r+0x1bc>
 801f7cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801f7d0:	f022 0203 	bic.w	r2, r2, #3
 801f7d4:	4414      	add	r4, r2
 801f7d6:	e717      	b.n	801f608 <_realloc_r+0x140>
 801f7d8:	4631      	mov	r1, r6
 801f7da:	4638      	mov	r0, r7
 801f7dc:	4674      	mov	r4, lr
 801f7de:	463e      	mov	r6, r7
 801f7e0:	f7f9 fea4 	bl	801952c <memmove>
 801f7e4:	46d0      	mov	r8, sl
 801f7e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f7ea:	e70d      	b.n	801f608 <_realloc_r+0x140>
 801f7ec:	463a      	mov	r2, r7
 801f7ee:	e700      	b.n	801f5f2 <_realloc_r+0x12a>
 801f7f0:	4631      	mov	r1, r6
 801f7f2:	4638      	mov	r0, r7
 801f7f4:	461c      	mov	r4, r3
 801f7f6:	463e      	mov	r6, r7
 801f7f8:	f7f9 fe98 	bl	801952c <memmove>
 801f7fc:	46d0      	mov	r8, sl
 801f7fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f802:	e701      	b.n	801f608 <_realloc_r+0x140>
 801f804:	68b3      	ldr	r3, [r6, #8]
 801f806:	f8ca 3010 	str.w	r3, [sl, #16]
 801f80a:	68f3      	ldr	r3, [r6, #12]
 801f80c:	f8ca 3014 	str.w	r3, [sl, #20]
 801f810:	2a24      	cmp	r2, #36	; 0x24
 801f812:	d018      	beq.n	801f846 <_realloc_r+0x37e>
 801f814:	3610      	adds	r6, #16
 801f816:	f10a 0318 	add.w	r3, sl, #24
 801f81a:	e7a8      	b.n	801f76e <_realloc_r+0x2a6>
 801f81c:	6933      	ldr	r3, [r6, #16]
 801f81e:	6103      	str	r3, [r0, #16]
 801f820:	6973      	ldr	r3, [r6, #20]
 801f822:	6143      	str	r3, [r0, #20]
 801f824:	f106 0218 	add.w	r2, r6, #24
 801f828:	f100 0318 	add.w	r3, r0, #24
 801f82c:	e72a      	b.n	801f684 <_realloc_r+0x1bc>
 801f82e:	68b1      	ldr	r1, [r6, #8]
 801f830:	f8ca 1010 	str.w	r1, [sl, #16]
 801f834:	68f1      	ldr	r1, [r6, #12]
 801f836:	f8ca 1014 	str.w	r1, [sl, #20]
 801f83a:	2a24      	cmp	r2, #36	; 0x24
 801f83c:	d00f      	beq.n	801f85e <_realloc_r+0x396>
 801f83e:	3610      	adds	r6, #16
 801f840:	f10a 0218 	add.w	r2, sl, #24
 801f844:	e6d5      	b.n	801f5f2 <_realloc_r+0x12a>
 801f846:	6933      	ldr	r3, [r6, #16]
 801f848:	f8ca 3018 	str.w	r3, [sl, #24]
 801f84c:	6973      	ldr	r3, [r6, #20]
 801f84e:	f8ca 301c 	str.w	r3, [sl, #28]
 801f852:	3618      	adds	r6, #24
 801f854:	f10a 0320 	add.w	r3, sl, #32
 801f858:	e789      	b.n	801f76e <_realloc_r+0x2a6>
 801f85a:	463b      	mov	r3, r7
 801f85c:	e760      	b.n	801f720 <_realloc_r+0x258>
 801f85e:	6932      	ldr	r2, [r6, #16]
 801f860:	f8ca 2018 	str.w	r2, [sl, #24]
 801f864:	6972      	ldr	r2, [r6, #20]
 801f866:	f8ca 201c 	str.w	r2, [sl, #28]
 801f86a:	3618      	adds	r6, #24
 801f86c:	f10a 0220 	add.w	r2, sl, #32
 801f870:	e6bf      	b.n	801f5f2 <_realloc_r+0x12a>
 801f872:	4631      	mov	r1, r6
 801f874:	4638      	mov	r0, r7
 801f876:	f8cd c004 	str.w	ip, [sp, #4]
 801f87a:	f7f9 fe57 	bl	801952c <memmove>
 801f87e:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f882:	e753      	b.n	801f72c <_realloc_r+0x264>
 801f884:	68b3      	ldr	r3, [r6, #8]
 801f886:	f8ca 3010 	str.w	r3, [sl, #16]
 801f88a:	68f3      	ldr	r3, [r6, #12]
 801f88c:	f8ca 3014 	str.w	r3, [sl, #20]
 801f890:	2a24      	cmp	r2, #36	; 0x24
 801f892:	d003      	beq.n	801f89c <_realloc_r+0x3d4>
 801f894:	3610      	adds	r6, #16
 801f896:	f10a 0318 	add.w	r3, sl, #24
 801f89a:	e741      	b.n	801f720 <_realloc_r+0x258>
 801f89c:	6933      	ldr	r3, [r6, #16]
 801f89e:	f8ca 3018 	str.w	r3, [sl, #24]
 801f8a2:	6973      	ldr	r3, [r6, #20]
 801f8a4:	f8ca 301c 	str.w	r3, [sl, #28]
 801f8a8:	3618      	adds	r6, #24
 801f8aa:	f10a 0320 	add.w	r3, sl, #32
 801f8ae:	e737      	b.n	801f720 <_realloc_r+0x258>
 801f8b0:	200007f8 	.word	0x200007f8

0801f8b4 <_sbrk_r>:
 801f8b4:	b538      	push	{r3, r4, r5, lr}
 801f8b6:	4c07      	ldr	r4, [pc, #28]	; (801f8d4 <_sbrk_r+0x20>)
 801f8b8:	2300      	movs	r3, #0
 801f8ba:	4605      	mov	r5, r0
 801f8bc:	4608      	mov	r0, r1
 801f8be:	6023      	str	r3, [r4, #0]
 801f8c0:	f7e2 fe44 	bl	800254c <_sbrk>
 801f8c4:	1c43      	adds	r3, r0, #1
 801f8c6:	d000      	beq.n	801f8ca <_sbrk_r+0x16>
 801f8c8:	bd38      	pop	{r3, r4, r5, pc}
 801f8ca:	6823      	ldr	r3, [r4, #0]
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	d0fb      	beq.n	801f8c8 <_sbrk_r+0x14>
 801f8d0:	602b      	str	r3, [r5, #0]
 801f8d2:	bd38      	pop	{r3, r4, r5, pc}
 801f8d4:	2000ec5c 	.word	0x2000ec5c

0801f8d8 <_raise_r>:
 801f8d8:	291f      	cmp	r1, #31
 801f8da:	b538      	push	{r3, r4, r5, lr}
 801f8dc:	d822      	bhi.n	801f924 <_raise_r+0x4c>
 801f8de:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801f8e2:	4605      	mov	r5, r0
 801f8e4:	460c      	mov	r4, r1
 801f8e6:	b19a      	cbz	r2, 801f910 <_raise_r+0x38>
 801f8e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f8ec:	b183      	cbz	r3, 801f910 <_raise_r+0x38>
 801f8ee:	2b01      	cmp	r3, #1
 801f8f0:	d00c      	beq.n	801f90c <_raise_r+0x34>
 801f8f2:	1c59      	adds	r1, r3, #1
 801f8f4:	d006      	beq.n	801f904 <_raise_r+0x2c>
 801f8f6:	2500      	movs	r5, #0
 801f8f8:	4620      	mov	r0, r4
 801f8fa:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 801f8fe:	4798      	blx	r3
 801f900:	4628      	mov	r0, r5
 801f902:	bd38      	pop	{r3, r4, r5, pc}
 801f904:	2316      	movs	r3, #22
 801f906:	6003      	str	r3, [r0, #0]
 801f908:	2001      	movs	r0, #1
 801f90a:	bd38      	pop	{r3, r4, r5, pc}
 801f90c:	2000      	movs	r0, #0
 801f90e:	bd38      	pop	{r3, r4, r5, pc}
 801f910:	4628      	mov	r0, r5
 801f912:	f000 f829 	bl	801f968 <_getpid_r>
 801f916:	4622      	mov	r2, r4
 801f918:	4601      	mov	r1, r0
 801f91a:	4628      	mov	r0, r5
 801f91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f920:	f000 b80e 	b.w	801f940 <_kill_r>
 801f924:	2316      	movs	r3, #22
 801f926:	6003      	str	r3, [r0, #0]
 801f928:	f04f 30ff 	mov.w	r0, #4294967295
 801f92c:	bd38      	pop	{r3, r4, r5, pc}
 801f92e:	bf00      	nop

0801f930 <raise>:
 801f930:	4b02      	ldr	r3, [pc, #8]	; (801f93c <raise+0xc>)
 801f932:	4601      	mov	r1, r0
 801f934:	6818      	ldr	r0, [r3, #0]
 801f936:	f7ff bfcf 	b.w	801f8d8 <_raise_r>
 801f93a:	bf00      	nop
 801f93c:	20000798 	.word	0x20000798

0801f940 <_kill_r>:
 801f940:	b538      	push	{r3, r4, r5, lr}
 801f942:	4c08      	ldr	r4, [pc, #32]	; (801f964 <_kill_r+0x24>)
 801f944:	2300      	movs	r3, #0
 801f946:	4605      	mov	r5, r0
 801f948:	4608      	mov	r0, r1
 801f94a:	4611      	mov	r1, r2
 801f94c:	6023      	str	r3, [r4, #0]
 801f94e:	f7e2 fdb7 	bl	80024c0 <_kill>
 801f952:	1c43      	adds	r3, r0, #1
 801f954:	d000      	beq.n	801f958 <_kill_r+0x18>
 801f956:	bd38      	pop	{r3, r4, r5, pc}
 801f958:	6823      	ldr	r3, [r4, #0]
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	d0fb      	beq.n	801f956 <_kill_r+0x16>
 801f95e:	602b      	str	r3, [r5, #0]
 801f960:	bd38      	pop	{r3, r4, r5, pc}
 801f962:	bf00      	nop
 801f964:	2000ec5c 	.word	0x2000ec5c

0801f968 <_getpid_r>:
 801f968:	f7e2 bd9b 	b.w	80024a2 <_getpid>

0801f96c <__sread>:
 801f96c:	b510      	push	{r4, lr}
 801f96e:	460c      	mov	r4, r1
 801f970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f974:	f000 fa1c 	bl	801fdb0 <_read_r>
 801f978:	2800      	cmp	r0, #0
 801f97a:	db03      	blt.n	801f984 <__sread+0x18>
 801f97c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801f97e:	4403      	add	r3, r0
 801f980:	6523      	str	r3, [r4, #80]	; 0x50
 801f982:	bd10      	pop	{r4, pc}
 801f984:	89a3      	ldrh	r3, [r4, #12]
 801f986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f98a:	81a3      	strh	r3, [r4, #12]
 801f98c:	bd10      	pop	{r4, pc}
 801f98e:	bf00      	nop

0801f990 <__swrite>:
 801f990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f994:	4616      	mov	r6, r2
 801f996:	898a      	ldrh	r2, [r1, #12]
 801f998:	461d      	mov	r5, r3
 801f99a:	05d3      	lsls	r3, r2, #23
 801f99c:	460c      	mov	r4, r1
 801f99e:	4607      	mov	r7, r0
 801f9a0:	d506      	bpl.n	801f9b0 <__swrite+0x20>
 801f9a2:	2200      	movs	r2, #0
 801f9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9a8:	2302      	movs	r3, #2
 801f9aa:	f000 f9ed 	bl	801fd88 <_lseek_r>
 801f9ae:	89a2      	ldrh	r2, [r4, #12]
 801f9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f9b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801f9b8:	81a2      	strh	r2, [r4, #12]
 801f9ba:	4638      	mov	r0, r7
 801f9bc:	4632      	mov	r2, r6
 801f9be:	462b      	mov	r3, r5
 801f9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f9c4:	f000 b922 	b.w	801fc0c <_write_r>

0801f9c8 <__sseek>:
 801f9c8:	b510      	push	{r4, lr}
 801f9ca:	460c      	mov	r4, r1
 801f9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9d0:	f000 f9da 	bl	801fd88 <_lseek_r>
 801f9d4:	89a3      	ldrh	r3, [r4, #12]
 801f9d6:	1c42      	adds	r2, r0, #1
 801f9d8:	bf0e      	itee	eq
 801f9da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f9de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f9e2:	6520      	strne	r0, [r4, #80]	; 0x50
 801f9e4:	81a3      	strh	r3, [r4, #12]
 801f9e6:	bd10      	pop	{r4, pc}

0801f9e8 <__sclose>:
 801f9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9ec:	f000 b952 	b.w	801fc94 <_close_r>

0801f9f0 <__ssprint_r>:
 801f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9f4:	6893      	ldr	r3, [r2, #8]
 801f9f6:	f8d2 8000 	ldr.w	r8, [r2]
 801f9fa:	b083      	sub	sp, #12
 801f9fc:	4691      	mov	r9, r2
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d072      	beq.n	801fae8 <__ssprint_r+0xf8>
 801fa02:	4607      	mov	r7, r0
 801fa04:	f04f 0b00 	mov.w	fp, #0
 801fa08:	6808      	ldr	r0, [r1, #0]
 801fa0a:	688b      	ldr	r3, [r1, #8]
 801fa0c:	460d      	mov	r5, r1
 801fa0e:	465c      	mov	r4, fp
 801fa10:	2c00      	cmp	r4, #0
 801fa12:	d045      	beq.n	801faa0 <__ssprint_r+0xb0>
 801fa14:	429c      	cmp	r4, r3
 801fa16:	461e      	mov	r6, r3
 801fa18:	469a      	mov	sl, r3
 801fa1a:	d348      	bcc.n	801faae <__ssprint_r+0xbe>
 801fa1c:	89ab      	ldrh	r3, [r5, #12]
 801fa1e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801fa22:	d02d      	beq.n	801fa80 <__ssprint_r+0x90>
 801fa24:	696e      	ldr	r6, [r5, #20]
 801fa26:	6929      	ldr	r1, [r5, #16]
 801fa28:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa2c:	ebc1 0a00 	rsb	sl, r1, r0
 801fa30:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801fa34:	1c60      	adds	r0, r4, #1
 801fa36:	1076      	asrs	r6, r6, #1
 801fa38:	4450      	add	r0, sl
 801fa3a:	4286      	cmp	r6, r0
 801fa3c:	4632      	mov	r2, r6
 801fa3e:	bf3c      	itt	cc
 801fa40:	4606      	movcc	r6, r0
 801fa42:	4632      	movcc	r2, r6
 801fa44:	055b      	lsls	r3, r3, #21
 801fa46:	d535      	bpl.n	801fab4 <__ssprint_r+0xc4>
 801fa48:	4611      	mov	r1, r2
 801fa4a:	4638      	mov	r0, r7
 801fa4c:	f7fe ff6c 	bl	801e928 <_malloc_r>
 801fa50:	2800      	cmp	r0, #0
 801fa52:	d039      	beq.n	801fac8 <__ssprint_r+0xd8>
 801fa54:	4652      	mov	r2, sl
 801fa56:	6929      	ldr	r1, [r5, #16]
 801fa58:	9001      	str	r0, [sp, #4]
 801fa5a:	f7e1 fadb 	bl	8001014 <memcpy>
 801fa5e:	89aa      	ldrh	r2, [r5, #12]
 801fa60:	9b01      	ldr	r3, [sp, #4]
 801fa62:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801fa66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801fa6a:	81aa      	strh	r2, [r5, #12]
 801fa6c:	ebca 0206 	rsb	r2, sl, r6
 801fa70:	eb03 000a 	add.w	r0, r3, sl
 801fa74:	616e      	str	r6, [r5, #20]
 801fa76:	612b      	str	r3, [r5, #16]
 801fa78:	6028      	str	r0, [r5, #0]
 801fa7a:	60aa      	str	r2, [r5, #8]
 801fa7c:	4626      	mov	r6, r4
 801fa7e:	46a2      	mov	sl, r4
 801fa80:	4652      	mov	r2, sl
 801fa82:	4659      	mov	r1, fp
 801fa84:	f7f9 fd52 	bl	801952c <memmove>
 801fa88:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801fa8c:	68ab      	ldr	r3, [r5, #8]
 801fa8e:	6828      	ldr	r0, [r5, #0]
 801fa90:	1b9b      	subs	r3, r3, r6
 801fa92:	4450      	add	r0, sl
 801fa94:	1b14      	subs	r4, r2, r4
 801fa96:	60ab      	str	r3, [r5, #8]
 801fa98:	6028      	str	r0, [r5, #0]
 801fa9a:	f8c9 4008 	str.w	r4, [r9, #8]
 801fa9e:	b31c      	cbz	r4, 801fae8 <__ssprint_r+0xf8>
 801faa0:	f8d8 b000 	ldr.w	fp, [r8]
 801faa4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801faa8:	f108 0808 	add.w	r8, r8, #8
 801faac:	e7b0      	b.n	801fa10 <__ssprint_r+0x20>
 801faae:	4626      	mov	r6, r4
 801fab0:	46a2      	mov	sl, r4
 801fab2:	e7e5      	b.n	801fa80 <__ssprint_r+0x90>
 801fab4:	4638      	mov	r0, r7
 801fab6:	f7ff fd07 	bl	801f4c8 <_realloc_r>
 801faba:	4603      	mov	r3, r0
 801fabc:	2800      	cmp	r0, #0
 801fabe:	d1d5      	bne.n	801fa6c <__ssprint_r+0x7c>
 801fac0:	4638      	mov	r0, r7
 801fac2:	6929      	ldr	r1, [r5, #16]
 801fac4:	f7fe fc24 	bl	801e310 <_free_r>
 801fac8:	230c      	movs	r3, #12
 801faca:	603b      	str	r3, [r7, #0]
 801facc:	89ab      	ldrh	r3, [r5, #12]
 801face:	2200      	movs	r2, #0
 801fad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fad4:	f04f 30ff 	mov.w	r0, #4294967295
 801fad8:	81ab      	strh	r3, [r5, #12]
 801fada:	f8c9 2008 	str.w	r2, [r9, #8]
 801fade:	f8c9 2004 	str.w	r2, [r9, #4]
 801fae2:	b003      	add	sp, #12
 801fae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fae8:	2000      	movs	r0, #0
 801faea:	f8c9 0004 	str.w	r0, [r9, #4]
 801faee:	b003      	add	sp, #12
 801faf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faf4 <__swbuf_r>:
 801faf4:	b570      	push	{r4, r5, r6, lr}
 801faf6:	460d      	mov	r5, r1
 801faf8:	4614      	mov	r4, r2
 801fafa:	4606      	mov	r6, r0
 801fafc:	b110      	cbz	r0, 801fb04 <__swbuf_r+0x10>
 801fafe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d048      	beq.n	801fb96 <__swbuf_r+0xa2>
 801fb04:	89a2      	ldrh	r2, [r4, #12]
 801fb06:	69a3      	ldr	r3, [r4, #24]
 801fb08:	60a3      	str	r3, [r4, #8]
 801fb0a:	b291      	uxth	r1, r2
 801fb0c:	0708      	lsls	r0, r1, #28
 801fb0e:	d538      	bpl.n	801fb82 <__swbuf_r+0x8e>
 801fb10:	6923      	ldr	r3, [r4, #16]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d035      	beq.n	801fb82 <__swbuf_r+0x8e>
 801fb16:	0489      	lsls	r1, r1, #18
 801fb18:	b2ed      	uxtb	r5, r5
 801fb1a:	d515      	bpl.n	801fb48 <__swbuf_r+0x54>
 801fb1c:	6822      	ldr	r2, [r4, #0]
 801fb1e:	6961      	ldr	r1, [r4, #20]
 801fb20:	1ad3      	subs	r3, r2, r3
 801fb22:	428b      	cmp	r3, r1
 801fb24:	da1c      	bge.n	801fb60 <__swbuf_r+0x6c>
 801fb26:	3301      	adds	r3, #1
 801fb28:	68a1      	ldr	r1, [r4, #8]
 801fb2a:	1c50      	adds	r0, r2, #1
 801fb2c:	3901      	subs	r1, #1
 801fb2e:	60a1      	str	r1, [r4, #8]
 801fb30:	6020      	str	r0, [r4, #0]
 801fb32:	7015      	strb	r5, [r2, #0]
 801fb34:	6962      	ldr	r2, [r4, #20]
 801fb36:	429a      	cmp	r2, r3
 801fb38:	d01a      	beq.n	801fb70 <__swbuf_r+0x7c>
 801fb3a:	89a3      	ldrh	r3, [r4, #12]
 801fb3c:	07db      	lsls	r3, r3, #31
 801fb3e:	d501      	bpl.n	801fb44 <__swbuf_r+0x50>
 801fb40:	2d0a      	cmp	r5, #10
 801fb42:	d015      	beq.n	801fb70 <__swbuf_r+0x7c>
 801fb44:	4628      	mov	r0, r5
 801fb46:	bd70      	pop	{r4, r5, r6, pc}
 801fb48:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801fb4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801fb4e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 801fb52:	81a2      	strh	r2, [r4, #12]
 801fb54:	6822      	ldr	r2, [r4, #0]
 801fb56:	6661      	str	r1, [r4, #100]	; 0x64
 801fb58:	6961      	ldr	r1, [r4, #20]
 801fb5a:	1ad3      	subs	r3, r2, r3
 801fb5c:	428b      	cmp	r3, r1
 801fb5e:	dbe2      	blt.n	801fb26 <__swbuf_r+0x32>
 801fb60:	4630      	mov	r0, r6
 801fb62:	4621      	mov	r1, r4
 801fb64:	f7fe fa86 	bl	801e074 <_fflush_r>
 801fb68:	b940      	cbnz	r0, 801fb7c <__swbuf_r+0x88>
 801fb6a:	6822      	ldr	r2, [r4, #0]
 801fb6c:	2301      	movs	r3, #1
 801fb6e:	e7db      	b.n	801fb28 <__swbuf_r+0x34>
 801fb70:	4630      	mov	r0, r6
 801fb72:	4621      	mov	r1, r4
 801fb74:	f7fe fa7e 	bl	801e074 <_fflush_r>
 801fb78:	2800      	cmp	r0, #0
 801fb7a:	d0e3      	beq.n	801fb44 <__swbuf_r+0x50>
 801fb7c:	f04f 30ff 	mov.w	r0, #4294967295
 801fb80:	bd70      	pop	{r4, r5, r6, pc}
 801fb82:	4630      	mov	r0, r6
 801fb84:	4621      	mov	r1, r4
 801fb86:	f7fd f97f 	bl	801ce88 <__swsetup_r>
 801fb8a:	2800      	cmp	r0, #0
 801fb8c:	d1f6      	bne.n	801fb7c <__swbuf_r+0x88>
 801fb8e:	89a2      	ldrh	r2, [r4, #12]
 801fb90:	6923      	ldr	r3, [r4, #16]
 801fb92:	b291      	uxth	r1, r2
 801fb94:	e7bf      	b.n	801fb16 <__swbuf_r+0x22>
 801fb96:	f7fe fb01 	bl	801e19c <__sinit>
 801fb9a:	e7b3      	b.n	801fb04 <__swbuf_r+0x10>

0801fb9c <_wcrtomb_r>:
 801fb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fba0:	4605      	mov	r5, r0
 801fba2:	b086      	sub	sp, #24
 801fba4:	461e      	mov	r6, r3
 801fba6:	460c      	mov	r4, r1
 801fba8:	b1a1      	cbz	r1, 801fbd4 <_wcrtomb_r+0x38>
 801fbaa:	4b10      	ldr	r3, [pc, #64]	; (801fbec <_wcrtomb_r+0x50>)
 801fbac:	4617      	mov	r7, r2
 801fbae:	f8d3 8000 	ldr.w	r8, [r3]
 801fbb2:	f7fe fe3b 	bl	801e82c <__locale_charset>
 801fbb6:	9600      	str	r6, [sp, #0]
 801fbb8:	4603      	mov	r3, r0
 801fbba:	4621      	mov	r1, r4
 801fbbc:	463a      	mov	r2, r7
 801fbbe:	4628      	mov	r0, r5
 801fbc0:	47c0      	blx	r8
 801fbc2:	1c43      	adds	r3, r0, #1
 801fbc4:	d103      	bne.n	801fbce <_wcrtomb_r+0x32>
 801fbc6:	2200      	movs	r2, #0
 801fbc8:	238a      	movs	r3, #138	; 0x8a
 801fbca:	6032      	str	r2, [r6, #0]
 801fbcc:	602b      	str	r3, [r5, #0]
 801fbce:	b006      	add	sp, #24
 801fbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbd4:	4b05      	ldr	r3, [pc, #20]	; (801fbec <_wcrtomb_r+0x50>)
 801fbd6:	681f      	ldr	r7, [r3, #0]
 801fbd8:	f7fe fe28 	bl	801e82c <__locale_charset>
 801fbdc:	9600      	str	r6, [sp, #0]
 801fbde:	4603      	mov	r3, r0
 801fbe0:	4622      	mov	r2, r4
 801fbe2:	4628      	mov	r0, r5
 801fbe4:	a903      	add	r1, sp, #12
 801fbe6:	47b8      	blx	r7
 801fbe8:	e7eb      	b.n	801fbc2 <_wcrtomb_r+0x26>
 801fbea:	bf00      	nop
 801fbec:	20000c08 	.word	0x20000c08

0801fbf0 <__ascii_wctomb>:
 801fbf0:	b121      	cbz	r1, 801fbfc <__ascii_wctomb+0xc>
 801fbf2:	2aff      	cmp	r2, #255	; 0xff
 801fbf4:	d804      	bhi.n	801fc00 <__ascii_wctomb+0x10>
 801fbf6:	700a      	strb	r2, [r1, #0]
 801fbf8:	2001      	movs	r0, #1
 801fbfa:	4770      	bx	lr
 801fbfc:	4608      	mov	r0, r1
 801fbfe:	4770      	bx	lr
 801fc00:	238a      	movs	r3, #138	; 0x8a
 801fc02:	6003      	str	r3, [r0, #0]
 801fc04:	f04f 30ff 	mov.w	r0, #4294967295
 801fc08:	4770      	bx	lr
 801fc0a:	bf00      	nop

0801fc0c <_write_r>:
 801fc0c:	b570      	push	{r4, r5, r6, lr}
 801fc0e:	4c08      	ldr	r4, [pc, #32]	; (801fc30 <_write_r+0x24>)
 801fc10:	4606      	mov	r6, r0
 801fc12:	2500      	movs	r5, #0
 801fc14:	4608      	mov	r0, r1
 801fc16:	4611      	mov	r1, r2
 801fc18:	461a      	mov	r2, r3
 801fc1a:	6025      	str	r5, [r4, #0]
 801fc1c:	f7e2 fc72 	bl	8002504 <_write>
 801fc20:	1c43      	adds	r3, r0, #1
 801fc22:	d000      	beq.n	801fc26 <_write_r+0x1a>
 801fc24:	bd70      	pop	{r4, r5, r6, pc}
 801fc26:	6823      	ldr	r3, [r4, #0]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d0fb      	beq.n	801fc24 <_write_r+0x18>
 801fc2c:	6033      	str	r3, [r6, #0]
 801fc2e:	bd70      	pop	{r4, r5, r6, pc}
 801fc30:	2000ec5c 	.word	0x2000ec5c

0801fc34 <_calloc_r>:
 801fc34:	b510      	push	{r4, lr}
 801fc36:	fb02 f101 	mul.w	r1, r2, r1
 801fc3a:	f7fe fe75 	bl	801e928 <_malloc_r>
 801fc3e:	4604      	mov	r4, r0
 801fc40:	b168      	cbz	r0, 801fc5e <_calloc_r+0x2a>
 801fc42:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801fc46:	f022 0203 	bic.w	r2, r2, #3
 801fc4a:	3a04      	subs	r2, #4
 801fc4c:	2a24      	cmp	r2, #36	; 0x24
 801fc4e:	d818      	bhi.n	801fc82 <_calloc_r+0x4e>
 801fc50:	2a13      	cmp	r2, #19
 801fc52:	d806      	bhi.n	801fc62 <_calloc_r+0x2e>
 801fc54:	4603      	mov	r3, r0
 801fc56:	2200      	movs	r2, #0
 801fc58:	601a      	str	r2, [r3, #0]
 801fc5a:	605a      	str	r2, [r3, #4]
 801fc5c:	609a      	str	r2, [r3, #8]
 801fc5e:	4620      	mov	r0, r4
 801fc60:	bd10      	pop	{r4, pc}
 801fc62:	2300      	movs	r3, #0
 801fc64:	2a1b      	cmp	r2, #27
 801fc66:	6003      	str	r3, [r0, #0]
 801fc68:	6043      	str	r3, [r0, #4]
 801fc6a:	d90f      	bls.n	801fc8c <_calloc_r+0x58>
 801fc6c:	2a24      	cmp	r2, #36	; 0x24
 801fc6e:	6083      	str	r3, [r0, #8]
 801fc70:	60c3      	str	r3, [r0, #12]
 801fc72:	bf05      	ittet	eq
 801fc74:	6103      	streq	r3, [r0, #16]
 801fc76:	6143      	streq	r3, [r0, #20]
 801fc78:	f100 0310 	addne.w	r3, r0, #16
 801fc7c:	f100 0318 	addeq.w	r3, r0, #24
 801fc80:	e7e9      	b.n	801fc56 <_calloc_r+0x22>
 801fc82:	2100      	movs	r1, #0
 801fc84:	f7f9 fcb6 	bl	80195f4 <memset>
 801fc88:	4620      	mov	r0, r4
 801fc8a:	bd10      	pop	{r4, pc}
 801fc8c:	f100 0308 	add.w	r3, r0, #8
 801fc90:	e7e1      	b.n	801fc56 <_calloc_r+0x22>
 801fc92:	bf00      	nop

0801fc94 <_close_r>:
 801fc94:	b538      	push	{r3, r4, r5, lr}
 801fc96:	4c07      	ldr	r4, [pc, #28]	; (801fcb4 <_close_r+0x20>)
 801fc98:	2300      	movs	r3, #0
 801fc9a:	4605      	mov	r5, r0
 801fc9c:	4608      	mov	r0, r1
 801fc9e:	6023      	str	r3, [r4, #0]
 801fca0:	f7e2 fbf7 	bl	8002492 <_close>
 801fca4:	1c43      	adds	r3, r0, #1
 801fca6:	d000      	beq.n	801fcaa <_close_r+0x16>
 801fca8:	bd38      	pop	{r3, r4, r5, pc}
 801fcaa:	6823      	ldr	r3, [r4, #0]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d0fb      	beq.n	801fca8 <_close_r+0x14>
 801fcb0:	602b      	str	r3, [r5, #0]
 801fcb2:	bd38      	pop	{r3, r4, r5, pc}
 801fcb4:	2000ec5c 	.word	0x2000ec5c

0801fcb8 <_fclose_r>:
 801fcb8:	2900      	cmp	r1, #0
 801fcba:	d03d      	beq.n	801fd38 <_fclose_r+0x80>
 801fcbc:	b570      	push	{r4, r5, r6, lr}
 801fcbe:	4605      	mov	r5, r0
 801fcc0:	460c      	mov	r4, r1
 801fcc2:	b108      	cbz	r0, 801fcc8 <_fclose_r+0x10>
 801fcc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801fcc6:	b37b      	cbz	r3, 801fd28 <_fclose_r+0x70>
 801fcc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fccc:	b90b      	cbnz	r3, 801fcd2 <_fclose_r+0x1a>
 801fcce:	2000      	movs	r0, #0
 801fcd0:	bd70      	pop	{r4, r5, r6, pc}
 801fcd2:	4628      	mov	r0, r5
 801fcd4:	4621      	mov	r1, r4
 801fcd6:	f7fe f923 	bl	801df20 <__sflush_r>
 801fcda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801fcdc:	4606      	mov	r6, r0
 801fcde:	b133      	cbz	r3, 801fcee <_fclose_r+0x36>
 801fce0:	4628      	mov	r0, r5
 801fce2:	69e1      	ldr	r1, [r4, #28]
 801fce4:	4798      	blx	r3
 801fce6:	2800      	cmp	r0, #0
 801fce8:	bfb8      	it	lt
 801fcea:	f04f 36ff 	movlt.w	r6, #4294967295
 801fcee:	89a3      	ldrh	r3, [r4, #12]
 801fcf0:	061b      	lsls	r3, r3, #24
 801fcf2:	d41c      	bmi.n	801fd2e <_fclose_r+0x76>
 801fcf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fcf6:	b141      	cbz	r1, 801fd0a <_fclose_r+0x52>
 801fcf8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801fcfc:	4299      	cmp	r1, r3
 801fcfe:	d002      	beq.n	801fd06 <_fclose_r+0x4e>
 801fd00:	4628      	mov	r0, r5
 801fd02:	f7fe fb05 	bl	801e310 <_free_r>
 801fd06:	2300      	movs	r3, #0
 801fd08:	6323      	str	r3, [r4, #48]	; 0x30
 801fd0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801fd0c:	b121      	cbz	r1, 801fd18 <_fclose_r+0x60>
 801fd0e:	4628      	mov	r0, r5
 801fd10:	f7fe fafe 	bl	801e310 <_free_r>
 801fd14:	2300      	movs	r3, #0
 801fd16:	6463      	str	r3, [r4, #68]	; 0x44
 801fd18:	f7fe fa46 	bl	801e1a8 <__sfp_lock_acquire>
 801fd1c:	2300      	movs	r3, #0
 801fd1e:	81a3      	strh	r3, [r4, #12]
 801fd20:	f7fe fa44 	bl	801e1ac <__sfp_lock_release>
 801fd24:	4630      	mov	r0, r6
 801fd26:	bd70      	pop	{r4, r5, r6, pc}
 801fd28:	f7fe fa38 	bl	801e19c <__sinit>
 801fd2c:	e7cc      	b.n	801fcc8 <_fclose_r+0x10>
 801fd2e:	4628      	mov	r0, r5
 801fd30:	6921      	ldr	r1, [r4, #16]
 801fd32:	f7fe faed 	bl	801e310 <_free_r>
 801fd36:	e7dd      	b.n	801fcf4 <_fclose_r+0x3c>
 801fd38:	2000      	movs	r0, #0
 801fd3a:	4770      	bx	lr

0801fd3c <_fstat_r>:
 801fd3c:	b538      	push	{r3, r4, r5, lr}
 801fd3e:	4c08      	ldr	r4, [pc, #32]	; (801fd60 <_fstat_r+0x24>)
 801fd40:	2300      	movs	r3, #0
 801fd42:	4605      	mov	r5, r0
 801fd44:	4608      	mov	r0, r1
 801fd46:	4611      	mov	r1, r2
 801fd48:	6023      	str	r3, [r4, #0]
 801fd4a:	f7e2 fba5 	bl	8002498 <_fstat>
 801fd4e:	1c43      	adds	r3, r0, #1
 801fd50:	d000      	beq.n	801fd54 <_fstat_r+0x18>
 801fd52:	bd38      	pop	{r3, r4, r5, pc}
 801fd54:	6823      	ldr	r3, [r4, #0]
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d0fb      	beq.n	801fd52 <_fstat_r+0x16>
 801fd5a:	602b      	str	r3, [r5, #0]
 801fd5c:	bd38      	pop	{r3, r4, r5, pc}
 801fd5e:	bf00      	nop
 801fd60:	2000ec5c 	.word	0x2000ec5c

0801fd64 <_isatty_r>:
 801fd64:	b538      	push	{r3, r4, r5, lr}
 801fd66:	4c07      	ldr	r4, [pc, #28]	; (801fd84 <_isatty_r+0x20>)
 801fd68:	2300      	movs	r3, #0
 801fd6a:	4605      	mov	r5, r0
 801fd6c:	4608      	mov	r0, r1
 801fd6e:	6023      	str	r3, [r4, #0]
 801fd70:	f7e2 fb9a 	bl	80024a8 <_isatty>
 801fd74:	1c43      	adds	r3, r0, #1
 801fd76:	d000      	beq.n	801fd7a <_isatty_r+0x16>
 801fd78:	bd38      	pop	{r3, r4, r5, pc}
 801fd7a:	6823      	ldr	r3, [r4, #0]
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	d0fb      	beq.n	801fd78 <_isatty_r+0x14>
 801fd80:	602b      	str	r3, [r5, #0]
 801fd82:	bd38      	pop	{r3, r4, r5, pc}
 801fd84:	2000ec5c 	.word	0x2000ec5c

0801fd88 <_lseek_r>:
 801fd88:	b570      	push	{r4, r5, r6, lr}
 801fd8a:	4c08      	ldr	r4, [pc, #32]	; (801fdac <_lseek_r+0x24>)
 801fd8c:	4606      	mov	r6, r0
 801fd8e:	2500      	movs	r5, #0
 801fd90:	4608      	mov	r0, r1
 801fd92:	4611      	mov	r1, r2
 801fd94:	461a      	mov	r2, r3
 801fd96:	6025      	str	r5, [r4, #0]
 801fd98:	f7e2 fb9a 	bl	80024d0 <_lseek>
 801fd9c:	1c43      	adds	r3, r0, #1
 801fd9e:	d000      	beq.n	801fda2 <_lseek_r+0x1a>
 801fda0:	bd70      	pop	{r4, r5, r6, pc}
 801fda2:	6823      	ldr	r3, [r4, #0]
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	d0fb      	beq.n	801fda0 <_lseek_r+0x18>
 801fda8:	6033      	str	r3, [r6, #0]
 801fdaa:	bd70      	pop	{r4, r5, r6, pc}
 801fdac:	2000ec5c 	.word	0x2000ec5c

0801fdb0 <_read_r>:
 801fdb0:	b570      	push	{r4, r5, r6, lr}
 801fdb2:	4c08      	ldr	r4, [pc, #32]	; (801fdd4 <_read_r+0x24>)
 801fdb4:	4606      	mov	r6, r0
 801fdb6:	2500      	movs	r5, #0
 801fdb8:	4608      	mov	r0, r1
 801fdba:	4611      	mov	r1, r2
 801fdbc:	461a      	mov	r2, r3
 801fdbe:	6025      	str	r5, [r4, #0]
 801fdc0:	f7e2 fb88 	bl	80024d4 <_read>
 801fdc4:	1c43      	adds	r3, r0, #1
 801fdc6:	d000      	beq.n	801fdca <_read_r+0x1a>
 801fdc8:	bd70      	pop	{r4, r5, r6, pc}
 801fdca:	6823      	ldr	r3, [r4, #0]
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	d0fb      	beq.n	801fdc8 <_read_r+0x18>
 801fdd0:	6033      	str	r3, [r6, #0]
 801fdd2:	bd70      	pop	{r4, r5, r6, pc}
 801fdd4:	2000ec5c 	.word	0x2000ec5c
